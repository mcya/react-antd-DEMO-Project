var vendor_library =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__;

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(2);


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule React
	 */

	'use strict';

	var ReactDOM = __webpack_require__(3);
	var ReactDOMServer = __webpack_require__(148);
	var ReactIsomorphic = __webpack_require__(152);

	var assign = __webpack_require__(39);
	var deprecated = __webpack_require__(157);

	// `version` will be added here by ReactIsomorphic.
	var React = {};

	assign(React, ReactIsomorphic);

	assign(React, {
	  // ReactDOM
	  findDOMNode: deprecated('findDOMNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.findDOMNode),
	  render: deprecated('render', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.render),
	  unmountComponentAtNode: deprecated('unmountComponentAtNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.unmountComponentAtNode),

	  // ReactDOMServer
	  renderToString: deprecated('renderToString', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToString),
	  renderToStaticMarkup: deprecated('renderToStaticMarkup', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToStaticMarkup)
	});

	React.__SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOM;
	React.__SECRET_DOM_SERVER_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOMServer;

	module.exports = React;

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOM
	 */

	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

	'use strict';

	var ReactCurrentOwner = __webpack_require__(5);
	var ReactDOMTextComponent = __webpack_require__(6);
	var ReactDefaultInjection = __webpack_require__(71);
	var ReactInstanceHandles = __webpack_require__(45);
	var ReactMount = __webpack_require__(28);
	var ReactPerf = __webpack_require__(18);
	var ReactReconciler = __webpack_require__(50);
	var ReactUpdates = __webpack_require__(54);
	var ReactVersion = __webpack_require__(146);

	var findDOMNode = __webpack_require__(91);
	var renderSubtreeIntoContainer = __webpack_require__(147);
	var warning = __webpack_require__(25);

	ReactDefaultInjection.inject();

	var render = ReactPerf.measure('React', 'render', ReactMount.render);

	var React = {
	  findDOMNode: findDOMNode,
	  render: render,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  version: ReactVersion,

	  /* eslint-disable camelcase */
	  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
	  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
	};

	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	/* eslint-enable camelcase */
	if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    CurrentOwner: ReactCurrentOwner,
	    InstanceHandles: ReactInstanceHandles,
	    Mount: ReactMount,
	    Reconciler: ReactReconciler,
	    TextComponent: ReactDOMTextComponent
	  });
	}

	if (process.env.NODE_ENV !== 'production') {
	  var ExecutionEnvironment = __webpack_require__(9);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

	    // First check if devtools is not installed
	    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	      // If we're in Chrome or Firefox, provide a download link if not installed.
	      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	        console.debug('Download the React DevTools for a better development experience: ' + 'https://fb.me/react-devtools');
	      }
	    }

	    // If we're in IE8, check to see if we are in compatibility mode and provide
	    // information on preventing compatibility mode
	    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;

	    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : undefined;

	    var expectedFeatures = [
	    // shims
	    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.split, String.prototype.trim,

	    // shams
	    Object.create, Object.freeze];

	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        console.error('One or more ES5 shim/shams expected by React are not available: ' + 'https://fb.me/react-warning-polyfills');
	        break;
	      }
	    }
	  }
	}

	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 4 */
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	process.prependListener = noop;
	process.prependOnceListener = noop;

	process.listeners = function (name) { return [] }

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 5 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCurrentOwner
	 */

	'use strict';

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	var ReactCurrentOwner = {

	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null

	};

	module.exports = ReactCurrentOwner;

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextComponent
	 * @typechecks static-only
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(7);
	var DOMPropertyOperations = __webpack_require__(22);
	var ReactComponentBrowserEnvironment = __webpack_require__(26);
	var ReactMount = __webpack_require__(28);

	var assign = __webpack_require__(39);
	var escapeTextContentForBrowser = __webpack_require__(21);
	var setTextContent = __webpack_require__(20);
	var validateDOMNesting = __webpack_require__(70);

	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings in elements so that they can undergo
	 * the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function (props) {
	  // This constructor and its argument is currently used by mocks.
	};

	assign(ReactDOMTextComponent.prototype, {

	  /**
	   * @param {ReactText} text
	   * @internal
	   */
	  construct: function (text) {
	    // TODO: This is really a ReactText (ReactNode), not a ReactElement
	    this._currentElement = text;
	    this._stringText = '' + text;

	    // Properties
	    this._rootNodeID = null;
	    this._mountIndex = 0;
	  },

	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function (rootID, transaction, context) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (context[validateDOMNesting.ancestorInfoContextKey]) {
	        validateDOMNesting('span', null, context[validateDOMNesting.ancestorInfoContextKey]);
	      }
	    }

	    this._rootNodeID = rootID;
	    if (transaction.useCreateElement) {
	      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
	      var el = ownerDocument.createElement('span');
	      DOMPropertyOperations.setAttributeForID(el, rootID);
	      // Populate node cache
	      ReactMount.getID(el);
	      setTextContent(el, this._stringText);
	      return el;
	    } else {
	      var escapedText = escapeTextContentForBrowser(this._stringText);

	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd wrap this in a `span` for the reasons stated above, but
	        // since this is a situation where React won't take over (static pages),
	        // we can simply return the text as it is.
	        return escapedText;
	      }

	      return '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' + escapedText + '</span>';
	    }
	  },

	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function (nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        var node = ReactMount.getNode(this._rootNodeID);
	        DOMChildrenOperations.updateTextContent(node, nextStringText);
	      }
	    }
	  },

	  unmountComponent: function () {
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	  }

	});

	module.exports = ReactDOMTextComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMChildrenOperations
	 * @typechecks static-only
	 */

	'use strict';

	var Danger = __webpack_require__(8);
	var ReactMultiChildUpdateTypes = __webpack_require__(16);
	var ReactPerf = __webpack_require__(18);

	var setInnerHTML = __webpack_require__(19);
	var setTextContent = __webpack_require__(20);
	var invariant = __webpack_require__(13);

	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	function insertChildAt(parentNode, childNode, index) {
	  // By exploiting arrays returning `undefined` for an undefined index, we can
	  // rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. However, using `undefined` is not allowed by all
	  // browsers so we must replace it with `null`.

	  // fix render order error in safari
	  // IE8 will throw error when index out of list size.
	  var beforeChild = index >= parentNode.childNodes.length ? null : parentNode.childNodes.item(index);

	  parentNode.insertBefore(childNode, beforeChild);
	}

	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {

	  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

	  updateTextContent: setTextContent,

	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markupList List of markup strings.
	   * @internal
	   */
	  processUpdates: function (updates, markupList) {
	    var update;
	    // Mapping from parent IDs to initial child orderings.
	    var initialChildren = null;
	    // List of children that will be moved or removed.
	    var updatedChildren = null;

	    for (var i = 0; i < updates.length; i++) {
	      update = updates[i];
	      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING || update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
	        var updatedIndex = update.fromIndex;
	        var updatedChild = update.parentNode.childNodes[updatedIndex];
	        var parentID = update.parentID;

	        !updatedChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processUpdates(): Unable to find child %s of element. This ' + 'probably means the DOM was unexpectedly mutated (e.g., by the ' + 'browser), usually due to forgetting a <tbody> when using tables, ' + 'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' + 'in an <svg> parent. Try inspecting the child nodes of the element ' + 'with React ID `%s`.', updatedIndex, parentID) : invariant(false) : undefined;

	        initialChildren = initialChildren || {};
	        initialChildren[parentID] = initialChildren[parentID] || [];
	        initialChildren[parentID][updatedIndex] = updatedChild;

	        updatedChildren = updatedChildren || [];
	        updatedChildren.push(updatedChild);
	      }
	    }

	    var renderedMarkup;
	    // markupList is either a list of markup or just a list of elements
	    if (markupList.length && typeof markupList[0] === 'string') {
	      renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);
	    } else {
	      renderedMarkup = markupList;
	    }

	    // Remove updated children first so that `toIndex` is consistent.
	    if (updatedChildren) {
	      for (var j = 0; j < updatedChildren.length; j++) {
	        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
	      }
	    }

	    for (var k = 0; k < updates.length; k++) {
	      update = updates[k];
	      switch (update.type) {
	        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
	          insertChildAt(update.parentNode, renderedMarkup[update.markupIndex], update.toIndex);
	          break;
	        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
	          insertChildAt(update.parentNode, initialChildren[update.parentID][update.fromIndex], update.toIndex);
	          break;
	        case ReactMultiChildUpdateTypes.SET_MARKUP:
	          setInnerHTML(update.parentNode, update.content);
	          break;
	        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
	          setTextContent(update.parentNode, update.content);
	          break;
	        case ReactMultiChildUpdateTypes.REMOVE_NODE:
	          // Already removed by the for-loop above.
	          break;
	      }
	    }
	  }

	};

	ReactPerf.measureMethods(DOMChildrenOperations, 'DOMChildrenOperations', {
	  updateTextContent: 'updateTextContent'
	});

	module.exports = DOMChildrenOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Danger
	 * @typechecks static-only
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(9);

	var createNodesFromMarkup = __webpack_require__(10);
	var emptyFunction = __webpack_require__(15);
	var getMarkupWrap = __webpack_require__(14);
	var invariant = __webpack_require__(13);

	var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
	var RESULT_INDEX_ATTR = 'data-danger-index';

	/**
	 * Extracts the `nodeName` from a string of markup.
	 *
	 * NOTE: Extracting the `nodeName` does not require a regular expression match
	 * because we make assumptions about React-generated markup (i.e. there are no
	 * spaces surrounding the opening tag and there is at least one attribute).
	 *
	 * @param {string} markup String of markup.
	 * @return {string} Node name of the supplied markup.
	 * @see http://jsperf.com/extract-nodename
	 */
	function getNodeName(markup) {
	  return markup.substring(1, markup.indexOf(' '));
	}

	var Danger = {

	  /**
	   * Renders markup into an array of nodes. The markup is expected to render
	   * into a list of root nodes. Also, the length of `resultList` and
	   * `markupList` should be the same.
	   *
	   * @param {array<string>} markupList List of markup strings to render.
	   * @return {array<DOMElement>} List of rendered nodes.
	   * @internal
	   */
	  dangerouslyRenderMarkup: function (markupList) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' + 'thread. Make sure `window` and `document` are available globally ' + 'before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString for server rendering.') : invariant(false) : undefined;
	    var nodeName;
	    var markupByNodeName = {};
	    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
	    for (var i = 0; i < markupList.length; i++) {
	      !markupList[i] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Missing markup.') : invariant(false) : undefined;
	      nodeName = getNodeName(markupList[i]);
	      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
	      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
	      markupByNodeName[nodeName][i] = markupList[i];
	    }
	    var resultList = [];
	    var resultListAssignmentCount = 0;
	    for (nodeName in markupByNodeName) {
	      if (!markupByNodeName.hasOwnProperty(nodeName)) {
	        continue;
	      }
	      var markupListByNodeName = markupByNodeName[nodeName];

	      // This for-in loop skips the holes of the sparse array. The order of
	      // iteration should follow the order of assignment, which happens to match
	      // numerical index order, but we don't rely on that.
	      var resultIndex;
	      for (resultIndex in markupListByNodeName) {
	        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
	          var markup = markupListByNodeName[resultIndex];

	          // Push the requested markup with an additional RESULT_INDEX_ATTR
	          // attribute.  If the markup does not start with a < character, it
	          // will be discarded below (with an appropriate console.error).
	          markupListByNodeName[resultIndex] = markup.replace(OPEN_TAG_NAME_EXP,
	          // This index will be parsed back out below.
	          '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" ');
	        }
	      }

	      // Render each group of markup with similar wrapping `nodeName`.
	      var renderNodes = createNodesFromMarkup(markupListByNodeName.join(''), emptyFunction // Do nothing special with <script> tags.
	      );

	      for (var j = 0; j < renderNodes.length; ++j) {
	        var renderNode = renderNodes[j];
	        if (renderNode.hasAttribute && renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

	          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
	          renderNode.removeAttribute(RESULT_INDEX_ATTR);

	          !!resultList.hasOwnProperty(resultIndex) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Assigning to an already-occupied result index.') : invariant(false) : undefined;

	          resultList[resultIndex] = renderNode;

	          // This should match resultList.length and markupList.length when
	          // we're done.
	          resultListAssignmentCount += 1;
	        } else if (process.env.NODE_ENV !== 'production') {
	          console.error('Danger: Discarding unexpected node:', renderNode);
	        }
	      }
	    }

	    // Although resultList was populated out of order, it should now be a dense
	    // array.
	    !(resultListAssignmentCount === resultList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Did not assign to every index of resultList.') : invariant(false) : undefined;

	    !(resultList.length === markupList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Expected markup to render %s nodes, but rendered %s.', markupList.length, resultList.length) : invariant(false) : undefined;

	    return resultList;
	  },

	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' + 'worker thread. Make sure `window` and `document` are available ' + 'globally before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;
	    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(false) : undefined;
	    !(oldChild.tagName.toLowerCase() !== 'html') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' + '<html> node. This is because browser quirks make this unreliable ' + 'and/or slow. If you want to render to the root you must use ' + 'server rendering. See ReactDOMServer.renderToString().') : invariant(false) : undefined;

	    var newChild;
	    if (typeof markup === 'string') {
	      newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	    } else {
	      newChild = markup;
	    }
	    oldChild.parentNode.replaceChild(newChild, oldChild);
	  }

	};

	module.exports = Danger;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 9 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ExecutionEnvironment
	 */

	'use strict';

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {

	  canUseDOM: canUseDOM,

	  canUseWorkers: typeof Worker !== 'undefined',

	  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

	  canUseViewport: canUseDOM && !!window.screen,

	  isInWorker: !canUseDOM // For now, this is true - might change in the future.

	};

	module.exports = ExecutionEnvironment;

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createNodesFromMarkup
	 * @typechecks
	 */

	/*eslint-disable fb-www/unsafe-html*/

	'use strict';

	var ExecutionEnvironment = __webpack_require__(9);

	var createArrayFromMixed = __webpack_require__(11);
	var getMarkupWrap = __webpack_require__(14);
	var invariant = __webpack_require__(13);

	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;

	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}

	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : undefined;
	  var nodeName = getNodeName(markup);

	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];

	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }

	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : undefined;
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }

	  var nodes = createArrayFromMixed(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}

	module.exports = createNodesFromMarkup;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createArrayFromMixed
	 * @typechecks
	 */

	'use strict';

	var toArray = __webpack_require__(12);

	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return(
	    // not null/false
	    !!obj && (
	    // arrays are objects, NodeLists are functions in Safari
	    typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    'length' in obj &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    typeof obj.nodeType != 'number' && (
	    // a real array
	    Array.isArray(obj) ||
	    // arguments
	    'callee' in obj ||
	    // HTMLCollection/NodeList
	    'item' in obj)
	  );
	}

	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}

	module.exports = createArrayFromMixed;

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule toArray
	 * @typechecks
	 */

	'use strict';

	var invariant = __webpack_require__(13);

	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;

	  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
	  // old versions of Safari).
	  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : undefined;

	  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : undefined;

	  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : undefined;

	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }

	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}

	module.exports = toArray;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule invariant
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	function invariant(condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}

	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getMarkupWrap
	 */

	/*eslint-disable fb-www/unsafe-html */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(9);

	var invariant = __webpack_require__(13);

	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */

	var shouldWrap = {};

	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

	var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],

	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],

	  'optgroup': selectWrap,
	  'option': selectWrap,

	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,

	  'td': trWrap,
	  'th': trWrap
	};

	// Initialize the SVG elements since we know they'll always need to be wrapped
	// consistently. If they are created inside a <div> they will be initialized in
	// the wrong namespace (and will not display).
	var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
	svgElements.forEach(function (nodeName) {
	  markupWrap[nodeName] = svgWrap;
	  shouldWrap[nodeName] = true;
	});

	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : undefined;
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}

	module.exports = getMarkupWrap;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 15 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyFunction
	 */

	"use strict";

	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}

	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	function emptyFunction() {}

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};

	module.exports = emptyFunction;

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChildUpdateTypes
	 */

	'use strict';

	var keyMirror = __webpack_require__(17);

	/**
	 * When a component's children are updated, a series of update configuration
	 * objects are created in order to batch and serialize the required changes.
	 *
	 * Enumerates all the possible types of update configurations.
	 *
	 * @internal
	 */
	var ReactMultiChildUpdateTypes = keyMirror({
	  INSERT_MARKUP: null,
	  MOVE_EXISTING: null,
	  REMOVE_NODE: null,
	  SET_MARKUP: null,
	  TEXT_CONTENT: null
	});

	module.exports = ReactMultiChildUpdateTypes;

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyMirror
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(13);

	/**
	 * Constructs an enumeration with keys equal to their value.
	 *
	 * For example:
	 *
	 *   var COLORS = keyMirror({blue: null, red: null});
	 *   var myColor = COLORS.blue;
	 *   var isColorValid = !!COLORS[myColor];
	 *
	 * The last line could not be performed if the values of the generated enum were
	 * not equal to their keys.
	 *
	 *   Input:  {key1: val1, key2: val2}
	 *   Output: {key1: key1, key2: key2}
	 *
	 * @param {object} obj
	 * @return {object}
	 */
	var keyMirror = function (obj) {
	  var ret = {};
	  var key;
	  !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : undefined;
	  for (key in obj) {
	    if (!obj.hasOwnProperty(key)) {
	      continue;
	    }
	    ret[key] = key;
	  }
	  return ret;
	};

	module.exports = keyMirror;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPerf
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * ReactPerf is a general AOP system designed to measure performance. This
	 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
	 */
	var ReactPerf = {
	  /**
	   * Boolean to enable/disable measurement. Set to false by default to prevent
	   * accidental logging and perf loss.
	   */
	  enableMeasure: false,

	  /**
	   * Holds onto the measure function in use. By default, don't measure
	   * anything, but we'll override this if we inject a measure function.
	   */
	  storedMeasure: _noMeasure,

	  /**
	   * @param {object} object
	   * @param {string} objectName
	   * @param {object<string>} methodNames
	   */
	  measureMethods: function (object, objectName, methodNames) {
	    if (process.env.NODE_ENV !== 'production') {
	      for (var key in methodNames) {
	        if (!methodNames.hasOwnProperty(key)) {
	          continue;
	        }
	        object[key] = ReactPerf.measure(objectName, methodNames[key], object[key]);
	      }
	    }
	  },

	  /**
	   * Use this to wrap methods you want to measure. Zero overhead in production.
	   *
	   * @param {string} objName
	   * @param {string} fnName
	   * @param {function} func
	   * @return {function}
	   */
	  measure: function (objName, fnName, func) {
	    if (process.env.NODE_ENV !== 'production') {
	      var measuredFunc = null;
	      var wrapper = function () {
	        if (ReactPerf.enableMeasure) {
	          if (!measuredFunc) {
	            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
	          }
	          return measuredFunc.apply(this, arguments);
	        }
	        return func.apply(this, arguments);
	      };
	      wrapper.displayName = objName + '_' + fnName;
	      return wrapper;
	    }
	    return func;
	  },

	  injection: {
	    /**
	     * @param {function} measure
	     */
	    injectMeasure: function (measure) {
	      ReactPerf.storedMeasure = measure;
	    }
	  }
	};

	/**
	 * Simply passes through the measured function, without measuring it.
	 *
	 * @param {string} objName
	 * @param {string} fnName
	 * @param {function} func
	 * @return {function}
	 */
	function _noMeasure(objName, fnName, func) {
	  return func;
	}

	module.exports = ReactPerf;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setInnerHTML
	 */

	/* globals MSApp */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(9);

	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = function (node, html) {
	  node.innerHTML = html;
	};

	// Win8 apps: Allow all html to be inserted
	if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	  setInnerHTML = function (node, html) {
	    MSApp.execUnsafeLocalFunction(function () {
	      node.innerHTML = html;
	    });
	  };
	}

	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function (node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }

	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
	        // in hopes that this is preserved even if "\uFEFF" is transformed to
	        // the actual Unicode character (by Babel, for example).
	        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
	        node.innerHTML = String.fromCharCode(0xFEFF) + html;

	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	}

	module.exports = setInnerHTML;

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setTextContent
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(9);
	var escapeTextContentForBrowser = __webpack_require__(21);
	var setInnerHTML = __webpack_require__(19);

	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function (node, text) {
	  node.textContent = text;
	};

	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function (node, text) {
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}

	module.exports = setTextContent;

/***/ },
/* 21 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule escapeTextContentForBrowser
	 */

	'use strict';

	var ESCAPE_LOOKUP = {
	  '&': '&amp;',
	  '>': '&gt;',
	  '<': '&lt;',
	  '"': '&quot;',
	  '\'': '&#x27;'
	};

	var ESCAPE_REGEX = /[&><"']/g;

	function escaper(match) {
	  return ESCAPE_LOOKUP[match];
	}

	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  return ('' + text).replace(ESCAPE_REGEX, escaper);
	}

	module.exports = escapeTextContentForBrowser;

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMPropertyOperations
	 * @typechecks static-only
	 */

	'use strict';

	var DOMProperty = __webpack_require__(23);
	var ReactPerf = __webpack_require__(18);

	var quoteAttributeValueForBrowser = __webpack_require__(24);
	var warning = __webpack_require__(25);

	// Simplified subset
	var VALID_ATTRIBUTE_NAME_REGEX = /^[a-zA-Z_][\w\.\-]*$/;
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};

	function isAttributeNameSafe(attributeName) {
	  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
	    return true;
	  }
	  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
	    return false;
	  }
	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }
	  illegalAttributeNameCache[attributeName] = true;
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : undefined;
	  return false;
	}

	function shouldIgnoreValue(propertyInfo, value) {
	  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
	}

	if (process.env.NODE_ENV !== 'production') {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true
	  };
	  var warnedProperties = {};

	  var warnUnknownProperty = function (name) {
	    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return;
	    }

	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();

	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

	    // For now, only warn when we have a suggested correction. This prevents
	    // logging too much when using transferPropsTo.
	    process.env.NODE_ENV !== 'production' ? warning(standardName == null, 'Unknown DOM property %s. Did you mean %s?', name, standardName) : undefined;
	  };
	}

	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {

	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function (id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
	  },

	  setAttributeForID: function (node, id) {
	    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
	  },

	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function (name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      if (shouldIgnoreValue(propertyInfo, value)) {
	        return '';
	      }
	      var attributeName = propertyInfo.attributeName;
	      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	        return attributeName + '=""';
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	    return null;
	  },

	  /**
	   * Creates markup for a custom property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {string} Markup string, or empty string if the property was invalid.
	   */
	  createMarkupForCustomAttribute: function (name, value) {
	    if (!isAttributeNameSafe(name) || value == null) {
	      return '';
	    }
	    return name + '=' + quoteAttributeValueForBrowser(value);
	  },

	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function (node, name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(propertyInfo, value)) {
	        this.deleteValueForProperty(node, name);
	      } else if (propertyInfo.mustUseAttribute) {
	        var attributeName = propertyInfo.attributeName;
	        var namespace = propertyInfo.attributeNamespace;
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        if (namespace) {
	          node.setAttributeNS(namespace, attributeName, '' + value);
	        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	          node.setAttribute(attributeName, '');
	        } else {
	          node.setAttribute(attributeName, '' + value);
	        }
	      } else {
	        var propName = propertyInfo.propertyName;
	        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
	        // property type before comparing; only `value` does and is string.
	        if (!propertyInfo.hasSideEffects || '' + node[propName] !== '' + value) {
	          // Contrary to `setAttribute`, object properties are properly
	          // `toString`ed by IE8/9.
	          node[propName] = value;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      DOMPropertyOperations.setValueForAttribute(node, name, value);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	  },

	  setValueForAttribute: function (node, name, value) {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }
	    if (value == null) {
	      node.removeAttribute(name);
	    } else {
	      node.setAttribute(name, '' + value);
	    }
	  },

	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function (node, name) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (propertyInfo.mustUseAttribute) {
	        node.removeAttribute(propertyInfo.attributeName);
	      } else {
	        var propName = propertyInfo.propertyName;
	        var defaultValue = DOMProperty.getDefaultValueForProperty(node.nodeName, propName);
	        if (!propertyInfo.hasSideEffects || '' + node[propName] !== defaultValue) {
	          node[propName] = defaultValue;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	  }

	};

	ReactPerf.measureMethods(DOMPropertyOperations, 'DOMPropertyOperations', {
	  setValueForProperty: 'setValueForProperty',
	  setValueForAttribute: 'setValueForAttribute',
	  deleteValueForProperty: 'deleteValueForProperty'
	});

	module.exports = DOMPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMProperty
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(13);

	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}

	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_ATTRIBUTE: 0x1,
	  MUST_USE_PROPERTY: 0x2,
	  HAS_SIDE_EFFECTS: 0x4,
	  HAS_BOOLEAN_VALUE: 0x8,
	  HAS_NUMERIC_VALUE: 0x10,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
	   * attribute namespace URL. (Attribute names not specified use no namespace.)
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function (domPropertyConfig) {
	    var Injection = DOMPropertyInjection;
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
	    }

	    for (var propName in Properties) {
	      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' + '\'%s\' which has already been injected. You may be accidentally ' + 'injecting the same DOM property config twice, or you may be ' + 'injecting two configs that have conflicting property names.', propName) : invariant(false) : undefined;

	      var lowerCased = propName.toLowerCase();
	      var propConfig = Properties[propName];

	      var propertyInfo = {
	        attributeName: lowerCased,
	        attributeNamespace: null,
	        propertyName: propName,
	        mutationMethod: null,

	        mustUseAttribute: checkMask(propConfig, Injection.MUST_USE_ATTRIBUTE),
	        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
	        hasSideEffects: checkMask(propConfig, Injection.HAS_SIDE_EFFECTS),
	        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
	        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
	        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
	        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
	      };

	      !(!propertyInfo.mustUseAttribute || !propertyInfo.mustUseProperty) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Cannot require using both attribute and property: %s', propName) : invariant(false) : undefined;
	      !(propertyInfo.mustUseProperty || !propertyInfo.hasSideEffects) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Properties that have side effects must use property: %s', propName) : invariant(false) : undefined;
	      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or ' + 'numeric value, but not a combination: %s', propName) : invariant(false) : undefined;

	      if (process.env.NODE_ENV !== 'production') {
	        DOMProperty.getPossibleStandardName[lowerCased] = propName;
	      }

	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        propertyInfo.attributeName = attributeName;
	        if (process.env.NODE_ENV !== 'production') {
	          DOMProperty.getPossibleStandardName[attributeName] = propName;
	        }
	      }

	      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
	        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
	      }

	      if (DOMPropertyNames.hasOwnProperty(propName)) {
	        propertyInfo.propertyName = DOMPropertyNames[propName];
	      }

	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        propertyInfo.mutationMethod = DOMMutationMethods[propName];
	      }

	      DOMProperty.properties[propName] = propertyInfo;
	    }
	  }
	};
	var defaultValueCache = {};

	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {

	  ID_ATTRIBUTE_NAME: 'data-reactid',

	  /**
	   * Map from property "standard name" to an object with info about how to set
	   * the property in the DOM. Each object contains:
	   *
	   * attributeName:
	   *   Used when rendering markup or with `*Attribute()`.
	   * attributeNamespace
	   * propertyName:
	   *   Used on DOM node instances. (This includes properties that mutate due to
	   *   external factors.)
	   * mutationMethod:
	   *   If non-null, used instead of the property or `setAttribute()` after
	   *   initial render.
	   * mustUseAttribute:
	   *   Whether the property must be accessed and mutated using `*Attribute()`.
	   *   (This includes anything that fails `<propName> in <element>`.)
	   * mustUseProperty:
	   *   Whether the property must be accessed and mutated as an object property.
	   * hasSideEffects:
	   *   Whether or not setting a value causes side effects such as triggering
	   *   resources to be loaded or text selection changes. If true, we read from
	   *   the DOM before updating to ensure that the value is only set if it has
	   *   changed.
	   * hasBooleanValue:
	   *   Whether the property should be removed when set to a falsey value.
	   * hasNumericValue:
	   *   Whether the property must be numeric or parse as a numeric and should be
	   *   removed when set to a falsey value.
	   * hasPositiveNumericValue:
	   *   Whether the property must be positive numeric or parse as a positive
	   *   numeric and should be removed when set to a falsey value.
	   * hasOverloadedBooleanValue:
	   *   Whether the property can be used as a flag as well as with a value.
	   *   Removed when strictly equal to false; present without a value when
	   *   strictly equal to true; present with a value otherwise.
	   */
	  properties: {},

	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties. Available only in __DEV__.
	   * @type {Object}
	   */
	  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? {} : null,

	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],

	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function (attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },

	  /**
	   * Returns the default property value for a DOM property (i.e., not an
	   * attribute). Most default values are '' or false, but not all. Worse yet,
	   * some (in particular, `type`) vary depending on the type of element.
	   *
	   * TODO: Is it better to grab all the possible properties when creating an
	   * element to avoid having to create the same element twice?
	   */
	  getDefaultValueForProperty: function (nodeName, prop) {
	    var nodeDefaults = defaultValueCache[nodeName];
	    var testElement;
	    if (!nodeDefaults) {
	      defaultValueCache[nodeName] = nodeDefaults = {};
	    }
	    if (!(prop in nodeDefaults)) {
	      testElement = document.createElement(nodeName);
	      nodeDefaults[prop] = testElement[prop];
	    }
	    return nodeDefaults[prop];
	  },

	  injection: DOMPropertyInjection
	};

	module.exports = DOMProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule quoteAttributeValueForBrowser
	 */

	'use strict';

	var escapeTextContentForBrowser = __webpack_require__(21);

	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}

	module.exports = quoteAttributeValueForBrowser;

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule warning
	 */

	'use strict';

	var emptyFunction = __webpack_require__(15);

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  warning = function (condition, format) {
	    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      args[_key - 2] = arguments[_key];
	    }

	    if (format === undefined) {
	      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }

	    if (format.indexOf('Failed Composite propType: ') === 0) {
	      return; // Ignore CompositeComponent proptype check.
	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    }
	  };
	}

	module.exports = warning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentBrowserEnvironment
	 */

	'use strict';

	var ReactDOMIDOperations = __webpack_require__(27);
	var ReactMount = __webpack_require__(28);

	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {

	  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

	  replaceNodeWithMarkupByID: ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,

	  /**
	   * If a particular environment requires that some resources be cleaned up,
	   * specify this in the injected Mixin. In the DOM, we would likely want to
	   * purge any cached node ID lookups.
	   *
	   * @private
	   */
	  unmountIDFromEnvironment: function (rootNodeID) {
	    ReactMount.purgeID(rootNodeID);
	  }

	};

	module.exports = ReactComponentBrowserEnvironment;

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMIDOperations
	 * @typechecks static-only
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(7);
	var DOMPropertyOperations = __webpack_require__(22);
	var ReactMount = __webpack_require__(28);
	var ReactPerf = __webpack_require__(18);

	var invariant = __webpack_require__(13);

	/**
	 * Errors for properties that should not be updated with `updatePropertyByID()`.
	 *
	 * @type {object}
	 * @private
	 */
	var INVALID_PROPERTY_ERRORS = {
	  dangerouslySetInnerHTML: '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
	  style: '`style` must be set using `updateStylesByID()`.'
	};

	/**
	 * Operations used to process updates to DOM nodes.
	 */
	var ReactDOMIDOperations = {

	  /**
	   * Updates a DOM node with new property values. This should only be used to
	   * update DOM properties in `DOMProperty`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} name A valid property name, see `DOMProperty`.
	   * @param {*} value New value of the property.
	   * @internal
	   */
	  updatePropertyByID: function (id, name, value) {
	    var node = ReactMount.getNode(id);
	    !!INVALID_PROPERTY_ERRORS.hasOwnProperty(name) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updatePropertyByID(...): %s', INVALID_PROPERTY_ERRORS[name]) : invariant(false) : undefined;

	    // If we're updating to null or undefined, we should remove the property
	    // from the DOM node instead of inadvertantly setting to a string. This
	    // brings us in line with the same behavior we have on initial render.
	    if (value != null) {
	      DOMPropertyOperations.setValueForProperty(node, name, value);
	    } else {
	      DOMPropertyOperations.deleteValueForProperty(node, name);
	    }
	  },

	  /**
	   * Replaces a DOM node that exists in the document with markup.
	   *
	   * @param {string} id ID of child to be replaced.
	   * @param {string} markup Dangerous markup to inject in place of child.
	   * @internal
	   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
	   */
	  dangerouslyReplaceNodeWithMarkupByID: function (id, markup) {
	    var node = ReactMount.getNode(id);
	    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
	  },

	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markup List of markup strings.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function (updates, markup) {
	    for (var i = 0; i < updates.length; i++) {
	      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
	    }
	    DOMChildrenOperations.processUpdates(updates, markup);
	  }
	};

	ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
	  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',
	  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
	});

	module.exports = ReactDOMIDOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMount
	 */

	'use strict';

	var DOMProperty = __webpack_require__(23);
	var ReactBrowserEventEmitter = __webpack_require__(29);
	var ReactCurrentOwner = __webpack_require__(5);
	var ReactDOMFeatureFlags = __webpack_require__(41);
	var ReactElement = __webpack_require__(42);
	var ReactEmptyComponentRegistry = __webpack_require__(44);
	var ReactInstanceHandles = __webpack_require__(45);
	var ReactInstanceMap = __webpack_require__(47);
	var ReactMarkupChecksum = __webpack_require__(48);
	var ReactPerf = __webpack_require__(18);
	var ReactReconciler = __webpack_require__(50);
	var ReactUpdateQueue = __webpack_require__(53);
	var ReactUpdates = __webpack_require__(54);

	var assign = __webpack_require__(39);
	var emptyObject = __webpack_require__(58);
	var containsNode = __webpack_require__(59);
	var instantiateReactComponent = __webpack_require__(62);
	var invariant = __webpack_require__(13);
	var setInnerHTML = __webpack_require__(19);
	var shouldUpdateReactComponent = __webpack_require__(67);
	var validateDOMNesting = __webpack_require__(70);
	var warning = __webpack_require__(25);

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var nodeCache = {};

	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	var ownerDocumentContextKey = '__ReactMount_ownerDocument$' + Math.random().toString(36).slice(2);

	/** Mapping from reactRootID to React component instance. */
	var instancesByReactRootID = {};

	/** Mapping from reactRootID to `container` nodes. */
	var containersByReactRootID = {};

	if (process.env.NODE_ENV !== 'production') {
	  /** __DEV__-only mapping from reactRootID to root elements. */
	  var rootElementsByReactRootID = {};
	}

	// Used to store breadth-first search state in findComponentRoot.
	var findComponentRootReusableArray = [];

	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}

	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 * a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}

	/**
	 * @param {DOMElement} container DOM element that may contain a React component.
	 * @return {?string} A "reactRoot" ID, if a React component is rendered.
	 */
	function getReactRootID(container) {
	  var rootElement = getReactRootElementInContainer(container);
	  return rootElement && ReactMount.getID(rootElement);
	}

	/**
	 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
	 * element can return its control whose name or ID equals ATTR_NAME. All
	 * DOM nodes support `getAttributeNode` but this can also get called on
	 * other objects so just return '' if we're given something other than a
	 * DOM node (such as window).
	 *
	 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
	 * @return {string} ID of the supplied `domNode`.
	 */
	function getID(node) {
	  var id = internalGetID(node);
	  if (id) {
	    if (nodeCache.hasOwnProperty(id)) {
	      var cached = nodeCache[id];
	      if (cached !== node) {
	        !!isValid(cached, id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Two valid but unequal nodes with the same `%s`: %s', ATTR_NAME, id) : invariant(false) : undefined;

	        nodeCache[id] = node;
	      }
	    } else {
	      nodeCache[id] = node;
	    }
	  }

	  return id;
	}

	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}

	/**
	 * Sets the React-specific ID of the given node.
	 *
	 * @param {DOMElement} node The DOM node whose ID will be set.
	 * @param {string} id The value of the ID attribute.
	 */
	function setID(node, id) {
	  var oldID = internalGetID(node);
	  if (oldID !== id) {
	    delete nodeCache[oldID];
	  }
	  node.setAttribute(ATTR_NAME, id);
	  nodeCache[id] = node;
	}

	/**
	 * Finds the node with the supplied React-generated DOM ID.
	 *
	 * @param {string} id A React-generated DOM ID.
	 * @return {DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNode(id) {
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}

	/**
	 * Finds the node with the supplied public React instance.
	 *
	 * @param {*} instance A public React instance.
	 * @return {?DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNodeFromInstance(instance) {
	  var id = ReactInstanceMap.get(instance)._rootNodeID;
	  if (ReactEmptyComponentRegistry.isNullComponentID(id)) {
	    return null;
	  }
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}

	/**
	 * A node is "valid" if it is contained by a currently mounted container.
	 *
	 * This means that the node does not have to be contained by a document in
	 * order to be considered valid.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @param {string} id The expected ID of the node.
	 * @return {boolean} Whether the node is contained by a mounted container.
	 */
	function isValid(node, id) {
	  if (node) {
	    !(internalGetID(node) === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Unexpected modification of `%s`', ATTR_NAME) : invariant(false) : undefined;

	    var container = ReactMount.findReactContainerForID(id);
	    if (container && containsNode(container, node)) {
	      return true;
	    }
	  }

	  return false;
	}

	/**
	 * Causes the cache to forget about one React-specific ID.
	 *
	 * @param {string} id The ID to forget.
	 */
	function purgeID(id) {
	  delete nodeCache[id];
	}

	var deepestNodeSoFar = null;
	function findDeepestCachedAncestorImpl(ancestorID) {
	  var ancestor = nodeCache[ancestorID];
	  if (ancestor && isValid(ancestor, ancestorID)) {
	    deepestNodeSoFar = ancestor;
	  } else {
	    // This node isn't populated in the cache, so presumably none of its
	    // descendants are. Break out of the loop.
	    return false;
	  }
	}

	/**
	 * Return the deepest cached node whose ID is a prefix of `targetID`.
	 */
	function findDeepestCachedAncestor(targetID) {
	  deepestNodeSoFar = null;
	  ReactInstanceHandles.traverseAncestors(targetID, findDeepestCachedAncestorImpl);

	  var foundNode = deepestNodeSoFar;
	  deepestNodeSoFar = null;
	  return foundNode;
	}

	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(componentInstance, rootID, container, transaction, shouldReuseMarkup, context) {
	  if (ReactDOMFeatureFlags.useCreateElement) {
	    context = assign({}, context);
	    if (container.nodeType === DOC_NODE_TYPE) {
	      context[ownerDocumentContextKey] = container;
	    } else {
	      context[ownerDocumentContextKey] = container.ownerDocument;
	    }
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    if (context === emptyObject) {
	      context = {};
	    }
	    var tag = container.nodeName.toLowerCase();
	    context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(null, tag, null);
	  }
	  var markup = ReactReconciler.mountComponent(componentInstance, rootID, transaction, context);
	  componentInstance._renderedComponent._topLevelWrapper = componentInstance;
	  ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup, transaction);
	}

	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(componentInstance, rootID, container, shouldReuseMarkup, context) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* forceHTML */shouldReuseMarkup);
	  transaction.perform(mountComponentIntoNode, null, componentInstance, rootID, container, transaction, shouldReuseMarkup, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}

	/**
	 * Unmounts a component and removes it from the DOM.
	 *
	 * @param {ReactComponent} instance React component instance.
	 * @param {DOMElement} container DOM element to unmount from.
	 * @final
	 * @internal
	 * @see {ReactMount.unmountComponentAtNode}
	 */
	function unmountComponentFromNode(instance, container) {
	  ReactReconciler.unmountComponent(instance);

	  if (container.nodeType === DOC_NODE_TYPE) {
	    container = container.documentElement;
	  }

	  // http://jsperf.com/emptying-a-node
	  while (container.lastChild) {
	    container.removeChild(container.lastChild);
	  }
	}

	/**
	 * True if the supplied DOM node has a direct React-rendered child that is
	 * not a React root element. Useful for warning in `render`,
	 * `unmountComponentAtNode`, etc.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM element contains a direct child that was
	 * rendered by React but is not a root element.
	 * @internal
	 */
	function hasNonRootReactChild(node) {
	  var reactRootID = getReactRootID(node);
	  return reactRootID ? reactRootID !== ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID) : false;
	}

	/**
	 * Returns the first (deepest) ancestor of a node which is rendered by this copy
	 * of React.
	 */
	function findFirstReactDOMImpl(node) {
	  // This node might be from another React instance, so we make sure not to
	  // examine the node cache here
	  for (; node && node.parentNode !== node; node = node.parentNode) {
	    if (node.nodeType !== 1) {
	      // Not a DOMElement, therefore not a React component
	      continue;
	    }
	    var nodeID = internalGetID(node);
	    if (!nodeID) {
	      continue;
	    }
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);

	    // If containersByReactRootID contains the container we find by crawling up
	    // the tree, we know that this instance of React rendered the node.
	    // nb. isValid's strategy (with containsNode) does not work because render
	    // trees may be nested and we don't want a false positive in that case.
	    var current = node;
	    var lastID;
	    do {
	      lastID = internalGetID(current);
	      current = current.parentNode;
	      if (current == null) {
	        // The passed-in node has been detached from the container it was
	        // originally rendered into.
	        return null;
	      }
	    } while (lastID !== reactRootID);

	    if (current === containersByReactRootID[reactRootID]) {
	      return node;
	    }
	  }
	  return null;
	}

	/**
	 * Temporary (?) hack so that we can store all top-level pending updates on
	 * composites instead of having to worry about different types of components
	 * here.
	 */
	var TopLevelWrapper = function () {};
	TopLevelWrapper.prototype.isReactComponent = {};
	if (process.env.NODE_ENV !== 'production') {
	  TopLevelWrapper.displayName = 'TopLevelWrapper';
	}
	TopLevelWrapper.prototype.render = function () {
	  // this.props is actually a ReactElement
	  return this.props;
	};

	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {

	  TopLevelWrapper: TopLevelWrapper,

	  /** Exposed for debugging purposes **/
	  _instancesByReactRootID: instancesByReactRootID,

	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function (container, renderCallback) {
	    renderCallback();
	  },

	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function (prevComponent, nextElement, container, callback) {
	    ReactMount.scrollMonitor(container, function () {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });

	    if (process.env.NODE_ENV !== 'production') {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[getReactRootID(container)] = getReactRootElementInContainer(container);
	    }

	    return prevComponent;
	  },

	  /**
	   * Register a component into the instance map and starts scroll value
	   * monitoring
	   * @param {ReactComponent} nextComponent component instance to render
	   * @param {DOMElement} container container to render into
	   * @return {string} reactRoot ID prefix
	   */
	  _registerComponent: function (nextComponent, container) {
	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : invariant(false) : undefined;

	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

	    var reactRootID = ReactMount.registerContainer(container);
	    instancesByReactRootID[reactRootID] = nextComponent;
	    return reactRootID;
	  },

	  /**
	   * Render a new component into the DOM.
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;

	    var componentInstance = instantiateReactComponent(nextElement, null);
	    var reactRootID = ReactMount._registerComponent(componentInstance, container);

	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.

	    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, reactRootID, container, shouldReuseMarkup, context);

	    if (process.env.NODE_ENV !== 'production') {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[reactRootID] = getReactRootElementInContainer(container);
	    }

	    return componentInstance;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !(parentComponent != null && parentComponent._reactInternalInstance != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : invariant(false) : undefined;
	    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
	  },

	  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !ReactElement.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing an element string, make sure to instantiate ' + 'it by passing it to React.createElement.' : typeof nextElement === 'function' ? ' Instead of passing a component class, make sure to instantiate ' + 'it by passing it to React.createElement.' :
	    // Check if it quacks like an element
	    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : invariant(false) : undefined;

	    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : undefined;

	    var nextWrappedElement = new ReactElement(TopLevelWrapper, null, null, null, null, null, nextElement);

	    var prevComponent = instancesByReactRootID[getReactRootID(container)];

	    if (prevComponent) {
	      var prevWrappedElement = prevComponent._currentElement;
	      var prevElement = prevWrappedElement.props;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        var publicInst = prevComponent._renderedComponent.getPublicInstance();
	        var updatedCallback = callback && function () {
	          callback.call(publicInst);
	        };
	        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, container, updatedCallback);
	        return publicInst;
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }

	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
	    var containerHasNonRootReactChild = hasNonRootReactChild(container);

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : undefined;

	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (internalGetID(rootElementSibling)) {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : undefined;
	            break;
	          }
	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }

	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
	    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, parentComponent != null ? parentComponent._reactInternalInstance._processChildContext(parentComponent._reactInternalInstance._context) : emptyObject)._renderedComponent.getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function (nextElement, container, callback) {
	    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
	  },

	  /**
	   * Registers a container node into which React components will be rendered.
	   * This also creates the "reactRoot" ID that will be assigned to the element
	   * rendered within.
	   *
	   * @param {DOMElement} container DOM element to register as a container.
	   * @return {string} The "reactRoot" ID of elements rendered within.
	   */
	  registerContainer: function (container) {
	    var reactRootID = getReactRootID(container);
	    if (reactRootID) {
	      // If one exists, make sure it is a valid "reactRoot" ID.
	      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
	    }
	    if (!reactRootID) {
	      // No valid "reactRoot" ID found, create one.
	      reactRootID = ReactInstanceHandles.createReactRootID();
	    }
	    containersByReactRootID[reactRootID] = container;
	    return reactRootID;
	  },

	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function (container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;

	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : invariant(false) : undefined;

	    var reactRootID = getReactRootID(container);
	    var component = instancesByReactRootID[reactRootID];
	    if (!component) {
	      // Check if the node being unmounted was rendered by React, but isn't a
	      // root node.
	      var containerHasNonRootReactChild = hasNonRootReactChild(container);

	      // Check if the container itself is a React root node.
	      var containerID = internalGetID(container);
	      var isContainerReactRoot = containerID && containerID === ReactInstanceHandles.getReactRootIDFromNodeID(containerID);

	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : undefined;
	      }

	      return false;
	    }
	    ReactUpdates.batchedUpdates(unmountComponentFromNode, component, container);
	    delete instancesByReactRootID[reactRootID];
	    delete containersByReactRootID[reactRootID];
	    if (process.env.NODE_ENV !== 'production') {
	      delete rootElementsByReactRootID[reactRootID];
	    }
	    return true;
	  },

	  /**
	   * Finds the container DOM element that contains React component to which the
	   * supplied DOM `id` belongs.
	   *
	   * @param {string} id The ID of an element rendered by a React component.
	   * @return {?DOMElement} DOM element that contains the `id`.
	   */
	  findReactContainerForID: function (id) {
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
	    var container = containersByReactRootID[reactRootID];

	    if (process.env.NODE_ENV !== 'production') {
	      var rootElement = rootElementsByReactRootID[reactRootID];
	      if (rootElement && rootElement.parentNode !== container) {
	        process.env.NODE_ENV !== 'production' ? warning(
	        // Call internalGetID here because getID calls isValid which calls
	        // findReactContainerForID (this function).
	        internalGetID(rootElement) === reactRootID, 'ReactMount: Root element ID differed from reactRootID.') : undefined;
	        var containerChild = container.firstChild;
	        if (containerChild && reactRootID === internalGetID(containerChild)) {
	          // If the container has a new child with the same ID as the old
	          // root element, then rootElementsByReactRootID[reactRootID] is
	          // just stale and needs to be updated. The case that deserves a
	          // warning is when the container is empty.
	          rootElementsByReactRootID[reactRootID] = containerChild;
	        } else {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'ReactMount: Root element has been removed from its original ' + 'container. New container: %s', rootElement.parentNode) : undefined;
	        }
	      }
	    }

	    return container;
	  },

	  /**
	   * Finds an element rendered by React with the supplied ID.
	   *
	   * @param {string} id ID of a DOM node in the React component.
	   * @return {DOMElement} Root DOM node of the React component.
	   */
	  findReactNodeByID: function (id) {
	    var reactRoot = ReactMount.findReactContainerForID(id);
	    return ReactMount.findComponentRoot(reactRoot, id);
	  },

	  /**
	   * Traverses up the ancestors of the supplied node to find a node that is a
	   * DOM representation of a React component rendered by this copy of React.
	   *
	   * @param {*} node
	   * @return {?DOMEventTarget}
	   * @internal
	   */
	  getFirstReactDOM: function (node) {
	    return findFirstReactDOMImpl(node);
	  },

	  /**
	   * Finds a node with the supplied `targetID` inside of the supplied
	   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
	   * quickly.
	   *
	   * @param {DOMEventTarget} ancestorNode Search from this root.
	   * @pararm {string} targetID ID of the DOM representation of the component.
	   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
	   * @internal
	   */
	  findComponentRoot: function (ancestorNode, targetID) {
	    var firstChildren = findComponentRootReusableArray;
	    var childIndex = 0;

	    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw on the next line; give an early warning
	      process.env.NODE_ENV !== 'production' ? warning(deepestAncestor != null, 'React can\'t find the root component node for data-reactid value ' + '`%s`. If you\'re seeing this message, it probably means that ' + 'you\'ve loaded two copies of React on the page. At this time, only ' + 'a single copy of React can be loaded at a time.', targetID) : undefined;
	    }

	    firstChildren[0] = deepestAncestor.firstChild;
	    firstChildren.length = 1;

	    while (childIndex < firstChildren.length) {
	      var child = firstChildren[childIndex++];
	      var targetChild;

	      while (child) {
	        var childID = ReactMount.getID(child);
	        if (childID) {
	          // Even if we find the node we're looking for, we finish looping
	          // through its siblings to ensure they're cached so that we don't have
	          // to revisit this node again. Otherwise, we make n^2 calls to getID
	          // when visiting the many children of a single node in order.

	          if (targetID === childID) {
	            targetChild = child;
	          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
	            // If we find a child whose ID is an ancestor of the given ID,
	            // then we can be sure that we only want to search the subtree
	            // rooted at this child, so we can throw out the rest of the
	            // search state.
	            firstChildren.length = childIndex = 0;
	            firstChildren.push(child.firstChild);
	          }
	        } else {
	          // If this child had no ID, then there's a chance that it was
	          // injected automatically by the browser, as when a `<table>`
	          // element sprouts an extra `<tbody>` child as a side effect of
	          // `.innerHTML` parsing. Optimistically continue down this
	          // branch, but not before examining the other siblings.
	          firstChildren.push(child.firstChild);
	        }

	        child = child.nextSibling;
	      }

	      if (targetChild) {
	        // Emptying firstChildren/findComponentRootReusableArray is
	        // not necessary for correctness, but it helps the GC reclaim
	        // any nodes that were left at the end of the search.
	        firstChildren.length = 0;

	        return targetChild;
	      }
	    }

	    firstChildren.length = 0;

	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findComponentRoot(..., %s): Unable to find element. This probably ' + 'means the DOM was unexpectedly mutated (e.g., by the browser), ' + 'usually due to forgetting a <tbody> when using tables, nesting tags ' + 'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' + 'parent. ' + 'Try inspecting the child nodes of the element with React ID `%s`.', targetID, ReactMount.getID(ancestorNode)) : invariant(false) : undefined;
	  },

	  _mountImageIntoNode: function (markup, container, shouldReuseMarkup, transaction) {
	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : invariant(false) : undefined;

	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

	        var normalizedMarkup = markup;
	        if (process.env.NODE_ENV !== 'production') {
	          // because rootMarkup is retrieved from the DOM, various normalizations
	          // will have occurred which will not be present in `markup`. Here,
	          // insert markup into a <div> or <iframe> depending on the container
	          // type to perform the same normalizations before comparing.
	          var normalizer;
	          if (container.nodeType === ELEMENT_NODE_TYPE) {
	            normalizer = document.createElement('div');
	            normalizer.innerHTML = markup;
	            normalizedMarkup = normalizer.innerHTML;
	          } else {
	            normalizer = document.createElement('iframe');
	            document.body.appendChild(normalizer);
	            normalizer.contentDocument.write(markup);
	            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
	            document.body.removeChild(normalizer);
	          }
	        }

	        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
	        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

	        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using ' + 'server rendering but the checksum was invalid. This usually ' + 'means you rendered a different component type or props on ' + 'the client from the one on the server, or your render() ' + 'methods are impure. React cannot handle this case due to ' + 'cross-browser quirks by rendering at the document root. You ' + 'should look for environment dependent code in your components ' + 'and ensure the props are the same client and server side:\n%s', difference) : invariant(false) : undefined;

	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : undefined;
	        }
	      }
	    }

	    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but ' + 'you didn\'t use server rendering. We can\'t do this ' + 'without using server rendering due to cross-browser quirks. ' + 'See ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;

	    if (transaction.useCreateElement) {
	      while (container.lastChild) {
	        container.removeChild(container.lastChild);
	      }
	      container.appendChild(markup);
	    } else {
	      setInnerHTML(container, markup);
	    }
	  },

	  ownerDocumentContextKey: ownerDocumentContextKey,

	  /**
	   * React ID utilities.
	   */

	  getReactRootID: getReactRootID,

	  getID: getID,

	  setID: setID,

	  getNode: getNode,

	  getNodeFromInstance: getNodeFromInstance,

	  isValid: isValid,

	  purgeID: purgeID
	};

	ReactPerf.measureMethods(ReactMount, 'ReactMount', {
	  _renderNewRootComponent: '_renderNewRootComponent',
	  _mountImageIntoNode: '_mountImageIntoNode'
	});

	module.exports = ReactMount;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserEventEmitter
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(30);
	var EventPluginHub = __webpack_require__(31);
	var EventPluginRegistry = __webpack_require__(32);
	var ReactEventEmitterMixin = __webpack_require__(37);
	var ReactPerf = __webpack_require__(18);
	var ViewportMetrics = __webpack_require__(38);

	var assign = __webpack_require__(39);
	var isEventSupported = __webpack_require__(40);

	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */

	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;

	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topAbort: 'abort',
	  topBlur: 'blur',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topScroll: 'scroll',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topSelectionChange: 'selectionchange',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTextInput: 'textInput',
	  topTimeUpdate: 'timeupdate',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting',
	  topWheel: 'wheel'
	};

	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}

	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,

	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function (ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },

	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function (enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },

	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function () {
	    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
	  },

	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function (registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

	    var topLevelTypes = EventConstants.topLevelTypes;
	    for (var i = 0; i < dependencies.length; i++) {
	      var dependency = dependencies[i];
	      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
	        if (dependency === topLevelTypes.topWheel) {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'wheel', mountAt);
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'mousewheel', mountAt);
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'DOMMouseScroll', mountAt);
	          }
	        } else if (dependency === topLevelTypes.topScroll) {

	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topScroll, 'scroll', mountAt);
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topScroll, 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
	          }
	        } else if (dependency === topLevelTypes.topFocus || dependency === topLevelTypes.topBlur) {

	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topFocus, 'focus', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topBlur, 'blur', mountAt);
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topFocus, 'focusin', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topBlur, 'focusout', mountAt);
	          }

	          // to make sure blur and focus event listeners are only attached once
	          isListening[topLevelTypes.topBlur] = true;
	          isListening[topLevelTypes.topFocus] = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
	        }

	        isListening[dependency] = true;
	      }
	    }
	  },

	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
	  },

	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
	  },

	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function () {
	    if (!isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  },

	  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginHub.registrationNameModules,

	  putListener: EventPluginHub.putListener,

	  getListener: EventPluginHub.getListener,

	  deleteListener: EventPluginHub.deleteListener,

	  deleteAllListeners: EventPluginHub.deleteAllListeners

	});

	ReactPerf.measureMethods(ReactBrowserEventEmitter, 'ReactBrowserEventEmitter', {
	  putListener: 'putListener',
	  deleteListener: 'deleteListener'
	});

	module.exports = ReactBrowserEventEmitter;

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventConstants
	 */

	'use strict';

	var keyMirror = __webpack_require__(17);

	var PropagationPhases = keyMirror({ bubbled: null, captured: null });

	/**
	 * Types of raw signals from the browser caught at the top level.
	 */
	var topLevelTypes = keyMirror({
	  topAbort: null,
	  topBlur: null,
	  topCanPlay: null,
	  topCanPlayThrough: null,
	  topChange: null,
	  topClick: null,
	  topCompositionEnd: null,
	  topCompositionStart: null,
	  topCompositionUpdate: null,
	  topContextMenu: null,
	  topCopy: null,
	  topCut: null,
	  topDoubleClick: null,
	  topDrag: null,
	  topDragEnd: null,
	  topDragEnter: null,
	  topDragExit: null,
	  topDragLeave: null,
	  topDragOver: null,
	  topDragStart: null,
	  topDrop: null,
	  topDurationChange: null,
	  topEmptied: null,
	  topEncrypted: null,
	  topEnded: null,
	  topError: null,
	  topFocus: null,
	  topInput: null,
	  topKeyDown: null,
	  topKeyPress: null,
	  topKeyUp: null,
	  topLoad: null,
	  topLoadedData: null,
	  topLoadedMetadata: null,
	  topLoadStart: null,
	  topMouseDown: null,
	  topMouseMove: null,
	  topMouseOut: null,
	  topMouseOver: null,
	  topMouseUp: null,
	  topPaste: null,
	  topPause: null,
	  topPlay: null,
	  topPlaying: null,
	  topProgress: null,
	  topRateChange: null,
	  topReset: null,
	  topScroll: null,
	  topSeeked: null,
	  topSeeking: null,
	  topSelectionChange: null,
	  topStalled: null,
	  topSubmit: null,
	  topSuspend: null,
	  topTextInput: null,
	  topTimeUpdate: null,
	  topTouchCancel: null,
	  topTouchEnd: null,
	  topTouchMove: null,
	  topTouchStart: null,
	  topVolumeChange: null,
	  topWaiting: null,
	  topWheel: null
	});

	var EventConstants = {
	  topLevelTypes: topLevelTypes,
	  PropagationPhases: PropagationPhases
	};

	module.exports = EventConstants;

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginHub
	 */

	'use strict';

	var EventPluginRegistry = __webpack_require__(32);
	var EventPluginUtils = __webpack_require__(33);
	var ReactErrorUtils = __webpack_require__(34);

	var accumulateInto = __webpack_require__(35);
	var forEachAccumulated = __webpack_require__(36);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);

	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};

	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;

	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @private
	 */
	var executeDispatchesAndRelease = function (event, simulated) {
	  if (event) {
	    EventPluginUtils.executeDispatchesInOrder(event, simulated);

	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};
	var executeDispatchesAndReleaseSimulated = function (e) {
	  return executeDispatchesAndRelease(e, true);
	};
	var executeDispatchesAndReleaseTopLevel = function (e) {
	  return executeDispatchesAndRelease(e, false);
	};

	/**
	 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
	 *   hierarchy given ids of the logical DOM elements involved.
	 */
	var InstanceHandle = null;

	function validateInstanceHandle() {
	  var valid = InstanceHandle && InstanceHandle.traverseTwoPhase && InstanceHandle.traverseEnterLeave;
	  process.env.NODE_ENV !== 'production' ? warning(valid, 'InstanceHandle not injected before use!') : undefined;
	}

	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {

	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {

	    /**
	     * @param {object} InjectedMount
	     * @public
	     */
	    injectMount: EventPluginUtils.injection.injectMount,

	    /**
	     * @param {object} InjectedInstanceHandle
	     * @public
	     */
	    injectInstanceHandle: function (InjectedInstanceHandle) {
	      InstanceHandle = InjectedInstanceHandle;
	      if (process.env.NODE_ENV !== 'production') {
	        validateInstanceHandle();
	      }
	    },

	    getInstanceHandle: function () {
	      if (process.env.NODE_ENV !== 'production') {
	        validateInstanceHandle();
	      }
	      return InstanceHandle;
	    },

	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

	  },

	  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginRegistry.registrationNameModules,

	  /**
	   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {?function} listener The callback to store.
	   */
	  putListener: function (id, registrationName, listener) {
	    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : invariant(false) : undefined;

	    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[id] = listener;

	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.didPutListener) {
	      PluginModule.didPutListener(id, registrationName, listener);
	    }
	  },

	  /**
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function (id, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    return bankForRegistrationName && bankForRegistrationName[id];
	  },

	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function (id, registrationName) {
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.willDeleteListener) {
	      PluginModule.willDeleteListener(id, registrationName);
	    }

	    var bankForRegistrationName = listenerBank[registrationName];
	    // TODO: This should never be null -- when is it?
	    if (bankForRegistrationName) {
	      delete bankForRegistrationName[id];
	    }
	  },

	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {string} id ID of the DOM element.
	   */
	  deleteAllListeners: function (id) {
	    for (var registrationName in listenerBank) {
	      if (!listenerBank[registrationName][id]) {
	        continue;
	      }

	      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	      if (PluginModule && PluginModule.willDeleteListener) {
	        PluginModule.willDeleteListener(id, registrationName);
	      }

	      delete listenerBank[registrationName][id];
	    }
	  },

	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0; i < plugins.length; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },

	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function (events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },

	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function (simulated) {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    if (simulated) {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
	    } else {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
	    }
	    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.') : invariant(false) : undefined;
	    // This would be a good time to rethrow if any of the event handlers threw.
	    ReactErrorUtils.rethrowCaughtError();
	  },

	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function () {
	    listenerBank = {};
	  },

	  __getListenerBank: function () {
	    return listenerBank;
	  }

	};

	module.exports = EventPluginHub;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginRegistry
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(13);

	/**
	 * Injectable ordering of event plugins.
	 */
	var EventPluginOrder = null;

	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};

	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!EventPluginOrder) {
	    // Wait until an `EventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var PluginModule = namesToPlugins[pluginName];
	    var pluginIndex = EventPluginOrder.indexOf(pluginName);
	    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in ' + 'the plugin ordering, `%s`.', pluginName) : invariant(false) : undefined;
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    !PluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` ' + 'method, but `%s` does not.', pluginName) : invariant(false) : undefined;
	    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
	    var publishedEvents = PluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      !publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : invariant(false) : undefined;
	    }
	  }
	}

	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
	  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'event name, `%s`.', eventName) : invariant(false) : undefined;
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(phasedRegistrationName, PluginModule, eventName);
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);
	    return true;
	  }
	  return false;
	}

	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, PluginModule, eventName) {
	  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName) : invariant(false) : undefined;
	  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;
	}

	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {

	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],

	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},

	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},

	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},

	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function (InjectedEventPluginOrder) {
	    !!EventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 'once. You are likely trying to load more than one copy of React.') : invariant(false) : undefined;
	    // Clone the ordering so it cannot be dynamically mutated.
	    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
	    recomputePluginOrdering();
	  },

	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function (injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var PluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule) {
	        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins ' + 'using the same name, `%s`.', pluginName) : invariant(false) : undefined;
	        namesToPlugins[pluginName] = PluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },

	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function (event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
	    }
	    for (var phase in dispatchConfig.phasedRegistrationNames) {
	      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
	        continue;
	      }
	      var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];
	      if (PluginModule) {
	        return PluginModule;
	      }
	    }
	    return null;
	  },

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function () {
	    EventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;

	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }

	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }
	  }

	};

	module.exports = EventPluginRegistry;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginUtils
	 */

	'use strict';

	var EventConstants = __webpack_require__(30);
	var ReactErrorUtils = __webpack_require__(34);

	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);

	/**
	 * Injected dependencies:
	 */

	/**
	 * - `Mount`: [required] Module that can convert between React dom IDs and
	 *   actual node references.
	 */
	var injection = {
	  Mount: null,
	  injectMount: function (InjectedMount) {
	    injection.Mount = InjectedMount;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(InjectedMount && InjectedMount.getNode && InjectedMount.getID, 'EventPluginUtils.injection.injectMount(...): Injected Mount ' + 'module is missing getNode or getID.') : undefined;
	    }
	  }
	};

	var topLevelTypes = EventConstants.topLevelTypes;

	function isEndish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;
	}

	function isMoveish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;
	}
	function isStartish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart;
	}

	var validateEventDispatches;
	if (process.env.NODE_ENV !== 'production') {
	  validateEventDispatches = function (event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchIDs = event._dispatchIDs;

	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var idsIsArr = Array.isArray(dispatchIDs);
	    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
	    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

	    process.env.NODE_ENV !== 'production' ? warning(idsIsArr === listenersIsArr && IDsLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : undefined;
	  };
	}

	/**
	 * Dispatch the event to the listener.
	 * @param {SyntheticEvent} event SyntheticEvent to handle
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @param {function} listener Application-level callback
	 * @param {string} domID DOM id to pass to the callback.
	 */
	function executeDispatch(event, simulated, listener, domID) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = injection.Mount.getNode(domID);
	  if (simulated) {
	    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event, domID);
	  } else {
	    ReactErrorUtils.invokeGuardedCallback(type, listener, event, domID);
	  }
	  event.currentTarget = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, simulated) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      executeDispatch(event, simulated, dispatchListeners[i], dispatchIDs[i]);
	    }
	  } else if (dispatchListeners) {
	    executeDispatch(event, simulated, dispatchListeners, dispatchIDs);
	  }
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return {?string} id of the first dispatch execution who's listener returns
	 * true, or null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchIDs[i])) {
	        return dispatchIDs[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchIDs)) {
	      return dispatchIDs;
	    }
	  }
	  return null;
	}

	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchIDs = null;
	  event._dispatchListeners = null;
	  return ret;
	}

	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return {*} The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchID = event._dispatchIDs;
	  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : invariant(false) : undefined;
	  var res = dispatchListener ? dispatchListener(event, dispatchID) : null;
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	  return res;
	}

	/**
	 * @param {SyntheticEvent} event
	 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}

	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,

	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,

	  getNode: function (id) {
	    return injection.Mount.getNode(id);
	  },
	  getID: function (node) {
	    return injection.Mount.getID(node);
	  },

	  injection: injection
	};

	module.exports = EventPluginUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactErrorUtils
	 * @typechecks
	 */

	'use strict';

	var caughtError = null;

	/**
	 * Call a function while guarding against errors that happens within it.
	 *
	 * @param {?String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} a First argument
	 * @param {*} b Second argument
	 */
	function invokeGuardedCallback(name, func, a, b) {
	  try {
	    return func(a, b);
	  } catch (x) {
	    if (caughtError === null) {
	      caughtError = x;
	    }
	    return undefined;
	  }
	}

	var ReactErrorUtils = {
	  invokeGuardedCallback: invokeGuardedCallback,

	  /**
	   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
	   * handler are sure to be rethrown by rethrowCaughtError.
	   */
	  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

	  /**
	   * During execution of guarded functions we will capture the first error which
	   * we will rethrow to be handled by the top level error handler.
	   */
	  rethrowCaughtError: function () {
	    if (caughtError) {
	      var error = caughtError;
	      caughtError = null;
	      throw error;
	    }
	  }
	};

	if (process.env.NODE_ENV !== 'production') {
	  /**
	   * To help development we can get better devtools integration by simulating a
	   * real browser event.
	   */
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');
	    ReactErrorUtils.invokeGuardedCallback = function (name, func, a, b) {
	      var boundFunc = func.bind(null, a, b);
	      var evtType = 'react-' + name;
	      fakeNode.addEventListener(evtType, boundFunc, false);
	      var evt = document.createEvent('Event');
	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);
	      fakeNode.removeEventListener(evtType, boundFunc, false);
	    };
	  }
	}

	module.exports = ReactErrorUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule accumulateInto
	 */

	'use strict';

	var invariant = __webpack_require__(13);

	/**
	 *
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */

	function accumulateInto(current, next) {
	  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : invariant(false) : undefined;
	  if (current == null) {
	    return next;
	  }

	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  var currentIsArray = Array.isArray(current);
	  var nextIsArray = Array.isArray(next);

	  if (currentIsArray && nextIsArray) {
	    current.push.apply(current, next);
	    return current;
	  }

	  if (currentIsArray) {
	    current.push(next);
	    return current;
	  }

	  if (nextIsArray) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }

	  return [current, next];
	}

	module.exports = accumulateInto;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 36 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule forEachAccumulated
	 */

	'use strict';

	/**
	 * @param {array} arr an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */
	var forEachAccumulated = function (arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	};

	module.exports = forEachAccumulated;

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventEmitterMixin
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(31);

	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue(false);
	}

	var ReactEventEmitterMixin = {

	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {object} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native environment event.
	   */
	  handleTopLevel: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var events = EventPluginHub.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
	    runEventQueueInBatch(events);
	  }
	};

	module.exports = ReactEventEmitterMixin;

/***/ },
/* 38 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ViewportMetrics
	 */

	'use strict';

	var ViewportMetrics = {

	  currentScrollLeft: 0,

	  currentScrollTop: 0,

	  refreshScrollValues: function (scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }

	};

	module.exports = ViewportMetrics;

/***/ },
/* 39 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Object.assign
	 */

	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

	'use strict';

	function assign(target, sources) {
	  if (target == null) {
	    throw new TypeError('Object.assign target cannot be null or undefined');
	  }

	  var to = Object(target);
	  var hasOwnProperty = Object.prototype.hasOwnProperty;

	  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
	    var nextSource = arguments[nextIndex];
	    if (nextSource == null) {
	      continue;
	    }

	    var from = Object(nextSource);

	    // We don't currently support accessors nor proxies. Therefore this
	    // copy cannot throw. If we ever supported this then we must handle
	    // exceptions and side-effects. We don't support symbols so they won't
	    // be transferred.

	    for (var key in from) {
	      if (hasOwnProperty.call(from, key)) {
	        to[key] = from[key];
	      }
	    }
	  }

	  return to;
	}

	module.exports = assign;

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isEventSupported
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(9);

	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature = document.implementation && document.implementation.hasFeature &&
	  // always returns true in newer browsers as per the standard.
	  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	  document.implementation.hasFeature('', '') !== true;
	}

	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
	    return false;
	  }

	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = (eventName in document);

	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }

	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }

	  return isSupported;
	}

	module.exports = isEventSupported;

/***/ },
/* 41 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMFeatureFlags
	 */

	'use strict';

	var ReactDOMFeatureFlags = {
	  useCreateElement: false
	};

	module.exports = ReactDOMFeatureFlags;

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElement
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(5);

	var assign = __webpack_require__(39);
	var canDefineProperty = __webpack_require__(43);

	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};

	/**
	 * Base constructor for all React elements. This is only used to make this
	 * work with a dynamic instanceof check. Nothing should live on this prototype.
	 *
	 * @param {*} type
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @param {*} owner
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allow us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,

	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,

	    // Record the component responsible for creating this element.
	    _owner: owner
	  };

	  if (process.env.NODE_ENV !== 'production') {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {};

	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    if (canDefineProperty) {
	      Object.defineProperty(element._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: false
	      });
	      // self and source are DEV only properties.
	      Object.defineProperty(element, '_self', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: self
	      });
	      // Two elements created in two different places should be considered
	      // equal for testing purposes and therefore we hide it from enumeration.
	      Object.defineProperty(element, '_source', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: source
	      });
	    } else {
	      element._store.validated = false;
	      element._self = self;
	      element._source = source;
	    }
	    Object.freeze(element.props);
	    Object.freeze(element);
	  }

	  return element;
	};

	ReactElement.createElement = function (type, config, children) {
	  var propName;

	  // Reserved names are extracted
	  var props = {};

	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;

	  if (config != null) {
	    ref = config.ref === undefined ? null : config.ref;
	    key = config.key === undefined ? null : '' + config.key;
	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (typeof props[propName] === 'undefined') {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }

	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	};

	ReactElement.createFactory = function (type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};

	ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

	  return newElement;
	};

	ReactElement.cloneAndReplaceProps = function (oldElement, newProps) {
	  var newElement = ReactElement(oldElement.type, oldElement.key, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, newProps);

	  if (process.env.NODE_ENV !== 'production') {
	    // If the key on the original is valid, then the clone is valid
	    newElement._store.validated = oldElement._store.validated;
	  }

	  return newElement;
	};

	ReactElement.cloneElement = function (element, config, children) {
	  var propName;

	  // Original props are copied
	  var props = assign({}, element.props);

	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	  // Self is preserved since the owner is preserved.
	  var self = element._self;
	  // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.
	  var source = element._source;

	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;

	  if (config != null) {
	    if (config.ref !== undefined) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (config.key !== undefined) {
	      key = '' + config.key;
	    }
	    // Remaining properties override existing props
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  return ReactElement(element.type, key, ref, self, source, owner, props);
	};

	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function (object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	};

	module.exports = ReactElement;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule canDefineProperty
	 */

	'use strict';

	var canDefineProperty = false;
	if (process.env.NODE_ENV !== 'production') {
	  try {
	    Object.defineProperty({}, 'x', { get: function () {} });
	    canDefineProperty = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}

	module.exports = canDefineProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 44 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponentRegistry
	 */

	'use strict';

	// This registry keeps track of the React IDs of the components that rendered to
	// `null` (in reality a placeholder such as `noscript`)
	var nullComponentIDsRegistry = {};

	/**
	 * @param {string} id Component's `_rootNodeID`.
	 * @return {boolean} True if the component is rendered to null.
	 */
	function isNullComponentID(id) {
	  return !!nullComponentIDsRegistry[id];
	}

	/**
	 * Mark the component as having rendered to null.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function registerNullComponentID(id) {
	  nullComponentIDsRegistry[id] = true;
	}

	/**
	 * Unmark the component as having rendered to null: it renders to something now.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function deregisterNullComponentID(id) {
	  delete nullComponentIDsRegistry[id];
	}

	var ReactEmptyComponentRegistry = {
	  isNullComponentID: isNullComponentID,
	  registerNullComponentID: registerNullComponentID,
	  deregisterNullComponentID: deregisterNullComponentID
	};

	module.exports = ReactEmptyComponentRegistry;

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceHandles
	 * @typechecks static-only
	 */

	'use strict';

	var ReactRootIndex = __webpack_require__(46);

	var invariant = __webpack_require__(13);

	var SEPARATOR = '.';
	var SEPARATOR_LENGTH = SEPARATOR.length;

	/**
	 * Maximum depth of traversals before we consider the possibility of a bad ID.
	 */
	var MAX_TREE_DEPTH = 10000;

	/**
	 * Creates a DOM ID prefix to use when mounting React components.
	 *
	 * @param {number} index A unique integer
	 * @return {string} React root ID.
	 * @internal
	 */
	function getReactRootIDString(index) {
	  return SEPARATOR + index.toString(36);
	}

	/**
	 * Checks if a character in the supplied ID is a separator or the end.
	 *
	 * @param {string} id A React DOM ID.
	 * @param {number} index Index of the character to check.
	 * @return {boolean} True if the character is a separator or end of the ID.
	 * @private
	 */
	function isBoundary(id, index) {
	  return id.charAt(index) === SEPARATOR || index === id.length;
	}

	/**
	 * Checks if the supplied string is a valid React DOM ID.
	 *
	 * @param {string} id A React DOM ID, maybe.
	 * @return {boolean} True if the string is a valid React DOM ID.
	 * @private
	 */
	function isValidID(id) {
	  return id === '' || id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR;
	}

	/**
	 * Checks if the first ID is an ancestor of or equal to the second ID.
	 *
	 * @param {string} ancestorID
	 * @param {string} descendantID
	 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
	 * @internal
	 */
	function isAncestorIDOf(ancestorID, descendantID) {
	  return descendantID.indexOf(ancestorID) === 0 && isBoundary(descendantID, ancestorID.length);
	}

	/**
	 * Gets the parent ID of the supplied React DOM ID, `id`.
	 *
	 * @param {string} id ID of a component.
	 * @return {string} ID of the parent, or an empty string.
	 * @private
	 */
	function getParentID(id) {
	  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
	}

	/**
	 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
	 * supplied `destinationID`. If they are equal, the ID is returned.
	 *
	 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
	 * @param {string} destinationID ID of the destination node.
	 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
	 * @private
	 */
	function getNextDescendantID(ancestorID, destinationID) {
	  !(isValidID(ancestorID) && isValidID(destinationID)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(%s, %s): Received an invalid React DOM ID.', ancestorID, destinationID) : invariant(false) : undefined;
	  !isAncestorIDOf(ancestorID, destinationID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(...): React has made an invalid assumption about ' + 'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.', ancestorID, destinationID) : invariant(false) : undefined;
	  if (ancestorID === destinationID) {
	    return ancestorID;
	  }
	  // Skip over the ancestor and the immediate separator. Traverse until we hit
	  // another separator or we reach the end of `destinationID`.
	  var start = ancestorID.length + SEPARATOR_LENGTH;
	  var i;
	  for (i = start; i < destinationID.length; i++) {
	    if (isBoundary(destinationID, i)) {
	      break;
	    }
	  }
	  return destinationID.substr(0, i);
	}

	/**
	 * Gets the nearest common ancestor ID of two IDs.
	 *
	 * Using this ID scheme, the nearest common ancestor ID is the longest common
	 * prefix of the two IDs that immediately preceded a "marker" in both strings.
	 *
	 * @param {string} oneID
	 * @param {string} twoID
	 * @return {string} Nearest common ancestor ID, or the empty string if none.
	 * @private
	 */
	function getFirstCommonAncestorID(oneID, twoID) {
	  var minLength = Math.min(oneID.length, twoID.length);
	  if (minLength === 0) {
	    return '';
	  }
	  var lastCommonMarkerIndex = 0;
	  // Use `<=` to traverse until the "EOL" of the shorter string.
	  for (var i = 0; i <= minLength; i++) {
	    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
	      lastCommonMarkerIndex = i;
	    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
	      break;
	    }
	  }
	  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
	  !isValidID(longestCommonID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s', oneID, twoID, longestCommonID) : invariant(false) : undefined;
	  return longestCommonID;
	}

	/**
	 * Traverses the parent path between two IDs (either up or down). The IDs must
	 * not be the same, and there must exist a parent path between them. If the
	 * callback returns `false`, traversal is stopped.
	 *
	 * @param {?string} start ID at which to start traversal.
	 * @param {?string} stop ID at which to end traversal.
	 * @param {function} cb Callback to invoke each ID with.
	 * @param {*} arg Argument to invoke the callback with.
	 * @param {?boolean} skipFirst Whether or not to skip the first node.
	 * @param {?boolean} skipLast Whether or not to skip the last node.
	 * @private
	 */
	function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
	  start = start || '';
	  stop = stop || '';
	  !(start !== stop) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.', start) : invariant(false) : undefined;
	  var traverseUp = isAncestorIDOf(stop, start);
	  !(traverseUp || isAncestorIDOf(start, stop)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' + 'not have a parent path.', start, stop) : invariant(false) : undefined;
	  // Traverse from `start` to `stop` one depth at a time.
	  var depth = 0;
	  var traverse = traverseUp ? getParentID : getNextDescendantID;
	  for (var id = start;; /* until break */id = traverse(id, stop)) {
	    var ret;
	    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
	      ret = cb(id, traverseUp, arg);
	    }
	    if (ret === false || id === stop) {
	      // Only break //after// visiting `stop`.
	      break;
	    }
	    !(depth++ < MAX_TREE_DEPTH) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' + 'traversing the React DOM ID tree. This may be due to malformed IDs: %s', start, stop, id) : invariant(false) : undefined;
	  }
	}

	/**
	 * Manages the IDs assigned to DOM representations of React components. This
	 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
	 * order to simulate events).
	 *
	 * @internal
	 */
	var ReactInstanceHandles = {

	  /**
	   * Constructs a React root ID
	   * @return {string} A React root ID.
	   */
	  createReactRootID: function () {
	    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
	  },

	  /**
	   * Constructs a React ID by joining a root ID with a name.
	   *
	   * @param {string} rootID Root ID of a parent component.
	   * @param {string} name A component's name (as flattened children).
	   * @return {string} A React ID.
	   * @internal
	   */
	  createReactID: function (rootID, name) {
	    return rootID + name;
	  },

	  /**
	   * Gets the DOM ID of the React component that is the root of the tree that
	   * contains the React component with the supplied DOM ID.
	   *
	   * @param {string} id DOM ID of a React component.
	   * @return {?string} DOM ID of the React component that is the root.
	   * @internal
	   */
	  getReactRootIDFromNodeID: function (id) {
	    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
	      var index = id.indexOf(SEPARATOR, 1);
	      return index > -1 ? id.substr(0, index) : id;
	    }
	    return null;
	  },

	  /**
	   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	   * should would receive a `mouseEnter` or `mouseLeave` event.
	   *
	   * NOTE: Does not invoke the callback on the nearest common ancestor because
	   * nothing "entered" or "left" that element.
	   *
	   * @param {string} leaveID ID being left.
	   * @param {string} enterID ID being entered.
	   * @param {function} cb Callback to invoke on each entered/left ID.
	   * @param {*} upArg Argument to invoke the callback with on left IDs.
	   * @param {*} downArg Argument to invoke the callback with on entered IDs.
	   * @internal
	   */
	  traverseEnterLeave: function (leaveID, enterID, cb, upArg, downArg) {
	    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
	    if (ancestorID !== leaveID) {
	      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
	    }
	    if (ancestorID !== enterID) {
	      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
	    }
	  },

	  /**
	   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseTwoPhase: function (targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, false);
	      traverseParentPath(targetID, '', cb, arg, false, true);
	    }
	  },

	  /**
	   * Same as `traverseTwoPhase` but skips the `targetID`.
	   */
	  traverseTwoPhaseSkipTarget: function (targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, true);
	      traverseParentPath(targetID, '', cb, arg, true, true);
	    }
	  },

	  /**
	   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
	   * example, passing `.0.$row-0.1` would result in `cb` getting called
	   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseAncestors: function (targetID, cb, arg) {
	    traverseParentPath('', targetID, cb, arg, true, false);
	  },

	  getFirstCommonAncestorID: getFirstCommonAncestorID,

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _getNextDescendantID: getNextDescendantID,

	  isAncestorIDOf: isAncestorIDOf,

	  SEPARATOR: SEPARATOR

	};

	module.exports = ReactInstanceHandles;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 46 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRootIndex
	 * @typechecks
	 */

	'use strict';

	var ReactRootIndexInjection = {
	  /**
	   * @param {function} _createReactRootIndex
	   */
	  injectCreateReactRootIndex: function (_createReactRootIndex) {
	    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
	  }
	};

	var ReactRootIndex = {
	  createReactRootIndex: null,
	  injection: ReactRootIndexInjection
	};

	module.exports = ReactRootIndex;

/***/ },
/* 47 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceMap
	 */

	'use strict';

	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */

	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
	var ReactInstanceMap = {

	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function (key) {
	    key._reactInternalInstance = undefined;
	  },

	  get: function (key) {
	    return key._reactInternalInstance;
	  },

	  has: function (key) {
	    return key._reactInternalInstance !== undefined;
	  },

	  set: function (key, value) {
	    key._reactInternalInstance = value;
	  }

	};

	module.exports = ReactInstanceMap;

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMarkupChecksum
	 */

	'use strict';

	var adler32 = __webpack_require__(49);

	var TAG_END = /\/?>/;

	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',

	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function (markup) {
	    var checksum = adler32(markup);

	    // Add checksum (handle both parent tags and self-closing tags)
	    return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
	  },

	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function (markup, element) {
	    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};

	module.exports = ReactMarkupChecksum;

/***/ },
/* 49 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule adler32
	 */

	'use strict';

	var MOD = 65521;

	// adler32 is not cryptographically strong, and is only used to sanity check that
	// markup generated on the server matches the markup generated on the client.
	// This implementation (a modified version of the SheetJS version) has been optimized
	// for our use case, at the expense of conforming to the adler32 specification
	// for non-ascii inputs.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  var i = 0;
	  var l = data.length;
	  var m = l & ~0x3;
	  while (i < m) {
	    for (; i < Math.min(i + 4096, m); i += 4) {
	      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
	    }
	    a %= MOD;
	    b %= MOD;
	  }
	  for (; i < l; i++) {
	    b += a += data.charCodeAt(i);
	  }
	  a %= MOD;
	  b %= MOD;
	  return a | b << 16;
	}

	module.exports = adler32;

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconciler
	 */

	'use strict';

	var ReactRef = __webpack_require__(51);

	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}

	var ReactReconciler = {

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (internalInstance, rootID, transaction, context) {
	    var markup = internalInstance.mountComponent(rootID, transaction, context);
	    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	    return markup;
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (internalInstance) {
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent();
	  },

	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function (internalInstance, nextElement, transaction, context) {
	    var prevElement = internalInstance._currentElement;

	    if (nextElement === prevElement && context === internalInstance._context) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.

	      // TODO: Bailing out early is just a perf optimization right?
	      // TODO: Removing the return statement should affect correctness?
	      return;
	    }

	    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }

	    internalInstance.receiveComponent(nextElement, transaction, context);

	    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	  },

	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (internalInstance, transaction) {
	    internalInstance.performUpdateIfNecessary(transaction);
	  }

	};

	module.exports = ReactReconciler;

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRef
	 */

	'use strict';

	var ReactOwner = __webpack_require__(52);

	var ReactRef = {};

	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}

	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}

	ReactRef.attachRefs = function (instance, element) {
	  if (element === null || element === false) {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};

	ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.

	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.

	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;

	  return(
	    // This has a few false positives w/r/t empty components.
	    prevEmpty || nextEmpty || nextElement._owner !== prevElement._owner || nextElement.ref !== prevElement.ref
	  );
	};

	ReactRef.detachRefs = function (instance, element) {
	  if (element === null || element === false) {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};

	module.exports = ReactRef;

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactOwner
	 */

	'use strict';

	var invariant = __webpack_require__(13);

	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {

	  /**
	   * @param {?object} object
	   * @return {boolean} True if `object` is a valid owner.
	   * @final
	   */
	  isValidOwner: function (object) {
	    return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
	  },

	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function (component, ref, owner) {
	    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might ' + 'be adding a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
	    owner.attachRef(ref, component);
	  },

	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function (component, ref, owner) {
	    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might ' + 'be removing a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
	    // Check that `component` is still the current ref because we do not want to
	    // detach the ref if another component stole it.
	    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }

	};

	module.exports = ReactOwner;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdateQueue
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(5);
	var ReactElement = __webpack_require__(42);
	var ReactInstanceMap = __webpack_require__(47);
	var ReactUpdates = __webpack_require__(54);

	var assign = __webpack_require__(39);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);

	function enqueueUpdate(internalInstance) {
	  ReactUpdates.enqueueUpdate(internalInstance);
	}

	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor.displayName) : undefined;
	    }
	    return null;
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition ' + '(such as within `render`). Render methods should be a pure function ' + 'of props and state.', callerName) : undefined;
	  }

	  return internalInstance;
	}

	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(publicInstance);
	    if (internalInstance) {
	      // During componentWillMount and render this will still be null but after
	      // that will always render to something. At least for now. So we can use
	      // this hack.
	      return !!internalInstance._renderedComponent;
	    } else {
	      return false;
	    }
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {
	    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance) {
	      return null;
	    }

	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },

	  enqueueCallbackInternal: function (internalInstance, callback) {
	    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingForceUpdate = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

	    if (!internalInstance) {
	      return;
	    }

	    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialProps Subset of the next props.
	   * @internal
	   */
	  enqueueSetProps: function (publicInstance, partialProps) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setProps');
	    if (!internalInstance) {
	      return;
	    }
	    ReactUpdateQueue.enqueueSetPropsInternal(internalInstance, partialProps);
	  },

	  enqueueSetPropsInternal: function (internalInstance, partialProps) {
	    var topLevelWrapper = internalInstance._topLevelWrapper;
	    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setProps(...): You called `setProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;

	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
	    var element = wrapElement.props;
	    var props = assign({}, element.props, partialProps);
	    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));

	    enqueueUpdate(topLevelWrapper);
	  },

	  /**
	   * Replaces all of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} props New props.
	   * @internal
	   */
	  enqueueReplaceProps: function (publicInstance, props) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceProps');
	    if (!internalInstance) {
	      return;
	    }
	    ReactUpdateQueue.enqueueReplacePropsInternal(internalInstance, props);
	  },

	  enqueueReplacePropsInternal: function (internalInstance, props) {
	    var topLevelWrapper = internalInstance._topLevelWrapper;
	    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'replaceProps(...): You called `replaceProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;

	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
	    var element = wrapElement.props;
	    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));

	    enqueueUpdate(topLevelWrapper);
	  },

	  enqueueElementInternal: function (internalInstance, newElement) {
	    internalInstance._pendingElement = newElement;
	    enqueueUpdate(internalInstance);
	  }

	};

	module.exports = ReactUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdates
	 */

	'use strict';

	var CallbackQueue = __webpack_require__(55);
	var PooledClass = __webpack_require__(56);
	var ReactPerf = __webpack_require__(18);
	var ReactReconciler = __webpack_require__(50);
	var Transaction = __webpack_require__(57);

	var assign = __webpack_require__(39);
	var invariant = __webpack_require__(13);

	var dirtyComponents = [];
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;

	var batchingStrategy = null;

	function ensureInjected() {
	  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching ' + 'strategy') : invariant(false) : undefined;
	}

	var NESTED_UPDATES = {
	  initialize: function () {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function () {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};

	var UPDATE_QUEUEING = {
	  initialize: function () {
	    this.callbackQueue.reset();
	  },
	  close: function () {
	    this.callbackQueue.notifyAll();
	  }
	};

	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled( /* forceHTML */false);
	}

	assign(ReactUpdatesFlushTransaction.prototype, Transaction.Mixin, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  destructor: function () {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },

	  perform: function (method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.Mixin.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
	  }
	});

	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

	function batchedUpdates(callback, a, b, c, d, e) {
	  ensureInjected();
	  batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
	}

	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}

	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to ' + 'match dirty-components array length (%s).', len, dirtyComponents.length) : invariant(false) : undefined;

	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);

	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];

	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;

	    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction);

	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
	      }
	    }
	  }
	}

	var flushBatchedUpdates = function () {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }

	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};
	flushBatchedUpdates = ReactPerf.measure('ReactUpdates', 'flushBatchedUpdates', flushBatchedUpdates);

	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();

	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setProps, setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)

	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }

	  dirtyComponents.push(component);
	}

	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' + 'updates are not being batched.') : invariant(false) : undefined;
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}

	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function (ReconcileTransaction) {
	    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : invariant(false) : undefined;
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },

	  injectBatchingStrategy: function (_batchingStrategy) {
	    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : invariant(false) : undefined;
	    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : invariant(false) : undefined;
	    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : invariant(false) : undefined;
	    batchingStrategy = _batchingStrategy;
	  }
	};

	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,

	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};

	module.exports = ReactUpdates;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CallbackQueue
	 */

	'use strict';

	var PooledClass = __webpack_require__(56);

	var assign = __webpack_require__(39);
	var invariant = __webpack_require__(13);

	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */
	function CallbackQueue() {
	  this._callbacks = null;
	  this._contexts = null;
	}

	assign(CallbackQueue.prototype, {

	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */
	  enqueue: function (callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._contexts = this._contexts || [];
	    this._callbacks.push(callback);
	    this._contexts.push(context);
	  },

	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */
	  notifyAll: function () {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    if (callbacks) {
	      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : invariant(false) : undefined;
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0; i < callbacks.length; i++) {
	        callbacks[i].call(contexts[i]);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  },

	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */
	  reset: function () {
	    this._callbacks = null;
	    this._contexts = null;
	  },

	  /**
	   * `PooledClass` looks for this.
	   */
	  destructor: function () {
	    this.reset();
	  }

	});

	PooledClass.addPoolingTo(CallbackQueue);

	module.exports = CallbackQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule PooledClass
	 */

	'use strict';

	var invariant = __webpack_require__(13);

	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};

	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};

	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};

	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};

	var fiveArgumentPooler = function (a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};

	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : invariant(false) : undefined;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};

	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;

	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances (optional).
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};

	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler
	};

	module.exports = PooledClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Transaction
	 */

	'use strict';

	var invariant = __webpack_require__(13);

	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var Mixin = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function () {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (this.wrapperInitData) {
	      this.wrapperInitData.length = 0;
	    } else {
	      this.wrapperInitData = [];
	    }
	    this._isInTransaction = false;
	  },

	  _isInTransaction: false,

	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,

	  isInTransaction: function () {
	    return !!this._isInTransaction;
	  },

	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked. The optional arguments helps prevent the need
	   * to bind in many cases.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} a Argument to pass to the method.
	   * @param {Object?=} b Argument to pass to the method.
	   * @param {Object?=} c Argument to pass to the method.
	   * @param {Object?=} d Argument to pass to the method.
	   * @param {Object?=} e Argument to pass to the method.
	   * @param {Object?=} f Argument to pass to the method.
	   *
	   * @return {*} Return value from `method`.
	   */
	  perform: function (method, scope, a, b, c, d, e, f) {
	    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there ' + 'is already an outstanding transaction.') : invariant(false) : undefined;
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {}
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },

	  initializeAll: function (startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
	      } finally {
	        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {}
	        }
	      }
	    }
	  },

	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function (startIndex) {
	    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : invariant(false) : undefined;
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {}
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};

	var Transaction = {

	  Mixin: Mixin,

	  /**
	   * Token to look for to determine if an error occurred.
	   */
	  OBSERVED_ERROR: {}

	};

	module.exports = Transaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyObject
	 */

	'use strict';

	var emptyObject = {};

	if (process.env.NODE_ENV !== 'production') {
	  Object.freeze(emptyObject);
	}

	module.exports = emptyObject;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule containsNode
	 * @typechecks
	 */

	'use strict';

	var isTextNode = __webpack_require__(60);

	/*eslint-disable no-bitwise */

	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 *
	 * @param {?DOMNode} outerNode Outer DOM node.
	 * @param {?DOMNode} innerNode Inner DOM node.
	 * @return {boolean} True if `outerNode` contains or is `innerNode`.
	 */
	function containsNode(_x, _x2) {
	  var _again = true;

	  _function: while (_again) {
	    var outerNode = _x,
	        innerNode = _x2;
	    _again = false;

	    if (!outerNode || !innerNode) {
	      return false;
	    } else if (outerNode === innerNode) {
	      return true;
	    } else if (isTextNode(outerNode)) {
	      return false;
	    } else if (isTextNode(innerNode)) {
	      _x = outerNode;
	      _x2 = innerNode.parentNode;
	      _again = true;
	      continue _function;
	    } else if (outerNode.contains) {
	      return outerNode.contains(innerNode);
	    } else if (outerNode.compareDocumentPosition) {
	      return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	    } else {
	      return false;
	    }
	  }
	}

	module.exports = containsNode;

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextNode
	 * @typechecks
	 */

	'use strict';

	var isNode = __webpack_require__(61);

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}

	module.exports = isTextNode;

/***/ },
/* 61 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isNode
	 * @typechecks
	 */

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	'use strict';

	function isNode(object) {
	  return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
	}

	module.exports = isNode;

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule instantiateReactComponent
	 * @typechecks static-only
	 */

	'use strict';

	var ReactCompositeComponent = __webpack_require__(63);
	var ReactEmptyComponent = __webpack_require__(68);
	var ReactNativeComponent = __webpack_require__(69);

	var assign = __webpack_require__(39);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);

	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function () {};
	assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent.Mixin, {
	  _instantiateReactComponent: instantiateReactComponent
	});

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
	}

	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node) {
	  var instance;

	  if (node === null || node === false) {
	    instance = new ReactEmptyComponent(instantiateReactComponent);
	  } else if (typeof node === 'object') {
	    var element = node;
	    !(element && (typeof element.type === 'function' || typeof element.type === 'string')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) ' + 'or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : invariant(false) : undefined;

	    // Special case string values
	    if (typeof element.type === 'string') {
	      instance = ReactNativeComponent.createInternalComponent(element);
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // representations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);
	    } else {
	      instance = new ReactCompositeComponentWrapper();
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactNativeComponent.createInstanceForText(node);
	  } else {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : invariant(false) : undefined;
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(typeof instance.construct === 'function' && typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : undefined;
	  }

	  // Sets up the instance. This can probably just move into the constructor now.
	  instance.construct(node);

	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;

	  if (process.env.NODE_ENV !== 'production') {
	    instance._isOwnerNecessary = false;
	    instance._warnedAboutRefsInRender = false;
	  }

	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if (process.env.NODE_ENV !== 'production') {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }

	  return instance;
	}

	module.exports = instantiateReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCompositeComponent
	 */

	'use strict';

	var ReactComponentEnvironment = __webpack_require__(64);
	var ReactCurrentOwner = __webpack_require__(5);
	var ReactElement = __webpack_require__(42);
	var ReactInstanceMap = __webpack_require__(47);
	var ReactPerf = __webpack_require__(18);
	var ReactPropTypeLocations = __webpack_require__(65);
	var ReactPropTypeLocationNames = __webpack_require__(66);
	var ReactReconciler = __webpack_require__(50);
	var ReactUpdateQueue = __webpack_require__(53);

	var assign = __webpack_require__(39);
	var emptyObject = __webpack_require__(58);
	var invariant = __webpack_require__(13);
	var shouldUpdateReactComponent = __webpack_require__(67);
	var warning = __webpack_require__(25);

	function getDeclarationErrorAddendum(component) {
	  var owner = component._currentElement._owner || null;
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	function StatelessComponent(Component) {}
	StatelessComponent.prototype.render = function () {
	  var Component = ReactInstanceMap.get(this)._currentElement.type;
	  return Component(this.props, this.context, this.updater);
	};

	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */

	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;

	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponentMixin = {

	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function (element) {
	    this._currentElement = element;
	    this._rootNodeID = null;
	    this._instance = null;

	    // See ReactUpdateQueue
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    this._renderedComponent = null;

	    this._context = null;
	    this._mountOrder = 0;
	    this._topLevelWrapper = null;

	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;
	  },

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (rootID, transaction, context) {
	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._rootNodeID = rootID;

	    var publicProps = this._processProps(this._currentElement.props);
	    var publicContext = this._processContext(context);

	    var Component = this._currentElement.type;

	    // Initialize the public class
	    var inst;
	    var renderedElement;

	    // This is a way to detect if Component is a stateless arrow function
	    // component, which is not newable. It might not be 100% reliable but is
	    // something we can do until we start detecting that Component extends
	    // React.Component. We already assume that typeof Component === 'function'.
	    var canInstantiate = ('prototype' in Component);

	    if (canInstantiate) {
	      if (process.env.NODE_ENV !== 'production') {
	        ReactCurrentOwner.current = this;
	        try {
	          inst = new Component(publicProps, publicContext, ReactUpdateQueue);
	        } finally {
	          ReactCurrentOwner.current = null;
	        }
	      } else {
	        inst = new Component(publicProps, publicContext, ReactUpdateQueue);
	      }
	    }

	    if (!canInstantiate || inst === null || inst === false || ReactElement.isValidElement(inst)) {
	      renderedElement = inst;
	      inst = new StatelessComponent(Component);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      if (inst.render == null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`, returned ' + 'null/false from a stateless component, or tried to render an ' + 'element whose type is a function that isn\'t a React component.', Component.displayName || Component.name || 'Component') : undefined;
	      } else {
	        // We support ES6 inheriting from React.Component, the module pattern,
	        // and stateless components, but not ES6 classes that don't extend
	        process.env.NODE_ENV !== 'production' ? warning(Component.prototype && Component.prototype.isReactComponent || !canInstantiate || !(inst instanceof Component), '%s(...): React component classes must extend React.Component.', Component.displayName || Component.name || 'Component') : undefined;
	      }
	    }

	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;
	    inst.updater = ReactUpdateQueue;

	    this._instance = inst;

	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);

	    if (process.env.NODE_ENV !== 'production') {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : undefined;
	    }

	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;

	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    if (inst.componentWillMount) {
	      inst.componentWillMount();
	      // When mounting, calls to `setState` by `componentWillMount` will set
	      // `this._pendingStateQueue` without triggering a re-render.
	      if (this._pendingStateQueue) {
	        inst.state = this._processPendingState(inst.props, inst.context);
	      }
	    }

	    // If not a stateless component, we now render
	    if (renderedElement === undefined) {
	      renderedElement = this._renderValidatedComponent();
	    }

	    this._renderedComponent = this._instantiateReactComponent(renderedElement);

	    var markup = ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, this._processChildContext(context));
	    if (inst.componentDidMount) {
	      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	    }

	    return markup;
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function () {
	    var inst = this._instance;

	    if (inst.componentWillUnmount) {
	      inst.componentWillUnmount();
	    }

	    ReactReconciler.unmountComponent(this._renderedComponent);
	    this._renderedComponent = null;
	    this._instance = null;

	    // Reset pending fields
	    // Even if this component is scheduled for another update in ReactUpdates,
	    // it would still be ignored because these fields are reset.
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;

	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = null;
	    this._topLevelWrapper = null;

	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);

	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function (context) {
	    var maskedContext = null;
	    var Component = this._currentElement.type;
	    var contextTypes = Component.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function (context) {
	    var maskedContext = this._maskContext(context);
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.contextTypes) {
	        this._checkPropTypes(Component.contextTypes, maskedContext, ReactPropTypeLocations.context);
	      }
	    }
	    return maskedContext;
	  },

	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _processChildContext: function (currentContext) {
	    var Component = this._currentElement.type;
	    var inst = this._instance;
	    var childContext = inst.getChildContext && inst.getChildContext();
	    if (childContext) {
	      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
	      if (process.env.NODE_ENV !== 'production') {
	        this._checkPropTypes(Component.childContextTypes, childContext, ReactPropTypeLocations.childContext);
	      }
	      for (var name in childContext) {
	        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : invariant(false) : undefined;
	      }
	      return assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },

	  /**
	   * Processes props by setting default values for unspecified props and
	   * asserting that the props are valid. Does not mutate its argument; returns
	   * a new props object with defaults merged in.
	   *
	   * @param {object} newProps
	   * @return {object}
	   * @private
	   */
	  _processProps: function (newProps) {
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.propTypes) {
	        this._checkPropTypes(Component.propTypes, newProps, ReactPropTypeLocations.prop);
	      }
	    }
	    return newProps;
	  },

	  /**
	   * Assert that the props are valid
	   *
	   * @param {object} propTypes Map of prop name to a ReactPropType
	   * @param {object} props
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkPropTypes: function (propTypes, props, location) {
	    // TODO: Stop validating prop types here and only use the element
	    // validation.
	    var componentName = this.getName();
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error;
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually ' + 'from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
	          error = propTypes[propName](props, propName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
	        } catch (ex) {
	          error = ex;
	        }
	        if (error instanceof Error) {
	          // We may want to extend this logic for similar errors in
	          // top-level render calls, so I'm abstracting it away into
	          // a function to minimize refactoring in the future
	          var addendum = getDeclarationErrorAddendum(this);

	          if (location === ReactPropTypeLocations.prop) {
	            // Preface gives us something to blacklist in warning module
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Composite propType: %s%s', error.message, addendum) : undefined;
	          } else {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Context Types: %s%s', error.message, addendum) : undefined;
	          }
	        }
	      }
	    }
	  },

	  receiveComponent: function (nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;

	    this._pendingElement = null;

	    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
	  },

	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(this, this._pendingElement || this._currentElement, transaction, this._context);
	    }

	    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
	    }
	  },

	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
	    var inst = this._instance;

	    var nextContext = this._context === nextUnmaskedContext ? inst.context : this._processContext(nextUnmaskedContext);
	    var nextProps;

	    // Distinguish between a props update versus a simple state update
	    if (prevParentElement === nextParentElement) {
	      // Skip checking prop types again -- we don't read inst.props to avoid
	      // warning for DOM component props in this upgrade
	      nextProps = nextParentElement.props;
	    } else {
	      nextProps = this._processProps(nextParentElement.props);
	      // An update here will schedule an update but immediately set
	      // _pendingStateQueue which will ensure that any state updates gets
	      // immediately reconciled instead of waiting for the next batch.

	      if (inst.componentWillReceiveProps) {
	        inst.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }

	    var nextState = this._processPendingState(nextProps, nextContext);

	    var shouldUpdate = this._pendingForceUpdate || !inst.shouldComponentUpdate || inst.shouldComponentUpdate(nextProps, nextState, nextContext);

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(typeof shouldUpdate !== 'undefined', '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : undefined;
	    }

	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },

	  _processPendingState: function (props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;

	    if (!queue) {
	      return inst.state;
	    }

	    if (replace && queue.length === 1) {
	      return queue[0];
	    }

	    var nextState = assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
	    }

	    return nextState;
	  },

	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
	    var inst = this._instance;

	    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
	    var prevProps;
	    var prevState;
	    var prevContext;
	    if (hasComponentDidUpdate) {
	      prevProps = inst.props;
	      prevState = inst.state;
	      prevContext = inst.context;
	    }

	    if (inst.componentWillUpdate) {
	      inst.componentWillUpdate(nextProps, nextState, nextContext);
	    }

	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;

	    this._updateRenderedComponent(transaction, unmaskedContext);

	    if (hasComponentDidUpdate) {
	      transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
	    }
	  },

	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function (transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var nextRenderedElement = this._renderValidatedComponent();
	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
	    } else {
	      // These two IDs are actually the same! But nothing should rely on that.
	      var thisID = this._rootNodeID;
	      var prevComponentID = prevComponentInstance._rootNodeID;
	      ReactReconciler.unmountComponent(prevComponentInstance);

	      this._renderedComponent = this._instantiateReactComponent(nextRenderedElement);
	      var nextMarkup = ReactReconciler.mountComponent(this._renderedComponent, thisID, transaction, this._processChildContext(context));
	      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
	    }
	  },

	  /**
	   * @protected
	   */
	  _replaceNodeWithMarkupByID: function (prevComponentID, nextMarkup) {
	    ReactComponentEnvironment.replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
	  },

	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function () {
	    var inst = this._instance;
	    var renderedComponent = inst.render();
	    if (process.env.NODE_ENV !== 'production') {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (typeof renderedComponent === 'undefined' && inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedComponent = null;
	      }
	    }

	    return renderedComponent;
	  },

	  /**
	   * @private
	   */
	  _renderValidatedComponent: function () {
	    var renderedComponent;
	    ReactCurrentOwner.current = this;
	    try {
	      renderedComponent = this._renderValidatedComponentWithoutOwnerOrContext();
	    } finally {
	      ReactCurrentOwner.current = null;
	    }
	    !(
	    // TODO: An `isValidNode` function would probably be more appropriate
	    renderedComponent === null || renderedComponent === false || ReactElement.isValidElement(renderedComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid ReactComponent must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
	    return renderedComponent;
	  },

	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function (ref, component) {
	    var inst = this.getPublicInstance();
	    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : invariant(false) : undefined;
	    var publicComponentInstance = component.getPublicInstance();
	    if (process.env.NODE_ENV !== 'production') {
	      var componentName = component && component.getName ? component.getName() : 'a component';
	      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : undefined;
	    }
	    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
	    refs[ref] = publicComponentInstance;
	  },

	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function (ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },

	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function () {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
	  },

	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function () {
	    var inst = this._instance;
	    if (inst instanceof StatelessComponent) {
	      return null;
	    }
	    return inst;
	  },

	  // Stub
	  _instantiateReactComponent: null

	};

	ReactPerf.measureMethods(ReactCompositeComponentMixin, 'ReactCompositeComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent',
	  _renderValidatedComponent: '_renderValidatedComponent'
	});

	var ReactCompositeComponent = {

	  Mixin: ReactCompositeComponentMixin

	};

	module.exports = ReactCompositeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentEnvironment
	 */

	'use strict';

	var invariant = __webpack_require__(13);

	var injected = false;

	var ReactComponentEnvironment = {

	  /**
	   * Optionally injectable environment dependent cleanup hook. (server vs.
	   * browser etc). Example: A browser system caches DOM nodes based on component
	   * ID and must remove that cache entry when this instance is unmounted.
	   */
	  unmountIDFromEnvironment: null,

	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkupByID: null,

	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,

	  injection: {
	    injectEnvironment: function (environment) {
	      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : invariant(false) : undefined;
	      ReactComponentEnvironment.unmountIDFromEnvironment = environment.unmountIDFromEnvironment;
	      ReactComponentEnvironment.replaceNodeWithMarkupByID = environment.replaceNodeWithMarkupByID;
	      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
	      injected = true;
	    }
	  }

	};

	module.exports = ReactComponentEnvironment;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocations
	 */

	'use strict';

	var keyMirror = __webpack_require__(17);

	var ReactPropTypeLocations = keyMirror({
	  prop: null,
	  context: null,
	  childContext: null
	});

	module.exports = ReactPropTypeLocations;

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocationNames
	 */

	'use strict';

	var ReactPropTypeLocationNames = {};

	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}

	module.exports = ReactPropTypeLocationNames;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 67 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shouldUpdateReactComponent
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */
	function shouldUpdateReactComponent(prevElement, nextElement) {
	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;
	  if (prevEmpty || nextEmpty) {
	    return prevEmpty === nextEmpty;
	  }

	  var prevType = typeof prevElement;
	  var nextType = typeof nextElement;
	  if (prevType === 'string' || prevType === 'number') {
	    return nextType === 'string' || nextType === 'number';
	  } else {
	    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
	  }
	  return false;
	}

	module.exports = shouldUpdateReactComponent;

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponent
	 */

	'use strict';

	var ReactElement = __webpack_require__(42);
	var ReactEmptyComponentRegistry = __webpack_require__(44);
	var ReactReconciler = __webpack_require__(50);

	var assign = __webpack_require__(39);

	var placeholderElement;

	var ReactEmptyComponentInjection = {
	  injectEmptyComponent: function (component) {
	    placeholderElement = ReactElement.createElement(component);
	  }
	};

	function registerNullComponentID() {
	  ReactEmptyComponentRegistry.registerNullComponentID(this._rootNodeID);
	}

	var ReactEmptyComponent = function (instantiate) {
	  this._currentElement = null;
	  this._rootNodeID = null;
	  this._renderedComponent = instantiate(placeholderElement);
	};
	assign(ReactEmptyComponent.prototype, {
	  construct: function (element) {},
	  mountComponent: function (rootID, transaction, context) {
	    transaction.getReactMountReady().enqueue(registerNullComponentID, this);
	    this._rootNodeID = rootID;
	    return ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, context);
	  },
	  receiveComponent: function () {},
	  unmountComponent: function (rootID, transaction, context) {
	    ReactReconciler.unmountComponent(this._renderedComponent);
	    ReactEmptyComponentRegistry.deregisterNullComponentID(this._rootNodeID);
	    this._rootNodeID = null;
	    this._renderedComponent = null;
	  }
	});

	ReactEmptyComponent.injection = ReactEmptyComponentInjection;

	module.exports = ReactEmptyComponent;

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNativeComponent
	 */

	'use strict';

	var assign = __webpack_require__(39);
	var invariant = __webpack_require__(13);

	var autoGenerateWrapperClass = null;
	var genericComponentClass = null;
	// This registry keeps track of wrapper classes around native tags.
	var tagToComponentClass = {};
	var textComponentClass = null;

	var ReactNativeComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function (componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function (componentClass) {
	    textComponentClass = componentClass;
	  },
	  // This accepts a keyed object with classes as values. Each key represents a
	  // tag. That particular tag will use this class instead of the generic one.
	  injectComponentClasses: function (componentClasses) {
	    assign(tagToComponentClass, componentClasses);
	  }
	};

	/**
	 * Get a composite component wrapper class for a specific tag.
	 *
	 * @param {ReactElement} element The tag for which to get the class.
	 * @return {function} The React class constructor function.
	 */
	function getComponentClassForElement(element) {
	  if (typeof element.type === 'function') {
	    return element.type;
	  }
	  var tag = element.type;
	  var componentClass = tagToComponentClass[tag];
	  if (componentClass == null) {
	    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
	  }
	  return componentClass;
	}

	/**
	 * Get a native internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : invariant(false) : undefined;
	  return new genericComponentClass(element.type, element.props);
	}

	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}

	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}

	var ReactNativeComponent = {
	  getComponentClassForElement: getComponentClassForElement,
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactNativeComponentInjection
	};

	module.exports = ReactNativeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule validateDOMNesting
	 */

	'use strict';

	var assign = __webpack_require__(39);
	var emptyFunction = __webpack_require__(15);
	var warning = __webpack_require__(25);

	var validateDOMNesting = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.

	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

	  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
	  var buttonScopeTags = inScopeTags.concat(['button']);

	  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

	  var emptyAncestorInfo = {
	    parentTag: null,

	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,

	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };

	  var updatedAncestorInfo = function (oldInfo, tag, instance) {
	    var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
	    var info = { tag: tag, instance: instance };

	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }
	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    }

	    // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }

	    ancestorInfo.parentTag = info;

	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }
	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }
	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }
	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }
	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }
	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }
	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }

	    return ancestorInfo;
	  };

	  /**
	   * Returns whether
	   */
	  var isTagValidWithParent = function (tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';
	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but
	      case 'option':
	        return tag === '#text';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
	      case 'colgroup':
	        return tag === 'col' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
	      case 'html':
	        return tag === 'head' || tag === 'body';
	    }

	    // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;

	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frame':
	      case 'head':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }

	    return true;
	  };

	  /**
	   * Returns whether
	   */
	  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':

	      case 'pre':
	      case 'listing':

	      case 'table':

	      case 'hr':

	      case 'xmp':

	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;

	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;

	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;

	      case 'button':
	        return ancestorInfo.buttonTagInScope;

	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;

	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }

	    return null;
	  };

	  /**
	   * Given a ReactCompositeComponent instance, return a list of its recursive
	   * owners, starting at the root and ending with the instance itself.
	   */
	  var findOwnerStack = function (instance) {
	    if (!instance) {
	      return [];
	    }

	    var stack = [];
	    /*eslint-disable space-after-keywords */
	    do {
	      /*eslint-enable space-after-keywords */
	      stack.push(instance);
	    } while (instance = instance._currentElement._owner);
	    stack.reverse();
	    return stack;
	  };

	  var didWarn = {};

	  validateDOMNesting = function (childTag, childInstance, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.parentTag;
	    var parentTag = parentInfo && parentInfo.tag;

	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var problematic = invalidParent || invalidAncestor;

	    if (problematic) {
	      var ancestorTag = problematic.tag;
	      var ancestorInstance = problematic.instance;

	      var childOwner = childInstance && childInstance._currentElement._owner;
	      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

	      var childOwners = findOwnerStack(childOwner);
	      var ancestorOwners = findOwnerStack(ancestorOwner);

	      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
	      var i;

	      var deepestCommon = -1;
	      for (i = 0; i < minStackLen; i++) {
	        if (childOwners[i] === ancestorOwners[i]) {
	          deepestCommon = i;
	        } else {
	          break;
	        }
	      }

	      var UNKNOWN = '(unknown)';
	      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ownerInfo = [].concat(
	      // If the parent and child instances have a common owner ancestor, start
	      // with that -- otherwise we just start with the parent's owners.
	      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
	      // If we're warning about an invalid (non-parent) ancestry, add '...'
	      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

	      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
	      if (didWarn[warnKey]) {
	        return;
	      }
	      didWarn[warnKey] = true;

	      if (invalidParent) {
	        var info = '';
	        if (ancestorTag === 'table' && childTag === 'tr') {
	          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
	        }
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a child of <%s>. ' + 'See %s.%s', childTag, ancestorTag, ownerInfo, info) : undefined;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a descendant of ' + '<%s>. See %s.', childTag, ancestorTag, ownerInfo) : undefined;
	      }
	    }
	  };

	  validateDOMNesting.ancestorInfoContextKey = '__validateDOMNesting_ancestorInfo$' + Math.random().toString(36).slice(2);

	  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

	  // For testing
	  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.parentTag;
	    var parentTag = parentInfo && parentInfo.tag;
	    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
	  };
	}

	module.exports = validateDOMNesting;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultInjection
	 */

	'use strict';

	var BeforeInputEventPlugin = __webpack_require__(72);
	var ChangeEventPlugin = __webpack_require__(80);
	var ClientReactRootIndex = __webpack_require__(83);
	var DefaultEventPluginOrder = __webpack_require__(84);
	var EnterLeaveEventPlugin = __webpack_require__(85);
	var ExecutionEnvironment = __webpack_require__(9);
	var HTMLDOMPropertyConfig = __webpack_require__(89);
	var ReactBrowserComponentMixin = __webpack_require__(90);
	var ReactComponentBrowserEnvironment = __webpack_require__(26);
	var ReactDefaultBatchingStrategy = __webpack_require__(92);
	var ReactDOMComponent = __webpack_require__(93);
	var ReactDOMTextComponent = __webpack_require__(6);
	var ReactEventListener = __webpack_require__(118);
	var ReactInjection = __webpack_require__(121);
	var ReactInstanceHandles = __webpack_require__(45);
	var ReactMount = __webpack_require__(28);
	var ReactReconcileTransaction = __webpack_require__(125);
	var SelectEventPlugin = __webpack_require__(130);
	var ServerReactRootIndex = __webpack_require__(131);
	var SimpleEventPlugin = __webpack_require__(132);
	var SVGDOMPropertyConfig = __webpack_require__(141);

	var alreadyInjected = false;

	function inject() {
	  if (alreadyInjected) {
	    // TODO: This is currently true because these injections are shared between
	    // the client and the server package. They should be built independently
	    // and not share any injection state. Then this problem will be solved.
	    return;
	  }
	  alreadyInjected = true;

	  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
	  ReactInjection.EventPluginHub.injectMount(ReactMount);

	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });

	  ReactInjection.NativeComponent.injectGenericComponentClass(ReactDOMComponent);

	  ReactInjection.NativeComponent.injectTextComponentClass(ReactDOMTextComponent);

	  ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);

	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

	  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

	  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
	  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

	  ReactInjection.RootIndex.injectCreateReactRootIndex(ExecutionEnvironment.canUseDOM ? ClientReactRootIndex.createReactRootIndex : ServerReactRootIndex.createReactRootIndex);

	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);

	  if (process.env.NODE_ENV !== 'production') {
	    var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
	    if (/[?&]react_perf\b/.test(url)) {
	      var ReactDefaultPerf = __webpack_require__(142);
	      ReactDefaultPerf.start();
	    }
	  }
	}

	module.exports = {
	  inject: inject
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015 Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule BeforeInputEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(30);
	var EventPropagators = __webpack_require__(73);
	var ExecutionEnvironment = __webpack_require__(9);
	var FallbackCompositionState = __webpack_require__(74);
	var SyntheticCompositionEvent = __webpack_require__(76);
	var SyntheticInputEvent = __webpack_require__(78);

	var keyOf = __webpack_require__(79);

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;

	var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}

	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
	}

	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

	var topLevelTypes = EventConstants.topLevelTypes;

	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onBeforeInput: null }),
	      captured: keyOf({ onBeforeInputCapture: null })
	    },
	    dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionEnd: null }),
	      captured: keyOf({ onCompositionEndCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionStart: null }),
	      captured: keyOf({ onCompositionStartCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionUpdate: null }),
	      captured: keyOf({ onCompositionUpdateCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  }
	};

	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;

	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}

	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionStart:
	      return eventTypes.compositionStart;
	    case topLevelTypes.topCompositionEnd:
	      return eventTypes.compositionEnd;
	    case topLevelTypes.topCompositionUpdate:
	      return eventTypes.compositionUpdate;
	  }
	}

	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;
	}

	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topKeyUp:
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
	    case topLevelTypes.topKeyDown:
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;
	    case topLevelTypes.topKeyPress:
	    case topLevelTypes.topMouseDown:
	    case topLevelTypes.topBlur:
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}

	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}

	// Track the current IME composition fallback object, if any.
	var currentComposition = null;

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	  var eventType;
	  var fallbackData;

	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }

	  if (!eventType) {
	    return null;
	  }

	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }

	  var event = SyntheticCompositionEvent.getPooled(eventType, topLevelTargetID, nativeEvent, nativeEventTarget);

	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }

	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionEnd:
	      return getDataFromCustomEvent(nativeEvent);
	    case topLevelTypes.topKeyPress:
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }

	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;

	    case topLevelTypes.topTextInput:
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;

	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }

	      return chars;

	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}

	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  if (currentComposition) {
	    if (topLevelType === topLevelTypes.topCompositionEnd || isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }

	  switch (topLevelType) {
	    case topLevelTypes.topPaste:
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case topLevelTypes.topKeyPress:
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case topLevelTypes.topCompositionEnd:
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}

	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	  var chars;

	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }

	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }

	  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, topLevelTargetID, nativeEvent, nativeEventTarget);

	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    return [extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget)];
	  }
	};

	module.exports = BeforeInputEventPlugin;

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPropagators
	 */

	'use strict';

	var EventConstants = __webpack_require__(30);
	var EventPluginHub = __webpack_require__(31);

	var warning = __webpack_require__(25);

	var accumulateInto = __webpack_require__(35);
	var forEachAccumulated = __webpack_require__(36);

	var PropagationPhases = EventConstants.PropagationPhases;
	var getListener = EventPluginHub.getListener;

	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(id, event, propagationPhase) {
	  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(id, registrationName);
	}

	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(domID, upwards, event) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(domID, 'Dispatching id must not be null') : undefined;
	  }
	  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
	  var listener = listenerAtPhase(domID, event, phase);
	  if (listener) {
	    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
	  }
	}

	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We cannot perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(event.dispatchMarker, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
	 */
	function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhaseSkipTarget(event.dispatchMarker, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(id, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(id, registrationName);
	    if (listener) {
	      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
	    }
	  }
	}

	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event.dispatchMarker, null, event);
	  }
	}

	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}

	function accumulateTwoPhaseDispatchesSkipTarget(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
	}

	function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
	  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(fromID, toID, accumulateDispatches, leave, enter);
	}

	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}

	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};

	module.exports = EventPropagators;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule FallbackCompositionState
	 * @typechecks static-only
	 */

	'use strict';

	var PooledClass = __webpack_require__(56);

	var assign = __webpack_require__(39);
	var getTextContentAccessor = __webpack_require__(75);

	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}

	assign(FallbackCompositionState.prototype, {
	  destructor: function () {
	    this._root = null;
	    this._startText = null;
	    this._fallbackText = null;
	  },

	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function () {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },

	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function () {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }

	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;

	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }

	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }

	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});

	PooledClass.addPoolingTo(FallbackCompositionState);

	module.exports = FallbackCompositionState;

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getTextContentAccessor
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(9);

	var contentKey = null;

	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
	  }
	  return contentKey;
	}

	module.exports = getTextContentAccessor;

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticCompositionEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(77);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

	module.exports = SyntheticCompositionEvent;

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticEvent
	 * @typechecks static-only
	 */

	'use strict';

	var PooledClass = __webpack_require__(56);

	var assign = __webpack_require__(39);
	var emptyFunction = __webpack_require__(15);
	var warning = __webpack_require__(25);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: null,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function (event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};

	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 */
	function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  this.dispatchConfig = dispatchConfig;
	  this.dispatchMarker = dispatchMarker;
	  this.nativeEvent = nativeEvent;

	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      if (propName === 'target') {
	        this.target = nativeEventTarget;
	      } else {
	        this[propName] = nativeEvent[propName];
	      }
	    }
	  }

	  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	}

	assign(SyntheticEvent.prototype, {

	  preventDefault: function () {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `preventDefault` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
	    }
	    if (!event) {
	      return;
	    }

	    if (event.preventDefault) {
	      event.preventDefault();
	    } else {
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },

	  stopPropagation: function () {
	    var event = this.nativeEvent;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `stopPropagation` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
	    }
	    if (!event) {
	      return;
	    }

	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else {
	      event.cancelBubble = true;
	    }
	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function () {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,

	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function () {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      this[propName] = null;
	    }
	    this.dispatchConfig = null;
	    this.dispatchMarker = null;
	    this.nativeEvent = null;
	  }

	});

	SyntheticEvent.Interface = EventInterface;

	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function (Class, Interface) {
	  var Super = this;

	  var prototype = Object.create(Super.prototype);
	  assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;

	  Class.Interface = assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;

	  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
	};

	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

	module.exports = SyntheticEvent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticInputEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(77);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

	module.exports = SyntheticInputEvent;

/***/ },
/* 79 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyOf
	 */

	/**
	 * Allows extraction of a minified key. Let's the build system minify keys
	 * without losing the ability to dynamically use key strings as values
	 * themselves. Pass in an object with a single key/val pair and it will return
	 * you the string key of that single record. Suppose you want to grab the
	 * value for a key 'className' inside of an object. Key/val minification may
	 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
	 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
	 * reuse those resolutions.
	 */
	"use strict";

	var keyOf = function (oneKeyObj) {
	  var key;
	  for (key in oneKeyObj) {
	    if (!oneKeyObj.hasOwnProperty(key)) {
	      continue;
	    }
	    return key;
	  }
	  return null;
	};

	module.exports = keyOf;

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ChangeEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(30);
	var EventPluginHub = __webpack_require__(31);
	var EventPropagators = __webpack_require__(73);
	var ExecutionEnvironment = __webpack_require__(9);
	var ReactUpdates = __webpack_require__(54);
	var SyntheticEvent = __webpack_require__(77);

	var getEventTarget = __webpack_require__(81);
	var isEventSupported = __webpack_require__(40);
	var isTextInputElement = __webpack_require__(82);
	var keyOf = __webpack_require__(79);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onChange: null }),
	      captured: keyOf({ onChangeCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange]
	  }
	};

	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementID = null;
	var activeElementValue = null;
	var activeElementValueProp = null;

	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}

	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (!('documentMode' in document) || document.documentMode > 8);
	}

	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementID, nativeEvent, getEventTarget(nativeEvent));
	  EventPropagators.accumulateTwoPhaseDispatches(event);

	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}

	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue(false);
	}

	function startWatchingForChangeEventIE8(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}

	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementID = null;
	}

	function getTargetIDForChangeEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topChange) {
	    return topLevelTargetID;
	  }
	}
	function handleEventsForChangeEventIE8(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForChangeEventIE8();
	  }
	}

	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events
	  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 9);
	}

	/**
	 * (For old IE.) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
	var newValueProp = {
	  get: function () {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function (val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  }
	};

	/**
	 * (For old IE.) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');

	  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
	  // on DOM elements
	  Object.defineProperty(activeElement, 'value', newValueProp);
	  activeElement.attachEvent('onpropertychange', handlePropertyChange);
	}

	/**
	 * (For old IE.) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }

	  // delete restores the original property definition
	  delete activeElement.value;
	  activeElement.detachEvent('onpropertychange', handlePropertyChange);

	  activeElement = null;
	  activeElementID = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}

	/**
	 * (For old IE.) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;

	  manualDispatchChangeEvent(nativeEvent);
	}

	/**
	 * If a `change` event should be fired, returns the target's ID.
	 */
	function getTargetIDForInputEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topInput) {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return topLevelTargetID;
	  }
	}

	// For IE8 and IE9.
	function handleEventsForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForValueChange();
	  }
	}

	// For IE8 and IE9.
	function getTargetIDForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementID;
	    }
	  }
	}

	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}

	function getTargetIDForClickEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topClick) {
	    return topLevelTargetID;
	  }
	}

	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {

	    var getTargetIDFunc, handleEventFunc;
	    if (shouldUseChangeEvent(topLevelTarget)) {
	      if (doesChangeEventBubble) {
	        getTargetIDFunc = getTargetIDForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(topLevelTarget)) {
	      if (isInputEventSupported) {
	        getTargetIDFunc = getTargetIDForInputEvent;
	      } else {
	        getTargetIDFunc = getTargetIDForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(topLevelTarget)) {
	      getTargetIDFunc = getTargetIDForClickEvent;
	    }

	    if (getTargetIDFunc) {
	      var targetID = getTargetIDFunc(topLevelType, topLevelTarget, topLevelTargetID);
	      if (targetID) {
	        var event = SyntheticEvent.getPooled(eventTypes.change, targetID, nativeEvent, nativeEventTarget);
	        event.type = 'change';
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }

	    if (handleEventFunc) {
	      handleEventFunc(topLevelType, topLevelTarget, topLevelTargetID);
	    }
	  }

	};

	module.exports = ChangeEventPlugin;

/***/ },
/* 81 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventTarget
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */
	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;
	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}

	module.exports = getEventTarget;

/***/ },
/* 82 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextInputElement
	 */

	'use strict';

	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true
	};

	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName && (nodeName === 'input' && supportedInputTypes[elem.type] || nodeName === 'textarea');
	}

	module.exports = isTextInputElement;

/***/ },
/* 83 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ClientReactRootIndex
	 * @typechecks
	 */

	'use strict';

	var nextReactRootIndex = 0;

	var ClientReactRootIndex = {
	  createReactRootIndex: function () {
	    return nextReactRootIndex++;
	  }
	};

	module.exports = ClientReactRootIndex;

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DefaultEventPluginOrder
	 */

	'use strict';

	var keyOf = __webpack_require__(79);

	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */
	var DefaultEventPluginOrder = [keyOf({ ResponderEventPlugin: null }), keyOf({ SimpleEventPlugin: null }), keyOf({ TapEventPlugin: null }), keyOf({ EnterLeaveEventPlugin: null }), keyOf({ ChangeEventPlugin: null }), keyOf({ SelectEventPlugin: null }), keyOf({ BeforeInputEventPlugin: null })];

	module.exports = DefaultEventPluginOrder;

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EnterLeaveEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(30);
	var EventPropagators = __webpack_require__(73);
	var SyntheticMouseEvent = __webpack_require__(86);

	var ReactMount = __webpack_require__(28);
	var keyOf = __webpack_require__(79);

	var topLevelTypes = EventConstants.topLevelTypes;
	var getFirstReactDOM = ReactMount.getFirstReactDOM;

	var eventTypes = {
	  mouseEnter: {
	    registrationName: keyOf({ onMouseEnter: null }),
	    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
	  },
	  mouseLeave: {
	    registrationName: keyOf({ onMouseLeave: null }),
	    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
	  }
	};

	var extractedEvents = [null, null];

	var EnterLeaveEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    if (topLevelType === topLevelTypes.topMouseOver && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver) {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }

	    var win;
	    if (topLevelTarget.window === topLevelTarget) {
	      // `topLevelTarget` is probably a window object.
	      win = topLevelTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = topLevelTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }

	    var from;
	    var to;
	    var fromID = '';
	    var toID = '';
	    if (topLevelType === topLevelTypes.topMouseOut) {
	      from = topLevelTarget;
	      fromID = topLevelTargetID;
	      to = getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement);
	      if (to) {
	        toID = ReactMount.getID(to);
	      } else {
	        to = win;
	      }
	      to = to || win;
	    } else {
	      from = win;
	      to = topLevelTarget;
	      toID = topLevelTargetID;
	    }

	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }

	    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, fromID, nativeEvent, nativeEventTarget);
	    leave.type = 'mouseleave';
	    leave.target = from;
	    leave.relatedTarget = to;

	    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, toID, nativeEvent, nativeEventTarget);
	    enter.type = 'mouseenter';
	    enter.target = to;
	    enter.relatedTarget = from;

	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

	    extractedEvents[0] = leave;
	    extractedEvents[1] = enter;

	    return extractedEvents;
	  }

	};

	module.exports = EnterLeaveEventPlugin;

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticMouseEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(87);
	var ViewportMetrics = __webpack_require__(38);

	var getEventModifierState = __webpack_require__(88);

	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function (event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function (event) {
	    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
	  },
	  // "Proprietary" Interface.
	  pageX: function (event) {
	    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function (event) {
	    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

	module.exports = SyntheticMouseEvent;

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticUIEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(77);

	var getEventTarget = __webpack_require__(81);

	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function (event) {
	    if (event.view) {
	      return event.view;
	    }

	    var target = getEventTarget(event);
	    if (target != null && target.window === target) {
	      // target is a window object
	      return target;
	    }

	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function (event) {
	    return event.detail || 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

	module.exports = SyntheticUIEvent;

/***/ },
/* 88 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventModifierState
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */

	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey'
	};

	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}

	module.exports = getEventModifierState;

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule HTMLDOMPropertyConfig
	 */

	'use strict';

	var DOMProperty = __webpack_require__(23);
	var ExecutionEnvironment = __webpack_require__(9);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

	var hasSVG;
	if (ExecutionEnvironment.canUseDOM) {
	  var implementation = document.implementation;
	  hasSVG = implementation && implementation.hasFeature && implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#BasicStructure', '1.1');
	}

	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(/^(data|aria)-[a-z_][a-z\d_.\-]*$/),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: null,
	    acceptCharset: null,
	    accessKey: null,
	    action: null,
	    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    allowTransparency: MUST_USE_ATTRIBUTE,
	    alt: null,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: null,
	    // autoFocus is polyfilled/normalized by AutoFocusUtils
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    capture: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    cellPadding: null,
	    cellSpacing: null,
	    charSet: MUST_USE_ATTRIBUTE,
	    challenge: MUST_USE_ATTRIBUTE,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    classID: MUST_USE_ATTRIBUTE,
	    // To set className on SVG elements, it's necessary to use .setAttribute;
	    // this works on HTML elements too in all browsers except IE8. Conveniently,
	    // IE8 doesn't support SVG and so we can simply use the attribute in
	    // browsers that support SVG and the property in browsers that don't,
	    // regardless of whether the element is HTML or SVG.
	    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
	    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: null,
	    content: null,
	    contentEditable: null,
	    contextMenu: MUST_USE_ATTRIBUTE,
	    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    coords: null,
	    crossOrigin: null,
	    data: null, // For `<object />` acts as `src`.
	    dateTime: MUST_USE_ATTRIBUTE,
	    'default': HAS_BOOLEAN_VALUE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: null,
	    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: null,
	    encType: null,
	    form: MUST_USE_ATTRIBUTE,
	    formAction: MUST_USE_ATTRIBUTE,
	    formEncType: MUST_USE_ATTRIBUTE,
	    formMethod: MUST_USE_ATTRIBUTE,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: MUST_USE_ATTRIBUTE,
	    frameBorder: MUST_USE_ATTRIBUTE,
	    headers: null,
	    height: MUST_USE_ATTRIBUTE,
	    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    high: null,
	    href: null,
	    hrefLang: null,
	    htmlFor: null,
	    httpEquiv: null,
	    icon: null,
	    id: MUST_USE_PROPERTY,
	    inputMode: MUST_USE_ATTRIBUTE,
	    integrity: null,
	    is: MUST_USE_ATTRIBUTE,
	    keyParams: MUST_USE_ATTRIBUTE,
	    keyType: MUST_USE_ATTRIBUTE,
	    kind: null,
	    label: null,
	    lang: null,
	    list: MUST_USE_ATTRIBUTE,
	    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    low: null,
	    manifest: MUST_USE_ATTRIBUTE,
	    marginHeight: null,
	    marginWidth: null,
	    max: null,
	    maxLength: MUST_USE_ATTRIBUTE,
	    media: MUST_USE_ATTRIBUTE,
	    mediaGroup: null,
	    method: null,
	    min: null,
	    minLength: MUST_USE_ATTRIBUTE,
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: null,
	    nonce: MUST_USE_ATTRIBUTE,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: null,
	    pattern: null,
	    placeholder: null,
	    poster: null,
	    preload: null,
	    radioGroup: null,
	    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    rel: null,
	    required: HAS_BOOLEAN_VALUE,
	    reversed: HAS_BOOLEAN_VALUE,
	    role: MUST_USE_ATTRIBUTE,
	    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: null,
	    sandbox: null,
	    scope: null,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: null,
	    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: null,
	    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: MUST_USE_ATTRIBUTE,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: null,
	    src: null,
	    srcDoc: MUST_USE_PROPERTY,
	    srcLang: null,
	    srcSet: MUST_USE_ATTRIBUTE,
	    start: HAS_NUMERIC_VALUE,
	    step: null,
	    style: null,
	    summary: null,
	    tabIndex: null,
	    target: null,
	    title: null,
	    type: null,
	    useMap: null,
	    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
	    width: MUST_USE_ATTRIBUTE,
	    wmode: MUST_USE_ATTRIBUTE,
	    wrap: null,

	    /**
	     * RDFa Properties
	     */
	    about: MUST_USE_ATTRIBUTE,
	    datatype: MUST_USE_ATTRIBUTE,
	    inlist: MUST_USE_ATTRIBUTE,
	    prefix: MUST_USE_ATTRIBUTE,
	    // property is also supported for OpenGraph in meta tags.
	    property: MUST_USE_ATTRIBUTE,
	    resource: MUST_USE_ATTRIBUTE,
	    'typeof': MUST_USE_ATTRIBUTE,
	    vocab: MUST_USE_ATTRIBUTE,

	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: MUST_USE_ATTRIBUTE,
	    autoCorrect: MUST_USE_ATTRIBUTE,
	    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
	    autoSave: null,
	    // color is for Safari mask-icon link
	    color: null,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: MUST_USE_ATTRIBUTE,
	    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    itemType: MUST_USE_ATTRIBUTE,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: MUST_USE_ATTRIBUTE,
	    itemRef: MUST_USE_ATTRIBUTE,
	    // results show looking glass icon and recent searches on input
	    // search fields in WebKit/Blink
	    results: null,
	    // IE-only attribute that specifies security restrictions on an iframe
	    // as an alternative to the sandbox attribute on IE<10
	    security: MUST_USE_ATTRIBUTE,
	    // IE-only attribute that controls focus behavior
	    unselectable: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {
	    autoComplete: 'autocomplete',
	    autoFocus: 'autofocus',
	    autoPlay: 'autoplay',
	    autoSave: 'autosave',
	    // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.
	    // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding
	    encType: 'encoding',
	    hrefLang: 'hreflang',
	    radioGroup: 'radiogroup',
	    spellCheck: 'spellcheck',
	    srcDoc: 'srcdoc',
	    srcSet: 'srcset'
	  }
	};

	module.exports = HTMLDOMPropertyConfig;

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserComponentMixin
	 */

	'use strict';

	var ReactInstanceMap = __webpack_require__(47);

	var findDOMNode = __webpack_require__(91);
	var warning = __webpack_require__(25);

	var didWarnKey = '_getDOMNodeDidWarn';

	var ReactBrowserComponentMixin = {
	  /**
	   * Returns the DOM node rendered by this component.
	   *
	   * @return {DOMElement} The root node of this component.
	   * @final
	   * @protected
	   */
	  getDOMNode: function () {
	    process.env.NODE_ENV !== 'production' ? warning(this.constructor[didWarnKey], '%s.getDOMNode(...) is deprecated. Please use ' + 'ReactDOM.findDOMNode(instance) instead.', ReactInstanceMap.get(this).getName() || this.tagName || 'Unknown') : undefined;
	    this.constructor[didWarnKey] = true;
	    return findDOMNode(this);
	  }
	};

	module.exports = ReactBrowserComponentMixin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule findDOMNode
	 * @typechecks static-only
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(5);
	var ReactInstanceMap = __webpack_require__(47);
	var ReactMount = __webpack_require__(28);

	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);

	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {?DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if (process.env.NODE_ENV !== 'production') {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing getDOMNode or findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (componentOrElement.nodeType === 1) {
	    return componentOrElement;
	  }
	  if (ReactInstanceMap.has(componentOrElement)) {
	    return ReactMount.getNodeFromInstance(componentOrElement);
	  }
	  !(componentOrElement.render == null || typeof componentOrElement.render !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : invariant(false) : undefined;
	   true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : invariant(false) : undefined;
	}

	module.exports = findDOMNode;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultBatchingStrategy
	 */

	'use strict';

	var ReactUpdates = __webpack_require__(54);
	var Transaction = __webpack_require__(57);

	var assign = __webpack_require__(39);
	var emptyFunction = __webpack_require__(15);

	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function () {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};

	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};

	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}

	assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction.Mixin, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  }
	});

	var transaction = new ReactDefaultBatchingStrategyTransaction();

	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,

	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function (callback, a, b, c, d, e) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      callback(a, b, c, d, e);
	    } else {
	      transaction.perform(callback, null, a, b, c, d, e);
	    }
	  }
	};

	module.exports = ReactDefaultBatchingStrategy;

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMComponent
	 * @typechecks static-only
	 */

	/* global hasOwnProperty:true */

	'use strict';

	var AutoFocusUtils = __webpack_require__(94);
	var CSSPropertyOperations = __webpack_require__(96);
	var DOMProperty = __webpack_require__(23);
	var DOMPropertyOperations = __webpack_require__(22);
	var EventConstants = __webpack_require__(30);
	var ReactBrowserEventEmitter = __webpack_require__(29);
	var ReactComponentBrowserEnvironment = __webpack_require__(26);
	var ReactDOMButton = __webpack_require__(104);
	var ReactDOMInput = __webpack_require__(105);
	var ReactDOMOption = __webpack_require__(109);
	var ReactDOMSelect = __webpack_require__(112);
	var ReactDOMTextarea = __webpack_require__(113);
	var ReactMount = __webpack_require__(28);
	var ReactMultiChild = __webpack_require__(114);
	var ReactPerf = __webpack_require__(18);
	var ReactUpdateQueue = __webpack_require__(53);

	var assign = __webpack_require__(39);
	var canDefineProperty = __webpack_require__(43);
	var escapeTextContentForBrowser = __webpack_require__(21);
	var invariant = __webpack_require__(13);
	var isEventSupported = __webpack_require__(40);
	var keyOf = __webpack_require__(79);
	var setInnerHTML = __webpack_require__(19);
	var setTextContent = __webpack_require__(20);
	var shallowEqual = __webpack_require__(117);
	var validateDOMNesting = __webpack_require__(70);
	var warning = __webpack_require__(25);

	var deleteListener = ReactBrowserEventEmitter.deleteListener;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = { 'string': true, 'number': true };

	var CHILDREN = keyOf({ children: null });
	var STYLE = keyOf({ style: null });
	var HTML = keyOf({ __html: null });

	var ELEMENT_NODE_TYPE = 1;

	function getDeclarationErrorAddendum(internalInstance) {
	  if (internalInstance) {
	    var owner = internalInstance._currentElement._owner || null;
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' This DOM node was rendered by `' + name + '`.';
	      }
	    }
	  }
	  return '';
	}

	var legacyPropsDescriptor;
	if (process.env.NODE_ENV !== 'production') {
	  legacyPropsDescriptor = {
	    props: {
	      enumerable: false,
	      get: function () {
	        var component = this._reactInternalComponent;
	        process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .props of a DOM node; instead, ' + 'recreate the props as `render` did originally or read the DOM ' + 'properties/attributes directly from this node (e.g., ' + 'this.refs.box.className).%s', getDeclarationErrorAddendum(component)) : undefined;
	        return component._currentElement.props;
	      }
	    }
	  };
	}

	function legacyGetDOMNode() {
	  if (process.env.NODE_ENV !== 'production') {
	    var component = this._reactInternalComponent;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .getDOMNode() of a DOM node; ' + 'instead, use the node directly.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  return this;
	}

	function legacyIsMounted() {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .isMounted() of a DOM node.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  return !!component;
	}

	function legacySetStateEtc() {
	  if (process.env.NODE_ENV !== 'production') {
	    var component = this._reactInternalComponent;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setState(), .replaceState(), or ' + '.forceUpdate() of a DOM node. This is a no-op.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	}

	function legacySetProps(partialProps, callback) {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  if (!component) {
	    return;
	  }
	  ReactUpdateQueue.enqueueSetPropsInternal(component, partialProps);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
	  }
	}

	function legacyReplaceProps(partialProps, callback) {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .replaceProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  if (!component) {
	    return;
	  }
	  ReactUpdateQueue.enqueueReplacePropsInternal(component, partialProps);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
	  }
	}

	function friendlyStringify(obj) {
	  if (typeof obj === 'object') {
	    if (Array.isArray(obj)) {
	      return '[' + obj.map(friendlyStringify).join(', ') + ']';
	    } else {
	      var pairs = [];
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
	          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
	        }
	      }
	      return '{' + pairs.join(', ') + '}';
	    }
	  } else if (typeof obj === 'string') {
	    return JSON.stringify(obj);
	  } else if (typeof obj === 'function') {
	    return '[function object]';
	  }
	  // Differs from JSON.stringify in that undefined becauses undefined and that
	  // inf and nan don't become null
	  return String(obj);
	}

	var styleMutationWarning = {};

	function checkAndWarnForMutatedStyle(style1, style2, component) {
	  if (style1 == null || style2 == null) {
	    return;
	  }
	  if (shallowEqual(style1, style2)) {
	    return;
	  }

	  var componentName = component._tag;
	  var owner = component._currentElement._owner;
	  var ownerName;
	  if (owner) {
	    ownerName = owner.getName();
	  }

	  var hash = ownerName + '|' + componentName;

	  if (styleMutationWarning.hasOwnProperty(hash)) {
	    return;
	  }

	  styleMutationWarning[hash] = true;

	  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : undefined;
	}

	/**
	 * @param {object} component
	 * @param {?object} props
	 */
	function assertValidProps(component, props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (process.env.NODE_ENV !== 'production') {
	    if (voidElementTags[component._tag]) {
	      process.env.NODE_ENV !== 'production' ? warning(props.children == null && props.dangerouslySetInnerHTML == null, '%s is a void element tag and must not have `children` or ' + 'use `props.dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : undefined;
	    }
	  }
	  if (props.dangerouslySetInnerHTML != null) {
	    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : invariant(false) : undefined;
	    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' + 'for more information.') : invariant(false) : undefined;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : undefined;
	    process.env.NODE_ENV !== 'production' ? warning(!props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : undefined;
	  }
	  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, ' + 'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' + 'using JSX.%s', getDeclarationErrorAddendum(component)) : invariant(false) : undefined;
	}

	function enqueuePutListener(id, registrationName, listener, transaction) {
	  if (process.env.NODE_ENV !== 'production') {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : undefined;
	  }
	  var container = ReactMount.findReactContainerForID(id);
	  if (container) {
	    var doc = container.nodeType === ELEMENT_NODE_TYPE ? container.ownerDocument : container;
	    listenTo(registrationName, doc);
	  }
	  transaction.getReactMountReady().enqueue(putListener, {
	    id: id,
	    registrationName: registrationName,
	    listener: listener
	  });
	}

	function putListener() {
	  var listenerToPut = this;
	  ReactBrowserEventEmitter.putListener(listenerToPut.id, listenerToPut.registrationName, listenerToPut.listener);
	}

	// There are so many media events, it makes sense to just
	// maintain a list rather than create a `trapBubbledEvent` for each
	var mediaEvents = {
	  topAbort: 'abort',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTimeUpdate: 'timeupdate',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting'
	};

	function trapBubbledEventsLocal() {
	  var inst = this;
	  // If a component renders to null or if another component fatals and causes
	  // the state of the tree to be corrupted, `node` here can be null.
	  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : invariant(false) : undefined;
	  var node = ReactMount.getNode(inst._rootNodeID);
	  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : invariant(false) : undefined;

	  switch (inst._tag) {
	    case 'iframe':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
	      break;
	    case 'video':
	    case 'audio':

	      inst._wrapperState.listeners = [];
	      // create listener for each media event
	      for (var event in mediaEvents) {
	        if (mediaEvents.hasOwnProperty(event)) {
	          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes[event], mediaEvents[event], node));
	        }
	      }

	      break;
	    case 'img':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
	      break;
	    case 'form':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit', node)];
	      break;
	  }
	}

	function mountReadyInputWrapper() {
	  ReactDOMInput.mountReadyWrapper(this);
	}

	function postUpdateSelectWrapper() {
	  ReactDOMSelect.postUpdateWrapper(this);
	}

	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special cased tags.

	var omittedCloseTags = {
	  'area': true,
	  'base': true,
	  'br': true,
	  'col': true,
	  'embed': true,
	  'hr': true,
	  'img': true,
	  'input': true,
	  'keygen': true,
	  'link': true,
	  'meta': true,
	  'param': true,
	  'source': true,
	  'track': true,
	  'wbr': true
	};

	// NOTE: menuitem's close tag should be omitted, but that causes problems.
	var newlineEatingTags = {
	  'listing': true,
	  'pre': true,
	  'textarea': true
	};

	// For HTML, certain tags cannot have children. This has the same purpose as
	// `omittedCloseTags` except that `menuitem` should still have its closing tag.

	var voidElementTags = assign({
	  'menuitem': true
	}, omittedCloseTags);

	// We accept any tag to be rendered but since this gets injected into arbitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name

	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = ({}).hasOwnProperty;

	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : invariant(false) : undefined;
	    validatedTagCache[tag] = true;
	  }
	}

	function processChildContextDev(context, inst) {
	  // Pass down our tag name to child components for validation purposes
	  context = assign({}, context);
	  var info = context[validateDOMNesting.ancestorInfoContextKey];
	  context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(info, inst._tag, inst);
	  return context;
	}

	function isCustomComponent(tagName, props) {
	  return tagName.indexOf('-') >= 0 || props.is != null;
	}

	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(tag) {
	  validateDangerousTag(tag);
	  this._tag = tag.toLowerCase();
	  this._renderedChildren = null;
	  this._previousStyle = null;
	  this._previousStyleCopy = null;
	  this._rootNodeID = null;
	  this._wrapperState = null;
	  this._topLevelWrapper = null;
	  this._nodeWithLegacyProperties = null;
	  if (process.env.NODE_ENV !== 'production') {
	    this._unprocessedContextDev = null;
	    this._processedContextDev = null;
	  }
	}

	ReactDOMComponent.displayName = 'ReactDOMComponent';

	ReactDOMComponent.Mixin = {

	  construct: function (element) {
	    this._currentElement = element;
	  },

	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {string} rootID The root DOM ID for this node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   * @return {string} The computed markup.
	   */
	  mountComponent: function (rootID, transaction, context) {
	    this._rootNodeID = rootID;

	    var props = this._currentElement.props;

	    switch (this._tag) {
	      case 'iframe':
	      case 'img':
	      case 'form':
	      case 'video':
	      case 'audio':
	        this._wrapperState = {
	          listeners: null
	        };
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'button':
	        props = ReactDOMButton.getNativeProps(this, props, context);
	        break;
	      case 'input':
	        ReactDOMInput.mountWrapper(this, props, context);
	        props = ReactDOMInput.getNativeProps(this, props, context);
	        break;
	      case 'option':
	        ReactDOMOption.mountWrapper(this, props, context);
	        props = ReactDOMOption.getNativeProps(this, props, context);
	        break;
	      case 'select':
	        ReactDOMSelect.mountWrapper(this, props, context);
	        props = ReactDOMSelect.getNativeProps(this, props, context);
	        context = ReactDOMSelect.processChildContext(this, props, context);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.mountWrapper(this, props, context);
	        props = ReactDOMTextarea.getNativeProps(this, props, context);
	        break;
	    }

	    assertValidProps(this, props);
	    if (process.env.NODE_ENV !== 'production') {
	      if (context[validateDOMNesting.ancestorInfoContextKey]) {
	        validateDOMNesting(this._tag, this, context[validateDOMNesting.ancestorInfoContextKey]);
	      }
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      this._unprocessedContextDev = context;
	      this._processedContextDev = processChildContextDev(context, this);
	      context = this._processedContextDev;
	    }

	    var mountImage;
	    if (transaction.useCreateElement) {
	      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
	      var el = ownerDocument.createElement(this._currentElement.type);
	      DOMPropertyOperations.setAttributeForID(el, this._rootNodeID);
	      // Populate node cache
	      ReactMount.getID(el);
	      this._updateDOMProperties({}, props, transaction, el);
	      this._createInitialChildren(transaction, props, context, el);
	      mountImage = el;
	    } else {
	      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
	      var tagContent = this._createContentMarkup(transaction, props, context);
	      if (!tagContent && omittedCloseTags[this._tag]) {
	        mountImage = tagOpen + '/>';
	      } else {
	        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
	      }
	    }

	    switch (this._tag) {
	      case 'input':
	        transaction.getReactMountReady().enqueue(mountReadyInputWrapper, this);
	      // falls through
	      case 'button':
	      case 'select':
	      case 'textarea':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	    }

	    return mountImage;
	  },

	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
	    var ret = '<' + this._currentElement.type;

	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (propValue) {
	          enqueuePutListener(this._rootNodeID, propKey, propValue, transaction);
	        }
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            if (process.env.NODE_ENV !== 'production') {
	              // See `_updateDOMProperties`. style block
	              this._previousStyle = propValue;
	            }
	            propValue = this._previousStyleCopy = assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
	        }
	        var markup = null;
	        if (this._tag != null && isCustomComponent(this._tag, props)) {
	          if (propKey !== CHILDREN) {
	            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
	          }
	        } else {
	          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        }
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }

	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret;
	    }

	    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
	    return ret + ' ' + markupForID;
	  },

	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function (transaction, props, context) {
	    var ret = '';

	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        ret = innerHTML.__html;
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        ret = escapeTextContentForBrowser(contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        ret = mountImages.join('');
	      }
	    }
	    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
	      // text/html ignores the first character in these tags if it's a newline
	      // Prefer to break application/xml over text/html (for now) by adding
	      // a newline specifically to get eaten by the parser. (Alternately for
	      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
	      // \r is normalized out by HTMLTextAreaElement#value.)
	      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
	      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
	      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
	      // See: Parsing of "textarea" "listing" and "pre" elements
	      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
	      return '\n' + ret;
	    } else {
	      return ret;
	    }
	  },

	  _createInitialChildren: function (transaction, props, context, el) {
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        setInnerHTML(el, innerHTML.__html);
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        setTextContent(el, contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        for (var i = 0; i < mountImages.length; i++) {
	          el.appendChild(mountImages[i]);
	        }
	      }
	    }
	  },

	  /**
	   * Receives a next element and updates the component.
	   *
	   * @internal
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   */
	  receiveComponent: function (nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },

	  /**
	   * Updates a native DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevElement, nextElement, context) {
	    var lastProps = prevElement.props;
	    var nextProps = this._currentElement.props;

	    switch (this._tag) {
	      case 'button':
	        lastProps = ReactDOMButton.getNativeProps(this, lastProps);
	        nextProps = ReactDOMButton.getNativeProps(this, nextProps);
	        break;
	      case 'input':
	        ReactDOMInput.updateWrapper(this);
	        lastProps = ReactDOMInput.getNativeProps(this, lastProps);
	        nextProps = ReactDOMInput.getNativeProps(this, nextProps);
	        break;
	      case 'option':
	        lastProps = ReactDOMOption.getNativeProps(this, lastProps);
	        nextProps = ReactDOMOption.getNativeProps(this, nextProps);
	        break;
	      case 'select':
	        lastProps = ReactDOMSelect.getNativeProps(this, lastProps);
	        nextProps = ReactDOMSelect.getNativeProps(this, nextProps);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.updateWrapper(this);
	        lastProps = ReactDOMTextarea.getNativeProps(this, lastProps);
	        nextProps = ReactDOMTextarea.getNativeProps(this, nextProps);
	        break;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // If the context is reference-equal to the old one, pass down the same
	      // processed object so the update bailout in ReactReconciler behaves
	      // correctly (and identically in dev and prod). See #5005.
	      if (this._unprocessedContextDev !== context) {
	        this._unprocessedContextDev = context;
	        this._processedContextDev = processChildContextDev(context, this);
	      }
	      context = this._processedContextDev;
	    }

	    assertValidProps(this, nextProps);
	    this._updateDOMProperties(lastProps, nextProps, transaction, null);
	    this._updateDOMChildren(lastProps, nextProps, transaction, context);

	    if (!canDefineProperty && this._nodeWithLegacyProperties) {
	      this._nodeWithLegacyProperties.props = nextProps;
	    }

	    if (this._tag === 'select') {
	      // <select> value update needs to occur after <option> children
	      // reconciliation
	      transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
	    }
	  },

	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?DOMElement} node
	   */
	  _updateDOMProperties: function (lastProps, nextProps, transaction, node) {
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey)) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (lastProps[propKey]) {
	          // Only call deleteListener if there was a listener previously or
	          // else willDeleteListener gets called when there wasn't actually a
	          // listener (e.g., onClick={null})
	          deleteListener(this._rootNodeID, propKey);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        DOMPropertyOperations.deleteValueForProperty(node, propKey);
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps[propKey];
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          if (process.env.NODE_ENV !== 'production') {
	            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
	            this._previousStyle = nextProp;
	          }
	          nextProp = this._previousStyleCopy = assign({}, nextProp);
	        } else {
	          this._previousStyleCopy = null;
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (nextProp) {
	          enqueuePutListener(this._rootNodeID, propKey, nextProp, transaction);
	        } else if (lastProp) {
	          deleteListener(this._rootNodeID, propKey);
	        }
	      } else if (isCustomComponent(this._tag, nextProps)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        if (propKey === CHILDREN) {
	          nextProp = null;
	        }
	        DOMPropertyOperations.setValueForAttribute(node, propKey, nextProp);
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        // If we're updating to null or undefined, we should remove the property
	        // from the DOM node instead of inadvertantly setting to a string. This
	        // brings us in line with the same behavior we have on initial render.
	        if (nextProp != null) {
	          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
	        } else {
	          DOMPropertyOperations.deleteValueForProperty(node, propKey);
	        }
	      }
	    }
	    if (styleUpdates) {
	      if (!node) {
	        node = ReactMount.getNode(this._rootNodeID);
	      }
	      CSSPropertyOperations.setValueForStyles(node, styleUpdates);
	    }
	  },

	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   */
	  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
	    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
	    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

	    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;

	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	    }

	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        this.updateMarkup('' + nextHtml);
	      }
	    } else if (nextChildren != null) {
	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },

	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function () {
	    switch (this._tag) {
	      case 'iframe':
	      case 'img':
	      case 'form':
	      case 'video':
	      case 'audio':
	        var listeners = this._wrapperState.listeners;
	        if (listeners) {
	          for (var i = 0; i < listeners.length; i++) {
	            listeners[i].remove();
	          }
	        }
	        break;
	      case 'input':
	        ReactDOMInput.unmountWrapper(this);
	        break;
	      case 'html':
	      case 'head':
	      case 'body':
	        /**
	         * Components like <html> <head> and <body> can't be removed or added
	         * easily in a cross-browser way, however it's valuable to be able to
	         * take advantage of React's reconciliation for styling and <title>
	         * management. So we just document it and throw in dangerous cases.
	         */
	         true ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is ' + 'impossible to unmount some top-level components (eg <html>, ' + '<head>, and <body>) reliably and efficiently. To fix this, have a ' + 'single top-level component that never unmounts render these ' + 'elements.', this._tag) : invariant(false) : undefined;
	        break;
	    }

	    this.unmountChildren();
	    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	    this._rootNodeID = null;
	    this._wrapperState = null;
	    if (this._nodeWithLegacyProperties) {
	      var node = this._nodeWithLegacyProperties;
	      node._reactInternalComponent = null;
	      this._nodeWithLegacyProperties = null;
	    }
	  },

	  getPublicInstance: function () {
	    if (!this._nodeWithLegacyProperties) {
	      var node = ReactMount.getNode(this._rootNodeID);

	      node._reactInternalComponent = this;
	      node.getDOMNode = legacyGetDOMNode;
	      node.isMounted = legacyIsMounted;
	      node.setState = legacySetStateEtc;
	      node.replaceState = legacySetStateEtc;
	      node.forceUpdate = legacySetStateEtc;
	      node.setProps = legacySetProps;
	      node.replaceProps = legacyReplaceProps;

	      if (process.env.NODE_ENV !== 'production') {
	        if (canDefineProperty) {
	          Object.defineProperties(node, legacyPropsDescriptor);
	        } else {
	          // updateComponent will update this property on subsequent renders
	          node.props = this._currentElement.props;
	        }
	      } else {
	        // updateComponent will update this property on subsequent renders
	        node.props = this._currentElement.props;
	      }

	      this._nodeWithLegacyProperties = node;
	    }
	    return this._nodeWithLegacyProperties;
	  }

	};

	ReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent'
	});

	assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

	module.exports = ReactDOMComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule AutoFocusUtils
	 * @typechecks static-only
	 */

	'use strict';

	var ReactMount = __webpack_require__(28);

	var findDOMNode = __webpack_require__(91);
	var focusNode = __webpack_require__(95);

	var Mixin = {
	  componentDidMount: function () {
	    if (this.props.autoFocus) {
	      focusNode(findDOMNode(this));
	    }
	  }
	};

	var AutoFocusUtils = {
	  Mixin: Mixin,

	  focusDOMComponent: function () {
	    focusNode(ReactMount.getNode(this._rootNodeID));
	  }
	};

	module.exports = AutoFocusUtils;

/***/ },
/* 95 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule focusNode
	 */

	'use strict';

	/**
	 * @param {DOMElement} node input/textarea to focus
	 */
	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch (e) {}
	}

	module.exports = focusNode;

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSPropertyOperations
	 * @typechecks static-only
	 */

	'use strict';

	var CSSProperty = __webpack_require__(97);
	var ExecutionEnvironment = __webpack_require__(9);
	var ReactPerf = __webpack_require__(18);

	var camelizeStyleName = __webpack_require__(98);
	var dangerousStyleValue = __webpack_require__(100);
	var hyphenateStyleName = __webpack_require__(101);
	var memoizeStringOnly = __webpack_require__(103);
	var warning = __webpack_require__(25);

	var processStyleName = memoizeStringOnly(function (styleName) {
	  return hyphenateStyleName(styleName);
	});

	var hasShorthandPropertyBug = false;
	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  var tempStyle = document.createElement('div').style;
	  try {
	    // IE8 throws "Invalid argument." if resetting shorthand style properties.
	    tempStyle.font = '';
	  } catch (e) {
	    hasShorthandPropertyBug = true;
	  }
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}

	if (process.env.NODE_ENV !== 'production') {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;

	  var warnedStyleNames = {};
	  var warnedStyleValues = {};

	  var warnHyphenatedStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?', name, camelizeStyleName(name)) : undefined;
	  };

	  var warnBadVendoredStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1)) : undefined;
	  };

	  var warnStyleValueWithSemicolon = function (name, value) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }

	    warnedStyleValues[value] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon. ' + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, '')) : undefined;
	  };

	  /**
	   * @param {string} name
	   * @param {*} value
	   */
	  var warnValidStyle = function (name, value) {
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value);
	    }
	  };
	}

	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {

	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @return {?string}
	   */
	  createMarkupForStyles: function (styles) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styleValue);
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue) + ';';
	      }
	    }
	    return serialized || null;
	  },

	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   */
	  setValueForStyles: function (node, styles) {
	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styles[styleName]);
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
	      if (styleName === 'float') {
	        styleName = styleFloatAccessor;
	      }
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }

	};

	ReactPerf.measureMethods(CSSPropertyOperations, 'CSSPropertyOperations', {
	  setValueForStyles: 'setValueForStyles'
	});

	module.exports = CSSPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 97 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSProperty
	 */

	'use strict';

	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	var isUnitlessNumber = {
	  animationIterationCount: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,

	  // SVG-related properties
	  fillOpacity: true,
	  stopOpacity: true,
	  strokeDashoffset: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};

	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}

	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});

	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundAttachment: true,
	    backgroundColor: true,
	    backgroundImage: true,
	    backgroundPositionX: true,
	    backgroundPositionY: true,
	    backgroundRepeat: true
	  },
	  backgroundPosition: {
	    backgroundPositionX: true,
	    backgroundPositionY: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  },
	  outline: {
	    outlineWidth: true,
	    outlineStyle: true,
	    outlineColor: true
	  }
	};

	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};

	module.exports = CSSProperty;

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelizeStyleName
	 * @typechecks
	 */

	'use strict';

	var camelize = __webpack_require__(99);

	var msPattern = /^-ms-/;

	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}

	module.exports = camelizeStyleName;

/***/ },
/* 99 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelize
	 * @typechecks
	 */

	"use strict";

	var _hyphenPattern = /-(.)/g;

	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function (_, character) {
	    return character.toUpperCase();
	  });
	}

	module.exports = camelize;

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule dangerousStyleValue
	 * @typechecks static-only
	 */

	'use strict';

	var CSSProperty = __webpack_require__(97);

	var isUnitlessNumber = CSSProperty.isUnitlessNumber;

	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901

	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }

	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }

	  if (typeof value === 'string') {
	    value = value.trim();
	  }
	  return value + 'px';
	}

	module.exports = dangerousStyleValue;

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenateStyleName
	 * @typechecks
	 */

	'use strict';

	var hyphenate = __webpack_require__(102);

	var msPattern = /^ms-/;

	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}

	module.exports = hyphenateStyleName;

/***/ },
/* 102 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenate
	 * @typechecks
	 */

	'use strict';

	var _uppercasePattern = /([A-Z])/g;

	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}

	module.exports = hyphenate;

/***/ },
/* 103 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule memoizeStringOnly
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 *
	 * @param {function} callback
	 * @return {function}
	 */
	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function (string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}

	module.exports = memoizeStringOnly;

/***/ },
/* 104 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMButton
	 */

	'use strict';

	var mouseListenerNames = {
	  onClick: true,
	  onDoubleClick: true,
	  onMouseDown: true,
	  onMouseMove: true,
	  onMouseUp: true,

	  onClickCapture: true,
	  onDoubleClickCapture: true,
	  onMouseDownCapture: true,
	  onMouseMoveCapture: true,
	  onMouseUpCapture: true
	};

	/**
	 * Implements a <button> native component that does not receive mouse events
	 * when `disabled` is set.
	 */
	var ReactDOMButton = {
	  getNativeProps: function (inst, props, context) {
	    if (!props.disabled) {
	      return props;
	    }

	    // Copy the props, except the mouse listeners
	    var nativeProps = {};
	    for (var key in props) {
	      if (props.hasOwnProperty(key) && !mouseListenerNames[key]) {
	        nativeProps[key] = props[key];
	      }
	    }

	    return nativeProps;
	  }
	};

	module.exports = ReactDOMButton;

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMInput
	 */

	'use strict';

	var ReactDOMIDOperations = __webpack_require__(27);
	var LinkedValueUtils = __webpack_require__(106);
	var ReactMount = __webpack_require__(28);
	var ReactUpdates = __webpack_require__(54);

	var assign = __webpack_require__(39);
	var invariant = __webpack_require__(13);

	var instancesByReactID = {};

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMInput.updateWrapper(this);
	  }
	}

	/**
	 * Implements an <input> native component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = {
	  getNativeProps: function (inst, props, context) {
	    var value = LinkedValueUtils.getValue(props);
	    var checked = LinkedValueUtils.getChecked(props);

	    var nativeProps = assign({}, props, {
	      defaultChecked: undefined,
	      defaultValue: undefined,
	      value: value != null ? value : inst._wrapperState.initialValue,
	      checked: checked != null ? checked : inst._wrapperState.initialChecked,
	      onChange: inst._wrapperState.onChange
	    });

	    return nativeProps;
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);
	    }

	    var defaultValue = props.defaultValue;
	    inst._wrapperState = {
	      initialChecked: props.defaultChecked || false,
	      initialValue: defaultValue != null ? defaultValue : null,
	      onChange: _handleChange.bind(inst)
	    };
	  },

	  mountReadyWrapper: function (inst) {
	    // Can't be in mountWrapper or else server rendering leaks.
	    instancesByReactID[inst._rootNodeID] = inst;
	  },

	  unmountWrapper: function (inst) {
	    delete instancesByReactID[inst._rootNodeID];
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    // TODO: Shouldn't this be getChecked(props)?
	    var checked = props.checked;
	    if (checked != null) {
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'checked', checked || false);
	    }

	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;

	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  // Here we use asap to wait until all updates have propagated, which
	  // is important when using controlled components within layers:
	  // https://github.com/facebook/react/issues/1698
	  ReactUpdates.asap(forceUpdateIfMounted, this);

	  var name = props.name;
	  if (props.type === 'radio' && name != null) {
	    var rootNode = ReactMount.getNode(this._rootNodeID);
	    var queryRoot = rootNode;

	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    }

	    // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form, let's just use the global
	    // `querySelectorAll` to ensure we don't miss anything.
	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];
	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      }
	      // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React with non-React.
	      var otherID = ReactMount.getID(otherNode);
	      !otherID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.') : invariant(false) : undefined;
	      var otherInstance = instancesByReactID[otherID];
	      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Unknown radio button ID %s.', otherID) : invariant(false) : undefined;
	      // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.
	      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	    }
	  }

	  return returnValue;
	}

	module.exports = ReactDOMInput;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LinkedValueUtils
	 * @typechecks static-only
	 */

	'use strict';

	var ReactPropTypes = __webpack_require__(107);
	var ReactPropTypeLocations = __webpack_require__(65);

	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);

	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true
	};

	function _assertSingleLink(inputProps) {
	  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use ' + 'checkedLink, you probably don\'t want to use valueLink and vice versa.') : invariant(false) : undefined;
	}
	function _assertValueLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want ' + 'to use value or onChange, you probably don\'t want to use valueLink.') : invariant(false) : undefined;
	}

	function _assertCheckedLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. ' + 'If you want to use checked or onChange, you probably don\'t want to ' + 'use checkedLink') : invariant(false) : undefined;
	}

	var propTypes = {
	  value: function (props, propName, componentName) {
	    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  checked: function (props, propName, componentName) {
	    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  onChange: ReactPropTypes.func
	};

	var loggedTypeFailures = {};
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  checkPropTypes: function (tagName, props, owner) {
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error = propTypes[propName](props, propName, tagName, ReactPropTypeLocations.prop, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum(owner);
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : undefined;
	      }
	    }
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function (inputProps) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.value;
	    }
	    return inputProps.value;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function (inputProps) {
	    if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.value;
	    }
	    return inputProps.checked;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @param {SyntheticEvent} event change event to handle
	   */
	  executeOnChange: function (inputProps, event) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.requestChange(event.target.value);
	    } else if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.requestChange(event.target.checked);
	    } else if (inputProps.onChange) {
	      return inputProps.onChange.call(undefined, event);
	    }
	  }
	};

	module.exports = LinkedValueUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypes
	 */

	'use strict';

	var ReactElement = __webpack_require__(42);
	var ReactPropTypeLocationNames = __webpack_require__(66);

	var emptyFunction = __webpack_require__(15);
	var getIteratorFn = __webpack_require__(108);

	/**
	 * Collection of methods that allow declaration and validation of props that are
	 * supplied to React components. Example usage:
	 *
	 *   var Props = require('ReactPropTypes');
	 *   var MyArticle = React.createClass({
	 *     propTypes: {
	 *       // An optional string prop named "description".
	 *       description: Props.string,
	 *
	 *       // A required enum prop named "category".
	 *       category: Props.oneOf(['News','Photos']).isRequired,
	 *
	 *       // A prop named "dialog" that requires an instance of Dialog.
	 *       dialog: Props.instanceOf(Dialog).isRequired
	 *     },
	 *     render: function() { ... }
	 *   });
	 *
	 * A more formal specification of how these methods are used:
	 *
	 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	 *   decl := ReactPropTypes.{type}(.isRequired)?
	 *
	 * Each and every declaration produces a function with the same signature. This
	 * allows the creation of custom validation functions. For example:
	 *
	 *  var MyLink = React.createClass({
	 *    propTypes: {
	 *      // An optional string or URI prop named "href".
	 *      href: function(props, propName, componentName) {
	 *        var propValue = props[propName];
	 *        if (propValue != null && typeof propValue !== 'string' &&
	 *            !(propValue instanceof URI)) {
	 *          return new Error(
	 *            'Expected a string or an URI for ' + propName + ' in ' +
	 *            componentName
	 *          );
	 *        }
	 *      }
	 *    },
	 *    render: function() {...}
	 *  });
	 *
	 * @internal
	 */

	var ANONYMOUS = '<<anonymous>>';

	var ReactPropTypes = {
	  array: createPrimitiveTypeChecker('array'),
	  bool: createPrimitiveTypeChecker('boolean'),
	  func: createPrimitiveTypeChecker('function'),
	  number: createPrimitiveTypeChecker('number'),
	  object: createPrimitiveTypeChecker('object'),
	  string: createPrimitiveTypeChecker('string'),

	  any: createAnyTypeChecker(),
	  arrayOf: createArrayOfTypeChecker,
	  element: createElementTypeChecker(),
	  instanceOf: createInstanceTypeChecker,
	  node: createNodeChecker(),
	  objectOf: createObjectOfTypeChecker,
	  oneOf: createEnumTypeChecker,
	  oneOfType: createUnionTypeChecker,
	  shape: createShapeTypeChecker
	};

	function createChainableTypeChecker(validate) {
	  function checkType(isRequired, props, propName, componentName, location, propFullName) {
	    componentName = componentName || ANONYMOUS;
	    propFullName = propFullName || propName;
	    if (props[propName] == null) {
	      var locationName = ReactPropTypeLocationNames[location];
	      if (isRequired) {
	        return new Error('Required ' + locationName + ' `' + propFullName + '` was not specified in ' + ('`' + componentName + '`.'));
	      }
	      return null;
	    } else {
	      return validate(props, propName, componentName, location, propFullName);
	    }
	  }

	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);

	  return chainedCheckType;
	}

	function createPrimitiveTypeChecker(expectedType) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== expectedType) {
	      var locationName = ReactPropTypeLocationNames[location];
	      // `propValue` being instance of, say, date/regexp, pass the 'object'
	      // check, but we can offer a more precise error message here rather than
	      // 'of type `object`'.
	      var preciseType = getPreciseType(propValue);

	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createAnyTypeChecker() {
	  return createChainableTypeChecker(emptyFunction.thatReturns(null));
	}

	function createArrayOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    if (!Array.isArray(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	    }
	    for (var i = 0; i < propValue.length; i++) {
	      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
	      if (error instanceof Error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createElementTypeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!ReactElement.isValidElement(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a single ReactElement.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createInstanceTypeChecker(expectedClass) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!(props[propName] instanceof expectedClass)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var expectedClassName = expectedClass.name || ANONYMOUS;
	      var actualClassName = getClassName(props[propName]);
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createEnumTypeChecker(expectedValues) {
	  if (!Array.isArray(expectedValues)) {
	    return createChainableTypeChecker(function () {
	      return new Error('Invalid argument supplied to oneOf, expected an instance of array.');
	    });
	  }

	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    for (var i = 0; i < expectedValues.length; i++) {
	      if (propValue === expectedValues[i]) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    var valuesString = JSON.stringify(expectedValues);
	    return new Error('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	  }
	  return createChainableTypeChecker(validate);
	}

	function createObjectOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	    }
	    for (var key in propValue) {
	      if (propValue.hasOwnProperty(key)) {
	        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createUnionTypeChecker(arrayOfTypeCheckers) {
	  if (!Array.isArray(arrayOfTypeCheckers)) {
	    return createChainableTypeChecker(function () {
	      return new Error('Invalid argument supplied to oneOfType, expected an instance of array.');
	    });
	  }

	  function validate(props, propName, componentName, location, propFullName) {
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (checker(props, propName, componentName, location, propFullName, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED') == null) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	  }
	  return createChainableTypeChecker(validate);
	}

	function createNodeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!isNode(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createShapeTypeChecker(shapeTypes) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	    }
	    for (var key in shapeTypes) {
	      var checker = shapeTypes[key];
	      if (!checker) {
	        continue;
	      }
	      var error = checker(propValue, key, componentName, location, propFullName + '.' + key, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
	      if (error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function isNode(propValue) {
	  switch (typeof propValue) {
	    case 'number':
	    case 'string':
	    case 'undefined':
	      return true;
	    case 'boolean':
	      return !propValue;
	    case 'object':
	      if (Array.isArray(propValue)) {
	        return propValue.every(isNode);
	      }
	      if (propValue === null || ReactElement.isValidElement(propValue)) {
	        return true;
	      }

	      var iteratorFn = getIteratorFn(propValue);
	      if (iteratorFn) {
	        var iterator = iteratorFn.call(propValue);
	        var step;
	        if (iteratorFn !== propValue.entries) {
	          while (!(step = iterator.next()).done) {
	            if (!isNode(step.value)) {
	              return false;
	            }
	          }
	        } else {
	          // Iterator will provide entry [k,v] tuples rather than values.
	          while (!(step = iterator.next()).done) {
	            var entry = step.value;
	            if (entry) {
	              if (!isNode(entry[1])) {
	                return false;
	              }
	            }
	          }
	        }
	      } else {
	        return false;
	      }

	      return true;
	    default:
	      return false;
	  }
	}

	// Equivalent of `typeof` but with special handling for array and regexp.
	function getPropType(propValue) {
	  var propType = typeof propValue;
	  if (Array.isArray(propValue)) {
	    return 'array';
	  }
	  if (propValue instanceof RegExp) {
	    // Old webkits (at least until Android 4.0) return 'function' rather than
	    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	    // passes PropTypes.object.
	    return 'object';
	  }
	  return propType;
	}

	// This handles more types than `getPropType`. Only used for error messages.
	// See `createPrimitiveTypeChecker`.
	function getPreciseType(propValue) {
	  var propType = getPropType(propValue);
	  if (propType === 'object') {
	    if (propValue instanceof Date) {
	      return 'date';
	    } else if (propValue instanceof RegExp) {
	      return 'regexp';
	    }
	  }
	  return propType;
	}

	// Returns class name of the object, if any.
	function getClassName(propValue) {
	  if (!propValue.constructor || !propValue.constructor.name) {
	    return '<<anonymous>>';
	  }
	  return propValue.constructor.name;
	}

	module.exports = ReactPropTypes;

/***/ },
/* 108 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getIteratorFn
	 * @typechecks static-only
	 */

	'use strict';

	/* global Symbol */
	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	module.exports = getIteratorFn;

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMOption
	 */

	'use strict';

	var ReactChildren = __webpack_require__(110);
	var ReactDOMSelect = __webpack_require__(112);

	var assign = __webpack_require__(39);
	var warning = __webpack_require__(25);

	var valueContextKey = ReactDOMSelect.valueContextKey;

	/**
	 * Implements an <option> native component that warns when `selected` is set.
	 */
	var ReactDOMOption = {
	  mountWrapper: function (inst, props, context) {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : undefined;
	    }

	    // Look up whether this option is 'selected' via context
	    var selectValue = context[valueContextKey];

	    // If context key is null (e.g., no specified value or after initial mount)
	    // or missing (e.g., for <datalist>), we don't change props.selected
	    var selected = null;
	    if (selectValue != null) {
	      selected = false;
	      if (Array.isArray(selectValue)) {
	        // multiple
	        for (var i = 0; i < selectValue.length; i++) {
	          if ('' + selectValue[i] === '' + props.value) {
	            selected = true;
	            break;
	          }
	        }
	      } else {
	        selected = '' + selectValue === '' + props.value;
	      }
	    }

	    inst._wrapperState = { selected: selected };
	  },

	  getNativeProps: function (inst, props, context) {
	    var nativeProps = assign({ selected: undefined, children: undefined }, props);

	    // Read state only from initial mount because <select> updates value
	    // manually; we need the initial state only for server rendering
	    if (inst._wrapperState.selected != null) {
	      nativeProps.selected = inst._wrapperState.selected;
	    }

	    var content = '';

	    // Flatten children and warn if they aren't strings or numbers;
	    // invalid types are ignored.
	    ReactChildren.forEach(props.children, function (child) {
	      if (child == null) {
	        return;
	      }
	      if (typeof child === 'string' || typeof child === 'number') {
	        content += child;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : undefined;
	      }
	    });

	    if (content) {
	      nativeProps.children = content;
	    }

	    return nativeProps;
	  }

	};

	module.exports = ReactDOMOption;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildren
	 */

	'use strict';

	var PooledClass = __webpack_require__(56);
	var ReactElement = __webpack_require__(42);

	var emptyFunction = __webpack_require__(15);
	var traverseAllChildren = __webpack_require__(111);

	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var fourArgumentPooler = PooledClass.fourArgumentPooler;

	var userProvidedKeyEscapeRegex = /\/(?!\/)/g;
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '//');
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.func = forEachFunction;
	  this.context = forEachContext;
	  this.count = 0;
	}
	ForEachBookKeeping.prototype.destructor = function () {
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func;
	  var context = bookKeeping.context;

	  func.call(context, child, bookKeeping.count++);
	}

	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
	  this.result = mapResult;
	  this.keyPrefix = keyPrefix;
	  this.func = mapFunction;
	  this.context = mapContext;
	  this.count = 0;
	}
	MapBookKeeping.prototype.destructor = function () {
	  this.result = null;
	  this.keyPrefix = null;
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result;
	  var keyPrefix = bookKeeping.keyPrefix;
	  var func = bookKeeping.func;
	  var context = bookKeeping.context;

	  var mappedChild = func.call(context, child, bookKeeping.count++);
	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
	  } else if (mappedChild != null) {
	    if (ReactElement.isValidElement(mappedChild)) {
	      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
	      // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild !== child ? escapeUserProvidedKey(mappedChild.key || '') + '/' : '') + childKey);
	    }
	    result.push(mappedChild);
	  }
	}

	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';
	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }
	  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	}

	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}

	function forEachSingleChildDummy(traverseContext, child, name) {
	  return null;
	}

	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}

	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 */
	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
	  return result;
	}

	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
	  count: countChildren,
	  toArray: toArray
	};

	module.exports = ReactChildren;

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule traverseAllChildren
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(5);
	var ReactElement = __webpack_require__(42);
	var ReactInstanceHandles = __webpack_require__(45);

	var getIteratorFn = __webpack_require__(108);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);

	var SEPARATOR = ReactInstanceHandles.SEPARATOR;
	var SUBSEPARATOR = ':';

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var userProvidedKeyEscaperLookup = {
	  '=': '=0',
	  '.': '=1',
	  ':': '=2'
	};

	var userProvidedKeyEscapeRegex = /[=.:]/g;

	var didWarnAboutMaps = false;

	function userProvidedKeyEscaper(match) {
	  return userProvidedKeyEscaperLookup[match];
	}

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  if (component && component.key != null) {
	    // Explicit key
	    return wrapUserProvidedKey(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * Escape a component key so that it is safe to use in a reactid.
	 *
	 * @param {*} text Component key to be escaped.
	 * @return {string} An escaped string.
	 */
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, userProvidedKeyEscaper);
	}

	/**
	 * Wrap a `key` value explicitly provided by the user to distinguish it from
	 * implicitly-generated keys generated by a component's index in its parent.
	 *
	 * @param {string} key Value of a user-provided `key` attribute
	 * @return {string}
	 */
	function wrapUserProvidedKey(key) {
	  return '$' + escapeUserProvidedKey(key);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null || type === 'string' || type === 'number' || ReactElement.isValidElement(children)) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }

	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.') : undefined;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + wrapUserProvidedKey(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (process.env.NODE_ENV !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : invariant(false) : undefined;
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}

	module.exports = traverseAllChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelect
	 */

	'use strict';

	var LinkedValueUtils = __webpack_require__(106);
	var ReactMount = __webpack_require__(28);
	var ReactUpdates = __webpack_require__(54);

	var assign = __webpack_require__(39);
	var warning = __webpack_require__(25);

	var valueContextKey = '__ReactDOMSelect_value$' + Math.random().toString(36).slice(2);

	function updateOptionsIfPendingUpdateAndMounted() {
	  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
	    this._wrapperState.pendingUpdate = false;

	    var props = this._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);

	    if (value != null) {
	      updateOptions(this, Boolean(props.multiple), value);
	    }
	  }
	}

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	var valuePropNames = ['value', 'defaultValue'];

	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function checkSelectPropTypes(inst, props) {
	  var owner = inst._currentElement._owner;
	  LinkedValueUtils.checkPropTypes('select', props, owner);

	  for (var i = 0; i < valuePropNames.length; i++) {
	    var propName = valuePropNames[i];
	    if (props[propName] == null) {
	      continue;
	    }
	    if (props.multiple) {
	      process.env.NODE_ENV !== 'production' ? warning(Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
	    } else {
	      process.env.NODE_ENV !== 'production' ? warning(!Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
	    }
	  }
	}

	/**
	 * @param {ReactDOMComponent} inst
	 * @param {boolean} multiple
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(inst, multiple, propValue) {
	  var selectedValue, i;
	  var options = ReactMount.getNode(inst._rootNodeID).options;

	  if (multiple) {
	    selectedValue = {};
	    for (i = 0; i < propValue.length; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0; i < options.length; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0; i < options.length; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}

	/**
	 * Implements a <select> native component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = {
	  valueContextKey: valueContextKey,

	  getNativeProps: function (inst, props, context) {
	    return assign({}, props, {
	      onChange: inst._wrapperState.onChange,
	      value: undefined
	    });
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      checkSelectPropTypes(inst, props);
	    }

	    var value = LinkedValueUtils.getValue(props);
	    inst._wrapperState = {
	      pendingUpdate: false,
	      initialValue: value != null ? value : props.defaultValue,
	      onChange: _handleChange.bind(inst),
	      wasMultiple: Boolean(props.multiple)
	    };
	  },

	  processChildContext: function (inst, props, context) {
	    // Pass down initial value so initial generated markup has correct
	    // `selected` attributes
	    var childContext = assign({}, context);
	    childContext[valueContextKey] = inst._wrapperState.initialValue;
	    return childContext;
	  },

	  postUpdateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    // After the initial mount, we control selected-ness manually so don't pass
	    // the context value down
	    inst._wrapperState.initialValue = undefined;

	    var wasMultiple = inst._wrapperState.wasMultiple;
	    inst._wrapperState.wasMultiple = Boolean(props.multiple);

	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      inst._wrapperState.pendingUpdate = false;
	      updateOptions(inst, Boolean(props.multiple), value);
	    } else if (wasMultiple !== Boolean(props.multiple)) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (props.defaultValue != null) {
	        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
	      }
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  this._wrapperState.pendingUpdate = true;
	  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMSelect;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextarea
	 */

	'use strict';

	var LinkedValueUtils = __webpack_require__(106);
	var ReactDOMIDOperations = __webpack_require__(27);
	var ReactUpdates = __webpack_require__(54);

	var assign = __webpack_require__(39);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMTextarea.updateWrapper(this);
	  }
	}

	/**
	 * Implements a <textarea> native component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = {
	  getNativeProps: function (inst, props, context) {
	    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : invariant(false) : undefined;

	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.
	    var nativeProps = assign({}, props, {
	      defaultValue: undefined,
	      value: undefined,
	      children: inst._wrapperState.initialValue,
	      onChange: inst._wrapperState.onChange
	    });

	    return nativeProps;
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
	    }

	    var defaultValue = props.defaultValue;
	    // TODO (yungsters): Remove support for children content in <textarea>.
	    var children = props.children;
	    if (children != null) {
	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : undefined;
	      }
	      !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : invariant(false) : undefined;
	      if (Array.isArray(children)) {
	        !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : invariant(false) : undefined;
	        children = children[0];
	      }

	      defaultValue = '' + children;
	    }
	    if (defaultValue == null) {
	      defaultValue = '';
	    }
	    var value = LinkedValueUtils.getValue(props);

	    inst._wrapperState = {
	      // We save the initial value so that `ReactDOMComponent` doesn't update
	      // `textContent` (unnecessary since we update value).
	      // The initial value can be a boolean or object so that's why it's
	      // forced to be a string.
	      initialValue: '' + (value != null ? value : defaultValue),
	      onChange: _handleChange.bind(inst)
	    };
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMTextarea;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChild
	 * @typechecks static-only
	 */

	'use strict';

	var ReactComponentEnvironment = __webpack_require__(64);
	var ReactMultiChildUpdateTypes = __webpack_require__(16);

	var ReactCurrentOwner = __webpack_require__(5);
	var ReactReconciler = __webpack_require__(50);
	var ReactChildReconciler = __webpack_require__(115);

	var flattenChildren = __webpack_require__(116);

	/**
	 * Updating children of a component may trigger recursive updates. The depth is
	 * used to batch recursive updates to render markup more efficiently.
	 *
	 * @type {number}
	 * @private
	 */
	var updateDepth = 0;

	/**
	 * Queue of update configuration objects.
	 *
	 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
	 *
	 * @type {array<object>}
	 * @private
	 */
	var updateQueue = [];

	/**
	 * Queue of markup to be rendered.
	 *
	 * @type {array<string>}
	 * @private
	 */
	var markupQueue = [];

	/**
	 * Enqueues markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function enqueueInsertMarkup(parentID, markup, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
	    markupIndex: markupQueue.push(markup) - 1,
	    content: null,
	    fromIndex: null,
	    toIndex: toIndex
	  });
	}

	/**
	 * Enqueues moving an existing element to another index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function enqueueMove(parentID, fromIndex, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
	    markupIndex: null,
	    content: null,
	    fromIndex: fromIndex,
	    toIndex: toIndex
	  });
	}

	/**
	 * Enqueues removing an element at an index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function enqueueRemove(parentID, fromIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
	    markupIndex: null,
	    content: null,
	    fromIndex: fromIndex,
	    toIndex: null
	  });
	}

	/**
	 * Enqueues setting the markup of a node.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @private
	 */
	function enqueueSetMarkup(parentID, markup) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.SET_MARKUP,
	    markupIndex: null,
	    content: markup,
	    fromIndex: null,
	    toIndex: null
	  });
	}

	/**
	 * Enqueues setting the text content.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function enqueueTextContent(parentID, textContent) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
	    markupIndex: null,
	    content: textContent,
	    fromIndex: null,
	    toIndex: null
	  });
	}

	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue() {
	  if (updateQueue.length) {
	    ReactComponentEnvironment.processChildrenUpdates(updateQueue, markupQueue);
	    clearQueue();
	  }
	}

	/**
	 * Clears any enqueued updates.
	 *
	 * @private
	 */
	function clearQueue() {
	  updateQueue.length = 0;
	  markupQueue.length = 0;
	}

	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {

	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {

	    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	        }
	      }
	      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	    },

	    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, transaction, context) {
	      var nextChildren;
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            nextChildren = flattenChildren(nextNestedChildrenElements);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	          return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
	        }
	      }
	      nextChildren = flattenChildren(nextNestedChildrenElements);
	      return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
	    },

	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function (nestedChildren, transaction, context) {
	      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
	      this._renderedChildren = children;
	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	          var rootID = this._rootNodeID + name;
	          var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
	          child._mountIndex = index++;
	          mountImages.push(mountImage);
	        }
	      }
	      return mountImages;
	    },

	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function (nextContent) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        ReactChildReconciler.unmountChildren(prevChildren);
	        // TODO: The setTextContent operation should be enough
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChild(prevChildren[name]);
	          }
	        }
	        // Set new text content.
	        this.setTextContent(nextContent);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Replaces any rendered children with a markup string.
	     *
	     * @param {string} nextMarkup String of markup.
	     * @internal
	     */
	    updateMarkup: function (nextMarkup) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        ReactChildReconciler.unmountChildren(prevChildren);
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChildByName(prevChildren[name], name);
	          }
	        }
	        this.setMarkup(nextMarkup);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        this._updateChildren(nextNestedChildrenElements, transaction, context);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Improve performance by isolating this hot code path from the try/catch
	     * block in `updateChildren`.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, transaction, context);
	      this._renderedChildren = nextChildren;
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var lastIndex = 0;
	      var nextIndex = 0;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          this.moveChild(prevChild, nextIndex, lastIndex);
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            this._unmountChild(prevChild);
	          }
	          // The child must be instantiated before it's mounted.
	          this._mountChildByNameAtIndex(nextChild, name, nextIndex, transaction, context);
	        }
	        nextIndex++;
	      }
	      // Remove children that are no longer present.
	      for (name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	          this._unmountChild(prevChildren[name]);
	        }
	      }
	    },

	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted.
	     *
	     * @internal
	     */
	    unmountChildren: function () {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren);
	      this._renderedChildren = null;
	    },

	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function (child, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
	      }
	    },

	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function (child, mountImage) {
	      enqueueInsertMarkup(this._rootNodeID, mountImage, child._mountIndex);
	    },

	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function (child) {
	      enqueueRemove(this._rootNodeID, child._mountIndex);
	    },

	    /**
	     * Sets this text content string.
	     *
	     * @param {string} textContent Text content to set.
	     * @protected
	     */
	    setTextContent: function (textContent) {
	      enqueueTextContent(this._rootNodeID, textContent);
	    },

	    /**
	     * Sets this markup string.
	     *
	     * @param {string} markup Markup to set.
	     * @protected
	     */
	    setMarkup: function (markup) {
	      enqueueSetMarkup(this._rootNodeID, markup);
	    },

	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildByNameAtIndex: function (child, name, index, transaction, context) {
	      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	      var rootID = this._rootNodeID + name;
	      var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
	      child._mountIndex = index;
	      this.createChild(child, mountImage);
	    },

	    /**
	     * Unmounts a rendered child.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @private
	     */
	    _unmountChild: function (child) {
	      this.removeChild(child);
	      child._mountIndex = null;
	    }

	  }

	};

	module.exports = ReactMultiChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildReconciler
	 * @typechecks static-only
	 */

	'use strict';

	var ReactReconciler = __webpack_require__(50);

	var instantiateReactComponent = __webpack_require__(62);
	var shouldUpdateReactComponent = __webpack_require__(67);
	var traverseAllChildren = __webpack_require__(111);
	var warning = __webpack_require__(25);

	function instantiateChild(childInstances, child, name) {
	  // We found a component instance.
	  var keyUnique = childInstances[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
	  }
	  if (child != null && keyUnique) {
	    childInstances[name] = instantiateReactComponent(child, null);
	  }
	}

	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {
	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function (nestedChildNodes, transaction, context) {
	    if (nestedChildNodes == null) {
	      return null;
	    }
	    var childInstances = {};
	    traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
	    return childInstances;
	  },

	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextChildren Flat child element maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function (prevChildren, nextChildren, transaction, context) {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    if (!nextChildren && !prevChildren) {
	      return null;
	    }
	    var name;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      var prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          ReactReconciler.unmountComponent(prevChild, name);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(nextElement, null);
	        nextChildren[name] = nextChildInstance;
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        ReactReconciler.unmountComponent(prevChildren[name]);
	      }
	    }
	    return nextChildren;
	  },

	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function (renderedChildren) {
	    for (var name in renderedChildren) {
	      if (renderedChildren.hasOwnProperty(name)) {
	        var renderedChild = renderedChildren[name];
	        ReactReconciler.unmountComponent(renderedChild);
	      }
	    }
	  }

	};

	module.exports = ReactChildReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule flattenChildren
	 */

	'use strict';

	var traverseAllChildren = __webpack_require__(111);
	var warning = __webpack_require__(25);

	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name) {
	  // We found a component instance.
	  var result = traverseContext;
	  var keyUnique = result[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
	  }
	  if (keyUnique && child != null) {
	    result[name] = child;
	  }
	}

	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};
	  traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  return result;
	}

	module.exports = flattenChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 117 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shallowEqual
	 * @typechecks
	 * 
	 */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (objA === objB) {
	    return true;
	  }

	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  }

	  // Test for A's keys different from B.
	  var bHasOwnProperty = hasOwnProperty.bind(objB);
	  for (var i = 0; i < keysA.length; i++) {
	    if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
	      return false;
	    }
	  }

	  return true;
	}

	module.exports = shallowEqual;

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventListener
	 * @typechecks static-only
	 */

	'use strict';

	var EventListener = __webpack_require__(119);
	var ExecutionEnvironment = __webpack_require__(9);
	var PooledClass = __webpack_require__(56);
	var ReactInstanceHandles = __webpack_require__(45);
	var ReactMount = __webpack_require__(28);
	var ReactUpdates = __webpack_require__(54);

	var assign = __webpack_require__(39);
	var getEventTarget = __webpack_require__(81);
	var getUnboundedScrollPosition = __webpack_require__(120);

	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	/**
	 * Finds the parent React component of `node`.
	 *
	 * @param {*} node
	 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
	 *                           is not nested.
	 */
	function findParent(node) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  var nodeID = ReactMount.getID(node);
	  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
	  var container = ReactMount.findReactContainerForID(rootID);
	  var parent = ReactMount.getFirstReactDOM(container);
	  return parent;
	}

	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function () {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

	function handleTopLevelImpl(bookKeeping) {
	  // TODO: Re-enable event.path handling
	  //
	  // if (bookKeeping.nativeEvent.path && bookKeeping.nativeEvent.path.length > 1) {
	  //   // New browsers have a path attribute on native events
	  //   handleTopLevelWithPath(bookKeeping);
	  // } else {
	  //   // Legacy browsers don't have a path attribute on native events
	  //   handleTopLevelWithoutPath(bookKeeping);
	  // }

	  void handleTopLevelWithPath; // temporarily unused
	  handleTopLevelWithoutPath(bookKeeping);
	}

	// Legacy browsers don't have a path attribute on native events
	function handleTopLevelWithoutPath(bookKeeping) {
	  var topLevelTarget = ReactMount.getFirstReactDOM(getEventTarget(bookKeeping.nativeEvent)) || window;

	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = topLevelTarget;
	  while (ancestor) {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = findParent(ancestor);
	  }

	  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
	    topLevelTarget = bookKeeping.ancestors[i];
	    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, topLevelTarget, topLevelTargetID, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}

	// New browsers have a path attribute on native events
	function handleTopLevelWithPath(bookKeeping) {
	  var path = bookKeeping.nativeEvent.path;
	  var currentNativeTarget = path[0];
	  var eventsFired = 0;
	  for (var i = 0; i < path.length; i++) {
	    var currentPathElement = path[i];
	    if (currentPathElement.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE) {
	      currentNativeTarget = path[i + 1];
	    }
	    // TODO: slow
	    var reactParent = ReactMount.getFirstReactDOM(currentPathElement);
	    if (reactParent === currentPathElement) {
	      var currentPathElementID = ReactMount.getID(currentPathElement);
	      var newRootID = ReactInstanceHandles.getReactRootIDFromNodeID(currentPathElementID);
	      bookKeeping.ancestors.push(currentPathElement);

	      var topLevelTargetID = ReactMount.getID(currentPathElement) || '';
	      eventsFired++;
	      ReactEventListener._handleTopLevel(bookKeeping.topLevelType, currentPathElement, topLevelTargetID, bookKeeping.nativeEvent, currentNativeTarget);

	      // Jump to the root of this React render tree
	      while (currentPathElementID !== newRootID) {
	        i++;
	        currentPathElement = path[i];
	        currentPathElementID = ReactMount.getID(currentPathElement);
	      }
	    }
	  }
	  if (eventsFired === 0) {
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, window, '', bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}

	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}

	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,

	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

	  setHandleTopLevel: function (handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },

	  setEnabled: function (enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },

	  isEnabled: function () {
	    return ReactEventListener._enabled;
	  },

	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  monitorScrollValue: function (refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },

	  dispatchEvent: function (topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }

	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};

	module.exports = ReactEventListener;

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule EventListener
	 * @typechecks
	 */

	'use strict';

	var emptyFunction = __webpack_require__(15);

	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function (target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function () {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function () {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },

	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function (target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function () {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    } else {
	      if (process.env.NODE_ENV !== 'production') {
	        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
	      }
	      return {
	        remove: emptyFunction
	      };
	    }
	  },

	  registerDefault: function () {}
	};

	module.exports = EventListener;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 120 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getUnboundedScrollPosition
	 * @typechecks
	 */

	'use strict';

	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */
	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable === window) {
	    return {
	      x: window.pageXOffset || document.documentElement.scrollLeft,
	      y: window.pageYOffset || document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}

	module.exports = getUnboundedScrollPosition;

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInjection
	 */

	'use strict';

	var DOMProperty = __webpack_require__(23);
	var EventPluginHub = __webpack_require__(31);
	var ReactComponentEnvironment = __webpack_require__(64);
	var ReactClass = __webpack_require__(122);
	var ReactEmptyComponent = __webpack_require__(68);
	var ReactBrowserEventEmitter = __webpack_require__(29);
	var ReactNativeComponent = __webpack_require__(69);
	var ReactPerf = __webpack_require__(18);
	var ReactRootIndex = __webpack_require__(46);
	var ReactUpdates = __webpack_require__(54);

	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  Class: ReactClass.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  NativeComponent: ReactNativeComponent.injection,
	  Perf: ReactPerf.injection,
	  RootIndex: ReactRootIndex.injection,
	  Updates: ReactUpdates.injection
	};

	module.exports = ReactInjection;

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactClass
	 */

	'use strict';

	var ReactComponent = __webpack_require__(123);
	var ReactElement = __webpack_require__(42);
	var ReactPropTypeLocations = __webpack_require__(65);
	var ReactPropTypeLocationNames = __webpack_require__(66);
	var ReactNoopUpdateQueue = __webpack_require__(124);

	var assign = __webpack_require__(39);
	var emptyObject = __webpack_require__(58);
	var invariant = __webpack_require__(13);
	var keyMirror = __webpack_require__(17);
	var keyOf = __webpack_require__(79);
	var warning = __webpack_require__(25);

	var MIXINS_KEY = keyOf({ mixins: null });

	/**
	 * Policies that describe methods in `ReactClassInterface`.
	 */
	var SpecPolicy = keyMirror({
	  /**
	   * These methods may be defined only once by the class specification or mixin.
	   */
	  DEFINE_ONCE: null,
	  /**
	   * These methods may be defined by both the class specification and mixins.
	   * Subsequent definitions will be chained. These methods must return void.
	   */
	  DEFINE_MANY: null,
	  /**
	   * These methods are overriding the base class.
	   */
	  OVERRIDE_BASE: null,
	  /**
	   * These methods are similar to DEFINE_MANY, except we assume they return
	   * objects. We try to merge the keys of the return values of all the mixed in
	   * functions. If there is a key conflict we throw.
	   */
	  DEFINE_MANY_MERGED: null
	});

	var injectedMixins = [];

	var warnedSetProps = false;
	function warnSetProps() {
	  if (!warnedSetProps) {
	    warnedSetProps = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'setProps(...) and replaceProps(...) are deprecated. ' + 'Instead, call render again at the top level.') : undefined;
	  }
	}

	/**
	 * Composite components are higher-level components that compose other composite
	 * or native components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will be available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
	var ReactClassInterface = {

	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: SpecPolicy.DEFINE_MANY,

	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: SpecPolicy.DEFINE_MANY,

	  // ==== Definition methods ====

	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @nosideeffects
	   * @required
	   */
	  render: SpecPolicy.DEFINE_ONCE,

	  // ==== Delegate methods ====

	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: SpecPolicy.DEFINE_MANY,

	  // ==== Advanced methods ====

	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: SpecPolicy.OVERRIDE_BASE

	};

	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function (Constructor, displayName) {
	    Constructor.displayName = displayName;
	  },
	  mixins: function (Constructor, mixins) {
	    if (mixins) {
	      for (var i = 0; i < mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function (Constructor, childContextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, childContextTypes, ReactPropTypeLocations.childContext);
	    }
	    Constructor.childContextTypes = assign({}, Constructor.childContextTypes, childContextTypes);
	  },
	  contextTypes: function (Constructor, contextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, contextTypes, ReactPropTypeLocations.context);
	    }
	    Constructor.contextTypes = assign({}, Constructor.contextTypes, contextTypes);
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function (Constructor, getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
	    } else {
	      Constructor.getDefaultProps = getDefaultProps;
	    }
	  },
	  propTypes: function (Constructor, propTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, propTypes, ReactPropTypeLocations.prop);
	    }
	    Constructor.propTypes = assign({}, Constructor.propTypes, propTypes);
	  },
	  statics: function (Constructor, statics) {
	    mixStaticSpecIntoComponent(Constructor, statics);
	  },
	  autobind: function () {} };

	// noop
	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but not in __DEV__
	      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : undefined;
	    }
	  }
	}

	function validateMethodOverride(proto, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    !(specPolicy === SpecPolicy.OVERRIDE_BASE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name) : invariant(false) : undefined;
	  }

	  // Disallow defining methods more than once unless explicitly allowed.
	  if (proto.hasOwnProperty(name)) {
	    !(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name) : invariant(false) : undefined;
	  }
	}

	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classses.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    return;
	  }

	  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component class as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;
	  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;

	  var proto = Constructor.prototype;

	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }

	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }

	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above.
	      continue;
	    }

	    var property = spec[name];
	    validateMethodOverride(proto, name);

	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
	      var isAlreadyDefined = proto.hasOwnProperty(name);
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

	      if (shouldAutoBind) {
	        if (!proto.__reactAutoBindMap) {
	          proto.__reactAutoBindMap = {};
	        }
	        proto.__reactAutoBindMap[name] = property;
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];

	          // These cases should already be caught by validateMethodOverride.
	          !(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name) : invariant(false) : undefined;

	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if (process.env.NODE_ENV !== 'production') {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}

	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }

	    var isReserved = (name in RESERVED_SPEC_KEYS);
	    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name) : invariant(false) : undefined;

	    var isInherited = (name in Constructor);
	    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name) : invariant(false) : undefined;
	    Constructor[name] = property;
	  }
	}

	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : invariant(false) : undefined;

	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key) : invariant(false) : undefined;
	      one[key] = two[key];
	    }
	  }
	  return one;
	}

	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}

	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}

	/**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if (process.env.NODE_ENV !== 'production') {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    /* eslint-disable block-scoped-var, no-undef */
	    boundMethod.bind = function (newThis) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : undefined;
	      } else if (!args.length) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : undefined;
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	      /* eslint-enable */
	    };
	  }
	  return boundMethod;
	}

	/**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
	function bindAutoBindMethods(component) {
	  for (var autoBindKey in component.__reactAutoBindMap) {
	    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
	      var method = component.__reactAutoBindMap[autoBindKey];
	      component[autoBindKey] = bindAutoBindMethod(component, method);
	    }
	  }
	}

	/**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
	var ReactClassMixin = {

	  /**
	   * TODO: This will be deprecated because state should always keep a consistent
	   * type signature and the only use case for this, is to avoid that.
	   */
	  replaceState: function (newState, callback) {
	    this.updater.enqueueReplaceState(this, newState);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  },

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function () {
	    return this.updater.isMounted(this);
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {object} partialProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  setProps: function (partialProps, callback) {
	    if (process.env.NODE_ENV !== 'production') {
	      warnSetProps();
	    }
	    this.updater.enqueueSetProps(this, partialProps);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  },

	  /**
	   * Replace all the props.
	   *
	   * @param {object} newProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  replaceProps: function (newProps, callback) {
	    if (process.env.NODE_ENV !== 'production') {
	      warnSetProps();
	    }
	    this.updater.enqueueReplaceProps(this, newProps);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  }
	};

	var ReactClassComponent = function () {};
	assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

	/**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
	var ReactClass = {

	  /**
	   * Creates a composite component class given a class specification.
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function (spec) {
	    var Constructor = function (props, context, updater) {
	      // This constructor is overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.

	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : undefined;
	      }

	      // Wire up auto-binding
	      if (this.__reactAutoBindMap) {
	        bindAutoBindMethods(this);
	      }

	      this.props = props;
	      this.context = context;
	      this.refs = emptyObject;
	      this.updater = updater || ReactNoopUpdateQueue;

	      this.state = null;

	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.

	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if (process.env.NODE_ENV !== 'production') {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (typeof initialState === 'undefined' && this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : invariant(false) : undefined;

	      this.state = initialState;
	    };
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;

	    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

	    mixSpecIntoComponent(Constructor, spec);

	    // Initialize the defaultProps property after all mixins have been merged.
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }

	    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : invariant(false) : undefined;

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : undefined;
	    }

	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }

	    return Constructor;
	  },

	  injection: {
	    injectMixin: function (mixin) {
	      injectedMixins.push(mixin);
	    }
	  }

	};

	module.exports = ReactClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponent
	 */

	'use strict';

	var ReactNoopUpdateQueue = __webpack_require__(124);

	var canDefineProperty = __webpack_require__(43);
	var emptyObject = __webpack_require__(58);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	ReactComponent.prototype.isReactComponent = {};

	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function (partialState, callback) {
	  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.') : invariant(false) : undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : undefined;
	  }
	  this.updater.enqueueSetState(this, partialState);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback);
	  }
	};

	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback);
	  }
	};

	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if (process.env.NODE_ENV !== 'production') {
	  var deprecatedAPIs = {
	    getDOMNode: ['getDOMNode', 'Use ReactDOM.findDOMNode(component) instead.'],
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceProps: ['replaceProps', 'Instead, call render again at the top level.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).'],
	    setProps: ['setProps', 'Instead, call render again at the top level.']
	  };
	  var defineDeprecationWarning = function (methodName, info) {
	    if (canDefineProperty) {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function () {
	          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : undefined;
	          return undefined;
	        }
	      });
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	module.exports = ReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNoopUpdateQueue
	 */

	'use strict';

	var warning = __webpack_require__(25);

	function warnTDZ(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor && publicInstance.constructor.displayName || '') : undefined;
	  }
	}

	/**
	 * This is the abstract API for an update queue.
	 */
	var ReactNoopUpdateQueue = {

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {},

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    warnTDZ(publicInstance, 'forceUpdate');
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    warnTDZ(publicInstance, 'replaceState');
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    warnTDZ(publicInstance, 'setState');
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialProps Subset of the next props.
	   * @internal
	   */
	  enqueueSetProps: function (publicInstance, partialProps) {
	    warnTDZ(publicInstance, 'setProps');
	  },

	  /**
	   * Replaces all of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} props New props.
	   * @internal
	   */
	  enqueueReplaceProps: function (publicInstance, props) {
	    warnTDZ(publicInstance, 'replaceProps');
	  }

	};

	module.exports = ReactNoopUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconcileTransaction
	 * @typechecks static-only
	 */

	'use strict';

	var CallbackQueue = __webpack_require__(55);
	var PooledClass = __webpack_require__(56);
	var ReactBrowserEventEmitter = __webpack_require__(29);
	var ReactDOMFeatureFlags = __webpack_require__(41);
	var ReactInputSelection = __webpack_require__(126);
	var Transaction = __webpack_require__(57);

	var assign = __webpack_require__(39);

	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};

	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function () {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },

	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
	   *   restores the previous value.
	   */
	  close: function (previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};

	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },

	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function () {
	    this.reactMountReady.notifyAll();
	  }
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction(forceHTML) {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = !forceHTML && ReactDOMFeatureFlags.useCreateElement;
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap procedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};

	assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

	PooledClass.addPoolingTo(ReactReconcileTransaction);

	module.exports = ReactReconcileTransaction;

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInputSelection
	 */

	'use strict';

	var ReactDOMSelection = __webpack_require__(127);

	var containsNode = __webpack_require__(59);
	var focusNode = __webpack_require__(95);
	var getActiveElement = __webpack_require__(129);

	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}

	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {

	  hasSelectionCapabilities: function (elem) {
	    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
	  },

	  getSelectionInformation: function () {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
	    };
	  },

	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function (priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
	      }
	      focusNode(priorFocusedElem);
	    }
	  },

	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function (input) {
	    var selection;

	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }

	    return selection || { start: 0, end: 0 };
	  },

	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function (input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (typeof end === 'undefined') {
	      end = start;
	    }

	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};

	module.exports = ReactInputSelection;

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelection
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(9);

	var getNodeForCharacterOffset = __webpack_require__(128);
	var getTextContentAccessor = __webpack_require__(75);

	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}

	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;

	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);

	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;

	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}

	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();

	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }

	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;

	  var currentRange = selection.getRangeAt(0);

	  // In Firefox, range.startContainer and range.endContainer can be "anonymous
	  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
	  // divs do not seem to expose properties, triggering a "Permission denied
	  // error" if any of its properties are accessed. The only seemingly possible
	  // way to avoid erroring is to access a property that typically works for
	  // non-anonymous divs and catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
	  try {
	    /* eslint-disable no-unused-expressions */
	    currentRange.startContainer.nodeType;
	    currentRange.endContainer.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }

	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

	  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;

	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;

	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}

	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;

	  if (typeof offsets.end === 'undefined') {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }

	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}

	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }

	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = typeof offsets.end === 'undefined' ? start : Math.min(offsets.end, length);

	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }

	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);

	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();

	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}

	var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};

	module.exports = ReactDOMSelection;

/***/ },
/* 128 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getNodeForCharacterOffset
	 */

	'use strict';

	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */
	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}

	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}

	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;

	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;

	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }

	      nodeStart = nodeEnd;
	    }

	    node = getLeafNode(getSiblingNode(node));
	  }
	}

	module.exports = getNodeForCharacterOffset;

/***/ },
/* 129 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getActiveElement
	 * @typechecks
	 */

	/* eslint-disable fb-www/typeof-undefined */

	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document or document body is not
	 * yet defined.
	 */
	'use strict';

	function getActiveElement() /*?DOMElement*/{
	  if (typeof document === 'undefined') {
	    return null;
	  }
	  try {
	    return document.activeElement || document.body;
	  } catch (e) {
	    return document.body;
	  }
	}

	module.exports = getActiveElement;

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SelectEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(30);
	var EventPropagators = __webpack_require__(73);
	var ExecutionEnvironment = __webpack_require__(9);
	var ReactInputSelection = __webpack_require__(126);
	var SyntheticEvent = __webpack_require__(77);

	var getActiveElement = __webpack_require__(129);
	var isTextInputElement = __webpack_require__(82);
	var keyOf = __webpack_require__(79);
	var shallowEqual = __webpack_require__(117);

	var topLevelTypes = EventConstants.topLevelTypes;

	var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSelect: null }),
	      captured: keyOf({ onSelectCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange]
	  }
	};

	var activeElement = null;
	var activeElementID = null;
	var lastSelection = null;
	var mouseDown = false;

	// Track whether a listener exists for this plugin. If none exist, we do
	// not extract events.
	var hasListener = false;
	var ON_SELECT_KEY = keyOf({ onSelect: null });

	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}

	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
	    return null;
	  }

	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;

	    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementID, nativeEvent, nativeEventTarget);

	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;

	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

	    return syntheticEvent;
	  }

	  return null;
	}

	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    if (!hasListener) {
	      return null;
	    }

	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case topLevelTypes.topFocus:
	        if (isTextInputElement(topLevelTarget) || topLevelTarget.contentEditable === 'true') {
	          activeElement = topLevelTarget;
	          activeElementID = topLevelTargetID;
	          lastSelection = null;
	        }
	        break;
	      case topLevelTypes.topBlur:
	        activeElement = null;
	        activeElementID = null;
	        lastSelection = null;
	        break;

	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case topLevelTypes.topMouseDown:
	        mouseDown = true;
	        break;
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topMouseUp:
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent, nativeEventTarget);

	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't). IE's event fires out of order with respect
	      // to key and input events on deletion, so we discard it.
	      //
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      // This is also our approach for IE handling, for the reason above.
	      case topLevelTypes.topSelectionChange:
	        if (skipSelectionChangeEvent) {
	          break;
	        }
	      // falls through
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	    }

	    return null;
	  },

	  didPutListener: function (id, registrationName, listener) {
	    if (registrationName === ON_SELECT_KEY) {
	      hasListener = true;
	    }
	  }
	};

	module.exports = SelectEventPlugin;

/***/ },
/* 131 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ServerReactRootIndex
	 * @typechecks
	 */

	'use strict';

	/**
	 * Size of the reactRoot ID space. We generate random numbers for React root
	 * IDs and if there's a collision the events and DOM update system will
	 * get confused. In the future we need a way to generate GUIDs but for
	 * now this will work on a smaller scale.
	 */
	var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

	var ServerReactRootIndex = {
	  createReactRootIndex: function () {
	    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
	  }
	};

	module.exports = ServerReactRootIndex;

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SimpleEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(30);
	var EventListener = __webpack_require__(119);
	var EventPropagators = __webpack_require__(73);
	var ReactMount = __webpack_require__(28);
	var SyntheticClipboardEvent = __webpack_require__(133);
	var SyntheticEvent = __webpack_require__(77);
	var SyntheticFocusEvent = __webpack_require__(134);
	var SyntheticKeyboardEvent = __webpack_require__(135);
	var SyntheticMouseEvent = __webpack_require__(86);
	var SyntheticDragEvent = __webpack_require__(138);
	var SyntheticTouchEvent = __webpack_require__(139);
	var SyntheticUIEvent = __webpack_require__(87);
	var SyntheticWheelEvent = __webpack_require__(140);

	var emptyFunction = __webpack_require__(15);
	var getEventCharCode = __webpack_require__(136);
	var invariant = __webpack_require__(13);
	var keyOf = __webpack_require__(79);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  abort: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onAbort: true }),
	      captured: keyOf({ onAbortCapture: true })
	    }
	  },
	  blur: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onBlur: true }),
	      captured: keyOf({ onBlurCapture: true })
	    }
	  },
	  canPlay: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCanPlay: true }),
	      captured: keyOf({ onCanPlayCapture: true })
	    }
	  },
	  canPlayThrough: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCanPlayThrough: true }),
	      captured: keyOf({ onCanPlayThroughCapture: true })
	    }
	  },
	  click: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onClick: true }),
	      captured: keyOf({ onClickCapture: true })
	    }
	  },
	  contextMenu: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onContextMenu: true }),
	      captured: keyOf({ onContextMenuCapture: true })
	    }
	  },
	  copy: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCopy: true }),
	      captured: keyOf({ onCopyCapture: true })
	    }
	  },
	  cut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCut: true }),
	      captured: keyOf({ onCutCapture: true })
	    }
	  },
	  doubleClick: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDoubleClick: true }),
	      captured: keyOf({ onDoubleClickCapture: true })
	    }
	  },
	  drag: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDrag: true }),
	      captured: keyOf({ onDragCapture: true })
	    }
	  },
	  dragEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragEnd: true }),
	      captured: keyOf({ onDragEndCapture: true })
	    }
	  },
	  dragEnter: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragEnter: true }),
	      captured: keyOf({ onDragEnterCapture: true })
	    }
	  },
	  dragExit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragExit: true }),
	      captured: keyOf({ onDragExitCapture: true })
	    }
	  },
	  dragLeave: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragLeave: true }),
	      captured: keyOf({ onDragLeaveCapture: true })
	    }
	  },
	  dragOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragOver: true }),
	      captured: keyOf({ onDragOverCapture: true })
	    }
	  },
	  dragStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragStart: true }),
	      captured: keyOf({ onDragStartCapture: true })
	    }
	  },
	  drop: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDrop: true }),
	      captured: keyOf({ onDropCapture: true })
	    }
	  },
	  durationChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDurationChange: true }),
	      captured: keyOf({ onDurationChangeCapture: true })
	    }
	  },
	  emptied: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEmptied: true }),
	      captured: keyOf({ onEmptiedCapture: true })
	    }
	  },
	  encrypted: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEncrypted: true }),
	      captured: keyOf({ onEncryptedCapture: true })
	    }
	  },
	  ended: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEnded: true }),
	      captured: keyOf({ onEndedCapture: true })
	    }
	  },
	  error: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onError: true }),
	      captured: keyOf({ onErrorCapture: true })
	    }
	  },
	  focus: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onFocus: true }),
	      captured: keyOf({ onFocusCapture: true })
	    }
	  },
	  input: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onInput: true }),
	      captured: keyOf({ onInputCapture: true })
	    }
	  },
	  keyDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyDown: true }),
	      captured: keyOf({ onKeyDownCapture: true })
	    }
	  },
	  keyPress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyPress: true }),
	      captured: keyOf({ onKeyPressCapture: true })
	    }
	  },
	  keyUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyUp: true }),
	      captured: keyOf({ onKeyUpCapture: true })
	    }
	  },
	  load: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoad: true }),
	      captured: keyOf({ onLoadCapture: true })
	    }
	  },
	  loadedData: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadedData: true }),
	      captured: keyOf({ onLoadedDataCapture: true })
	    }
	  },
	  loadedMetadata: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadedMetadata: true }),
	      captured: keyOf({ onLoadedMetadataCapture: true })
	    }
	  },
	  loadStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadStart: true }),
	      captured: keyOf({ onLoadStartCapture: true })
	    }
	  },
	  // Note: We do not allow listening to mouseOver events. Instead, use the
	  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
	  mouseDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseDown: true }),
	      captured: keyOf({ onMouseDownCapture: true })
	    }
	  },
	  mouseMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseMove: true }),
	      captured: keyOf({ onMouseMoveCapture: true })
	    }
	  },
	  mouseOut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseOut: true }),
	      captured: keyOf({ onMouseOutCapture: true })
	    }
	  },
	  mouseOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseOver: true }),
	      captured: keyOf({ onMouseOverCapture: true })
	    }
	  },
	  mouseUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseUp: true }),
	      captured: keyOf({ onMouseUpCapture: true })
	    }
	  },
	  paste: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPaste: true }),
	      captured: keyOf({ onPasteCapture: true })
	    }
	  },
	  pause: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPause: true }),
	      captured: keyOf({ onPauseCapture: true })
	    }
	  },
	  play: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPlay: true }),
	      captured: keyOf({ onPlayCapture: true })
	    }
	  },
	  playing: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPlaying: true }),
	      captured: keyOf({ onPlayingCapture: true })
	    }
	  },
	  progress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onProgress: true }),
	      captured: keyOf({ onProgressCapture: true })
	    }
	  },
	  rateChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onRateChange: true }),
	      captured: keyOf({ onRateChangeCapture: true })
	    }
	  },
	  reset: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onReset: true }),
	      captured: keyOf({ onResetCapture: true })
	    }
	  },
	  scroll: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onScroll: true }),
	      captured: keyOf({ onScrollCapture: true })
	    }
	  },
	  seeked: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSeeked: true }),
	      captured: keyOf({ onSeekedCapture: true })
	    }
	  },
	  seeking: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSeeking: true }),
	      captured: keyOf({ onSeekingCapture: true })
	    }
	  },
	  stalled: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onStalled: true }),
	      captured: keyOf({ onStalledCapture: true })
	    }
	  },
	  submit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSubmit: true }),
	      captured: keyOf({ onSubmitCapture: true })
	    }
	  },
	  suspend: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSuspend: true }),
	      captured: keyOf({ onSuspendCapture: true })
	    }
	  },
	  timeUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTimeUpdate: true }),
	      captured: keyOf({ onTimeUpdateCapture: true })
	    }
	  },
	  touchCancel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchCancel: true }),
	      captured: keyOf({ onTouchCancelCapture: true })
	    }
	  },
	  touchEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchEnd: true }),
	      captured: keyOf({ onTouchEndCapture: true })
	    }
	  },
	  touchMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchMove: true }),
	      captured: keyOf({ onTouchMoveCapture: true })
	    }
	  },
	  touchStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchStart: true }),
	      captured: keyOf({ onTouchStartCapture: true })
	    }
	  },
	  volumeChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onVolumeChange: true }),
	      captured: keyOf({ onVolumeChangeCapture: true })
	    }
	  },
	  waiting: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onWaiting: true }),
	      captured: keyOf({ onWaitingCapture: true })
	    }
	  },
	  wheel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onWheel: true }),
	      captured: keyOf({ onWheelCapture: true })
	    }
	  }
	};

	var topLevelEventsToDispatchConfig = {
	  topAbort: eventTypes.abort,
	  topBlur: eventTypes.blur,
	  topCanPlay: eventTypes.canPlay,
	  topCanPlayThrough: eventTypes.canPlayThrough,
	  topClick: eventTypes.click,
	  topContextMenu: eventTypes.contextMenu,
	  topCopy: eventTypes.copy,
	  topCut: eventTypes.cut,
	  topDoubleClick: eventTypes.doubleClick,
	  topDrag: eventTypes.drag,
	  topDragEnd: eventTypes.dragEnd,
	  topDragEnter: eventTypes.dragEnter,
	  topDragExit: eventTypes.dragExit,
	  topDragLeave: eventTypes.dragLeave,
	  topDragOver: eventTypes.dragOver,
	  topDragStart: eventTypes.dragStart,
	  topDrop: eventTypes.drop,
	  topDurationChange: eventTypes.durationChange,
	  topEmptied: eventTypes.emptied,
	  topEncrypted: eventTypes.encrypted,
	  topEnded: eventTypes.ended,
	  topError: eventTypes.error,
	  topFocus: eventTypes.focus,
	  topInput: eventTypes.input,
	  topKeyDown: eventTypes.keyDown,
	  topKeyPress: eventTypes.keyPress,
	  topKeyUp: eventTypes.keyUp,
	  topLoad: eventTypes.load,
	  topLoadedData: eventTypes.loadedData,
	  topLoadedMetadata: eventTypes.loadedMetadata,
	  topLoadStart: eventTypes.loadStart,
	  topMouseDown: eventTypes.mouseDown,
	  topMouseMove: eventTypes.mouseMove,
	  topMouseOut: eventTypes.mouseOut,
	  topMouseOver: eventTypes.mouseOver,
	  topMouseUp: eventTypes.mouseUp,
	  topPaste: eventTypes.paste,
	  topPause: eventTypes.pause,
	  topPlay: eventTypes.play,
	  topPlaying: eventTypes.playing,
	  topProgress: eventTypes.progress,
	  topRateChange: eventTypes.rateChange,
	  topReset: eventTypes.reset,
	  topScroll: eventTypes.scroll,
	  topSeeked: eventTypes.seeked,
	  topSeeking: eventTypes.seeking,
	  topStalled: eventTypes.stalled,
	  topSubmit: eventTypes.submit,
	  topSuspend: eventTypes.suspend,
	  topTimeUpdate: eventTypes.timeUpdate,
	  topTouchCancel: eventTypes.touchCancel,
	  topTouchEnd: eventTypes.touchEnd,
	  topTouchMove: eventTypes.touchMove,
	  topTouchStart: eventTypes.touchStart,
	  topVolumeChange: eventTypes.volumeChange,
	  topWaiting: eventTypes.waiting,
	  topWheel: eventTypes.wheel
	};

	for (var type in topLevelEventsToDispatchConfig) {
	  topLevelEventsToDispatchConfig[type].dependencies = [type];
	}

	var ON_CLICK_KEY = keyOf({ onClick: null });
	var onClickListeners = {};

	var SimpleEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case topLevelTypes.topAbort:
	      case topLevelTypes.topCanPlay:
	      case topLevelTypes.topCanPlayThrough:
	      case topLevelTypes.topDurationChange:
	      case topLevelTypes.topEmptied:
	      case topLevelTypes.topEncrypted:
	      case topLevelTypes.topEnded:
	      case topLevelTypes.topError:
	      case topLevelTypes.topInput:
	      case topLevelTypes.topLoad:
	      case topLevelTypes.topLoadedData:
	      case topLevelTypes.topLoadedMetadata:
	      case topLevelTypes.topLoadStart:
	      case topLevelTypes.topPause:
	      case topLevelTypes.topPlay:
	      case topLevelTypes.topPlaying:
	      case topLevelTypes.topProgress:
	      case topLevelTypes.topRateChange:
	      case topLevelTypes.topReset:
	      case topLevelTypes.topSeeked:
	      case topLevelTypes.topSeeking:
	      case topLevelTypes.topStalled:
	      case topLevelTypes.topSubmit:
	      case topLevelTypes.topSuspend:
	      case topLevelTypes.topTimeUpdate:
	      case topLevelTypes.topVolumeChange:
	      case topLevelTypes.topWaiting:
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case topLevelTypes.topKeyPress:
	        // FireFox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	      /* falls through */
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case topLevelTypes.topBlur:
	      case topLevelTypes.topFocus:
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case topLevelTypes.topClick:
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	      /* falls through */
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topDoubleClick:
	      case topLevelTypes.topMouseDown:
	      case topLevelTypes.topMouseMove:
	      case topLevelTypes.topMouseOut:
	      case topLevelTypes.topMouseOver:
	      case topLevelTypes.topMouseUp:
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case topLevelTypes.topDrag:
	      case topLevelTypes.topDragEnd:
	      case topLevelTypes.topDragEnter:
	      case topLevelTypes.topDragExit:
	      case topLevelTypes.topDragLeave:
	      case topLevelTypes.topDragOver:
	      case topLevelTypes.topDragStart:
	      case topLevelTypes.topDrop:
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case topLevelTypes.topTouchCancel:
	      case topLevelTypes.topTouchEnd:
	      case topLevelTypes.topTouchMove:
	      case topLevelTypes.topTouchStart:
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case topLevelTypes.topScroll:
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case topLevelTypes.topWheel:
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case topLevelTypes.topCopy:
	      case topLevelTypes.topCut:
	      case topLevelTypes.topPaste:
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : invariant(false) : undefined;
	    var event = EventConstructor.getPooled(dispatchConfig, topLevelTargetID, nativeEvent, nativeEventTarget);
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  },

	  didPutListener: function (id, registrationName, listener) {
	    // Mobile Safari does not fire properly bubble click events on
	    // non-interactive elements, which means delegated click listeners do not
	    // fire. The workaround for this bug involves attaching an empty click
	    // listener on the target node.
	    if (registrationName === ON_CLICK_KEY) {
	      var node = ReactMount.getNode(id);
	      if (!onClickListeners[id]) {
	        onClickListeners[id] = EventListener.listen(node, 'click', emptyFunction);
	      }
	    }
	  },

	  willDeleteListener: function (id, registrationName) {
	    if (registrationName === ON_CLICK_KEY) {
	      onClickListeners[id].remove();
	      delete onClickListeners[id];
	    }
	  }

	};

	module.exports = SimpleEventPlugin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticClipboardEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(77);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function (event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

	module.exports = SyntheticClipboardEvent;

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticFocusEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(87);

	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

	module.exports = SyntheticFocusEvent;

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticKeyboardEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(87);

	var getEventCharCode = __webpack_require__(136);
	var getEventKey = __webpack_require__(137);
	var getEventModifierState = __webpack_require__(88);

	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function (event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.

	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function (event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.

	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function (event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

	module.exports = SyntheticKeyboardEvent;

/***/ },
/* 136 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventCharCode
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */
	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;

	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;

	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }

	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }

	  return 0;
	}

	module.exports = getEventCharCode;

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventKey
	 * @typechecks static-only
	 */

	'use strict';

	var getEventCharCode = __webpack_require__(136);

	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified'
	};

	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};

	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.

	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }

	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);

	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}

	module.exports = getEventKey;

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticDragEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(86);

	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

	module.exports = SyntheticDragEvent;

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticTouchEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(87);

	var getEventModifierState = __webpack_require__(88);

	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

	module.exports = SyntheticTouchEvent;

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticWheelEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(86);

	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function (event) {
	    return 'deltaX' in event ? event.deltaX :
	    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function (event) {
	    return 'deltaY' in event ? event.deltaY :
	    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY :
	    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },
	  deltaZ: null,

	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

	module.exports = SyntheticWheelEvent;

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SVGDOMPropertyConfig
	 */

	'use strict';

	var DOMProperty = __webpack_require__(23);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

	var NS = {
	  xlink: 'http://www.w3.org/1999/xlink',
	  xml: 'http://www.w3.org/XML/1998/namespace'
	};

	var SVGDOMPropertyConfig = {
	  Properties: {
	    clipPath: MUST_USE_ATTRIBUTE,
	    cx: MUST_USE_ATTRIBUTE,
	    cy: MUST_USE_ATTRIBUTE,
	    d: MUST_USE_ATTRIBUTE,
	    dx: MUST_USE_ATTRIBUTE,
	    dy: MUST_USE_ATTRIBUTE,
	    fill: MUST_USE_ATTRIBUTE,
	    fillOpacity: MUST_USE_ATTRIBUTE,
	    fontFamily: MUST_USE_ATTRIBUTE,
	    fontSize: MUST_USE_ATTRIBUTE,
	    fx: MUST_USE_ATTRIBUTE,
	    fy: MUST_USE_ATTRIBUTE,
	    gradientTransform: MUST_USE_ATTRIBUTE,
	    gradientUnits: MUST_USE_ATTRIBUTE,
	    markerEnd: MUST_USE_ATTRIBUTE,
	    markerMid: MUST_USE_ATTRIBUTE,
	    markerStart: MUST_USE_ATTRIBUTE,
	    offset: MUST_USE_ATTRIBUTE,
	    opacity: MUST_USE_ATTRIBUTE,
	    patternContentUnits: MUST_USE_ATTRIBUTE,
	    patternUnits: MUST_USE_ATTRIBUTE,
	    points: MUST_USE_ATTRIBUTE,
	    preserveAspectRatio: MUST_USE_ATTRIBUTE,
	    r: MUST_USE_ATTRIBUTE,
	    rx: MUST_USE_ATTRIBUTE,
	    ry: MUST_USE_ATTRIBUTE,
	    spreadMethod: MUST_USE_ATTRIBUTE,
	    stopColor: MUST_USE_ATTRIBUTE,
	    stopOpacity: MUST_USE_ATTRIBUTE,
	    stroke: MUST_USE_ATTRIBUTE,
	    strokeDasharray: MUST_USE_ATTRIBUTE,
	    strokeLinecap: MUST_USE_ATTRIBUTE,
	    strokeOpacity: MUST_USE_ATTRIBUTE,
	    strokeWidth: MUST_USE_ATTRIBUTE,
	    textAnchor: MUST_USE_ATTRIBUTE,
	    transform: MUST_USE_ATTRIBUTE,
	    version: MUST_USE_ATTRIBUTE,
	    viewBox: MUST_USE_ATTRIBUTE,
	    x1: MUST_USE_ATTRIBUTE,
	    x2: MUST_USE_ATTRIBUTE,
	    x: MUST_USE_ATTRIBUTE,
	    xlinkActuate: MUST_USE_ATTRIBUTE,
	    xlinkArcrole: MUST_USE_ATTRIBUTE,
	    xlinkHref: MUST_USE_ATTRIBUTE,
	    xlinkRole: MUST_USE_ATTRIBUTE,
	    xlinkShow: MUST_USE_ATTRIBUTE,
	    xlinkTitle: MUST_USE_ATTRIBUTE,
	    xlinkType: MUST_USE_ATTRIBUTE,
	    xmlBase: MUST_USE_ATTRIBUTE,
	    xmlLang: MUST_USE_ATTRIBUTE,
	    xmlSpace: MUST_USE_ATTRIBUTE,
	    y1: MUST_USE_ATTRIBUTE,
	    y2: MUST_USE_ATTRIBUTE,
	    y: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNamespaces: {
	    xlinkActuate: NS.xlink,
	    xlinkArcrole: NS.xlink,
	    xlinkHref: NS.xlink,
	    xlinkRole: NS.xlink,
	    xlinkShow: NS.xlink,
	    xlinkTitle: NS.xlink,
	    xlinkType: NS.xlink,
	    xmlBase: NS.xml,
	    xmlLang: NS.xml,
	    xmlSpace: NS.xml
	  },
	  DOMAttributeNames: {
	    clipPath: 'clip-path',
	    fillOpacity: 'fill-opacity',
	    fontFamily: 'font-family',
	    fontSize: 'font-size',
	    gradientTransform: 'gradientTransform',
	    gradientUnits: 'gradientUnits',
	    markerEnd: 'marker-end',
	    markerMid: 'marker-mid',
	    markerStart: 'marker-start',
	    patternContentUnits: 'patternContentUnits',
	    patternUnits: 'patternUnits',
	    preserveAspectRatio: 'preserveAspectRatio',
	    spreadMethod: 'spreadMethod',
	    stopColor: 'stop-color',
	    stopOpacity: 'stop-opacity',
	    strokeDasharray: 'stroke-dasharray',
	    strokeLinecap: 'stroke-linecap',
	    strokeOpacity: 'stroke-opacity',
	    strokeWidth: 'stroke-width',
	    textAnchor: 'text-anchor',
	    viewBox: 'viewBox',
	    xlinkActuate: 'xlink:actuate',
	    xlinkArcrole: 'xlink:arcrole',
	    xlinkHref: 'xlink:href',
	    xlinkRole: 'xlink:role',
	    xlinkShow: 'xlink:show',
	    xlinkTitle: 'xlink:title',
	    xlinkType: 'xlink:type',
	    xmlBase: 'xml:base',
	    xmlLang: 'xml:lang',
	    xmlSpace: 'xml:space'
	  }
	};

	module.exports = SVGDOMPropertyConfig;

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerf
	 * @typechecks static-only
	 */

	'use strict';

	var DOMProperty = __webpack_require__(23);
	var ReactDefaultPerfAnalysis = __webpack_require__(143);
	var ReactMount = __webpack_require__(28);
	var ReactPerf = __webpack_require__(18);

	var performanceNow = __webpack_require__(144);

	function roundFloat(val) {
	  return Math.floor(val * 100) / 100;
	}

	function addValue(obj, key, val) {
	  obj[key] = (obj[key] || 0) + val;
	}

	var ReactDefaultPerf = {
	  _allMeasurements: [], // last item in the list is the current one
	  _mountStack: [0],
	  _injected: false,

	  start: function () {
	    if (!ReactDefaultPerf._injected) {
	      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
	    }

	    ReactDefaultPerf._allMeasurements.length = 0;
	    ReactPerf.enableMeasure = true;
	  },

	  stop: function () {
	    ReactPerf.enableMeasure = false;
	  },

	  getLastMeasurements: function () {
	    return ReactDefaultPerf._allMeasurements;
	  },

	  printExclusive: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
	    console.table(summary.map(function (item) {
	      return {
	        'Component class name': item.componentName,
	        'Total inclusive time (ms)': roundFloat(item.inclusive),
	        'Exclusive mount time (ms)': roundFloat(item.exclusive),
	        'Exclusive render time (ms)': roundFloat(item.render),
	        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
	        'Render time per instance (ms)': roundFloat(item.render / item.count),
	        'Instances': item.count
	      };
	    }));
	    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
	    // number.
	  },

	  printInclusive: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
	    console.table(summary.map(function (item) {
	      return {
	        'Owner > component': item.componentName,
	        'Inclusive time (ms)': roundFloat(item.time),
	        'Instances': item.count
	      };
	    }));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },

	  getMeasurementsSummaryMap: function (measurements) {
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements, true);
	    return summary.map(function (item) {
	      return {
	        'Owner > component': item.componentName,
	        'Wasted time (ms)': item.time,
	        'Instances': item.count
	      };
	    });
	  },

	  printWasted: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },

	  printDOM: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
	    console.table(summary.map(function (item) {
	      var result = {};
	      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
	      result.type = item.type;
	      result.args = JSON.stringify(item.args);
	      return result;
	    }));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },

	  _recordWrite: function (id, fnName, totalTime, args) {
	    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
	    var writes = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].writes;
	    writes[id] = writes[id] || [];
	    writes[id].push({
	      type: fnName,
	      time: totalTime,
	      args: args
	    });
	  },

	  measure: function (moduleName, fnName, func) {
	    return function () {
	      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }

	      var totalTime;
	      var rv;
	      var start;

	      if (fnName === '_renderNewRootComponent' || fnName === 'flushBatchedUpdates') {
	        // A "measurement" is a set of metrics recorded for each flush. We want
	        // to group the metrics for a given flush together so we can look at the
	        // components that rendered and the DOM operations that actually
	        // happened to determine the amount of "wasted work" performed.
	        ReactDefaultPerf._allMeasurements.push({
	          exclusive: {},
	          inclusive: {},
	          render: {},
	          counts: {},
	          writes: {},
	          displayNames: {},
	          totalTime: 0,
	          created: {}
	        });
	        start = performanceNow();
	        rv = func.apply(this, args);
	        ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].totalTime = performanceNow() - start;
	        return rv;
	      } else if (fnName === '_mountImageIntoNode' || moduleName === 'ReactBrowserEventEmitter' || moduleName === 'ReactDOMIDOperations' || moduleName === 'CSSPropertyOperations' || moduleName === 'DOMChildrenOperations' || moduleName === 'DOMPropertyOperations') {
	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        if (fnName === '_mountImageIntoNode') {
	          var mountID = ReactMount.getID(args[1]);
	          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
	        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
	          // special format
	          args[0].forEach(function (update) {
	            var writeArgs = {};
	            if (update.fromIndex !== null) {
	              writeArgs.fromIndex = update.fromIndex;
	            }
	            if (update.toIndex !== null) {
	              writeArgs.toIndex = update.toIndex;
	            }
	            if (update.textContent !== null) {
	              writeArgs.textContent = update.textContent;
	            }
	            if (update.markupIndex !== null) {
	              writeArgs.markup = args[1][update.markupIndex];
	            }
	            ReactDefaultPerf._recordWrite(update.parentID, update.type, totalTime, writeArgs);
	          });
	        } else {
	          // basic format
	          var id = args[0];
	          if (typeof id === 'object') {
	            id = ReactMount.getID(args[0]);
	          }
	          ReactDefaultPerf._recordWrite(id, fnName, totalTime, Array.prototype.slice.call(args, 1));
	        }
	        return rv;
	      } else if (moduleName === 'ReactCompositeComponent' && (fnName === 'mountComponent' || fnName === 'updateComponent' || // TODO: receiveComponent()?
	      fnName === '_renderValidatedComponent')) {

	        if (this._currentElement.type === ReactMount.TopLevelWrapper) {
	          return func.apply(this, args);
	        }

	        var rootNodeID = fnName === 'mountComponent' ? args[0] : this._rootNodeID;
	        var isRender = fnName === '_renderValidatedComponent';
	        var isMount = fnName === 'mountComponent';

	        var mountStack = ReactDefaultPerf._mountStack;
	        var entry = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1];

	        if (isRender) {
	          addValue(entry.counts, rootNodeID, 1);
	        } else if (isMount) {
	          entry.created[rootNodeID] = true;
	          mountStack.push(0);
	        }

	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        if (isRender) {
	          addValue(entry.render, rootNodeID, totalTime);
	        } else if (isMount) {
	          var subMountTime = mountStack.pop();
	          mountStack[mountStack.length - 1] += totalTime;
	          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        } else {
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        }

	        entry.displayNames[rootNodeID] = {
	          current: this.getName(),
	          owner: this._currentElement._owner ? this._currentElement._owner.getName() : '<root>'
	        };

	        return rv;
	      } else {
	        return func.apply(this, args);
	      }
	    };
	  }
	};

	module.exports = ReactDefaultPerf;

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerfAnalysis
	 */

	'use strict';

	var assign = __webpack_require__(39);

	// Don't try to save users less than 1.2ms (a number I made up)
	var DONT_CARE_THRESHOLD = 1.2;
	var DOM_OPERATION_TYPES = {
	  '_mountImageIntoNode': 'set innerHTML',
	  INSERT_MARKUP: 'set innerHTML',
	  MOVE_EXISTING: 'move',
	  REMOVE_NODE: 'remove',
	  SET_MARKUP: 'set innerHTML',
	  TEXT_CONTENT: 'set textContent',
	  'setValueForProperty': 'update attribute',
	  'setValueForAttribute': 'update attribute',
	  'deleteValueForProperty': 'remove attribute',
	  'setValueForStyles': 'update styles',
	  'replaceNodeWithMarkup': 'replace',
	  'updateTextContent': 'set textContent'
	};

	function getTotalTime(measurements) {
	  // TODO: return number of DOM ops? could be misleading.
	  // TODO: measure dropped frames after reconcile?
	  // TODO: log total time of each reconcile and the top-level component
	  // class that triggered it.
	  var totalTime = 0;
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    totalTime += measurement.totalTime;
	  }
	  return totalTime;
	}

	function getDOMSummary(measurements) {
	  var items = [];
	  measurements.forEach(function (measurement) {
	    Object.keys(measurement.writes).forEach(function (id) {
	      measurement.writes[id].forEach(function (write) {
	        items.push({
	          id: id,
	          type: DOM_OPERATION_TYPES[write.type] || write.type,
	          args: write.args
	        });
	      });
	    });
	  });
	  return items;
	}

	function getExclusiveSummary(measurements) {
	  var candidates = {};
	  var displayName;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

	    for (var id in allIDs) {
	      displayName = measurement.displayNames[id].current;

	      candidates[displayName] = candidates[displayName] || {
	        componentName: displayName,
	        inclusive: 0,
	        exclusive: 0,
	        render: 0,
	        count: 0
	      };
	      if (measurement.render[id]) {
	        candidates[displayName].render += measurement.render[id];
	      }
	      if (measurement.exclusive[id]) {
	        candidates[displayName].exclusive += measurement.exclusive[id];
	      }
	      if (measurement.inclusive[id]) {
	        candidates[displayName].inclusive += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[displayName].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (displayName in candidates) {
	    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[displayName]);
	    }
	  }

	  arr.sort(function (a, b) {
	    return b.exclusive - a.exclusive;
	  });

	  return arr;
	}

	function getInclusiveSummary(measurements, onlyClean) {
	  var candidates = {};
	  var inclusiveKey;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);
	    var cleanComponents;

	    if (onlyClean) {
	      cleanComponents = getUnchangedComponents(measurement);
	    }

	    for (var id in allIDs) {
	      if (onlyClean && !cleanComponents[id]) {
	        continue;
	      }

	      var displayName = measurement.displayNames[id];

	      // Inclusive time is not useful for many components without knowing where
	      // they are instantiated. So we aggregate inclusive time with both the
	      // owner and current displayName as the key.
	      inclusiveKey = displayName.owner + ' > ' + displayName.current;

	      candidates[inclusiveKey] = candidates[inclusiveKey] || {
	        componentName: inclusiveKey,
	        time: 0,
	        count: 0
	      };

	      if (measurement.inclusive[id]) {
	        candidates[inclusiveKey].time += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[inclusiveKey].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (inclusiveKey in candidates) {
	    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[inclusiveKey]);
	    }
	  }

	  arr.sort(function (a, b) {
	    return b.time - a.time;
	  });

	  return arr;
	}

	function getUnchangedComponents(measurement) {
	  // For a given reconcile, look at which components did not actually
	  // render anything to the DOM and return a mapping of their ID to
	  // the amount of time it took to render the entire subtree.
	  var cleanComponents = {};
	  var dirtyLeafIDs = Object.keys(measurement.writes);
	  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

	  for (var id in allIDs) {
	    var isDirty = false;
	    // For each component that rendered, see if a component that triggered
	    // a DOM op is in its subtree.
	    for (var i = 0; i < dirtyLeafIDs.length; i++) {
	      if (dirtyLeafIDs[i].indexOf(id) === 0) {
	        isDirty = true;
	        break;
	      }
	    }
	    // check if component newly created
	    if (measurement.created[id]) {
	      isDirty = true;
	    }
	    if (!isDirty && measurement.counts[id] > 0) {
	      cleanComponents[id] = true;
	    }
	  }
	  return cleanComponents;
	}

	var ReactDefaultPerfAnalysis = {
	  getExclusiveSummary: getExclusiveSummary,
	  getInclusiveSummary: getInclusiveSummary,
	  getDOMSummary: getDOMSummary,
	  getTotalTime: getTotalTime
	};

	module.exports = ReactDefaultPerfAnalysis;

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performanceNow
	 * @typechecks
	 */

	'use strict';

	var performance = __webpack_require__(145);

	var performanceNow;

	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (performance.now) {
	  performanceNow = function () {
	    return performance.now();
	  };
	} else {
	  performanceNow = function () {
	    return Date.now();
	  };
	}

	module.exports = performanceNow;

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performance
	 * @typechecks
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(9);

	var performance;

	if (ExecutionEnvironment.canUseDOM) {
	  performance = window.performance || window.msPerformance || window.webkitPerformance;
	}

	module.exports = performance || {};

/***/ },
/* 146 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactVersion
	 */

	'use strict';

	module.exports = '0.14.9';

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	* @providesModule renderSubtreeIntoContainer
	*/

	'use strict';

	var ReactMount = __webpack_require__(28);

	module.exports = ReactMount.renderSubtreeIntoContainer;

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMServer
	 */

	'use strict';

	var ReactDefaultInjection = __webpack_require__(71);
	var ReactServerRendering = __webpack_require__(149);
	var ReactVersion = __webpack_require__(146);

	ReactDefaultInjection.inject();

	var ReactDOMServer = {
	  renderToString: ReactServerRendering.renderToString,
	  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
	  version: ReactVersion
	};

	module.exports = ReactDOMServer;

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule ReactServerRendering
	 */
	'use strict';

	var ReactDefaultBatchingStrategy = __webpack_require__(92);
	var ReactElement = __webpack_require__(42);
	var ReactInstanceHandles = __webpack_require__(45);
	var ReactMarkupChecksum = __webpack_require__(48);
	var ReactServerBatchingStrategy = __webpack_require__(150);
	var ReactServerRenderingTransaction = __webpack_require__(151);
	var ReactUpdates = __webpack_require__(54);

	var emptyObject = __webpack_require__(58);
	var instantiateReactComponent = __webpack_require__(62);
	var invariant = __webpack_require__(13);

	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup
	 */
	function renderToString(element) {
	  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToString(): You must pass a valid ReactElement.') : invariant(false) : undefined;

	  var transaction;
	  try {
	    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);

	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(false);

	    return transaction.perform(function () {
	      var componentInstance = instantiateReactComponent(element, null);
	      var markup = componentInstance.mountComponent(id, transaction, emptyObject);
	      return ReactMarkupChecksum.addChecksumToMarkup(markup);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	    // Revert to the DOM batching strategy since these two renderers
	    // currently share these stateful modules.
	    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	  }
	}

	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup, without the extra React ID and checksum
	 * (for generating static pages)
	 */
	function renderToStaticMarkup(element) {
	  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToStaticMarkup(): You must pass a valid ReactElement.') : invariant(false) : undefined;

	  var transaction;
	  try {
	    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);

	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(true);

	    return transaction.perform(function () {
	      var componentInstance = instantiateReactComponent(element, null);
	      return componentInstance.mountComponent(id, transaction, emptyObject);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	    // Revert to the DOM batching strategy since these two renderers
	    // currently share these stateful modules.
	    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	  }
	}

	module.exports = {
	  renderToString: renderToString,
	  renderToStaticMarkup: renderToStaticMarkup
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 150 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerBatchingStrategy
	 * @typechecks
	 */

	'use strict';

	var ReactServerBatchingStrategy = {
	  isBatchingUpdates: false,
	  batchedUpdates: function (callback) {
	    // Don't do anything here. During the server rendering we don't want to
	    // schedule any updates. We will simply ignore them.
	  }
	};

	module.exports = ReactServerBatchingStrategy;

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerRenderingTransaction
	 * @typechecks
	 */

	'use strict';

	var PooledClass = __webpack_require__(56);
	var CallbackQueue = __webpack_require__(55);
	var Transaction = __webpack_require__(57);

	var assign = __webpack_require__(39);
	var emptyFunction = __webpack_require__(15);

	/**
	 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
	 * during the performing of the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },

	  close: emptyFunction
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [ON_DOM_READY_QUEUEING];

	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = false;
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap procedures.
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};

	assign(ReactServerRenderingTransaction.prototype, Transaction.Mixin, Mixin);

	PooledClass.addPoolingTo(ReactServerRenderingTransaction);

	module.exports = ReactServerRenderingTransaction;

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactIsomorphic
	 */

	'use strict';

	var ReactChildren = __webpack_require__(110);
	var ReactComponent = __webpack_require__(123);
	var ReactClass = __webpack_require__(122);
	var ReactDOMFactories = __webpack_require__(153);
	var ReactElement = __webpack_require__(42);
	var ReactElementValidator = __webpack_require__(154);
	var ReactPropTypes = __webpack_require__(107);
	var ReactVersion = __webpack_require__(146);

	var assign = __webpack_require__(39);
	var onlyChild = __webpack_require__(156);

	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;

	if (process.env.NODE_ENV !== 'production') {
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}

	var React = {

	  // Modern

	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    toArray: ReactChildren.toArray,
	    only: onlyChild
	  },

	  Component: ReactComponent,

	  createElement: createElement,
	  cloneElement: cloneElement,
	  isValidElement: ReactElement.isValidElement,

	  // Classic

	  PropTypes: ReactPropTypes,
	  createClass: ReactClass.createClass,
	  createFactory: createFactory,
	  createMixin: function (mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },

	  // This looks DOM specific but these are actually isomorphic helpers
	  // since they are just generating DOM strings.
	  DOM: ReactDOMFactories,

	  version: ReactVersion,

	  // Hook for JSX spread, don't use this for anything else.
	  __spread: assign
	};

	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMFactories
	 * @typechecks static-only
	 */

	'use strict';

	var ReactElement = __webpack_require__(42);
	var ReactElementValidator = __webpack_require__(154);

	var mapObject = __webpack_require__(155);

	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @param {string} tag Tag name (e.g. `div`).
	 * @private
	 */
	function createDOMFactory(tag) {
	  if (process.env.NODE_ENV !== 'production') {
	    return ReactElementValidator.createFactory(tag);
	  }
	  return ReactElement.createFactory(tag);
	}

	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOMFactories = mapObject({
	  a: 'a',
	  abbr: 'abbr',
	  address: 'address',
	  area: 'area',
	  article: 'article',
	  aside: 'aside',
	  audio: 'audio',
	  b: 'b',
	  base: 'base',
	  bdi: 'bdi',
	  bdo: 'bdo',
	  big: 'big',
	  blockquote: 'blockquote',
	  body: 'body',
	  br: 'br',
	  button: 'button',
	  canvas: 'canvas',
	  caption: 'caption',
	  cite: 'cite',
	  code: 'code',
	  col: 'col',
	  colgroup: 'colgroup',
	  data: 'data',
	  datalist: 'datalist',
	  dd: 'dd',
	  del: 'del',
	  details: 'details',
	  dfn: 'dfn',
	  dialog: 'dialog',
	  div: 'div',
	  dl: 'dl',
	  dt: 'dt',
	  em: 'em',
	  embed: 'embed',
	  fieldset: 'fieldset',
	  figcaption: 'figcaption',
	  figure: 'figure',
	  footer: 'footer',
	  form: 'form',
	  h1: 'h1',
	  h2: 'h2',
	  h3: 'h3',
	  h4: 'h4',
	  h5: 'h5',
	  h6: 'h6',
	  head: 'head',
	  header: 'header',
	  hgroup: 'hgroup',
	  hr: 'hr',
	  html: 'html',
	  i: 'i',
	  iframe: 'iframe',
	  img: 'img',
	  input: 'input',
	  ins: 'ins',
	  kbd: 'kbd',
	  keygen: 'keygen',
	  label: 'label',
	  legend: 'legend',
	  li: 'li',
	  link: 'link',
	  main: 'main',
	  map: 'map',
	  mark: 'mark',
	  menu: 'menu',
	  menuitem: 'menuitem',
	  meta: 'meta',
	  meter: 'meter',
	  nav: 'nav',
	  noscript: 'noscript',
	  object: 'object',
	  ol: 'ol',
	  optgroup: 'optgroup',
	  option: 'option',
	  output: 'output',
	  p: 'p',
	  param: 'param',
	  picture: 'picture',
	  pre: 'pre',
	  progress: 'progress',
	  q: 'q',
	  rp: 'rp',
	  rt: 'rt',
	  ruby: 'ruby',
	  s: 's',
	  samp: 'samp',
	  script: 'script',
	  section: 'section',
	  select: 'select',
	  small: 'small',
	  source: 'source',
	  span: 'span',
	  strong: 'strong',
	  style: 'style',
	  sub: 'sub',
	  summary: 'summary',
	  sup: 'sup',
	  table: 'table',
	  tbody: 'tbody',
	  td: 'td',
	  textarea: 'textarea',
	  tfoot: 'tfoot',
	  th: 'th',
	  thead: 'thead',
	  time: 'time',
	  title: 'title',
	  tr: 'tr',
	  track: 'track',
	  u: 'u',
	  ul: 'ul',
	  'var': 'var',
	  video: 'video',
	  wbr: 'wbr',

	  // SVG
	  circle: 'circle',
	  clipPath: 'clipPath',
	  defs: 'defs',
	  ellipse: 'ellipse',
	  g: 'g',
	  image: 'image',
	  line: 'line',
	  linearGradient: 'linearGradient',
	  mask: 'mask',
	  path: 'path',
	  pattern: 'pattern',
	  polygon: 'polygon',
	  polyline: 'polyline',
	  radialGradient: 'radialGradient',
	  rect: 'rect',
	  stop: 'stop',
	  svg: 'svg',
	  text: 'text',
	  tspan: 'tspan'

	}, createDOMFactory);

	module.exports = ReactDOMFactories;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElementValidator
	 */

	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */

	'use strict';

	var ReactElement = __webpack_require__(42);
	var ReactPropTypeLocations = __webpack_require__(65);
	var ReactPropTypeLocationNames = __webpack_require__(66);
	var ReactCurrentOwner = __webpack_require__(5);

	var canDefineProperty = __webpack_require__(43);
	var getIteratorFn = __webpack_require__(108);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);

	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};

	var loggedTypeFailures = {};

	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;

	  var addenda = getAddendaForKeyUse('uniqueKey', element, parentType);
	  if (addenda === null) {
	    // we already showed the warning
	    return;
	  }
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s%s', addenda.parentOrOwner || '', addenda.childOwner || '', addenda.url || '') : undefined;
	}

	/**
	 * Shared warning and monitoring code for the key warnings.
	 *
	 * @internal
	 * @param {string} messageType A key used for de-duping warnings.
	 * @param {ReactElement} element Component that requires a key.
	 * @param {*} parentType element's parent's type.
	 * @returns {?object} A set of addenda to use in the warning message, or null
	 * if the warning has already been shown before (and shouldn't be shown again).
	 */
	function getAddendaForKeyUse(messageType, element, parentType) {
	  var addendum = getDeclarationErrorAddendum();
	  if (!addendum) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
	    if (parentName) {
	      addendum = ' Check the top-level render call using <' + parentName + '>.';
	    }
	  }

	  var memoizer = ownerHasKeyUseWarning[messageType] || (ownerHasKeyUseWarning[messageType] = {});
	  if (memoizer[addendum]) {
	    return null;
	  }
	  memoizer[addendum] = true;

	  var addenda = {
	    parentOrOwner: addendum,
	    url: ' See https://fb.me/react-warning-keys for more information.',
	    childOwner: null
	  };

	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    addenda.childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
	  }

	  return addenda;
	}

	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (typeof node !== 'object') {
	    return;
	  }
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}

	/**
	 * Assert that the props are valid
	 *
	 * @param {string} componentName Name of the component for error messages.
	 * @param {object} propTypes Map of prop name to a ReactPropType
	 * @param {object} props
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @private
	 */
	function checkPropTypes(componentName, propTypes, props, location) {
	  for (var propName in propTypes) {
	    if (propTypes.hasOwnProperty(propName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
	        error = propTypes[propName](props, propName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], propName, typeof error) : undefined;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum();
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed propType: %s%s', error.message, addendum) : undefined;
	      }
	    }
	  }
	}

	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  var componentClass = element.type;
	  if (typeof componentClass !== 'function') {
	    return;
	  }
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkPropTypes(name, componentClass.propTypes, element.props, ReactPropTypeLocations.prop);
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : undefined;
	  }
	}

	var ReactElementValidator = {

	  createElement: function (type, props, children) {
	    var validType = typeof type === 'string' || typeof type === 'function';
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    process.env.NODE_ENV !== 'production' ? warning(validType, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : undefined;

	    var element = ReactElement.createElement.apply(this, arguments);

	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }

	    // Skip key warning if the type isn't valid since our key validation logic
	    // doesn't expect a non-string/function type and can throw confusing errors.
	    // We don't want exception behavior to differ between dev and prod.
	    // (Rendering will throw with a helpful message and as soon as the type is
	    // fixed, the key warnings will appear.)
	    if (validType) {
	      for (var i = 2; i < arguments.length; i++) {
	        validateChildKeys(arguments[i], type);
	      }
	    }

	    validatePropTypes(element);

	    return element;
	  },

	  createFactory: function (type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;

	    if (process.env.NODE_ENV !== 'production') {
	      if (canDefineProperty) {
	        Object.defineProperty(validatedFactory, 'type', {
	          enumerable: false,
	          get: function () {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : undefined;
	            Object.defineProperty(this, 'type', {
	              value: type
	            });
	            return type;
	          }
	        });
	      }
	    }

	    return validatedFactory;
	  },

	  cloneElement: function (element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }

	};

	module.exports = ReactElementValidator;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 155 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule mapObject
	 */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * Executes the provided `callback` once for each enumerable own property in the
	 * object and constructs a new object from the results. The `callback` is
	 * invoked with three arguments:
	 *
	 *  - the property value
	 *  - the property name
	 *  - the object being traversed
	 *
	 * Properties that are added after the call to `mapObject` will not be visited
	 * by `callback`. If the values of existing properties are changed, the value
	 * passed to `callback` will be the value at the time `mapObject` visits them.
	 * Properties that are deleted before being visited are not visited.
	 *
	 * @grep function objectMap()
	 * @grep function objMap()
	 *
	 * @param {?object} object
	 * @param {function} callback
	 * @param {*} context
	 * @return {?object}
	 */
	function mapObject(object, callback, context) {
	  if (!object) {
	    return null;
	  }
	  var result = {};
	  for (var name in object) {
	    if (hasOwnProperty.call(object, name)) {
	      result[name] = callback.call(context, object[name], name, object);
	    }
	  }
	  return result;
	}

	module.exports = mapObject;

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule onlyChild
	 */
	'use strict';

	var ReactElement = __webpack_require__(42);

	var invariant = __webpack_require__(13);

	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection. The current implementation of this
	 * function assumes that a single child gets passed without a wrapper, but the
	 * purpose of this helper function is to abstract away the particular structure
	 * of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactComponent} The first and only `ReactComponent` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'onlyChild must be passed a children with exactly one child.') : invariant(false) : undefined;
	  return children;
	}

	module.exports = onlyChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule deprecated
	 */

	'use strict';

	var assign = __webpack_require__(39);
	var warning = __webpack_require__(25);

	/**
	 * This will log a single deprecation notice per function and forward the call
	 * on to the new API.
	 *
	 * @param {string} fnName The name of the function
	 * @param {string} newModule The module that fn will exist in
	 * @param {string} newPackage The module that fn will exist in
	 * @param {*} ctx The context this forwarded call should run in
	 * @param {function} fn The function to forward on to
	 * @return {function} The function that will warn once and then call fn
	 */
	function deprecated(fnName, newModule, newPackage, ctx, fn) {
	  var warned = false;
	  if (process.env.NODE_ENV !== 'production') {
	    var newFn = function () {
	      process.env.NODE_ENV !== 'production' ? warning(warned,
	      // Require examples in this string must be split to prevent React's
	      // build tools from mistaking them for real requires.
	      // Otherwise the build tools will attempt to build a '%s' module.
	      'React.%s is deprecated. Please use %s.%s from require' + '(\'%s\') ' + 'instead.', fnName, newModule, fnName, newPackage) : undefined;
	      warned = true;
	      return fn.apply(ctx, arguments);
	    };
	    // We need to make sure all properties of the original fn are copied over.
	    // In particular, this is needed to support PropTypes
	    return assign(newFn, fn);
	  }

	  return fn;
	}

	module.exports = deprecated;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(3);


/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _echarts = __webpack_require__(160);

	var _echarts2 = _interopRequireDefault(_echarts);

	var _core = __webpack_require__(613);

	var _core2 = _interopRequireDefault(_core);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	// export the Component the echarts Object.
	var EchartsReact = function (_Core) {
	  _inherits(EchartsReact, _Core);

	  function EchartsReact(props) {
	    _classCallCheck(this, EchartsReact);

	    var _this = _possibleConstructorReturn(this, (EchartsReact.__proto__ || Object.getPrototypeOf(EchartsReact)).call(this, props));

	    _this.echartsInstance = _echarts2['default'];
	    return _this;
	  }

	  return EchartsReact;
	}(_core2['default']);

	exports['default'] = EchartsReact;

/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	var _echarts = __webpack_require__(161);

	(function () {
	  for (var key in _echarts) {
	    if (_echarts == null || !_echarts.hasOwnProperty(key) || key === 'default' || key === '__esModule') return;
	    exports[key] = _echarts[key];
	  }
	})();

	var _export = __webpack_require__(262);

	(function () {
	  for (var key in _export) {
	    if (_export == null || !_export.hasOwnProperty(key) || key === 'default' || key === '__esModule') return;
	    exports[key] = _export[key];
	  }
	})();

	__webpack_require__(281);

	__webpack_require__(307);

	__webpack_require__(314);

	__webpack_require__(323);

	__webpack_require__(327);

	__webpack_require__(337);

	__webpack_require__(358);

	__webpack_require__(369);

	__webpack_require__(379);

	__webpack_require__(399);

	__webpack_require__(403);

	__webpack_require__(407);

	__webpack_require__(424);

	__webpack_require__(430);

	__webpack_require__(437);

	__webpack_require__(443);

	__webpack_require__(447);

	__webpack_require__(456);

	__webpack_require__(460);

	__webpack_require__(463);

	__webpack_require__(485);

	__webpack_require__(491);

	__webpack_require__(492);

	__webpack_require__(493);

	__webpack_require__(503);

	__webpack_require__(471);

	__webpack_require__(507);

	__webpack_require__(520);

	__webpack_require__(408);

	__webpack_require__(464);

	__webpack_require__(523);

	__webpack_require__(535);

	__webpack_require__(539);

	__webpack_require__(540);

	__webpack_require__(553);

	__webpack_require__(568);

	__webpack_require__(574);

	__webpack_require__(577);

	__webpack_require__(580);

	__webpack_require__(589);

	__webpack_require__(601);

	__webpack_require__(605);

/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(162);

	var __DEV__ = _config.__DEV__;

	var zrender = __webpack_require__(163);

	var zrUtil = __webpack_require__(166);

	var colorTool = __webpack_require__(180);

	var env = __webpack_require__(165);

	var timsort = __webpack_require__(185);

	var Eventful = __webpack_require__(170);

	var GlobalModel = __webpack_require__(202);

	var ExtensionAPI = __webpack_require__(251);

	var CoordinateSystemManager = __webpack_require__(252);

	var OptionManager = __webpack_require__(253);

	var backwardCompat = __webpack_require__(254);

	var ComponentModel = __webpack_require__(245);

	var SeriesModel = __webpack_require__(256);

	var ComponentView = __webpack_require__(257);

	var ChartView = __webpack_require__(258);

	var graphic = __webpack_require__(212);

	var modelUtil = __webpack_require__(203);

	var _throttle = __webpack_require__(259);

	var throttle = _throttle.throttle;

	var seriesColor = __webpack_require__(260);

	var loadingDefault = __webpack_require__(261);

	/*!
	 * ECharts, a javascript interactive chart library.
	 *
	 * Copyright (c) 2015, Baidu Inc.
	 * All rights reserved.
	 *
	 * LICENSE
	 * https://github.com/ecomfe/echarts/blob/master/LICENSE.txt
	 */
	var each = zrUtil.each;
	var parseClassType = ComponentModel.parseClassType;
	var version = '3.8.5';
	var dependencies = {
	  zrender: '3.7.4'
	};
	var PRIORITY_PROCESSOR_FILTER = 1000;
	var PRIORITY_PROCESSOR_STATISTIC = 5000;
	var PRIORITY_VISUAL_LAYOUT = 1000;
	var PRIORITY_VISUAL_GLOBAL = 2000;
	var PRIORITY_VISUAL_CHART = 3000;
	var PRIORITY_VISUAL_COMPONENT = 4000; // FIXME
	// necessary?

	var PRIORITY_VISUAL_BRUSH = 5000;
	var PRIORITY = {
	  PROCESSOR: {
	    FILTER: PRIORITY_PROCESSOR_FILTER,
	    STATISTIC: PRIORITY_PROCESSOR_STATISTIC
	  },
	  VISUAL: {
	    LAYOUT: PRIORITY_VISUAL_LAYOUT,
	    GLOBAL: PRIORITY_VISUAL_GLOBAL,
	    CHART: PRIORITY_VISUAL_CHART,
	    COMPONENT: PRIORITY_VISUAL_COMPONENT,
	    BRUSH: PRIORITY_VISUAL_BRUSH
	  }
	}; // Main process have three entries: `setOption`, `dispatchAction` and `resize`,
	// where they must not be invoked nestedly, except the only case: invoke
	// dispatchAction with updateMethod "none" in main process.
	// This flag is used to carry out this rule.
	// All events will be triggered out side main process (i.e. when !this[IN_MAIN_PROCESS]).

	var IN_MAIN_PROCESS = '__flagInMainProcess';
	var HAS_GRADIENT_OR_PATTERN_BG = '__hasGradientOrPatternBg';
	var OPTION_UPDATED = '__optionUpdated';
	var ACTION_REG = /^[a-zA-Z0-9_]+$/;

	function createRegisterEventWithLowercaseName(method) {
	  return function (eventName, handler, context) {
	    // Event name is all lowercase
	    eventName = eventName && eventName.toLowerCase();
	    Eventful.prototype[method].call(this, eventName, handler, context);
	  };
	}
	/**
	 * @module echarts~MessageCenter
	 */


	function MessageCenter() {
	  Eventful.call(this);
	}

	MessageCenter.prototype.on = createRegisterEventWithLowercaseName('on');
	MessageCenter.prototype.off = createRegisterEventWithLowercaseName('off');
	MessageCenter.prototype.one = createRegisterEventWithLowercaseName('one');
	zrUtil.mixin(MessageCenter, Eventful);
	/**
	 * @module echarts~ECharts
	 */

	function ECharts(dom, theme, opts) {
	  opts = opts || {}; // Get theme by name

	  if (typeof theme === 'string') {
	    theme = themeStorage[theme];
	  }
	  /**
	   * @type {string}
	   */


	  this.id;
	  /**
	   * Group id
	   * @type {string}
	   */

	  this.group;
	  /**
	   * @type {HTMLElement}
	   * @private
	   */

	  this._dom = dom;
	  var defaultRenderer = 'canvas';

	  /**
	   * @type {module:zrender/ZRender}
	   * @private
	   */
	  var zr = this._zr = zrender.init(dom, {
	    renderer: opts.renderer || defaultRenderer,
	    devicePixelRatio: opts.devicePixelRatio,
	    width: opts.width,
	    height: opts.height
	  });
	  /**
	   * Expect 60 pfs.
	   * @type {Function}
	   * @private
	   */

	  this._throttledZrFlush = throttle(zrUtil.bind(zr.flush, zr), 17);
	  var theme = zrUtil.clone(theme);
	  theme && backwardCompat(theme, true);
	  /**
	   * @type {Object}
	   * @private
	   */

	  this._theme = theme;
	  /**
	   * @type {Array.<module:echarts/view/Chart>}
	   * @private
	   */

	  this._chartsViews = [];
	  /**
	   * @type {Object.<string, module:echarts/view/Chart>}
	   * @private
	   */

	  this._chartsMap = {};
	  /**
	   * @type {Array.<module:echarts/view/Component>}
	   * @private
	   */

	  this._componentsViews = [];
	  /**
	   * @type {Object.<string, module:echarts/view/Component>}
	   * @private
	   */

	  this._componentsMap = {};
	  /**
	   * @type {module:echarts/CoordinateSystem}
	   * @private
	   */

	  this._coordSysMgr = new CoordinateSystemManager();
	  /**
	   * @type {module:echarts/ExtensionAPI}
	   * @private
	   */

	  this._api = createExtensionAPI(this);
	  Eventful.call(this);
	  /**
	   * @type {module:echarts~MessageCenter}
	   * @private
	   */

	  this._messageCenter = new MessageCenter(); // Init mouse events

	  this._initEvents(); // In case some people write `window.onresize = chart.resize`


	  this.resize = zrUtil.bind(this.resize, this); // Can't dispatch action during rendering procedure

	  this._pendingActions = []; // Sort on demand

	  function prioritySortFunc(a, b) {
	    return a.prio - b.prio;
	  }

	  timsort(visualFuncs, prioritySortFunc);
	  timsort(dataProcessorFuncs, prioritySortFunc);
	  zr.animation.on('frame', this._onframe, this); // ECharts instance can be used as value.

	  zrUtil.setAsPrimitive(this);
	}

	var echartsProto = ECharts.prototype;

	echartsProto._onframe = function () {
	  // Lazy update
	  if (this[OPTION_UPDATED]) {
	    var silent = this[OPTION_UPDATED].silent;
	    this[IN_MAIN_PROCESS] = true;
	    updateMethods.prepareAndUpdate.call(this);
	    this[IN_MAIN_PROCESS] = false;
	    this[OPTION_UPDATED] = false;
	    flushPendingActions.call(this, silent);
	    triggerUpdatedEvent.call(this, silent);
	  }
	};
	/**
	 * @return {HTMLElement}
	 */


	echartsProto.getDom = function () {
	  return this._dom;
	};
	/**
	 * @return {module:zrender~ZRender}
	 */


	echartsProto.getZr = function () {
	  return this._zr;
	};
	/**
	 * Usage:
	 * chart.setOption(option, notMerge, lazyUpdate);
	 * chart.setOption(option, {
	 *     notMerge: ...,
	 *     lazyUpdate: ...,
	 *     silent: ...
	 * });
	 *
	 * @param {Object} option
	 * @param {Object|boolean} [opts] opts or notMerge.
	 * @param {boolean} [opts.notMerge=false]
	 * @param {boolean} [opts.lazyUpdate=false] Useful when setOption frequently.
	 */


	echartsProto.setOption = function (option, notMerge, lazyUpdate) {
	  var silent;

	  if (zrUtil.isObject(notMerge)) {
	    lazyUpdate = notMerge.lazyUpdate;
	    silent = notMerge.silent;
	    notMerge = notMerge.notMerge;
	  }

	  this[IN_MAIN_PROCESS] = true;

	  if (!this._model || notMerge) {
	    var optionManager = new OptionManager(this._api);
	    var theme = this._theme;
	    var ecModel = this._model = new GlobalModel(null, null, theme, optionManager);
	    ecModel.init(null, null, theme, optionManager);
	  }

	  this._model.setOption(option, optionPreprocessorFuncs);

	  if (lazyUpdate) {
	    this[OPTION_UPDATED] = {
	      silent: silent
	    };
	    this[IN_MAIN_PROCESS] = false;
	  } else {
	    updateMethods.prepareAndUpdate.call(this); // Ensure zr refresh sychronously, and then pixel in canvas can be
	    // fetched after `setOption`.

	    this._zr.flush();

	    this[OPTION_UPDATED] = false;
	    this[IN_MAIN_PROCESS] = false;
	    flushPendingActions.call(this, silent);
	    triggerUpdatedEvent.call(this, silent);
	  }
	};
	/**
	 * @DEPRECATED
	 */


	echartsProto.setTheme = function () {
	  console.log('ECharts#setTheme() is DEPRECATED in ECharts 3.0');
	};
	/**
	 * @return {module:echarts/model/Global}
	 */


	echartsProto.getModel = function () {
	  return this._model;
	};
	/**
	 * @return {Object}
	 */


	echartsProto.getOption = function () {
	  return this._model && this._model.getOption();
	};
	/**
	 * @return {number}
	 */


	echartsProto.getWidth = function () {
	  return this._zr.getWidth();
	};
	/**
	 * @return {number}
	 */


	echartsProto.getHeight = function () {
	  return this._zr.getHeight();
	};
	/**
	 * @return {number}
	 */


	echartsProto.getDevicePixelRatio = function () {
	  return this._zr.painter.dpr || window.devicePixelRatio || 1;
	};
	/**
	 * Get canvas which has all thing rendered
	 * @param {Object} opts
	 * @param {string} [opts.backgroundColor]
	 * @return {string}
	 */


	echartsProto.getRenderedCanvas = function (opts) {
	  if (!env.canvasSupported) {
	    return;
	  }

	  opts = opts || {};
	  opts.pixelRatio = opts.pixelRatio || 1;
	  opts.backgroundColor = opts.backgroundColor || this._model.get('backgroundColor');
	  var zr = this._zr;
	  var list = zr.storage.getDisplayList(); // Stop animations

	  zrUtil.each(list, function (el) {
	    el.stopAnimation(true);
	  });
	  return zr.painter.getRenderedCanvas(opts);
	};
	/**
	 * Get svg data url
	 * @return {string}
	 */


	echartsProto.getSvgDataUrl = function () {
	  if (!env.svgSupported) {
	    return;
	  }

	  var zr = this._zr;
	  var list = zr.storage.getDisplayList(); // Stop animations

	  zrUtil.each(list, function (el) {
	    el.stopAnimation(true);
	  });
	  return zr.painter.pathToSvg();
	};
	/**
	 * @return {string}
	 * @param {Object} opts
	 * @param {string} [opts.type='png']
	 * @param {string} [opts.pixelRatio=1]
	 * @param {string} [opts.backgroundColor]
	 * @param {string} [opts.excludeComponents]
	 */


	echartsProto.getDataURL = function (opts) {
	  opts = opts || {};
	  var excludeComponents = opts.excludeComponents;
	  var ecModel = this._model;
	  var excludesComponentViews = [];
	  var self = this;
	  each(excludeComponents, function (componentType) {
	    ecModel.eachComponent({
	      mainType: componentType
	    }, function (component) {
	      var view = self._componentsMap[component.__viewId];

	      if (!view.group.ignore) {
	        excludesComponentViews.push(view);
	        view.group.ignore = true;
	      }
	    });
	  });
	  var url = this._zr.painter.getType() === 'svg' ? this.getSvgDataUrl() : this.getRenderedCanvas(opts).toDataURL('image/' + (opts && opts.type || 'png'));
	  each(excludesComponentViews, function (view) {
	    view.group.ignore = false;
	  });
	  return url;
	};
	/**
	 * @return {string}
	 * @param {Object} opts
	 * @param {string} [opts.type='png']
	 * @param {string} [opts.pixelRatio=1]
	 * @param {string} [opts.backgroundColor]
	 */


	echartsProto.getConnectedDataURL = function (opts) {
	  if (!env.canvasSupported) {
	    return;
	  }

	  var groupId = this.group;
	  var mathMin = Math.min;
	  var mathMax = Math.max;
	  var MAX_NUMBER = Infinity;

	  if (connectedGroups[groupId]) {
	    var left = MAX_NUMBER;
	    var top = MAX_NUMBER;
	    var right = -MAX_NUMBER;
	    var bottom = -MAX_NUMBER;
	    var canvasList = [];
	    var dpr = opts && opts.pixelRatio || 1;
	    zrUtil.each(instances, function (chart, id) {
	      if (chart.group === groupId) {
	        var canvas = chart.getRenderedCanvas(zrUtil.clone(opts));
	        var boundingRect = chart.getDom().getBoundingClientRect();
	        left = mathMin(boundingRect.left, left);
	        top = mathMin(boundingRect.top, top);
	        right = mathMax(boundingRect.right, right);
	        bottom = mathMax(boundingRect.bottom, bottom);
	        canvasList.push({
	          dom: canvas,
	          left: boundingRect.left,
	          top: boundingRect.top
	        });
	      }
	    });
	    left *= dpr;
	    top *= dpr;
	    right *= dpr;
	    bottom *= dpr;
	    var width = right - left;
	    var height = bottom - top;
	    var targetCanvas = zrUtil.createCanvas();
	    targetCanvas.width = width;
	    targetCanvas.height = height;
	    var zr = zrender.init(targetCanvas);
	    each(canvasList, function (item) {
	      var img = new graphic.Image({
	        style: {
	          x: item.left * dpr - left,
	          y: item.top * dpr - top,
	          image: item.dom
	        }
	      });
	      zr.add(img);
	    });
	    zr.refreshImmediately();
	    return targetCanvas.toDataURL('image/' + (opts && opts.type || 'png'));
	  } else {
	    return this.getDataURL(opts);
	  }
	};
	/**
	 * Convert from logical coordinate system to pixel coordinate system.
	 * See CoordinateSystem#convertToPixel.
	 * @param {string|Object} finder
	 *        If string, e.g., 'geo', means {geoIndex: 0}.
	 *        If Object, could contain some of these properties below:
	 *        {
	 *            seriesIndex / seriesId / seriesName,
	 *            geoIndex / geoId, geoName,
	 *            bmapIndex / bmapId / bmapName,
	 *            xAxisIndex / xAxisId / xAxisName,
	 *            yAxisIndex / yAxisId / yAxisName,
	 *            gridIndex / gridId / gridName,
	 *            ... (can be extended)
	 *        }
	 * @param {Array|number} value
	 * @return {Array|number} result
	 */


	echartsProto.convertToPixel = zrUtil.curry(doConvertPixel, 'convertToPixel');
	/**
	 * Convert from pixel coordinate system to logical coordinate system.
	 * See CoordinateSystem#convertFromPixel.
	 * @param {string|Object} finder
	 *        If string, e.g., 'geo', means {geoIndex: 0}.
	 *        If Object, could contain some of these properties below:
	 *        {
	 *            seriesIndex / seriesId / seriesName,
	 *            geoIndex / geoId / geoName,
	 *            bmapIndex / bmapId / bmapName,
	 *            xAxisIndex / xAxisId / xAxisName,
	 *            yAxisIndex / yAxisId / yAxisName
	 *            gridIndex / gridId / gridName,
	 *            ... (can be extended)
	 *        }
	 * @param {Array|number} value
	 * @return {Array|number} result
	 */

	echartsProto.convertFromPixel = zrUtil.curry(doConvertPixel, 'convertFromPixel');

	function doConvertPixel(methodName, finder, value) {
	  var ecModel = this._model;

	  var coordSysList = this._coordSysMgr.getCoordinateSystems();

	  var result;
	  finder = modelUtil.parseFinder(ecModel, finder);

	  for (var i = 0; i < coordSysList.length; i++) {
	    var coordSys = coordSysList[i];

	    if (coordSys[methodName] && (result = coordSys[methodName](ecModel, finder, value)) != null) {
	      return result;
	    }
	  }
	}
	/**
	 * Is the specified coordinate systems or components contain the given pixel point.
	 * @param {string|Object} finder
	 *        If string, e.g., 'geo', means {geoIndex: 0}.
	 *        If Object, could contain some of these properties below:
	 *        {
	 *            seriesIndex / seriesId / seriesName,
	 *            geoIndex / geoId / geoName,
	 *            bmapIndex / bmapId / bmapName,
	 *            xAxisIndex / xAxisId / xAxisName,
	 *            yAxisIndex / yAxisId / yAxisName,
	 *            gridIndex / gridId / gridName,
	 *            ... (can be extended)
	 *        }
	 * @param {Array|number} value
	 * @return {boolean} result
	 */


	echartsProto.containPixel = function (finder, value) {
	  var ecModel = this._model;
	  var result;
	  finder = modelUtil.parseFinder(ecModel, finder);
	  zrUtil.each(finder, function (models, key) {
	    key.indexOf('Models') >= 0 && zrUtil.each(models, function (model) {
	      var coordSys = model.coordinateSystem;

	      if (coordSys && coordSys.containPoint) {
	        result |= !!coordSys.containPoint(value);
	      } else if (key === 'seriesModels') {
	        var view = this._chartsMap[model.__viewId];

	        if (view && view.containPoint) {
	          result |= view.containPoint(value, model);
	        } else {}
	      } else {}
	    }, this);
	  }, this);
	  return !!result;
	};
	/**
	 * Get visual from series or data.
	 * @param {string|Object} finder
	 *        If string, e.g., 'series', means {seriesIndex: 0}.
	 *        If Object, could contain some of these properties below:
	 *        {
	 *            seriesIndex / seriesId / seriesName,
	 *            dataIndex / dataIndexInside
	 *        }
	 *        If dataIndex is not specified, series visual will be fetched,
	 *        but not data item visual.
	 *        If all of seriesIndex, seriesId, seriesName are not specified,
	 *        visual will be fetched from first series.
	 * @param {string} visualType 'color', 'symbol', 'symbolSize'
	 */


	echartsProto.getVisual = function (finder, visualType) {
	  var ecModel = this._model;
	  finder = modelUtil.parseFinder(ecModel, finder, {
	    defaultMainType: 'series'
	  });
	  var seriesModel = finder.seriesModel;
	  var data = seriesModel.getData();
	  var dataIndexInside = finder.hasOwnProperty('dataIndexInside') ? finder.dataIndexInside : finder.hasOwnProperty('dataIndex') ? data.indexOfRawIndex(finder.dataIndex) : null;
	  return dataIndexInside != null ? data.getItemVisual(dataIndexInside, visualType) : data.getVisual(visualType);
	};
	/**
	 * Get view of corresponding component model
	 * @param  {module:echarts/model/Component} componentModel
	 * @return {module:echarts/view/Component}
	 */


	echartsProto.getViewOfComponentModel = function (componentModel) {
	  return this._componentsMap[componentModel.__viewId];
	};
	/**
	 * Get view of corresponding series model
	 * @param  {module:echarts/model/Series} seriesModel
	 * @return {module:echarts/view/Chart}
	 */


	echartsProto.getViewOfSeriesModel = function (seriesModel) {
	  return this._chartsMap[seriesModel.__viewId];
	};

	var updateMethods = {
	  /**
	   * @param {Object} payload
	   * @private
	   */
	  update: function (payload) {
	    // console.profile && console.profile('update');
	    var ecModel = this._model;
	    var api = this._api;
	    var coordSysMgr = this._coordSysMgr;
	    var zr = this._zr; // update before setOption

	    if (!ecModel) {
	      return;
	    } // Fixme First time update ?


	    ecModel.restoreData(); // TODO
	    // Save total ecModel here for undo/redo (after restoring data and before processing data).
	    // Undo (restoration of total ecModel) can be carried out in 'action' or outside API call.
	    // Create new coordinate system each update
	    // In LineView may save the old coordinate system and use it to get the orignal point

	    coordSysMgr.create(this._model, this._api);
	    processData.call(this, ecModel, api);
	    stackSeriesData.call(this, ecModel);
	    coordSysMgr.update(ecModel, api);
	    doVisualEncoding.call(this, ecModel, payload);
	    doRender.call(this, ecModel, payload); // Set background

	    var backgroundColor = ecModel.get('backgroundColor') || 'transparent';
	    var painter = zr.painter; // TODO all use clearColor ?

	    if (painter.isSingleCanvas && painter.isSingleCanvas()) {
	      zr.configLayer(0, {
	        clearColor: backgroundColor
	      });
	    } else {
	      // In IE8
	      if (!env.canvasSupported) {
	        var colorArr = colorTool.parse(backgroundColor);
	        backgroundColor = colorTool.stringify(colorArr, 'rgb');

	        if (colorArr[3] === 0) {
	          backgroundColor = 'transparent';
	        }
	      }

	      if (backgroundColor.colorStops || backgroundColor.image) {
	        // Gradient background
	        // FIXME Fixed layer？
	        zr.configLayer(0, {
	          clearColor: backgroundColor
	        });
	        this[HAS_GRADIENT_OR_PATTERN_BG] = true;
	        this._dom.style.background = 'transparent';
	      } else {
	        if (this[HAS_GRADIENT_OR_PATTERN_BG]) {
	          zr.configLayer(0, {
	            clearColor: null
	          });
	        }

	        this[HAS_GRADIENT_OR_PATTERN_BG] = false;
	        this._dom.style.background = backgroundColor;
	      }
	    }

	    each(postUpdateFuncs, function (func) {
	      func(ecModel, api);
	    }); // console.profile && console.profileEnd('update');
	  },

	  /**
	   * @param {Object} payload
	   * @private
	   */
	  updateView: function (payload) {
	    var ecModel = this._model; // update before setOption

	    if (!ecModel) {
	      return;
	    }

	    ecModel.eachSeries(function (seriesModel) {
	      seriesModel.getData().clearAllVisual();
	    });
	    doVisualEncoding.call(this, ecModel, payload);
	    invokeUpdateMethod.call(this, 'updateView', ecModel, payload);
	  },

	  /**
	   * @param {Object} payload
	   * @private
	   */
	  updateVisual: function (payload) {
	    var ecModel = this._model; // update before setOption

	    if (!ecModel) {
	      return;
	    }

	    ecModel.eachSeries(function (seriesModel) {
	      seriesModel.getData().clearAllVisual();
	    });
	    doVisualEncoding.call(this, ecModel, payload, true);
	    invokeUpdateMethod.call(this, 'updateVisual', ecModel, payload);
	  },

	  /**
	   * @param {Object} payload
	   * @private
	   */
	  updateLayout: function (payload) {
	    var ecModel = this._model; // update before setOption

	    if (!ecModel) {
	      return;
	    }

	    doLayout.call(this, ecModel, payload);
	    invokeUpdateMethod.call(this, 'updateLayout', ecModel, payload);
	  },

	  /**
	   * @param {Object} payload
	   * @private
	   */
	  prepareAndUpdate: function (payload) {
	    var ecModel = this._model;
	    prepareView.call(this, 'component', ecModel);
	    prepareView.call(this, 'chart', ecModel);
	    updateMethods.update.call(this, payload);
	  }
	};
	/**
	 * @private
	 */

	function updateDirectly(ecIns, method, payload, mainType, subType) {
	  var ecModel = ecIns._model; // broadcast

	  if (!mainType) {
	    each(ecIns._componentsViews.concat(ecIns._chartsViews), callView);
	    return;
	  }

	  var query = {};
	  query[mainType + 'Id'] = payload[mainType + 'Id'];
	  query[mainType + 'Index'] = payload[mainType + 'Index'];
	  query[mainType + 'Name'] = payload[mainType + 'Name'];
	  var condition = {
	    mainType: mainType,
	    query: query
	  };
	  subType && (condition.subType = subType); // subType may be '' by parseClassType;
	  // If dispatchAction before setOption, do nothing.

	  ecModel && ecModel.eachComponent(condition, function (model, index) {
	    callView(ecIns[mainType === 'series' ? '_chartsMap' : '_componentsMap'][model.__viewId]);
	  }, ecIns);

	  function callView(view) {
	    view && view.__alive && view[method] && view[method](view.__model, ecModel, ecIns._api, payload);
	  }
	}
	/**
	 * Resize the chart
	 * @param {Object} opts
	 * @param {number} [opts.width] Can be 'auto' (the same as null/undefined)
	 * @param {number} [opts.height] Can be 'auto' (the same as null/undefined)
	 * @param {boolean} [opts.silent=false]
	 */


	echartsProto.resize = function (opts) {
	  this[IN_MAIN_PROCESS] = true;

	  this._zr.resize(opts);

	  var optionChanged = this._model && this._model.resetOption('media');

	  var updateMethod = optionChanged ? 'prepareAndUpdate' : 'update';
	  updateMethods[updateMethod].call(this); // Resize loading effect

	  this._loadingFX && this._loadingFX.resize();
	  this[IN_MAIN_PROCESS] = false;
	  var silent = opts && opts.silent;
	  flushPendingActions.call(this, silent);
	  triggerUpdatedEvent.call(this, silent);
	};
	/**
	 * Show loading effect
	 * @param  {string} [name='default']
	 * @param  {Object} [cfg]
	 */


	echartsProto.showLoading = function (name, cfg) {
	  if (zrUtil.isObject(name)) {
	    cfg = name;
	    name = '';
	  }

	  name = name || 'default';
	  this.hideLoading();

	  if (!loadingEffects[name]) {
	    return;
	  }

	  var el = loadingEffects[name](this._api, cfg);
	  var zr = this._zr;
	  this._loadingFX = el;
	  zr.add(el);
	};
	/**
	 * Hide loading effect
	 */


	echartsProto.hideLoading = function () {
	  this._loadingFX && this._zr.remove(this._loadingFX);
	  this._loadingFX = null;
	};
	/**
	 * @param {Object} eventObj
	 * @return {Object}
	 */


	echartsProto.makeActionFromEvent = function (eventObj) {
	  var payload = zrUtil.extend({}, eventObj);
	  payload.type = eventActionMap[eventObj.type];
	  return payload;
	};
	/**
	 * @pubilc
	 * @param {Object} payload
	 * @param {string} [payload.type] Action type
	 * @param {Object|boolean} [opt] If pass boolean, means opt.silent
	 * @param {boolean} [opt.silent=false] Whether trigger events.
	 * @param {boolean} [opt.flush=undefined]
	 *                  true: Flush immediately, and then pixel in canvas can be fetched
	 *                      immediately. Caution: it might affect performance.
	 *                  false: Not not flush.
	 *                  undefined: Auto decide whether perform flush.
	 */


	echartsProto.dispatchAction = function (payload, opt) {
	  if (!zrUtil.isObject(opt)) {
	    opt = {
	      silent: !!opt
	    };
	  }

	  if (!actions[payload.type]) {
	    return;
	  } // Avoid dispatch action before setOption. Especially in `connect`.


	  if (!this._model) {
	    return;
	  } // May dispatchAction in rendering procedure


	  if (this[IN_MAIN_PROCESS]) {
	    this._pendingActions.push(payload);

	    return;
	  }

	  doDispatchAction.call(this, payload, opt.silent);

	  if (opt.flush) {
	    this._zr.flush(true);
	  } else if (opt.flush !== false && env.browser.weChat) {
	    // In WeChat embeded browser, `requestAnimationFrame` and `setInterval`
	    // hang when sliding page (on touch event), which cause that zr does not
	    // refresh util user interaction finished, which is not expected.
	    // But `dispatchAction` may be called too frequently when pan on touch
	    // screen, which impacts performance if do not throttle them.
	    this._throttledZrFlush();
	  }

	  flushPendingActions.call(this, opt.silent);
	  triggerUpdatedEvent.call(this, opt.silent);
	};

	function doDispatchAction(payload, silent) {
	  var payloadType = payload.type;
	  var escapeConnect = payload.escapeConnect;
	  var actionWrap = actions[payloadType];
	  var actionInfo = actionWrap.actionInfo;
	  var cptType = (actionInfo.update || 'update').split(':');
	  var updateMethod = cptType.pop();
	  cptType = cptType[0] != null && parseClassType(cptType[0]);
	  this[IN_MAIN_PROCESS] = true;
	  var payloads = [payload];
	  var batched = false; // Batch action

	  if (payload.batch) {
	    batched = true;
	    payloads = zrUtil.map(payload.batch, function (item) {
	      item = zrUtil.defaults(zrUtil.extend({}, item), payload);
	      item.batch = null;
	      return item;
	    });
	  }

	  var eventObjBatch = [];
	  var eventObj;
	  var isHighDown = payloadType === 'highlight' || payloadType === 'downplay';
	  each(payloads, function (batchItem) {
	    // Action can specify the event by return it.
	    eventObj = actionWrap.action(batchItem, this._model, this._api); // Emit event outside

	    eventObj = eventObj || zrUtil.extend({}, batchItem); // Convert type to eventType

	    eventObj.type = actionInfo.event || eventObj.type;
	    eventObjBatch.push(eventObj); // light update does not perform data process, layout and visual.

	    if (isHighDown) {
	      // method, payload, mainType, subType
	      updateDirectly(this, updateMethod, batchItem, 'series');
	    } else if (cptType) {
	      updateDirectly(this, updateMethod, batchItem, cptType.main, cptType.sub);
	    }
	  }, this);

	  if (updateMethod !== 'none' && !isHighDown && !cptType) {
	    // Still dirty
	    if (this[OPTION_UPDATED]) {
	      // FIXME Pass payload ?
	      updateMethods.prepareAndUpdate.call(this, payload);
	      this[OPTION_UPDATED] = false;
	    } else {
	      updateMethods[updateMethod].call(this, payload);
	    }
	  } // Follow the rule of action batch


	  if (batched) {
	    eventObj = {
	      type: actionInfo.event || payloadType,
	      escapeConnect: escapeConnect,
	      batch: eventObjBatch
	    };
	  } else {
	    eventObj = eventObjBatch[0];
	  }

	  this[IN_MAIN_PROCESS] = false;
	  !silent && this._messageCenter.trigger(eventObj.type, eventObj);
	}

	function flushPendingActions(silent) {
	  var pendingActions = this._pendingActions;

	  while (pendingActions.length) {
	    var payload = pendingActions.shift();
	    doDispatchAction.call(this, payload, silent);
	  }
	}

	function triggerUpdatedEvent(silent) {
	  !silent && this.trigger('updated');
	}
	/**
	 * Register event
	 * @method
	 */


	echartsProto.on = createRegisterEventWithLowercaseName('on');
	echartsProto.off = createRegisterEventWithLowercaseName('off');
	echartsProto.one = createRegisterEventWithLowercaseName('one');
	/**
	 * @param {string} methodName
	 * @private
	 */

	function invokeUpdateMethod(methodName, ecModel, payload) {
	  var api = this._api; // Update all components

	  each(this._componentsViews, function (component) {
	    var componentModel = component.__model;
	    component[methodName](componentModel, ecModel, api, payload);
	    updateZ(componentModel, component);
	  }, this); // Upate all charts

	  ecModel.eachSeries(function (seriesModel, idx) {
	    var chart = this._chartsMap[seriesModel.__viewId];
	    chart[methodName](seriesModel, ecModel, api, payload);
	    updateZ(seriesModel, chart);
	    updateProgressiveAndBlend(seriesModel, chart);
	  }, this); // If use hover layer

	  updateHoverLayerStatus(this._zr, ecModel); // Post render

	  each(postUpdateFuncs, function (func) {
	    func(ecModel, api);
	  });
	}
	/**
	 * Prepare view instances of charts and components
	 * @param  {module:echarts/model/Global} ecModel
	 * @private
	 */


	function prepareView(type, ecModel) {
	  var isComponent = type === 'component';
	  var viewList = isComponent ? this._componentsViews : this._chartsViews;
	  var viewMap = isComponent ? this._componentsMap : this._chartsMap;
	  var zr = this._zr;

	  for (var i = 0; i < viewList.length; i++) {
	    viewList[i].__alive = false;
	  }

	  ecModel[isComponent ? 'eachComponent' : 'eachSeries'](function (componentType, model) {
	    if (isComponent) {
	      if (componentType === 'series') {
	        return;
	      }
	    } else {
	      model = componentType;
	    } // Consider: id same and type changed.


	    var viewId = '_ec_' + model.id + '_' + model.type;
	    var view = viewMap[viewId];

	    if (!view) {
	      var classType = parseClassType(model.type);
	      var Clazz = isComponent ? ComponentView.getClass(classType.main, classType.sub) : ChartView.getClass(classType.sub);

	      if (Clazz) {
	        view = new Clazz();
	        view.init(ecModel, this._api);
	        viewMap[viewId] = view;
	        viewList.push(view);
	        zr.add(view.group);
	      } else {
	        // Error
	        return;
	      }
	    }

	    model.__viewId = view.__id = viewId;
	    view.__alive = true;
	    view.__model = model;
	    view.group.__ecComponentInfo = {
	      mainType: model.mainType,
	      index: model.componentIndex
	    };
	  }, this);

	  for (var i = 0; i < viewList.length;) {
	    var view = viewList[i];

	    if (!view.__alive) {
	      zr.remove(view.group);
	      view.dispose(ecModel, this._api);
	      viewList.splice(i, 1);
	      delete viewMap[view.__id];
	      view.__id = view.group.__ecComponentInfo = null;
	    } else {
	      i++;
	    }
	  }
	}
	/**
	 * Processor data in each series
	 *
	 * @param {module:echarts/model/Global} ecModel
	 * @private
	 */


	function processData(ecModel, api) {
	  each(dataProcessorFuncs, function (process) {
	    process.func(ecModel, api);
	  });
	}
	/**
	 * @private
	 */


	function stackSeriesData(ecModel) {
	  var stackedDataMap = {};
	  ecModel.eachSeries(function (series) {
	    var stack = series.get('stack');
	    var data = series.getData();

	    if (stack && data.type === 'list') {
	      var previousStack = stackedDataMap[stack]; // Avoid conflict with Object.prototype

	      if (stackedDataMap.hasOwnProperty(stack) && previousStack) {
	        data.stackedOn = previousStack;
	      }

	      stackedDataMap[stack] = data;
	    }
	  });
	}
	/**
	 * Layout before each chart render there series, special visual encoding stage
	 *
	 * @param {module:echarts/model/Global} ecModel
	 * @private
	 */


	function doLayout(ecModel, payload) {
	  var api = this._api;
	  each(visualFuncs, function (visual) {
	    if (visual.isLayout) {
	      visual.func(ecModel, api, payload);
	    }
	  });
	}
	/**
	 * Encode visual infomation from data after data processing
	 *
	 * @param {module:echarts/model/Global} ecModel
	 * @param {object} layout
	 * @param {boolean} [excludesLayout]
	 * @private
	 */


	function doVisualEncoding(ecModel, payload, excludesLayout) {
	  var api = this._api;
	  ecModel.clearColorPalette();
	  ecModel.eachSeries(function (seriesModel) {
	    seriesModel.clearColorPalette();
	  });
	  each(visualFuncs, function (visual) {
	    (!excludesLayout || !visual.isLayout) && visual.func(ecModel, api, payload);
	  });
	}
	/**
	 * Render each chart and component
	 * @private
	 */


	function doRender(ecModel, payload) {
	  var api = this._api; // Render all components

	  each(this._componentsViews, function (componentView) {
	    var componentModel = componentView.__model;
	    componentView.render(componentModel, ecModel, api, payload);
	    updateZ(componentModel, componentView);
	  }, this);
	  each(this._chartsViews, function (chart) {
	    chart.__alive = false;
	  }, this); // Render all charts

	  ecModel.eachSeries(function (seriesModel, idx) {
	    var chartView = this._chartsMap[seriesModel.__viewId];
	    chartView.__alive = true;
	    chartView.render(seriesModel, ecModel, api, payload);
	    chartView.group.silent = !!seriesModel.get('silent');
	    updateZ(seriesModel, chartView);
	    updateProgressiveAndBlend(seriesModel, chartView);
	  }, this); // If use hover layer

	  updateHoverLayerStatus(this._zr, ecModel); // Remove groups of unrendered charts

	  each(this._chartsViews, function (chart) {
	    if (!chart.__alive) {
	      chart.remove(ecModel, api);
	    }
	  }, this);
	}

	var MOUSE_EVENT_NAMES = ['click', 'dblclick', 'mouseover', 'mouseout', 'mousemove', 'mousedown', 'mouseup', 'globalout', 'contextmenu'];
	/**
	 * @private
	 */

	echartsProto._initEvents = function () {
	  each(MOUSE_EVENT_NAMES, function (eveName) {
	    this._zr.on(eveName, function (e) {
	      var ecModel = this.getModel();
	      var el = e.target;
	      var params; // no e.target when 'globalout'.

	      if (eveName === 'globalout') {
	        params = {};
	      } else if (el && el.dataIndex != null) {
	        var dataModel = el.dataModel || ecModel.getSeriesByIndex(el.seriesIndex);
	        params = dataModel && dataModel.getDataParams(el.dataIndex, el.dataType) || {};
	      } // If element has custom eventData of components
	      else if (el && el.eventData) {
	          params = zrUtil.extend({}, el.eventData);
	        }

	      if (params) {
	        params.event = e;
	        params.type = eveName;
	        this.trigger(eveName, params);
	      }
	    }, this);
	  }, this);
	  each(eventActionMap, function (actionType, eventType) {
	    this._messageCenter.on(eventType, function (event) {
	      this.trigger(eventType, event);
	    }, this);
	  }, this);
	};
	/**
	 * @return {boolean}
	 */


	echartsProto.isDisposed = function () {
	  return this._disposed;
	};
	/**
	 * Clear
	 */


	echartsProto.clear = function () {
	  this.setOption({
	    series: []
	  }, true);
	};
	/**
	 * Dispose instance
	 */


	echartsProto.dispose = function () {
	  if (this._disposed) {
	    return;
	  }

	  this._disposed = true;
	  var api = this._api;
	  var ecModel = this._model;
	  each(this._componentsViews, function (component) {
	    component.dispose(ecModel, api);
	  });
	  each(this._chartsViews, function (chart) {
	    chart.dispose(ecModel, api);
	  }); // Dispose after all views disposed

	  this._zr.dispose();

	  delete instances[this.id];
	};

	zrUtil.mixin(ECharts, Eventful);

	function updateHoverLayerStatus(zr, ecModel) {
	  var storage = zr.storage;
	  var elCount = 0;
	  storage.traverse(function (el) {
	    if (!el.isGroup) {
	      elCount++;
	    }
	  });

	  if (elCount > ecModel.get('hoverLayerThreshold') && !env.node) {
	    storage.traverse(function (el) {
	      if (!el.isGroup) {
	        el.useHoverLayer = true;
	      }
	    });
	  }
	}
	/**
	 * Update chart progressive and blend.
	 * @param {module:echarts/model/Series|module:echarts/model/Component} model
	 * @param {module:echarts/view/Component|module:echarts/view/Chart} view
	 */


	function updateProgressiveAndBlend(seriesModel, chartView) {
	  // Progressive configuration
	  var elCount = 0;
	  chartView.group.traverse(function (el) {
	    if (el.type !== 'group' && !el.ignore) {
	      elCount++;
	    }
	  });
	  var frameDrawNum = +seriesModel.get('progressive');
	  var needProgressive = elCount > seriesModel.get('progressiveThreshold') && frameDrawNum && !env.node;

	  if (needProgressive) {
	    chartView.group.traverse(function (el) {
	      // FIXME marker and other components
	      if (!el.isGroup) {
	        el.progressive = needProgressive ? Math.floor(elCount++ / frameDrawNum) : -1;

	        if (needProgressive) {
	          el.stopAnimation(true);
	        }
	      }
	    });
	  } // Blend configration


	  var blendMode = seriesModel.get('blendMode') || null;
	  chartView.group.traverse(function (el) {
	    // FIXME marker and other components
	    if (!el.isGroup) {
	      el.setStyle('blend', blendMode);
	    }
	  });
	}
	/**
	 * @param {module:echarts/model/Series|module:echarts/model/Component} model
	 * @param {module:echarts/view/Component|module:echarts/view/Chart} view
	 */


	function updateZ(model, view) {
	  var z = model.get('z');
	  var zlevel = model.get('zlevel'); // Set z and zlevel

	  view.group.traverse(function (el) {
	    if (el.type !== 'group') {
	      z != null && (el.z = z);
	      zlevel != null && (el.zlevel = zlevel);
	    }
	  });
	}

	function createExtensionAPI(ecInstance) {
	  var coordSysMgr = ecInstance._coordSysMgr;
	  return zrUtil.extend(new ExtensionAPI(ecInstance), {
	    // Inject methods
	    getCoordinateSystems: zrUtil.bind(coordSysMgr.getCoordinateSystems, coordSysMgr),
	    getComponentByElement: function (el) {
	      while (el) {
	        var modelInfo = el.__ecComponentInfo;

	        if (modelInfo != null) {
	          return ecInstance._model.getComponent(modelInfo.mainType, modelInfo.index);
	        }

	        el = el.parent;
	      }
	    }
	  });
	}
	/**
	 * @type {Object} key: actionType.
	 * @inner
	 */


	var actions = {};
	/**
	 * Map eventType to actionType
	 * @type {Object}
	 */

	var eventActionMap = {};
	/**
	 * Data processor functions of each stage
	 * @type {Array.<Object.<string, Function>>}
	 * @inner
	 */

	var dataProcessorFuncs = [];
	/**
	 * @type {Array.<Function>}
	 * @inner
	 */

	var optionPreprocessorFuncs = [];
	/**
	 * @type {Array.<Function>}
	 * @inner
	 */

	var postUpdateFuncs = [];
	/**
	 * Visual encoding functions of each stage
	 * @type {Array.<Object.<string, Function>>}
	 * @inner
	 */

	var visualFuncs = [];
	/**
	 * Theme storage
	 * @type {Object.<key, Object>}
	 */

	var themeStorage = {};
	/**
	 * Loading effects
	 */

	var loadingEffects = {};
	var instances = {};
	var connectedGroups = {};
	var idBase = new Date() - 0;
	var groupIdBase = new Date() - 0;
	var DOM_ATTRIBUTE_KEY = '_echarts_instance_';
	var mapDataStores = {};

	function enableConnect(chart) {
	  var STATUS_PENDING = 0;
	  var STATUS_UPDATING = 1;
	  var STATUS_UPDATED = 2;
	  var STATUS_KEY = '__connectUpdateStatus';

	  function updateConnectedChartsStatus(charts, status) {
	    for (var i = 0; i < charts.length; i++) {
	      var otherChart = charts[i];
	      otherChart[STATUS_KEY] = status;
	    }
	  }

	  zrUtil.each(eventActionMap, function (actionType, eventType) {
	    chart._messageCenter.on(eventType, function (event) {
	      if (connectedGroups[chart.group] && chart[STATUS_KEY] !== STATUS_PENDING) {
	        if (event && event.escapeConnect) {
	          return;
	        }

	        var action = chart.makeActionFromEvent(event);
	        var otherCharts = [];
	        zrUtil.each(instances, function (otherChart) {
	          if (otherChart !== chart && otherChart.group === chart.group) {
	            otherCharts.push(otherChart);
	          }
	        });
	        updateConnectedChartsStatus(otherCharts, STATUS_PENDING);
	        each(otherCharts, function (otherChart) {
	          if (otherChart[STATUS_KEY] !== STATUS_UPDATING) {
	            otherChart.dispatchAction(action);
	          }
	        });
	        updateConnectedChartsStatus(otherCharts, STATUS_UPDATED);
	      }
	    });
	  });
	}
	/**
	 * @param {HTMLElement} dom
	 * @param {Object} [theme]
	 * @param {Object} opts
	 * @param {number} [opts.devicePixelRatio] Use window.devicePixelRatio by default
	 * @param {string} [opts.renderer] Currently only 'canvas' is supported.
	 * @param {number} [opts.width] Use clientWidth of the input `dom` by default.
	 *                              Can be 'auto' (the same as null/undefined)
	 * @param {number} [opts.height] Use clientHeight of the input `dom` by default.
	 *                               Can be 'auto' (the same as null/undefined)
	 */


	function init(dom, theme, opts) {
	  var existInstance = getInstanceByDom(dom);

	  if (existInstance) {
	    return existInstance;
	  }

	  var chart = new ECharts(dom, theme, opts);
	  chart.id = 'ec_' + idBase++;
	  instances[chart.id] = chart;

	  if (dom.setAttribute) {
	    dom.setAttribute(DOM_ATTRIBUTE_KEY, chart.id);
	  } else {
	    dom[DOM_ATTRIBUTE_KEY] = chart.id;
	  }

	  enableConnect(chart);
	  return chart;
	}
	/**
	 * @return {string|Array.<module:echarts~ECharts>} groupId
	 */


	function connect(groupId) {
	  // Is array of charts
	  if (zrUtil.isArray(groupId)) {
	    var charts = groupId;
	    groupId = null; // If any chart has group

	    zrUtil.each(charts, function (chart) {
	      if (chart.group != null) {
	        groupId = chart.group;
	      }
	    });
	    groupId = groupId || 'g_' + groupIdBase++;
	    zrUtil.each(charts, function (chart) {
	      chart.group = groupId;
	    });
	  }

	  connectedGroups[groupId] = true;
	  return groupId;
	}
	/**
	 * @DEPRECATED
	 * @return {string} groupId
	 */


	function disConnect(groupId) {
	  connectedGroups[groupId] = false;
	}
	/**
	 * @return {string} groupId
	 */


	var disconnect = disConnect;
	/**
	 * Dispose a chart instance
	 * @param  {module:echarts~ECharts|HTMLDomElement|string} chart
	 */

	function dispose(chart) {
	  if (typeof chart === 'string') {
	    chart = instances[chart];
	  } else if (!(chart instanceof ECharts)) {
	    // Try to treat as dom
	    chart = getInstanceByDom(chart);
	  }

	  if (chart instanceof ECharts && !chart.isDisposed()) {
	    chart.dispose();
	  }
	}
	/**
	 * @param  {HTMLElement} dom
	 * @return {echarts~ECharts}
	 */


	function getInstanceByDom(dom) {
	  var key;

	  if (dom.getAttribute) {
	    key = dom.getAttribute(DOM_ATTRIBUTE_KEY);
	  } else {
	    key = dom[DOM_ATTRIBUTE_KEY];
	  }

	  return instances[key];
	}
	/**
	 * @param {string} key
	 * @return {echarts~ECharts}
	 */


	function getInstanceById(key) {
	  return instances[key];
	}
	/**
	 * Register theme
	 */


	function registerTheme(name, theme) {
	  themeStorage[name] = theme;
	}
	/**
	 * Register option preprocessor
	 * @param {Function} preprocessorFunc
	 */


	function registerPreprocessor(preprocessorFunc) {
	  optionPreprocessorFuncs.push(preprocessorFunc);
	}
	/**
	 * @param {number} [priority=1000]
	 * @param {Function} processorFunc
	 */


	function registerProcessor(priority, processorFunc) {
	  if (typeof priority === 'function') {
	    processorFunc = priority;
	    priority = PRIORITY_PROCESSOR_FILTER;
	  }

	  dataProcessorFuncs.push({
	    prio: priority,
	    func: processorFunc
	  });
	}
	/**
	 * Register postUpdater
	 * @param {Function} postUpdateFunc
	 */


	function registerPostUpdate(postUpdateFunc) {
	  postUpdateFuncs.push(postUpdateFunc);
	}
	/**
	 * Usage:
	 * registerAction('someAction', 'someEvent', function () { ... });
	 * registerAction('someAction', function () { ... });
	 * registerAction(
	 *     {type: 'someAction', event: 'someEvent', update: 'updateView'},
	 *     function () { ... }
	 * );
	 *
	 * @param {(string|Object)} actionInfo
	 * @param {string} actionInfo.type
	 * @param {string} [actionInfo.event]
	 * @param {string} [actionInfo.update]
	 * @param {string} [eventName]
	 * @param {Function} action
	 */


	function registerAction(actionInfo, eventName, action) {
	  if (typeof eventName === 'function') {
	    action = eventName;
	    eventName = '';
	  }

	  var actionType = zrUtil.isObject(actionInfo) ? actionInfo.type : [actionInfo, actionInfo = {
	    event: eventName
	  }][0]; // Event name is all lowercase

	  actionInfo.event = (actionInfo.event || actionType).toLowerCase();
	  eventName = actionInfo.event; // Validate action type and event name.

	  zrUtil.assert(ACTION_REG.test(actionType) && ACTION_REG.test(eventName));

	  if (!actions[actionType]) {
	    actions[actionType] = {
	      action: action,
	      actionInfo: actionInfo
	    };
	  }

	  eventActionMap[eventName] = actionType;
	}
	/**
	 * @param {string} type
	 * @param {*} CoordinateSystem
	 */


	function registerCoordinateSystem(type, CoordinateSystem) {
	  CoordinateSystemManager.register(type, CoordinateSystem);
	}
	/**
	 * Get dimensions of specified coordinate system.
	 * @param {string} type
	 * @return {Array.<string|Object>}
	 */


	function getCoordinateSystemDimensions(type) {
	  var coordSysCreator = CoordinateSystemManager.get(type);

	  if (coordSysCreator) {
	    return coordSysCreator.getDimensionsInfo ? coordSysCreator.getDimensionsInfo() : coordSysCreator.dimensions.slice();
	  }
	}
	/**
	 * Layout is a special stage of visual encoding
	 * Most visual encoding like color are common for different chart
	 * But each chart has it's own layout algorithm
	 *
	 * @param {number} [priority=1000]
	 * @param {Function} layoutFunc
	 */


	function registerLayout(priority, layoutFunc) {
	  if (typeof priority === 'function') {
	    layoutFunc = priority;
	    priority = PRIORITY_VISUAL_LAYOUT;
	  }

	  visualFuncs.push({
	    prio: priority,
	    func: layoutFunc,
	    isLayout: true
	  });
	}
	/**
	 * @param {number} [priority=3000]
	 * @param {Function} visualFunc
	 */


	function registerVisual(priority, visualFunc) {
	  if (typeof priority === 'function') {
	    visualFunc = priority;
	    priority = PRIORITY_VISUAL_CHART;
	  }

	  visualFuncs.push({
	    prio: priority,
	    func: visualFunc
	  });
	}
	/**
	 * @param {string} name
	 */


	function registerLoading(name, loadingFx) {
	  loadingEffects[name] = loadingFx;
	}
	/**
	 * @param {Object} opts
	 * @param {string} [superClass]
	 */


	function extendComponentModel(opts
	/*, superClass*/
	) {
	  // var Clazz = ComponentModel;
	  // if (superClass) {
	  //     var classType = parseClassType(superClass);
	  //     Clazz = ComponentModel.getClass(classType.main, classType.sub, true);
	  // }
	  return ComponentModel.extend(opts);
	}
	/**
	 * @param {Object} opts
	 * @param {string} [superClass]
	 */


	function extendComponentView(opts
	/*, superClass*/
	) {
	  // var Clazz = ComponentView;
	  // if (superClass) {
	  //     var classType = parseClassType(superClass);
	  //     Clazz = ComponentView.getClass(classType.main, classType.sub, true);
	  // }
	  return ComponentView.extend(opts);
	}
	/**
	 * @param {Object} opts
	 * @param {string} [superClass]
	 */


	function extendSeriesModel(opts
	/*, superClass*/
	) {
	  // var Clazz = SeriesModel;
	  // if (superClass) {
	  //     superClass = 'series.' + superClass.replace('series.', '');
	  //     var classType = parseClassType(superClass);
	  //     Clazz = ComponentModel.getClass(classType.main, classType.sub, true);
	  // }
	  return SeriesModel.extend(opts);
	}
	/**
	 * @param {Object} opts
	 * @param {string} [superClass]
	 */


	function extendChartView(opts
	/*, superClass*/
	) {
	  // var Clazz = ChartView;
	  // if (superClass) {
	  //     superClass = superClass.replace('series.', '');
	  //     var classType = parseClassType(superClass);
	  //     Clazz = ChartView.getClass(classType.main, true);
	  // }
	  return ChartView.extend(opts);
	}
	/**
	 * ZRender need a canvas context to do measureText.
	 * But in node environment canvas may be created by node-canvas.
	 * So we need to specify how to create a canvas instead of using document.createElement('canvas')
	 *
	 * Be careful of using it in the browser.
	 *
	 * @param {Function} creator
	 * @example
	 *     var Canvas = require('canvas');
	 *     var echarts = require('echarts');
	 *     echarts.setCanvasCreator(function () {
	 *         // Small size is enough.
	 *         return new Canvas(32, 32);
	 *     });
	 */


	function setCanvasCreator(creator) {
	  zrUtil.$override('createCanvas', creator);
	}
	/**
	 * @param {string} mapName
	 * @param {Object|string} geoJson
	 * @param {Object} [specialAreas]
	 *
	 * @example
	 *     $.get('USA.json', function (geoJson) {
	 *         echarts.registerMap('USA', geoJson);
	 *         // Or
	 *         echarts.registerMap('USA', {
	 *             geoJson: geoJson,
	 *             specialAreas: {}
	 *         })
	 *     });
	 */


	function registerMap(mapName, geoJson, specialAreas) {
	  if (geoJson.geoJson && !geoJson.features) {
	    specialAreas = geoJson.specialAreas;
	    geoJson = geoJson.geoJson;
	  }

	  if (typeof geoJson === 'string') {
	    geoJson = typeof JSON !== 'undefined' && JSON.parse ? JSON.parse(geoJson) : new Function('return (' + geoJson + ');')();
	  }

	  mapDataStores[mapName] = {
	    geoJson: geoJson,
	    specialAreas: specialAreas
	  };
	}
	/**
	 * @param {string} mapName
	 * @return {Object}
	 */


	function getMap(mapName) {
	  return mapDataStores[mapName];
	}

	registerVisual(PRIORITY_VISUAL_GLOBAL, seriesColor);
	registerPreprocessor(backwardCompat);
	registerLoading('default', loadingDefault); // Default actions

	registerAction({
	  type: 'highlight',
	  event: 'highlight',
	  update: 'highlight'
	}, zrUtil.noop);
	registerAction({
	  type: 'downplay',
	  event: 'downplay',
	  update: 'downplay'
	}, zrUtil.noop); // For backward compatibility, where the namespace `dataTool` will
	// be mounted on `echarts` is the extension `dataTool` is imported.

	var dataTool = {};
	exports.version = version;
	exports.dependencies = dependencies;
	exports.PRIORITY = PRIORITY;
	exports.init = init;
	exports.connect = connect;
	exports.disConnect = disConnect;
	exports.disconnect = disconnect;
	exports.dispose = dispose;
	exports.getInstanceByDom = getInstanceByDom;
	exports.getInstanceById = getInstanceById;
	exports.registerTheme = registerTheme;
	exports.registerPreprocessor = registerPreprocessor;
	exports.registerProcessor = registerProcessor;
	exports.registerPostUpdate = registerPostUpdate;
	exports.registerAction = registerAction;
	exports.registerCoordinateSystem = registerCoordinateSystem;
	exports.getCoordinateSystemDimensions = getCoordinateSystemDimensions;
	exports.registerLayout = registerLayout;
	exports.registerVisual = registerVisual;
	exports.registerLoading = registerLoading;
	exports.extendComponentModel = extendComponentModel;
	exports.extendComponentView = extendComponentView;
	exports.extendSeriesModel = extendSeriesModel;
	exports.extendChartView = extendChartView;
	exports.setCanvasCreator = setCanvasCreator;
	exports.registerMap = registerMap;
	exports.getMap = getMap;
	exports.dataTool = dataTool;
	var ___ec_export = __webpack_require__(262);
	(function () {
	    for (var key in ___ec_export) {
	        if (___ec_export.hasOwnProperty(key)) {
	            exports[key] = ___ec_export[key];
	        }
	    }
	})();

/***/ },
/* 162 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {// (1) The code `if (__DEV__) ...` can be removed by build tool.
	// (2) If intend to use `__DEV__`, this module should be imported. Use a global
	// variable `__DEV__` may cause that miss the declaration (see #6535), or the
	// declaration is behind of the using position (for example in `Model.extent`,
	// And tools like rollup can not analysis the dependency if not import).
	var dev; // In browser

	if (typeof window !== 'undefined') {
	  dev = window.__DEV__;
	} // In node
	else if (typeof global !== 'undefined') {
	    dev = global.__DEV__;
	  }

	if (typeof dev === 'undefined') {
	  dev = true;
	}

	var __DEV__ = dev;
	exports.__DEV__ = __DEV__;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	var guid = __webpack_require__(164);

	var env = __webpack_require__(165);

	var zrUtil = __webpack_require__(166);

	var Handler = __webpack_require__(167);

	var Storage = __webpack_require__(171);

	var Painter = __webpack_require__(186);

	var Animation = __webpack_require__(198);

	var HandlerProxy = __webpack_require__(200);

	/*!
	* ZRender, a high performance 2d drawing library.
	*
	* Copyright (c) 2013, Baidu Inc.
	* All rights reserved.
	*
	* LICENSE
	* https://github.com/ecomfe/zrender/blob/master/LICENSE.txt
	*/
	var useVML = !env.canvasSupported;
	var painterCtors = {
	  canvas: Painter
	};
	var instances = {}; // ZRender实例map索引

	/**
	 * @type {string}
	 */

	var version = '3.7.4';
	/**
	 * Initializing a zrender instance
	 * @param {HTMLElement} dom
	 * @param {Object} opts
	 * @param {string} [opts.renderer='canvas'] 'canvas' or 'svg'
	 * @param {number} [opts.devicePixelRatio]
	 * @param {number|string} [opts.width] Can be 'auto' (the same as null/undefined)
	 * @param {number|string} [opts.height] Can be 'auto' (the same as null/undefined)
	 * @return {module:zrender/ZRender}
	 */

	function init(dom, opts) {
	  var zr = new ZRender(guid(), dom, opts);
	  instances[zr.id] = zr;
	  return zr;
	}
	/**
	 * Dispose zrender instance
	 * @param {module:zrender/ZRender} zr
	 */


	function dispose(zr) {
	  if (zr) {
	    zr.dispose();
	  } else {
	    for (var key in instances) {
	      if (instances.hasOwnProperty(key)) {
	        instances[key].dispose();
	      }
	    }

	    instances = {};
	  }

	  return this;
	}
	/**
	 * Get zrender instance by id
	 * @param {string} id zrender instance id
	 * @return {module:zrender/ZRender}
	 */


	function getInstance(id) {
	  return instances[id];
	}

	function registerPainter(name, Ctor) {
	  painterCtors[name] = Ctor;
	}

	function delInstance(id) {
	  delete instances[id];
	}
	/**
	 * @module zrender/ZRender
	 */

	/**
	 * @constructor
	 * @alias module:zrender/ZRender
	 * @param {string} id
	 * @param {HTMLElement} dom
	 * @param {Object} opts
	 * @param {string} [opts.renderer='canvas'] 'canvas' or 'svg'
	 * @param {number} [opts.devicePixelRatio]
	 * @param {number} [opts.width] Can be 'auto' (the same as null/undefined)
	 * @param {number} [opts.height] Can be 'auto' (the same as null/undefined)
	 */


	var ZRender = function (id, dom, opts) {
	  opts = opts || {};
	  /**
	   * @type {HTMLDomElement}
	   */

	  this.dom = dom;
	  /**
	   * @type {string}
	   */

	  this.id = id;
	  var self = this;
	  var storage = new Storage();
	  var rendererType = opts.renderer; // TODO WebGL

	  if (useVML) {
	    if (!painterCtors.vml) {
	      throw new Error('You need to require \'zrender/vml/vml\' to support IE8');
	    }

	    rendererType = 'vml';
	  } else if (!rendererType || !painterCtors[rendererType]) {
	    rendererType = 'canvas';
	  }

	  var painter = new painterCtors[rendererType](dom, storage, opts);
	  this.storage = storage;
	  this.painter = painter;
	  var handerProxy = !env.node ? new HandlerProxy(painter.getViewportRoot()) : null;
	  this.handler = new Handler(storage, painter, handerProxy, painter.root);
	  /**
	   * @type {module:zrender/animation/Animation}
	   */

	  this.animation = new Animation({
	    stage: {
	      update: zrUtil.bind(this.flush, this)
	    }
	  });
	  this.animation.start();
	  /**
	   * @type {boolean}
	   * @private
	   */

	  this._needsRefresh; // 修改 storage.delFromStorage, 每次删除元素之前删除动画
	  // FIXME 有点ugly

	  var oldDelFromStorage = storage.delFromStorage;
	  var oldAddToStorage = storage.addToStorage;

	  storage.delFromStorage = function (el) {
	    oldDelFromStorage.call(storage, el);
	    el && el.removeSelfFromZr(self);
	  };

	  storage.addToStorage = function (el) {
	    oldAddToStorage.call(storage, el);
	    el.addSelfToZr(self);
	  };
	};

	ZRender.prototype = {
	  constructor: ZRender,

	  /**
	   * 获取实例唯一标识
	   * @return {string}
	   */
	  getId: function () {
	    return this.id;
	  },

	  /**
	   * 添加元素
	   * @param  {module:zrender/Element} el
	   */
	  add: function (el) {
	    this.storage.addRoot(el);
	    this._needsRefresh = true;
	  },

	  /**
	   * 删除元素
	   * @param  {module:zrender/Element} el
	   */
	  remove: function (el) {
	    this.storage.delRoot(el);
	    this._needsRefresh = true;
	  },

	  /**
	   * Change configuration of layer
	   * @param {string} zLevel
	   * @param {Object} config
	   * @param {string} [config.clearColor=0] Clear color
	   * @param {string} [config.motionBlur=false] If enable motion blur
	   * @param {number} [config.lastFrameAlpha=0.7] Motion blur factor. Larger value cause longer trailer
	  */
	  configLayer: function (zLevel, config) {
	    this.painter.configLayer(zLevel, config);
	    this._needsRefresh = true;
	  },

	  /**
	   * Repaint the canvas immediately
	   */
	  refreshImmediately: function () {
	    // var start = new Date();
	    // Clear needsRefresh ahead to avoid something wrong happens in refresh
	    // Or it will cause zrender refreshes again and again.
	    this._needsRefresh = false;
	    this.painter.refresh();
	    /**
	     * Avoid trigger zr.refresh in Element#beforeUpdate hook
	     */

	    this._needsRefresh = false; // var end = new Date();
	    // var log = document.getElementById('log');
	    // if (log) {
	    //     log.innerHTML = log.innerHTML + '<br>' + (end - start);
	    // }
	  },

	  /**
	   * Mark and repaint the canvas in the next frame of browser
	   */
	  refresh: function () {
	    this._needsRefresh = true;
	  },

	  /**
	   * Perform all refresh
	   */
	  flush: function () {
	    if (this._needsRefresh) {
	      this.refreshImmediately();
	    }

	    if (this._needsRefreshHover) {
	      this.refreshHoverImmediately();
	    }
	  },

	  /**
	   * Add element to hover layer
	   * @param  {module:zrender/Element} el
	   * @param {Object} style
	   */
	  addHover: function (el, style) {
	    if (this.painter.addHover) {
	      this.painter.addHover(el, style);
	      this.refreshHover();
	    }
	  },

	  /**
	   * Add element from hover layer
	   * @param  {module:zrender/Element} el
	   */
	  removeHover: function (el) {
	    if (this.painter.removeHover) {
	      this.painter.removeHover(el);
	      this.refreshHover();
	    }
	  },

	  /**
	   * Clear all hover elements in hover layer
	   * @param  {module:zrender/Element} el
	   */
	  clearHover: function () {
	    if (this.painter.clearHover) {
	      this.painter.clearHover();
	      this.refreshHover();
	    }
	  },

	  /**
	   * Refresh hover in next frame
	   */
	  refreshHover: function () {
	    this._needsRefreshHover = true;
	  },

	  /**
	   * Refresh hover immediately
	   */
	  refreshHoverImmediately: function () {
	    this._needsRefreshHover = false;
	    this.painter.refreshHover && this.painter.refreshHover();
	  },

	  /**
	   * Resize the canvas.
	   * Should be invoked when container size is changed
	   * @param {Object} [opts]
	   * @param {number|string} [opts.width] Can be 'auto' (the same as null/undefined)
	   * @param {number|string} [opts.height] Can be 'auto' (the same as null/undefined)
	   */
	  resize: function (opts) {
	    opts = opts || {};
	    this.painter.resize(opts.width, opts.height);
	    this.handler.resize();
	  },

	  /**
	   * Stop and clear all animation immediately
	   */
	  clearAnimation: function () {
	    this.animation.clear();
	  },

	  /**
	   * Get container width
	   */
	  getWidth: function () {
	    return this.painter.getWidth();
	  },

	  /**
	   * Get container height
	   */
	  getHeight: function () {
	    return this.painter.getHeight();
	  },

	  /**
	   * Export the canvas as Base64 URL
	   * @param {string} type
	   * @param {string} [backgroundColor='#fff']
	   * @return {string} Base64 URL
	   */
	  // toDataURL: function(type, backgroundColor) {
	  //     return this.painter.getRenderedCanvas({
	  //         backgroundColor: backgroundColor
	  //     }).toDataURL(type);
	  // },

	  /**
	   * Converting a path to image.
	   * It has much better performance of drawing image rather than drawing a vector path.
	   * @param {module:zrender/graphic/Path} e
	   * @param {number} width
	   * @param {number} height
	   */
	  pathToImage: function (e, dpr) {
	    return this.painter.pathToImage(e, dpr);
	  },

	  /**
	   * Set default cursor
	   * @param {string} [cursorStyle='default'] 例如 crosshair
	   */
	  setCursorStyle: function (cursorStyle) {
	    this.handler.setCursorStyle(cursorStyle);
	  },

	  /**
	   * Find hovered element
	   * @param {number} x
	   * @param {number} y
	   * @return {Object} {target, topTarget}
	   */
	  findHover: function (x, y) {
	    return this.handler.findHover(x, y);
	  },

	  /**
	   * Bind event
	   *
	   * @param {string} eventName Event name
	   * @param {Function} eventHandler Handler function
	   * @param {Object} [context] Context object
	   */
	  on: function (eventName, eventHandler, context) {
	    this.handler.on(eventName, eventHandler, context);
	  },

	  /**
	   * Unbind event
	   * @param {string} eventName Event name
	   * @param {Function} [eventHandler] Handler function
	   */
	  off: function (eventName, eventHandler) {
	    this.handler.off(eventName, eventHandler);
	  },

	  /**
	   * Trigger event manually
	   *
	   * @param {string} eventName Event name
	   * @param {event=} event Event object
	   */
	  trigger: function (eventName, event) {
	    this.handler.trigger(eventName, event);
	  },

	  /**
	   * Clear all objects and the canvas.
	   */
	  clear: function () {
	    this.storage.delRoot();
	    this.painter.clear();
	  },

	  /**
	   * Dispose self.
	   */
	  dispose: function () {
	    this.animation.stop();
	    this.clear();
	    this.storage.dispose();
	    this.painter.dispose();
	    this.handler.dispose();
	    this.animation = this.storage = this.painter = this.handler = null;
	    delInstance(this.id);
	  }
	};
	exports.version = version;
	exports.init = init;
	exports.dispose = dispose;
	exports.getInstance = getInstance;
	exports.registerPainter = registerPainter;

/***/ },
/* 164 */
/***/ function(module, exports) {

	/**
	 * zrender: 生成唯一id
	 *
	 * @author errorrik (errorrik@gmail.com)
	 */
	var idStart = 0x0907;

	function _default() {
	  return idStart++;
	}

	module.exports = _default;

/***/ },
/* 165 */
/***/ function(module, exports) {

	/**
	 * echarts设备环境识别
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author firede[firede@firede.us]
	 * @desc thanks zepto.
	 */
	var env = {};

	if (typeof navigator === 'undefined') {
	  // In node
	  env = {
	    browser: {},
	    os: {},
	    node: true,
	    // Assume canvas is supported
	    canvasSupported: true,
	    svgSupported: true
	  };
	} else {
	  env = detect(navigator.userAgent);
	}

	var _default = env; // Zepto.js
	// (c) 2010-2013 Thomas Fuchs
	// Zepto.js may be freely distributed under the MIT license.

	function detect(ua) {
	  var os = {};
	  var browser = {}; // var webkit = ua.match(/Web[kK]it[\/]{0,1}([\d.]+)/);
	  // var android = ua.match(/(Android);?[\s\/]+([\d.]+)?/);
	  // var ipad = ua.match(/(iPad).*OS\s([\d_]+)/);
	  // var ipod = ua.match(/(iPod)(.*OS\s([\d_]+))?/);
	  // var iphone = !ipad && ua.match(/(iPhone\sOS)\s([\d_]+)/);
	  // var webos = ua.match(/(webOS|hpwOS)[\s\/]([\d.]+)/);
	  // var touchpad = webos && ua.match(/TouchPad/);
	  // var kindle = ua.match(/Kindle\/([\d.]+)/);
	  // var silk = ua.match(/Silk\/([\d._]+)/);
	  // var blackberry = ua.match(/(BlackBerry).*Version\/([\d.]+)/);
	  // var bb10 = ua.match(/(BB10).*Version\/([\d.]+)/);
	  // var rimtabletos = ua.match(/(RIM\sTablet\sOS)\s([\d.]+)/);
	  // var playbook = ua.match(/PlayBook/);
	  // var chrome = ua.match(/Chrome\/([\d.]+)/) || ua.match(/CriOS\/([\d.]+)/);

	  var firefox = ua.match(/Firefox\/([\d.]+)/); // var safari = webkit && ua.match(/Mobile\//) && !chrome;
	  // var webview = ua.match(/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/) && !chrome;

	  var ie = ua.match(/MSIE\s([\d.]+)/) // IE 11 Trident/7.0; rv:11.0
	  || ua.match(/Trident\/.+?rv:(([\d.]+))/);
	  var edge = ua.match(/Edge\/([\d.]+)/); // IE 12 and 12+

	  var weChat = /micromessenger/i.test(ua); // Todo: clean this up with a better OS/browser seperation:
	  // - discern (more) between multiple browsers on android
	  // - decide if kindle fire in silk mode is android or not
	  // - Firefox on Android doesn't specify the Android version
	  // - possibly devide in os, device and browser hashes
	  // if (browser.webkit = !!webkit) browser.version = webkit[1];
	  // if (android) os.android = true, os.version = android[2];
	  // if (iphone && !ipod) os.ios = os.iphone = true, os.version = iphone[2].replace(/_/g, '.');
	  // if (ipad) os.ios = os.ipad = true, os.version = ipad[2].replace(/_/g, '.');
	  // if (ipod) os.ios = os.ipod = true, os.version = ipod[3] ? ipod[3].replace(/_/g, '.') : null;
	  // if (webos) os.webos = true, os.version = webos[2];
	  // if (touchpad) os.touchpad = true;
	  // if (blackberry) os.blackberry = true, os.version = blackberry[2];
	  // if (bb10) os.bb10 = true, os.version = bb10[2];
	  // if (rimtabletos) os.rimtabletos = true, os.version = rimtabletos[2];
	  // if (playbook) browser.playbook = true;
	  // if (kindle) os.kindle = true, os.version = kindle[1];
	  // if (silk) browser.silk = true, browser.version = silk[1];
	  // if (!silk && os.android && ua.match(/Kindle Fire/)) browser.silk = true;
	  // if (chrome) browser.chrome = true, browser.version = chrome[1];

	  if (firefox) {
	    browser.firefox = true;
	    browser.version = firefox[1];
	  } // if (safari && (ua.match(/Safari/) || !!os.ios)) browser.safari = true;
	  // if (webview) browser.webview = true;


	  if (ie) {
	    browser.ie = true;
	    browser.version = ie[1];
	  }

	  if (edge) {
	    browser.edge = true;
	    browser.version = edge[1];
	  } // It is difficult to detect WeChat in Win Phone precisely, because ua can
	  // not be set on win phone. So we do not consider Win Phone.


	  if (weChat) {
	    browser.weChat = true;
	  } // os.tablet = !!(ipad || playbook || (android && !ua.match(/Mobile/)) ||
	  //     (firefox && ua.match(/Tablet/)) || (ie && !ua.match(/Phone/) && ua.match(/Touch/)));
	  // os.phone  = !!(!os.tablet && !os.ipod && (android || iphone || webos ||
	  //     (chrome && ua.match(/Android/)) || (chrome && ua.match(/CriOS\/([\d.]+)/)) ||
	  //     (firefox && ua.match(/Mobile/)) || (ie && ua.match(/Touch/))));


	  return {
	    browser: browser,
	    os: os,
	    node: false,
	    // 原生canvas支持，改极端点了
	    // canvasSupported : !(browser.ie && parseFloat(browser.version) < 9)
	    canvasSupported: !!document.createElement('canvas').getContext,
	    svgSupported: typeof SVGRect !== 'undefined',
	    // @see <http://stackoverflow.com/questions/4817029/whats-the-best-way-to-detect-a-touch-screen-device-using-javascript>
	    // works on most browsers
	    // IE10/11 does not support touch event, and MS Edge supports them but not by
	    // default, so we dont check navigator.maxTouchPoints for them here.
	    touchEventsSupported: 'ontouchstart' in window && !browser.ie && !browser.edge,
	    // <http://caniuse.com/#search=pointer%20event>.
	    pointerEventsSupported: 'onpointerdown' in window // Firefox supports pointer but not by default, only MS browsers are reliable on pointer
	    // events currently. So we dont use that on other browsers unless tested sufficiently.
	    // Although IE 10 supports pointer event, it use old style and is different from the
	    // standard. So we exclude that. (IE 10 is hardly used on touch device)
	    && (browser.edge || browser.ie && browser.version >= 11)
	  };
	}

	module.exports = _default;

/***/ },
/* 166 */
/***/ function(module, exports) {

	/**
	 * @module zrender/core/util
	 */
	// 用于处理merge时无法遍历Date等对象的问题
	var BUILTIN_OBJECT = {
	  '[object Function]': 1,
	  '[object RegExp]': 1,
	  '[object Date]': 1,
	  '[object Error]': 1,
	  '[object CanvasGradient]': 1,
	  '[object CanvasPattern]': 1,
	  // For node-canvas
	  '[object Image]': 1,
	  '[object Canvas]': 1
	};
	var TYPED_ARRAY = {
	  '[object Int8Array]': 1,
	  '[object Uint8Array]': 1,
	  '[object Uint8ClampedArray]': 1,
	  '[object Int16Array]': 1,
	  '[object Uint16Array]': 1,
	  '[object Int32Array]': 1,
	  '[object Uint32Array]': 1,
	  '[object Float32Array]': 1,
	  '[object Float64Array]': 1
	};
	var objToString = Object.prototype.toString;
	var arrayProto = Array.prototype;
	var nativeForEach = arrayProto.forEach;
	var nativeFilter = arrayProto.filter;
	var nativeSlice = arrayProto.slice;
	var nativeMap = arrayProto.map;
	var nativeReduce = arrayProto.reduce; // Avoid assign to an exported variable, for transforming to cjs.

	var methods = {};

	function $override(name, fn) {
	  methods[name] = fn;
	}
	/**
	 * Those data types can be cloned:
	 *     Plain object, Array, TypedArray, number, string, null, undefined.
	 * Those data types will be assgined using the orginal data:
	 *     BUILTIN_OBJECT
	 * Instance of user defined class will be cloned to a plain object, without
	 * properties in prototype.
	 * Other data types is not supported (not sure what will happen).
	 *
	 * Caution: do not support clone Date, for performance consideration.
	 * (There might be a large number of date in `series.data`).
	 * So date should not be modified in and out of echarts.
	 *
	 * @param {*} source
	 * @return {*} new
	 */


	function clone(source) {
	  if (source == null || typeof source != 'object') {
	    return source;
	  }

	  var result = source;
	  var typeStr = objToString.call(source);

	  if (typeStr === '[object Array]') {
	    result = [];

	    for (var i = 0, len = source.length; i < len; i++) {
	      result[i] = clone(source[i]);
	    }
	  } else if (TYPED_ARRAY[typeStr]) {
	    var Ctor = source.constructor;

	    if (source.constructor.from) {
	      result = Ctor.from(source);
	    } else {
	      result = new Ctor(source.length);

	      for (var i = 0, len = source.length; i < len; i++) {
	        result[i] = clone(source[i]);
	      }
	    }
	  } else if (!BUILTIN_OBJECT[typeStr] && !isPrimitive(source) && !isDom(source)) {
	    result = {};

	    for (var key in source) {
	      if (source.hasOwnProperty(key)) {
	        result[key] = clone(source[key]);
	      }
	    }
	  }

	  return result;
	}
	/**
	 * @memberOf module:zrender/core/util
	 * @param {*} target
	 * @param {*} source
	 * @param {boolean} [overwrite=false]
	 */


	function merge(target, source, overwrite) {
	  // We should escapse that source is string
	  // and enter for ... in ...
	  if (!isObject(source) || !isObject(target)) {
	    return overwrite ? clone(source) : target;
	  }

	  for (var key in source) {
	    if (source.hasOwnProperty(key)) {
	      var targetProp = target[key];
	      var sourceProp = source[key];

	      if (isObject(sourceProp) && isObject(targetProp) && !isArray(sourceProp) && !isArray(targetProp) && !isDom(sourceProp) && !isDom(targetProp) && !isBuiltInObject(sourceProp) && !isBuiltInObject(targetProp) && !isPrimitive(sourceProp) && !isPrimitive(targetProp)) {
	        // 如果需要递归覆盖，就递归调用merge
	        merge(targetProp, sourceProp, overwrite);
	      } else if (overwrite || !(key in target)) {
	        // 否则只处理overwrite为true，或者在目标对象中没有此属性的情况
	        // NOTE，在 target[key] 不存在的时候也是直接覆盖
	        target[key] = clone(source[key], true);
	      }
	    }
	  }

	  return target;
	}
	/**
	 * @param {Array} targetAndSources The first item is target, and the rests are source.
	 * @param {boolean} [overwrite=false]
	 * @return {*} target
	 */


	function mergeAll(targetAndSources, overwrite) {
	  var result = targetAndSources[0];

	  for (var i = 1, len = targetAndSources.length; i < len; i++) {
	    result = merge(result, targetAndSources[i], overwrite);
	  }

	  return result;
	}
	/**
	 * @param {*} target
	 * @param {*} source
	 * @memberOf module:zrender/core/util
	 */


	function extend(target, source) {
	  for (var key in source) {
	    if (source.hasOwnProperty(key)) {
	      target[key] = source[key];
	    }
	  }

	  return target;
	}
	/**
	 * @param {*} target
	 * @param {*} source
	 * @param {boolean} [overlay=false]
	 * @memberOf module:zrender/core/util
	 */


	function defaults(target, source, overlay) {
	  for (var key in source) {
	    if (source.hasOwnProperty(key) && (overlay ? source[key] != null : target[key] == null)) {
	      target[key] = source[key];
	    }
	  }

	  return target;
	}

	var createCanvas = function () {
	  return methods.createCanvas();
	};

	methods.createCanvas = function () {
	  return document.createElement('canvas');
	}; // FIXME


	var _ctx;

	function getContext() {
	  if (!_ctx) {
	    // Use util.createCanvas instead of createCanvas
	    // because createCanvas may be overwritten in different environment
	    _ctx = createCanvas().getContext('2d');
	  }

	  return _ctx;
	}
	/**
	 * 查询数组中元素的index
	 * @memberOf module:zrender/core/util
	 */


	function indexOf(array, value) {
	  if (array) {
	    if (array.indexOf) {
	      return array.indexOf(value);
	    }

	    for (var i = 0, len = array.length; i < len; i++) {
	      if (array[i] === value) {
	        return i;
	      }
	    }
	  }

	  return -1;
	}
	/**
	 * 构造类继承关系
	 *
	 * @memberOf module:zrender/core/util
	 * @param {Function} clazz 源类
	 * @param {Function} baseClazz 基类
	 */


	function inherits(clazz, baseClazz) {
	  var clazzPrototype = clazz.prototype;

	  function F() {}

	  F.prototype = baseClazz.prototype;
	  clazz.prototype = new F();

	  for (var prop in clazzPrototype) {
	    clazz.prototype[prop] = clazzPrototype[prop];
	  }

	  clazz.prototype.constructor = clazz;
	  clazz.superClass = baseClazz;
	}
	/**
	 * @memberOf module:zrender/core/util
	 * @param {Object|Function} target
	 * @param {Object|Function} sorce
	 * @param {boolean} overlay
	 */


	function mixin(target, source, overlay) {
	  target = 'prototype' in target ? target.prototype : target;
	  source = 'prototype' in source ? source.prototype : source;
	  defaults(target, source, overlay);
	}
	/**
	 * Consider typed array.
	 * @param {Array|TypedArray} data
	 */


	function isArrayLike(data) {
	  if (!data) {
	    return;
	  }

	  if (typeof data == 'string') {
	    return false;
	  }

	  return typeof data.length == 'number';
	}
	/**
	 * 数组或对象遍历
	 * @memberOf module:zrender/core/util
	 * @param {Object|Array} obj
	 * @param {Function} cb
	 * @param {*} [context]
	 */


	function each(obj, cb, context) {
	  if (!(obj && cb)) {
	    return;
	  }

	  if (obj.forEach && obj.forEach === nativeForEach) {
	    obj.forEach(cb, context);
	  } else if (obj.length === +obj.length) {
	    for (var i = 0, len = obj.length; i < len; i++) {
	      cb.call(context, obj[i], i, obj);
	    }
	  } else {
	    for (var key in obj) {
	      if (obj.hasOwnProperty(key)) {
	        cb.call(context, obj[key], key, obj);
	      }
	    }
	  }
	}
	/**
	 * 数组映射
	 * @memberOf module:zrender/core/util
	 * @param {Array} obj
	 * @param {Function} cb
	 * @param {*} [context]
	 * @return {Array}
	 */


	function map(obj, cb, context) {
	  if (!(obj && cb)) {
	    return;
	  }

	  if (obj.map && obj.map === nativeMap) {
	    return obj.map(cb, context);
	  } else {
	    var result = [];

	    for (var i = 0, len = obj.length; i < len; i++) {
	      result.push(cb.call(context, obj[i], i, obj));
	    }

	    return result;
	  }
	}
	/**
	 * @memberOf module:zrender/core/util
	 * @param {Array} obj
	 * @param {Function} cb
	 * @param {Object} [memo]
	 * @param {*} [context]
	 * @return {Array}
	 */


	function reduce(obj, cb, memo, context) {
	  if (!(obj && cb)) {
	    return;
	  }

	  if (obj.reduce && obj.reduce === nativeReduce) {
	    return obj.reduce(cb, memo, context);
	  } else {
	    for (var i = 0, len = obj.length; i < len; i++) {
	      memo = cb.call(context, memo, obj[i], i, obj);
	    }

	    return memo;
	  }
	}
	/**
	 * 数组过滤
	 * @memberOf module:zrender/core/util
	 * @param {Array} obj
	 * @param {Function} cb
	 * @param {*} [context]
	 * @return {Array}
	 */


	function filter(obj, cb, context) {
	  if (!(obj && cb)) {
	    return;
	  }

	  if (obj.filter && obj.filter === nativeFilter) {
	    return obj.filter(cb, context);
	  } else {
	    var result = [];

	    for (var i = 0, len = obj.length; i < len; i++) {
	      if (cb.call(context, obj[i], i, obj)) {
	        result.push(obj[i]);
	      }
	    }

	    return result;
	  }
	}
	/**
	 * 数组项查找
	 * @memberOf module:zrender/core/util
	 * @param {Array} obj
	 * @param {Function} cb
	 * @param {*} [context]
	 * @return {*}
	 */


	function find(obj, cb, context) {
	  if (!(obj && cb)) {
	    return;
	  }

	  for (var i = 0, len = obj.length; i < len; i++) {
	    if (cb.call(context, obj[i], i, obj)) {
	      return obj[i];
	    }
	  }
	}
	/**
	 * @memberOf module:zrender/core/util
	 * @param {Function} func
	 * @param {*} context
	 * @return {Function}
	 */


	function bind(func, context) {
	  var args = nativeSlice.call(arguments, 2);
	  return function () {
	    return func.apply(context, args.concat(nativeSlice.call(arguments)));
	  };
	}
	/**
	 * @memberOf module:zrender/core/util
	 * @param {Function} func
	 * @return {Function}
	 */


	function curry(func) {
	  var args = nativeSlice.call(arguments, 1);
	  return function () {
	    return func.apply(this, args.concat(nativeSlice.call(arguments)));
	  };
	}
	/**
	 * @memberOf module:zrender/core/util
	 * @param {*} value
	 * @return {boolean}
	 */


	function isArray(value) {
	  return objToString.call(value) === '[object Array]';
	}
	/**
	 * @memberOf module:zrender/core/util
	 * @param {*} value
	 * @return {boolean}
	 */


	function isFunction(value) {
	  return typeof value === 'function';
	}
	/**
	 * @memberOf module:zrender/core/util
	 * @param {*} value
	 * @return {boolean}
	 */


	function isString(value) {
	  return objToString.call(value) === '[object String]';
	}
	/**
	 * @memberOf module:zrender/core/util
	 * @param {*} value
	 * @return {boolean}
	 */


	function isObject(value) {
	  // Avoid a V8 JIT bug in Chrome 19-20.
	  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	  var type = typeof value;
	  return type === 'function' || !!value && type == 'object';
	}
	/**
	 * @memberOf module:zrender/core/util
	 * @param {*} value
	 * @return {boolean}
	 */


	function isBuiltInObject(value) {
	  return !!BUILTIN_OBJECT[objToString.call(value)];
	}
	/**
	 * @memberOf module:zrender/core/util
	 * @param {*} value
	 * @return {boolean}
	 */


	function isDom(value) {
	  return typeof value === 'object' && typeof value.nodeType === 'number' && typeof value.ownerDocument === 'object';
	}
	/**
	 * Whether is exactly NaN. Notice isNaN('a') returns true.
	 * @param {*} value
	 * @return {boolean}
	 */


	function eqNaN(value) {
	  return value !== value;
	}
	/**
	 * If value1 is not null, then return value1, otherwise judget rest of values.
	 * Low performance.
	 * @memberOf module:zrender/core/util
	 * @return {*} Final value
	 */


	function retrieve(values) {
	  for (var i = 0, len = arguments.length; i < len; i++) {
	    if (arguments[i] != null) {
	      return arguments[i];
	    }
	  }
	}

	function retrieve2(value0, value1) {
	  return value0 != null ? value0 : value1;
	}

	function retrieve3(value0, value1, value2) {
	  return value0 != null ? value0 : value1 != null ? value1 : value2;
	}
	/**
	 * @memberOf module:zrender/core/util
	 * @param {Array} arr
	 * @param {number} startIndex
	 * @param {number} endIndex
	 * @return {Array}
	 */


	function slice() {
	  return Function.call.apply(nativeSlice, arguments);
	}
	/**
	 * Normalize css liked array configuration
	 * e.g.
	 *  3 => [3, 3, 3, 3]
	 *  [4, 2] => [4, 2, 4, 2]
	 *  [4, 3, 2] => [4, 3, 2, 3]
	 * @param {number|Array.<number>} val
	 * @return {Array.<number>}
	 */


	function normalizeCssArray(val) {
	  if (typeof val === 'number') {
	    return [val, val, val, val];
	  }

	  var len = val.length;

	  if (len === 2) {
	    // vertical | horizontal
	    return [val[0], val[1], val[0], val[1]];
	  } else if (len === 3) {
	    // top | horizontal | bottom
	    return [val[0], val[1], val[2], val[1]];
	  }

	  return val;
	}
	/**
	 * @memberOf module:zrender/core/util
	 * @param {boolean} condition
	 * @param {string} message
	 */


	function assert(condition, message) {
	  if (!condition) {
	    throw new Error(message);
	  }
	}

	var primitiveKey = '__ec_primitive__';
	/**
	 * Set an object as primitive to be ignored traversing children in clone or merge
	 */

	function setAsPrimitive(obj) {
	  obj[primitiveKey] = true;
	}

	function isPrimitive(obj) {
	  return obj[primitiveKey];
	}
	/**
	 * @constructor
	 * @param {Object} obj Only apply `ownProperty`.
	 */


	function HashMap(obj) {
	  obj && each(obj, function (value, key) {
	    this.set(key, value);
	  }, this);
	} // Add prefix to avoid conflict with Object.prototype.


	var HASH_MAP_PREFIX = '_ec_';
	var HASH_MAP_PREFIX_LENGTH = 4;
	HashMap.prototype = {
	  constructor: HashMap,
	  // Do not provide `has` method to avoid defining what is `has`.
	  // (We usually treat `null` and `undefined` as the same, different
	  // from ES6 Map).
	  get: function (key) {
	    return this[HASH_MAP_PREFIX + key];
	  },
	  set: function (key, value) {
	    this[HASH_MAP_PREFIX + key] = value; // Comparing with invocation chaining, `return value` is more commonly
	    // used in this case: `var someVal = map.set('a', genVal());`

	    return value;
	  },
	  // Although util.each can be performed on this hashMap directly, user
	  // should not use the exposed keys, who are prefixed.
	  each: function (cb, context) {
	    context !== void 0 && (cb = bind(cb, context));

	    for (var prefixedKey in this) {
	      this.hasOwnProperty(prefixedKey) && cb(this[prefixedKey], prefixedKey.slice(HASH_MAP_PREFIX_LENGTH));
	    }
	  },
	  // Do not use this method if performance sensitive.
	  removeKey: function (key) {
	    delete this[HASH_MAP_PREFIX + key];
	  }
	};

	function createHashMap(obj) {
	  return new HashMap(obj);
	}

	function noop() {}

	exports.$override = $override;
	exports.clone = clone;
	exports.merge = merge;
	exports.mergeAll = mergeAll;
	exports.extend = extend;
	exports.defaults = defaults;
	exports.createCanvas = createCanvas;
	exports.getContext = getContext;
	exports.indexOf = indexOf;
	exports.inherits = inherits;
	exports.mixin = mixin;
	exports.isArrayLike = isArrayLike;
	exports.each = each;
	exports.map = map;
	exports.reduce = reduce;
	exports.filter = filter;
	exports.find = find;
	exports.bind = bind;
	exports.curry = curry;
	exports.isArray = isArray;
	exports.isFunction = isFunction;
	exports.isString = isString;
	exports.isObject = isObject;
	exports.isBuiltInObject = isBuiltInObject;
	exports.isDom = isDom;
	exports.eqNaN = eqNaN;
	exports.retrieve = retrieve;
	exports.retrieve2 = retrieve2;
	exports.retrieve3 = retrieve3;
	exports.slice = slice;
	exports.normalizeCssArray = normalizeCssArray;
	exports.assert = assert;
	exports.setAsPrimitive = setAsPrimitive;
	exports.isPrimitive = isPrimitive;
	exports.createHashMap = createHashMap;
	exports.noop = noop;

/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	var util = __webpack_require__(166);

	var vec2 = __webpack_require__(168);

	var Draggable = __webpack_require__(169);

	var Eventful = __webpack_require__(170);

	/**
	 * Handler
	 * @module zrender/Handler
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         errorrik (errorrik@gmail.com)
	 *         pissang (shenyi.914@gmail.com)
	 */
	var SILENT = 'silent';

	function makeEventPacket(eveType, targetInfo, event) {
	  return {
	    type: eveType,
	    event: event,
	    // target can only be an element that is not silent.
	    target: targetInfo.target,
	    // topTarget can be a silent element.
	    topTarget: targetInfo.topTarget,
	    cancelBubble: false,
	    offsetX: event.zrX,
	    offsetY: event.zrY,
	    gestureEvent: event.gestureEvent,
	    pinchX: event.pinchX,
	    pinchY: event.pinchY,
	    pinchScale: event.pinchScale,
	    wheelDelta: event.zrDelta,
	    zrByTouch: event.zrByTouch,
	    which: event.which
	  };
	}

	function EmptyProxy() {}

	EmptyProxy.prototype.dispose = function () {};

	var handlerNames = ['click', 'dblclick', 'mousewheel', 'mouseout', 'mouseup', 'mousedown', 'mousemove', 'contextmenu'];
	/**
	 * @alias module:zrender/Handler
	 * @constructor
	 * @extends module:zrender/mixin/Eventful
	 * @param {module:zrender/Storage} storage Storage instance.
	 * @param {module:zrender/Painter} painter Painter instance.
	 * @param {module:zrender/dom/HandlerProxy} proxy HandlerProxy instance.
	 * @param {HTMLElement} painterRoot painter.root (not painter.getViewportRoot()).
	 */

	var Handler = function (storage, painter, proxy, painterRoot) {
	  Eventful.call(this);
	  this.storage = storage;
	  this.painter = painter;
	  this.painterRoot = painterRoot;
	  proxy = proxy || new EmptyProxy();
	  /**
	   * Proxy of event. can be Dom, WebGLSurface, etc.
	   */

	  this.proxy = proxy; // Attach handler

	  proxy.handler = this;
	  /**
	   * {target, topTarget, x, y}
	   * @private
	   * @type {Object}
	   */

	  this._hovered = {};
	  /**
	   * @private
	   * @type {Date}
	   */

	  this._lastTouchMoment;
	  /**
	   * @private
	   * @type {number}
	   */

	  this._lastX;
	  /**
	   * @private
	   * @type {number}
	   */

	  this._lastY;
	  Draggable.call(this);
	  util.each(handlerNames, function (name) {
	    proxy.on && proxy.on(name, this[name], this);
	  }, this);
	};

	Handler.prototype = {
	  constructor: Handler,
	  mousemove: function (event) {
	    var x = event.zrX;
	    var y = event.zrY;
	    var lastHovered = this._hovered;
	    var lastHoveredTarget = lastHovered.target; // If lastHoveredTarget is removed from zr (detected by '__zr') by some API call
	    // (like 'setOption' or 'dispatchAction') in event handlers, we should find
	    // lastHovered again here. Otherwise 'mouseout' can not be triggered normally.
	    // See #6198.

	    if (lastHoveredTarget && !lastHoveredTarget.__zr) {
	      lastHovered = this.findHover(lastHovered.x, lastHovered.y);
	      lastHoveredTarget = lastHovered.target;
	    }

	    var hovered = this._hovered = this.findHover(x, y);
	    var hoveredTarget = hovered.target;
	    var proxy = this.proxy;
	    proxy.setCursor && proxy.setCursor(hoveredTarget ? hoveredTarget.cursor : 'default'); // Mouse out on previous hovered element

	    if (lastHoveredTarget && hoveredTarget !== lastHoveredTarget) {
	      this.dispatchToElement(lastHovered, 'mouseout', event);
	    } // Mouse moving on one element


	    this.dispatchToElement(hovered, 'mousemove', event); // Mouse over on a new element

	    if (hoveredTarget && hoveredTarget !== lastHoveredTarget) {
	      this.dispatchToElement(hovered, 'mouseover', event);
	    }
	  },
	  mouseout: function (event) {
	    this.dispatchToElement(this._hovered, 'mouseout', event); // There might be some doms created by upper layer application
	    // at the same level of painter.getViewportRoot() (e.g., tooltip
	    // dom created by echarts), where 'globalout' event should not
	    // be triggered when mouse enters these doms. (But 'mouseout'
	    // should be triggered at the original hovered element as usual).

	    var element = event.toElement || event.relatedTarget;
	    var innerDom;

	    do {
	      element = element && element.parentNode;
	    } while (element && element.nodeType != 9 && !(innerDom = element === this.painterRoot));

	    !innerDom && this.trigger('globalout', {
	      event: event
	    });
	  },

	  /**
	   * Resize
	   */
	  resize: function (event) {
	    this._hovered = {};
	  },

	  /**
	   * Dispatch event
	   * @param {string} eventName
	   * @param {event=} eventArgs
	   */
	  dispatch: function (eventName, eventArgs) {
	    var handler = this[eventName];
	    handler && handler.call(this, eventArgs);
	  },

	  /**
	   * Dispose
	   */
	  dispose: function () {
	    this.proxy.dispose();
	    this.storage = this.proxy = this.painter = null;
	  },

	  /**
	   * 设置默认的cursor style
	   * @param {string} [cursorStyle='default'] 例如 crosshair
	   */
	  setCursorStyle: function (cursorStyle) {
	    var proxy = this.proxy;
	    proxy.setCursor && proxy.setCursor(cursorStyle);
	  },

	  /**
	   * 事件分发代理
	   *
	   * @private
	   * @param {Object} targetInfo {target, topTarget} 目标图形元素
	   * @param {string} eventName 事件名称
	   * @param {Object} event 事件对象
	   */
	  dispatchToElement: function (targetInfo, eventName, event) {
	    targetInfo = targetInfo || {};
	    var el = targetInfo.target;

	    if (el && el.silent) {
	      return;
	    }

	    var eventHandler = 'on' + eventName;
	    var eventPacket = makeEventPacket(eventName, targetInfo, event);

	    while (el) {
	      el[eventHandler] && (eventPacket.cancelBubble = el[eventHandler].call(el, eventPacket));
	      el.trigger(eventName, eventPacket);
	      el = el.parent;

	      if (eventPacket.cancelBubble) {
	        break;
	      }
	    }

	    if (!eventPacket.cancelBubble) {
	      // 冒泡到顶级 zrender 对象
	      this.trigger(eventName, eventPacket); // 分发事件到用户自定义层
	      // 用户有可能在全局 click 事件中 dispose，所以需要判断下 painter 是否存在

	      this.painter && this.painter.eachOtherLayer(function (layer) {
	        if (typeof layer[eventHandler] == 'function') {
	          layer[eventHandler].call(layer, eventPacket);
	        }

	        if (layer.trigger) {
	          layer.trigger(eventName, eventPacket);
	        }
	      });
	    }
	  },

	  /**
	   * @private
	   * @param {number} x
	   * @param {number} y
	   * @param {module:zrender/graphic/Displayable} exclude
	   * @return {model:zrender/Element}
	   * @method
	   */
	  findHover: function (x, y, exclude) {
	    var list = this.storage.getDisplayList();
	    var out = {
	      x: x,
	      y: y
	    };

	    for (var i = list.length - 1; i >= 0; i--) {
	      var hoverCheckResult;

	      if (list[i] !== exclude // getDisplayList may include ignored item in VML mode
	      && !list[i].ignore && (hoverCheckResult = isHover(list[i], x, y))) {
	        !out.topTarget && (out.topTarget = list[i]);

	        if (hoverCheckResult !== SILENT) {
	          out.target = list[i];
	          break;
	        }
	      }
	    }

	    return out;
	  }
	}; // Common handlers

	util.each(['click', 'mousedown', 'mouseup', 'mousewheel', 'dblclick', 'contextmenu'], function (name) {
	  Handler.prototype[name] = function (event) {
	    // Find hover again to avoid click event is dispatched manually. Or click is triggered without mouseover
	    var hovered = this.findHover(event.zrX, event.zrY);
	    var hoveredTarget = hovered.target;

	    if (name === 'mousedown') {
	      this._downEl = hoveredTarget;
	      this._downPoint = [event.zrX, event.zrY]; // In case click triggered before mouseup

	      this._upEl = hoveredTarget;
	    } else if (name === 'mosueup') {
	      this._upEl = hoveredTarget;
	    } else if (name === 'click') {
	      if (this._downEl !== this._upEl // Original click event is triggered on the whole canvas element,
	      // including the case that `mousedown` - `mousemove` - `mouseup`,
	      // which should be filtered, otherwise it will bring trouble to
	      // pan and zoom.
	      || !this._downPoint // Arbitrary value
	      || vec2.dist(this._downPoint, [event.zrX, event.zrY]) > 4) {
	        return;
	      }

	      this._downPoint = null;
	    }

	    this.dispatchToElement(hovered, name, event);
	  };
	});

	function isHover(displayable, x, y) {
	  if (displayable[displayable.rectHover ? 'rectContain' : 'contain'](x, y)) {
	    var el = displayable;
	    var isSilent;

	    while (el) {
	      // If clipped by ancestor.
	      // FIXME: If clipPath has neither stroke nor fill,
	      // el.clipPath.contain(x, y) will always return false.
	      if (el.clipPath && !el.clipPath.contain(x, y)) {
	        return false;
	      }

	      if (el.silent) {
	        isSilent = true;
	      }

	      el = el.parent;
	    }

	    return isSilent ? SILENT : true;
	  }

	  return false;
	}

	util.mixin(Handler, Eventful);
	util.mixin(Handler, Draggable);
	var _default = Handler;
	module.exports = _default;

/***/ },
/* 168 */
/***/ function(module, exports) {

	var ArrayCtor = typeof Float32Array === 'undefined' ? Array : Float32Array;
	/**
	 * 创建一个向量
	 * @param {number} [x=0]
	 * @param {number} [y=0]
	 * @return {Vector2}
	 */

	function create(x, y) {
	  var out = new ArrayCtor(2);

	  if (x == null) {
	    x = 0;
	  }

	  if (y == null) {
	    y = 0;
	  }

	  out[0] = x;
	  out[1] = y;
	  return out;
	}
	/**
	 * 复制向量数据
	 * @param {Vector2} out
	 * @param {Vector2} v
	 * @return {Vector2}
	 */


	function copy(out, v) {
	  out[0] = v[0];
	  out[1] = v[1];
	  return out;
	}
	/**
	 * 克隆一个向量
	 * @param {Vector2} v
	 * @return {Vector2}
	 */


	function clone(v) {
	  var out = new ArrayCtor(2);
	  out[0] = v[0];
	  out[1] = v[1];
	  return out;
	}
	/**
	 * 设置向量的两个项
	 * @param {Vector2} out
	 * @param {number} a
	 * @param {number} b
	 * @return {Vector2} 结果
	 */


	function set(out, a, b) {
	  out[0] = a;
	  out[1] = b;
	  return out;
	}
	/**
	 * 向量相加
	 * @param {Vector2} out
	 * @param {Vector2} v1
	 * @param {Vector2} v2
	 */


	function add(out, v1, v2) {
	  out[0] = v1[0] + v2[0];
	  out[1] = v1[1] + v2[1];
	  return out;
	}
	/**
	 * 向量缩放后相加
	 * @param {Vector2} out
	 * @param {Vector2} v1
	 * @param {Vector2} v2
	 * @param {number} a
	 */


	function scaleAndAdd(out, v1, v2, a) {
	  out[0] = v1[0] + v2[0] * a;
	  out[1] = v1[1] + v2[1] * a;
	  return out;
	}
	/**
	 * 向量相减
	 * @param {Vector2} out
	 * @param {Vector2} v1
	 * @param {Vector2} v2
	 */


	function sub(out, v1, v2) {
	  out[0] = v1[0] - v2[0];
	  out[1] = v1[1] - v2[1];
	  return out;
	}
	/**
	 * 向量长度
	 * @param {Vector2} v
	 * @return {number}
	 */


	function len(v) {
	  return Math.sqrt(lenSquare(v));
	}

	var length = len; // jshint ignore:line

	/**
	 * 向量长度平方
	 * @param {Vector2} v
	 * @return {number}
	 */

	function lenSquare(v) {
	  return v[0] * v[0] + v[1] * v[1];
	}

	var lengthSquare = lenSquare;
	/**
	 * 向量乘法
	 * @param {Vector2} out
	 * @param {Vector2} v1
	 * @param {Vector2} v2
	 */

	function mul(out, v1, v2) {
	  out[0] = v1[0] * v2[0];
	  out[1] = v1[1] * v2[1];
	  return out;
	}
	/**
	 * 向量除法
	 * @param {Vector2} out
	 * @param {Vector2} v1
	 * @param {Vector2} v2
	 */


	function div(out, v1, v2) {
	  out[0] = v1[0] / v2[0];
	  out[1] = v1[1] / v2[1];
	  return out;
	}
	/**
	 * 向量点乘
	 * @param {Vector2} v1
	 * @param {Vector2} v2
	 * @return {number}
	 */


	function dot(v1, v2) {
	  return v1[0] * v2[0] + v1[1] * v2[1];
	}
	/**
	 * 向量缩放
	 * @param {Vector2} out
	 * @param {Vector2} v
	 * @param {number} s
	 */


	function scale(out, v, s) {
	  out[0] = v[0] * s;
	  out[1] = v[1] * s;
	  return out;
	}
	/**
	 * 向量归一化
	 * @param {Vector2} out
	 * @param {Vector2} v
	 */


	function normalize(out, v) {
	  var d = len(v);

	  if (d === 0) {
	    out[0] = 0;
	    out[1] = 0;
	  } else {
	    out[0] = v[0] / d;
	    out[1] = v[1] / d;
	  }

	  return out;
	}
	/**
	 * 计算向量间距离
	 * @param {Vector2} v1
	 * @param {Vector2} v2
	 * @return {number}
	 */


	function distance(v1, v2) {
	  return Math.sqrt((v1[0] - v2[0]) * (v1[0] - v2[0]) + (v1[1] - v2[1]) * (v1[1] - v2[1]));
	}

	var dist = distance;
	/**
	 * 向量距离平方
	 * @param {Vector2} v1
	 * @param {Vector2} v2
	 * @return {number}
	 */

	function distanceSquare(v1, v2) {
	  return (v1[0] - v2[0]) * (v1[0] - v2[0]) + (v1[1] - v2[1]) * (v1[1] - v2[1]);
	}

	var distSquare = distanceSquare;
	/**
	 * 求负向量
	 * @param {Vector2} out
	 * @param {Vector2} v
	 */

	function negate(out, v) {
	  out[0] = -v[0];
	  out[1] = -v[1];
	  return out;
	}
	/**
	 * 插值两个点
	 * @param {Vector2} out
	 * @param {Vector2} v1
	 * @param {Vector2} v2
	 * @param {number} t
	 */


	function lerp(out, v1, v2, t) {
	  out[0] = v1[0] + t * (v2[0] - v1[0]);
	  out[1] = v1[1] + t * (v2[1] - v1[1]);
	  return out;
	}
	/**
	 * 矩阵左乘向量
	 * @param {Vector2} out
	 * @param {Vector2} v
	 * @param {Vector2} m
	 */


	function applyTransform(out, v, m) {
	  var x = v[0];
	  var y = v[1];
	  out[0] = m[0] * x + m[2] * y + m[4];
	  out[1] = m[1] * x + m[3] * y + m[5];
	  return out;
	}
	/**
	 * 求两个向量最小值
	 * @param  {Vector2} out
	 * @param  {Vector2} v1
	 * @param  {Vector2} v2
	 */


	function min(out, v1, v2) {
	  out[0] = Math.min(v1[0], v2[0]);
	  out[1] = Math.min(v1[1], v2[1]);
	  return out;
	}
	/**
	 * 求两个向量最大值
	 * @param  {Vector2} out
	 * @param  {Vector2} v1
	 * @param  {Vector2} v2
	 */


	function max(out, v1, v2) {
	  out[0] = Math.max(v1[0], v2[0]);
	  out[1] = Math.max(v1[1], v2[1]);
	  return out;
	}

	exports.create = create;
	exports.copy = copy;
	exports.clone = clone;
	exports.set = set;
	exports.add = add;
	exports.scaleAndAdd = scaleAndAdd;
	exports.sub = sub;
	exports.len = len;
	exports.length = length;
	exports.lenSquare = lenSquare;
	exports.lengthSquare = lengthSquare;
	exports.mul = mul;
	exports.div = div;
	exports.dot = dot;
	exports.scale = scale;
	exports.normalize = normalize;
	exports.distance = distance;
	exports.dist = dist;
	exports.distanceSquare = distanceSquare;
	exports.distSquare = distSquare;
	exports.negate = negate;
	exports.lerp = lerp;
	exports.applyTransform = applyTransform;
	exports.min = min;
	exports.max = max;

/***/ },
/* 169 */
/***/ function(module, exports) {

	// TODO Draggable for group
	// FIXME Draggable on element which has parent rotation or scale
	function Draggable() {
	  this.on('mousedown', this._dragStart, this);
	  this.on('mousemove', this._drag, this);
	  this.on('mouseup', this._dragEnd, this);
	  this.on('globalout', this._dragEnd, this); // this._dropTarget = null;
	  // this._draggingTarget = null;
	  // this._x = 0;
	  // this._y = 0;
	}

	Draggable.prototype = {
	  constructor: Draggable,
	  _dragStart: function (e) {
	    var draggingTarget = e.target;

	    if (draggingTarget && draggingTarget.draggable) {
	      this._draggingTarget = draggingTarget;
	      draggingTarget.dragging = true;
	      this._x = e.offsetX;
	      this._y = e.offsetY;
	      this.dispatchToElement(param(draggingTarget, e), 'dragstart', e.event);
	    }
	  },
	  _drag: function (e) {
	    var draggingTarget = this._draggingTarget;

	    if (draggingTarget) {
	      var x = e.offsetX;
	      var y = e.offsetY;
	      var dx = x - this._x;
	      var dy = y - this._y;
	      this._x = x;
	      this._y = y;
	      draggingTarget.drift(dx, dy, e);
	      this.dispatchToElement(param(draggingTarget, e), 'drag', e.event);
	      var dropTarget = this.findHover(x, y, draggingTarget).target;
	      var lastDropTarget = this._dropTarget;
	      this._dropTarget = dropTarget;

	      if (draggingTarget !== dropTarget) {
	        if (lastDropTarget && dropTarget !== lastDropTarget) {
	          this.dispatchToElement(param(lastDropTarget, e), 'dragleave', e.event);
	        }

	        if (dropTarget && dropTarget !== lastDropTarget) {
	          this.dispatchToElement(param(dropTarget, e), 'dragenter', e.event);
	        }
	      }
	    }
	  },
	  _dragEnd: function (e) {
	    var draggingTarget = this._draggingTarget;

	    if (draggingTarget) {
	      draggingTarget.dragging = false;
	    }

	    this.dispatchToElement(param(draggingTarget, e), 'dragend', e.event);

	    if (this._dropTarget) {
	      this.dispatchToElement(param(this._dropTarget, e), 'drop', e.event);
	    }

	    this._draggingTarget = null;
	    this._dropTarget = null;
	  }
	};

	function param(target, e) {
	  return {
	    target: target,
	    topTarget: e && e.topTarget
	  };
	}

	var _default = Draggable;
	module.exports = _default;

/***/ },
/* 170 */
/***/ function(module, exports) {

	/**
	 * 事件扩展
	 * @module zrender/mixin/Eventful
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         pissang (https://www.github.com/pissang)
	 */
	var arrySlice = Array.prototype.slice;
	/**
	 * 事件分发器
	 * @alias module:zrender/mixin/Eventful
	 * @constructor
	 */

	var Eventful = function () {
	  this._$handlers = {};
	};

	Eventful.prototype = {
	  constructor: Eventful,

	  /**
	   * 单次触发绑定，trigger后销毁
	   *
	   * @param {string} event 事件名
	   * @param {Function} handler 响应函数
	   * @param {Object} context
	   */
	  one: function (event, handler, context) {
	    var _h = this._$handlers;

	    if (!handler || !event) {
	      return this;
	    }

	    if (!_h[event]) {
	      _h[event] = [];
	    }

	    for (var i = 0; i < _h[event].length; i++) {
	      if (_h[event][i].h === handler) {
	        return this;
	      }
	    }

	    _h[event].push({
	      h: handler,
	      one: true,
	      ctx: context || this
	    });

	    return this;
	  },

	  /**
	   * 绑定事件
	   * @param {string} event 事件名
	   * @param {Function} handler 事件处理函数
	   * @param {Object} [context]
	   */
	  on: function (event, handler, context) {
	    var _h = this._$handlers;

	    if (!handler || !event) {
	      return this;
	    }

	    if (!_h[event]) {
	      _h[event] = [];
	    }

	    for (var i = 0; i < _h[event].length; i++) {
	      if (_h[event][i].h === handler) {
	        return this;
	      }
	    }

	    _h[event].push({
	      h: handler,
	      one: false,
	      ctx: context || this
	    });

	    return this;
	  },

	  /**
	   * 是否绑定了事件
	   * @param  {string}  event
	   * @return {boolean}
	   */
	  isSilent: function (event) {
	    var _h = this._$handlers;
	    return _h[event] && _h[event].length;
	  },

	  /**
	   * 解绑事件
	   * @param {string} event 事件名
	   * @param {Function} [handler] 事件处理函数
	   */
	  off: function (event, handler) {
	    var _h = this._$handlers;

	    if (!event) {
	      this._$handlers = {};
	      return this;
	    }

	    if (handler) {
	      if (_h[event]) {
	        var newList = [];

	        for (var i = 0, l = _h[event].length; i < l; i++) {
	          if (_h[event][i]['h'] != handler) {
	            newList.push(_h[event][i]);
	          }
	        }

	        _h[event] = newList;
	      }

	      if (_h[event] && _h[event].length === 0) {
	        delete _h[event];
	      }
	    } else {
	      delete _h[event];
	    }

	    return this;
	  },

	  /**
	   * 事件分发
	   *
	   * @param {string} type 事件类型
	   */
	  trigger: function (type) {
	    if (this._$handlers[type]) {
	      var args = arguments;
	      var argLen = args.length;

	      if (argLen > 3) {
	        args = arrySlice.call(args, 1);
	      }

	      var _h = this._$handlers[type];
	      var len = _h.length;

	      for (var i = 0; i < len;) {
	        // Optimize advise from backbone
	        switch (argLen) {
	          case 1:
	            _h[i]['h'].call(_h[i]['ctx']);

	            break;

	          case 2:
	            _h[i]['h'].call(_h[i]['ctx'], args[1]);

	            break;

	          case 3:
	            _h[i]['h'].call(_h[i]['ctx'], args[1], args[2]);

	            break;

	          default:
	            // have more than 2 given arguments
	            _h[i]['h'].apply(_h[i]['ctx'], args);

	            break;
	        }

	        if (_h[i]['one']) {
	          _h.splice(i, 1);

	          len--;
	        } else {
	          i++;
	        }
	      }
	    }

	    return this;
	  },

	  /**
	   * 带有context的事件分发, 最后一个参数是事件回调的context
	   * @param {string} type 事件类型
	   */
	  triggerWithContext: function (type) {
	    if (this._$handlers[type]) {
	      var args = arguments;
	      var argLen = args.length;

	      if (argLen > 4) {
	        args = arrySlice.call(args, 1, args.length - 1);
	      }

	      var ctx = args[args.length - 1];
	      var _h = this._$handlers[type];
	      var len = _h.length;

	      for (var i = 0; i < len;) {
	        // Optimize advise from backbone
	        switch (argLen) {
	          case 1:
	            _h[i]['h'].call(ctx);

	            break;

	          case 2:
	            _h[i]['h'].call(ctx, args[1]);

	            break;

	          case 3:
	            _h[i]['h'].call(ctx, args[1], args[2]);

	            break;

	          default:
	            // have more than 2 given arguments
	            _h[i]['h'].apply(ctx, args);

	            break;
	        }

	        if (_h[i]['one']) {
	          _h.splice(i, 1);

	          len--;
	        } else {
	          i++;
	        }
	      }
	    }

	    return this;
	  }
	}; // 对象可以通过 onxxxx 绑定事件

	/**
	 * @event module:zrender/mixin/Eventful#onclick
	 * @type {Function}
	 * @default null
	 */

	/**
	 * @event module:zrender/mixin/Eventful#onmouseover
	 * @type {Function}
	 * @default null
	 */

	/**
	 * @event module:zrender/mixin/Eventful#onmouseout
	 * @type {Function}
	 * @default null
	 */

	/**
	 * @event module:zrender/mixin/Eventful#onmousemove
	 * @type {Function}
	 * @default null
	 */

	/**
	 * @event module:zrender/mixin/Eventful#onmousewheel
	 * @type {Function}
	 * @default null
	 */

	/**
	 * @event module:zrender/mixin/Eventful#onmousedown
	 * @type {Function}
	 * @default null
	 */

	/**
	 * @event module:zrender/mixin/Eventful#onmouseup
	 * @type {Function}
	 * @default null
	 */

	/**
	 * @event module:zrender/mixin/Eventful#ondrag
	 * @type {Function}
	 * @default null
	 */

	/**
	 * @event module:zrender/mixin/Eventful#ondragstart
	 * @type {Function}
	 * @default null
	 */

	/**
	 * @event module:zrender/mixin/Eventful#ondragend
	 * @type {Function}
	 * @default null
	 */

	/**
	 * @event module:zrender/mixin/Eventful#ondragenter
	 * @type {Function}
	 * @default null
	 */

	/**
	 * @event module:zrender/mixin/Eventful#ondragleave
	 * @type {Function}
	 * @default null
	 */

	/**
	 * @event module:zrender/mixin/Eventful#ondragover
	 * @type {Function}
	 * @default null
	 */

	/**
	 * @event module:zrender/mixin/Eventful#ondrop
	 * @type {Function}
	 * @default null
	 */

	var _default = Eventful;
	module.exports = _default;

/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	var util = __webpack_require__(166);

	var env = __webpack_require__(165);

	var Group = __webpack_require__(172);

	var timsort = __webpack_require__(185);

	/**
	 * Storage内容仓库模块
	 * @module zrender/Storage
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 * @author errorrik (errorrik@gmail.com)
	 * @author pissang (https://github.com/pissang/)
	 */
	// Use timsort because in most case elements are partially sorted
	// https://jsfiddle.net/pissang/jr4x7mdm/8/
	function shapeCompareFunc(a, b) {
	  if (a.zlevel === b.zlevel) {
	    if (a.z === b.z) {
	      // if (a.z2 === b.z2) {
	      //     // FIXME Slow has renderidx compare
	      //     // http://stackoverflow.com/questions/20883421/sorting-in-javascript-should-every-compare-function-have-a-return-0-statement
	      //     // https://github.com/v8/v8/blob/47cce544a31ed5577ffe2963f67acb4144ee0232/src/js/array.js#L1012
	      //     return a.__renderidx - b.__renderidx;
	      // }
	      return a.z2 - b.z2;
	    }

	    return a.z - b.z;
	  }

	  return a.zlevel - b.zlevel;
	}
	/**
	 * 内容仓库 (M)
	 * @alias module:zrender/Storage
	 * @constructor
	 */


	var Storage = function () {
	  // jshint ignore:line
	  this._roots = [];
	  this._displayList = [];
	  this._displayListLen = 0;
	};

	Storage.prototype = {
	  constructor: Storage,

	  /**
	   * @param  {Function} cb
	   *
	   */
	  traverse: function (cb, context) {
	    for (var i = 0; i < this._roots.length; i++) {
	      this._roots[i].traverse(cb, context);
	    }
	  },

	  /**
	   * 返回所有图形的绘制队列
	   * @param {boolean} [update=false] 是否在返回前更新该数组
	   * @param {boolean} [includeIgnore=false] 是否包含 ignore 的数组, 在 update 为 true 的时候有效
	   *
	   * 详见{@link module:zrender/graphic/Displayable.prototype.updateDisplayList}
	   * @return {Array.<module:zrender/graphic/Displayable>}
	   */
	  getDisplayList: function (update, includeIgnore) {
	    includeIgnore = includeIgnore || false;

	    if (update) {
	      this.updateDisplayList(includeIgnore);
	    }

	    return this._displayList;
	  },

	  /**
	   * 更新图形的绘制队列。
	   * 每次绘制前都会调用，该方法会先深度优先遍历整个树，更新所有Group和Shape的变换并且把所有可见的Shape保存到数组中，
	   * 最后根据绘制的优先级（zlevel > z > 插入顺序）排序得到绘制队列
	   * @param {boolean} [includeIgnore=false] 是否包含 ignore 的数组
	   */
	  updateDisplayList: function (includeIgnore) {
	    this._displayListLen = 0;
	    var roots = this._roots;
	    var displayList = this._displayList;

	    for (var i = 0, len = roots.length; i < len; i++) {
	      this._updateAndAddDisplayable(roots[i], null, includeIgnore);
	    }

	    displayList.length = this._displayListLen; // for (var i = 0, len = displayList.length; i < len; i++) {
	    //     displayList[i].__renderidx = i;
	    // }
	    // displayList.sort(shapeCompareFunc);

	    env.canvasSupported && timsort(displayList, shapeCompareFunc);
	  },
	  _updateAndAddDisplayable: function (el, clipPaths, includeIgnore) {
	    if (el.ignore && !includeIgnore) {
	      return;
	    }

	    el.beforeUpdate();

	    if (el.__dirty) {
	      el.update();
	    }

	    el.afterUpdate();
	    var userSetClipPath = el.clipPath;

	    if (userSetClipPath) {
	      // FIXME 效率影响
	      if (clipPaths) {
	        clipPaths = clipPaths.slice();
	      } else {
	        clipPaths = [];
	      }

	      var currentClipPath = userSetClipPath;
	      var parentClipPath = el; // Recursively add clip path

	      while (currentClipPath) {
	        // clipPath 的变换是基于使用这个 clipPath 的元素
	        currentClipPath.parent = parentClipPath;
	        currentClipPath.updateTransform();
	        clipPaths.push(currentClipPath);
	        parentClipPath = currentClipPath;
	        currentClipPath = currentClipPath.clipPath;
	      }
	    }

	    if (el.isGroup) {
	      var children = el._children;

	      for (var i = 0; i < children.length; i++) {
	        var child = children[i]; // Force to mark as dirty if group is dirty
	        // FIXME __dirtyPath ?

	        if (el.__dirty) {
	          child.__dirty = true;
	        }

	        this._updateAndAddDisplayable(child, clipPaths, includeIgnore);
	      } // Mark group clean here


	      el.__dirty = false;
	    } else {
	      el.__clipPaths = clipPaths;
	      this._displayList[this._displayListLen++] = el;
	    }
	  },

	  /**
	   * 添加图形(Shape)或者组(Group)到根节点
	   * @param {module:zrender/Element} el
	   */
	  addRoot: function (el) {
	    if (el.__storage === this) {
	      return;
	    }

	    if (el instanceof Group) {
	      el.addChildrenToStorage(this);
	    }

	    this.addToStorage(el);

	    this._roots.push(el);
	  },

	  /**
	   * 删除指定的图形(Shape)或者组(Group)
	   * @param {string|Array.<string>} [el] 如果为空清空整个Storage
	   */
	  delRoot: function (el) {
	    if (el == null) {
	      // 不指定el清空
	      for (var i = 0; i < this._roots.length; i++) {
	        var root = this._roots[i];

	        if (root instanceof Group) {
	          root.delChildrenFromStorage(this);
	        }
	      }

	      this._roots = [];
	      this._displayList = [];
	      this._displayListLen = 0;
	      return;
	    }

	    if (el instanceof Array) {
	      for (var i = 0, l = el.length; i < l; i++) {
	        this.delRoot(el[i]);
	      }

	      return;
	    }

	    var idx = util.indexOf(this._roots, el);

	    if (idx >= 0) {
	      this.delFromStorage(el);

	      this._roots.splice(idx, 1);

	      if (el instanceof Group) {
	        el.delChildrenFromStorage(this);
	      }
	    }
	  },
	  addToStorage: function (el) {
	    el.__storage = this;
	    el.dirty(false);
	    return this;
	  },
	  delFromStorage: function (el) {
	    if (el) {
	      el.__storage = null;
	    }

	    return this;
	  },

	  /**
	   * 清空并且释放Storage
	   */
	  dispose: function () {
	    this._renderList = this._roots = null;
	  },
	  displayableSortFunc: shapeCompareFunc
	};
	var _default = Storage;
	module.exports = _default;

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var Element = __webpack_require__(173);

	var BoundingRect = __webpack_require__(184);

	/**
	 * Group是一个容器，可以插入子节点，Group的变换也会被应用到子节点上
	 * @module zrender/graphic/Group
	 * @example
	 *     var Group = require('zrender/container/Group');
	 *     var Circle = require('zrender/graphic/shape/Circle');
	 *     var g = new Group();
	 *     g.position[0] = 100;
	 *     g.position[1] = 100;
	 *     g.add(new Circle({
	 *         style: {
	 *             x: 100,
	 *             y: 100,
	 *             r: 20,
	 *         }
	 *     }));
	 *     zr.add(g);
	 */

	/**
	 * @alias module:zrender/graphic/Group
	 * @constructor
	 * @extends module:zrender/mixin/Transformable
	 * @extends module:zrender/mixin/Eventful
	 */
	var Group = function (opts) {
	  opts = opts || {};
	  Element.call(this, opts);

	  for (var key in opts) {
	    if (opts.hasOwnProperty(key)) {
	      this[key] = opts[key];
	    }
	  }

	  this._children = [];
	  this.__storage = null;
	  this.__dirty = true;
	};

	Group.prototype = {
	  constructor: Group,
	  isGroup: true,

	  /**
	   * @type {string}
	   */
	  type: 'group',

	  /**
	   * 所有子孙元素是否响应鼠标事件
	   * @name module:/zrender/container/Group#silent
	   * @type {boolean}
	   * @default false
	   */
	  silent: false,

	  /**
	   * @return {Array.<module:zrender/Element>}
	   */
	  children: function () {
	    return this._children.slice();
	  },

	  /**
	   * 获取指定 index 的儿子节点
	   * @param  {number} idx
	   * @return {module:zrender/Element}
	   */
	  childAt: function (idx) {
	    return this._children[idx];
	  },

	  /**
	   * 获取指定名字的儿子节点
	   * @param  {string} name
	   * @return {module:zrender/Element}
	   */
	  childOfName: function (name) {
	    var children = this._children;

	    for (var i = 0; i < children.length; i++) {
	      if (children[i].name === name) {
	        return children[i];
	      }
	    }
	  },

	  /**
	   * @return {number}
	   */
	  childCount: function () {
	    return this._children.length;
	  },

	  /**
	   * 添加子节点到最后
	   * @param {module:zrender/Element} child
	   */
	  add: function (child) {
	    if (child && child !== this && child.parent !== this) {
	      this._children.push(child);

	      this._doAdd(child);
	    }

	    return this;
	  },

	  /**
	   * 添加子节点在 nextSibling 之前
	   * @param {module:zrender/Element} child
	   * @param {module:zrender/Element} nextSibling
	   */
	  addBefore: function (child, nextSibling) {
	    if (child && child !== this && child.parent !== this && nextSibling && nextSibling.parent === this) {
	      var children = this._children;
	      var idx = children.indexOf(nextSibling);

	      if (idx >= 0) {
	        children.splice(idx, 0, child);

	        this._doAdd(child);
	      }
	    }

	    return this;
	  },
	  _doAdd: function (child) {
	    if (child.parent) {
	      child.parent.remove(child);
	    }

	    child.parent = this;
	    var storage = this.__storage;
	    var zr = this.__zr;

	    if (storage && storage !== child.__storage) {
	      storage.addToStorage(child);

	      if (child instanceof Group) {
	        child.addChildrenToStorage(storage);
	      }
	    }

	    zr && zr.refresh();
	  },

	  /**
	   * 移除子节点
	   * @param {module:zrender/Element} child
	   */
	  remove: function (child) {
	    var zr = this.__zr;
	    var storage = this.__storage;
	    var children = this._children;
	    var idx = zrUtil.indexOf(children, child);

	    if (idx < 0) {
	      return this;
	    }

	    children.splice(idx, 1);
	    child.parent = null;

	    if (storage) {
	      storage.delFromStorage(child);

	      if (child instanceof Group) {
	        child.delChildrenFromStorage(storage);
	      }
	    }

	    zr && zr.refresh();
	    return this;
	  },

	  /**
	   * 移除所有子节点
	   */
	  removeAll: function () {
	    var children = this._children;
	    var storage = this.__storage;
	    var child;
	    var i;

	    for (i = 0; i < children.length; i++) {
	      child = children[i];

	      if (storage) {
	        storage.delFromStorage(child);

	        if (child instanceof Group) {
	          child.delChildrenFromStorage(storage);
	        }
	      }

	      child.parent = null;
	    }

	    children.length = 0;
	    return this;
	  },

	  /**
	   * 遍历所有子节点
	   * @param  {Function} cb
	   * @param  {}   context
	   */
	  eachChild: function (cb, context) {
	    var children = this._children;

	    for (var i = 0; i < children.length; i++) {
	      var child = children[i];
	      cb.call(context, child, i);
	    }

	    return this;
	  },

	  /**
	   * 深度优先遍历所有子孙节点
	   * @param  {Function} cb
	   * @param  {}   context
	   */
	  traverse: function (cb, context) {
	    for (var i = 0; i < this._children.length; i++) {
	      var child = this._children[i];
	      cb.call(context, child);

	      if (child.type === 'group') {
	        child.traverse(cb, context);
	      }
	    }

	    return this;
	  },
	  addChildrenToStorage: function (storage) {
	    for (var i = 0; i < this._children.length; i++) {
	      var child = this._children[i];
	      storage.addToStorage(child);

	      if (child instanceof Group) {
	        child.addChildrenToStorage(storage);
	      }
	    }
	  },
	  delChildrenFromStorage: function (storage) {
	    for (var i = 0; i < this._children.length; i++) {
	      var child = this._children[i];
	      storage.delFromStorage(child);

	      if (child instanceof Group) {
	        child.delChildrenFromStorage(storage);
	      }
	    }
	  },
	  dirty: function () {
	    this.__dirty = true;
	    this.__zr && this.__zr.refresh();
	    return this;
	  },

	  /**
	   * @return {module:zrender/core/BoundingRect}
	   */
	  getBoundingRect: function (includeChildren) {
	    // TODO Caching
	    var rect = null;
	    var tmpRect = new BoundingRect(0, 0, 0, 0);
	    var children = includeChildren || this._children;
	    var tmpMat = [];

	    for (var i = 0; i < children.length; i++) {
	      var child = children[i];

	      if (child.ignore || child.invisible) {
	        continue;
	      }

	      var childRect = child.getBoundingRect();
	      var transform = child.getLocalTransform(tmpMat); // TODO
	      // The boundingRect cacluated by transforming original
	      // rect may be bigger than the actual bundingRect when rotation
	      // is used. (Consider a circle rotated aginst its center, where
	      // the actual boundingRect should be the same as that not be
	      // rotated.) But we can not find better approach to calculate
	      // actual boundingRect yet, considering performance.

	      if (transform) {
	        tmpRect.copy(childRect);
	        tmpRect.applyTransform(transform);
	        rect = rect || tmpRect.clone();
	        rect.union(tmpRect);
	      } else {
	        rect = rect || childRect.clone();
	        rect.union(childRect);
	      }
	    }

	    return rect || tmpRect;
	  }
	};
	zrUtil.inherits(Group, Element);
	var _default = Group;
	module.exports = _default;

/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	var guid = __webpack_require__(164);

	var Eventful = __webpack_require__(170);

	var Transformable = __webpack_require__(174);

	var Animatable = __webpack_require__(176);

	var zrUtil = __webpack_require__(166);

	/**
	 * @alias module:zrender/Element
	 * @constructor
	 * @extends {module:zrender/mixin/Animatable}
	 * @extends {module:zrender/mixin/Transformable}
	 * @extends {module:zrender/mixin/Eventful}
	 */
	var Element = function (opts) {
	  // jshint ignore:line
	  Transformable.call(this, opts);
	  Eventful.call(this, opts);
	  Animatable.call(this, opts);
	  /**
	   * 画布元素ID
	   * @type {string}
	   */

	  this.id = opts.id || guid();
	};

	Element.prototype = {
	  /**
	   * 元素类型
	   * Element type
	   * @type {string}
	   */
	  type: 'element',

	  /**
	   * 元素名字
	   * Element name
	   * @type {string}
	   */
	  name: '',

	  /**
	   * ZRender 实例对象，会在 element 添加到 zrender 实例中后自动赋值
	   * ZRender instance will be assigned when element is associated with zrender
	   * @name module:/zrender/Element#__zr
	   * @type {module:zrender/ZRender}
	   */
	  __zr: null,

	  /**
	   * 图形是否忽略，为true时忽略图形的绘制以及事件触发
	   * If ignore drawing and events of the element object
	   * @name module:/zrender/Element#ignore
	   * @type {boolean}
	   * @default false
	   */
	  ignore: false,

	  /**
	   * 用于裁剪的路径(shape)，所有 Group 内的路径在绘制时都会被这个路径裁剪
	   * 该路径会继承被裁减对象的变换
	   * @type {module:zrender/graphic/Path}
	   * @see http://www.w3.org/TR/2dcontext/#clipping-region
	   * @readOnly
	   */
	  clipPath: null,

	  /**
	   * Drift element
	   * @param  {number} dx dx on the global space
	   * @param  {number} dy dy on the global space
	   */
	  drift: function (dx, dy) {
	    switch (this.draggable) {
	      case 'horizontal':
	        dy = 0;
	        break;

	      case 'vertical':
	        dx = 0;
	        break;
	    }

	    var m = this.transform;

	    if (!m) {
	      m = this.transform = [1, 0, 0, 1, 0, 0];
	    }

	    m[4] += dx;
	    m[5] += dy;
	    this.decomposeTransform();
	    this.dirty(false);
	  },

	  /**
	   * Hook before update
	   */
	  beforeUpdate: function () {},

	  /**
	   * Hook after update
	   */
	  afterUpdate: function () {},

	  /**
	   * Update each frame
	   */
	  update: function () {
	    this.updateTransform();
	  },

	  /**
	   * @param  {Function} cb
	   * @param  {}   context
	   */
	  traverse: function (cb, context) {},

	  /**
	   * @protected
	   */
	  attrKV: function (key, value) {
	    if (key === 'position' || key === 'scale' || key === 'origin') {
	      // Copy the array
	      if (value) {
	        var target = this[key];

	        if (!target) {
	          target = this[key] = [];
	        }

	        target[0] = value[0];
	        target[1] = value[1];
	      }
	    } else {
	      this[key] = value;
	    }
	  },

	  /**
	   * Hide the element
	   */
	  hide: function () {
	    this.ignore = true;
	    this.__zr && this.__zr.refresh();
	  },

	  /**
	   * Show the element
	   */
	  show: function () {
	    this.ignore = false;
	    this.__zr && this.__zr.refresh();
	  },

	  /**
	   * @param {string|Object} key
	   * @param {*} value
	   */
	  attr: function (key, value) {
	    if (typeof key === 'string') {
	      this.attrKV(key, value);
	    } else if (zrUtil.isObject(key)) {
	      for (var name in key) {
	        if (key.hasOwnProperty(name)) {
	          this.attrKV(name, key[name]);
	        }
	      }
	    }

	    this.dirty(false);
	    return this;
	  },

	  /**
	   * @param {module:zrender/graphic/Path} clipPath
	   */
	  setClipPath: function (clipPath) {
	    var zr = this.__zr;

	    if (zr) {
	      clipPath.addSelfToZr(zr);
	    } // Remove previous clip path


	    if (this.clipPath && this.clipPath !== clipPath) {
	      this.removeClipPath();
	    }

	    this.clipPath = clipPath;
	    clipPath.__zr = zr;
	    clipPath.__clipTarget = this;
	    this.dirty(false);
	  },

	  /**
	   */
	  removeClipPath: function () {
	    var clipPath = this.clipPath;

	    if (clipPath) {
	      if (clipPath.__zr) {
	        clipPath.removeSelfFromZr(clipPath.__zr);
	      }

	      clipPath.__zr = null;
	      clipPath.__clipTarget = null;
	      this.clipPath = null;
	      this.dirty(false);
	    }
	  },

	  /**
	   * Add self from zrender instance.
	   * Not recursively because it will be invoked when element added to storage.
	   * @param {module:zrender/ZRender} zr
	   */
	  addSelfToZr: function (zr) {
	    this.__zr = zr; // 添加动画

	    var animators = this.animators;

	    if (animators) {
	      for (var i = 0; i < animators.length; i++) {
	        zr.animation.addAnimator(animators[i]);
	      }
	    }

	    if (this.clipPath) {
	      this.clipPath.addSelfToZr(zr);
	    }
	  },

	  /**
	   * Remove self from zrender instance.
	   * Not recursively because it will be invoked when element added to storage.
	   * @param {module:zrender/ZRender} zr
	   */
	  removeSelfFromZr: function (zr) {
	    this.__zr = null; // 移除动画

	    var animators = this.animators;

	    if (animators) {
	      for (var i = 0; i < animators.length; i++) {
	        zr.animation.removeAnimator(animators[i]);
	      }
	    }

	    if (this.clipPath) {
	      this.clipPath.removeSelfFromZr(zr);
	    }
	  }
	};
	zrUtil.mixin(Element, Animatable);
	zrUtil.mixin(Element, Transformable);
	zrUtil.mixin(Element, Eventful);
	var _default = Element;
	module.exports = _default;

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	var matrix = __webpack_require__(175);

	var vector = __webpack_require__(168);

	/**
	 * 提供变换扩展
	 * @module zrender/mixin/Transformable
	 * @author pissang (https://www.github.com/pissang)
	 */
	var mIdentity = matrix.identity;
	var EPSILON = 5e-5;

	function isNotAroundZero(val) {
	  return val > EPSILON || val < -EPSILON;
	}
	/**
	 * @alias module:zrender/mixin/Transformable
	 * @constructor
	 */


	var Transformable = function (opts) {
	  opts = opts || {}; // If there are no given position, rotation, scale

	  if (!opts.position) {
	    /**
	     * 平移
	     * @type {Array.<number>}
	     * @default [0, 0]
	     */
	    this.position = [0, 0];
	  }

	  if (opts.rotation == null) {
	    /**
	     * 旋转
	     * @type {Array.<number>}
	     * @default 0
	     */
	    this.rotation = 0;
	  }

	  if (!opts.scale) {
	    /**
	     * 缩放
	     * @type {Array.<number>}
	     * @default [1, 1]
	     */
	    this.scale = [1, 1];
	  }
	  /**
	   * 旋转和缩放的原点
	   * @type {Array.<number>}
	   * @default null
	   */


	  this.origin = this.origin || null;
	};

	var transformableProto = Transformable.prototype;
	transformableProto.transform = null;
	/**
	 * 判断是否需要有坐标变换
	 * 如果有坐标变换, 则从position, rotation, scale以及父节点的transform计算出自身的transform矩阵
	 */

	transformableProto.needLocalTransform = function () {
	  return isNotAroundZero(this.rotation) || isNotAroundZero(this.position[0]) || isNotAroundZero(this.position[1]) || isNotAroundZero(this.scale[0] - 1) || isNotAroundZero(this.scale[1] - 1);
	};

	transformableProto.updateTransform = function () {
	  var parent = this.parent;
	  var parentHasTransform = parent && parent.transform;
	  var needLocalTransform = this.needLocalTransform();
	  var m = this.transform;

	  if (!(needLocalTransform || parentHasTransform)) {
	    m && mIdentity(m);
	    return;
	  }

	  m = m || matrix.create();

	  if (needLocalTransform) {
	    this.getLocalTransform(m);
	  } else {
	    mIdentity(m);
	  } // 应用父节点变换


	  if (parentHasTransform) {
	    if (needLocalTransform) {
	      matrix.mul(m, parent.transform, m);
	    } else {
	      matrix.copy(m, parent.transform);
	    }
	  } // 保存这个变换矩阵


	  this.transform = m;
	  this.invTransform = this.invTransform || matrix.create();
	  matrix.invert(this.invTransform, m);
	};

	transformableProto.getLocalTransform = function (m) {
	  return Transformable.getLocalTransform(this, m);
	};
	/**
	 * 将自己的transform应用到context上
	 * @param {CanvasRenderingContext2D} ctx
	 */


	transformableProto.setTransform = function (ctx) {
	  var m = this.transform;
	  var dpr = ctx.dpr || 1;

	  if (m) {
	    ctx.setTransform(dpr * m[0], dpr * m[1], dpr * m[2], dpr * m[3], dpr * m[4], dpr * m[5]);
	  } else {
	    ctx.setTransform(dpr, 0, 0, dpr, 0, 0);
	  }
	};

	transformableProto.restoreTransform = function (ctx) {
	  var dpr = ctx.dpr || 1;
	  ctx.setTransform(dpr, 0, 0, dpr, 0, 0);
	};

	var tmpTransform = [];
	/**
	 * 分解`transform`矩阵到`position`, `rotation`, `scale`
	 */

	transformableProto.decomposeTransform = function () {
	  if (!this.transform) {
	    return;
	  }

	  var parent = this.parent;
	  var m = this.transform;

	  if (parent && parent.transform) {
	    // Get local transform and decompose them to position, scale, rotation
	    matrix.mul(tmpTransform, parent.invTransform, m);
	    m = tmpTransform;
	  }

	  var sx = m[0] * m[0] + m[1] * m[1];
	  var sy = m[2] * m[2] + m[3] * m[3];
	  var position = this.position;
	  var scale = this.scale;

	  if (isNotAroundZero(sx - 1)) {
	    sx = Math.sqrt(sx);
	  }

	  if (isNotAroundZero(sy - 1)) {
	    sy = Math.sqrt(sy);
	  }

	  if (m[0] < 0) {
	    sx = -sx;
	  }

	  if (m[3] < 0) {
	    sy = -sy;
	  }

	  position[0] = m[4];
	  position[1] = m[5];
	  scale[0] = sx;
	  scale[1] = sy;
	  this.rotation = Math.atan2(-m[1] / sy, m[0] / sx);
	};
	/**
	 * Get global scale
	 * @return {Array.<number>}
	 */


	transformableProto.getGlobalScale = function () {
	  var m = this.transform;

	  if (!m) {
	    return [1, 1];
	  }

	  var sx = Math.sqrt(m[0] * m[0] + m[1] * m[1]);
	  var sy = Math.sqrt(m[2] * m[2] + m[3] * m[3]);

	  if (m[0] < 0) {
	    sx = -sx;
	  }

	  if (m[3] < 0) {
	    sy = -sy;
	  }

	  return [sx, sy];
	};
	/**
	 * 变换坐标位置到 shape 的局部坐标空间
	 * @method
	 * @param {number} x
	 * @param {number} y
	 * @return {Array.<number>}
	 */


	transformableProto.transformCoordToLocal = function (x, y) {
	  var v2 = [x, y];
	  var invTransform = this.invTransform;

	  if (invTransform) {
	    vector.applyTransform(v2, v2, invTransform);
	  }

	  return v2;
	};
	/**
	 * 变换局部坐标位置到全局坐标空间
	 * @method
	 * @param {number} x
	 * @param {number} y
	 * @return {Array.<number>}
	 */


	transformableProto.transformCoordToGlobal = function (x, y) {
	  var v2 = [x, y];
	  var transform = this.transform;

	  if (transform) {
	    vector.applyTransform(v2, v2, transform);
	  }

	  return v2;
	};
	/**
	 * @static
	 * @param {Object} target
	 * @param {Array.<number>} target.origin
	 * @param {number} target.rotation
	 * @param {Array.<number>} target.position
	 * @param {Array.<number>} [m]
	 */


	Transformable.getLocalTransform = function (target, m) {
	  m = m || [];
	  mIdentity(m);
	  var origin = target.origin;
	  var scale = target.scale || [1, 1];
	  var rotation = target.rotation || 0;
	  var position = target.position || [0, 0];

	  if (origin) {
	    // Translate to origin
	    m[4] -= origin[0];
	    m[5] -= origin[1];
	  }

	  matrix.scale(m, m, scale);

	  if (rotation) {
	    matrix.rotate(m, m, rotation);
	  }

	  if (origin) {
	    // Translate back from origin
	    m[4] += origin[0];
	    m[5] += origin[1];
	  }

	  m[4] += position[0];
	  m[5] += position[1];
	  return m;
	};

	var _default = Transformable;
	module.exports = _default;

/***/ },
/* 175 */
/***/ function(module, exports) {

	/**
	 * 3x2矩阵操作类
	 * @exports zrender/tool/matrix
	 */
	var ArrayCtor = typeof Float32Array === 'undefined' ? Array : Float32Array;
	/**
	 * 创建一个单位矩阵
	 * @return {Float32Array|Array.<number>}
	 */

	function create() {
	  var out = new ArrayCtor(6);
	  identity(out);
	  return out;
	}
	/**
	 * 设置矩阵为单位矩阵
	 * @param {Float32Array|Array.<number>} out
	 */


	function identity(out) {
	  out[0] = 1;
	  out[1] = 0;
	  out[2] = 0;
	  out[3] = 1;
	  out[4] = 0;
	  out[5] = 0;
	  return out;
	}
	/**
	 * 复制矩阵
	 * @param {Float32Array|Array.<number>} out
	 * @param {Float32Array|Array.<number>} m
	 */


	function copy(out, m) {
	  out[0] = m[0];
	  out[1] = m[1];
	  out[2] = m[2];
	  out[3] = m[3];
	  out[4] = m[4];
	  out[5] = m[5];
	  return out;
	}
	/**
	 * 矩阵相乘
	 * @param {Float32Array|Array.<number>} out
	 * @param {Float32Array|Array.<number>} m1
	 * @param {Float32Array|Array.<number>} m2
	 */


	function mul(out, m1, m2) {
	  // Consider matrix.mul(m, m2, m);
	  // where out is the same as m2.
	  // So use temp variable to escape error.
	  var out0 = m1[0] * m2[0] + m1[2] * m2[1];
	  var out1 = m1[1] * m2[0] + m1[3] * m2[1];
	  var out2 = m1[0] * m2[2] + m1[2] * m2[3];
	  var out3 = m1[1] * m2[2] + m1[3] * m2[3];
	  var out4 = m1[0] * m2[4] + m1[2] * m2[5] + m1[4];
	  var out5 = m1[1] * m2[4] + m1[3] * m2[5] + m1[5];
	  out[0] = out0;
	  out[1] = out1;
	  out[2] = out2;
	  out[3] = out3;
	  out[4] = out4;
	  out[5] = out5;
	  return out;
	}
	/**
	 * 平移变换
	 * @param {Float32Array|Array.<number>} out
	 * @param {Float32Array|Array.<number>} a
	 * @param {Float32Array|Array.<number>} v
	 */


	function translate(out, a, v) {
	  out[0] = a[0];
	  out[1] = a[1];
	  out[2] = a[2];
	  out[3] = a[3];
	  out[4] = a[4] + v[0];
	  out[5] = a[5] + v[1];
	  return out;
	}
	/**
	 * 旋转变换
	 * @param {Float32Array|Array.<number>} out
	 * @param {Float32Array|Array.<number>} a
	 * @param {number} rad
	 */


	function rotate(out, a, rad) {
	  var aa = a[0];
	  var ac = a[2];
	  var atx = a[4];
	  var ab = a[1];
	  var ad = a[3];
	  var aty = a[5];
	  var st = Math.sin(rad);
	  var ct = Math.cos(rad);
	  out[0] = aa * ct + ab * st;
	  out[1] = -aa * st + ab * ct;
	  out[2] = ac * ct + ad * st;
	  out[3] = -ac * st + ct * ad;
	  out[4] = ct * atx + st * aty;
	  out[5] = ct * aty - st * atx;
	  return out;
	}
	/**
	 * 缩放变换
	 * @param {Float32Array|Array.<number>} out
	 * @param {Float32Array|Array.<number>} a
	 * @param {Float32Array|Array.<number>} v
	 */


	function scale(out, a, v) {
	  var vx = v[0];
	  var vy = v[1];
	  out[0] = a[0] * vx;
	  out[1] = a[1] * vy;
	  out[2] = a[2] * vx;
	  out[3] = a[3] * vy;
	  out[4] = a[4] * vx;
	  out[5] = a[5] * vy;
	  return out;
	}
	/**
	 * 求逆矩阵
	 * @param {Float32Array|Array.<number>} out
	 * @param {Float32Array|Array.<number>} a
	 */


	function invert(out, a) {
	  var aa = a[0];
	  var ac = a[2];
	  var atx = a[4];
	  var ab = a[1];
	  var ad = a[3];
	  var aty = a[5];
	  var det = aa * ad - ab * ac;

	  if (!det) {
	    return null;
	  }

	  det = 1.0 / det;
	  out[0] = ad * det;
	  out[1] = -ab * det;
	  out[2] = -ac * det;
	  out[3] = aa * det;
	  out[4] = (ac * aty - ad * atx) * det;
	  out[5] = (ab * atx - aa * aty) * det;
	  return out;
	}

	exports.create = create;
	exports.identity = identity;
	exports.copy = copy;
	exports.mul = mul;
	exports.translate = translate;
	exports.rotate = rotate;
	exports.scale = scale;
	exports.invert = invert;

/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	var Animator = __webpack_require__(177);

	var log = __webpack_require__(182);

	var _util = __webpack_require__(166);

	var isString = _util.isString;
	var isFunction = _util.isFunction;
	var isObject = _util.isObject;
	var isArrayLike = _util.isArrayLike;
	var indexOf = _util.indexOf;

	/**
	 * @alias modue:zrender/mixin/Animatable
	 * @constructor
	 */
	var Animatable = function () {
	  /**
	   * @type {Array.<module:zrender/animation/Animator>}
	   * @readOnly
	   */
	  this.animators = [];
	};

	Animatable.prototype = {
	  constructor: Animatable,

	  /**
	   * 动画
	   *
	   * @param {string} path The path to fetch value from object, like 'a.b.c'.
	   * @param {boolean} [loop] Whether to loop animation.
	   * @return {module:zrender/animation/Animator}
	   * @example:
	   *     el.animate('style', false)
	   *         .when(1000, {x: 10} )
	   *         .done(function(){ // Animation done })
	   *         .start()
	   */
	  animate: function (path, loop) {
	    var target;
	    var animatingShape = false;
	    var el = this;
	    var zr = this.__zr;

	    if (path) {
	      var pathSplitted = path.split('.');
	      var prop = el; // If animating shape

	      animatingShape = pathSplitted[0] === 'shape';

	      for (var i = 0, l = pathSplitted.length; i < l; i++) {
	        if (!prop) {
	          continue;
	        }

	        prop = prop[pathSplitted[i]];
	      }

	      if (prop) {
	        target = prop;
	      }
	    } else {
	      target = el;
	    }

	    if (!target) {
	      log('Property "' + path + '" is not existed in element ' + el.id);
	      return;
	    }

	    var animators = el.animators;
	    var animator = new Animator(target, loop);
	    animator.during(function (target) {
	      el.dirty(animatingShape);
	    }).done(function () {
	      // FIXME Animator will not be removed if use `Animator#stop` to stop animation
	      animators.splice(indexOf(animators, animator), 1);
	    });
	    animators.push(animator); // If animate after added to the zrender

	    if (zr) {
	      zr.animation.addAnimator(animator);
	    }

	    return animator;
	  },

	  /**
	   * 停止动画
	   * @param {boolean} forwardToLast If move to last frame before stop
	   */
	  stopAnimation: function (forwardToLast) {
	    var animators = this.animators;
	    var len = animators.length;

	    for (var i = 0; i < len; i++) {
	      animators[i].stop(forwardToLast);
	    }

	    animators.length = 0;
	    return this;
	  },

	  /**
	   * Caution: this method will stop previous animation.
	   * So do not use this method to one element twice before
	   * animation starts, unless you know what you are doing.
	   * @param {Object} target
	   * @param {number} [time=500] Time in ms
	   * @param {string} [easing='linear']
	   * @param {number} [delay=0]
	   * @param {Function} [callback]
	   * @param {Function} [forceAnimate] Prevent stop animation and callback
	   *        immediently when target values are the same as current values.
	   *
	   * @example
	   *  // Animate position
	   *  el.animateTo({
	   *      position: [10, 10]
	   *  }, function () { // done })
	   *
	   *  // Animate shape, style and position in 100ms, delayed 100ms, with cubicOut easing
	   *  el.animateTo({
	   *      shape: {
	   *          width: 500
	   *      },
	   *      style: {
	   *          fill: 'red'
	   *      }
	   *      position: [10, 10]
	   *  }, 100, 100, 'cubicOut', function () { // done })
	   */
	  // TODO Return animation key
	  animateTo: function (target, time, delay, easing, callback, forceAnimate) {
	    // animateTo(target, time, easing, callback);
	    if (isString(delay)) {
	      callback = easing;
	      easing = delay;
	      delay = 0;
	    } // animateTo(target, time, delay, callback);
	    else if (isFunction(easing)) {
	        callback = easing;
	        easing = 'linear';
	        delay = 0;
	      } // animateTo(target, time, callback);
	      else if (isFunction(delay)) {
	          callback = delay;
	          delay = 0;
	        } // animateTo(target, callback)
	        else if (isFunction(time)) {
	            callback = time;
	            time = 500;
	          } // animateTo(target)
	          else if (!time) {
	              time = 500;
	            } // Stop all previous animations


	    this.stopAnimation();

	    this._animateToShallow('', this, target, time, delay); // Animators may be removed immediately after start
	    // if there is nothing to animate


	    var animators = this.animators.slice();
	    var count = animators.length;

	    function done() {
	      count--;

	      if (!count) {
	        callback && callback();
	      }
	    } // No animators. This should be checked before animators[i].start(),
	    // because 'done' may be executed immediately if no need to animate.


	    if (!count) {
	      callback && callback();
	    } // Start after all animators created
	    // Incase any animator is done immediately when all animation properties are not changed


	    for (var i = 0; i < animators.length; i++) {
	      animators[i].done(done).start(easing, forceAnimate);
	    }
	  },

	  /**
	   * @private
	   * @param {string} path=''
	   * @param {Object} source=this
	   * @param {Object} target
	   * @param {number} [time=500]
	   * @param {number} [delay=0]
	   *
	   * @example
	   *  // Animate position
	   *  el._animateToShallow({
	   *      position: [10, 10]
	   *  })
	   *
	   *  // Animate shape, style and position in 100ms, delayed 100ms
	   *  el._animateToShallow({
	   *      shape: {
	   *          width: 500
	   *      },
	   *      style: {
	   *          fill: 'red'
	   *      }
	   *      position: [10, 10]
	   *  }, 100, 100)
	   */
	  _animateToShallow: function (path, source, target, time, delay) {
	    var objShallow = {};
	    var propertyCount = 0;

	    for (var name in target) {
	      if (!target.hasOwnProperty(name)) {
	        continue;
	      }

	      if (source[name] != null) {
	        if (isObject(target[name]) && !isArrayLike(target[name])) {
	          this._animateToShallow(path ? path + '.' + name : name, source[name], target[name], time, delay);
	        } else {
	          objShallow[name] = target[name];
	          propertyCount++;
	        }
	      } else if (target[name] != null) {
	        // Attr directly if not has property
	        // FIXME, if some property not needed for element ?
	        if (!path) {
	          this.attr(name, target[name]);
	        } else {
	          // Shape or style
	          var props = {};
	          props[path] = {};
	          props[path][name] = target[name];
	          this.attr(props);
	        }
	      }
	    }

	    if (propertyCount > 0) {
	      this.animate(path, false).when(time == null ? 500 : time, objShallow).delay(delay || 0);
	    }

	    return this;
	  }
	};
	var _default = Animatable;
	module.exports = _default;

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	var Clip = __webpack_require__(178);

	var color = __webpack_require__(180);

	var _util = __webpack_require__(166);

	var isArrayLike = _util.isArrayLike;

	/**
	 * @module echarts/animation/Animator
	 */
	var arraySlice = Array.prototype.slice;

	function defaultGetter(target, key) {
	  return target[key];
	}

	function defaultSetter(target, key, value) {
	  target[key] = value;
	}
	/**
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} percent
	 * @return {number}
	 */


	function interpolateNumber(p0, p1, percent) {
	  return (p1 - p0) * percent + p0;
	}
	/**
	 * @param  {string} p0
	 * @param  {string} p1
	 * @param  {number} percent
	 * @return {string}
	 */


	function interpolateString(p0, p1, percent) {
	  return percent > 0.5 ? p1 : p0;
	}
	/**
	 * @param  {Array} p0
	 * @param  {Array} p1
	 * @param  {number} percent
	 * @param  {Array} out
	 * @param  {number} arrDim
	 */


	function interpolateArray(p0, p1, percent, out, arrDim) {
	  var len = p0.length;

	  if (arrDim == 1) {
	    for (var i = 0; i < len; i++) {
	      out[i] = interpolateNumber(p0[i], p1[i], percent);
	    }
	  } else {
	    var len2 = len && p0[0].length;

	    for (var i = 0; i < len; i++) {
	      for (var j = 0; j < len2; j++) {
	        out[i][j] = interpolateNumber(p0[i][j], p1[i][j], percent);
	      }
	    }
	  }
	} // arr0 is source array, arr1 is target array.
	// Do some preprocess to avoid error happened when interpolating from arr0 to arr1


	function fillArr(arr0, arr1, arrDim) {
	  var arr0Len = arr0.length;
	  var arr1Len = arr1.length;

	  if (arr0Len !== arr1Len) {
	    // FIXME Not work for TypedArray
	    var isPreviousLarger = arr0Len > arr1Len;

	    if (isPreviousLarger) {
	      // Cut the previous
	      arr0.length = arr1Len;
	    } else {
	      // Fill the previous
	      for (var i = arr0Len; i < arr1Len; i++) {
	        arr0.push(arrDim === 1 ? arr1[i] : arraySlice.call(arr1[i]));
	      }
	    }
	  } // Handling NaN value


	  var len2 = arr0[0] && arr0[0].length;

	  for (var i = 0; i < arr0.length; i++) {
	    if (arrDim === 1) {
	      if (isNaN(arr0[i])) {
	        arr0[i] = arr1[i];
	      }
	    } else {
	      for (var j = 0; j < len2; j++) {
	        if (isNaN(arr0[i][j])) {
	          arr0[i][j] = arr1[i][j];
	        }
	      }
	    }
	  }
	}
	/**
	 * @param  {Array} arr0
	 * @param  {Array} arr1
	 * @param  {number} arrDim
	 * @return {boolean}
	 */


	function isArraySame(arr0, arr1, arrDim) {
	  if (arr0 === arr1) {
	    return true;
	  }

	  var len = arr0.length;

	  if (len !== arr1.length) {
	    return false;
	  }

	  if (arrDim === 1) {
	    for (var i = 0; i < len; i++) {
	      if (arr0[i] !== arr1[i]) {
	        return false;
	      }
	    }
	  } else {
	    var len2 = arr0[0].length;

	    for (var i = 0; i < len; i++) {
	      for (var j = 0; j < len2; j++) {
	        if (arr0[i][j] !== arr1[i][j]) {
	          return false;
	        }
	      }
	    }
	  }

	  return true;
	}
	/**
	 * Catmull Rom interpolate array
	 * @param  {Array} p0
	 * @param  {Array} p1
	 * @param  {Array} p2
	 * @param  {Array} p3
	 * @param  {number} t
	 * @param  {number} t2
	 * @param  {number} t3
	 * @param  {Array} out
	 * @param  {number} arrDim
	 */


	function catmullRomInterpolateArray(p0, p1, p2, p3, t, t2, t3, out, arrDim) {
	  var len = p0.length;

	  if (arrDim == 1) {
	    for (var i = 0; i < len; i++) {
	      out[i] = catmullRomInterpolate(p0[i], p1[i], p2[i], p3[i], t, t2, t3);
	    }
	  } else {
	    var len2 = p0[0].length;

	    for (var i = 0; i < len; i++) {
	      for (var j = 0; j < len2; j++) {
	        out[i][j] = catmullRomInterpolate(p0[i][j], p1[i][j], p2[i][j], p3[i][j], t, t2, t3);
	      }
	    }
	  }
	}
	/**
	 * Catmull Rom interpolate number
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @param  {number} p3
	 * @param  {number} t
	 * @param  {number} t2
	 * @param  {number} t3
	 * @return {number}
	 */


	function catmullRomInterpolate(p0, p1, p2, p3, t, t2, t3) {
	  var v0 = (p2 - p0) * 0.5;
	  var v1 = (p3 - p1) * 0.5;
	  return (2 * (p1 - p2) + v0 + v1) * t3 + (-3 * (p1 - p2) - 2 * v0 - v1) * t2 + v0 * t + p1;
	}

	function cloneValue(value) {
	  if (isArrayLike(value)) {
	    var len = value.length;

	    if (isArrayLike(value[0])) {
	      var ret = [];

	      for (var i = 0; i < len; i++) {
	        ret.push(arraySlice.call(value[i]));
	      }

	      return ret;
	    }

	    return arraySlice.call(value);
	  }

	  return value;
	}

	function rgba2String(rgba) {
	  rgba[0] = Math.floor(rgba[0]);
	  rgba[1] = Math.floor(rgba[1]);
	  rgba[2] = Math.floor(rgba[2]);
	  return 'rgba(' + rgba.join(',') + ')';
	}

	function getArrayDim(keyframes) {
	  var lastValue = keyframes[keyframes.length - 1].value;
	  return isArrayLike(lastValue && lastValue[0]) ? 2 : 1;
	}

	function createTrackClip(animator, easing, oneTrackDone, keyframes, propName, forceAnimate) {
	  var getter = animator._getter;
	  var setter = animator._setter;
	  var useSpline = easing === 'spline';
	  var trackLen = keyframes.length;

	  if (!trackLen) {
	    return;
	  } // Guess data type


	  var firstVal = keyframes[0].value;
	  var isValueArray = isArrayLike(firstVal);
	  var isValueColor = false;
	  var isValueString = false; // For vertices morphing

	  var arrDim = isValueArray ? getArrayDim(keyframes) : 0;
	  var trackMaxTime; // Sort keyframe as ascending

	  keyframes.sort(function (a, b) {
	    return a.time - b.time;
	  });
	  trackMaxTime = keyframes[trackLen - 1].time; // Percents of each keyframe

	  var kfPercents = []; // Value of each keyframe

	  var kfValues = [];
	  var prevValue = keyframes[0].value;
	  var isAllValueEqual = true;

	  for (var i = 0; i < trackLen; i++) {
	    kfPercents.push(keyframes[i].time / trackMaxTime); // Assume value is a color when it is a string

	    var value = keyframes[i].value; // Check if value is equal, deep check if value is array

	    if (!(isValueArray && isArraySame(value, prevValue, arrDim) || !isValueArray && value === prevValue)) {
	      isAllValueEqual = false;
	    }

	    prevValue = value; // Try converting a string to a color array

	    if (typeof value == 'string') {
	      var colorArray = color.parse(value);

	      if (colorArray) {
	        value = colorArray;
	        isValueColor = true;
	      } else {
	        isValueString = true;
	      }
	    }

	    kfValues.push(value);
	  }

	  if (!forceAnimate && isAllValueEqual) {
	    return;
	  }

	  var lastValue = kfValues[trackLen - 1]; // Polyfill array and NaN value

	  for (var i = 0; i < trackLen - 1; i++) {
	    if (isValueArray) {
	      fillArr(kfValues[i], lastValue, arrDim);
	    } else {
	      if (isNaN(kfValues[i]) && !isNaN(lastValue) && !isValueString && !isValueColor) {
	        kfValues[i] = lastValue;
	      }
	    }
	  }

	  isValueArray && fillArr(getter(animator._target, propName), lastValue, arrDim); // Cache the key of last frame to speed up when
	  // animation playback is sequency

	  var lastFrame = 0;
	  var lastFramePercent = 0;
	  var start;
	  var w;
	  var p0;
	  var p1;
	  var p2;
	  var p3;

	  if (isValueColor) {
	    var rgba = [0, 0, 0, 0];
	  }

	  var onframe = function (target, percent) {
	    // Find the range keyframes
	    // kf1-----kf2---------current--------kf3
	    // find kf2 and kf3 and do interpolation
	    var frame; // In the easing function like elasticOut, percent may less than 0

	    if (percent < 0) {
	      frame = 0;
	    } else if (percent < lastFramePercent) {
	      // Start from next key
	      // PENDING start from lastFrame ?
	      start = Math.min(lastFrame + 1, trackLen - 1);

	      for (frame = start; frame >= 0; frame--) {
	        if (kfPercents[frame] <= percent) {
	          break;
	        }
	      } // PENDING really need to do this ?


	      frame = Math.min(frame, trackLen - 2);
	    } else {
	      for (frame = lastFrame; frame < trackLen; frame++) {
	        if (kfPercents[frame] > percent) {
	          break;
	        }
	      }

	      frame = Math.min(frame - 1, trackLen - 2);
	    }

	    lastFrame = frame;
	    lastFramePercent = percent;
	    var range = kfPercents[frame + 1] - kfPercents[frame];

	    if (range === 0) {
	      return;
	    } else {
	      w = (percent - kfPercents[frame]) / range;
	    }

	    if (useSpline) {
	      p1 = kfValues[frame];
	      p0 = kfValues[frame === 0 ? frame : frame - 1];
	      p2 = kfValues[frame > trackLen - 2 ? trackLen - 1 : frame + 1];
	      p3 = kfValues[frame > trackLen - 3 ? trackLen - 1 : frame + 2];

	      if (isValueArray) {
	        catmullRomInterpolateArray(p0, p1, p2, p3, w, w * w, w * w * w, getter(target, propName), arrDim);
	      } else {
	        var value;

	        if (isValueColor) {
	          value = catmullRomInterpolateArray(p0, p1, p2, p3, w, w * w, w * w * w, rgba, 1);
	          value = rgba2String(rgba);
	        } else if (isValueString) {
	          // String is step(0.5)
	          return interpolateString(p1, p2, w);
	        } else {
	          value = catmullRomInterpolate(p0, p1, p2, p3, w, w * w, w * w * w);
	        }

	        setter(target, propName, value);
	      }
	    } else {
	      if (isValueArray) {
	        interpolateArray(kfValues[frame], kfValues[frame + 1], w, getter(target, propName), arrDim);
	      } else {
	        var value;

	        if (isValueColor) {
	          interpolateArray(kfValues[frame], kfValues[frame + 1], w, rgba, 1);
	          value = rgba2String(rgba);
	        } else if (isValueString) {
	          // String is step(0.5)
	          return interpolateString(kfValues[frame], kfValues[frame + 1], w);
	        } else {
	          value = interpolateNumber(kfValues[frame], kfValues[frame + 1], w);
	        }

	        setter(target, propName, value);
	      }
	    }
	  };

	  var clip = new Clip({
	    target: animator._target,
	    life: trackMaxTime,
	    loop: animator._loop,
	    delay: animator._delay,
	    onframe: onframe,
	    ondestroy: oneTrackDone
	  });

	  if (easing && easing !== 'spline') {
	    clip.easing = easing;
	  }

	  return clip;
	}
	/**
	 * @alias module:zrender/animation/Animator
	 * @constructor
	 * @param {Object} target
	 * @param {boolean} loop
	 * @param {Function} getter
	 * @param {Function} setter
	 */


	var Animator = function (target, loop, getter, setter) {
	  this._tracks = {};
	  this._target = target;
	  this._loop = loop || false;
	  this._getter = getter || defaultGetter;
	  this._setter = setter || defaultSetter;
	  this._clipCount = 0;
	  this._delay = 0;
	  this._doneList = [];
	  this._onframeList = [];
	  this._clipList = [];
	};

	Animator.prototype = {
	  /**
	   * 设置动画关键帧
	   * @param  {number} time 关键帧时间，单位是ms
	   * @param  {Object} props 关键帧的属性值，key-value表示
	   * @return {module:zrender/animation/Animator}
	   */
	  when: function (time
	  /* ms */
	  , props) {
	    var tracks = this._tracks;

	    for (var propName in props) {
	      if (!props.hasOwnProperty(propName)) {
	        continue;
	      }

	      if (!tracks[propName]) {
	        tracks[propName] = []; // Invalid value

	        var value = this._getter(this._target, propName);

	        if (value == null) {
	          // zrLog('Invalid property ' + propName);
	          continue;
	        } // If time is 0
	        //  Then props is given initialize value
	        // Else
	        //  Initialize value from current prop value


	        if (time !== 0) {
	          tracks[propName].push({
	            time: 0,
	            value: cloneValue(value)
	          });
	        }
	      }

	      tracks[propName].push({
	        time: time,
	        value: props[propName]
	      });
	    }

	    return this;
	  },

	  /**
	   * 添加动画每一帧的回调函数
	   * @param  {Function} callback
	   * @return {module:zrender/animation/Animator}
	   */
	  during: function (callback) {
	    this._onframeList.push(callback);

	    return this;
	  },
	  pause: function () {
	    for (var i = 0; i < this._clipList.length; i++) {
	      this._clipList[i].pause();
	    }

	    this._paused = true;
	  },
	  resume: function () {
	    for (var i = 0; i < this._clipList.length; i++) {
	      this._clipList[i].resume();
	    }

	    this._paused = false;
	  },
	  isPaused: function () {
	    return !!this._paused;
	  },
	  _doneCallback: function () {
	    // Clear all tracks
	    this._tracks = {}; // Clear all clips

	    this._clipList.length = 0;
	    var doneList = this._doneList;
	    var len = doneList.length;

	    for (var i = 0; i < len; i++) {
	      doneList[i].call(this);
	    }
	  },

	  /**
	   * 开始执行动画
	   * @param  {string|Function} [easing]
	   *         动画缓动函数，详见{@link module:zrender/animation/easing}
	   * @param  {boolean} forceAnimate
	   * @return {module:zrender/animation/Animator}
	   */
	  start: function (easing, forceAnimate) {
	    var self = this;
	    var clipCount = 0;

	    var oneTrackDone = function () {
	      clipCount--;

	      if (!clipCount) {
	        self._doneCallback();
	      }
	    };

	    var lastClip;

	    for (var propName in this._tracks) {
	      if (!this._tracks.hasOwnProperty(propName)) {
	        continue;
	      }

	      var clip = createTrackClip(this, easing, oneTrackDone, this._tracks[propName], propName, forceAnimate);

	      if (clip) {
	        this._clipList.push(clip);

	        clipCount++; // If start after added to animation

	        if (this.animation) {
	          this.animation.addClip(clip);
	        }

	        lastClip = clip;
	      }
	    } // Add during callback on the last clip


	    if (lastClip) {
	      var oldOnFrame = lastClip.onframe;

	      lastClip.onframe = function (target, percent) {
	        oldOnFrame(target, percent);

	        for (var i = 0; i < self._onframeList.length; i++) {
	          self._onframeList[i](target, percent);
	        }
	      };
	    } // This optimization will help the case that in the upper application
	    // the view may be refreshed frequently, where animation will be
	    // called repeatly but nothing changed.


	    if (!clipCount) {
	      this._doneCallback();
	    }

	    return this;
	  },

	  /**
	   * 停止动画
	   * @param {boolean} forwardToLast If move to last frame before stop
	   */
	  stop: function (forwardToLast) {
	    var clipList = this._clipList;
	    var animation = this.animation;

	    for (var i = 0; i < clipList.length; i++) {
	      var clip = clipList[i];

	      if (forwardToLast) {
	        // Move to last frame before stop
	        clip.onframe(this._target, 1);
	      }

	      animation && animation.removeClip(clip);
	    }

	    clipList.length = 0;
	  },

	  /**
	   * 设置动画延迟开始的时间
	   * @param  {number} time 单位ms
	   * @return {module:zrender/animation/Animator}
	   */
	  delay: function (time) {
	    this._delay = time;
	    return this;
	  },

	  /**
	   * 添加动画结束的回调
	   * @param  {Function} cb
	   * @return {module:zrender/animation/Animator}
	   */
	  done: function (cb) {
	    if (cb) {
	      this._doneList.push(cb);
	    }

	    return this;
	  },

	  /**
	   * @return {Array.<module:zrender/animation/Clip>}
	   */
	  getClips: function () {
	    return this._clipList;
	  }
	};
	var _default = Animator;
	module.exports = _default;

/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	var easingFuncs = __webpack_require__(179);

	/**
	 * 动画主控制器
	 * @config target 动画对象，可以是数组，如果是数组的话会批量分发onframe等事件
	 * @config life(1000) 动画时长
	 * @config delay(0) 动画延迟时间
	 * @config loop(true)
	 * @config gap(0) 循环的间隔时间
	 * @config onframe
	 * @config easing(optional)
	 * @config ondestroy(optional)
	 * @config onrestart(optional)
	 *
	 * TODO pause
	 */
	function Clip(options) {
	  this._target = options.target; // 生命周期

	  this._life = options.life || 1000; // 延时

	  this._delay = options.delay || 0; // 开始时间
	  // this._startTime = new Date().getTime() + this._delay;// 单位毫秒

	  this._initialized = false; // 是否循环

	  this.loop = options.loop == null ? false : options.loop;
	  this.gap = options.gap || 0;
	  this.easing = options.easing || 'Linear';
	  this.onframe = options.onframe;
	  this.ondestroy = options.ondestroy;
	  this.onrestart = options.onrestart;
	  this._pausedTime = 0;
	  this._paused = false;
	}

	Clip.prototype = {
	  constructor: Clip,
	  step: function (globalTime, deltaTime) {
	    // Set startTime on first step, or _startTime may has milleseconds different between clips
	    // PENDING
	    if (!this._initialized) {
	      this._startTime = globalTime + this._delay;
	      this._initialized = true;
	    }

	    if (this._paused) {
	      this._pausedTime += deltaTime;
	      return;
	    }

	    var percent = (globalTime - this._startTime - this._pausedTime) / this._life; // 还没开始

	    if (percent < 0) {
	      return;
	    }

	    percent = Math.min(percent, 1);
	    var easing = this.easing;
	    var easingFunc = typeof easing == 'string' ? easingFuncs[easing] : easing;
	    var schedule = typeof easingFunc === 'function' ? easingFunc(percent) : percent;
	    this.fire('frame', schedule); // 结束

	    if (percent == 1) {
	      if (this.loop) {
	        this.restart(globalTime); // 重新开始周期
	        // 抛出而不是直接调用事件直到 stage.update 后再统一调用这些事件

	        return 'restart';
	      } // 动画完成将这个控制器标识为待删除
	      // 在Animation.update中进行批量删除


	      this._needsRemove = true;
	      return 'destroy';
	    }

	    return null;
	  },
	  restart: function (globalTime) {
	    var remainder = (globalTime - this._startTime - this._pausedTime) % this._life;
	    this._startTime = globalTime - remainder + this.gap;
	    this._pausedTime = 0;
	    this._needsRemove = false;
	  },
	  fire: function (eventType, arg) {
	    eventType = 'on' + eventType;

	    if (this[eventType]) {
	      this[eventType](this._target, arg);
	    }
	  },
	  pause: function () {
	    this._paused = true;
	  },
	  resume: function () {
	    this._paused = false;
	  }
	};
	var _default = Clip;
	module.exports = _default;

/***/ },
/* 179 */
/***/ function(module, exports) {

	/**
	 * 缓动代码来自 https://github.com/sole/tween.js/blob/master/src/Tween.js
	 * @see http://sole.github.io/tween.js/examples/03_graphs.html
	 * @exports zrender/animation/easing
	 */
	var easing = {
	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  linear: function (k) {
	    return k;
	  },

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  quadraticIn: function (k) {
	    return k * k;
	  },

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  quadraticOut: function (k) {
	    return k * (2 - k);
	  },

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  quadraticInOut: function (k) {
	    if ((k *= 2) < 1) {
	      return 0.5 * k * k;
	    }

	    return -0.5 * (--k * (k - 2) - 1);
	  },
	  // 三次方的缓动（t^3）

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  cubicIn: function (k) {
	    return k * k * k;
	  },

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  cubicOut: function (k) {
	    return --k * k * k + 1;
	  },

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  cubicInOut: function (k) {
	    if ((k *= 2) < 1) {
	      return 0.5 * k * k * k;
	    }

	    return 0.5 * ((k -= 2) * k * k + 2);
	  },
	  // 四次方的缓动（t^4）

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  quarticIn: function (k) {
	    return k * k * k * k;
	  },

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  quarticOut: function (k) {
	    return 1 - --k * k * k * k;
	  },

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  quarticInOut: function (k) {
	    if ((k *= 2) < 1) {
	      return 0.5 * k * k * k * k;
	    }

	    return -0.5 * ((k -= 2) * k * k * k - 2);
	  },
	  // 五次方的缓动（t^5）

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  quinticIn: function (k) {
	    return k * k * k * k * k;
	  },

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  quinticOut: function (k) {
	    return --k * k * k * k * k + 1;
	  },

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  quinticInOut: function (k) {
	    if ((k *= 2) < 1) {
	      return 0.5 * k * k * k * k * k;
	    }

	    return 0.5 * ((k -= 2) * k * k * k * k + 2);
	  },
	  // 正弦曲线的缓动（sin(t)）

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  sinusoidalIn: function (k) {
	    return 1 - Math.cos(k * Math.PI / 2);
	  },

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  sinusoidalOut: function (k) {
	    return Math.sin(k * Math.PI / 2);
	  },

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  sinusoidalInOut: function (k) {
	    return 0.5 * (1 - Math.cos(Math.PI * k));
	  },
	  // 指数曲线的缓动（2^t）

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  exponentialIn: function (k) {
	    return k === 0 ? 0 : Math.pow(1024, k - 1);
	  },

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  exponentialOut: function (k) {
	    return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);
	  },

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  exponentialInOut: function (k) {
	    if (k === 0) {
	      return 0;
	    }

	    if (k === 1) {
	      return 1;
	    }

	    if ((k *= 2) < 1) {
	      return 0.5 * Math.pow(1024, k - 1);
	    }

	    return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);
	  },
	  // 圆形曲线的缓动（sqrt(1-t^2)）

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  circularIn: function (k) {
	    return 1 - Math.sqrt(1 - k * k);
	  },

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  circularOut: function (k) {
	    return Math.sqrt(1 - --k * k);
	  },

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  circularInOut: function (k) {
	    if ((k *= 2) < 1) {
	      return -0.5 * (Math.sqrt(1 - k * k) - 1);
	    }

	    return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);
	  },
	  // 创建类似于弹簧在停止前来回振荡的动画

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  elasticIn: function (k) {
	    var s;
	    var a = 0.1;
	    var p = 0.4;

	    if (k === 0) {
	      return 0;
	    }

	    if (k === 1) {
	      return 1;
	    }

	    if (!a || a < 1) {
	      a = 1;
	      s = p / 4;
	    } else {
	      s = p * Math.asin(1 / a) / (2 * Math.PI);
	    }

	    return -(a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));
	  },

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  elasticOut: function (k) {
	    var s;
	    var a = 0.1;
	    var p = 0.4;

	    if (k === 0) {
	      return 0;
	    }

	    if (k === 1) {
	      return 1;
	    }

	    if (!a || a < 1) {
	      a = 1;
	      s = p / 4;
	    } else {
	      s = p * Math.asin(1 / a) / (2 * Math.PI);
	    }

	    return a * Math.pow(2, -10 * k) * Math.sin((k - s) * (2 * Math.PI) / p) + 1;
	  },

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  elasticInOut: function (k) {
	    var s;
	    var a = 0.1;
	    var p = 0.4;

	    if (k === 0) {
	      return 0;
	    }

	    if (k === 1) {
	      return 1;
	    }

	    if (!a || a < 1) {
	      a = 1;
	      s = p / 4;
	    } else {
	      s = p * Math.asin(1 / a) / (2 * Math.PI);
	    }

	    if ((k *= 2) < 1) {
	      return -0.5 * (a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));
	    }

	    return a * Math.pow(2, -10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1;
	  },
	  // 在某一动画开始沿指示的路径进行动画处理前稍稍收回该动画的移动

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  backIn: function (k) {
	    var s = 1.70158;
	    return k * k * ((s + 1) * k - s);
	  },

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  backOut: function (k) {
	    var s = 1.70158;
	    return --k * k * ((s + 1) * k + s) + 1;
	  },

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  backInOut: function (k) {
	    var s = 1.70158 * 1.525;

	    if ((k *= 2) < 1) {
	      return 0.5 * (k * k * ((s + 1) * k - s));
	    }

	    return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);
	  },
	  // 创建弹跳效果

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  bounceIn: function (k) {
	    return 1 - easing.bounceOut(1 - k);
	  },

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  bounceOut: function (k) {
	    if (k < 1 / 2.75) {
	      return 7.5625 * k * k;
	    } else if (k < 2 / 2.75) {
	      return 7.5625 * (k -= 1.5 / 2.75) * k + 0.75;
	    } else if (k < 2.5 / 2.75) {
	      return 7.5625 * (k -= 2.25 / 2.75) * k + 0.9375;
	    } else {
	      return 7.5625 * (k -= 2.625 / 2.75) * k + 0.984375;
	    }
	  },

	  /**
	  * @param {number} k
	  * @return {number}
	  */
	  bounceInOut: function (k) {
	    if (k < 0.5) {
	      return easing.bounceIn(k * 2) * 0.5;
	    }

	    return easing.bounceOut(k * 2 - 1) * 0.5 + 0.5;
	  }
	};
	var _default = easing;
	module.exports = _default;

/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	var LRU = __webpack_require__(181);

	var kCSSColorTable = {
	  'transparent': [0, 0, 0, 0],
	  'aliceblue': [240, 248, 255, 1],
	  'antiquewhite': [250, 235, 215, 1],
	  'aqua': [0, 255, 255, 1],
	  'aquamarine': [127, 255, 212, 1],
	  'azure': [240, 255, 255, 1],
	  'beige': [245, 245, 220, 1],
	  'bisque': [255, 228, 196, 1],
	  'black': [0, 0, 0, 1],
	  'blanchedalmond': [255, 235, 205, 1],
	  'blue': [0, 0, 255, 1],
	  'blueviolet': [138, 43, 226, 1],
	  'brown': [165, 42, 42, 1],
	  'burlywood': [222, 184, 135, 1],
	  'cadetblue': [95, 158, 160, 1],
	  'chartreuse': [127, 255, 0, 1],
	  'chocolate': [210, 105, 30, 1],
	  'coral': [255, 127, 80, 1],
	  'cornflowerblue': [100, 149, 237, 1],
	  'cornsilk': [255, 248, 220, 1],
	  'crimson': [220, 20, 60, 1],
	  'cyan': [0, 255, 255, 1],
	  'darkblue': [0, 0, 139, 1],
	  'darkcyan': [0, 139, 139, 1],
	  'darkgoldenrod': [184, 134, 11, 1],
	  'darkgray': [169, 169, 169, 1],
	  'darkgreen': [0, 100, 0, 1],
	  'darkgrey': [169, 169, 169, 1],
	  'darkkhaki': [189, 183, 107, 1],
	  'darkmagenta': [139, 0, 139, 1],
	  'darkolivegreen': [85, 107, 47, 1],
	  'darkorange': [255, 140, 0, 1],
	  'darkorchid': [153, 50, 204, 1],
	  'darkred': [139, 0, 0, 1],
	  'darksalmon': [233, 150, 122, 1],
	  'darkseagreen': [143, 188, 143, 1],
	  'darkslateblue': [72, 61, 139, 1],
	  'darkslategray': [47, 79, 79, 1],
	  'darkslategrey': [47, 79, 79, 1],
	  'darkturquoise': [0, 206, 209, 1],
	  'darkviolet': [148, 0, 211, 1],
	  'deeppink': [255, 20, 147, 1],
	  'deepskyblue': [0, 191, 255, 1],
	  'dimgray': [105, 105, 105, 1],
	  'dimgrey': [105, 105, 105, 1],
	  'dodgerblue': [30, 144, 255, 1],
	  'firebrick': [178, 34, 34, 1],
	  'floralwhite': [255, 250, 240, 1],
	  'forestgreen': [34, 139, 34, 1],
	  'fuchsia': [255, 0, 255, 1],
	  'gainsboro': [220, 220, 220, 1],
	  'ghostwhite': [248, 248, 255, 1],
	  'gold': [255, 215, 0, 1],
	  'goldenrod': [218, 165, 32, 1],
	  'gray': [128, 128, 128, 1],
	  'green': [0, 128, 0, 1],
	  'greenyellow': [173, 255, 47, 1],
	  'grey': [128, 128, 128, 1],
	  'honeydew': [240, 255, 240, 1],
	  'hotpink': [255, 105, 180, 1],
	  'indianred': [205, 92, 92, 1],
	  'indigo': [75, 0, 130, 1],
	  'ivory': [255, 255, 240, 1],
	  'khaki': [240, 230, 140, 1],
	  'lavender': [230, 230, 250, 1],
	  'lavenderblush': [255, 240, 245, 1],
	  'lawngreen': [124, 252, 0, 1],
	  'lemonchiffon': [255, 250, 205, 1],
	  'lightblue': [173, 216, 230, 1],
	  'lightcoral': [240, 128, 128, 1],
	  'lightcyan': [224, 255, 255, 1],
	  'lightgoldenrodyellow': [250, 250, 210, 1],
	  'lightgray': [211, 211, 211, 1],
	  'lightgreen': [144, 238, 144, 1],
	  'lightgrey': [211, 211, 211, 1],
	  'lightpink': [255, 182, 193, 1],
	  'lightsalmon': [255, 160, 122, 1],
	  'lightseagreen': [32, 178, 170, 1],
	  'lightskyblue': [135, 206, 250, 1],
	  'lightslategray': [119, 136, 153, 1],
	  'lightslategrey': [119, 136, 153, 1],
	  'lightsteelblue': [176, 196, 222, 1],
	  'lightyellow': [255, 255, 224, 1],
	  'lime': [0, 255, 0, 1],
	  'limegreen': [50, 205, 50, 1],
	  'linen': [250, 240, 230, 1],
	  'magenta': [255, 0, 255, 1],
	  'maroon': [128, 0, 0, 1],
	  'mediumaquamarine': [102, 205, 170, 1],
	  'mediumblue': [0, 0, 205, 1],
	  'mediumorchid': [186, 85, 211, 1],
	  'mediumpurple': [147, 112, 219, 1],
	  'mediumseagreen': [60, 179, 113, 1],
	  'mediumslateblue': [123, 104, 238, 1],
	  'mediumspringgreen': [0, 250, 154, 1],
	  'mediumturquoise': [72, 209, 204, 1],
	  'mediumvioletred': [199, 21, 133, 1],
	  'midnightblue': [25, 25, 112, 1],
	  'mintcream': [245, 255, 250, 1],
	  'mistyrose': [255, 228, 225, 1],
	  'moccasin': [255, 228, 181, 1],
	  'navajowhite': [255, 222, 173, 1],
	  'navy': [0, 0, 128, 1],
	  'oldlace': [253, 245, 230, 1],
	  'olive': [128, 128, 0, 1],
	  'olivedrab': [107, 142, 35, 1],
	  'orange': [255, 165, 0, 1],
	  'orangered': [255, 69, 0, 1],
	  'orchid': [218, 112, 214, 1],
	  'palegoldenrod': [238, 232, 170, 1],
	  'palegreen': [152, 251, 152, 1],
	  'paleturquoise': [175, 238, 238, 1],
	  'palevioletred': [219, 112, 147, 1],
	  'papayawhip': [255, 239, 213, 1],
	  'peachpuff': [255, 218, 185, 1],
	  'peru': [205, 133, 63, 1],
	  'pink': [255, 192, 203, 1],
	  'plum': [221, 160, 221, 1],
	  'powderblue': [176, 224, 230, 1],
	  'purple': [128, 0, 128, 1],
	  'red': [255, 0, 0, 1],
	  'rosybrown': [188, 143, 143, 1],
	  'royalblue': [65, 105, 225, 1],
	  'saddlebrown': [139, 69, 19, 1],
	  'salmon': [250, 128, 114, 1],
	  'sandybrown': [244, 164, 96, 1],
	  'seagreen': [46, 139, 87, 1],
	  'seashell': [255, 245, 238, 1],
	  'sienna': [160, 82, 45, 1],
	  'silver': [192, 192, 192, 1],
	  'skyblue': [135, 206, 235, 1],
	  'slateblue': [106, 90, 205, 1],
	  'slategray': [112, 128, 144, 1],
	  'slategrey': [112, 128, 144, 1],
	  'snow': [255, 250, 250, 1],
	  'springgreen': [0, 255, 127, 1],
	  'steelblue': [70, 130, 180, 1],
	  'tan': [210, 180, 140, 1],
	  'teal': [0, 128, 128, 1],
	  'thistle': [216, 191, 216, 1],
	  'tomato': [255, 99, 71, 1],
	  'turquoise': [64, 224, 208, 1],
	  'violet': [238, 130, 238, 1],
	  'wheat': [245, 222, 179, 1],
	  'white': [255, 255, 255, 1],
	  'whitesmoke': [245, 245, 245, 1],
	  'yellow': [255, 255, 0, 1],
	  'yellowgreen': [154, 205, 50, 1]
	};

	function clampCssByte(i) {
	  // Clamp to integer 0 .. 255.
	  i = Math.round(i); // Seems to be what Chrome does (vs truncation).

	  return i < 0 ? 0 : i > 255 ? 255 : i;
	}

	function clampCssAngle(i) {
	  // Clamp to integer 0 .. 360.
	  i = Math.round(i); // Seems to be what Chrome does (vs truncation).

	  return i < 0 ? 0 : i > 360 ? 360 : i;
	}

	function clampCssFloat(f) {
	  // Clamp to float 0.0 .. 1.0.
	  return f < 0 ? 0 : f > 1 ? 1 : f;
	}

	function parseCssInt(str) {
	  // int or percentage.
	  if (str.length && str.charAt(str.length - 1) === '%') {
	    return clampCssByte(parseFloat(str) / 100 * 255);
	  }

	  return clampCssByte(parseInt(str, 10));
	}

	function parseCssFloat(str) {
	  // float or percentage.
	  if (str.length && str.charAt(str.length - 1) === '%') {
	    return clampCssFloat(parseFloat(str) / 100);
	  }

	  return clampCssFloat(parseFloat(str));
	}

	function cssHueToRgb(m1, m2, h) {
	  if (h < 0) {
	    h += 1;
	  } else if (h > 1) {
	    h -= 1;
	  }

	  if (h * 6 < 1) {
	    return m1 + (m2 - m1) * h * 6;
	  }

	  if (h * 2 < 1) {
	    return m2;
	  }

	  if (h * 3 < 2) {
	    return m1 + (m2 - m1) * (2 / 3 - h) * 6;
	  }

	  return m1;
	}

	function lerpNumber(a, b, p) {
	  return a + (b - a) * p;
	}

	function setRgba(out, r, g, b, a) {
	  out[0] = r;
	  out[1] = g;
	  out[2] = b;
	  out[3] = a;
	  return out;
	}

	function copyRgba(out, a) {
	  out[0] = a[0];
	  out[1] = a[1];
	  out[2] = a[2];
	  out[3] = a[3];
	  return out;
	}

	var colorCache = new LRU(20);
	var lastRemovedArr = null;

	function putToCache(colorStr, rgbaArr) {
	  // Reuse removed array
	  if (lastRemovedArr) {
	    copyRgba(lastRemovedArr, rgbaArr);
	  }

	  lastRemovedArr = colorCache.put(colorStr, lastRemovedArr || rgbaArr.slice());
	}
	/**
	 * @param {string} colorStr
	 * @param {Array.<number>} out
	 * @return {Array.<number>}
	 * @memberOf module:zrender/util/color
	 */


	function parse(colorStr, rgbaArr) {
	  if (!colorStr) {
	    return;
	  }

	  rgbaArr = rgbaArr || [];
	  var cached = colorCache.get(colorStr);

	  if (cached) {
	    return copyRgba(rgbaArr, cached);
	  } // colorStr may be not string


	  colorStr = colorStr + ''; // Remove all whitespace, not compliant, but should just be more accepting.

	  var str = colorStr.replace(/ /g, '').toLowerCase(); // Color keywords (and transparent) lookup.

	  if (str in kCSSColorTable) {
	    copyRgba(rgbaArr, kCSSColorTable[str]);
	    putToCache(colorStr, rgbaArr);
	    return rgbaArr;
	  } // #abc and #abc123 syntax.


	  if (str.charAt(0) === '#') {
	    if (str.length === 4) {
	      var iv = parseInt(str.substr(1), 16); // TODO(deanm): Stricter parsing.

	      if (!(iv >= 0 && iv <= 0xfff)) {
	        setRgba(rgbaArr, 0, 0, 0, 1);
	        return; // Covers NaN.
	      }

	      setRgba(rgbaArr, (iv & 0xf00) >> 4 | (iv & 0xf00) >> 8, iv & 0xf0 | (iv & 0xf0) >> 4, iv & 0xf | (iv & 0xf) << 4, 1);
	      putToCache(colorStr, rgbaArr);
	      return rgbaArr;
	    } else if (str.length === 7) {
	      var iv = parseInt(str.substr(1), 16); // TODO(deanm): Stricter parsing.

	      if (!(iv >= 0 && iv <= 0xffffff)) {
	        setRgba(rgbaArr, 0, 0, 0, 1);
	        return; // Covers NaN.
	      }

	      setRgba(rgbaArr, (iv & 0xff0000) >> 16, (iv & 0xff00) >> 8, iv & 0xff, 1);
	      putToCache(colorStr, rgbaArr);
	      return rgbaArr;
	    }

	    return;
	  }

	  var op = str.indexOf('('),
	      ep = str.indexOf(')');

	  if (op !== -1 && ep + 1 === str.length) {
	    var fname = str.substr(0, op);
	    var params = str.substr(op + 1, ep - (op + 1)).split(',');
	    var alpha = 1; // To allow case fallthrough.

	    switch (fname) {
	      case 'rgba':
	        if (params.length !== 4) {
	          setRgba(rgbaArr, 0, 0, 0, 1);
	          return;
	        }

	        alpha = parseCssFloat(params.pop());
	      // jshint ignore:line
	      // Fall through.

	      case 'rgb':
	        if (params.length !== 3) {
	          setRgba(rgbaArr, 0, 0, 0, 1);
	          return;
	        }

	        setRgba(rgbaArr, parseCssInt(params[0]), parseCssInt(params[1]), parseCssInt(params[2]), alpha);
	        putToCache(colorStr, rgbaArr);
	        return rgbaArr;

	      case 'hsla':
	        if (params.length !== 4) {
	          setRgba(rgbaArr, 0, 0, 0, 1);
	          return;
	        }

	        params[3] = parseCssFloat(params[3]);
	        hsla2rgba(params, rgbaArr);
	        putToCache(colorStr, rgbaArr);
	        return rgbaArr;

	      case 'hsl':
	        if (params.length !== 3) {
	          setRgba(rgbaArr, 0, 0, 0, 1);
	          return;
	        }

	        hsla2rgba(params, rgbaArr);
	        putToCache(colorStr, rgbaArr);
	        return rgbaArr;

	      default:
	        return;
	    }
	  }

	  setRgba(rgbaArr, 0, 0, 0, 1);
	  return;
	}
	/**
	 * @param {Array.<number>} hsla
	 * @param {Array.<number>} rgba
	 * @return {Array.<number>} rgba
	 */


	function hsla2rgba(hsla, rgba) {
	  var h = (parseFloat(hsla[0]) % 360 + 360) % 360 / 360; // 0 .. 1
	  // NOTE(deanm): According to the CSS spec s/l should only be
	  // percentages, but we don't bother and let float or percentage.

	  var s = parseCssFloat(hsla[1]);
	  var l = parseCssFloat(hsla[2]);
	  var m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;
	  var m1 = l * 2 - m2;
	  rgba = rgba || [];
	  setRgba(rgba, clampCssByte(cssHueToRgb(m1, m2, h + 1 / 3) * 255), clampCssByte(cssHueToRgb(m1, m2, h) * 255), clampCssByte(cssHueToRgb(m1, m2, h - 1 / 3) * 255), 1);

	  if (hsla.length === 4) {
	    rgba[3] = hsla[3];
	  }

	  return rgba;
	}
	/**
	 * @param {Array.<number>} rgba
	 * @return {Array.<number>} hsla
	 */


	function rgba2hsla(rgba) {
	  if (!rgba) {
	    return;
	  } // RGB from 0 to 255


	  var R = rgba[0] / 255;
	  var G = rgba[1] / 255;
	  var B = rgba[2] / 255;
	  var vMin = Math.min(R, G, B); // Min. value of RGB

	  var vMax = Math.max(R, G, B); // Max. value of RGB

	  var delta = vMax - vMin; // Delta RGB value

	  var L = (vMax + vMin) / 2;
	  var H;
	  var S; // HSL results from 0 to 1

	  if (delta === 0) {
	    H = 0;
	    S = 0;
	  } else {
	    if (L < 0.5) {
	      S = delta / (vMax + vMin);
	    } else {
	      S = delta / (2 - vMax - vMin);
	    }

	    var deltaR = ((vMax - R) / 6 + delta / 2) / delta;
	    var deltaG = ((vMax - G) / 6 + delta / 2) / delta;
	    var deltaB = ((vMax - B) / 6 + delta / 2) / delta;

	    if (R === vMax) {
	      H = deltaB - deltaG;
	    } else if (G === vMax) {
	      H = 1 / 3 + deltaR - deltaB;
	    } else if (B === vMax) {
	      H = 2 / 3 + deltaG - deltaR;
	    }

	    if (H < 0) {
	      H += 1;
	    }

	    if (H > 1) {
	      H -= 1;
	    }
	  }

	  var hsla = [H * 360, S, L];

	  if (rgba[3] != null) {
	    hsla.push(rgba[3]);
	  }

	  return hsla;
	}
	/**
	 * @param {string} color
	 * @param {number} level
	 * @return {string}
	 * @memberOf module:zrender/util/color
	 */


	function lift(color, level) {
	  var colorArr = parse(color);

	  if (colorArr) {
	    for (var i = 0; i < 3; i++) {
	      if (level < 0) {
	        colorArr[i] = colorArr[i] * (1 - level) | 0;
	      } else {
	        colorArr[i] = (255 - colorArr[i]) * level + colorArr[i] | 0;
	      }
	    }

	    return stringify(colorArr, colorArr.length === 4 ? 'rgba' : 'rgb');
	  }
	}
	/**
	 * @param {string} color
	 * @return {string}
	 * @memberOf module:zrender/util/color
	 */


	function toHex(color) {
	  var colorArr = parse(color);

	  if (colorArr) {
	    return ((1 << 24) + (colorArr[0] << 16) + (colorArr[1] << 8) + +colorArr[2]).toString(16).slice(1);
	  }
	}
	/**
	 * Map value to color. Faster than lerp methods because color is represented by rgba array.
	 * @param {number} normalizedValue A float between 0 and 1.
	 * @param {Array.<Array.<number>>} colors List of rgba color array
	 * @param {Array.<number>} [out] Mapped gba color array
	 * @return {Array.<number>} will be null/undefined if input illegal.
	 */


	function fastLerp(normalizedValue, colors, out) {
	  if (!(colors && colors.length) || !(normalizedValue >= 0 && normalizedValue <= 1)) {
	    return;
	  }

	  out = out || [];
	  var value = normalizedValue * (colors.length - 1);
	  var leftIndex = Math.floor(value);
	  var rightIndex = Math.ceil(value);
	  var leftColor = colors[leftIndex];
	  var rightColor = colors[rightIndex];
	  var dv = value - leftIndex;
	  out[0] = clampCssByte(lerpNumber(leftColor[0], rightColor[0], dv));
	  out[1] = clampCssByte(lerpNumber(leftColor[1], rightColor[1], dv));
	  out[2] = clampCssByte(lerpNumber(leftColor[2], rightColor[2], dv));
	  out[3] = clampCssFloat(lerpNumber(leftColor[3], rightColor[3], dv));
	  return out;
	}
	/**
	 * @deprecated
	 */


	var fastMapToColor = fastLerp;
	/**
	 * @param {number} normalizedValue A float between 0 and 1.
	 * @param {Array.<string>} colors Color list.
	 * @param {boolean=} fullOutput Default false.
	 * @return {(string|Object)} Result color. If fullOutput,
	 *                           return {color: ..., leftIndex: ..., rightIndex: ..., value: ...},
	 * @memberOf module:zrender/util/color
	 */

	function lerp(normalizedValue, colors, fullOutput) {
	  if (!(colors && colors.length) || !(normalizedValue >= 0 && normalizedValue <= 1)) {
	    return;
	  }

	  var value = normalizedValue * (colors.length - 1);
	  var leftIndex = Math.floor(value);
	  var rightIndex = Math.ceil(value);
	  var leftColor = parse(colors[leftIndex]);
	  var rightColor = parse(colors[rightIndex]);
	  var dv = value - leftIndex;
	  var color = stringify([clampCssByte(lerpNumber(leftColor[0], rightColor[0], dv)), clampCssByte(lerpNumber(leftColor[1], rightColor[1], dv)), clampCssByte(lerpNumber(leftColor[2], rightColor[2], dv)), clampCssFloat(lerpNumber(leftColor[3], rightColor[3], dv))], 'rgba');
	  return fullOutput ? {
	    color: color,
	    leftIndex: leftIndex,
	    rightIndex: rightIndex,
	    value: value
	  } : color;
	}
	/**
	 * @deprecated
	 */


	var mapToColor = lerp;
	/**
	 * @param {string} color
	 * @param {number=} h 0 ~ 360, ignore when null.
	 * @param {number=} s 0 ~ 1, ignore when null.
	 * @param {number=} l 0 ~ 1, ignore when null.
	 * @return {string} Color string in rgba format.
	 * @memberOf module:zrender/util/color
	 */

	function modifyHSL(color, h, s, l) {
	  color = parse(color);

	  if (color) {
	    color = rgba2hsla(color);
	    h != null && (color[0] = clampCssAngle(h));
	    s != null && (color[1] = parseCssFloat(s));
	    l != null && (color[2] = parseCssFloat(l));
	    return stringify(hsla2rgba(color), 'rgba');
	  }
	}
	/**
	 * @param {string} color
	 * @param {number=} alpha 0 ~ 1
	 * @return {string} Color string in rgba format.
	 * @memberOf module:zrender/util/color
	 */


	function modifyAlpha(color, alpha) {
	  color = parse(color);

	  if (color && alpha != null) {
	    color[3] = clampCssFloat(alpha);
	    return stringify(color, 'rgba');
	  }
	}
	/**
	 * @param {Array.<number>} arrColor like [12,33,44,0.4]
	 * @param {string} type 'rgba', 'hsva', ...
	 * @return {string} Result color. (If input illegal, return undefined).
	 */


	function stringify(arrColor, type) {
	  if (!arrColor || !arrColor.length) {
	    return;
	  }

	  var colorStr = arrColor[0] + ',' + arrColor[1] + ',' + arrColor[2];

	  if (type === 'rgba' || type === 'hsva' || type === 'hsla') {
	    colorStr += ',' + arrColor[3];
	  }

	  return type + '(' + colorStr + ')';
	}

	exports.parse = parse;
	exports.lift = lift;
	exports.toHex = toHex;
	exports.fastLerp = fastLerp;
	exports.fastMapToColor = fastMapToColor;
	exports.lerp = lerp;
	exports.mapToColor = mapToColor;
	exports.modifyHSL = modifyHSL;
	exports.modifyAlpha = modifyAlpha;
	exports.stringify = stringify;

/***/ },
/* 181 */
/***/ function(module, exports) {

	// Simple LRU cache use doubly linked list
	// @module zrender/core/LRU

	/**
	 * Simple double linked list. Compared with array, it has O(1) remove operation.
	 * @constructor
	 */
	var LinkedList = function () {
	  /**
	   * @type {module:zrender/core/LRU~Entry}
	   */
	  this.head = null;
	  /**
	   * @type {module:zrender/core/LRU~Entry}
	   */

	  this.tail = null;
	  this._len = 0;
	};

	var linkedListProto = LinkedList.prototype;
	/**
	 * Insert a new value at the tail
	 * @param  {} val
	 * @return {module:zrender/core/LRU~Entry}
	 */

	linkedListProto.insert = function (val) {
	  var entry = new Entry(val);
	  this.insertEntry(entry);
	  return entry;
	};
	/**
	 * Insert an entry at the tail
	 * @param  {module:zrender/core/LRU~Entry} entry
	 */


	linkedListProto.insertEntry = function (entry) {
	  if (!this.head) {
	    this.head = this.tail = entry;
	  } else {
	    this.tail.next = entry;
	    entry.prev = this.tail;
	    entry.next = null;
	    this.tail = entry;
	  }

	  this._len++;
	};
	/**
	 * Remove entry.
	 * @param  {module:zrender/core/LRU~Entry} entry
	 */


	linkedListProto.remove = function (entry) {
	  var prev = entry.prev;
	  var next = entry.next;

	  if (prev) {
	    prev.next = next;
	  } else {
	    // Is head
	    this.head = next;
	  }

	  if (next) {
	    next.prev = prev;
	  } else {
	    // Is tail
	    this.tail = prev;
	  }

	  entry.next = entry.prev = null;
	  this._len--;
	};
	/**
	 * @return {number}
	 */


	linkedListProto.len = function () {
	  return this._len;
	};
	/**
	 * Clear list
	 */


	linkedListProto.clear = function () {
	  this.head = this.tail = null;
	  this._len = 0;
	};
	/**
	 * @constructor
	 * @param {} val
	 */


	var Entry = function (val) {
	  /**
	   * @type {}
	   */
	  this.value = val;
	  /**
	   * @type {module:zrender/core/LRU~Entry}
	   */

	  this.next;
	  /**
	   * @type {module:zrender/core/LRU~Entry}
	   */

	  this.prev;
	};
	/**
	 * LRU Cache
	 * @constructor
	 * @alias module:zrender/core/LRU
	 */


	var LRU = function (maxSize) {
	  this._list = new LinkedList();
	  this._map = {};
	  this._maxSize = maxSize || 10;
	  this._lastRemovedEntry = null;
	};

	var LRUProto = LRU.prototype;
	/**
	 * @param  {string} key
	 * @param  {} value
	 * @return {} Removed value
	 */

	LRUProto.put = function (key, value) {
	  var list = this._list;
	  var map = this._map;
	  var removed = null;

	  if (map[key] == null) {
	    var len = list.len(); // Reuse last removed entry

	    var entry = this._lastRemovedEntry;

	    if (len >= this._maxSize && len > 0) {
	      // Remove the least recently used
	      var leastUsedEntry = list.head;
	      list.remove(leastUsedEntry);
	      delete map[leastUsedEntry.key];
	      removed = leastUsedEntry.value;
	      this._lastRemovedEntry = leastUsedEntry;
	    }

	    if (entry) {
	      entry.value = value;
	    } else {
	      entry = new Entry(value);
	    }

	    entry.key = key;
	    list.insertEntry(entry);
	    map[key] = entry;
	  }

	  return removed;
	};
	/**
	 * @param  {string} key
	 * @return {}
	 */


	LRUProto.get = function (key) {
	  var entry = this._map[key];
	  var list = this._list;

	  if (entry != null) {
	    // Put the latest used entry in the tail
	    if (entry !== list.tail) {
	      list.remove(entry);
	      list.insertEntry(entry);
	    }

	    return entry.value;
	  }
	};
	/**
	 * Clear the cache
	 */


	LRUProto.clear = function () {
	  this._list.clear();

	  this._map = {};
	};

	var _default = LRU;
	module.exports = _default;

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(183);

	var debugMode = _config.debugMode;

	var log = function () {};

	if (debugMode === 1) {
	  log = function () {
	    for (var k in arguments) {
	      throw new Error(arguments[k]);
	    }
	  };
	} else if (debugMode > 1) {
	  log = function () {
	    for (var k in arguments) {
	      console.log(arguments[k]);
	    }
	  };
	}

	var _default = log;
	module.exports = _default;

/***/ },
/* 183 */
/***/ function(module, exports) {

	var dpr = 1; // If in browser environment

	if (typeof window !== 'undefined') {
	  dpr = Math.max(window.devicePixelRatio || 1, 1);
	}
	/**
	 * config默认配置项
	 * @exports zrender/config
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 */

	/**
	 * debug日志选项：catchBrushException为true下有效
	 * 0 : 不生成debug数据，发布用
	 * 1 : 异常抛出，调试用
	 * 2 : 控制台输出，调试用
	 */


	var debugMode = 0; // retina 屏幕优化

	var devicePixelRatio = dpr;
	exports.debugMode = debugMode;
	exports.devicePixelRatio = devicePixelRatio;

/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	var vec2 = __webpack_require__(168);

	var matrix = __webpack_require__(175);

	/**
	 * @module echarts/core/BoundingRect
	 */
	var v2ApplyTransform = vec2.applyTransform;
	var mathMin = Math.min;
	var mathMax = Math.max;
	/**
	 * @alias module:echarts/core/BoundingRect
	 */

	function BoundingRect(x, y, width, height) {
	  if (width < 0) {
	    x = x + width;
	    width = -width;
	  }

	  if (height < 0) {
	    y = y + height;
	    height = -height;
	  }
	  /**
	   * @type {number}
	   */


	  this.x = x;
	  /**
	   * @type {number}
	   */

	  this.y = y;
	  /**
	   * @type {number}
	   */

	  this.width = width;
	  /**
	   * @type {number}
	   */

	  this.height = height;
	}

	BoundingRect.prototype = {
	  constructor: BoundingRect,

	  /**
	   * @param {module:echarts/core/BoundingRect} other
	   */
	  union: function (other) {
	    var x = mathMin(other.x, this.x);
	    var y = mathMin(other.y, this.y);
	    this.width = mathMax(other.x + other.width, this.x + this.width) - x;
	    this.height = mathMax(other.y + other.height, this.y + this.height) - y;
	    this.x = x;
	    this.y = y;
	  },

	  /**
	   * @param {Array.<number>} m
	   * @methods
	   */
	  applyTransform: function () {
	    var lt = [];
	    var rb = [];
	    var lb = [];
	    var rt = [];
	    return function (m) {
	      // In case usage like this
	      // el.getBoundingRect().applyTransform(el.transform)
	      // And element has no transform
	      if (!m) {
	        return;
	      }

	      lt[0] = lb[0] = this.x;
	      lt[1] = rt[1] = this.y;
	      rb[0] = rt[0] = this.x + this.width;
	      rb[1] = lb[1] = this.y + this.height;
	      v2ApplyTransform(lt, lt, m);
	      v2ApplyTransform(rb, rb, m);
	      v2ApplyTransform(lb, lb, m);
	      v2ApplyTransform(rt, rt, m);
	      this.x = mathMin(lt[0], rb[0], lb[0], rt[0]);
	      this.y = mathMin(lt[1], rb[1], lb[1], rt[1]);
	      var maxX = mathMax(lt[0], rb[0], lb[0], rt[0]);
	      var maxY = mathMax(lt[1], rb[1], lb[1], rt[1]);
	      this.width = maxX - this.x;
	      this.height = maxY - this.y;
	    };
	  }(),

	  /**
	   * Calculate matrix of transforming from self to target rect
	   * @param  {module:zrender/core/BoundingRect} b
	   * @return {Array.<number>}
	   */
	  calculateTransform: function (b) {
	    var a = this;
	    var sx = b.width / a.width;
	    var sy = b.height / a.height;
	    var m = matrix.create(); // 矩阵右乘

	    matrix.translate(m, m, [-a.x, -a.y]);
	    matrix.scale(m, m, [sx, sy]);
	    matrix.translate(m, m, [b.x, b.y]);
	    return m;
	  },

	  /**
	   * @param {(module:echarts/core/BoundingRect|Object)} b
	   * @return {boolean}
	   */
	  intersect: function (b) {
	    if (!b) {
	      return false;
	    }

	    if (!(b instanceof BoundingRect)) {
	      // Normalize negative width/height.
	      b = BoundingRect.create(b);
	    }

	    var a = this;
	    var ax0 = a.x;
	    var ax1 = a.x + a.width;
	    var ay0 = a.y;
	    var ay1 = a.y + a.height;
	    var bx0 = b.x;
	    var bx1 = b.x + b.width;
	    var by0 = b.y;
	    var by1 = b.y + b.height;
	    return !(ax1 < bx0 || bx1 < ax0 || ay1 < by0 || by1 < ay0);
	  },
	  contain: function (x, y) {
	    var rect = this;
	    return x >= rect.x && x <= rect.x + rect.width && y >= rect.y && y <= rect.y + rect.height;
	  },

	  /**
	   * @return {module:echarts/core/BoundingRect}
	   */
	  clone: function () {
	    return new BoundingRect(this.x, this.y, this.width, this.height);
	  },

	  /**
	   * Copy from another rect
	   */
	  copy: function (other) {
	    this.x = other.x;
	    this.y = other.y;
	    this.width = other.width;
	    this.height = other.height;
	  },
	  plain: function () {
	    return {
	      x: this.x,
	      y: this.y,
	      width: this.width,
	      height: this.height
	    };
	  }
	};
	/**
	 * @param {Object|module:zrender/core/BoundingRect} rect
	 * @param {number} rect.x
	 * @param {number} rect.y
	 * @param {number} rect.width
	 * @param {number} rect.height
	 * @return {module:zrender/core/BoundingRect}
	 */

	BoundingRect.create = function (rect) {
	  return new BoundingRect(rect.x, rect.y, rect.width, rect.height);
	};

	var _default = BoundingRect;
	module.exports = _default;

/***/ },
/* 185 */
/***/ function(module, exports) {

	// https://github.com/mziccard/node-timsort
	var DEFAULT_MIN_MERGE = 32;
	var DEFAULT_MIN_GALLOPING = 7;
	var DEFAULT_TMP_STORAGE_LENGTH = 256;

	function minRunLength(n) {
	  var r = 0;

	  while (n >= DEFAULT_MIN_MERGE) {
	    r |= n & 1;
	    n >>= 1;
	  }

	  return n + r;
	}

	function makeAscendingRun(array, lo, hi, compare) {
	  var runHi = lo + 1;

	  if (runHi === hi) {
	    return 1;
	  }

	  if (compare(array[runHi++], array[lo]) < 0) {
	    while (runHi < hi && compare(array[runHi], array[runHi - 1]) < 0) {
	      runHi++;
	    }

	    reverseRun(array, lo, runHi);
	  } else {
	    while (runHi < hi && compare(array[runHi], array[runHi - 1]) >= 0) {
	      runHi++;
	    }
	  }

	  return runHi - lo;
	}

	function reverseRun(array, lo, hi) {
	  hi--;

	  while (lo < hi) {
	    var t = array[lo];
	    array[lo++] = array[hi];
	    array[hi--] = t;
	  }
	}

	function binaryInsertionSort(array, lo, hi, start, compare) {
	  if (start === lo) {
	    start++;
	  }

	  for (; start < hi; start++) {
	    var pivot = array[start];
	    var left = lo;
	    var right = start;
	    var mid;

	    while (left < right) {
	      mid = left + right >>> 1;

	      if (compare(pivot, array[mid]) < 0) {
	        right = mid;
	      } else {
	        left = mid + 1;
	      }
	    }

	    var n = start - left;

	    switch (n) {
	      case 3:
	        array[left + 3] = array[left + 2];

	      case 2:
	        array[left + 2] = array[left + 1];

	      case 1:
	        array[left + 1] = array[left];
	        break;

	      default:
	        while (n > 0) {
	          array[left + n] = array[left + n - 1];
	          n--;
	        }

	    }

	    array[left] = pivot;
	  }
	}

	function gallopLeft(value, array, start, length, hint, compare) {
	  var lastOffset = 0;
	  var maxOffset = 0;
	  var offset = 1;

	  if (compare(value, array[start + hint]) > 0) {
	    maxOffset = length - hint;

	    while (offset < maxOffset && compare(value, array[start + hint + offset]) > 0) {
	      lastOffset = offset;
	      offset = (offset << 1) + 1;

	      if (offset <= 0) {
	        offset = maxOffset;
	      }
	    }

	    if (offset > maxOffset) {
	      offset = maxOffset;
	    }

	    lastOffset += hint;
	    offset += hint;
	  } else {
	    maxOffset = hint + 1;

	    while (offset < maxOffset && compare(value, array[start + hint - offset]) <= 0) {
	      lastOffset = offset;
	      offset = (offset << 1) + 1;

	      if (offset <= 0) {
	        offset = maxOffset;
	      }
	    }

	    if (offset > maxOffset) {
	      offset = maxOffset;
	    }

	    var tmp = lastOffset;
	    lastOffset = hint - offset;
	    offset = hint - tmp;
	  }

	  lastOffset++;

	  while (lastOffset < offset) {
	    var m = lastOffset + (offset - lastOffset >>> 1);

	    if (compare(value, array[start + m]) > 0) {
	      lastOffset = m + 1;
	    } else {
	      offset = m;
	    }
	  }

	  return offset;
	}

	function gallopRight(value, array, start, length, hint, compare) {
	  var lastOffset = 0;
	  var maxOffset = 0;
	  var offset = 1;

	  if (compare(value, array[start + hint]) < 0) {
	    maxOffset = hint + 1;

	    while (offset < maxOffset && compare(value, array[start + hint - offset]) < 0) {
	      lastOffset = offset;
	      offset = (offset << 1) + 1;

	      if (offset <= 0) {
	        offset = maxOffset;
	      }
	    }

	    if (offset > maxOffset) {
	      offset = maxOffset;
	    }

	    var tmp = lastOffset;
	    lastOffset = hint - offset;
	    offset = hint - tmp;
	  } else {
	    maxOffset = length - hint;

	    while (offset < maxOffset && compare(value, array[start + hint + offset]) >= 0) {
	      lastOffset = offset;
	      offset = (offset << 1) + 1;

	      if (offset <= 0) {
	        offset = maxOffset;
	      }
	    }

	    if (offset > maxOffset) {
	      offset = maxOffset;
	    }

	    lastOffset += hint;
	    offset += hint;
	  }

	  lastOffset++;

	  while (lastOffset < offset) {
	    var m = lastOffset + (offset - lastOffset >>> 1);

	    if (compare(value, array[start + m]) < 0) {
	      offset = m;
	    } else {
	      lastOffset = m + 1;
	    }
	  }

	  return offset;
	}

	function TimSort(array, compare) {
	  var minGallop = DEFAULT_MIN_GALLOPING;
	  var length = 0;
	  var tmpStorageLength = DEFAULT_TMP_STORAGE_LENGTH;
	  var stackLength = 0;
	  var runStart;
	  var runLength;
	  var stackSize = 0;
	  length = array.length;

	  if (length < 2 * DEFAULT_TMP_STORAGE_LENGTH) {
	    tmpStorageLength = length >>> 1;
	  }

	  var tmp = [];
	  stackLength = length < 120 ? 5 : length < 1542 ? 10 : length < 119151 ? 19 : 40;
	  runStart = [];
	  runLength = [];

	  function pushRun(_runStart, _runLength) {
	    runStart[stackSize] = _runStart;
	    runLength[stackSize] = _runLength;
	    stackSize += 1;
	  }

	  function mergeRuns() {
	    while (stackSize > 1) {
	      var n = stackSize - 2;

	      if (n >= 1 && runLength[n - 1] <= runLength[n] + runLength[n + 1] || n >= 2 && runLength[n - 2] <= runLength[n] + runLength[n - 1]) {
	        if (runLength[n - 1] < runLength[n + 1]) {
	          n--;
	        }
	      } else if (runLength[n] > runLength[n + 1]) {
	        break;
	      }

	      mergeAt(n);
	    }
	  }

	  function forceMergeRuns() {
	    while (stackSize > 1) {
	      var n = stackSize - 2;

	      if (n > 0 && runLength[n - 1] < runLength[n + 1]) {
	        n--;
	      }

	      mergeAt(n);
	    }
	  }

	  function mergeAt(i) {
	    var start1 = runStart[i];
	    var length1 = runLength[i];
	    var start2 = runStart[i + 1];
	    var length2 = runLength[i + 1];
	    runLength[i] = length1 + length2;

	    if (i === stackSize - 3) {
	      runStart[i + 1] = runStart[i + 2];
	      runLength[i + 1] = runLength[i + 2];
	    }

	    stackSize--;
	    var k = gallopRight(array[start2], array, start1, length1, 0, compare);
	    start1 += k;
	    length1 -= k;

	    if (length1 === 0) {
	      return;
	    }

	    length2 = gallopLeft(array[start1 + length1 - 1], array, start2, length2, length2 - 1, compare);

	    if (length2 === 0) {
	      return;
	    }

	    if (length1 <= length2) {
	      mergeLow(start1, length1, start2, length2);
	    } else {
	      mergeHigh(start1, length1, start2, length2);
	    }
	  }

	  function mergeLow(start1, length1, start2, length2) {
	    var i = 0;

	    for (i = 0; i < length1; i++) {
	      tmp[i] = array[start1 + i];
	    }

	    var cursor1 = 0;
	    var cursor2 = start2;
	    var dest = start1;
	    array[dest++] = array[cursor2++];

	    if (--length2 === 0) {
	      for (i = 0; i < length1; i++) {
	        array[dest + i] = tmp[cursor1 + i];
	      }

	      return;
	    }

	    if (length1 === 1) {
	      for (i = 0; i < length2; i++) {
	        array[dest + i] = array[cursor2 + i];
	      }

	      array[dest + length2] = tmp[cursor1];
	      return;
	    }

	    var _minGallop = minGallop;
	    var count1, count2, exit;

	    while (1) {
	      count1 = 0;
	      count2 = 0;
	      exit = false;

	      do {
	        if (compare(array[cursor2], tmp[cursor1]) < 0) {
	          array[dest++] = array[cursor2++];
	          count2++;
	          count1 = 0;

	          if (--length2 === 0) {
	            exit = true;
	            break;
	          }
	        } else {
	          array[dest++] = tmp[cursor1++];
	          count1++;
	          count2 = 0;

	          if (--length1 === 1) {
	            exit = true;
	            break;
	          }
	        }
	      } while ((count1 | count2) < _minGallop);

	      if (exit) {
	        break;
	      }

	      do {
	        count1 = gallopRight(array[cursor2], tmp, cursor1, length1, 0, compare);

	        if (count1 !== 0) {
	          for (i = 0; i < count1; i++) {
	            array[dest + i] = tmp[cursor1 + i];
	          }

	          dest += count1;
	          cursor1 += count1;
	          length1 -= count1;

	          if (length1 <= 1) {
	            exit = true;
	            break;
	          }
	        }

	        array[dest++] = array[cursor2++];

	        if (--length2 === 0) {
	          exit = true;
	          break;
	        }

	        count2 = gallopLeft(tmp[cursor1], array, cursor2, length2, 0, compare);

	        if (count2 !== 0) {
	          for (i = 0; i < count2; i++) {
	            array[dest + i] = array[cursor2 + i];
	          }

	          dest += count2;
	          cursor2 += count2;
	          length2 -= count2;

	          if (length2 === 0) {
	            exit = true;
	            break;
	          }
	        }

	        array[dest++] = tmp[cursor1++];

	        if (--length1 === 1) {
	          exit = true;
	          break;
	        }

	        _minGallop--;
	      } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);

	      if (exit) {
	        break;
	      }

	      if (_minGallop < 0) {
	        _minGallop = 0;
	      }

	      _minGallop += 2;
	    }

	    minGallop = _minGallop;
	    minGallop < 1 && (minGallop = 1);

	    if (length1 === 1) {
	      for (i = 0; i < length2; i++) {
	        array[dest + i] = array[cursor2 + i];
	      }

	      array[dest + length2] = tmp[cursor1];
	    } else if (length1 === 0) {
	      throw new Error(); // throw new Error('mergeLow preconditions were not respected');
	    } else {
	      for (i = 0; i < length1; i++) {
	        array[dest + i] = tmp[cursor1 + i];
	      }
	    }
	  }

	  function mergeHigh(start1, length1, start2, length2) {
	    var i = 0;

	    for (i = 0; i < length2; i++) {
	      tmp[i] = array[start2 + i];
	    }

	    var cursor1 = start1 + length1 - 1;
	    var cursor2 = length2 - 1;
	    var dest = start2 + length2 - 1;
	    var customCursor = 0;
	    var customDest = 0;
	    array[dest--] = array[cursor1--];

	    if (--length1 === 0) {
	      customCursor = dest - (length2 - 1);

	      for (i = 0; i < length2; i++) {
	        array[customCursor + i] = tmp[i];
	      }

	      return;
	    }

	    if (length2 === 1) {
	      dest -= length1;
	      cursor1 -= length1;
	      customDest = dest + 1;
	      customCursor = cursor1 + 1;

	      for (i = length1 - 1; i >= 0; i--) {
	        array[customDest + i] = array[customCursor + i];
	      }

	      array[dest] = tmp[cursor2];
	      return;
	    }

	    var _minGallop = minGallop;

	    while (true) {
	      var count1 = 0;
	      var count2 = 0;
	      var exit = false;

	      do {
	        if (compare(tmp[cursor2], array[cursor1]) < 0) {
	          array[dest--] = array[cursor1--];
	          count1++;
	          count2 = 0;

	          if (--length1 === 0) {
	            exit = true;
	            break;
	          }
	        } else {
	          array[dest--] = tmp[cursor2--];
	          count2++;
	          count1 = 0;

	          if (--length2 === 1) {
	            exit = true;
	            break;
	          }
	        }
	      } while ((count1 | count2) < _minGallop);

	      if (exit) {
	        break;
	      }

	      do {
	        count1 = length1 - gallopRight(tmp[cursor2], array, start1, length1, length1 - 1, compare);

	        if (count1 !== 0) {
	          dest -= count1;
	          cursor1 -= count1;
	          length1 -= count1;
	          customDest = dest + 1;
	          customCursor = cursor1 + 1;

	          for (i = count1 - 1; i >= 0; i--) {
	            array[customDest + i] = array[customCursor + i];
	          }

	          if (length1 === 0) {
	            exit = true;
	            break;
	          }
	        }

	        array[dest--] = tmp[cursor2--];

	        if (--length2 === 1) {
	          exit = true;
	          break;
	        }

	        count2 = length2 - gallopLeft(array[cursor1], tmp, 0, length2, length2 - 1, compare);

	        if (count2 !== 0) {
	          dest -= count2;
	          cursor2 -= count2;
	          length2 -= count2;
	          customDest = dest + 1;
	          customCursor = cursor2 + 1;

	          for (i = 0; i < count2; i++) {
	            array[customDest + i] = tmp[customCursor + i];
	          }

	          if (length2 <= 1) {
	            exit = true;
	            break;
	          }
	        }

	        array[dest--] = array[cursor1--];

	        if (--length1 === 0) {
	          exit = true;
	          break;
	        }

	        _minGallop--;
	      } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);

	      if (exit) {
	        break;
	      }

	      if (_minGallop < 0) {
	        _minGallop = 0;
	      }

	      _minGallop += 2;
	    }

	    minGallop = _minGallop;

	    if (minGallop < 1) {
	      minGallop = 1;
	    }

	    if (length2 === 1) {
	      dest -= length1;
	      cursor1 -= length1;
	      customDest = dest + 1;
	      customCursor = cursor1 + 1;

	      for (i = length1 - 1; i >= 0; i--) {
	        array[customDest + i] = array[customCursor + i];
	      }

	      array[dest] = tmp[cursor2];
	    } else if (length2 === 0) {
	      throw new Error(); // throw new Error('mergeHigh preconditions were not respected');
	    } else {
	      customCursor = dest - (length2 - 1);

	      for (i = 0; i < length2; i++) {
	        array[customCursor + i] = tmp[i];
	      }
	    }
	  }

	  this.mergeRuns = mergeRuns;
	  this.forceMergeRuns = forceMergeRuns;
	  this.pushRun = pushRun;
	}

	function sort(array, compare, lo, hi) {
	  if (!lo) {
	    lo = 0;
	  }

	  if (!hi) {
	    hi = array.length;
	  }

	  var remaining = hi - lo;

	  if (remaining < 2) {
	    return;
	  }

	  var runLength = 0;

	  if (remaining < DEFAULT_MIN_MERGE) {
	    runLength = makeAscendingRun(array, lo, hi, compare);
	    binaryInsertionSort(array, lo, hi, lo + runLength, compare);
	    return;
	  }

	  var ts = new TimSort(array, compare);
	  var minRun = minRunLength(remaining);

	  do {
	    runLength = makeAscendingRun(array, lo, hi, compare);

	    if (runLength < minRun) {
	      var force = remaining;

	      if (force > minRun) {
	        force = minRun;
	      }

	      binaryInsertionSort(array, lo, lo + force, lo + runLength, compare);
	      runLength = force;
	    }

	    ts.pushRun(lo, runLength);
	    ts.mergeRuns();
	    remaining -= runLength;
	    lo += runLength;
	  } while (remaining !== 0);

	  ts.forceMergeRuns();
	}

	module.exports = sort;

/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(183);

	var devicePixelRatio = _config.devicePixelRatio;

	var util = __webpack_require__(166);

	var log = __webpack_require__(182);

	var BoundingRect = __webpack_require__(184);

	var timsort = __webpack_require__(185);

	var Layer = __webpack_require__(187);

	var requestAnimationFrame = __webpack_require__(190);

	var Image = __webpack_require__(191);

	/**
	 * Default canvas painter
	 * @module zrender/Painter
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         errorrik (errorrik@gmail.com)
	 *         pissang (https://www.github.com/pissang)
	 */
	// PENDIGN
	// Layer exceeds MAX_PROGRESSIVE_LAYER_NUMBER may have some problem when flush directly second time.
	//
	// Maximum progressive layer. When exceeding this number. All elements will be drawed in the last layer.
	var MAX_PROGRESSIVE_LAYER_NUMBER = 5;

	function parseInt10(val) {
	  return parseInt(val, 10);
	}

	function isLayerValid(layer) {
	  if (!layer) {
	    return false;
	  }

	  if (layer.__builtin__) {
	    return true;
	  }

	  if (typeof layer.resize !== 'function' || typeof layer.refresh !== 'function') {
	    return false;
	  }

	  return true;
	}

	function preProcessLayer(layer) {
	  layer.__unusedCount++;
	}

	function postProcessLayer(layer) {
	  if (layer.__unusedCount == 1) {
	    layer.clear();
	  }
	}

	var tmpRect = new BoundingRect(0, 0, 0, 0);
	var viewRect = new BoundingRect(0, 0, 0, 0);

	function isDisplayableCulled(el, width, height) {
	  tmpRect.copy(el.getBoundingRect());

	  if (el.transform) {
	    tmpRect.applyTransform(el.transform);
	  }

	  viewRect.width = width;
	  viewRect.height = height;
	  return !tmpRect.intersect(viewRect);
	}

	function isClipPathChanged(clipPaths, prevClipPaths) {
	  if (clipPaths == prevClipPaths) {
	    // Can both be null or undefined
	    return false;
	  }

	  if (!clipPaths || !prevClipPaths || clipPaths.length !== prevClipPaths.length) {
	    return true;
	  }

	  for (var i = 0; i < clipPaths.length; i++) {
	    if (clipPaths[i] !== prevClipPaths[i]) {
	      return true;
	    }
	  }
	}

	function doClip(clipPaths, ctx) {
	  for (var i = 0; i < clipPaths.length; i++) {
	    var clipPath = clipPaths[i];
	    clipPath.setTransform(ctx);
	    ctx.beginPath();
	    clipPath.buildPath(ctx, clipPath.shape);
	    ctx.clip(); // Transform back

	    clipPath.restoreTransform(ctx);
	  }
	}

	function createRoot(width, height) {
	  var domRoot = document.createElement('div'); // domRoot.onselectstart = returnFalse; // 避免页面选中的尴尬

	  domRoot.style.cssText = ['position:relative', 'overflow:hidden', 'width:' + width + 'px', 'height:' + height + 'px', 'padding:0', 'margin:0', 'border-width:0'].join(';') + ';';
	  return domRoot;
	}
	/**
	 * @alias module:zrender/Painter
	 * @constructor
	 * @param {HTMLElement} root 绘图容器
	 * @param {module:zrender/Storage} storage
	 * @param {Object} opts
	 */


	var Painter = function (root, storage, opts) {
	  this.type = 'canvas'; // In node environment using node-canvas

	  var singleCanvas = !root.nodeName // In node ?
	  || root.nodeName.toUpperCase() === 'CANVAS';
	  this._opts = opts = util.extend({}, opts || {});
	  /**
	   * @type {number}
	   */

	  this.dpr = opts.devicePixelRatio || devicePixelRatio;
	  /**
	   * @type {boolean}
	   * @private
	   */

	  this._singleCanvas = singleCanvas;
	  /**
	   * 绘图容器
	   * @type {HTMLElement}
	   */

	  this.root = root;
	  var rootStyle = root.style;

	  if (rootStyle) {
	    rootStyle['-webkit-tap-highlight-color'] = 'transparent';
	    rootStyle['-webkit-user-select'] = rootStyle['user-select'] = rootStyle['-webkit-touch-callout'] = 'none';
	    root.innerHTML = '';
	  }
	  /**
	   * @type {module:zrender/Storage}
	   */


	  this.storage = storage;
	  /**
	   * @type {Array.<number>}
	   * @private
	   */

	  var zlevelList = this._zlevelList = [];
	  /**
	   * @type {Object.<string, module:zrender/Layer>}
	   * @private
	   */

	  var layers = this._layers = {};
	  /**
	   * @type {Object.<string, Object>}
	   * @type {private}
	   */

	  this._layerConfig = {};

	  if (!singleCanvas) {
	    this._width = this._getSize(0);
	    this._height = this._getSize(1);
	    var domRoot = this._domRoot = createRoot(this._width, this._height);
	    root.appendChild(domRoot);
	  } else {
	    if (opts.width != null) {
	      root.width = opts.width;
	    }

	    if (opts.height != null) {
	      root.height = opts.height;
	    } // Use canvas width and height directly


	    var width = root.width;
	    var height = root.height;
	    this._width = width;
	    this._height = height; // Create layer if only one given canvas
	    // Device pixel ratio is fixed to 1 because given canvas has its specified width and height

	    var mainLayer = new Layer(root, this, 1);
	    mainLayer.initContext(); // FIXME Use canvas width and height
	    // mainLayer.resize(width, height);

	    layers[0] = mainLayer;
	    zlevelList.push(0);
	    this._domRoot = root;
	  } // Layers for progressive rendering


	  this._progressiveLayers = [];
	  /**
	   * @type {module:zrender/Layer}
	   * @private
	   */

	  this._hoverlayer;
	  this._hoverElements = [];
	};

	Painter.prototype = {
	  constructor: Painter,
	  getType: function () {
	    return 'canvas';
	  },

	  /**
	   * If painter use a single canvas
	   * @return {boolean}
	   */
	  isSingleCanvas: function () {
	    return this._singleCanvas;
	  },

	  /**
	   * @return {HTMLDivElement}
	   */
	  getViewportRoot: function () {
	    return this._domRoot;
	  },
	  getViewportRootOffset: function () {
	    var viewportRoot = this.getViewportRoot();

	    if (viewportRoot) {
	      return {
	        offsetLeft: viewportRoot.offsetLeft || 0,
	        offsetTop: viewportRoot.offsetTop || 0
	      };
	    }
	  },

	  /**
	   * 刷新
	   * @param {boolean} [paintAll=false] 强制绘制所有displayable
	   */
	  refresh: function (paintAll) {
	    var list = this.storage.getDisplayList(true);
	    var zlevelList = this._zlevelList;

	    this._paintList(list, paintAll); // Paint custum layers


	    for (var i = 0; i < zlevelList.length; i++) {
	      var z = zlevelList[i];
	      var layer = this._layers[z];

	      if (!layer.__builtin__ && layer.refresh) {
	        layer.refresh();
	      }
	    }

	    this.refreshHover();

	    if (this._progressiveLayers.length) {
	      this._startProgessive();
	    }

	    return this;
	  },
	  addHover: function (el, hoverStyle) {
	    if (el.__hoverMir) {
	      return;
	    }

	    var elMirror = new el.constructor({
	      style: el.style,
	      shape: el.shape
	    });
	    elMirror.__from = el;
	    el.__hoverMir = elMirror;
	    elMirror.setStyle(hoverStyle);

	    this._hoverElements.push(elMirror);
	  },
	  removeHover: function (el) {
	    var elMirror = el.__hoverMir;
	    var hoverElements = this._hoverElements;
	    var idx = util.indexOf(hoverElements, elMirror);

	    if (idx >= 0) {
	      hoverElements.splice(idx, 1);
	    }

	    el.__hoverMir = null;
	  },
	  clearHover: function (el) {
	    var hoverElements = this._hoverElements;

	    for (var i = 0; i < hoverElements.length; i++) {
	      var from = hoverElements[i].__from;

	      if (from) {
	        from.__hoverMir = null;
	      }
	    }

	    hoverElements.length = 0;
	  },
	  refreshHover: function () {
	    var hoverElements = this._hoverElements;
	    var len = hoverElements.length;
	    var hoverLayer = this._hoverlayer;
	    hoverLayer && hoverLayer.clear();

	    if (!len) {
	      return;
	    }

	    timsort(hoverElements, this.storage.displayableSortFunc); // Use a extream large zlevel
	    // FIXME?

	    if (!hoverLayer) {
	      hoverLayer = this._hoverlayer = this.getLayer(1e5);
	    }

	    var scope = {};
	    hoverLayer.ctx.save();

	    for (var i = 0; i < len;) {
	      var el = hoverElements[i];
	      var originalEl = el.__from; // Original el is removed
	      // PENDING

	      if (!(originalEl && originalEl.__zr)) {
	        hoverElements.splice(i, 1);
	        originalEl.__hoverMir = null;
	        len--;
	        continue;
	      }

	      i++; // Use transform
	      // FIXME style and shape ?

	      if (!originalEl.invisible) {
	        el.transform = originalEl.transform;
	        el.invTransform = originalEl.invTransform;
	        el.__clipPaths = originalEl.__clipPaths; // el.

	        this._doPaintEl(el, hoverLayer, true, scope);
	      }
	    }

	    hoverLayer.ctx.restore();
	  },
	  _startProgessive: function () {
	    var self = this;

	    if (!self._furtherProgressive) {
	      return;
	    } // Use a token to stop progress steps triggered by
	    // previous zr.refresh calling.


	    var token = self._progressiveToken = +new Date();
	    self._progress++;
	    requestAnimationFrame(step);

	    function step() {
	      // In case refreshed or disposed
	      if (token === self._progressiveToken && self.storage) {
	        self._doPaintList(self.storage.getDisplayList());

	        if (self._furtherProgressive) {
	          self._progress++;
	          requestAnimationFrame(step);
	        } else {
	          self._progressiveToken = -1;
	        }
	      }
	    }
	  },
	  _clearProgressive: function () {
	    this._progressiveToken = -1;
	    this._progress = 0;
	    util.each(this._progressiveLayers, function (layer) {
	      layer.__dirty && layer.clear();
	    });
	  },
	  _paintList: function (list, paintAll) {
	    if (paintAll == null) {
	      paintAll = false;
	    }

	    this._updateLayerStatus(list);

	    this._clearProgressive();

	    this.eachBuiltinLayer(preProcessLayer);

	    this._doPaintList(list, paintAll);

	    this.eachBuiltinLayer(postProcessLayer);
	  },
	  _doPaintList: function (list, paintAll) {
	    var currentLayer;
	    var currentZLevel;
	    var ctx; // var invTransform = [];

	    var scope;
	    var progressiveLayerIdx = 0;
	    var currentProgressiveLayer;
	    var width = this._width;
	    var height = this._height;
	    var layerProgress;
	    var frame = this._progress;

	    function flushProgressiveLayer(layer) {
	      var dpr = ctx.dpr || 1;
	      ctx.save();
	      ctx.globalAlpha = 1;
	      ctx.shadowBlur = 0; // Avoid layer don't clear in next progressive frame

	      currentLayer.__dirty = true;
	      ctx.setTransform(1, 0, 0, 1, 0, 0);
	      ctx.drawImage(layer.dom, 0, 0, width * dpr, height * dpr);
	      ctx.restore();
	    }

	    for (var i = 0, l = list.length; i < l; i++) {
	      var el = list[i];
	      var elZLevel = this._singleCanvas ? 0 : el.zlevel;
	      var elFrame = el.__frame; // Flush at current context
	      // PENDING

	      if (elFrame < 0 && currentProgressiveLayer) {
	        flushProgressiveLayer(currentProgressiveLayer);
	        currentProgressiveLayer = null;
	      } // Change draw layer


	      if (currentZLevel !== elZLevel) {
	        if (ctx) {
	          ctx.restore();
	        } // Reset scope


	        scope = {}; // Only 0 zlevel if only has one canvas

	        currentZLevel = elZLevel;
	        currentLayer = this.getLayer(currentZLevel);

	        if (!currentLayer.__builtin__) {
	          log('ZLevel ' + currentZLevel + ' has been used by unkown layer ' + currentLayer.id);
	        }

	        ctx = currentLayer.ctx;
	        ctx.save(); // Reset the count

	        currentLayer.__unusedCount = 0;

	        if (currentLayer.__dirty || paintAll) {
	          currentLayer.clear();
	        }
	      }

	      if (!(currentLayer.__dirty || paintAll)) {
	        continue;
	      }

	      if (elFrame >= 0) {
	        // Progressive layer changed
	        if (!currentProgressiveLayer) {
	          currentProgressiveLayer = this._progressiveLayers[Math.min(progressiveLayerIdx++, MAX_PROGRESSIVE_LAYER_NUMBER - 1)];
	          currentProgressiveLayer.ctx.save();
	          currentProgressiveLayer.renderScope = {};

	          if (currentProgressiveLayer && currentProgressiveLayer.__progress > currentProgressiveLayer.__maxProgress) {
	            // flushProgressiveLayer(currentProgressiveLayer);
	            // Quick jump all progressive elements
	            // All progressive element are not dirty, jump over and flush directly
	            i = currentProgressiveLayer.__nextIdxNotProg - 1; // currentProgressiveLayer = null;

	            continue;
	          }

	          layerProgress = currentProgressiveLayer.__progress;

	          if (!currentProgressiveLayer.__dirty) {
	            // Keep rendering
	            frame = layerProgress;
	          }

	          currentProgressiveLayer.__progress = frame + 1;
	        }

	        if (elFrame === frame) {
	          this._doPaintEl(el, currentProgressiveLayer, true, currentProgressiveLayer.renderScope);
	        }
	      } else {
	        this._doPaintEl(el, currentLayer, paintAll, scope);
	      }

	      el.__dirty = false;
	    }

	    if (currentProgressiveLayer) {
	      flushProgressiveLayer(currentProgressiveLayer);
	    } // Restore the lastLayer ctx


	    ctx && ctx.restore(); // If still has clipping state
	    // if (scope.prevElClipPaths) {
	    //     ctx.restore();
	    // }

	    this._furtherProgressive = false;
	    util.each(this._progressiveLayers, function (layer) {
	      if (layer.__maxProgress >= layer.__progress) {
	        this._furtherProgressive = true;
	      }
	    }, this);
	  },
	  _doPaintEl: function (el, currentLayer, forcePaint, scope) {
	    var ctx = currentLayer.ctx;
	    var m = el.transform;

	    if ((currentLayer.__dirty || forcePaint) && // Ignore invisible element
	    !el.invisible // Ignore transparent element
	    && el.style.opacity !== 0 // Ignore scale 0 element, in some environment like node-canvas
	    // Draw a scale 0 element can cause all following draw wrong
	    // And setTransform with scale 0 will cause set back transform failed.
	    && !(m && !m[0] && !m[3]) // Ignore culled element
	    && !(el.culling && isDisplayableCulled(el, this._width, this._height))) {
	      var clipPaths = el.__clipPaths; // Optimize when clipping on group with several elements

	      if (scope.prevClipLayer !== currentLayer || isClipPathChanged(clipPaths, scope.prevElClipPaths)) {
	        // If has previous clipping state, restore from it
	        if (scope.prevElClipPaths) {
	          scope.prevClipLayer.ctx.restore();
	          scope.prevClipLayer = scope.prevElClipPaths = null; // Reset prevEl since context has been restored

	          scope.prevEl = null;
	        } // New clipping state


	        if (clipPaths) {
	          ctx.save();
	          doClip(clipPaths, ctx);
	          scope.prevClipLayer = currentLayer;
	          scope.prevElClipPaths = clipPaths;
	        }
	      }

	      el.beforeBrush && el.beforeBrush(ctx);
	      el.brush(ctx, scope.prevEl || null);
	      scope.prevEl = el;
	      el.afterBrush && el.afterBrush(ctx);
	    }
	  },

	  /**
	   * 获取 zlevel 所在层，如果不存在则会创建一个新的层
	   * @param {number} zlevel
	   * @return {module:zrender/Layer}
	   */
	  getLayer: function (zlevel) {
	    if (this._singleCanvas) {
	      return this._layers[0];
	    }

	    var layer = this._layers[zlevel];

	    if (!layer) {
	      // Create a new layer
	      layer = new Layer('zr_' + zlevel, this, this.dpr);
	      layer.__builtin__ = true;

	      if (this._layerConfig[zlevel]) {
	        util.merge(layer, this._layerConfig[zlevel], true);
	      }

	      this.insertLayer(zlevel, layer); // Context is created after dom inserted to document
	      // Or excanvas will get 0px clientWidth and clientHeight

	      layer.initContext();
	    }

	    return layer;
	  },
	  insertLayer: function (zlevel, layer) {
	    var layersMap = this._layers;
	    var zlevelList = this._zlevelList;
	    var len = zlevelList.length;
	    var prevLayer = null;
	    var i = -1;
	    var domRoot = this._domRoot;

	    if (layersMap[zlevel]) {
	      log('ZLevel ' + zlevel + ' has been used already');
	      return;
	    } // Check if is a valid layer


	    if (!isLayerValid(layer)) {
	      log('Layer of zlevel ' + zlevel + ' is not valid');
	      return;
	    }

	    if (len > 0 && zlevel > zlevelList[0]) {
	      for (i = 0; i < len - 1; i++) {
	        if (zlevelList[i] < zlevel && zlevelList[i + 1] > zlevel) {
	          break;
	        }
	      }

	      prevLayer = layersMap[zlevelList[i]];
	    }

	    zlevelList.splice(i + 1, 0, zlevel);
	    layersMap[zlevel] = layer; // Vitual layer will not directly show on the screen.
	    // (It can be a WebGL layer and assigned to a ZImage element)
	    // But it still under management of zrender.

	    if (!layer.virtual) {
	      if (prevLayer) {
	        var prevDom = prevLayer.dom;

	        if (prevDom.nextSibling) {
	          domRoot.insertBefore(layer.dom, prevDom.nextSibling);
	        } else {
	          domRoot.appendChild(layer.dom);
	        }
	      } else {
	        if (domRoot.firstChild) {
	          domRoot.insertBefore(layer.dom, domRoot.firstChild);
	        } else {
	          domRoot.appendChild(layer.dom);
	        }
	      }
	    }
	  },
	  // Iterate each layer
	  eachLayer: function (cb, context) {
	    var zlevelList = this._zlevelList;
	    var z;
	    var i;

	    for (i = 0; i < zlevelList.length; i++) {
	      z = zlevelList[i];
	      cb.call(context, this._layers[z], z);
	    }
	  },
	  // Iterate each buildin layer
	  eachBuiltinLayer: function (cb, context) {
	    var zlevelList = this._zlevelList;
	    var layer;
	    var z;
	    var i;

	    for (i = 0; i < zlevelList.length; i++) {
	      z = zlevelList[i];
	      layer = this._layers[z];

	      if (layer.__builtin__) {
	        cb.call(context, layer, z);
	      }
	    }
	  },
	  // Iterate each other layer except buildin layer
	  eachOtherLayer: function (cb, context) {
	    var zlevelList = this._zlevelList;
	    var layer;
	    var z;
	    var i;

	    for (i = 0; i < zlevelList.length; i++) {
	      z = zlevelList[i];
	      layer = this._layers[z];

	      if (!layer.__builtin__) {
	        cb.call(context, layer, z);
	      }
	    }
	  },

	  /**
	   * 获取所有已创建的层
	   * @param {Array.<module:zrender/Layer>} [prevLayer]
	   */
	  getLayers: function () {
	    return this._layers;
	  },
	  _updateLayerStatus: function (list) {
	    var layers = this._layers;
	    var progressiveLayers = this._progressiveLayers;
	    var elCountsLastFrame = {};
	    var progressiveElCountsLastFrame = {};
	    this.eachBuiltinLayer(function (layer, z) {
	      elCountsLastFrame[z] = layer.elCount;
	      layer.elCount = 0;
	      layer.__dirty = false;
	    });
	    util.each(progressiveLayers, function (layer, idx) {
	      progressiveElCountsLastFrame[idx] = layer.elCount;
	      layer.elCount = 0;
	      layer.__dirty = false;
	    });
	    var progressiveLayerCount = 0;
	    var currentProgressiveLayer;
	    var lastProgressiveKey;
	    var frameCount = 0;

	    for (var i = 0, l = list.length; i < l; i++) {
	      var el = list[i];
	      var zlevel = this._singleCanvas ? 0 : el.zlevel;
	      var layer = layers[zlevel];
	      var elProgress = el.progressive;

	      if (layer) {
	        layer.elCount++;
	        layer.__dirty = layer.__dirty || el.__dirty;
	      } /////// Update progressive


	      if (elProgress >= 0) {
	        // Fix wrong progressive sequence problem.
	        if (lastProgressiveKey !== elProgress) {
	          lastProgressiveKey = elProgress;
	          frameCount++;
	        }

	        var elFrame = el.__frame = frameCount - 1;

	        if (!currentProgressiveLayer) {
	          var idx = Math.min(progressiveLayerCount, MAX_PROGRESSIVE_LAYER_NUMBER - 1);
	          currentProgressiveLayer = progressiveLayers[idx];

	          if (!currentProgressiveLayer) {
	            currentProgressiveLayer = progressiveLayers[idx] = new Layer('progressive', this, this.dpr);
	            currentProgressiveLayer.initContext();
	          }

	          currentProgressiveLayer.__maxProgress = 0;
	        }

	        currentProgressiveLayer.__dirty = currentProgressiveLayer.__dirty || el.__dirty;
	        currentProgressiveLayer.elCount++;
	        currentProgressiveLayer.__maxProgress = Math.max(currentProgressiveLayer.__maxProgress, elFrame);

	        if (currentProgressiveLayer.__maxProgress >= currentProgressiveLayer.__progress) {
	          // Should keep rendering this  layer because progressive rendering is not finished yet
	          layer.__dirty = true;
	        }
	      } else {
	        el.__frame = -1;

	        if (currentProgressiveLayer) {
	          currentProgressiveLayer.__nextIdxNotProg = i;
	          progressiveLayerCount++;
	          currentProgressiveLayer = null;
	        }
	      }
	    }

	    if (currentProgressiveLayer) {
	      progressiveLayerCount++;
	      currentProgressiveLayer.__nextIdxNotProg = i;
	    } // 层中的元素数量有发生变化


	    this.eachBuiltinLayer(function (layer, z) {
	      if (elCountsLastFrame[z] !== layer.elCount) {
	        layer.__dirty = true;
	      }
	    });
	    progressiveLayers.length = Math.min(progressiveLayerCount, MAX_PROGRESSIVE_LAYER_NUMBER);
	    util.each(progressiveLayers, function (layer, idx) {
	      if (progressiveElCountsLastFrame[idx] !== layer.elCount) {
	        el.__dirty = true;
	      }

	      if (layer.__dirty) {
	        layer.__progress = 0;
	      }
	    });
	  },

	  /**
	   * 清除hover层外所有内容
	   */
	  clear: function () {
	    this.eachBuiltinLayer(this._clearLayer);
	    return this;
	  },
	  _clearLayer: function (layer) {
	    layer.clear();
	  },

	  /**
	   * 修改指定zlevel的绘制参数
	   *
	   * @param {string} zlevel
	   * @param {Object} config 配置对象
	   * @param {string} [config.clearColor=0] 每次清空画布的颜色
	   * @param {string} [config.motionBlur=false] 是否开启动态模糊
	   * @param {number} [config.lastFrameAlpha=0.7]
	   *                 在开启动态模糊的时候使用，与上一帧混合的alpha值，值越大尾迹越明显
	   */
	  configLayer: function (zlevel, config) {
	    if (config) {
	      var layerConfig = this._layerConfig;

	      if (!layerConfig[zlevel]) {
	        layerConfig[zlevel] = config;
	      } else {
	        util.merge(layerConfig[zlevel], config, true);
	      }

	      var layer = this._layers[zlevel];

	      if (layer) {
	        util.merge(layer, layerConfig[zlevel], true);
	      }
	    }
	  },

	  /**
	   * 删除指定层
	   * @param {number} zlevel 层所在的zlevel
	   */
	  delLayer: function (zlevel) {
	    var layers = this._layers;
	    var zlevelList = this._zlevelList;
	    var layer = layers[zlevel];

	    if (!layer) {
	      return;
	    }

	    layer.dom.parentNode.removeChild(layer.dom);
	    delete layers[zlevel];
	    zlevelList.splice(util.indexOf(zlevelList, zlevel), 1);
	  },

	  /**
	   * 区域大小变化后重绘
	   */
	  resize: function (width, height) {
	    var domRoot = this._domRoot; // FIXME Why ?

	    domRoot.style.display = 'none'; // Save input w/h

	    var opts = this._opts;
	    width != null && (opts.width = width);
	    height != null && (opts.height = height);
	    width = this._getSize(0);
	    height = this._getSize(1);
	    domRoot.style.display = ''; // 优化没有实际改变的resize

	    if (this._width != width || height != this._height) {
	      domRoot.style.width = width + 'px';
	      domRoot.style.height = height + 'px';

	      for (var id in this._layers) {
	        if (this._layers.hasOwnProperty(id)) {
	          this._layers[id].resize(width, height);
	        }
	      }

	      util.each(this._progressiveLayers, function (layer) {
	        layer.resize(width, height);
	      });
	      this.refresh(true);
	    }

	    this._width = width;
	    this._height = height;
	    return this;
	  },

	  /**
	   * 清除单独的一个层
	   * @param {number} zlevel
	   */
	  clearLayer: function (zlevel) {
	    var layer = this._layers[zlevel];

	    if (layer) {
	      layer.clear();
	    }
	  },

	  /**
	   * 释放
	   */
	  dispose: function () {
	    this.root.innerHTML = '';
	    this.root = this.storage = this._domRoot = this._layers = null;
	  },

	  /**
	   * Get canvas which has all thing rendered
	   * @param {Object} opts
	   * @param {string} [opts.backgroundColor]
	   * @param {number} [opts.pixelRatio]
	   */
	  getRenderedCanvas: function (opts) {
	    opts = opts || {};

	    if (this._singleCanvas) {
	      return this._layers[0].dom;
	    }

	    var imageLayer = new Layer('image', this, opts.pixelRatio || this.dpr);
	    imageLayer.initContext();
	    imageLayer.clearColor = opts.backgroundColor;
	    imageLayer.clear();
	    var displayList = this.storage.getDisplayList(true);
	    var scope = {};
	    var zlevel;
	    var self = this;

	    function findAndDrawOtherLayer(smaller, larger) {
	      var zlevelList = self._zlevelList;

	      if (smaller == null) {
	        smaller = -Infinity;
	      }

	      var intermediateLayer;

	      for (var i = 0; i < zlevelList.length; i++) {
	        var z = zlevelList[i];
	        var layer = self._layers[z];

	        if (!layer.__builtin__ && z > smaller && z < larger) {
	          intermediateLayer = layer;
	          break;
	        }
	      }

	      if (intermediateLayer && intermediateLayer.renderToCanvas) {
	        imageLayer.ctx.save();
	        intermediateLayer.renderToCanvas(imageLayer.ctx);
	        imageLayer.ctx.restore();
	      }
	    }

	    for (var i = 0; i < displayList.length; i++) {
	      var el = displayList[i];

	      if (el.zlevel !== zlevel) {
	        findAndDrawOtherLayer(zlevel, el.zlevel);
	        zlevel = el.zlevel;
	      }

	      this._doPaintEl(el, imageLayer, true, scope);
	    }

	    findAndDrawOtherLayer(zlevel, Infinity);
	    return imageLayer.dom;
	  },

	  /**
	   * 获取绘图区域宽度
	   */
	  getWidth: function () {
	    return this._width;
	  },

	  /**
	   * 获取绘图区域高度
	   */
	  getHeight: function () {
	    return this._height;
	  },
	  _getSize: function (whIdx) {
	    var opts = this._opts;
	    var wh = ['width', 'height'][whIdx];
	    var cwh = ['clientWidth', 'clientHeight'][whIdx];
	    var plt = ['paddingLeft', 'paddingTop'][whIdx];
	    var prb = ['paddingRight', 'paddingBottom'][whIdx];

	    if (opts[wh] != null && opts[wh] !== 'auto') {
	      return parseFloat(opts[wh]);
	    }

	    var root = this.root; // IE8 does not support getComputedStyle, but it use VML.

	    var stl = document.defaultView.getComputedStyle(root);
	    return (root[cwh] || parseInt10(stl[wh]) || parseInt10(root.style[wh])) - (parseInt10(stl[plt]) || 0) - (parseInt10(stl[prb]) || 0) | 0;
	  },
	  pathToImage: function (path, dpr) {
	    dpr = dpr || this.dpr;
	    var canvas = document.createElement('canvas');
	    var ctx = canvas.getContext('2d');
	    var rect = path.getBoundingRect();
	    var style = path.style;
	    var shadowBlurSize = style.shadowBlur;
	    var shadowOffsetX = style.shadowOffsetX;
	    var shadowOffsetY = style.shadowOffsetY;
	    var lineWidth = style.hasStroke() ? style.lineWidth : 0;
	    var leftMargin = Math.max(lineWidth / 2, -shadowOffsetX + shadowBlurSize);
	    var rightMargin = Math.max(lineWidth / 2, shadowOffsetX + shadowBlurSize);
	    var topMargin = Math.max(lineWidth / 2, -shadowOffsetY + shadowBlurSize);
	    var bottomMargin = Math.max(lineWidth / 2, shadowOffsetY + shadowBlurSize);
	    var width = rect.width + leftMargin + rightMargin;
	    var height = rect.height + topMargin + bottomMargin;
	    canvas.width = width * dpr;
	    canvas.height = height * dpr;
	    ctx.scale(dpr, dpr);
	    ctx.clearRect(0, 0, width, height);
	    ctx.dpr = dpr;
	    var pathTransform = {
	      position: path.position,
	      rotation: path.rotation,
	      scale: path.scale
	    };
	    path.position = [leftMargin - rect.x, topMargin - rect.y];
	    path.rotation = 0;
	    path.scale = [1, 1];
	    path.updateTransform();

	    if (path) {
	      path.brush(ctx);
	    }

	    var ImageShape = Image;
	    var imgShape = new ImageShape({
	      style: {
	        x: 0,
	        y: 0,
	        image: canvas
	      }
	    });

	    if (pathTransform.position != null) {
	      imgShape.position = path.position = pathTransform.position;
	    }

	    if (pathTransform.rotation != null) {
	      imgShape.rotation = path.rotation = pathTransform.rotation;
	    }

	    if (pathTransform.scale != null) {
	      imgShape.scale = path.scale = pathTransform.scale;
	    }

	    return imgShape;
	  }
	};
	var _default = Painter;
	module.exports = _default;

/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	var util = __webpack_require__(166);

	var _config = __webpack_require__(183);

	var devicePixelRatio = _config.devicePixelRatio;

	var Style = __webpack_require__(188);

	var Pattern = __webpack_require__(189);

	/**
	 * @module zrender/Layer
	 * @author pissang(https://www.github.com/pissang)
	 */
	function returnFalse() {
	  return false;
	}
	/**
	 * 创建dom
	 *
	 * @inner
	 * @param {string} id dom id 待用
	 * @param {Painter} painter painter instance
	 * @param {number} number
	 */


	function createDom(id, painter, dpr) {
	  var newDom = util.createCanvas();
	  var width = painter.getWidth();
	  var height = painter.getHeight();
	  var newDomStyle = newDom.style; // 没append呢，请原谅我这样写，清晰~

	  newDomStyle.position = 'absolute';
	  newDomStyle.left = 0;
	  newDomStyle.top = 0;
	  newDomStyle.width = width + 'px';
	  newDomStyle.height = height + 'px';
	  newDom.width = width * dpr;
	  newDom.height = height * dpr; // id不作为索引用，避免可能造成的重名，定义为私有属性

	  newDom.setAttribute('data-zr-dom-id', id);
	  return newDom;
	}
	/**
	 * @alias module:zrender/Layer
	 * @constructor
	 * @extends module:zrender/mixin/Transformable
	 * @param {string} id
	 * @param {module:zrender/Painter} painter
	 * @param {number} [dpr]
	 */


	var Layer = function (id, painter, dpr) {
	  var dom;
	  dpr = dpr || devicePixelRatio;

	  if (typeof id === 'string') {
	    dom = createDom(id, painter, dpr);
	  } // Not using isDom because in node it will return false
	  else if (util.isObject(id)) {
	      dom = id;
	      id = dom.id;
	    }

	  this.id = id;
	  this.dom = dom;
	  var domStyle = dom.style;

	  if (domStyle) {
	    // Not in node
	    dom.onselectstart = returnFalse; // 避免页面选中的尴尬

	    domStyle['-webkit-user-select'] = 'none';
	    domStyle['user-select'] = 'none';
	    domStyle['-webkit-touch-callout'] = 'none';
	    domStyle['-webkit-tap-highlight-color'] = 'rgba(0,0,0,0)';
	    domStyle['padding'] = 0;
	    domStyle['margin'] = 0;
	    domStyle['border-width'] = 0;
	  }

	  this.domBack = null;
	  this.ctxBack = null;
	  this.painter = painter;
	  this.config = null; // Configs

	  /**
	   * 每次清空画布的颜色
	   * @type {string}
	   * @default 0
	   */

	  this.clearColor = 0;
	  /**
	   * 是否开启动态模糊
	   * @type {boolean}
	   * @default false
	   */

	  this.motionBlur = false;
	  /**
	   * 在开启动态模糊的时候使用，与上一帧混合的alpha值，值越大尾迹越明显
	   * @type {number}
	   * @default 0.7
	   */

	  this.lastFrameAlpha = 0.7;
	  /**
	   * Layer dpr
	   * @type {number}
	   */

	  this.dpr = dpr;
	};

	Layer.prototype = {
	  constructor: Layer,
	  elCount: 0,
	  __dirty: true,
	  initContext: function () {
	    this.ctx = this.dom.getContext('2d');
	    this.ctx.__currentValues = {};
	    this.ctx.dpr = this.dpr;
	  },
	  createBackBuffer: function () {
	    var dpr = this.dpr;
	    this.domBack = createDom('back-' + this.id, this.painter, dpr);
	    this.ctxBack = this.domBack.getContext('2d');
	    this.ctxBack.__currentValues = {};

	    if (dpr != 1) {
	      this.ctxBack.scale(dpr, dpr);
	    }
	  },

	  /**
	   * @param  {number} width
	   * @param  {number} height
	   */
	  resize: function (width, height) {
	    var dpr = this.dpr;
	    var dom = this.dom;
	    var domStyle = dom.style;
	    var domBack = this.domBack;
	    domStyle.width = width + 'px';
	    domStyle.height = height + 'px';
	    dom.width = width * dpr;
	    dom.height = height * dpr;

	    if (domBack) {
	      domBack.width = width * dpr;
	      domBack.height = height * dpr;

	      if (dpr != 1) {
	        this.ctxBack.scale(dpr, dpr);
	      }
	    }
	  },

	  /**
	   * 清空该层画布
	   * @param {boolean} clearAll Clear all with out motion blur
	   */
	  clear: function (clearAll) {
	    var dom = this.dom;
	    var ctx = this.ctx;
	    var width = dom.width;
	    var height = dom.height;
	    var clearColor = this.clearColor;
	    var haveMotionBLur = this.motionBlur && !clearAll;
	    var lastFrameAlpha = this.lastFrameAlpha;
	    var dpr = this.dpr;

	    if (haveMotionBLur) {
	      if (!this.domBack) {
	        this.createBackBuffer();
	      }

	      this.ctxBack.globalCompositeOperation = 'copy';
	      this.ctxBack.drawImage(dom, 0, 0, width / dpr, height / dpr);
	    }

	    ctx.clearRect(0, 0, width, height);

	    if (clearColor) {
	      var clearColorGradientOrPattern; // Gradient

	      if (clearColor.colorStops) {
	        // Cache canvas gradient
	        clearColorGradientOrPattern = clearColor.__canvasGradient || Style.getGradient(ctx, clearColor, {
	          x: 0,
	          y: 0,
	          width: width,
	          height: height
	        });
	        clearColor.__canvasGradient = clearColorGradientOrPattern;
	      } // Pattern
	      else if (clearColor.image) {
	          clearColorGradientOrPattern = Pattern.prototype.getCanvasPattern.call(clearColor, ctx);
	        }

	      ctx.save();
	      ctx.fillStyle = clearColorGradientOrPattern || clearColor;
	      ctx.fillRect(0, 0, width, height);
	      ctx.restore();
	    }

	    if (haveMotionBLur) {
	      var domBack = this.domBack;
	      ctx.save();
	      ctx.globalAlpha = lastFrameAlpha;
	      ctx.drawImage(domBack, 0, 0, width, height);
	      ctx.restore();
	    }
	  }
	};
	var _default = Layer;
	module.exports = _default;

/***/ },
/* 188 */
/***/ function(module, exports) {

	var STYLE_COMMON_PROPS = [['shadowBlur', 0], ['shadowOffsetX', 0], ['shadowOffsetY', 0], ['shadowColor', '#000'], ['lineCap', 'butt'], ['lineJoin', 'miter'], ['miterLimit', 10]]; // var SHADOW_PROPS = STYLE_COMMON_PROPS.slice(0, 4);
	// var LINE_PROPS = STYLE_COMMON_PROPS.slice(4);

	var Style = function (opts, host) {
	  this.extendFrom(opts, false);
	  this.host = host;
	};

	function createLinearGradient(ctx, obj, rect) {
	  var x = obj.x == null ? 0 : obj.x;
	  var x2 = obj.x2 == null ? 1 : obj.x2;
	  var y = obj.y == null ? 0 : obj.y;
	  var y2 = obj.y2 == null ? 0 : obj.y2;

	  if (!obj.global) {
	    x = x * rect.width + rect.x;
	    x2 = x2 * rect.width + rect.x;
	    y = y * rect.height + rect.y;
	    y2 = y2 * rect.height + rect.y;
	  }

	  var canvasGradient = ctx.createLinearGradient(x, y, x2, y2);
	  return canvasGradient;
	}

	function createRadialGradient(ctx, obj, rect) {
	  var width = rect.width;
	  var height = rect.height;
	  var min = Math.min(width, height);
	  var x = obj.x == null ? 0.5 : obj.x;
	  var y = obj.y == null ? 0.5 : obj.y;
	  var r = obj.r == null ? 0.5 : obj.r;

	  if (!obj.global) {
	    x = x * width + rect.x;
	    y = y * height + rect.y;
	    r = r * min;
	  }

	  var canvasGradient = ctx.createRadialGradient(x, y, 0, x, y, r);
	  return canvasGradient;
	}

	Style.prototype = {
	  constructor: Style,

	  /**
	   * @type {module:zrender/graphic/Displayable}
	   */
	  host: null,

	  /**
	   * @type {string}
	   */
	  fill: '#000',

	  /**
	   * @type {string}
	   */
	  stroke: null,

	  /**
	   * @type {number}
	   */
	  opacity: 1,

	  /**
	   * @type {Array.<number>}
	   */
	  lineDash: null,

	  /**
	   * @type {number}
	   */
	  lineDashOffset: 0,

	  /**
	   * @type {number}
	   */
	  shadowBlur: 0,

	  /**
	   * @type {number}
	   */
	  shadowOffsetX: 0,

	  /**
	   * @type {number}
	   */
	  shadowOffsetY: 0,

	  /**
	   * @type {number}
	   */
	  lineWidth: 1,

	  /**
	   * If stroke ignore scale
	   * @type {Boolean}
	   */
	  strokeNoScale: false,
	  // Bounding rect text configuration
	  // Not affected by element transform

	  /**
	   * @type {string}
	   */
	  text: null,

	  /**
	   * If `fontSize` or `fontFamily` exists, `font` will be reset by
	   * `fontSize`, `fontStyle`, `fontWeight`, `fontFamily`.
	   * So do not visit it directly in upper application (like echarts),
	   * but use `contain/text#makeFont` instead.
	   * @type {string}
	   */
	  font: null,

	  /**
	   * The same as font. Use font please.
	   * @deprecated
	   * @type {string}
	   */
	  textFont: null,

	  /**
	   * It helps merging respectively, rather than parsing an entire font string.
	   * @type {string}
	   */
	  fontStyle: null,

	  /**
	   * It helps merging respectively, rather than parsing an entire font string.
	   * @type {string}
	   */
	  fontWeight: null,

	  /**
	   * It helps merging respectively, rather than parsing an entire font string.
	   * Should be 12 but not '12px'.
	   * @type {number}
	   */
	  fontSize: null,

	  /**
	   * It helps merging respectively, rather than parsing an entire font string.
	   * @type {string}
	   */
	  fontFamily: null,

	  /**
	   * Reserved for special functinality, like 'hr'.
	   * @type {string}
	   */
	  textTag: null,

	  /**
	   * @type {string}
	   */
	  textFill: '#000',

	  /**
	   * @type {string}
	   */
	  textStroke: null,

	  /**
	   * @type {number}
	   */
	  textWidth: null,

	  /**
	   * Only for textBackground.
	   * @type {number}
	   */
	  textHeight: null,

	  /**
	   * textStroke may be set as some color as a default
	   * value in upper applicaion, where the default value
	   * of textStrokeWidth should be 0 to make sure that
	   * user can choose to do not use text stroke.
	   * @type {number}
	   */
	  textStrokeWidth: 0,

	  /**
	   * @type {number}
	   */
	  textLineHeight: null,

	  /**
	   * 'inside', 'left', 'right', 'top', 'bottom'
	   * [x, y]
	   * Based on x, y of rect.
	   * @type {string|Array.<number>}
	   * @default 'inside'
	   */
	  textPosition: 'inside',

	  /**
	   * If not specified, use the boundingRect of a `displayable`.
	   * @type {Object}
	   */
	  textRect: null,

	  /**
	   * [x, y]
	   * @type {Array.<number>}
	   */
	  textOffset: null,

	  /**
	   * @type {string}
	   */
	  textAlign: null,

	  /**
	   * @type {string}
	   */
	  textVerticalAlign: null,

	  /**
	   * @type {number}
	   */
	  textDistance: 5,

	  /**
	   * @type {string}
	   */
	  textShadowColor: 'transparent',

	  /**
	   * @type {number}
	   */
	  textShadowBlur: 0,

	  /**
	   * @type {number}
	   */
	  textShadowOffsetX: 0,

	  /**
	   * @type {number}
	   */
	  textShadowOffsetY: 0,

	  /**
	   * @type {string}
	   */
	  textBoxShadowColor: 'transparent',

	  /**
	   * @type {number}
	   */
	  textBoxShadowBlur: 0,

	  /**
	   * @type {number}
	   */
	  textBoxShadowOffsetX: 0,

	  /**
	   * @type {number}
	   */
	  textBoxShadowOffsetY: 0,

	  /**
	   * Whether transform text.
	   * Only useful in Path and Image element
	   * @type {boolean}
	   */
	  transformText: false,

	  /**
	   * Text rotate around position of Path or Image
	   * Only useful in Path and Image element and transformText is false.
	   */
	  textRotation: 0,

	  /**
	   * Text origin of text rotation, like [10, 40].
	   * Based on x, y of rect.
	   * Useful in label rotation of circular symbol.
	   * By default, this origin is textPosition.
	   * Can be 'center'.
	   * @type {string|Array.<number>}
	   */
	  textOrigin: null,

	  /**
	   * @type {string}
	   */
	  textBackgroundColor: null,

	  /**
	   * @type {string}
	   */
	  textBorderColor: null,

	  /**
	   * @type {number}
	   */
	  textBorderWidth: 0,

	  /**
	   * @type {number}
	   */
	  textBorderRadius: 0,

	  /**
	   * Can be `2` or `[2, 4]` or `[2, 3, 4, 5]`
	   * @type {number|Array.<number>}
	   */
	  textPadding: null,

	  /**
	   * Text styles for rich text.
	   * @type {Object}
	   */
	  rich: null,

	  /**
	   * {outerWidth, outerHeight, ellipsis, placeholder}
	   * @type {Object}
	   */
	  truncate: null,

	  /**
	   * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation
	   * @type {string}
	   */
	  blend: null,

	  /**
	   * @param {CanvasRenderingContext2D} ctx
	   */
	  bind: function (ctx, el, prevEl) {
	    var style = this;
	    var prevStyle = prevEl && prevEl.style;
	    var firstDraw = !prevStyle;

	    for (var i = 0; i < STYLE_COMMON_PROPS.length; i++) {
	      var prop = STYLE_COMMON_PROPS[i];
	      var styleName = prop[0];

	      if (firstDraw || style[styleName] !== prevStyle[styleName]) {
	        // FIXME Invalid property value will cause style leak from previous element.
	        ctx[styleName] = style[styleName] || prop[1];
	      }
	    }

	    if (firstDraw || style.fill !== prevStyle.fill) {
	      ctx.fillStyle = style.fill;
	    }

	    if (firstDraw || style.stroke !== prevStyle.stroke) {
	      ctx.strokeStyle = style.stroke;
	    }

	    if (firstDraw || style.opacity !== prevStyle.opacity) {
	      ctx.globalAlpha = style.opacity == null ? 1 : style.opacity;
	    }

	    if (firstDraw || style.blend !== prevStyle.blend) {
	      ctx.globalCompositeOperation = style.blend || 'source-over';
	    }

	    if (this.hasStroke()) {
	      var lineWidth = style.lineWidth;
	      ctx.lineWidth = lineWidth / (this.strokeNoScale && el && el.getLineScale ? el.getLineScale() : 1);
	    }
	  },
	  hasFill: function () {
	    var fill = this.fill;
	    return fill != null && fill !== 'none';
	  },
	  hasStroke: function () {
	    var stroke = this.stroke;
	    return stroke != null && stroke !== 'none' && this.lineWidth > 0;
	  },

	  /**
	   * Extend from other style
	   * @param {zrender/graphic/Style} otherStyle
	   * @param {boolean} overwrite true: overwrirte any way.
	   *                            false: overwrite only when !target.hasOwnProperty
	   *                            others: overwrite when property is not null/undefined.
	   */
	  extendFrom: function (otherStyle, overwrite) {
	    if (otherStyle) {
	      for (var name in otherStyle) {
	        if (otherStyle.hasOwnProperty(name) && (overwrite === true || (overwrite === false ? !this.hasOwnProperty(name) : otherStyle[name] != null))) {
	          this[name] = otherStyle[name];
	        }
	      }
	    }
	  },

	  /**
	   * Batch setting style with a given object
	   * @param {Object|string} obj
	   * @param {*} [obj]
	   */
	  set: function (obj, value) {
	    if (typeof obj === 'string') {
	      this[obj] = value;
	    } else {
	      this.extendFrom(obj, true);
	    }
	  },

	  /**
	   * Clone
	   * @return {zrender/graphic/Style} [description]
	   */
	  clone: function () {
	    var newStyle = new this.constructor();
	    newStyle.extendFrom(this, true);
	    return newStyle;
	  },
	  getGradient: function (ctx, obj, rect) {
	    var method = obj.type === 'radial' ? createRadialGradient : createLinearGradient;
	    var canvasGradient = method(ctx, obj, rect);
	    var colorStops = obj.colorStops;

	    for (var i = 0; i < colorStops.length; i++) {
	      canvasGradient.addColorStop(colorStops[i].offset, colorStops[i].color);
	    }

	    return canvasGradient;
	  }
	};
	var styleProto = Style.prototype;

	for (var i = 0; i < STYLE_COMMON_PROPS.length; i++) {
	  var prop = STYLE_COMMON_PROPS[i];

	  if (!(prop[0] in styleProto)) {
	    styleProto[prop[0]] = prop[1];
	  }
	} // Provide for others


	Style.getGradient = styleProto.getGradient;
	var _default = Style;
	module.exports = _default;

/***/ },
/* 189 */
/***/ function(module, exports) {

	var Pattern = function (image, repeat) {
	  // Should do nothing more in this constructor. Because gradient can be
	  // declard by `color: {image: ...}`, where this constructor will not be called.
	  this.image = image;
	  this.repeat = repeat; // Can be cloned

	  this.type = 'pattern';
	};

	Pattern.prototype.getCanvasPattern = function (ctx) {
	  return ctx.createPattern(this.image, this.repeat || 'repeat');
	};

	var _default = Pattern;
	module.exports = _default;

/***/ },
/* 190 */
/***/ function(module, exports) {

	var _default = typeof window !== 'undefined' && (window.requestAnimationFrame && window.requestAnimationFrame.bind(window) || // https://github.com/ecomfe/zrender/issues/189#issuecomment-224919809
	window.msRequestAnimationFrame && window.msRequestAnimationFrame.bind(window) || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame) || function (func) {
	  setTimeout(func, 16);
	};

	module.exports = _default;

/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	var Displayable = __webpack_require__(192);

	var BoundingRect = __webpack_require__(184);

	var zrUtil = __webpack_require__(166);

	var imageHelper = __webpack_require__(196);

	/**
	 * @alias zrender/graphic/Image
	 * @extends module:zrender/graphic/Displayable
	 * @constructor
	 * @param {Object} opts
	 */
	function ZImage(opts) {
	  Displayable.call(this, opts);
	}

	ZImage.prototype = {
	  constructor: ZImage,
	  type: 'image',
	  brush: function (ctx, prevEl) {
	    var style = this.style;
	    var src = style.image; // Must bind each time

	    style.bind(ctx, this, prevEl);
	    var image = this._image = imageHelper.createOrUpdateImage(src, this._image, this, this.onload);

	    if (!image || !imageHelper.isImageReady(image)) {
	      return;
	    } // 图片已经加载完成
	    // if (image.nodeName.toUpperCase() == 'IMG') {
	    //     if (!image.complete) {
	    //         return;
	    //     }
	    // }
	    // Else is canvas


	    var x = style.x || 0;
	    var y = style.y || 0;
	    var width = style.width;
	    var height = style.height;
	    var aspect = image.width / image.height;

	    if (width == null && height != null) {
	      // Keep image/height ratio
	      width = height * aspect;
	    } else if (height == null && width != null) {
	      height = width / aspect;
	    } else if (width == null && height == null) {
	      width = image.width;
	      height = image.height;
	    } // 设置transform


	    this.setTransform(ctx);

	    if (style.sWidth && style.sHeight) {
	      var sx = style.sx || 0;
	      var sy = style.sy || 0;
	      ctx.drawImage(image, sx, sy, style.sWidth, style.sHeight, x, y, width, height);
	    } else if (style.sx && style.sy) {
	      var sx = style.sx;
	      var sy = style.sy;
	      var sWidth = width - sx;
	      var sHeight = height - sy;
	      ctx.drawImage(image, sx, sy, sWidth, sHeight, x, y, width, height);
	    } else {
	      ctx.drawImage(image, x, y, width, height);
	    }

	    this.restoreTransform(ctx); // Draw rect text

	    if (style.text != null) {
	      this.drawRectText(ctx, this.getBoundingRect());
	    }
	  },
	  getBoundingRect: function () {
	    var style = this.style;

	    if (!this._rect) {
	      this._rect = new BoundingRect(style.x || 0, style.y || 0, style.width || 0, style.height || 0);
	    }

	    return this._rect;
	  }
	};
	zrUtil.inherits(ZImage, Displayable);
	var _default = ZImage;
	module.exports = _default;

/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var Style = __webpack_require__(188);

	var Element = __webpack_require__(173);

	var RectText = __webpack_require__(193);

	/**
	 * 可绘制的图形基类
	 * Base class of all displayable graphic objects
	 * @module zrender/graphic/Displayable
	 */

	/**
	 * @alias module:zrender/graphic/Displayable
	 * @extends module:zrender/Element
	 * @extends module:zrender/graphic/mixin/RectText
	 */
	function Displayable(opts) {
	  opts = opts || {};
	  Element.call(this, opts); // Extend properties

	  for (var name in opts) {
	    if (opts.hasOwnProperty(name) && name !== 'style') {
	      this[name] = opts[name];
	    }
	  }
	  /**
	   * @type {module:zrender/graphic/Style}
	   */


	  this.style = new Style(opts.style, this);
	  this._rect = null; // Shapes for cascade clipping.

	  this.__clipPaths = []; // FIXME Stateful must be mixined after style is setted
	  // Stateful.call(this, opts);
	}

	Displayable.prototype = {
	  constructor: Displayable,
	  type: 'displayable',

	  /**
	   * Displayable 是否为脏，Painter 中会根据该标记判断是否需要是否需要重新绘制
	   * Dirty flag. From which painter will determine if this displayable object needs brush
	   * @name module:zrender/graphic/Displayable#__dirty
	   * @type {boolean}
	   */
	  __dirty: true,

	  /**
	   * 图形是否可见，为true时不绘制图形，但是仍能触发鼠标事件
	   * If ignore drawing of the displayable object. Mouse event will still be triggered
	   * @name module:/zrender/graphic/Displayable#invisible
	   * @type {boolean}
	   * @default false
	   */
	  invisible: false,

	  /**
	   * @name module:/zrender/graphic/Displayable#z
	   * @type {number}
	   * @default 0
	   */
	  z: 0,

	  /**
	   * @name module:/zrender/graphic/Displayable#z
	   * @type {number}
	   * @default 0
	   */
	  z2: 0,

	  /**
	   * z层level，决定绘画在哪层canvas中
	   * @name module:/zrender/graphic/Displayable#zlevel
	   * @type {number}
	   * @default 0
	   */
	  zlevel: 0,

	  /**
	   * 是否可拖拽
	   * @name module:/zrender/graphic/Displayable#draggable
	   * @type {boolean}
	   * @default false
	   */
	  draggable: false,

	  /**
	   * 是否正在拖拽
	   * @name module:/zrender/graphic/Displayable#draggable
	   * @type {boolean}
	   * @default false
	   */
	  dragging: false,

	  /**
	   * 是否相应鼠标事件
	   * @name module:/zrender/graphic/Displayable#silent
	   * @type {boolean}
	   * @default false
	   */
	  silent: false,

	  /**
	   * If enable culling
	   * @type {boolean}
	   * @default false
	   */
	  culling: false,

	  /**
	   * Mouse cursor when hovered
	   * @name module:/zrender/graphic/Displayable#cursor
	   * @type {string}
	   */
	  cursor: 'pointer',

	  /**
	   * If hover area is bounding rect
	   * @name module:/zrender/graphic/Displayable#rectHover
	   * @type {string}
	   */
	  rectHover: false,

	  /**
	   * Render the element progressively when the value >= 0,
	   * usefull for large data.
	   * @type {number}
	   */
	  progressive: -1,
	  beforeBrush: function (ctx) {},
	  afterBrush: function (ctx) {},

	  /**
	   * 图形绘制方法
	   * @param {CanvasRenderingContext2D} ctx
	   */
	  // Interface
	  brush: function (ctx, prevEl) {},

	  /**
	   * 获取最小包围盒
	   * @return {module:zrender/core/BoundingRect}
	   */
	  // Interface
	  getBoundingRect: function () {},

	  /**
	   * 判断坐标 x, y 是否在图形上
	   * If displayable element contain coord x, y
	   * @param  {number} x
	   * @param  {number} y
	   * @return {boolean}
	   */
	  contain: function (x, y) {
	    return this.rectContain(x, y);
	  },

	  /**
	   * @param  {Function} cb
	   * @param  {}   context
	   */
	  traverse: function (cb, context) {
	    cb.call(context, this);
	  },

	  /**
	   * 判断坐标 x, y 是否在图形的包围盒上
	   * If bounding rect of element contain coord x, y
	   * @param  {number} x
	   * @param  {number} y
	   * @return {boolean}
	   */
	  rectContain: function (x, y) {
	    var coord = this.transformCoordToLocal(x, y);
	    var rect = this.getBoundingRect();
	    return rect.contain(coord[0], coord[1]);
	  },

	  /**
	   * 标记图形元素为脏，并且在下一帧重绘
	   * Mark displayable element dirty and refresh next frame
	   */
	  dirty: function () {
	    this.__dirty = true;
	    this._rect = null;
	    this.__zr && this.__zr.refresh();
	  },

	  /**
	   * 图形是否会触发事件
	   * If displayable object binded any event
	   * @return {boolean}
	   */
	  // TODO, 通过 bind 绑定的事件
	  // isSilent: function () {
	  //     return !(
	  //         this.hoverable || this.draggable
	  //         || this.onmousemove || this.onmouseover || this.onmouseout
	  //         || this.onmousedown || this.onmouseup || this.onclick
	  //         || this.ondragenter || this.ondragover || this.ondragleave
	  //         || this.ondrop
	  //     );
	  // },

	  /**
	   * Alias for animate('style')
	   * @param {boolean} loop
	   */
	  animateStyle: function (loop) {
	    return this.animate('style', loop);
	  },
	  attrKV: function (key, value) {
	    if (key !== 'style') {
	      Element.prototype.attrKV.call(this, key, value);
	    } else {
	      this.style.set(value);
	    }
	  },

	  /**
	   * @param {Object|string} key
	   * @param {*} value
	   */
	  setStyle: function (key, value) {
	    this.style.set(key, value);
	    this.dirty(false);
	    return this;
	  },

	  /**
	   * Use given style object
	   * @param  {Object} obj
	   */
	  useStyle: function (obj) {
	    this.style = new Style(obj, this);
	    this.dirty(false);
	    return this;
	  }
	};
	zrUtil.inherits(Displayable, Element);
	zrUtil.mixin(Displayable, RectText); // zrUtil.mixin(Displayable, Stateful);

	var _default = Displayable;
	module.exports = _default;

/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	var textHelper = __webpack_require__(194);

	var BoundingRect = __webpack_require__(184);

	/**
	 * Mixin for drawing text in a element bounding rect
	 * @module zrender/mixin/RectText
	 */
	var tmpRect = new BoundingRect();

	var RectText = function () {};

	RectText.prototype = {
	  constructor: RectText,

	  /**
	   * Draw text in a rect with specified position.
	   * @param  {CanvasRenderingContext2D} ctx
	   * @param  {Object} rect Displayable rect
	   */
	  drawRectText: function (ctx, rect) {
	    var style = this.style;
	    rect = style.textRect || rect; // Optimize, avoid normalize every time.

	    this.__dirty && textHelper.normalizeTextStyle(style, true);
	    var text = style.text; // Convert to string

	    text != null && (text += '');

	    if (!textHelper.needDrawText(text, style)) {
	      return;
	    } // FIXME


	    ctx.save(); // Transform rect to view space

	    var transform = this.transform;

	    if (!style.transformText) {
	      if (transform) {
	        tmpRect.copy(rect);
	        tmpRect.applyTransform(transform);
	        rect = tmpRect;
	      }
	    } else {
	      this.setTransform(ctx);
	    } // transformText and textRotation can not be used at the same time.


	    textHelper.renderText(this, ctx, text, style, rect);
	    ctx.restore();
	  }
	};
	var _default = RectText;
	module.exports = _default;

/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	var _util = __webpack_require__(166);

	var retrieve2 = _util.retrieve2;
	var retrieve3 = _util.retrieve3;
	var each = _util.each;
	var normalizeCssArray = _util.normalizeCssArray;
	var isString = _util.isString;
	var isObject = _util.isObject;

	var textContain = __webpack_require__(195);

	var roundRectHelper = __webpack_require__(197);

	var imageHelper = __webpack_require__(196);

	// TODO: Have not support 'start', 'end' yet.
	var VALID_TEXT_ALIGN = {
	  left: 1,
	  right: 1,
	  center: 1
	};
	var VALID_TEXT_VERTICAL_ALIGN = {
	  top: 1,
	  bottom: 1,
	  middle: 1
	};
	/**
	 * @param {module:zrender/graphic/Style} style
	 * @return {module:zrender/graphic/Style} The input style.
	 */

	function normalizeTextStyle(style) {
	  normalizeStyle(style);
	  each(style.rich, normalizeStyle);
	  return style;
	}

	function normalizeStyle(style) {
	  if (style) {
	    style.font = textContain.makeFont(style);
	    var textAlign = style.textAlign;
	    textAlign === 'middle' && (textAlign = 'center');
	    style.textAlign = textAlign == null || VALID_TEXT_ALIGN[textAlign] ? textAlign : 'left'; // Compatible with textBaseline.

	    var textVerticalAlign = style.textVerticalAlign || style.textBaseline;
	    textVerticalAlign === 'center' && (textVerticalAlign = 'middle');
	    style.textVerticalAlign = textVerticalAlign == null || VALID_TEXT_VERTICAL_ALIGN[textVerticalAlign] ? textVerticalAlign : 'top';
	    var textPadding = style.textPadding;

	    if (textPadding) {
	      style.textPadding = normalizeCssArray(style.textPadding);
	    }
	  }
	}
	/**
	 * @param {CanvasRenderingContext2D} ctx
	 * @param {string} text
	 * @param {module:zrender/graphic/Style} style
	 * @param {Object|boolean} [rect] {x, y, width, height}
	 *                  If set false, rect text is not used.
	 */


	function renderText(hostEl, ctx, text, style, rect) {
	  style.rich ? renderRichText(hostEl, ctx, text, style, rect) : renderPlainText(hostEl, ctx, text, style, rect);
	}

	function renderPlainText(hostEl, ctx, text, style, rect) {
	  var font = setCtx(ctx, 'font', style.font || textContain.DEFAULT_FONT);
	  var textPadding = style.textPadding;
	  var contentBlock = hostEl.__textCotentBlock;

	  if (!contentBlock || hostEl.__dirty) {
	    contentBlock = hostEl.__textCotentBlock = textContain.parsePlainText(text, font, textPadding, style.truncate);
	  }

	  var outerHeight = contentBlock.outerHeight;
	  var textLines = contentBlock.lines;
	  var lineHeight = contentBlock.lineHeight;
	  var boxPos = getBoxPosition(outerHeight, style, rect);
	  var baseX = boxPos.baseX;
	  var baseY = boxPos.baseY;
	  var textAlign = boxPos.textAlign;
	  var textVerticalAlign = boxPos.textVerticalAlign; // Origin of textRotation should be the base point of text drawing.

	  applyTextRotation(ctx, style, rect, baseX, baseY);
	  var boxY = textContain.adjustTextY(baseY, outerHeight, textVerticalAlign);
	  var textX = baseX;
	  var textY = boxY;
	  var needDrawBg = needDrawBackground(style);

	  if (needDrawBg || textPadding) {
	    // Consider performance, do not call getTextWidth util necessary.
	    var textWidth = textContain.getWidth(text, font);
	    var outerWidth = textWidth;
	    textPadding && (outerWidth += textPadding[1] + textPadding[3]);
	    var boxX = textContain.adjustTextX(baseX, outerWidth, textAlign);
	    needDrawBg && drawBackground(hostEl, ctx, style, boxX, boxY, outerWidth, outerHeight);

	    if (textPadding) {
	      textX = getTextXForPadding(baseX, textAlign, textPadding);
	      textY += textPadding[0];
	    }
	  }

	  setCtx(ctx, 'textAlign', textAlign || 'left'); // Force baseline to be "middle". Otherwise, if using "top", the
	  // text will offset downward a little bit in font "Microsoft YaHei".

	  setCtx(ctx, 'textBaseline', 'middle'); // Always set shadowBlur and shadowOffset to avoid leak from displayable.

	  setCtx(ctx, 'shadowBlur', style.textShadowBlur || 0);
	  setCtx(ctx, 'shadowColor', style.textShadowColor || 'transparent');
	  setCtx(ctx, 'shadowOffsetX', style.textShadowOffsetX || 0);
	  setCtx(ctx, 'shadowOffsetY', style.textShadowOffsetY || 0); // `textBaseline` is set as 'middle'.

	  textY += lineHeight / 2;
	  var textStrokeWidth = style.textStrokeWidth;
	  var textStroke = getStroke(style.textStroke, textStrokeWidth);
	  var textFill = getFill(style.textFill);

	  if (textStroke) {
	    setCtx(ctx, 'lineWidth', textStrokeWidth);
	    setCtx(ctx, 'strokeStyle', textStroke);
	  }

	  if (textFill) {
	    setCtx(ctx, 'fillStyle', textFill);
	  }

	  for (var i = 0; i < textLines.length; i++) {
	    // Fill after stroke so the outline will not cover the main part.
	    textStroke && ctx.strokeText(textLines[i], textX, textY);
	    textFill && ctx.fillText(textLines[i], textX, textY);
	    textY += lineHeight;
	  }
	}

	function renderRichText(hostEl, ctx, text, style, rect) {
	  var contentBlock = hostEl.__textCotentBlock;

	  if (!contentBlock || hostEl.__dirty) {
	    contentBlock = hostEl.__textCotentBlock = textContain.parseRichText(text, style);
	  }

	  drawRichText(hostEl, ctx, contentBlock, style, rect);
	}

	function drawRichText(hostEl, ctx, contentBlock, style, rect) {
	  var contentWidth = contentBlock.width;
	  var outerWidth = contentBlock.outerWidth;
	  var outerHeight = contentBlock.outerHeight;
	  var textPadding = style.textPadding;
	  var boxPos = getBoxPosition(outerHeight, style, rect);
	  var baseX = boxPos.baseX;
	  var baseY = boxPos.baseY;
	  var textAlign = boxPos.textAlign;
	  var textVerticalAlign = boxPos.textVerticalAlign; // Origin of textRotation should be the base point of text drawing.

	  applyTextRotation(ctx, style, rect, baseX, baseY);
	  var boxX = textContain.adjustTextX(baseX, outerWidth, textAlign);
	  var boxY = textContain.adjustTextY(baseY, outerHeight, textVerticalAlign);
	  var xLeft = boxX;
	  var lineTop = boxY;

	  if (textPadding) {
	    xLeft += textPadding[3];
	    lineTop += textPadding[0];
	  }

	  var xRight = xLeft + contentWidth;
	  needDrawBackground(style) && drawBackground(hostEl, ctx, style, boxX, boxY, outerWidth, outerHeight);

	  for (var i = 0; i < contentBlock.lines.length; i++) {
	    var line = contentBlock.lines[i];
	    var tokens = line.tokens;
	    var tokenCount = tokens.length;
	    var lineHeight = line.lineHeight;
	    var usedWidth = line.width;
	    var leftIndex = 0;
	    var lineXLeft = xLeft;
	    var lineXRight = xRight;
	    var rightIndex = tokenCount - 1;
	    var token;

	    while (leftIndex < tokenCount && (token = tokens[leftIndex], !token.textAlign || token.textAlign === 'left')) {
	      placeToken(hostEl, ctx, token, style, lineHeight, lineTop, lineXLeft, 'left');
	      usedWidth -= token.width;
	      lineXLeft += token.width;
	      leftIndex++;
	    }

	    while (rightIndex >= 0 && (token = tokens[rightIndex], token.textAlign === 'right')) {
	      placeToken(hostEl, ctx, token, style, lineHeight, lineTop, lineXRight, 'right');
	      usedWidth -= token.width;
	      lineXRight -= token.width;
	      rightIndex--;
	    } // The other tokens are placed as textAlign 'center' if there is enough space.


	    lineXLeft += (contentWidth - (lineXLeft - xLeft) - (xRight - lineXRight) - usedWidth) / 2;

	    while (leftIndex <= rightIndex) {
	      token = tokens[leftIndex]; // Consider width specified by user, use 'center' rather than 'left'.

	      placeToken(hostEl, ctx, token, style, lineHeight, lineTop, lineXLeft + token.width / 2, 'center');
	      lineXLeft += token.width;
	      leftIndex++;
	    }

	    lineTop += lineHeight;
	  }
	}

	function applyTextRotation(ctx, style, rect, x, y) {
	  // textRotation only apply in RectText.
	  if (rect && style.textRotation) {
	    var origin = style.textOrigin;

	    if (origin === 'center') {
	      x = rect.width / 2 + rect.x;
	      y = rect.height / 2 + rect.y;
	    } else if (origin) {
	      x = origin[0] + rect.x;
	      y = origin[1] + rect.y;
	    }

	    ctx.translate(x, y); // Positive: anticlockwise

	    ctx.rotate(-style.textRotation);
	    ctx.translate(-x, -y);
	  }
	}

	function placeToken(hostEl, ctx, token, style, lineHeight, lineTop, x, textAlign) {
	  var tokenStyle = style.rich[token.styleName] || {}; // 'ctx.textBaseline' is always set as 'middle', for sake of
	  // the bias of "Microsoft YaHei".

	  var textVerticalAlign = token.textVerticalAlign;
	  var y = lineTop + lineHeight / 2;

	  if (textVerticalAlign === 'top') {
	    y = lineTop + token.height / 2;
	  } else if (textVerticalAlign === 'bottom') {
	    y = lineTop + lineHeight - token.height / 2;
	  }

	  !token.isLineHolder && needDrawBackground(tokenStyle) && drawBackground(hostEl, ctx, tokenStyle, textAlign === 'right' ? x - token.width : textAlign === 'center' ? x - token.width / 2 : x, y - token.height / 2, token.width, token.height);
	  var textPadding = token.textPadding;

	  if (textPadding) {
	    x = getTextXForPadding(x, textAlign, textPadding);
	    y -= token.height / 2 - textPadding[2] - token.textHeight / 2;
	  }

	  setCtx(ctx, 'shadowBlur', retrieve3(tokenStyle.textShadowBlur, style.textShadowBlur, 0));
	  setCtx(ctx, 'shadowColor', tokenStyle.textShadowColor || style.textShadowColor || 'transparent');
	  setCtx(ctx, 'shadowOffsetX', retrieve3(tokenStyle.textShadowOffsetX, style.textShadowOffsetX, 0));
	  setCtx(ctx, 'shadowOffsetY', retrieve3(tokenStyle.textShadowOffsetY, style.textShadowOffsetY, 0));
	  setCtx(ctx, 'textAlign', textAlign); // Force baseline to be "middle". Otherwise, if using "top", the
	  // text will offset downward a little bit in font "Microsoft YaHei".

	  setCtx(ctx, 'textBaseline', 'middle');
	  setCtx(ctx, 'font', token.font || textContain.DEFAULT_FONT);
	  var textStroke = getStroke(tokenStyle.textStroke || style.textStroke, textStrokeWidth);
	  var textFill = getFill(tokenStyle.textFill || style.textFill);
	  var textStrokeWidth = retrieve2(tokenStyle.textStrokeWidth, style.textStrokeWidth); // Fill after stroke so the outline will not cover the main part.

	  if (textStroke) {
	    setCtx(ctx, 'lineWidth', textStrokeWidth);
	    setCtx(ctx, 'strokeStyle', textStroke);
	    ctx.strokeText(token.text, x, y);
	  }

	  if (textFill) {
	    setCtx(ctx, 'fillStyle', textFill);
	    ctx.fillText(token.text, x, y);
	  }
	}

	function needDrawBackground(style) {
	  return style.textBackgroundColor || style.textBorderWidth && style.textBorderColor;
	} // style: {textBackgroundColor, textBorderWidth, textBorderColor, textBorderRadius}
	// shape: {x, y, width, height}


	function drawBackground(hostEl, ctx, style, x, y, width, height) {
	  var textBackgroundColor = style.textBackgroundColor;
	  var textBorderWidth = style.textBorderWidth;
	  var textBorderColor = style.textBorderColor;
	  var isPlainBg = isString(textBackgroundColor);
	  setCtx(ctx, 'shadowBlur', style.textBoxShadowBlur || 0);
	  setCtx(ctx, 'shadowColor', style.textBoxShadowColor || 'transparent');
	  setCtx(ctx, 'shadowOffsetX', style.textBoxShadowOffsetX || 0);
	  setCtx(ctx, 'shadowOffsetY', style.textBoxShadowOffsetY || 0);

	  if (isPlainBg || textBorderWidth && textBorderColor) {
	    ctx.beginPath();
	    var textBorderRadius = style.textBorderRadius;

	    if (!textBorderRadius) {
	      ctx.rect(x, y, width, height);
	    } else {
	      roundRectHelper.buildPath(ctx, {
	        x: x,
	        y: y,
	        width: width,
	        height: height,
	        r: textBorderRadius
	      });
	    }

	    ctx.closePath();
	  }

	  if (isPlainBg) {
	    setCtx(ctx, 'fillStyle', textBackgroundColor);
	    ctx.fill();
	  } else if (isObject(textBackgroundColor)) {
	    var image = textBackgroundColor.image;
	    image = imageHelper.createOrUpdateImage(image, null, hostEl, onBgImageLoaded, textBackgroundColor);

	    if (image && imageHelper.isImageReady(image)) {
	      ctx.drawImage(image, x, y, width, height);
	    }
	  }

	  if (textBorderWidth && textBorderColor) {
	    setCtx(ctx, 'lineWidth', textBorderWidth);
	    setCtx(ctx, 'strokeStyle', textBorderColor);
	    ctx.stroke();
	  }
	}

	function onBgImageLoaded(image, textBackgroundColor) {
	  // Replace image, so that `contain/text.js#parseRichText`
	  // will get correct result in next tick.
	  textBackgroundColor.image = image;
	}

	function getBoxPosition(blockHeiht, style, rect) {
	  var baseX = style.x || 0;
	  var baseY = style.y || 0;
	  var textAlign = style.textAlign;
	  var textVerticalAlign = style.textVerticalAlign; // Text position represented by coord

	  if (rect) {
	    var textPosition = style.textPosition;

	    if (textPosition instanceof Array) {
	      // Percent
	      baseX = rect.x + parsePercent(textPosition[0], rect.width);
	      baseY = rect.y + parsePercent(textPosition[1], rect.height);
	    } else {
	      var res = textContain.adjustTextPositionOnRect(textPosition, rect, style.textDistance);
	      baseX = res.x;
	      baseY = res.y; // Default align and baseline when has textPosition

	      textAlign = textAlign || res.textAlign;
	      textVerticalAlign = textVerticalAlign || res.textVerticalAlign;
	    } // textOffset is only support in RectText, otherwise
	    // we have to adjust boundingRect for textOffset.


	    var textOffset = style.textOffset;

	    if (textOffset) {
	      baseX += textOffset[0];
	      baseY += textOffset[1];
	    }
	  }

	  return {
	    baseX: baseX,
	    baseY: baseY,
	    textAlign: textAlign,
	    textVerticalAlign: textVerticalAlign
	  };
	}

	function setCtx(ctx, prop, value) {
	  // FIXME ??? performance try
	  // if (ctx.__currentValues[prop] !== value) {
	  // ctx[prop] = ctx.__currentValues[prop] = value;
	  ctx[prop] = value; // }

	  return ctx[prop];
	}
	/**
	 * @param {string} [stroke] If specified, do not check style.textStroke.
	 * @param {string} [lineWidth] If specified, do not check style.textStroke.
	 * @param {number} style
	 */


	function getStroke(stroke, lineWidth) {
	  return stroke == null || lineWidth <= 0 || stroke === 'transparent' || stroke === 'none' ? null // TODO pattern and gradient?
	  : stroke.image || stroke.colorStops ? '#000' : stroke;
	}

	function getFill(fill) {
	  return fill == null || fill === 'none' ? null // TODO pattern and gradient?
	  : fill.image || fill.colorStops ? '#000' : fill;
	}

	function parsePercent(value, maxValue) {
	  if (typeof value === 'string') {
	    if (value.lastIndexOf('%') >= 0) {
	      return parseFloat(value) / 100 * maxValue;
	    }

	    return parseFloat(value);
	  }

	  return value;
	}

	function getTextXForPadding(x, textAlign, textPadding) {
	  return textAlign === 'right' ? x - textPadding[1] : textAlign === 'center' ? x + textPadding[3] / 2 - textPadding[1] / 2 : x + textPadding[3];
	}
	/**
	 * @param {string} text
	 * @param {module:zrender/Style} style
	 * @return {boolean}
	 */


	function needDrawText(text, style) {
	  return text != null && (text || style.textBackgroundColor || style.textBorderWidth && style.textBorderColor || style.textPadding);
	}

	exports.normalizeTextStyle = normalizeTextStyle;
	exports.renderText = renderText;
	exports.getStroke = getStroke;
	exports.getFill = getFill;
	exports.needDrawText = needDrawText;

/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	var BoundingRect = __webpack_require__(184);

	var imageHelper = __webpack_require__(196);

	var _util = __webpack_require__(166);

	var getContext = _util.getContext;
	var extend = _util.extend;
	var retrieve2 = _util.retrieve2;
	var retrieve3 = _util.retrieve3;
	var textWidthCache = {};
	var textWidthCacheCounter = 0;
	var TEXT_CACHE_MAX = 5000;
	var STYLE_REG = /\{([a-zA-Z0-9_]+)\|([^}]*)\}/g;
	var DEFAULT_FONT = '12px sans-serif'; // Avoid assign to an exported variable, for transforming to cjs.

	var methods = {};

	function $override(name, fn) {
	  methods[name] = fn;
	}
	/**
	 * @public
	 * @param {string} text
	 * @param {string} font
	 * @return {number} width
	 */


	function getWidth(text, font) {
	  font = font || DEFAULT_FONT;
	  var key = text + ':' + font;

	  if (textWidthCache[key]) {
	    return textWidthCache[key];
	  }

	  var textLines = (text + '').split('\n');
	  var width = 0;

	  for (var i = 0, l = textLines.length; i < l; i++) {
	    // textContain.measureText may be overrided in SVG or VML
	    width = Math.max(measureText(textLines[i], font).width, width);
	  }

	  if (textWidthCacheCounter > TEXT_CACHE_MAX) {
	    textWidthCacheCounter = 0;
	    textWidthCache = {};
	  }

	  textWidthCacheCounter++;
	  textWidthCache[key] = width;
	  return width;
	}
	/**
	 * @public
	 * @param {string} text
	 * @param {string} font
	 * @param {string} [textAlign='left']
	 * @param {string} [textVerticalAlign='top']
	 * @param {Array.<number>} [textPadding]
	 * @param {Object} [rich]
	 * @param {Object} [truncate]
	 * @return {Object} {x, y, width, height, lineHeight}
	 */


	function getBoundingRect(text, font, textAlign, textVerticalAlign, textPadding, rich, truncate) {
	  return rich ? getRichTextRect(text, font, textAlign, textVerticalAlign, textPadding, rich, truncate) : getPlainTextRect(text, font, textAlign, textVerticalAlign, textPadding, truncate);
	}

	function getPlainTextRect(text, font, textAlign, textVerticalAlign, textPadding, truncate) {
	  var contentBlock = parsePlainText(text, font, textPadding, truncate);
	  var outerWidth = getWidth(text, font);

	  if (textPadding) {
	    outerWidth += textPadding[1] + textPadding[3];
	  }

	  var outerHeight = contentBlock.outerHeight;
	  var x = adjustTextX(0, outerWidth, textAlign);
	  var y = adjustTextY(0, outerHeight, textVerticalAlign);
	  var rect = new BoundingRect(x, y, outerWidth, outerHeight);
	  rect.lineHeight = contentBlock.lineHeight;
	  return rect;
	}

	function getRichTextRect(text, font, textAlign, textVerticalAlign, textPadding, rich, truncate) {
	  var contentBlock = parseRichText(text, {
	    rich: rich,
	    truncate: truncate,
	    font: font,
	    textAlign: textAlign,
	    textPadding: textPadding
	  });
	  var outerWidth = contentBlock.outerWidth;
	  var outerHeight = contentBlock.outerHeight;
	  var x = adjustTextX(0, outerWidth, textAlign);
	  var y = adjustTextY(0, outerHeight, textVerticalAlign);
	  return new BoundingRect(x, y, outerWidth, outerHeight);
	}
	/**
	 * @public
	 * @param {number} x
	 * @param {number} width
	 * @param {string} [textAlign='left']
	 * @return {number} Adjusted x.
	 */


	function adjustTextX(x, width, textAlign) {
	  // FIXME Right to left language
	  if (textAlign === 'right') {
	    x -= width;
	  } else if (textAlign === 'center') {
	    x -= width / 2;
	  }

	  return x;
	}
	/**
	 * @public
	 * @param {number} y
	 * @param {number} height
	 * @param {string} [textVerticalAlign='top']
	 * @return {number} Adjusted y.
	 */


	function adjustTextY(y, height, textVerticalAlign) {
	  if (textVerticalAlign === 'middle') {
	    y -= height / 2;
	  } else if (textVerticalAlign === 'bottom') {
	    y -= height;
	  }

	  return y;
	}
	/**
	 * @public
	 * @param {stirng} textPosition
	 * @param {Object} rect {x, y, width, height}
	 * @param {number} distance
	 * @return {Object} {x, y, textAlign, textVerticalAlign}
	 */


	function adjustTextPositionOnRect(textPosition, rect, distance) {
	  var x = rect.x;
	  var y = rect.y;
	  var height = rect.height;
	  var width = rect.width;
	  var halfHeight = height / 2;
	  var textAlign = 'left';
	  var textVerticalAlign = 'top';

	  switch (textPosition) {
	    case 'left':
	      x -= distance;
	      y += halfHeight;
	      textAlign = 'right';
	      textVerticalAlign = 'middle';
	      break;

	    case 'right':
	      x += distance + width;
	      y += halfHeight;
	      textVerticalAlign = 'middle';
	      break;

	    case 'top':
	      x += width / 2;
	      y -= distance;
	      textAlign = 'center';
	      textVerticalAlign = 'bottom';
	      break;

	    case 'bottom':
	      x += width / 2;
	      y += height + distance;
	      textAlign = 'center';
	      break;

	    case 'inside':
	      x += width / 2;
	      y += halfHeight;
	      textAlign = 'center';
	      textVerticalAlign = 'middle';
	      break;

	    case 'insideLeft':
	      x += distance;
	      y += halfHeight;
	      textVerticalAlign = 'middle';
	      break;

	    case 'insideRight':
	      x += width - distance;
	      y += halfHeight;
	      textAlign = 'right';
	      textVerticalAlign = 'middle';
	      break;

	    case 'insideTop':
	      x += width / 2;
	      y += distance;
	      textAlign = 'center';
	      break;

	    case 'insideBottom':
	      x += width / 2;
	      y += height - distance;
	      textAlign = 'center';
	      textVerticalAlign = 'bottom';
	      break;

	    case 'insideTopLeft':
	      x += distance;
	      y += distance;
	      break;

	    case 'insideTopRight':
	      x += width - distance;
	      y += distance;
	      textAlign = 'right';
	      break;

	    case 'insideBottomLeft':
	      x += distance;
	      y += height - distance;
	      textVerticalAlign = 'bottom';
	      break;

	    case 'insideBottomRight':
	      x += width - distance;
	      y += height - distance;
	      textAlign = 'right';
	      textVerticalAlign = 'bottom';
	      break;
	  }

	  return {
	    x: x,
	    y: y,
	    textAlign: textAlign,
	    textVerticalAlign: textVerticalAlign
	  };
	}
	/**
	 * Show ellipsis if overflow.
	 *
	 * @public
	 * @param  {string} text
	 * @param  {string} containerWidth
	 * @param  {string} font
	 * @param  {number} [ellipsis='...']
	 * @param  {Object} [options]
	 * @param  {number} [options.maxIterations=3]
	 * @param  {number} [options.minChar=0] If truncate result are less
	 *                  then minChar, ellipsis will not show, which is
	 *                  better for user hint in some cases.
	 * @param  {number} [options.placeholder=''] When all truncated, use the placeholder.
	 * @return {string}
	 */


	function truncateText(text, containerWidth, font, ellipsis, options) {
	  if (!containerWidth) {
	    return '';
	  }

	  var textLines = (text + '').split('\n');
	  options = prepareTruncateOptions(containerWidth, font, ellipsis, options); // FIXME
	  // It is not appropriate that every line has '...' when truncate multiple lines.

	  for (var i = 0, len = textLines.length; i < len; i++) {
	    textLines[i] = truncateSingleLine(textLines[i], options);
	  }

	  return textLines.join('\n');
	}

	function prepareTruncateOptions(containerWidth, font, ellipsis, options) {
	  options = extend({}, options);
	  options.font = font;
	  var ellipsis = retrieve2(ellipsis, '...');
	  options.maxIterations = retrieve2(options.maxIterations, 2);
	  var minChar = options.minChar = retrieve2(options.minChar, 0); // FIXME
	  // Other languages?

	  options.cnCharWidth = getWidth('国', font); // FIXME
	  // Consider proportional font?

	  var ascCharWidth = options.ascCharWidth = getWidth('a', font);
	  options.placeholder = retrieve2(options.placeholder, ''); // Example 1: minChar: 3, text: 'asdfzxcv', truncate result: 'asdf', but not: 'a...'.
	  // Example 2: minChar: 3, text: '维度', truncate result: '维', but not: '...'.

	  var contentWidth = containerWidth = Math.max(0, containerWidth - 1); // Reserve some gap.

	  for (var i = 0; i < minChar && contentWidth >= ascCharWidth; i++) {
	    contentWidth -= ascCharWidth;
	  }

	  var ellipsisWidth = getWidth(ellipsis);

	  if (ellipsisWidth > contentWidth) {
	    ellipsis = '';
	    ellipsisWidth = 0;
	  }

	  contentWidth = containerWidth - ellipsisWidth;
	  options.ellipsis = ellipsis;
	  options.ellipsisWidth = ellipsisWidth;
	  options.contentWidth = contentWidth;
	  options.containerWidth = containerWidth;
	  return options;
	}

	function truncateSingleLine(textLine, options) {
	  var containerWidth = options.containerWidth;
	  var font = options.font;
	  var contentWidth = options.contentWidth;

	  if (!containerWidth) {
	    return '';
	  }

	  var lineWidth = getWidth(textLine, font);

	  if (lineWidth <= containerWidth) {
	    return textLine;
	  }

	  for (var j = 0;; j++) {
	    if (lineWidth <= contentWidth || j >= options.maxIterations) {
	      textLine += options.ellipsis;
	      break;
	    }

	    var subLength = j === 0 ? estimateLength(textLine, contentWidth, options.ascCharWidth, options.cnCharWidth) : lineWidth > 0 ? Math.floor(textLine.length * contentWidth / lineWidth) : 0;
	    textLine = textLine.substr(0, subLength);
	    lineWidth = getWidth(textLine, font);
	  }

	  if (textLine === '') {
	    textLine = options.placeholder;
	  }

	  return textLine;
	}

	function estimateLength(text, contentWidth, ascCharWidth, cnCharWidth) {
	  var width = 0;
	  var i = 0;

	  for (var len = text.length; i < len && width < contentWidth; i++) {
	    var charCode = text.charCodeAt(i);
	    width += 0 <= charCode && charCode <= 127 ? ascCharWidth : cnCharWidth;
	  }

	  return i;
	}
	/**
	 * @public
	 * @param {string} font
	 * @return {number} line height
	 */


	function getLineHeight(font) {
	  // FIXME A rough approach.
	  return getWidth('国', font);
	}
	/**
	 * @public
	 * @param {string} text
	 * @param {string} font
	 * @return {Object} width
	 */


	function measureText(text, font) {
	  return methods.measureText(text, font);
	} // Avoid assign to an exported variable, for transforming to cjs.


	methods.measureText = function (text, font) {
	  var ctx = getContext();
	  ctx.font = font || DEFAULT_FONT;
	  return ctx.measureText(text);
	};
	/**
	 * @public
	 * @param {string} text
	 * @param {string} font
	 * @param {Object} [truncate]
	 * @return {Object} block: {lineHeight, lines, height, outerHeight}
	 *  Notice: for performance, do not calculate outerWidth util needed.
	 */


	function parsePlainText(text, font, padding, truncate) {
	  text != null && (text += '');
	  var lineHeight = getLineHeight(font);
	  var lines = text ? text.split('\n') : [];
	  var height = lines.length * lineHeight;
	  var outerHeight = height;

	  if (padding) {
	    outerHeight += padding[0] + padding[2];
	  }

	  if (text && truncate) {
	    var truncOuterHeight = truncate.outerHeight;
	    var truncOuterWidth = truncate.outerWidth;

	    if (truncOuterHeight != null && outerHeight > truncOuterHeight) {
	      text = '';
	      lines = [];
	    } else if (truncOuterWidth != null) {
	      var options = prepareTruncateOptions(truncOuterWidth - (padding ? padding[1] + padding[3] : 0), font, truncate.ellipsis, {
	        minChar: truncate.minChar,
	        placeholder: truncate.placeholder
	      }); // FIXME
	      // It is not appropriate that every line has '...' when truncate multiple lines.

	      for (var i = 0, len = lines.length; i < len; i++) {
	        lines[i] = truncateSingleLine(lines[i], options);
	      }
	    }
	  }

	  return {
	    lines: lines,
	    height: height,
	    outerHeight: outerHeight,
	    lineHeight: lineHeight
	  };
	}
	/**
	 * For example: 'some text {a|some text}other text{b|some text}xxx{c|}xxx'
	 * Also consider 'bbbb{a|xxx\nzzz}xxxx\naaaa'.
	 *
	 * @public
	 * @param {string} text
	 * @param {Object} style
	 * @return {Object} block
	 * {
	 *      width,
	 *      height,
	 *      lines: [{
	 *          lineHeight,
	 *          width,
	 *          tokens: [[{
	 *              styleName,
	 *              text,
	 *              width,      // include textPadding
	 *              height,     // include textPadding
	 *              textWidth, // pure text width
	 *              textHeight, // pure text height
	 *              lineHeihgt,
	 *              font,
	 *              textAlign,
	 *              textVerticalAlign
	 *          }], [...], ...]
	 *      }, ...]
	 * }
	 * If styleName is undefined, it is plain text.
	 */


	function parseRichText(text, style) {
	  var contentBlock = {
	    lines: [],
	    width: 0,
	    height: 0
	  };
	  text != null && (text += '');

	  if (!text) {
	    return contentBlock;
	  }

	  var lastIndex = STYLE_REG.lastIndex = 0;
	  var result;

	  while ((result = STYLE_REG.exec(text)) != null) {
	    var matchedIndex = result.index;

	    if (matchedIndex > lastIndex) {
	      pushTokens(contentBlock, text.substring(lastIndex, matchedIndex));
	    }

	    pushTokens(contentBlock, result[2], result[1]);
	    lastIndex = STYLE_REG.lastIndex;
	  }

	  if (lastIndex < text.length) {
	    pushTokens(contentBlock, text.substring(lastIndex, text.length));
	  }

	  var lines = contentBlock.lines;
	  var contentHeight = 0;
	  var contentWidth = 0; // For `textWidth: 100%`

	  var pendingList = [];
	  var stlPadding = style.textPadding;
	  var truncate = style.truncate;
	  var truncateWidth = truncate && truncate.outerWidth;
	  var truncateHeight = truncate && truncate.outerHeight;

	  if (stlPadding) {
	    truncateWidth != null && (truncateWidth -= stlPadding[1] + stlPadding[3]);
	    truncateHeight != null && (truncateHeight -= stlPadding[0] + stlPadding[2]);
	  } // Calculate layout info of tokens.


	  for (var i = 0; i < lines.length; i++) {
	    var line = lines[i];
	    var lineHeight = 0;
	    var lineWidth = 0;

	    for (var j = 0; j < line.tokens.length; j++) {
	      var token = line.tokens[j];
	      var tokenStyle = token.styleName && style.rich[token.styleName] || {}; // textPadding should not inherit from style.

	      var textPadding = token.textPadding = tokenStyle.textPadding; // textFont has been asigned to font by `normalizeStyle`.

	      var font = token.font = tokenStyle.font || style.font; // textHeight can be used when textVerticalAlign is specified in token.

	      var tokenHeight = token.textHeight = retrieve2( // textHeight should not be inherited, consider it can be specified
	      // as box height of the block.
	      tokenStyle.textHeight, getLineHeight(font));
	      textPadding && (tokenHeight += textPadding[0] + textPadding[2]);
	      token.height = tokenHeight;
	      token.lineHeight = retrieve3(tokenStyle.textLineHeight, style.textLineHeight, tokenHeight);
	      token.textAlign = tokenStyle && tokenStyle.textAlign || style.textAlign;
	      token.textVerticalAlign = tokenStyle && tokenStyle.textVerticalAlign || 'middle';

	      if (truncateHeight != null && contentHeight + token.lineHeight > truncateHeight) {
	        return {
	          lines: [],
	          width: 0,
	          height: 0
	        };
	      }

	      token.textWidth = getWidth(token.text, font);
	      var tokenWidth = tokenStyle.textWidth;
	      var tokenWidthNotSpecified = tokenWidth == null || tokenWidth === 'auto'; // Percent width, can be `100%`, can be used in drawing separate
	      // line when box width is needed to be auto.

	      if (typeof tokenWidth === 'string' && tokenWidth.charAt(tokenWidth.length - 1) === '%') {
	        token.percentWidth = tokenWidth;
	        pendingList.push(token);
	        tokenWidth = 0; // Do not truncate in this case, because there is no user case
	        // and it is too complicated.
	      } else {
	        if (tokenWidthNotSpecified) {
	          tokenWidth = token.textWidth; // FIXME: If image is not loaded and textWidth is not specified, calling
	          // `getBoundingRect()` will not get correct result.

	          var textBackgroundColor = tokenStyle.textBackgroundColor;
	          var bgImg = textBackgroundColor && textBackgroundColor.image; // Use cases:
	          // (1) If image is not loaded, it will be loaded at render phase and call
	          // `dirty()` and `textBackgroundColor.image` will be replaced with the loaded
	          // image, and then the right size will be calculated here at the next tick.
	          // See `graphic/helper/text.js`.
	          // (2) If image loaded, and `textBackgroundColor.image` is image src string,
	          // use `imageHelper.findExistImage` to find cached image.
	          // `imageHelper.findExistImage` will always be called here before
	          // `imageHelper.createOrUpdateImage` in `graphic/helper/text.js#renderRichText`
	          // which ensures that image will not be rendered before correct size calcualted.

	          if (bgImg) {
	            bgImg = imageHelper.findExistImage(bgImg);

	            if (imageHelper.isImageReady(bgImg)) {
	              tokenWidth = Math.max(tokenWidth, bgImg.width * tokenHeight / bgImg.height);
	            }
	          }
	        }

	        var paddingW = textPadding ? textPadding[1] + textPadding[3] : 0;
	        tokenWidth += paddingW;
	        var remianTruncWidth = truncateWidth != null ? truncateWidth - lineWidth : null;

	        if (remianTruncWidth != null && remianTruncWidth < tokenWidth) {
	          if (!tokenWidthNotSpecified || remianTruncWidth < paddingW) {
	            token.text = '';
	            token.textWidth = tokenWidth = 0;
	          } else {
	            token.text = truncateText(token.text, remianTruncWidth - paddingW, font, truncate.ellipsis, {
	              minChar: truncate.minChar
	            });
	            token.textWidth = getWidth(token.text, font);
	            tokenWidth = token.textWidth + paddingW;
	          }
	        }
	      }

	      lineWidth += token.width = tokenWidth;
	      tokenStyle && (lineHeight = Math.max(lineHeight, token.lineHeight));
	    }

	    line.width = lineWidth;
	    line.lineHeight = lineHeight;
	    contentHeight += lineHeight;
	    contentWidth = Math.max(contentWidth, lineWidth);
	  }

	  contentBlock.outerWidth = contentBlock.width = retrieve2(style.textWidth, contentWidth);
	  contentBlock.outerHeight = contentBlock.height = retrieve2(style.textHeight, contentHeight);

	  if (stlPadding) {
	    contentBlock.outerWidth += stlPadding[1] + stlPadding[3];
	    contentBlock.outerHeight += stlPadding[0] + stlPadding[2];
	  }

	  for (var i = 0; i < pendingList.length; i++) {
	    var token = pendingList[i];
	    var percentWidth = token.percentWidth; // Should not base on outerWidth, because token can not be placed out of padding.

	    token.width = parseInt(percentWidth, 10) / 100 * contentWidth;
	  }

	  return contentBlock;
	}

	function pushTokens(block, str, styleName) {
	  var isEmptyStr = str === '';
	  var strs = str.split('\n');
	  var lines = block.lines;

	  for (var i = 0; i < strs.length; i++) {
	    var text = strs[i];
	    var token = {
	      styleName: styleName,
	      text: text,
	      isLineHolder: !text && !isEmptyStr
	    }; // The first token should be appended to the last line.

	    if (!i) {
	      var tokens = (lines[lines.length - 1] || (lines[0] = {
	        tokens: []
	      })).tokens; // Consider cases:
	      // (1) ''.split('\n') => ['', '\n', ''], the '' at the first item
	      // (which is a placeholder) should be replaced by new token.
	      // (2) A image backage, where token likes {a|}.
	      // (3) A redundant '' will affect textAlign in line.
	      // (4) tokens with the same tplName should not be merged, because
	      // they should be displayed in different box (with border and padding).

	      var tokensLen = tokens.length;
	      tokensLen === 1 && tokens[0].isLineHolder ? tokens[0] = token : // Consider text is '', only insert when it is the "lineHolder" or
	      // "emptyStr". Otherwise a redundant '' will affect textAlign in line.
	      (text || !tokensLen || isEmptyStr) && tokens.push(token);
	    } // Other tokens always start a new line.
	    else {
	        // If there is '', insert it as a placeholder.
	        lines.push({
	          tokens: [token]
	        });
	      }
	  }
	}

	function makeFont(style) {
	  // FIXME in node-canvas fontWeight is before fontStyle
	  // Use `fontSize` `fontFamily` to check whether font properties are defined.
	  return (style.fontSize || style.fontFamily) && [style.fontStyle, style.fontWeight, (style.fontSize || 12) + 'px', // If font properties are defined, `fontFamily` should not be ignored.
	  style.fontFamily || 'sans-serif'].join(' ') || style.textFont || style.font;
	}

	exports.DEFAULT_FONT = DEFAULT_FONT;
	exports.$override = $override;
	exports.getWidth = getWidth;
	exports.getBoundingRect = getBoundingRect;
	exports.adjustTextX = adjustTextX;
	exports.adjustTextY = adjustTextY;
	exports.adjustTextPositionOnRect = adjustTextPositionOnRect;
	exports.truncateText = truncateText;
	exports.getLineHeight = getLineHeight;
	exports.measureText = measureText;
	exports.parsePlainText = parsePlainText;
	exports.parseRichText = parseRichText;
	exports.makeFont = makeFont;

/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	var LRU = __webpack_require__(181);

	var globalImageCache = new LRU(50);
	/**
	 * @param {string|HTMLImageElement|HTMLCanvasElement|Canvas} newImageOrSrc
	 * @return {HTMLImageElement|HTMLCanvasElement|Canvas} image
	 */

	function findExistImage(newImageOrSrc) {
	  if (typeof newImageOrSrc === 'string') {
	    var cachedImgObj = globalImageCache.get(newImageOrSrc);
	    return cachedImgObj && cachedImgObj.image;
	  } else {
	    return newImageOrSrc;
	  }
	}
	/**
	 * Caution: User should cache loaded images, but not just count on LRU.
	 * Consider if required images more than LRU size, will dead loop occur?
	 *
	 * @param {string|HTMLImageElement|HTMLCanvasElement|Canvas} newImageOrSrc
	 * @param {HTMLImageElement|HTMLCanvasElement|Canvas} image Existent image.
	 * @param {module:zrender/Element} [hostEl] For calling `dirty`.
	 * @param {Function} [cb] params: (image, cbPayload)
	 * @param {Object} [cbPayload] Payload on cb calling.
	 * @return {HTMLImageElement|HTMLCanvasElement|Canvas} image
	 */


	function createOrUpdateImage(newImageOrSrc, image, hostEl, cb, cbPayload) {
	  if (!newImageOrSrc) {
	    return image;
	  } else if (typeof newImageOrSrc === 'string') {
	    // Image should not be loaded repeatly.
	    if (image && image.__zrImageSrc === newImageOrSrc || !hostEl) {
	      return image;
	    } // Only when there is no existent image or existent image src
	    // is different, this method is responsible for load.


	    var cachedImgObj = globalImageCache.get(newImageOrSrc);
	    var pendingWrap = {
	      hostEl: hostEl,
	      cb: cb,
	      cbPayload: cbPayload
	    };

	    if (cachedImgObj) {
	      image = cachedImgObj.image;
	      !isImageReady(image) && cachedImgObj.pending.push(pendingWrap);
	    } else {
	      !image && (image = new Image());
	      image.onload = imageOnLoad;
	      globalImageCache.put(newImageOrSrc, image.__cachedImgObj = {
	        image: image,
	        pending: [pendingWrap]
	      });
	      image.src = image.__zrImageSrc = newImageOrSrc;
	    }

	    return image;
	  } // newImageOrSrc is an HTMLImageElement or HTMLCanvasElement or Canvas
	  else {
	      return newImageOrSrc;
	    }
	}

	function imageOnLoad() {
	  var cachedImgObj = this.__cachedImgObj;
	  this.onload = this.__cachedImgObj = null;

	  for (var i = 0; i < cachedImgObj.pending.length; i++) {
	    var pendingWrap = cachedImgObj.pending[i];
	    var cb = pendingWrap.cb;
	    cb && cb(this, pendingWrap.cbPayload);
	    pendingWrap.hostEl.dirty();
	  }

	  cachedImgObj.pending.length = 0;
	}

	function isImageReady(image) {
	  return image && image.width && image.height;
	}

	exports.findExistImage = findExistImage;
	exports.createOrUpdateImage = createOrUpdateImage;
	exports.isImageReady = isImageReady;

/***/ },
/* 197 */
/***/ function(module, exports) {

	function buildPath(ctx, shape) {
	  var x = shape.x;
	  var y = shape.y;
	  var width = shape.width;
	  var height = shape.height;
	  var r = shape.r;
	  var r1;
	  var r2;
	  var r3;
	  var r4; // Convert width and height to positive for better borderRadius

	  if (width < 0) {
	    x = x + width;
	    width = -width;
	  }

	  if (height < 0) {
	    y = y + height;
	    height = -height;
	  }

	  if (typeof r === 'number') {
	    r1 = r2 = r3 = r4 = r;
	  } else if (r instanceof Array) {
	    if (r.length === 1) {
	      r1 = r2 = r3 = r4 = r[0];
	    } else if (r.length === 2) {
	      r1 = r3 = r[0];
	      r2 = r4 = r[1];
	    } else if (r.length === 3) {
	      r1 = r[0];
	      r2 = r4 = r[1];
	      r3 = r[2];
	    } else {
	      r1 = r[0];
	      r2 = r[1];
	      r3 = r[2];
	      r4 = r[3];
	    }
	  } else {
	    r1 = r2 = r3 = r4 = 0;
	  }

	  var total;

	  if (r1 + r2 > width) {
	    total = r1 + r2;
	    r1 *= width / total;
	    r2 *= width / total;
	  }

	  if (r3 + r4 > width) {
	    total = r3 + r4;
	    r3 *= width / total;
	    r4 *= width / total;
	  }

	  if (r2 + r3 > height) {
	    total = r2 + r3;
	    r2 *= height / total;
	    r3 *= height / total;
	  }

	  if (r1 + r4 > height) {
	    total = r1 + r4;
	    r1 *= height / total;
	    r4 *= height / total;
	  }

	  ctx.moveTo(x + r1, y);
	  ctx.lineTo(x + width - r2, y);
	  r2 !== 0 && ctx.quadraticCurveTo(x + width, y, x + width, y + r2);
	  ctx.lineTo(x + width, y + height - r3);
	  r3 !== 0 && ctx.quadraticCurveTo(x + width, y + height, x + width - r3, y + height);
	  ctx.lineTo(x + r4, y + height);
	  r4 !== 0 && ctx.quadraticCurveTo(x, y + height, x, y + height - r4);
	  ctx.lineTo(x, y + r1);
	  r1 !== 0 && ctx.quadraticCurveTo(x, y, x + r1, y);
	}

	exports.buildPath = buildPath;

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	var util = __webpack_require__(166);

	var _event = __webpack_require__(199);

	var Dispatcher = _event.Dispatcher;

	var requestAnimationFrame = __webpack_require__(190);

	var Animator = __webpack_require__(177);

	/**
	 * 动画主类, 调度和管理所有动画控制器
	 *
	 * @module zrender/animation/Animation
	 * @author pissang(https://github.com/pissang)
	 */
	// TODO Additive animation
	// http://iosoteric.com/additive-animations-animatewithduration-in-ios-8/
	// https://developer.apple.com/videos/wwdc2014/#236

	/**
	 * @typedef {Object} IZRenderStage
	 * @property {Function} update
	 */

	/**
	 * @alias module:zrender/animation/Animation
	 * @constructor
	 * @param {Object} [options]
	 * @param {Function} [options.onframe]
	 * @param {IZRenderStage} [options.stage]
	 * @example
	 *     var animation = new Animation();
	 *     var obj = {
	 *         x: 100,
	 *         y: 100
	 *     };
	 *     animation.animate(node.position)
	 *         .when(1000, {
	 *             x: 500,
	 *             y: 500
	 *         })
	 *         .when(2000, {
	 *             x: 100,
	 *             y: 100
	 *         })
	 *         .start('spline');
	 */
	var Animation = function (options) {
	  options = options || {};
	  this.stage = options.stage || {};

	  this.onframe = options.onframe || function () {}; // private properties


	  this._clips = [];
	  this._running = false;
	  this._time;
	  this._pausedTime;
	  this._pauseStart;
	  this._paused = false;
	  Dispatcher.call(this);
	};

	Animation.prototype = {
	  constructor: Animation,

	  /**
	   * 添加 clip
	   * @param {module:zrender/animation/Clip} clip
	   */
	  addClip: function (clip) {
	    this._clips.push(clip);
	  },

	  /**
	   * 添加 animator
	   * @param {module:zrender/animation/Animator} animator
	   */
	  addAnimator: function (animator) {
	    animator.animation = this;
	    var clips = animator.getClips();

	    for (var i = 0; i < clips.length; i++) {
	      this.addClip(clips[i]);
	    }
	  },

	  /**
	   * 删除动画片段
	   * @param {module:zrender/animation/Clip} clip
	   */
	  removeClip: function (clip) {
	    var idx = util.indexOf(this._clips, clip);

	    if (idx >= 0) {
	      this._clips.splice(idx, 1);
	    }
	  },

	  /**
	   * 删除动画片段
	   * @param {module:zrender/animation/Animator} animator
	   */
	  removeAnimator: function (animator) {
	    var clips = animator.getClips();

	    for (var i = 0; i < clips.length; i++) {
	      this.removeClip(clips[i]);
	    }

	    animator.animation = null;
	  },
	  _update: function () {
	    var time = new Date().getTime() - this._pausedTime;

	    var delta = time - this._time;
	    var clips = this._clips;
	    var len = clips.length;
	    var deferredEvents = [];
	    var deferredClips = [];

	    for (var i = 0; i < len; i++) {
	      var clip = clips[i];
	      var e = clip.step(time, delta); // Throw out the events need to be called after
	      // stage.update, like destroy

	      if (e) {
	        deferredEvents.push(e);
	        deferredClips.push(clip);
	      }
	    } // Remove the finished clip


	    for (var i = 0; i < len;) {
	      if (clips[i]._needsRemove) {
	        clips[i] = clips[len - 1];
	        clips.pop();
	        len--;
	      } else {
	        i++;
	      }
	    }

	    len = deferredEvents.length;

	    for (var i = 0; i < len; i++) {
	      deferredClips[i].fire(deferredEvents[i]);
	    }

	    this._time = time;
	    this.onframe(delta);
	    this.trigger('frame', delta);

	    if (this.stage.update) {
	      this.stage.update();
	    }
	  },
	  _startLoop: function () {
	    var self = this;
	    this._running = true;

	    function step() {
	      if (self._running) {
	        requestAnimationFrame(step);
	        !self._paused && self._update();
	      }
	    }

	    requestAnimationFrame(step);
	  },

	  /**
	   * 开始运行动画
	   */
	  start: function () {
	    this._time = new Date().getTime();
	    this._pausedTime = 0;

	    this._startLoop();
	  },

	  /**
	   * 停止运行动画
	   */
	  stop: function () {
	    this._running = false;
	  },

	  /**
	   * Pause
	   */
	  pause: function () {
	    if (!this._paused) {
	      this._pauseStart = new Date().getTime();
	      this._paused = true;
	    }
	  },

	  /**
	   * Resume
	   */
	  resume: function () {
	    if (this._paused) {
	      this._pausedTime += new Date().getTime() - this._pauseStart;
	      this._paused = false;
	    }
	  },

	  /**
	   * 清除所有动画片段
	   */
	  clear: function () {
	    this._clips = [];
	  },

	  /**
	   * 对一个目标创建一个animator对象，可以指定目标中的属性使用动画
	   * @param  {Object} target
	   * @param  {Object} options
	   * @param  {boolean} [options.loop=false] 是否循环播放动画
	   * @param  {Function} [options.getter=null]
	   *         如果指定getter函数，会通过getter函数取属性值
	   * @param  {Function} [options.setter=null]
	   *         如果指定setter函数，会通过setter函数设置属性值
	   * @return {module:zrender/animation/Animation~Animator}
	   */
	  // TODO Gap
	  animate: function (target, options) {
	    options = options || {};
	    var animator = new Animator(target, options.loop, options.getter, options.setter);
	    this.addAnimator(animator);
	    return animator;
	  }
	};
	util.mixin(Animation, Dispatcher);
	var _default = Animation;
	module.exports = _default;

/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	var Eventful = __webpack_require__(170);

	exports.Dispatcher = Eventful;

	var env = __webpack_require__(165);

	/**
	 * 事件辅助类
	 * @module zrender/core/event
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 */
	var isDomLevel2 = typeof window !== 'undefined' && !!window.addEventListener;
	var MOUSE_EVENT_REG = /^(?:mouse|pointer|contextmenu|drag|drop)|click/;

	function getBoundingClientRect(el) {
	  // BlackBerry 5, iOS 3 (original iPhone) don't have getBoundingRect
	  return el.getBoundingClientRect ? el.getBoundingClientRect() : {
	    left: 0,
	    top: 0
	  };
	} // `calculate` is optional, default false


	function clientToLocal(el, e, out, calculate) {
	  out = out || {}; // According to the W3C Working Draft, offsetX and offsetY should be relative
	  // to the padding edge of the target element. The only browser using this convention
	  // is IE. Webkit uses the border edge, Opera uses the content edge, and FireFox does
	  // not support the properties.
	  // (see http://www.jacklmoore.com/notes/mouse-position/)
	  // In zr painter.dom, padding edge equals to border edge.
	  // FIXME
	  // When mousemove event triggered on ec tooltip, target is not zr painter.dom, and
	  // offsetX/Y is relative to e.target, where the calculation of zrX/Y via offsetX/Y
	  // is too complex. So css-transfrom dont support in this case temporarily.

	  if (calculate || !env.canvasSupported) {
	    defaultGetZrXY(el, e, out);
	  } // Caution: In FireFox, layerX/layerY Mouse position relative to the closest positioned
	  // ancestor element, so we should make sure el is positioned (e.g., not position:static).
	  // BTW1, Webkit don't return the same results as FF in non-simple cases (like add
	  // zoom-factor, overflow / opacity layers, transforms ...)
	  // BTW2, (ev.offsetY || ev.pageY - $(ev.target).offset().top) is not correct in preserve-3d.
	  // <https://bugs.jquery.com/ticket/8523#comment:14>
	  // BTW3, In ff, offsetX/offsetY is always 0.
	  else if (env.browser.firefox && e.layerX != null && e.layerX !== e.offsetX) {
	      out.zrX = e.layerX;
	      out.zrY = e.layerY;
	    } // For IE6+, chrome, safari, opera. (When will ff support offsetX?)
	    else if (e.offsetX != null) {
	        out.zrX = e.offsetX;
	        out.zrY = e.offsetY;
	      } // For some other device, e.g., IOS safari.
	      else {
	          defaultGetZrXY(el, e, out);
	        }

	  return out;
	}

	function defaultGetZrXY(el, e, out) {
	  // This well-known method below does not support css transform.
	  var box = getBoundingClientRect(el);
	  out.zrX = e.clientX - box.left;
	  out.zrY = e.clientY - box.top;
	}
	/**
	 * 如果存在第三方嵌入的一些dom触发的事件，或touch事件，需要转换一下事件坐标.
	 * `calculate` is optional, default false.
	 */


	function normalizeEvent(el, e, calculate) {
	  e = e || window.event;

	  if (e.zrX != null) {
	    return e;
	  }

	  var eventType = e.type;
	  var isTouch = eventType && eventType.indexOf('touch') >= 0;

	  if (!isTouch) {
	    clientToLocal(el, e, e, calculate);
	    e.zrDelta = e.wheelDelta ? e.wheelDelta / 120 : -(e.detail || 0) / 3;
	  } else {
	    var touch = eventType != 'touchend' ? e.targetTouches[0] : e.changedTouches[0];
	    touch && clientToLocal(el, touch, e, calculate);
	  } // Add which for click: 1 === left; 2 === middle; 3 === right; otherwise: 0;
	  // See jQuery: https://github.com/jquery/jquery/blob/master/src/event.js
	  // If e.which has been defined, if may be readonly,
	  // see: https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/which


	  var button = e.button;

	  if (e.which == null && button !== undefined && MOUSE_EVENT_REG.test(e.type)) {
	    e.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;
	  }

	  return e;
	}

	function addEventListener(el, name, handler) {
	  if (isDomLevel2) {
	    el.addEventListener(name, handler);
	  } else {
	    el.attachEvent('on' + name, handler);
	  }
	}

	function removeEventListener(el, name, handler) {
	  if (isDomLevel2) {
	    el.removeEventListener(name, handler);
	  } else {
	    el.detachEvent('on' + name, handler);
	  }
	}
	/**
	 * preventDefault and stopPropagation.
	 * Notice: do not do that in zrender. Upper application
	 * do that if necessary.
	 *
	 * @memberOf module:zrender/core/event
	 * @method
	 * @param {Event} e : event对象
	 */


	var stop = isDomLevel2 ? function (e) {
	  e.preventDefault();
	  e.stopPropagation();
	  e.cancelBubble = true;
	} : function (e) {
	  e.returnValue = false;
	  e.cancelBubble = true;
	};

	function notLeftMouse(e) {
	  // If e.which is undefined, considered as left mouse event.
	  return e.which > 1;
	} // 做向上兼容


	exports.clientToLocal = clientToLocal;
	exports.normalizeEvent = normalizeEvent;
	exports.addEventListener = addEventListener;
	exports.removeEventListener = removeEventListener;
	exports.stop = stop;
	exports.notLeftMouse = notLeftMouse;

/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	var _event = __webpack_require__(199);

	var addEventListener = _event.addEventListener;
	var removeEventListener = _event.removeEventListener;
	var normalizeEvent = _event.normalizeEvent;

	var zrUtil = __webpack_require__(166);

	var Eventful = __webpack_require__(170);

	var env = __webpack_require__(165);

	var GestureMgr = __webpack_require__(201);

	var TOUCH_CLICK_DELAY = 300;
	var mouseHandlerNames = ['click', 'dblclick', 'mousewheel', 'mouseout', 'mouseup', 'mousedown', 'mousemove', 'contextmenu'];
	var touchHandlerNames = ['touchstart', 'touchend', 'touchmove'];
	var pointerEventNames = {
	  pointerdown: 1,
	  pointerup: 1,
	  pointermove: 1,
	  pointerout: 1
	};
	var pointerHandlerNames = zrUtil.map(mouseHandlerNames, function (name) {
	  var nm = name.replace('mouse', 'pointer');
	  return pointerEventNames[nm] ? nm : name;
	});

	function eventNameFix(name) {
	  return name === 'mousewheel' && env.browser.firefox ? 'DOMMouseScroll' : name;
	}

	function processGesture(proxy, event, stage) {
	  var gestureMgr = proxy._gestureMgr;
	  stage === 'start' && gestureMgr.clear();
	  var gestureInfo = gestureMgr.recognize(event, proxy.handler.findHover(event.zrX, event.zrY, null).target, proxy.dom);
	  stage === 'end' && gestureMgr.clear(); // Do not do any preventDefault here. Upper application do that if necessary.

	  if (gestureInfo) {
	    var type = gestureInfo.type;
	    event.gestureEvent = type;
	    proxy.handler.dispatchToElement({
	      target: gestureInfo.target
	    }, type, gestureInfo.event);
	  }
	} // function onMSGestureChange(proxy, event) {
	//     if (event.translationX || event.translationY) {
	//         // mousemove is carried by MSGesture to reduce the sensitivity.
	//         proxy.handler.dispatchToElement(event.target, 'mousemove', event);
	//     }
	//     if (event.scale !== 1) {
	//         event.pinchX = event.offsetX;
	//         event.pinchY = event.offsetY;
	//         event.pinchScale = event.scale;
	//         proxy.handler.dispatchToElement(event.target, 'pinch', event);
	//     }
	// }

	/**
	 * Prevent mouse event from being dispatched after Touch Events action
	 * @see <https://github.com/deltakosh/handjs/blob/master/src/hand.base.js>
	 * 1. Mobile browsers dispatch mouse events 300ms after touchend.
	 * 2. Chrome for Android dispatch mousedown for long-touch about 650ms
	 * Result: Blocking Mouse Events for 700ms.
	 */


	function setTouchTimer(instance) {
	  instance._touching = true;
	  clearTimeout(instance._touchTimer);
	  instance._touchTimer = setTimeout(function () {
	    instance._touching = false;
	  }, 700);
	}

	var domHandlers = {
	  /**
	   * Mouse move handler
	   * @inner
	   * @param {Event} event
	   */
	  mousemove: function (event) {
	    event = normalizeEvent(this.dom, event);
	    this.trigger('mousemove', event);
	  },

	  /**
	   * Mouse out handler
	   * @inner
	   * @param {Event} event
	   */
	  mouseout: function (event) {
	    event = normalizeEvent(this.dom, event);
	    var element = event.toElement || event.relatedTarget;

	    if (element != this.dom) {
	      while (element && element.nodeType != 9) {
	        // 忽略包含在root中的dom引起的mouseOut
	        if (element === this.dom) {
	          return;
	        }

	        element = element.parentNode;
	      }
	    }

	    this.trigger('mouseout', event);
	  },

	  /**
	   * Touch开始响应函数
	   * @inner
	   * @param {Event} event
	   */
	  touchstart: function (event) {
	    // Default mouse behaviour should not be disabled here.
	    // For example, page may needs to be slided.
	    event = normalizeEvent(this.dom, event); // Mark touch, which is useful in distinguish touch and
	    // mouse event in upper applicatoin.

	    event.zrByTouch = true;
	    this._lastTouchMoment = new Date();
	    processGesture(this, event, 'start'); // In touch device, trigger `mousemove`(`mouseover`) should
	    // be triggered, and must before `mousedown` triggered.

	    domHandlers.mousemove.call(this, event);
	    domHandlers.mousedown.call(this, event);
	    setTouchTimer(this);
	  },

	  /**
	   * Touch移动响应函数
	   * @inner
	   * @param {Event} event
	   */
	  touchmove: function (event) {
	    event = normalizeEvent(this.dom, event); // Mark touch, which is useful in distinguish touch and
	    // mouse event in upper applicatoin.

	    event.zrByTouch = true;
	    processGesture(this, event, 'change'); // Mouse move should always be triggered no matter whether
	    // there is gestrue event, because mouse move and pinch may
	    // be used at the same time.

	    domHandlers.mousemove.call(this, event);
	    setTouchTimer(this);
	  },

	  /**
	   * Touch结束响应函数
	   * @inner
	   * @param {Event} event
	   */
	  touchend: function (event) {
	    event = normalizeEvent(this.dom, event); // Mark touch, which is useful in distinguish touch and
	    // mouse event in upper applicatoin.

	    event.zrByTouch = true;
	    processGesture(this, event, 'end');
	    domHandlers.mouseup.call(this, event); // Do not trigger `mouseout` here, in spite of `mousemove`(`mouseover`) is
	    // triggered in `touchstart`. This seems to be illogical, but by this mechanism,
	    // we can conveniently implement "hover style" in both PC and touch device just
	    // by listening to `mouseover` to add "hover style" and listening to `mouseout`
	    // to remove "hover style" on an element, without any additional code for
	    // compatibility. (`mouseout` will not be triggered in `touchend`, so "hover
	    // style" will remain for user view)
	    // click event should always be triggered no matter whether
	    // there is gestrue event. System click can not be prevented.

	    if (+new Date() - this._lastTouchMoment < TOUCH_CLICK_DELAY) {
	      domHandlers.click.call(this, event);
	    }

	    setTouchTimer(this);
	  },
	  pointerdown: function (event) {
	    domHandlers.mousedown.call(this, event); // if (useMSGuesture(this, event)) {
	    //     this._msGesture.addPointer(event.pointerId);
	    // }
	  },
	  pointermove: function (event) {
	    // FIXME
	    // pointermove is so sensitive that it always triggered when
	    // tap(click) on touch screen, which affect some judgement in
	    // upper application. So, we dont support mousemove on MS touch
	    // device yet.
	    if (!isPointerFromTouch(event)) {
	      domHandlers.mousemove.call(this, event);
	    }
	  },
	  pointerup: function (event) {
	    domHandlers.mouseup.call(this, event);
	  },
	  pointerout: function (event) {
	    // pointerout will be triggered when tap on touch screen
	    // (IE11+/Edge on MS Surface) after click event triggered,
	    // which is inconsistent with the mousout behavior we defined
	    // in touchend. So we unify them.
	    // (check domHandlers.touchend for detailed explanation)
	    if (!isPointerFromTouch(event)) {
	      domHandlers.mouseout.call(this, event);
	    }
	  }
	};

	function isPointerFromTouch(event) {
	  var pointerType = event.pointerType;
	  return pointerType === 'pen' || pointerType === 'touch';
	} // function useMSGuesture(handlerProxy, event) {
	//     return isPointerFromTouch(event) && !!handlerProxy._msGesture;
	// }
	// Common handlers


	zrUtil.each(['click', 'mousedown', 'mouseup', 'mousewheel', 'dblclick', 'contextmenu'], function (name) {
	  domHandlers[name] = function (event) {
	    event = normalizeEvent(this.dom, event);
	    this.trigger(name, event);
	  };
	});
	/**
	 * 为控制类实例初始化dom 事件处理函数
	 *
	 * @inner
	 * @param {module:zrender/Handler} instance 控制类实例
	 */

	function initDomHandler(instance) {
	  zrUtil.each(touchHandlerNames, function (name) {
	    instance._handlers[name] = zrUtil.bind(domHandlers[name], instance);
	  });
	  zrUtil.each(pointerHandlerNames, function (name) {
	    instance._handlers[name] = zrUtil.bind(domHandlers[name], instance);
	  });
	  zrUtil.each(mouseHandlerNames, function (name) {
	    instance._handlers[name] = makeMouseHandler(domHandlers[name], instance);
	  });

	  function makeMouseHandler(fn, instance) {
	    return function () {
	      if (instance._touching) {
	        return;
	      }

	      return fn.apply(instance, arguments);
	    };
	  }
	}

	function HandlerDomProxy(dom) {
	  Eventful.call(this);
	  this.dom = dom;
	  /**
	   * @private
	   * @type {boolean}
	   */

	  this._touching = false;
	  /**
	   * @private
	   * @type {number}
	   */

	  this._touchTimer;
	  /**
	   * @private
	   * @type {module:zrender/core/GestureMgr}
	   */

	  this._gestureMgr = new GestureMgr();
	  this._handlers = {};
	  initDomHandler(this);

	  if (env.pointerEventsSupported) {
	    // Only IE11+/Edge
	    // 1. On devices that both enable touch and mouse (e.g., MS Surface and lenovo X240),
	    // IE11+/Edge do not trigger touch event, but trigger pointer event and mouse event
	    // at the same time.
	    // 2. On MS Surface, it probablely only trigger mousedown but no mouseup when tap on
	    // screen, which do not occurs in pointer event.
	    // So we use pointer event to both detect touch gesture and mouse behavior.
	    mountHandlers(pointerHandlerNames, this); // FIXME
	    // Note: MS Gesture require CSS touch-action set. But touch-action is not reliable,
	    // which does not prevent defuault behavior occasionally (which may cause view port
	    // zoomed in but use can not zoom it back). And event.preventDefault() does not work.
	    // So we have to not to use MSGesture and not to support touchmove and pinch on MS
	    // touch screen. And we only support click behavior on MS touch screen now.
	    // MS Gesture Event is only supported on IE11+/Edge and on Windows 8+.
	    // We dont support touch on IE on win7.
	    // See <https://msdn.microsoft.com/en-us/library/dn433243(v=vs.85).aspx>
	    // if (typeof MSGesture === 'function') {
	    //     (this._msGesture = new MSGesture()).target = dom; // jshint ignore:line
	    //     dom.addEventListener('MSGestureChange', onMSGestureChange);
	    // }
	  } else {
	    if (env.touchEventsSupported) {
	      mountHandlers(touchHandlerNames, this); // Handler of 'mouseout' event is needed in touch mode, which will be mounted below.
	      // addEventListener(root, 'mouseout', this._mouseoutHandler);
	    } // 1. Considering some devices that both enable touch and mouse event (like on MS Surface
	    // and lenovo X240, @see #2350), we make mouse event be always listened, otherwise
	    // mouse event can not be handle in those devices.
	    // 2. On MS Surface, Chrome will trigger both touch event and mouse event. How to prevent
	    // mouseevent after touch event triggered, see `setTouchTimer`.


	    mountHandlers(mouseHandlerNames, this);
	  }

	  function mountHandlers(handlerNames, instance) {
	    zrUtil.each(handlerNames, function (name) {
	      addEventListener(dom, eventNameFix(name), instance._handlers[name]);
	    }, instance);
	  }
	}

	var handlerDomProxyProto = HandlerDomProxy.prototype;

	handlerDomProxyProto.dispose = function () {
	  var handlerNames = mouseHandlerNames.concat(touchHandlerNames);

	  for (var i = 0; i < handlerNames.length; i++) {
	    var name = handlerNames[i];
	    removeEventListener(this.dom, eventNameFix(name), this._handlers[name]);
	  }
	};

	handlerDomProxyProto.setCursor = function (cursorStyle) {
	  this.dom.style.cursor = cursorStyle || 'default';
	};

	zrUtil.mixin(HandlerDomProxy, Eventful);
	var _default = HandlerDomProxy;
	module.exports = _default;

/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	var eventUtil = __webpack_require__(199);

	/**
	 * Only implements needed gestures for mobile.
	 */
	var GestureMgr = function () {
	  /**
	   * @private
	   * @type {Array.<Object>}
	   */
	  this._track = [];
	};

	GestureMgr.prototype = {
	  constructor: GestureMgr,
	  recognize: function (event, target, root) {
	    this._doTrack(event, target, root);

	    return this._recognize(event);
	  },
	  clear: function () {
	    this._track.length = 0;
	    return this;
	  },
	  _doTrack: function (event, target, root) {
	    var touches = event.touches;

	    if (!touches) {
	      return;
	    }

	    var trackItem = {
	      points: [],
	      touches: [],
	      target: target,
	      event: event
	    };

	    for (var i = 0, len = touches.length; i < len; i++) {
	      var touch = touches[i];
	      var pos = eventUtil.clientToLocal(root, touch, {});
	      trackItem.points.push([pos.zrX, pos.zrY]);
	      trackItem.touches.push(touch);
	    }

	    this._track.push(trackItem);
	  },
	  _recognize: function (event) {
	    for (var eventName in recognizers) {
	      if (recognizers.hasOwnProperty(eventName)) {
	        var gestureInfo = recognizers[eventName](this._track, event);

	        if (gestureInfo) {
	          return gestureInfo;
	        }
	      }
	    }
	  }
	};

	function dist(pointPair) {
	  var dx = pointPair[1][0] - pointPair[0][0];
	  var dy = pointPair[1][1] - pointPair[0][1];
	  return Math.sqrt(dx * dx + dy * dy);
	}

	function center(pointPair) {
	  return [(pointPair[0][0] + pointPair[1][0]) / 2, (pointPair[0][1] + pointPair[1][1]) / 2];
	}

	var recognizers = {
	  pinch: function (track, event) {
	    var trackLen = track.length;

	    if (!trackLen) {
	      return;
	    }

	    var pinchEnd = (track[trackLen - 1] || {}).points;
	    var pinchPre = (track[trackLen - 2] || {}).points || pinchEnd;

	    if (pinchPre && pinchPre.length > 1 && pinchEnd && pinchEnd.length > 1) {
	      var pinchScale = dist(pinchEnd) / dist(pinchPre);
	      !isFinite(pinchScale) && (pinchScale = 1);
	      event.pinchScale = pinchScale;
	      var pinchCenter = center(pinchEnd);
	      event.pinchX = pinchCenter[0];
	      event.pinchY = pinchCenter[1];
	      return {
	        type: 'pinch',
	        target: track[0].target,
	        event: event
	      };
	    }
	  } // Only pinch currently.

	};
	var _default = GestureMgr;
	module.exports = _default;

/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(162);

	var __DEV__ = _config.__DEV__;

	var zrUtil = __webpack_require__(166);

	var modelUtil = __webpack_require__(203);

	var Model = __webpack_require__(206);

	var ComponentModel = __webpack_require__(245);

	var globalDefault = __webpack_require__(249);

	var colorPaletteMinin = __webpack_require__(250);

	/**
	 * ECharts global model
	 *
	 * @module {echarts/model/Global}
	 */

	/**
	 * Caution: If the mechanism should be changed some day, these cases
	 * should be considered:
	 *
	 * (1) In `merge option` mode, if using the same option to call `setOption`
	 * many times, the result should be the same (try our best to ensure that).
	 * (2) In `merge option` mode, if a component has no id/name specified, it
	 * will be merged by index, and the result sequence of the components is
	 * consistent to the original sequence.
	 * (3) `reset` feature (in toolbox). Find detailed info in comments about
	 * `mergeOption` in module:echarts/model/OptionManager.
	 */
	var each = zrUtil.each;
	var filter = zrUtil.filter;
	var map = zrUtil.map;
	var isArray = zrUtil.isArray;
	var indexOf = zrUtil.indexOf;
	var isObject = zrUtil.isObject;
	var OPTION_INNER_KEY = '\0_ec_inner';
	/**
	 * @alias module:echarts/model/Global
	 *
	 * @param {Object} option
	 * @param {module:echarts/model/Model} parentModel
	 * @param {Object} theme
	 */

	var GlobalModel = Model.extend({
	  constructor: GlobalModel,
	  init: function (option, parentModel, theme, optionManager) {
	    theme = theme || {};
	    this.option = null; // Mark as not initialized.

	    /**
	     * @type {module:echarts/model/Model}
	     * @private
	     */

	    this._theme = new Model(theme);
	    /**
	     * @type {module:echarts/model/OptionManager}
	     */

	    this._optionManager = optionManager;
	  },
	  setOption: function (option, optionPreprocessorFuncs) {
	    zrUtil.assert(!(OPTION_INNER_KEY in option), 'please use chart.getOption()');

	    this._optionManager.setOption(option, optionPreprocessorFuncs);

	    this.resetOption(null);
	  },

	  /**
	   * @param {string} type null/undefined: reset all.
	   *                      'recreate': force recreate all.
	   *                      'timeline': only reset timeline option
	   *                      'media': only reset media query option
	   * @return {boolean} Whether option changed.
	   */
	  resetOption: function (type) {
	    var optionChanged = false;
	    var optionManager = this._optionManager;

	    if (!type || type === 'recreate') {
	      var baseOption = optionManager.mountOption(type === 'recreate');

	      if (!this.option || type === 'recreate') {
	        initBase.call(this, baseOption);
	      } else {
	        this.restoreData();
	        this.mergeOption(baseOption);
	      }

	      optionChanged = true;
	    }

	    if (type === 'timeline' || type === 'media') {
	      this.restoreData();
	    }

	    if (!type || type === 'recreate' || type === 'timeline') {
	      var timelineOption = optionManager.getTimelineOption(this);
	      timelineOption && (this.mergeOption(timelineOption), optionChanged = true);
	    }

	    if (!type || type === 'recreate' || type === 'media') {
	      var mediaOptions = optionManager.getMediaOption(this, this._api);

	      if (mediaOptions.length) {
	        each(mediaOptions, function (mediaOption) {
	          this.mergeOption(mediaOption, optionChanged = true);
	        }, this);
	      }
	    }

	    return optionChanged;
	  },

	  /**
	   * @protected
	   */
	  mergeOption: function (newOption) {
	    var option = this.option;
	    var componentsMap = this._componentsMap;
	    var newCptTypes = []; // 如果不存在对应的 component model 则直接 merge

	    each(newOption, function (componentOption, mainType) {
	      if (componentOption == null) {
	        return;
	      }

	      if (!ComponentModel.hasClass(mainType)) {
	        option[mainType] = option[mainType] == null ? zrUtil.clone(componentOption) : zrUtil.merge(option[mainType], componentOption, true);
	      } else {
	        newCptTypes.push(mainType);
	      }
	    }); // FIXME OPTION 同步是否要改回原来的

	    ComponentModel.topologicalTravel(newCptTypes, ComponentModel.getAllClassMainTypes(), visitComponent, this);
	    this._seriesIndices = this._seriesIndices || [];

	    function visitComponent(mainType, dependencies) {
	      var newCptOptionList = modelUtil.normalizeToArray(newOption[mainType]);
	      var mapResult = modelUtil.mappingToExists(componentsMap.get(mainType), newCptOptionList);
	      modelUtil.makeIdAndName(mapResult); // Set mainType and complete subType.

	      each(mapResult, function (item, index) {
	        var opt = item.option;

	        if (isObject(opt)) {
	          item.keyInfo.mainType = mainType;
	          item.keyInfo.subType = determineSubType(mainType, opt, item.exist);
	        }
	      });
	      var dependentModels = getComponentsByTypes(componentsMap, dependencies);
	      option[mainType] = [];
	      componentsMap.set(mainType, []);
	      each(mapResult, function (resultItem, index) {
	        var componentModel = resultItem.exist;
	        var newCptOption = resultItem.option;
	        zrUtil.assert(isObject(newCptOption) || componentModel, 'Empty component definition'); // Consider where is no new option and should be merged using {},
	        // see removeEdgeAndAdd in topologicalTravel and
	        // ComponentModel.getAllClassMainTypes.

	        if (!newCptOption) {
	          componentModel.mergeOption({}, this);
	          componentModel.optionUpdated({}, false);
	        } else {
	          var ComponentModelClass = ComponentModel.getClass(mainType, resultItem.keyInfo.subType, true);

	          if (componentModel && componentModel instanceof ComponentModelClass) {
	            componentModel.name = resultItem.keyInfo.name;
	            componentModel.mergeOption(newCptOption, this);
	            componentModel.optionUpdated(newCptOption, false);
	          } else {
	            // PENDING Global as parent ?
	            var extraOpt = zrUtil.extend({
	              dependentModels: dependentModels,
	              componentIndex: index
	            }, resultItem.keyInfo);
	            componentModel = new ComponentModelClass(newCptOption, this, this, extraOpt);
	            zrUtil.extend(componentModel, extraOpt);
	            componentModel.init(newCptOption, this, this, extraOpt); // Call optionUpdated after init.
	            // newCptOption has been used as componentModel.option
	            // and may be merged with theme and default, so pass null
	            // to avoid confusion.

	            componentModel.optionUpdated(null, true);
	          }
	        }

	        componentsMap.get(mainType)[index] = componentModel;
	        option[mainType][index] = componentModel.option;
	      }, this); // Backup series for filtering.

	      if (mainType === 'series') {
	        this._seriesIndices = createSeriesIndices(componentsMap.get('series'));
	      }
	    }
	  },

	  /**
	   * Get option for output (cloned option and inner info removed)
	   * @public
	   * @return {Object}
	   */
	  getOption: function () {
	    var option = zrUtil.clone(this.option);
	    each(option, function (opts, mainType) {
	      if (ComponentModel.hasClass(mainType)) {
	        var opts = modelUtil.normalizeToArray(opts);

	        for (var i = opts.length - 1; i >= 0; i--) {
	          // Remove options with inner id.
	          if (modelUtil.isIdInner(opts[i])) {
	            opts.splice(i, 1);
	          }
	        }

	        option[mainType] = opts;
	      }
	    });
	    delete option[OPTION_INNER_KEY];
	    return option;
	  },

	  /**
	   * @return {module:echarts/model/Model}
	   */
	  getTheme: function () {
	    return this._theme;
	  },

	  /**
	   * @param {string} mainType
	   * @param {number} [idx=0]
	   * @return {module:echarts/model/Component}
	   */
	  getComponent: function (mainType, idx) {
	    var list = this._componentsMap.get(mainType);

	    if (list) {
	      return list[idx || 0];
	    }
	  },

	  /**
	   * If none of index and id and name used, return all components with mainType.
	   * @param {Object} condition
	   * @param {string} condition.mainType
	   * @param {string} [condition.subType] If ignore, only query by mainType
	   * @param {number|Array.<number>} [condition.index] Either input index or id or name.
	   * @param {string|Array.<string>} [condition.id] Either input index or id or name.
	   * @param {string|Array.<string>} [condition.name] Either input index or id or name.
	   * @return {Array.<module:echarts/model/Component>}
	   */
	  queryComponents: function (condition) {
	    var mainType = condition.mainType;

	    if (!mainType) {
	      return [];
	    }

	    var index = condition.index;
	    var id = condition.id;
	    var name = condition.name;

	    var cpts = this._componentsMap.get(mainType);

	    if (!cpts || !cpts.length) {
	      return [];
	    }

	    var result;

	    if (index != null) {
	      if (!isArray(index)) {
	        index = [index];
	      }

	      result = filter(map(index, function (idx) {
	        return cpts[idx];
	      }), function (val) {
	        return !!val;
	      });
	    } else if (id != null) {
	      var isIdArray = isArray(id);
	      result = filter(cpts, function (cpt) {
	        return isIdArray && indexOf(id, cpt.id) >= 0 || !isIdArray && cpt.id === id;
	      });
	    } else if (name != null) {
	      var isNameArray = isArray(name);
	      result = filter(cpts, function (cpt) {
	        return isNameArray && indexOf(name, cpt.name) >= 0 || !isNameArray && cpt.name === name;
	      });
	    } else {
	      // Return all components with mainType
	      result = cpts.slice();
	    }

	    return filterBySubType(result, condition);
	  },

	  /**
	   * The interface is different from queryComponents,
	   * which is convenient for inner usage.
	   *
	   * @usage
	   * var result = findComponents(
	   *     {mainType: 'dataZoom', query: {dataZoomId: 'abc'}}
	   * );
	   * var result = findComponents(
	   *     {mainType: 'series', subType: 'pie', query: {seriesName: 'uio'}}
	   * );
	   * var result = findComponents(
	   *     {mainType: 'series'},
	   *     function (model, index) {...}
	   * );
	   * // result like [component0, componnet1, ...]
	   *
	   * @param {Object} condition
	   * @param {string} condition.mainType Mandatory.
	   * @param {string} [condition.subType] Optional.
	   * @param {Object} [condition.query] like {xxxIndex, xxxId, xxxName},
	   *        where xxx is mainType.
	   *        If query attribute is null/undefined or has no index/id/name,
	   *        do not filtering by query conditions, which is convenient for
	   *        no-payload situations or when target of action is global.
	   * @param {Function} [condition.filter] parameter: component, return boolean.
	   * @return {Array.<module:echarts/model/Component>}
	   */
	  findComponents: function (condition) {
	    var query = condition.query;
	    var mainType = condition.mainType;
	    var queryCond = getQueryCond(query);
	    var result = queryCond ? this.queryComponents(queryCond) : this._componentsMap.get(mainType);
	    return doFilter(filterBySubType(result, condition));

	    function getQueryCond(q) {
	      var indexAttr = mainType + 'Index';
	      var idAttr = mainType + 'Id';
	      var nameAttr = mainType + 'Name';
	      return q && (q[indexAttr] != null || q[idAttr] != null || q[nameAttr] != null) ? {
	        mainType: mainType,
	        // subType will be filtered finally.
	        index: q[indexAttr],
	        id: q[idAttr],
	        name: q[nameAttr]
	      } : null;
	    }

	    function doFilter(res) {
	      return condition.filter ? filter(res, condition.filter) : res;
	    }
	  },

	  /**
	   * @usage
	   * eachComponent('legend', function (legendModel, index) {
	   *     ...
	   * });
	   * eachComponent(function (componentType, model, index) {
	   *     // componentType does not include subType
	   *     // (componentType is 'xxx' but not 'xxx.aa')
	   * });
	   * eachComponent(
	   *     {mainType: 'dataZoom', query: {dataZoomId: 'abc'}},
	   *     function (model, index) {...}
	   * );
	   * eachComponent(
	   *     {mainType: 'series', subType: 'pie', query: {seriesName: 'uio'}},
	   *     function (model, index) {...}
	   * );
	   *
	   * @param {string|Object=} mainType When mainType is object, the definition
	   *                                  is the same as the method 'findComponents'.
	   * @param {Function} cb
	   * @param {*} context
	   */
	  eachComponent: function (mainType, cb, context) {
	    var componentsMap = this._componentsMap;

	    if (typeof mainType === 'function') {
	      context = cb;
	      cb = mainType;
	      componentsMap.each(function (components, componentType) {
	        each(components, function (component, index) {
	          cb.call(context, componentType, component, index);
	        });
	      });
	    } else if (zrUtil.isString(mainType)) {
	      each(componentsMap.get(mainType), cb, context);
	    } else if (isObject(mainType)) {
	      var queryResult = this.findComponents(mainType);
	      each(queryResult, cb, context);
	    }
	  },

	  /**
	   * @param {string} name
	   * @return {Array.<module:echarts/model/Series>}
	   */
	  getSeriesByName: function (name) {
	    var series = this._componentsMap.get('series');

	    return filter(series, function (oneSeries) {
	      return oneSeries.name === name;
	    });
	  },

	  /**
	   * @param {number} seriesIndex
	   * @return {module:echarts/model/Series}
	   */
	  getSeriesByIndex: function (seriesIndex) {
	    return this._componentsMap.get('series')[seriesIndex];
	  },

	  /**
	   * @param {string} subType
	   * @return {Array.<module:echarts/model/Series>}
	   */
	  getSeriesByType: function (subType) {
	    var series = this._componentsMap.get('series');

	    return filter(series, function (oneSeries) {
	      return oneSeries.subType === subType;
	    });
	  },

	  /**
	   * @return {Array.<module:echarts/model/Series>}
	   */
	  getSeries: function () {
	    return this._componentsMap.get('series').slice();
	  },

	  /**
	   * After filtering, series may be different
	   * frome raw series.
	   *
	   * @param {Function} cb
	   * @param {*} context
	   */
	  eachSeries: function (cb, context) {
	    assertSeriesInitialized(this);
	    each(this._seriesIndices, function (rawSeriesIndex) {
	      var series = this._componentsMap.get('series')[rawSeriesIndex];

	      cb.call(context, series, rawSeriesIndex);
	    }, this);
	  },

	  /**
	   * Iterate raw series before filtered.
	   *
	   * @param {Function} cb
	   * @param {*} context
	   */
	  eachRawSeries: function (cb, context) {
	    each(this._componentsMap.get('series'), cb, context);
	  },

	  /**
	   * After filtering, series may be different.
	   * frome raw series.
	   *
	   * @parma {string} subType
	   * @param {Function} cb
	   * @param {*} context
	   */
	  eachSeriesByType: function (subType, cb, context) {
	    assertSeriesInitialized(this);
	    each(this._seriesIndices, function (rawSeriesIndex) {
	      var series = this._componentsMap.get('series')[rawSeriesIndex];

	      if (series.subType === subType) {
	        cb.call(context, series, rawSeriesIndex);
	      }
	    }, this);
	  },

	  /**
	   * Iterate raw series before filtered of given type.
	   *
	   * @parma {string} subType
	   * @param {Function} cb
	   * @param {*} context
	   */
	  eachRawSeriesByType: function (subType, cb, context) {
	    return each(this.getSeriesByType(subType), cb, context);
	  },

	  /**
	   * @param {module:echarts/model/Series} seriesModel
	   */
	  isSeriesFiltered: function (seriesModel) {
	    assertSeriesInitialized(this);
	    return zrUtil.indexOf(this._seriesIndices, seriesModel.componentIndex) < 0;
	  },

	  /**
	   * @return {Array.<number>}
	   */
	  getCurrentSeriesIndices: function () {
	    return (this._seriesIndices || []).slice();
	  },

	  /**
	   * @param {Function} cb
	   * @param {*} context
	   */
	  filterSeries: function (cb, context) {
	    assertSeriesInitialized(this);
	    var filteredSeries = filter(this._componentsMap.get('series'), cb, context);
	    this._seriesIndices = createSeriesIndices(filteredSeries);
	  },
	  restoreData: function () {
	    var componentsMap = this._componentsMap;
	    this._seriesIndices = createSeriesIndices(componentsMap.get('series'));
	    var componentTypes = [];
	    componentsMap.each(function (components, componentType) {
	      componentTypes.push(componentType);
	    });
	    ComponentModel.topologicalTravel(componentTypes, ComponentModel.getAllClassMainTypes(), function (componentType, dependencies) {
	      each(componentsMap.get(componentType), function (component) {
	        component.restoreData();
	      });
	    });
	  }
	});
	/**
	 * @inner
	 */

	function mergeTheme(option, theme) {
	  zrUtil.each(theme, function (themeItem, name) {
	    // 如果有 component model 则把具体的 merge 逻辑交给该 model 处理
	    if (!ComponentModel.hasClass(name)) {
	      if (typeof themeItem === 'object') {
	        option[name] = !option[name] ? zrUtil.clone(themeItem) : zrUtil.merge(option[name], themeItem, false);
	      } else {
	        if (option[name] == null) {
	          option[name] = themeItem;
	        }
	      }
	    }
	  });
	}

	function initBase(baseOption) {
	  baseOption = baseOption; // Using OPTION_INNER_KEY to mark that this option can not be used outside,
	  // i.e. `chart.setOption(chart.getModel().option);` is forbiden.

	  this.option = {};
	  this.option[OPTION_INNER_KEY] = 1;
	  /**
	   * Init with series: [], in case of calling findSeries method
	   * before series initialized.
	   * @type {Object.<string, Array.<module:echarts/model/Model>>}
	   * @private
	   */

	  this._componentsMap = zrUtil.createHashMap({
	    series: []
	  });
	  /**
	   * Mapping between filtered series list and raw series list.
	   * key: filtered series indices, value: raw series indices.
	   * @type {Array.<nubmer>}
	   * @private
	   */

	  this._seriesIndices = null;
	  mergeTheme(baseOption, this._theme.option); // TODO Needs clone when merging to the unexisted property

	  zrUtil.merge(baseOption, globalDefault, false);
	  this.mergeOption(baseOption);
	}
	/**
	 * @inner
	 * @param {Array.<string>|string} types model types
	 * @return {Object} key: {string} type, value: {Array.<Object>} models
	 */


	function getComponentsByTypes(componentsMap, types) {
	  if (!zrUtil.isArray(types)) {
	    types = types ? [types] : [];
	  }

	  var ret = {};
	  each(types, function (type) {
	    ret[type] = (componentsMap.get(type) || []).slice();
	  });
	  return ret;
	}
	/**
	 * @inner
	 */


	function determineSubType(mainType, newCptOption, existComponent) {
	  var subType = newCptOption.type ? newCptOption.type : existComponent ? existComponent.subType // Use determineSubType only when there is no existComponent.
	  : ComponentModel.determineSubType(mainType, newCptOption); // tooltip, markline, markpoint may always has no subType

	  return subType;
	}
	/**
	 * @inner
	 */


	function createSeriesIndices(seriesModels) {
	  return map(seriesModels, function (series) {
	    return series.componentIndex;
	  }) || [];
	}
	/**
	 * @inner
	 */


	function filterBySubType(components, condition) {
	  // Using hasOwnProperty for restrict. Consider
	  // subType is undefined in user payload.
	  return condition.hasOwnProperty('subType') ? filter(components, function (cpt) {
	    return cpt.subType === condition.subType;
	  }) : components;
	}
	/**
	 * @inner
	 */


	function assertSeriesInitialized(ecModel) {}

	zrUtil.mixin(GlobalModel, colorPaletteMinin);
	var _default = GlobalModel;
	module.exports = _default;

/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var formatUtil = __webpack_require__(204);

	var nubmerUtil = __webpack_require__(205);

	var Model = __webpack_require__(206);

	var each = zrUtil.each;
	var isObject = zrUtil.isObject;
	/**
	 * If value is not array, then translate it to array.
	 * @param  {*} value
	 * @return {Array} [value] or value
	 */

	function normalizeToArray(value) {
	  return value instanceof Array ? value : value == null ? [] : [value];
	}
	/**
	 * Sync default option between normal and emphasis like `position` and `show`
	 * In case some one will write code like
	 *     label: {
	 *         normal: {
	 *             show: false,
	 *             position: 'outside',
	 *             fontSize: 18
	 *         },
	 *         emphasis: {
	 *             show: true
	 *         }
	 *     }
	 * @param {Object} opt
	 * @param {Array.<string>} subOpts
	 */


	function defaultEmphasis(opt, subOpts) {
	  if (opt) {
	    var emphasisOpt = opt.emphasis = opt.emphasis || {};
	    var normalOpt = opt.normal = opt.normal || {}; // Default emphasis option from normal

	    for (var i = 0, len = subOpts.length; i < len; i++) {
	      var subOptName = subOpts[i];

	      if (!emphasisOpt.hasOwnProperty(subOptName) && normalOpt.hasOwnProperty(subOptName)) {
	        emphasisOpt[subOptName] = normalOpt[subOptName];
	      }
	    }
	  }
	}

	var TEXT_STYLE_OPTIONS = ['fontStyle', 'fontWeight', 'fontSize', 'fontFamily', 'rich', 'tag', 'color', 'textBorderColor', 'textBorderWidth', 'width', 'height', 'lineHeight', 'align', 'verticalAlign', 'baseline', 'shadowColor', 'shadowBlur', 'shadowOffsetX', 'shadowOffsetY', 'textShadowColor', 'textShadowBlur', 'textShadowOffsetX', 'textShadowOffsetY', 'backgroundColor', 'borderColor', 'borderWidth', 'borderRadius', 'padding']; // modelUtil.LABEL_OPTIONS = modelUtil.TEXT_STYLE_OPTIONS.concat([
	//     'position', 'offset', 'rotate', 'origin', 'show', 'distance', 'formatter',
	//     'fontStyle', 'fontWeight', 'fontSize', 'fontFamily',
	//     // FIXME: deprecated, check and remove it.
	//     'textStyle'
	// ]);

	/**
	 * data could be [12, 2323, {value: 223}, [1221, 23], {value: [2, 23]}]
	 * This helper method retieves value from data.
	 * @param {string|number|Date|Array|Object} dataItem
	 * @return {number|string|Date|Array.<number|string|Date>}
	 */

	function getDataItemValue(dataItem) {
	  // Performance sensitive.
	  return dataItem && (dataItem.value == null ? dataItem : dataItem.value);
	}
	/**
	 * data could be [12, 2323, {value: 223}, [1221, 23], {value: [2, 23]}]
	 * This helper method determine if dataItem has extra option besides value
	 * @param {string|number|Date|Array|Object} dataItem
	 */


	function isDataItemOption(dataItem) {
	  return isObject(dataItem) && !(dataItem instanceof Array); // // markLine data can be array
	  // && !(dataItem[0] && isObject(dataItem[0]) && !(dataItem[0] instanceof Array));
	}
	/**
	 * This helper method convert value in data.
	 * @param {string|number|Date} value
	 * @param {Object|string} [dimInfo] If string (like 'x'), dimType defaults 'number'.
	 */


	function converDataValue(value, dimInfo) {
	  // Performance sensitive.
	  var dimType = dimInfo && dimInfo.type;

	  if (dimType === 'ordinal') {
	    return value;
	  }

	  if (dimType === 'time' // spead up when using timestamp
	  && typeof value !== 'number' && value != null && value !== '-') {
	    value = +nubmerUtil.parseDate(value);
	  } // dimType defaults 'number'.
	  // If dimType is not ordinal and value is null or undefined or NaN or '-',
	  // parse to NaN.


	  return value == null || value === '' ? NaN : +value; // If string (like '-'), using '+' parse to NaN
	}
	/**
	 * Create a model proxy to be used in tooltip for edge data, markLine data, markPoint data.
	 * @param {module:echarts/data/List} data
	 * @param {Object} opt
	 * @param {string} [opt.seriesIndex]
	 * @param {Object} [opt.name]
	 * @param {Object} [opt.mainType]
	 * @param {Object} [opt.subType]
	 */


	function createDataFormatModel(data, opt) {
	  var model = new Model();
	  zrUtil.mixin(model, dataFormatMixin);
	  model.seriesIndex = opt.seriesIndex;
	  model.name = opt.name || '';
	  model.mainType = opt.mainType;
	  model.subType = opt.subType;

	  model.getData = function () {
	    return data;
	  };

	  return model;
	} // PENDING A little ugly


	var dataFormatMixin = {
	  /**
	   * Get params for formatter
	   * @param {number} dataIndex
	   * @param {string} [dataType]
	   * @return {Object}
	   */
	  getDataParams: function (dataIndex, dataType) {
	    var data = this.getData(dataType);
	    var rawValue = this.getRawValue(dataIndex, dataType);
	    var rawDataIndex = data.getRawIndex(dataIndex);
	    var name = data.getName(dataIndex, true);
	    var itemOpt = data.getRawDataItem(dataIndex);
	    var color = data.getItemVisual(dataIndex, 'color');
	    return {
	      componentType: this.mainType,
	      componentSubType: this.subType,
	      seriesType: this.mainType === 'series' ? this.subType : null,
	      seriesIndex: this.seriesIndex,
	      seriesId: this.id,
	      seriesName: this.name,
	      name: name,
	      dataIndex: rawDataIndex,
	      data: itemOpt,
	      dataType: dataType,
	      value: rawValue,
	      color: color,
	      marker: formatUtil.getTooltipMarker(color),
	      // Param name list for mapping `a`, `b`, `c`, `d`, `e`
	      $vars: ['seriesName', 'name', 'value']
	    };
	  },

	  /**
	   * Format label
	   * @param {number} dataIndex
	   * @param {string} [status='normal'] 'normal' or 'emphasis'
	   * @param {string} [dataType]
	   * @param {number} [dimIndex]
	   * @param {string} [labelProp='label']
	   * @return {string}
	   */
	  getFormattedLabel: function (dataIndex, status, dataType, dimIndex, labelProp) {
	    status = status || 'normal';
	    var data = this.getData(dataType);
	    var itemModel = data.getItemModel(dataIndex);
	    var params = this.getDataParams(dataIndex, dataType);

	    if (dimIndex != null && params.value instanceof Array) {
	      params.value = params.value[dimIndex];
	    }

	    var formatter = itemModel.get([labelProp || 'label', status, 'formatter']);

	    if (typeof formatter === 'function') {
	      params.status = status;
	      return formatter(params);
	    } else if (typeof formatter === 'string') {
	      return formatUtil.formatTpl(formatter, params);
	    }
	  },

	  /**
	   * Get raw value in option
	   * @param {number} idx
	   * @param {string} [dataType]
	   * @return {Object}
	   */
	  getRawValue: function (idx, dataType) {
	    var data = this.getData(dataType);
	    var dataItem = data.getRawDataItem(idx);

	    if (dataItem != null) {
	      return isObject(dataItem) && !(dataItem instanceof Array) ? dataItem.value : dataItem;
	    }
	  },

	  /**
	   * Should be implemented.
	   * @param {number} dataIndex
	   * @param {boolean} [multipleSeries=false]
	   * @param {number} [dataType]
	   * @return {string} tooltip string
	   */
	  formatTooltip: zrUtil.noop
	};
	/**
	 * Mapping to exists for merge.
	 *
	 * @public
	 * @param {Array.<Object>|Array.<module:echarts/model/Component>} exists
	 * @param {Object|Array.<Object>} newCptOptions
	 * @return {Array.<Object>} Result, like [{exist: ..., option: ...}, {}],
	 *                          index of which is the same as exists.
	 */

	function mappingToExists(exists, newCptOptions) {
	  // Mapping by the order by original option (but not order of
	  // new option) in merge mode. Because we should ensure
	  // some specified index (like xAxisIndex) is consistent with
	  // original option, which is easy to understand, espatially in
	  // media query. And in most case, merge option is used to
	  // update partial option but not be expected to change order.
	  newCptOptions = (newCptOptions || []).slice();
	  var result = zrUtil.map(exists || [], function (obj, index) {
	    return {
	      exist: obj
	    };
	  }); // Mapping by id or name if specified.

	  each(newCptOptions, function (cptOption, index) {
	    if (!isObject(cptOption)) {
	      return;
	    } // id has highest priority.


	    for (var i = 0; i < result.length; i++) {
	      if (!result[i].option // Consider name: two map to one.
	      && cptOption.id != null && result[i].exist.id === cptOption.id + '') {
	        result[i].option = cptOption;
	        newCptOptions[index] = null;
	        return;
	      }
	    }

	    for (var i = 0; i < result.length; i++) {
	      var exist = result[i].exist;

	      if (!result[i].option // Consider name: two map to one.
	      // Can not match when both ids exist but different.
	      && (exist.id == null || cptOption.id == null) && cptOption.name != null && !isIdInner(cptOption) && !isIdInner(exist) && exist.name === cptOption.name + '') {
	        result[i].option = cptOption;
	        newCptOptions[index] = null;
	        return;
	      }
	    }
	  }); // Otherwise mapping by index.

	  each(newCptOptions, function (cptOption, index) {
	    if (!isObject(cptOption)) {
	      return;
	    }

	    var i = 0;

	    for (; i < result.length; i++) {
	      var exist = result[i].exist;

	      if (!result[i].option // Existing model that already has id should be able to
	      // mapped to (because after mapping performed model may
	      // be assigned with a id, whish should not affect next
	      // mapping), except those has inner id.
	      && !isIdInner(exist) // Caution:
	      // Do not overwrite id. But name can be overwritten,
	      // because axis use name as 'show label text'.
	      // 'exist' always has id and name and we dont
	      // need to check it.
	      && cptOption.id == null) {
	        result[i].option = cptOption;
	        break;
	      }
	    }

	    if (i >= result.length) {
	      result.push({
	        option: cptOption
	      });
	    }
	  });
	  return result;
	}
	/**
	 * Make id and name for mapping result (result of mappingToExists)
	 * into `keyInfo` field.
	 *
	 * @public
	 * @param {Array.<Object>} Result, like [{exist: ..., option: ...}, {}],
	 *                          which order is the same as exists.
	 * @return {Array.<Object>} The input.
	 */


	function makeIdAndName(mapResult) {
	  // We use this id to hash component models and view instances
	  // in echarts. id can be specified by user, or auto generated.
	  // The id generation rule ensures new view instance are able
	  // to mapped to old instance when setOption are called in
	  // no-merge mode. So we generate model id by name and plus
	  // type in view id.
	  // name can be duplicated among components, which is convenient
	  // to specify multi components (like series) by one name.
	  // Ensure that each id is distinct.
	  var idMap = zrUtil.createHashMap();
	  each(mapResult, function (item, index) {
	    var existCpt = item.exist;
	    existCpt && idMap.set(existCpt.id, item);
	  });
	  each(mapResult, function (item, index) {
	    var opt = item.option;
	    zrUtil.assert(!opt || opt.id == null || !idMap.get(opt.id) || idMap.get(opt.id) === item, 'id duplicates: ' + (opt && opt.id));
	    opt && opt.id != null && idMap.set(opt.id, item);
	    !item.keyInfo && (item.keyInfo = {});
	  }); // Make name and id.

	  each(mapResult, function (item, index) {
	    var existCpt = item.exist;
	    var opt = item.option;
	    var keyInfo = item.keyInfo;

	    if (!isObject(opt)) {
	      return;
	    } // name can be overwitten. Consider case: axis.name = '20km'.
	    // But id generated by name will not be changed, which affect
	    // only in that case: setOption with 'not merge mode' and view
	    // instance will be recreated, which can be accepted.


	    keyInfo.name = opt.name != null ? opt.name + '' : existCpt ? existCpt.name : '\0-'; // name may be displayed on screen, so use '-'.

	    if (existCpt) {
	      keyInfo.id = existCpt.id;
	    } else if (opt.id != null) {
	      keyInfo.id = opt.id + '';
	    } else {
	      // Consider this situatoin:
	      //  optionA: [{name: 'a'}, {name: 'a'}, {..}]
	      //  optionB [{..}, {name: 'a'}, {name: 'a'}]
	      // Series with the same name between optionA and optionB
	      // should be mapped.
	      var idNum = 0;

	      do {
	        keyInfo.id = '\0' + keyInfo.name + '\0' + idNum++;
	      } while (idMap.get(keyInfo.id));
	    }

	    idMap.set(keyInfo.id, item);
	  });
	}
	/**
	 * @public
	 * @param {Object} cptOption
	 * @return {boolean}
	 */


	function isIdInner(cptOption) {
	  return isObject(cptOption) && cptOption.id && (cptOption.id + '').indexOf('\0_ec_\0') === 0;
	}
	/**
	 * A helper for removing duplicate items between batchA and batchB,
	 * and in themselves, and categorize by series.
	 *
	 * @param {Array.<Object>} batchA Like: [{seriesId: 2, dataIndex: [32, 4, 5]}, ...]
	 * @param {Array.<Object>} batchB Like: [{seriesId: 2, dataIndex: [32, 4, 5]}, ...]
	 * @return {Array.<Array.<Object>, Array.<Object>>} result: [resultBatchA, resultBatchB]
	 */


	function compressBatches(batchA, batchB) {
	  var mapA = {};
	  var mapB = {};
	  makeMap(batchA || [], mapA);
	  makeMap(batchB || [], mapB, mapA);
	  return [mapToArray(mapA), mapToArray(mapB)];

	  function makeMap(sourceBatch, map, otherMap) {
	    for (var i = 0, len = sourceBatch.length; i < len; i++) {
	      var seriesId = sourceBatch[i].seriesId;
	      var dataIndices = normalizeToArray(sourceBatch[i].dataIndex);
	      var otherDataIndices = otherMap && otherMap[seriesId];

	      for (var j = 0, lenj = dataIndices.length; j < lenj; j++) {
	        var dataIndex = dataIndices[j];

	        if (otherDataIndices && otherDataIndices[dataIndex]) {
	          otherDataIndices[dataIndex] = null;
	        } else {
	          (map[seriesId] || (map[seriesId] = {}))[dataIndex] = 1;
	        }
	      }
	    }
	  }

	  function mapToArray(map, isData) {
	    var result = [];

	    for (var i in map) {
	      if (map.hasOwnProperty(i) && map[i] != null) {
	        if (isData) {
	          result.push(+i);
	        } else {
	          var dataIndices = mapToArray(map[i], true);
	          dataIndices.length && result.push({
	            seriesId: i,
	            dataIndex: dataIndices
	          });
	        }
	      }
	    }

	    return result;
	  }
	}
	/**
	 * @param {module:echarts/data/List} data
	 * @param {Object} payload Contains dataIndex (means rawIndex) / dataIndexInside / name
	 *                         each of which can be Array or primary type.
	 * @return {number|Array.<number>} dataIndex If not found, return undefined/null.
	 */


	function queryDataIndex(data, payload) {
	  if (payload.dataIndexInside != null) {
	    return payload.dataIndexInside;
	  } else if (payload.dataIndex != null) {
	    return zrUtil.isArray(payload.dataIndex) ? zrUtil.map(payload.dataIndex, function (value) {
	      return data.indexOfRawIndex(value);
	    }) : data.indexOfRawIndex(payload.dataIndex);
	  } else if (payload.name != null) {
	    return zrUtil.isArray(payload.name) ? zrUtil.map(payload.name, function (value) {
	      return data.indexOfName(value);
	    }) : data.indexOfName(payload.name);
	  }
	}
	/**
	 * Enable property storage to any host object.
	 * Notice: Serialization is not supported.
	 *
	 * For example:
	 * var get = modelUitl.makeGetter();
	 *
	 * function some(hostObj) {
	 *      get(hostObj)._someProperty = 1212;
	 *      ...
	 * }
	 *
	 * @return {Function}
	 */


	var makeGetter = function () {
	  var index = 0;
	  return function () {
	    var key = '\0__ec_prop_getter_' + index++;
	    return function (hostObj) {
	      return hostObj[key] || (hostObj[key] = {});
	    };
	  };
	}();
	/**
	 * @param {module:echarts/model/Global} ecModel
	 * @param {string|Object} finder
	 *        If string, e.g., 'geo', means {geoIndex: 0}.
	 *        If Object, could contain some of these properties below:
	 *        {
	 *            seriesIndex, seriesId, seriesName,
	 *            geoIndex, geoId, geoName,
	 *            bmapIndex, bmapId, bmapName,
	 *            xAxisIndex, xAxisId, xAxisName,
	 *            yAxisIndex, yAxisId, yAxisName,
	 *            gridIndex, gridId, gridName,
	 *            ... (can be extended)
	 *        }
	 *        Each properties can be number|string|Array.<number>|Array.<string>
	 *        For example, a finder could be
	 *        {
	 *            seriesIndex: 3,
	 *            geoId: ['aa', 'cc'],
	 *            gridName: ['xx', 'rr']
	 *        }
	 *        xxxIndex can be set as 'all' (means all xxx) or 'none' (means not specify)
	 *        If nothing or null/undefined specified, return nothing.
	 * @param {Object} [opt]
	 * @param {string} [opt.defaultMainType]
	 * @param {Array.<string>} [opt.includeMainTypes]
	 * @return {Object} result like:
	 *        {
	 *            seriesModels: [seriesModel1, seriesModel2],
	 *            seriesModel: seriesModel1, // The first model
	 *            geoModels: [geoModel1, geoModel2],
	 *            geoModel: geoModel1, // The first model
	 *            ...
	 *        }
	 */


	function parseFinder(ecModel, finder, opt) {
	  if (zrUtil.isString(finder)) {
	    var obj = {};
	    obj[finder + 'Index'] = 0;
	    finder = obj;
	  }

	  var defaultMainType = opt && opt.defaultMainType;

	  if (defaultMainType && !has(finder, defaultMainType + 'Index') && !has(finder, defaultMainType + 'Id') && !has(finder, defaultMainType + 'Name')) {
	    finder[defaultMainType + 'Index'] = 0;
	  }

	  var result = {};
	  each(finder, function (value, key) {
	    var value = finder[key]; // Exclude 'dataIndex' and other illgal keys.

	    if (key === 'dataIndex' || key === 'dataIndexInside') {
	      result[key] = value;
	      return;
	    }

	    var parsedKey = key.match(/^(\w+)(Index|Id|Name)$/) || [];
	    var mainType = parsedKey[1];
	    var queryType = (parsedKey[2] || '').toLowerCase();

	    if (!mainType || !queryType || value == null || queryType === 'index' && value === 'none' || opt && opt.includeMainTypes && zrUtil.indexOf(opt.includeMainTypes, mainType) < 0) {
	      return;
	    }

	    var queryParam = {
	      mainType: mainType
	    };

	    if (queryType !== 'index' || value !== 'all') {
	      queryParam[queryType] = value;
	    }

	    var models = ecModel.queryComponents(queryParam);
	    result[mainType + 'Models'] = models;
	    result[mainType + 'Model'] = models[0];
	  });
	  return result;
	}
	/**
	 * @see {module:echarts/data/helper/completeDimensions}
	 * @param {module:echarts/data/List} data
	 * @param {string|number} dataDim
	 * @return {string}
	 */


	function dataDimToCoordDim(data, dataDim) {
	  var dimensions = data.dimensions;
	  dataDim = data.getDimension(dataDim);

	  for (var i = 0; i < dimensions.length; i++) {
	    var dimItem = data.getDimensionInfo(dimensions[i]);

	    if (dimItem.name === dataDim) {
	      return dimItem.coordDim;
	    }
	  }
	}
	/**
	 * @see {module:echarts/data/helper/completeDimensions}
	 * @param {module:echarts/data/List} data
	 * @param {string} coordDim
	 * @return {Array.<string>} data dimensions on the coordDim.
	 */


	function coordDimToDataDim(data, coordDim) {
	  var dataDim = [];
	  each(data.dimensions, function (dimName) {
	    var dimItem = data.getDimensionInfo(dimName);

	    if (dimItem.coordDim === coordDim) {
	      dataDim[dimItem.coordDimIndex] = dimItem.name;
	    }
	  });
	  return dataDim;
	}
	/**
	 * @see {module:echarts/data/helper/completeDimensions}
	 * @param {module:echarts/data/List} data
	 * @param {string} otherDim Can be `otherDims`
	 *                        like 'label' or 'tooltip'.
	 * @return {Array.<string>} data dimensions on the otherDim.
	 */


	function otherDimToDataDim(data, otherDim) {
	  var dataDim = [];
	  each(data.dimensions, function (dimName) {
	    var dimItem = data.getDimensionInfo(dimName);
	    var otherDims = dimItem.otherDims;
	    var dimIndex = otherDims[otherDim];

	    if (dimIndex != null && dimIndex !== false) {
	      dataDim[dimIndex] = dimItem.name;
	    }
	  });
	  return dataDim;
	}

	function has(obj, prop) {
	  return obj && obj.hasOwnProperty(prop);
	}

	exports.normalizeToArray = normalizeToArray;
	exports.defaultEmphasis = defaultEmphasis;
	exports.TEXT_STYLE_OPTIONS = TEXT_STYLE_OPTIONS;
	exports.getDataItemValue = getDataItemValue;
	exports.isDataItemOption = isDataItemOption;
	exports.converDataValue = converDataValue;
	exports.createDataFormatModel = createDataFormatModel;
	exports.dataFormatMixin = dataFormatMixin;
	exports.mappingToExists = mappingToExists;
	exports.makeIdAndName = makeIdAndName;
	exports.isIdInner = isIdInner;
	exports.compressBatches = compressBatches;
	exports.queryDataIndex = queryDataIndex;
	exports.makeGetter = makeGetter;
	exports.parseFinder = parseFinder;
	exports.dataDimToCoordDim = dataDimToCoordDim;
	exports.coordDimToDataDim = coordDimToDataDim;
	exports.otherDimToDataDim = otherDimToDataDim;

/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var textContain = __webpack_require__(195);

	var numberUtil = __webpack_require__(205);

	/**
	 * 每三位默认加,格式化
	 * @param {string|number} x
	 * @return {string}
	 */
	function addCommas(x) {
	  if (isNaN(x)) {
	    return '-';
	  }

	  x = (x + '').split('.');
	  return x[0].replace(/(\d{1,3})(?=(?:\d{3})+(?!\d))/g, '$1,') + (x.length > 1 ? '.' + x[1] : '');
	}
	/**
	 * @param {string} str
	 * @param {boolean} [upperCaseFirst=false]
	 * @return {string} str
	 */


	function toCamelCase(str, upperCaseFirst) {
	  str = (str || '').toLowerCase().replace(/-(.)/g, function (match, group1) {
	    return group1.toUpperCase();
	  });

	  if (upperCaseFirst && str) {
	    str = str.charAt(0).toUpperCase() + str.slice(1);
	  }

	  return str;
	}

	var normalizeCssArray = zrUtil.normalizeCssArray;

	function encodeHTML(source) {
	  return String(source).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#39;');
	}

	var TPL_VAR_ALIAS = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];

	var wrapVar = function (varName, seriesIdx) {
	  return '{' + varName + (seriesIdx == null ? '' : seriesIdx) + '}';
	};
	/**
	 * Template formatter
	 * @param {string} tpl
	 * @param {Array.<Object>|Object} paramsList
	 * @param {boolean} [encode=false]
	 * @return {string}
	 */


	function formatTpl(tpl, paramsList, encode) {
	  if (!zrUtil.isArray(paramsList)) {
	    paramsList = [paramsList];
	  }

	  var seriesLen = paramsList.length;

	  if (!seriesLen) {
	    return '';
	  }

	  var $vars = paramsList[0].$vars || [];

	  for (var i = 0; i < $vars.length; i++) {
	    var alias = TPL_VAR_ALIAS[i];
	    var val = wrapVar(alias, 0);
	    tpl = tpl.replace(wrapVar(alias), encode ? encodeHTML(val) : val);
	  }

	  for (var seriesIdx = 0; seriesIdx < seriesLen; seriesIdx++) {
	    for (var k = 0; k < $vars.length; k++) {
	      var val = paramsList[seriesIdx][$vars[k]];
	      tpl = tpl.replace(wrapVar(TPL_VAR_ALIAS[k], seriesIdx), encode ? encodeHTML(val) : val);
	    }
	  }

	  return tpl;
	}
	/**
	 * simple Template formatter
	 *
	 * @param {string} tpl
	 * @param {Object} param
	 * @param {boolean} [encode=false]
	 * @return {string}
	 */


	function formatTplSimple(tpl, param, encode) {
	  zrUtil.each(param, function (value, key) {
	    tpl = tpl.replace('{' + key + '}', encode ? encodeHTML(value) : value);
	  });
	  return tpl;
	}
	/**
	 * @param {string} color
	 * @param {string} [extraCssText]
	 * @return {string}
	 */


	function getTooltipMarker(color, extraCssText) {
	  return color ? '<span style="display:inline-block;margin-right:5px;' + 'border-radius:10px;width:9px;height:9px;background-color:' + encodeHTML(color) + ';' + (extraCssText || '') + '"></span>' : '';
	}
	/**
	 * @param {string} str
	 * @return {string}
	 * @inner
	 */


	var s2d = function (str) {
	  return str < 10 ? '0' + str : str;
	};
	/**
	 * ISO Date format
	 * @param {string} tpl
	 * @param {number} value
	 * @param {boolean} [isUTC=false] Default in local time.
	 *           see `module:echarts/scale/Time`
	 *           and `module:echarts/util/number#parseDate`.
	 * @inner
	 */


	function formatTime(tpl, value, isUTC) {
	  if (tpl === 'week' || tpl === 'month' || tpl === 'quarter' || tpl === 'half-year' || tpl === 'year') {
	    tpl = 'MM-dd\nyyyy';
	  }

	  var date = numberUtil.parseDate(value);
	  var utc = isUTC ? 'UTC' : '';
	  var y = date['get' + utc + 'FullYear']();
	  var M = date['get' + utc + 'Month']() + 1;
	  var d = date['get' + utc + 'Date']();
	  var h = date['get' + utc + 'Hours']();
	  var m = date['get' + utc + 'Minutes']();
	  var s = date['get' + utc + 'Seconds']();
	  tpl = tpl.replace('MM', s2d(M)).replace('M', M).replace('yyyy', y).replace('yy', y % 100).replace('dd', s2d(d)).replace('d', d).replace('hh', s2d(h)).replace('h', h).replace('mm', s2d(m)).replace('m', m).replace('ss', s2d(s)).replace('s', s);
	  return tpl;
	}
	/**
	 * Capital first
	 * @param {string} str
	 * @return {string}
	 */


	function capitalFirst(str) {
	  return str ? str.charAt(0).toUpperCase() + str.substr(1) : str;
	}

	var truncateText = textContain.truncateText;
	var getTextRect = textContain.getBoundingRect;
	exports.addCommas = addCommas;
	exports.toCamelCase = toCamelCase;
	exports.normalizeCssArray = normalizeCssArray;
	exports.encodeHTML = encodeHTML;
	exports.formatTpl = formatTpl;
	exports.formatTplSimple = formatTplSimple;
	exports.getTooltipMarker = getTooltipMarker;
	exports.formatTime = formatTime;
	exports.capitalFirst = capitalFirst;
	exports.truncateText = truncateText;
	exports.getTextRect = getTextRect;

/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var RADIAN_EPSILON = 1e-4;

	function _trim(str) {
	  return str.replace(/^\s+/, '').replace(/\s+$/, '');
	}
	/**
	 * Linear mapping a value from domain to range
	 * @memberOf module:echarts/util/number
	 * @param  {(number|Array.<number>)} val
	 * @param  {Array.<number>} domain Domain extent domain[0] can be bigger than domain[1]
	 * @param  {Array.<number>} range  Range extent range[0] can be bigger than range[1]
	 * @param  {boolean} clamp
	 * @return {(number|Array.<number>}
	 */


	function linearMap(val, domain, range, clamp) {
	  var subDomain = domain[1] - domain[0];
	  var subRange = range[1] - range[0];

	  if (subDomain === 0) {
	    return subRange === 0 ? range[0] : (range[0] + range[1]) / 2;
	  } // Avoid accuracy problem in edge, such as
	  // 146.39 - 62.83 === 83.55999999999999.
	  // See echarts/test/ut/spec/util/number.js#linearMap#accuracyError
	  // It is a little verbose for efficiency considering this method
	  // is a hotspot.


	  if (clamp) {
	    if (subDomain > 0) {
	      if (val <= domain[0]) {
	        return range[0];
	      } else if (val >= domain[1]) {
	        return range[1];
	      }
	    } else {
	      if (val >= domain[0]) {
	        return range[0];
	      } else if (val <= domain[1]) {
	        return range[1];
	      }
	    }
	  } else {
	    if (val === domain[0]) {
	      return range[0];
	    }

	    if (val === domain[1]) {
	      return range[1];
	    }
	  }

	  return (val - domain[0]) / subDomain * subRange + range[0];
	}
	/**
	 * Convert a percent string to absolute number.
	 * Returns NaN if percent is not a valid string or number
	 * @memberOf module:echarts/util/number
	 * @param {string|number} percent
	 * @param {number} all
	 * @return {number}
	 */


	function parsePercent(percent, all) {
	  switch (percent) {
	    case 'center':
	    case 'middle':
	      percent = '50%';
	      break;

	    case 'left':
	    case 'top':
	      percent = '0%';
	      break;

	    case 'right':
	    case 'bottom':
	      percent = '100%';
	      break;
	  }

	  if (typeof percent === 'string') {
	    if (_trim(percent).match(/%$/)) {
	      return parseFloat(percent) / 100 * all;
	    }

	    return parseFloat(percent);
	  }

	  return percent == null ? NaN : +percent;
	}
	/**
	 * (1) Fix rounding error of float numbers.
	 * (2) Support return string to avoid scientific notation like '3.5e-7'.
	 *
	 * @param {number} x
	 * @param {number} [precision]
	 * @param {boolean} [returnStr]
	 * @return {number|string}
	 */


	function round(x, precision, returnStr) {
	  if (precision == null) {
	    precision = 10;
	  } // Avoid range error


	  precision = Math.min(Math.max(0, precision), 20);
	  x = (+x).toFixed(precision);
	  return returnStr ? x : +x;
	}

	function asc(arr) {
	  arr.sort(function (a, b) {
	    return a - b;
	  });
	  return arr;
	}
	/**
	 * Get precision
	 * @param {number} val
	 */


	function getPrecision(val) {
	  val = +val;

	  if (isNaN(val)) {
	    return 0;
	  } // It is much faster than methods converting number to string as follows
	  //      var tmp = val.toString();
	  //      return tmp.length - 1 - tmp.indexOf('.');
	  // especially when precision is low


	  var e = 1;
	  var count = 0;

	  while (Math.round(val * e) / e !== val) {
	    e *= 10;
	    count++;
	  }

	  return count;
	}
	/**
	 * @param {string|number} val
	 * @return {number}
	 */


	function getPrecisionSafe(val) {
	  var str = val.toString(); // Consider scientific notation: '3.4e-12' '3.4e+12'

	  var eIndex = str.indexOf('e');

	  if (eIndex > 0) {
	    var precision = +str.slice(eIndex + 1);
	    return precision < 0 ? -precision : 0;
	  } else {
	    var dotIndex = str.indexOf('.');
	    return dotIndex < 0 ? 0 : str.length - 1 - dotIndex;
	  }
	}
	/**
	 * Minimal dicernible data precisioin according to a single pixel.
	 *
	 * @param {Array.<number>} dataExtent
	 * @param {Array.<number>} pixelExtent
	 * @return {number} precision
	 */


	function getPixelPrecision(dataExtent, pixelExtent) {
	  var log = Math.log;
	  var LN10 = Math.LN10;
	  var dataQuantity = Math.floor(log(dataExtent[1] - dataExtent[0]) / LN10);
	  var sizeQuantity = Math.round(log(Math.abs(pixelExtent[1] - pixelExtent[0])) / LN10); // toFixed() digits argument must be between 0 and 20.

	  var precision = Math.min(Math.max(-dataQuantity + sizeQuantity, 0), 20);
	  return !isFinite(precision) ? 20 : precision;
	}
	/**
	 * Get a data of given precision, assuring the sum of percentages
	 * in valueList is 1.
	 * The largest remainer method is used.
	 * https://en.wikipedia.org/wiki/Largest_remainder_method
	 *
	 * @param {Array.<number>} valueList a list of all data
	 * @param {number} idx index of the data to be processed in valueList
	 * @param {number} precision integer number showing digits of precision
	 * @return {number} percent ranging from 0 to 100
	 */


	function getPercentWithPrecision(valueList, idx, precision) {
	  if (!valueList[idx]) {
	    return 0;
	  }

	  var sum = zrUtil.reduce(valueList, function (acc, val) {
	    return acc + (isNaN(val) ? 0 : val);
	  }, 0);

	  if (sum === 0) {
	    return 0;
	  }

	  var digits = Math.pow(10, precision);
	  var votesPerQuota = zrUtil.map(valueList, function (val) {
	    return (isNaN(val) ? 0 : val) / sum * digits * 100;
	  });
	  var targetSeats = digits * 100;
	  var seats = zrUtil.map(votesPerQuota, function (votes) {
	    // Assign automatic seats.
	    return Math.floor(votes);
	  });
	  var currentSum = zrUtil.reduce(seats, function (acc, val) {
	    return acc + val;
	  }, 0);
	  var remainder = zrUtil.map(votesPerQuota, function (votes, idx) {
	    return votes - seats[idx];
	  }); // Has remainding votes.

	  while (currentSum < targetSeats) {
	    // Find next largest remainder.
	    var max = Number.NEGATIVE_INFINITY;
	    var maxId = null;

	    for (var i = 0, len = remainder.length; i < len; ++i) {
	      if (remainder[i] > max) {
	        max = remainder[i];
	        maxId = i;
	      }
	    } // Add a vote to max remainder.


	    ++seats[maxId];
	    remainder[maxId] = 0;
	    ++currentSum;
	  }

	  return seats[idx] / digits;
	} // Number.MAX_SAFE_INTEGER, ie do not support.


	var MAX_SAFE_INTEGER = 9007199254740991;
	/**
	 * To 0 - 2 * PI, considering negative radian.
	 * @param {number} radian
	 * @return {number}
	 */

	function remRadian(radian) {
	  var pi2 = Math.PI * 2;
	  return (radian % pi2 + pi2) % pi2;
	}
	/**
	 * @param {type} radian
	 * @return {boolean}
	 */


	function isRadianAroundZero(val) {
	  return val > -RADIAN_EPSILON && val < RADIAN_EPSILON;
	}

	var TIME_REG = /^(?:(\d{4})(?:[-\/](\d{1,2})(?:[-\/](\d{1,2})(?:[T ](\d{1,2})(?::(\d\d)(?::(\d\d)(?:[.,](\d+))?)?)?(Z|[\+\-]\d\d:?\d\d)?)?)?)?)?$/; // jshint ignore:line

	/**
	 * @param {string|Date|number} value These values can be accepted:
	 *   + An instance of Date, represent a time in its own time zone.
	 *   + Or string in a subset of ISO 8601, only including:
	 *     + only year, month, date: '2012-03', '2012-03-01', '2012-03-01 05', '2012-03-01 05:06',
	 *     + separated with T or space: '2012-03-01T12:22:33.123', '2012-03-01 12:22:33.123',
	 *     + time zone: '2012-03-01T12:22:33Z', '2012-03-01T12:22:33+8000', '2012-03-01T12:22:33-05:00',
	 *     all of which will be treated as local time if time zone is not specified
	 *     (see <https://momentjs.com/>).
	 *   + Or other string format, including (all of which will be treated as loacal time):
	 *     '2012', '2012-3-1', '2012/3/1', '2012/03/01',
	 *     '2009/6/12 2:00', '2009/6/12 2:05:08', '2009/6/12 2:05:08.123'
	 *   + a timestamp, which represent a time in UTC.
	 * @return {Date} date
	 */

	function parseDate(value) {
	  if (value instanceof Date) {
	    return value;
	  } else if (typeof value === 'string') {
	    // Different browsers parse date in different way, so we parse it manually.
	    // Some other issues:
	    // new Date('1970-01-01') is UTC,
	    // new Date('1970/01/01') and new Date('1970-1-01') is local.
	    // See issue #3623
	    var match = TIME_REG.exec(value);

	    if (!match) {
	      // return Invalid Date.
	      return new Date(NaN);
	    } // Use local time when no timezone offset specifed.


	    if (!match[8]) {
	      // match[n] can only be string or undefined.
	      // But take care of '12' + 1 => '121'.
	      return new Date(+match[1], +(match[2] || 1) - 1, +match[3] || 1, +match[4] || 0, +(match[5] || 0), +match[6] || 0, +match[7] || 0);
	    } // Timezoneoffset of Javascript Date has considered DST (Daylight Saving Time,
	    // https://tc39.github.io/ecma262/#sec-daylight-saving-time-adjustment).
	    // For example, system timezone is set as "Time Zone: America/Toronto",
	    // then these code will get different result:
	    // `new Date(1478411999999).getTimezoneOffset();  // get 240`
	    // `new Date(1478412000000).getTimezoneOffset();  // get 300`
	    // So we should not use `new Date`, but use `Date.UTC`.
	    else {
	        var hour = +match[4] || 0;

	        if (match[8].toUpperCase() !== 'Z') {
	          hour -= match[8].slice(0, 3);
	        }

	        return new Date(Date.UTC(+match[1], +(match[2] || 1) - 1, +match[3] || 1, hour, +(match[5] || 0), +match[6] || 0, +match[7] || 0));
	      }
	  } else if (value == null) {
	    return new Date(NaN);
	  }

	  return new Date(Math.round(value));
	}
	/**
	 * Quantity of a number. e.g. 0.1, 1, 10, 100
	 *
	 * @param  {number} val
	 * @return {number}
	 */


	function quantity(val) {
	  return Math.pow(10, quantityExponent(val));
	}

	function quantityExponent(val) {
	  return Math.floor(Math.log(val) / Math.LN10);
	}
	/**
	 * find a “nice” number approximately equal to x. Round the number if round = true,
	 * take ceiling if round = false. The primary observation is that the “nicest”
	 * numbers in decimal are 1, 2, and 5, and all power-of-ten multiples of these numbers.
	 *
	 * See "Nice Numbers for Graph Labels" of Graphic Gems.
	 *
	 * @param  {number} val Non-negative value.
	 * @param  {boolean} round
	 * @return {number}
	 */


	function nice(val, round) {
	  var exponent = quantityExponent(val);
	  var exp10 = Math.pow(10, exponent);
	  var f = val / exp10; // 1 <= f < 10

	  var nf;

	  if (round) {
	    if (f < 1.5) {
	      nf = 1;
	    } else if (f < 2.5) {
	      nf = 2;
	    } else if (f < 4) {
	      nf = 3;
	    } else if (f < 7) {
	      nf = 5;
	    } else {
	      nf = 10;
	    }
	  } else {
	    if (f < 1) {
	      nf = 1;
	    } else if (f < 2) {
	      nf = 2;
	    } else if (f < 3) {
	      nf = 3;
	    } else if (f < 5) {
	      nf = 5;
	    } else {
	      nf = 10;
	    }
	  }

	  val = nf * exp10; // Fix 3 * 0.1 === 0.30000000000000004 issue (see IEEE 754).
	  // 20 is the uppper bound of toFixed.

	  return exponent >= -20 ? +val.toFixed(exponent < 0 ? -exponent : 0) : val;
	}
	/**
	 * Order intervals asc, and split them when overlap.
	 * expect(numberUtil.reformIntervals([
	 *     {interval: [18, 62], close: [1, 1]},
	 *     {interval: [-Infinity, -70], close: [0, 0]},
	 *     {interval: [-70, -26], close: [1, 1]},
	 *     {interval: [-26, 18], close: [1, 1]},
	 *     {interval: [62, 150], close: [1, 1]},
	 *     {interval: [106, 150], close: [1, 1]},
	 *     {interval: [150, Infinity], close: [0, 0]}
	 * ])).toEqual([
	 *     {interval: [-Infinity, -70], close: [0, 0]},
	 *     {interval: [-70, -26], close: [1, 1]},
	 *     {interval: [-26, 18], close: [0, 1]},
	 *     {interval: [18, 62], close: [0, 1]},
	 *     {interval: [62, 150], close: [0, 1]},
	 *     {interval: [150, Infinity], close: [0, 0]}
	 * ]);
	 * @param {Array.<Object>} list, where `close` mean open or close
	 *        of the interval, and Infinity can be used.
	 * @return {Array.<Object>} The origin list, which has been reformed.
	 */


	function reformIntervals(list) {
	  list.sort(function (a, b) {
	    return littleThan(a, b, 0) ? -1 : 1;
	  });
	  var curr = -Infinity;
	  var currClose = 1;

	  for (var i = 0; i < list.length;) {
	    var interval = list[i].interval;
	    var close = list[i].close;

	    for (var lg = 0; lg < 2; lg++) {
	      if (interval[lg] <= curr) {
	        interval[lg] = curr;
	        close[lg] = !lg ? 1 - currClose : 1;
	      }

	      curr = interval[lg];
	      currClose = close[lg];
	    }

	    if (interval[0] === interval[1] && close[0] * close[1] !== 1) {
	      list.splice(i, 1);
	    } else {
	      i++;
	    }
	  }

	  return list;

	  function littleThan(a, b, lg) {
	    return a.interval[lg] < b.interval[lg] || a.interval[lg] === b.interval[lg] && (a.close[lg] - b.close[lg] === (!lg ? 1 : -1) || !lg && littleThan(a, b, 1));
	  }
	}
	/**
	 * parseFloat NaNs numeric-cast false positives (null|true|false|"")
	 * ...but misinterprets leading-number strings, particularly hex literals ("0x...")
	 * subtraction forces infinities to NaN
	 *
	 * @param {*} v
	 * @return {boolean}
	 */


	function isNumeric(v) {
	  return v - parseFloat(v) >= 0;
	}

	exports.linearMap = linearMap;
	exports.parsePercent = parsePercent;
	exports.round = round;
	exports.asc = asc;
	exports.getPrecision = getPrecision;
	exports.getPrecisionSafe = getPrecisionSafe;
	exports.getPixelPrecision = getPixelPrecision;
	exports.getPercentWithPrecision = getPercentWithPrecision;
	exports.MAX_SAFE_INTEGER = MAX_SAFE_INTEGER;
	exports.remRadian = remRadian;
	exports.isRadianAroundZero = isRadianAroundZero;
	exports.parseDate = parseDate;
	exports.quantity = quantity;
	exports.nice = nice;
	exports.reformIntervals = reformIntervals;
	exports.isNumeric = isNumeric;

/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var env = __webpack_require__(165);

	var clazzUtil = __webpack_require__(207);

	var lineStyleMixin = __webpack_require__(208);

	var areaStyleMixin = __webpack_require__(210);

	var textStyleMixin = __webpack_require__(211);

	var itemStyleMixin = __webpack_require__(244);

	/**
	 * @module echarts/model/Model
	 */
	var mixin = zrUtil.mixin;
	/**
	 * @alias module:echarts/model/Model
	 * @constructor
	 * @param {Object} option
	 * @param {module:echarts/model/Model} [parentModel]
	 * @param {module:echarts/model/Global} [ecModel]
	 */

	function Model(option, parentModel, ecModel) {
	  /**
	   * @type {module:echarts/model/Model}
	   * @readOnly
	   */
	  this.parentModel = parentModel;
	  /**
	   * @type {module:echarts/model/Global}
	   * @readOnly
	   */

	  this.ecModel = ecModel;
	  /**
	   * @type {Object}
	   * @protected
	   */

	  this.option = option; // Simple optimization
	  // if (this.init) {
	  //     if (arguments.length <= 4) {
	  //         this.init(option, parentModel, ecModel, extraOpt);
	  //     }
	  //     else {
	  //         this.init.apply(this, arguments);
	  //     }
	  // }
	}

	Model.prototype = {
	  constructor: Model,

	  /**
	   * Model 的初始化函数
	   * @param {Object} option
	   */
	  init: null,

	  /**
	   * 从新的 Option merge
	   */
	  mergeOption: function (option) {
	    zrUtil.merge(this.option, option, true);
	  },

	  /**
	   * @param {string|Array.<string>} path
	   * @param {boolean} [ignoreParent=false]
	   * @return {*}
	   */
	  get: function (path, ignoreParent) {
	    if (path == null) {
	      return this.option;
	    }

	    return doGet(this.option, this.parsePath(path), !ignoreParent && getParent(this, path));
	  },

	  /**
	   * @param {string} key
	   * @param {boolean} [ignoreParent=false]
	   * @return {*}
	   */
	  getShallow: function (key, ignoreParent) {
	    var option = this.option;
	    var val = option == null ? option : option[key];
	    var parentModel = !ignoreParent && getParent(this, key);

	    if (val == null && parentModel) {
	      val = parentModel.getShallow(key);
	    }

	    return val;
	  },

	  /**
	   * @param {string|Array.<string>} [path]
	   * @param {module:echarts/model/Model} [parentModel]
	   * @return {module:echarts/model/Model}
	   */
	  getModel: function (path, parentModel) {
	    var obj = path == null ? this.option : doGet(this.option, path = this.parsePath(path));
	    var thisParentModel;
	    parentModel = parentModel || (thisParentModel = getParent(this, path)) && thisParentModel.getModel(path);
	    return new Model(obj, parentModel, this.ecModel);
	  },

	  /**
	   * If model has option
	   */
	  isEmpty: function () {
	    return this.option == null;
	  },
	  restoreData: function () {},
	  // Pending
	  clone: function () {
	    var Ctor = this.constructor;
	    return new Ctor(zrUtil.clone(this.option));
	  },
	  setReadOnly: function (properties) {
	    clazzUtil.setReadOnly(this, properties);
	  },
	  // If path is null/undefined, return null/undefined.
	  parsePath: function (path) {
	    if (typeof path === 'string') {
	      path = path.split('.');
	    }

	    return path;
	  },

	  /**
	   * @param {Function} getParentMethod
	   *        param {Array.<string>|string} path
	   *        return {module:echarts/model/Model}
	   */
	  customizeGetParent: function (getParentMethod) {
	    clazzUtil.set(this, 'getParent', getParentMethod);
	  },
	  isAnimationEnabled: function () {
	    if (!env.node) {
	      if (this.option.animation != null) {
	        return !!this.option.animation;
	      } else if (this.parentModel) {
	        return this.parentModel.isAnimationEnabled();
	      }
	    }
	  }
	};

	function doGet(obj, pathArr, parentModel) {
	  for (var i = 0; i < pathArr.length; i++) {
	    // Ignore empty
	    if (!pathArr[i]) {
	      continue;
	    } // obj could be number/string/... (like 0)


	    obj = obj && typeof obj === 'object' ? obj[pathArr[i]] : null;

	    if (obj == null) {
	      break;
	    }
	  }

	  if (obj == null && parentModel) {
	    obj = parentModel.get(pathArr);
	  }

	  return obj;
	} // `path` can be null/undefined


	function getParent(model, path) {
	  var getParentMethod = clazzUtil.get(model, 'getParent');
	  return getParentMethod ? getParentMethod.call(model, path) : model.parentModel;
	} // Enable Model.extend.


	clazzUtil.enableClassExtend(Model);
	mixin(Model, lineStyleMixin);
	mixin(Model, areaStyleMixin);
	mixin(Model, textStyleMixin);
	mixin(Model, itemStyleMixin);
	var _default = Model;
	module.exports = _default;

/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(162);

	var __DEV__ = _config.__DEV__;

	var zrUtil = __webpack_require__(166);

	var TYPE_DELIMITER = '.';
	var IS_CONTAINER = '___EC__COMPONENT__CONTAINER___';
	var MEMBER_PRIFIX = '\0ec_\0';
	/**
	 * Hide private class member.
	 * The same behavior as `host[name] = value;` (can be right-value)
	 * @public
	 */

	function set(host, name, value) {
	  return host[MEMBER_PRIFIX + name] = value;
	}
	/**
	 * Hide private class member.
	 * The same behavior as `host[name];`
	 * @public
	 */


	function get(host, name) {
	  return host[MEMBER_PRIFIX + name];
	}
	/**
	 * For hidden private class member.
	 * The same behavior as `host.hasOwnProperty(name);`
	 * @public
	 */


	function hasOwn(host, name) {
	  return host.hasOwnProperty(MEMBER_PRIFIX + name);
	}
	/**
	 * Notice, parseClassType('') should returns {main: '', sub: ''}
	 * @public
	 */


	function parseClassType(componentType) {
	  var ret = {
	    main: '',
	    sub: ''
	  };

	  if (componentType) {
	    componentType = componentType.split(TYPE_DELIMITER);
	    ret.main = componentType[0] || '';
	    ret.sub = componentType[1] || '';
	  }

	  return ret;
	}
	/**
	 * @public
	 */


	function checkClassType(componentType) {
	  zrUtil.assert(/^[a-zA-Z0-9_]+([.][a-zA-Z0-9_]+)?$/.test(componentType), 'componentType "' + componentType + '" illegal');
	}
	/**
	 * @public
	 */


	function enableClassExtend(RootClass, mandatoryMethods) {
	  RootClass.$constructor = RootClass;

	  RootClass.extend = function (proto) {
	    var superClass = this;

	    var ExtendedClass = function () {
	      if (!proto.$constructor) {
	        superClass.apply(this, arguments);
	      } else {
	        proto.$constructor.apply(this, arguments);
	      }
	    };

	    zrUtil.extend(ExtendedClass.prototype, proto);
	    ExtendedClass.extend = this.extend;
	    ExtendedClass.superCall = superCall;
	    ExtendedClass.superApply = superApply;
	    zrUtil.inherits(ExtendedClass, this);
	    ExtendedClass.superClass = superClass;
	    return ExtendedClass;
	  };
	} // superCall should have class info, which can not be fetch from 'this'.
	// Consider this case:
	// class A has method f,
	// class B inherits class A, overrides method f, f call superApply('f'),
	// class C inherits class B, do not overrides method f,
	// then when method of class C is called, dead loop occured.


	function superCall(context, methodName) {
	  var args = zrUtil.slice(arguments, 2);
	  return this.superClass.prototype[methodName].apply(context, args);
	}

	function superApply(context, methodName, args) {
	  return this.superClass.prototype[methodName].apply(context, args);
	}
	/**
	 * @param {Object} entity
	 * @param {Object} options
	 * @param {boolean} [options.registerWhenExtend]
	 * @public
	 */


	function enableClassManagement(entity, options) {
	  options = options || {};
	  /**
	   * Component model classes
	   * key: componentType,
	   * value:
	   *     componentClass, when componentType is 'xxx'
	   *     or Object.<subKey, componentClass>, when componentType is 'xxx.yy'
	   * @type {Object}
	   */

	  var storage = {};

	  entity.registerClass = function (Clazz, componentType) {
	    if (componentType) {
	      checkClassType(componentType);
	      componentType = parseClassType(componentType);

	      if (!componentType.sub) {
	        storage[componentType.main] = Clazz;
	      } else if (componentType.sub !== IS_CONTAINER) {
	        var container = makeContainer(componentType);
	        container[componentType.sub] = Clazz;
	      }
	    }

	    return Clazz;
	  };

	  entity.getClass = function (componentMainType, subType, throwWhenNotFound) {
	    var Clazz = storage[componentMainType];

	    if (Clazz && Clazz[IS_CONTAINER]) {
	      Clazz = subType ? Clazz[subType] : null;
	    }

	    if (throwWhenNotFound && !Clazz) {
	      throw new Error(!subType ? componentMainType + '.' + 'type should be specified.' : 'Component ' + componentMainType + '.' + (subType || '') + ' not exists. Load it first.');
	    }

	    return Clazz;
	  };

	  entity.getClassesByMainType = function (componentType) {
	    componentType = parseClassType(componentType);
	    var result = [];
	    var obj = storage[componentType.main];

	    if (obj && obj[IS_CONTAINER]) {
	      zrUtil.each(obj, function (o, type) {
	        type !== IS_CONTAINER && result.push(o);
	      });
	    } else {
	      result.push(obj);
	    }

	    return result;
	  };

	  entity.hasClass = function (componentType) {
	    // Just consider componentType.main.
	    componentType = parseClassType(componentType);
	    return !!storage[componentType.main];
	  };
	  /**
	   * @return {Array.<string>} Like ['aa', 'bb'], but can not be ['aa.xx']
	   */


	  entity.getAllClassMainTypes = function () {
	    var types = [];
	    zrUtil.each(storage, function (obj, type) {
	      types.push(type);
	    });
	    return types;
	  };
	  /**
	   * If a main type is container and has sub types
	   * @param  {string}  mainType
	   * @return {boolean}
	   */


	  entity.hasSubTypes = function (componentType) {
	    componentType = parseClassType(componentType);
	    var obj = storage[componentType.main];
	    return obj && obj[IS_CONTAINER];
	  };

	  entity.parseClassType = parseClassType;

	  function makeContainer(componentType) {
	    var container = storage[componentType.main];

	    if (!container || !container[IS_CONTAINER]) {
	      container = storage[componentType.main] = {};
	      container[IS_CONTAINER] = true;
	    }

	    return container;
	  }

	  if (options.registerWhenExtend) {
	    var originalExtend = entity.extend;

	    if (originalExtend) {
	      entity.extend = function (proto) {
	        var ExtendedClass = originalExtend.call(this, proto);
	        return entity.registerClass(ExtendedClass, proto.type);
	      };
	    }
	  }

	  return entity;
	}
	/**
	 * @param {string|Array.<string>} properties
	 */


	function setReadOnly(obj, properties) {// FIXME It seems broken in IE8 simulation of IE11
	  // if (!zrUtil.isArray(properties)) {
	  //     properties = properties != null ? [properties] : [];
	  // }
	  // zrUtil.each(properties, function (prop) {
	  //     var value = obj[prop];
	  //     Object.defineProperty
	  //         && Object.defineProperty(obj, prop, {
	  //             value: value, writable: false
	  //         });
	  //     zrUtil.isArray(obj[prop])
	  //         && Object.freeze
	  //         && Object.freeze(obj[prop]);
	  // });
	}

	exports.set = set;
	exports.get = get;
	exports.hasOwn = hasOwn;
	exports.parseClassType = parseClassType;
	exports.enableClassExtend = enableClassExtend;
	exports.enableClassManagement = enableClassManagement;
	exports.setReadOnly = setReadOnly;

/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	var makeStyleMapper = __webpack_require__(209);

	var getLineStyle = makeStyleMapper([['lineWidth', 'width'], ['stroke', 'color'], ['opacity'], ['shadowBlur'], ['shadowOffsetX'], ['shadowOffsetY'], ['shadowColor']]);
	var _default = {
	  getLineStyle: function (excludes) {
	    var style = getLineStyle(this, excludes);
	    var lineDash = this.getLineDash(style.lineWidth);
	    lineDash && (style.lineDash = lineDash);
	    return style;
	  },
	  getLineDash: function (lineWidth) {
	    if (lineWidth == null) {
	      lineWidth = 1;
	    }

	    var lineType = this.get('type');
	    var dotSize = Math.max(lineWidth, 2);
	    var dashSize = lineWidth * 4;
	    return lineType === 'solid' || lineType == null ? null : lineType === 'dashed' ? [dashSize, dashSize] : [dotSize, dotSize];
	  }
	};
	module.exports = _default;

/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	// TODO Parse shadow style
	// TODO Only shallow path support
	function _default(properties) {
	  // Normalize
	  for (var i = 0; i < properties.length; i++) {
	    if (!properties[i][1]) {
	      properties[i][1] = properties[i][0];
	    }
	  }

	  return function (model, excludes, includes) {
	    var style = {};

	    for (var i = 0; i < properties.length; i++) {
	      var propName = properties[i][1];

	      if (excludes && zrUtil.indexOf(excludes, propName) >= 0 || includes && zrUtil.indexOf(includes, propName) < 0) {
	        continue;
	      }

	      var val = model.getShallow(propName);

	      if (val != null) {
	        style[properties[i][0]] = val;
	      }
	    }

	    return style;
	  };
	}

	module.exports = _default;

/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	var makeStyleMapper = __webpack_require__(209);

	var getAreaStyle = makeStyleMapper([['fill', 'color'], ['shadowBlur'], ['shadowOffsetX'], ['shadowOffsetY'], ['opacity'], ['shadowColor']]);
	var _default = {
	  getAreaStyle: function (excludes, includes) {
	    return getAreaStyle(this, excludes, includes);
	  }
	};
	module.exports = _default;

/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	var textContain = __webpack_require__(195);

	var graphicUtil = __webpack_require__(212);

	var PATH_COLOR = ['textStyle', 'color'];
	var _default = {
	  /**
	   * Get color property or get color from option.textStyle.color
	   * @param {boolean} [isEmphasis]
	   * @return {string}
	   */
	  getTextColor: function (isEmphasis) {
	    var ecModel = this.ecModel;
	    return this.getShallow('color') || (!isEmphasis && ecModel ? ecModel.get(PATH_COLOR) : null);
	  },

	  /**
	   * Create font string from fontStyle, fontWeight, fontSize, fontFamily
	   * @return {string}
	   */
	  getFont: function () {
	    return graphicUtil.getFont({
	      fontStyle: this.getShallow('fontStyle'),
	      fontWeight: this.getShallow('fontWeight'),
	      fontSize: this.getShallow('fontSize'),
	      fontFamily: this.getShallow('fontFamily')
	    }, this.ecModel);
	  },
	  getTextRect: function (text) {
	    return textContain.getBoundingRect(text, this.getFont(), this.getShallow('align'), this.getShallow('verticalAlign') || this.getShallow('baseline'), this.getShallow('padding'), this.getShallow('rich'), this.getShallow('truncateText'));
	  }
	};
	module.exports = _default;

/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var pathTool = __webpack_require__(213);

	var colorTool = __webpack_require__(180);

	var matrix = __webpack_require__(175);

	var vector = __webpack_require__(168);

	var Path = __webpack_require__(214);

	var Transformable = __webpack_require__(174);

	var Image = __webpack_require__(191);

	exports.Image = Image;

	var Group = __webpack_require__(172);

	exports.Group = Group;

	var Text = __webpack_require__(226);

	exports.Text = Text;

	var Circle = __webpack_require__(227);

	exports.Circle = Circle;

	var Sector = __webpack_require__(228);

	exports.Sector = Sector;

	var Ring = __webpack_require__(230);

	exports.Ring = Ring;

	var Polygon = __webpack_require__(231);

	exports.Polygon = Polygon;

	var Polyline = __webpack_require__(235);

	exports.Polyline = Polyline;

	var Rect = __webpack_require__(236);

	exports.Rect = Rect;

	var Line = __webpack_require__(237);

	exports.Line = Line;

	var BezierCurve = __webpack_require__(238);

	exports.BezierCurve = BezierCurve;

	var Arc = __webpack_require__(239);

	exports.Arc = Arc;

	var CompoundPath = __webpack_require__(240);

	exports.CompoundPath = CompoundPath;

	var LinearGradient = __webpack_require__(241);

	exports.LinearGradient = LinearGradient;

	var RadialGradient = __webpack_require__(243);

	exports.RadialGradient = RadialGradient;

	var BoundingRect = __webpack_require__(184);

	exports.BoundingRect = BoundingRect;
	var round = Math.round;
	var mathMax = Math.max;
	var mathMin = Math.min;
	var EMPTY_OBJ = {};
	/**
	 * Extend shape with parameters
	 */

	function extendShape(opts) {
	  return Path.extend(opts);
	}
	/**
	 * Extend path
	 */


	function extendPath(pathData, opts) {
	  return pathTool.extendFromString(pathData, opts);
	}
	/**
	 * Create a path element from path data string
	 * @param {string} pathData
	 * @param {Object} opts
	 * @param {module:zrender/core/BoundingRect} rect
	 * @param {string} [layout=cover] 'center' or 'cover'
	 */


	function makePath(pathData, opts, rect, layout) {
	  var path = pathTool.createFromString(pathData, opts);
	  var boundingRect = path.getBoundingRect();

	  if (rect) {
	    if (layout === 'center') {
	      rect = centerGraphic(rect, boundingRect);
	    }

	    resizePath(path, rect);
	  }

	  return path;
	}
	/**
	 * Create a image element from image url
	 * @param {string} imageUrl image url
	 * @param {Object} opts options
	 * @param {module:zrender/core/BoundingRect} rect constrain rect
	 * @param {string} [layout=cover] 'center' or 'cover'
	 */


	function makeImage(imageUrl, rect, layout) {
	  var path = new Image({
	    style: {
	      image: imageUrl,
	      x: rect.x,
	      y: rect.y,
	      width: rect.width,
	      height: rect.height
	    },
	    onload: function (img) {
	      if (layout === 'center') {
	        var boundingRect = {
	          width: img.width,
	          height: img.height
	        };
	        path.setStyle(centerGraphic(rect, boundingRect));
	      }
	    }
	  });
	  return path;
	}
	/**
	 * Get position of centered element in bounding box.
	 *
	 * @param  {Object} rect         element local bounding box
	 * @param  {Object} boundingRect constraint bounding box
	 * @return {Object} element position containing x, y, width, and height
	 */


	function centerGraphic(rect, boundingRect) {
	  // Set rect to center, keep width / height ratio.
	  var aspect = boundingRect.width / boundingRect.height;
	  var width = rect.height * aspect;
	  var height;

	  if (width <= rect.width) {
	    height = rect.height;
	  } else {
	    width = rect.width;
	    height = width / aspect;
	  }

	  var cx = rect.x + rect.width / 2;
	  var cy = rect.y + rect.height / 2;
	  return {
	    x: cx - width / 2,
	    y: cy - height / 2,
	    width: width,
	    height: height
	  };
	}

	var mergePath = pathTool.mergePath;
	/**
	 * Resize a path to fit the rect
	 * @param {module:zrender/graphic/Path} path
	 * @param {Object} rect
	 */

	function resizePath(path, rect) {
	  if (!path.applyTransform) {
	    return;
	  }

	  var pathRect = path.getBoundingRect();
	  var m = pathRect.calculateTransform(rect);
	  path.applyTransform(m);
	}
	/**
	 * Sub pixel optimize line for canvas
	 *
	 * @param {Object} param
	 * @param {Object} [param.shape]
	 * @param {number} [param.shape.x1]
	 * @param {number} [param.shape.y1]
	 * @param {number} [param.shape.x2]
	 * @param {number} [param.shape.y2]
	 * @param {Object} [param.style]
	 * @param {number} [param.style.lineWidth]
	 * @return {Object} Modified param
	 */


	function subPixelOptimizeLine(param) {
	  var shape = param.shape;
	  var lineWidth = param.style.lineWidth;

	  if (round(shape.x1 * 2) === round(shape.x2 * 2)) {
	    shape.x1 = shape.x2 = subPixelOptimize(shape.x1, lineWidth, true);
	  }

	  if (round(shape.y1 * 2) === round(shape.y2 * 2)) {
	    shape.y1 = shape.y2 = subPixelOptimize(shape.y1, lineWidth, true);
	  }

	  return param;
	}
	/**
	 * Sub pixel optimize rect for canvas
	 *
	 * @param {Object} param
	 * @param {Object} [param.shape]
	 * @param {number} [param.shape.x]
	 * @param {number} [param.shape.y]
	 * @param {number} [param.shape.width]
	 * @param {number} [param.shape.height]
	 * @param {Object} [param.style]
	 * @param {number} [param.style.lineWidth]
	 * @return {Object} Modified param
	 */


	function subPixelOptimizeRect(param) {
	  var shape = param.shape;
	  var lineWidth = param.style.lineWidth;
	  var originX = shape.x;
	  var originY = shape.y;
	  var originWidth = shape.width;
	  var originHeight = shape.height;
	  shape.x = subPixelOptimize(shape.x, lineWidth, true);
	  shape.y = subPixelOptimize(shape.y, lineWidth, true);
	  shape.width = Math.max(subPixelOptimize(originX + originWidth, lineWidth, false) - shape.x, originWidth === 0 ? 0 : 1);
	  shape.height = Math.max(subPixelOptimize(originY + originHeight, lineWidth, false) - shape.y, originHeight === 0 ? 0 : 1);
	  return param;
	}
	/**
	 * Sub pixel optimize for canvas
	 *
	 * @param {number} position Coordinate, such as x, y
	 * @param {number} lineWidth Should be nonnegative integer.
	 * @param {boolean=} positiveOrNegative Default false (negative).
	 * @return {number} Optimized position.
	 */


	function subPixelOptimize(position, lineWidth, positiveOrNegative) {
	  // Assure that (position + lineWidth / 2) is near integer edge,
	  // otherwise line will be fuzzy in canvas.
	  var doubledPosition = round(position * 2);
	  return (doubledPosition + round(lineWidth)) % 2 === 0 ? doubledPosition / 2 : (doubledPosition + (positiveOrNegative ? 1 : -1)) / 2;
	}

	function hasFillOrStroke(fillOrStroke) {
	  return fillOrStroke != null && fillOrStroke != 'none';
	}

	function liftColor(color) {
	  return typeof color === 'string' ? colorTool.lift(color, -0.1) : color;
	}
	/**
	 * @private
	 */


	function cacheElementStl(el) {
	  if (el.__hoverStlDirty) {
	    var stroke = el.style.stroke;
	    var fill = el.style.fill; // Create hoverStyle on mouseover

	    var hoverStyle = el.__hoverStl;
	    hoverStyle.fill = hoverStyle.fill || (hasFillOrStroke(fill) ? liftColor(fill) : null);
	    hoverStyle.stroke = hoverStyle.stroke || (hasFillOrStroke(stroke) ? liftColor(stroke) : null);
	    var normalStyle = {};

	    for (var name in hoverStyle) {
	      // See comment in `doSingleEnterHover`.
	      if (hoverStyle[name] != null) {
	        normalStyle[name] = el.style[name];
	      }
	    }

	    el.__normalStl = normalStyle;
	    el.__hoverStlDirty = false;
	  }
	}
	/**
	 * @private
	 */


	function doSingleEnterHover(el) {
	  if (el.__isHover) {
	    return;
	  }

	  cacheElementStl(el);

	  if (el.useHoverLayer) {
	    el.__zr && el.__zr.addHover(el, el.__hoverStl);
	  } else {
	    var style = el.style;
	    var insideRollbackOpt = style.insideRollbackOpt; // Consider case: only `position: 'top'` is set on emphasis, then text
	    // color should be returned to `autoColor`, rather than remain '#fff'.
	    // So we should rollback then apply again after style merging.

	    insideRollbackOpt && rollbackInsideStyle(style); // styles can be:
	    // {
	    //     label: {
	    //         normal: {
	    //             show: false,
	    //             position: 'outside',
	    //             fontSize: 18
	    //         },
	    //         emphasis: {
	    //             show: true
	    //         }
	    //     }
	    // },
	    // where properties of `emphasis` may not appear in `normal`. We previously use
	    // module:echarts/util/model#defaultEmphasis to merge `normal` to `emphasis`.
	    // But consider rich text and setOption in merge mode, it is impossible to cover
	    // all properties in merge. So we use merge mode when setting style here, where
	    // only properties that is not `null/undefined` can be set. The disadventage:
	    // null/undefined can not be used to remove style any more in `emphasis`.

	    style.extendFrom(el.__hoverStl); // Do not save `insideRollback`.

	    if (insideRollbackOpt) {
	      applyInsideStyle(style, style.insideOriginalTextPosition, insideRollbackOpt); // textFill may be rollbacked to null.

	      if (style.textFill == null) {
	        style.textFill = insideRollbackOpt.autoColor;
	      }
	    }

	    el.dirty(false);
	    el.z2 += 1;
	  }

	  el.__isHover = true;
	}
	/**
	 * @inner
	 */


	function doSingleLeaveHover(el) {
	  if (!el.__isHover) {
	    return;
	  }

	  var normalStl = el.__normalStl;

	  if (el.useHoverLayer) {
	    el.__zr && el.__zr.removeHover(el);
	  } else {
	    // Consider null/undefined value, should use
	    // `setStyle` but not `extendFrom(stl, true)`.
	    normalStl && el.setStyle(normalStl);
	    el.z2 -= 1;
	  }

	  el.__isHover = false;
	}
	/**
	 * @inner
	 */


	function doEnterHover(el) {
	  el.type === 'group' ? el.traverse(function (child) {
	    if (child.type !== 'group') {
	      doSingleEnterHover(child);
	    }
	  }) : doSingleEnterHover(el);
	}

	function doLeaveHover(el) {
	  el.type === 'group' ? el.traverse(function (child) {
	    if (child.type !== 'group') {
	      doSingleLeaveHover(child);
	    }
	  }) : doSingleLeaveHover(el);
	}
	/**
	 * @inner
	 */


	function setElementHoverStl(el, hoverStl) {
	  // If element has sepcified hoverStyle, then use it instead of given hoverStyle
	  // Often used when item group has a label element and it's hoverStyle is different
	  el.__hoverStl = el.hoverStyle || hoverStl || {};
	  el.__hoverStlDirty = true;

	  if (el.__isHover) {
	    cacheElementStl(el);
	  }
	}
	/**
	 * @inner
	 */


	function onElementMouseOver(e) {
	  if (this.__hoverSilentOnTouch && e.zrByTouch) {
	    return;
	  } // Only if element is not in emphasis status


	  !this.__isEmphasis && doEnterHover(this);
	}
	/**
	 * @inner
	 */


	function onElementMouseOut(e) {
	  if (this.__hoverSilentOnTouch && e.zrByTouch) {
	    return;
	  } // Only if element is not in emphasis status


	  !this.__isEmphasis && doLeaveHover(this);
	}
	/**
	 * @inner
	 */


	function enterEmphasis() {
	  this.__isEmphasis = true;
	  doEnterHover(this);
	}
	/**
	 * @inner
	 */


	function leaveEmphasis() {
	  this.__isEmphasis = false;
	  doLeaveHover(this);
	}
	/**
	 * Set hover style of element.
	 * This method can be called repeatly without side-effects.
	 * @param {module:zrender/Element} el
	 * @param {Object} [hoverStyle]
	 * @param {Object} [opt]
	 * @param {boolean} [opt.hoverSilentOnTouch=false]
	 *        In touch device, mouseover event will be trigger on touchstart event
	 *        (see module:zrender/dom/HandlerProxy). By this mechanism, we can
	 *        conviniently use hoverStyle when tap on touch screen without additional
	 *        code for compatibility.
	 *        But if the chart/component has select feature, which usually also use
	 *        hoverStyle, there might be conflict between 'select-highlight' and
	 *        'hover-highlight' especially when roam is enabled (see geo for example).
	 *        In this case, hoverSilentOnTouch should be used to disable hover-highlight
	 *        on touch device.
	 */


	function setHoverStyle(el, hoverStyle, opt) {
	  el.__hoverSilentOnTouch = opt && opt.hoverSilentOnTouch;
	  el.type === 'group' ? el.traverse(function (child) {
	    if (child.type !== 'group') {
	      setElementHoverStl(child, hoverStyle);
	    }
	  }) : setElementHoverStl(el, hoverStyle); // Duplicated function will be auto-ignored, see Eventful.js.

	  el.on('mouseover', onElementMouseOver).on('mouseout', onElementMouseOut); // Emphasis, normal can be triggered manually

	  el.on('emphasis', enterEmphasis).on('normal', leaveEmphasis);
	}
	/**
	 * @param {Object|module:zrender/graphic/Style} normalStyle
	 * @param {Object} emphasisStyle
	 * @param {module:echarts/model/Model} normalModel
	 * @param {module:echarts/model/Model} emphasisModel
	 * @param {Object} opt Check `opt` of `setTextStyleCommon` to find other props.
	 * @param {Object} [opt.defaultText]
	 * @param {module:echarts/model/Model} [opt.labelFetcher] Fetch text by
	 *      `opt.labelFetcher.getFormattedLabel(opt.labelDataIndex, 'normal'/'emphasis', null, opt.labelDimIndex)`
	 * @param {module:echarts/model/Model} [opt.labelDataIndex] Fetch text by
	 *      `opt.textFetcher.getFormattedLabel(opt.labelDataIndex, 'normal'/'emphasis', null, opt.labelDimIndex)`
	 * @param {module:echarts/model/Model} [opt.labelDimIndex] Fetch text by
	 *      `opt.textFetcher.getFormattedLabel(opt.labelDataIndex, 'normal'/'emphasis', null, opt.labelDimIndex)`
	 * @param {Object} [normalSpecified]
	 * @param {Object} [emphasisSpecified]
	 */


	function setLabelStyle(normalStyle, emphasisStyle, normalModel, emphasisModel, opt, normalSpecified, emphasisSpecified) {
	  opt = opt || EMPTY_OBJ;
	  var labelFetcher = opt.labelFetcher;
	  var labelDataIndex = opt.labelDataIndex;
	  var labelDimIndex = opt.labelDimIndex; // This scenario, `label.normal.show = true; label.emphasis.show = false`,
	  // is not supported util someone requests.

	  var showNormal = normalModel.getShallow('show');
	  var showEmphasis = emphasisModel.getShallow('show'); // Consider performance, only fetch label when necessary.
	  // If `normal.show` is `false` and `emphasis.show` is `true` and `emphasis.formatter` is not set,
	  // label should be displayed, where text is fetched by `normal.formatter` or `opt.defaultText`.

	  var baseText = showNormal || showEmphasis ? zrUtil.retrieve2(labelFetcher ? labelFetcher.getFormattedLabel(labelDataIndex, 'normal', null, labelDimIndex) : null, opt.defaultText) : null;
	  var normalStyleText = showNormal ? baseText : null;
	  var emphasisStyleText = showEmphasis ? zrUtil.retrieve2(labelFetcher ? labelFetcher.getFormattedLabel(labelDataIndex, 'emphasis', null, labelDimIndex) : null, baseText) : null; // Optimize: If style.text is null, text will not be drawn.

	  if (normalStyleText != null || emphasisStyleText != null) {
	    // Always set `textStyle` even if `normalStyle.text` is null, because default
	    // values have to be set on `normalStyle`.
	    // If we set default values on `emphasisStyle`, consider case:
	    // Firstly, `setOption(... label: {normal: {text: null}, emphasis: {show: true}} ...);`
	    // Secondly, `setOption(... label: {noraml: {show: true, text: 'abc', color: 'red'} ...);`
	    // Then the 'red' will not work on emphasis.
	    setTextStyle(normalStyle, normalModel, normalSpecified, opt);
	    setTextStyle(emphasisStyle, emphasisModel, emphasisSpecified, opt, true);
	  }

	  normalStyle.text = normalStyleText;
	  emphasisStyle.text = emphasisStyleText;
	}
	/**
	 * Set basic textStyle properties.
	 * @param {Object|module:zrender/graphic/Style} textStyle
	 * @param {module:echarts/model/Model} model
	 * @param {Object} [specifiedTextStyle] Can be overrided by settings in model.
	 * @param {Object} [opt] See `opt` of `setTextStyleCommon`.
	 * @param {boolean} [isEmphasis]
	 */


	function setTextStyle(textStyle, textStyleModel, specifiedTextStyle, opt, isEmphasis) {
	  setTextStyleCommon(textStyle, textStyleModel, opt, isEmphasis);
	  specifiedTextStyle && zrUtil.extend(textStyle, specifiedTextStyle);
	  textStyle.host && textStyle.host.dirty && textStyle.host.dirty(false);
	  return textStyle;
	}
	/**
	 * Set text option in the style.
	 * @deprecated
	 * @param {Object} textStyle
	 * @param {module:echarts/model/Model} labelModel
	 * @param {string|boolean} defaultColor Default text color.
	 *        If set as false, it will be processed as a emphasis style.
	 */


	function setText(textStyle, labelModel, defaultColor) {
	  var opt = {
	    isRectText: true
	  };
	  var isEmphasis;

	  if (defaultColor === false) {
	    isEmphasis = true;
	  } else {
	    // Support setting color as 'auto' to get visual color.
	    opt.autoColor = defaultColor;
	  }

	  setTextStyleCommon(textStyle, labelModel, opt, isEmphasis);
	  textStyle.host && textStyle.host.dirty && textStyle.host.dirty(false);
	}
	/**
	 * {
	 *      disableBox: boolean, Whether diable drawing box of block (outer most).
	 *      isRectText: boolean,
	 *      autoColor: string, specify a color when color is 'auto',
	 *              for textFill, textStroke, textBackgroundColor, and textBorderColor.
	 *              If autoColor specified, it is used as default textFill.
	 *      useInsideStyle:
	 *              `true`: Use inside style (textFill, textStroke, textStrokeWidth)
	 *                  if `textFill` is not specified.
	 *              `false`: Do not use inside style.
	 *              `null/undefined`: use inside style if `isRectText` is true and
	 *                  `textFill` is not specified and textPosition contains `'inside'`.
	 *      forceRich: boolean
	 * }
	 */


	function setTextStyleCommon(textStyle, textStyleModel, opt, isEmphasis) {
	  // Consider there will be abnormal when merge hover style to normal style if given default value.
	  opt = opt || EMPTY_OBJ;

	  if (opt.isRectText) {
	    var textPosition = textStyleModel.getShallow('position') || (isEmphasis ? null : 'inside'); // 'outside' is not a valid zr textPostion value, but used
	    // in bar series, and magric type should be considered.

	    textPosition === 'outside' && (textPosition = 'top');
	    textStyle.textPosition = textPosition;
	    textStyle.textOffset = textStyleModel.getShallow('offset');
	    var labelRotate = textStyleModel.getShallow('rotate');
	    labelRotate != null && (labelRotate *= Math.PI / 180);
	    textStyle.textRotation = labelRotate;
	    textStyle.textDistance = zrUtil.retrieve2(textStyleModel.getShallow('distance'), isEmphasis ? null : 5);
	  }

	  var ecModel = textStyleModel.ecModel;
	  var globalTextStyle = ecModel && ecModel.option.textStyle; // Consider case:
	  // {
	  //     data: [{
	  //         value: 12,
	  //         label: {
	  //             normal: {
	  //                 rich: {
	  //                     // no 'a' here but using parent 'a'.
	  //                 }
	  //             }
	  //         }
	  //     }],
	  //     rich: {
	  //         a: { ... }
	  //     }
	  // }

	  var richItemNames = getRichItemNames(textStyleModel);
	  var richResult;

	  if (richItemNames) {
	    richResult = {};

	    for (var name in richItemNames) {
	      if (richItemNames.hasOwnProperty(name)) {
	        // Cascade is supported in rich.
	        var richTextStyle = textStyleModel.getModel(['rich', name]); // In rich, never `disableBox`.

	        setTokenTextStyle(richResult[name] = {}, richTextStyle, globalTextStyle, opt, isEmphasis);
	      }
	    }
	  }

	  textStyle.rich = richResult;
	  setTokenTextStyle(textStyle, textStyleModel, globalTextStyle, opt, isEmphasis, true);

	  if (opt.forceRich && !opt.textStyle) {
	    opt.textStyle = {};
	  }

	  return textStyle;
	} // Consider case:
	// {
	//     data: [{
	//         value: 12,
	//         label: {
	//             normal: {
	//                 rich: {
	//                     // no 'a' here but using parent 'a'.
	//                 }
	//             }
	//         }
	//     }],
	//     rich: {
	//         a: { ... }
	//     }
	// }


	function getRichItemNames(textStyleModel) {
	  // Use object to remove duplicated names.
	  var richItemNameMap;

	  while (textStyleModel && textStyleModel !== textStyleModel.ecModel) {
	    var rich = (textStyleModel.option || EMPTY_OBJ).rich;

	    if (rich) {
	      richItemNameMap = richItemNameMap || {};

	      for (var name in rich) {
	        if (rich.hasOwnProperty(name)) {
	          richItemNameMap[name] = 1;
	        }
	      }
	    }

	    textStyleModel = textStyleModel.parentModel;
	  }

	  return richItemNameMap;
	}

	function setTokenTextStyle(textStyle, textStyleModel, globalTextStyle, opt, isEmphasis, isBlock) {
	  // In merge mode, default value should not be given.
	  globalTextStyle = !isEmphasis && globalTextStyle || EMPTY_OBJ;
	  textStyle.textFill = getAutoColor(textStyleModel.getShallow('color'), opt) || globalTextStyle.color;
	  textStyle.textStroke = getAutoColor(textStyleModel.getShallow('textBorderColor'), opt) || globalTextStyle.textBorderColor;
	  textStyle.textStrokeWidth = zrUtil.retrieve2(textStyleModel.getShallow('textBorderWidth'), globalTextStyle.textBorderWidth);

	  if (!isEmphasis) {
	    if (isBlock) {
	      // Always set `insideRollback`, for clearing previous.
	      var originalTextPosition = textStyle.textPosition;
	      textStyle.insideRollback = applyInsideStyle(textStyle, originalTextPosition, opt); // Save original textPosition, because style.textPosition will be repalced by
	      // real location (like [10, 30]) in zrender.

	      textStyle.insideOriginalTextPosition = originalTextPosition;
	      textStyle.insideRollbackOpt = opt;
	    } // Set default finally.


	    if (textStyle.textFill == null) {
	      textStyle.textFill = opt.autoColor;
	    }
	  } // Do not use `getFont` here, because merge should be supported, where
	  // part of these properties may be changed in emphasis style, and the
	  // others should remain their original value got from normal style.


	  textStyle.fontStyle = textStyleModel.getShallow('fontStyle') || globalTextStyle.fontStyle;
	  textStyle.fontWeight = textStyleModel.getShallow('fontWeight') || globalTextStyle.fontWeight;
	  textStyle.fontSize = textStyleModel.getShallow('fontSize') || globalTextStyle.fontSize;
	  textStyle.fontFamily = textStyleModel.getShallow('fontFamily') || globalTextStyle.fontFamily;
	  textStyle.textAlign = textStyleModel.getShallow('align');
	  textStyle.textVerticalAlign = textStyleModel.getShallow('verticalAlign') || textStyleModel.getShallow('baseline');
	  textStyle.textLineHeight = textStyleModel.getShallow('lineHeight');
	  textStyle.textWidth = textStyleModel.getShallow('width');
	  textStyle.textHeight = textStyleModel.getShallow('height');
	  textStyle.textTag = textStyleModel.getShallow('tag');

	  if (!isBlock || !opt.disableBox) {
	    textStyle.textBackgroundColor = getAutoColor(textStyleModel.getShallow('backgroundColor'), opt);
	    textStyle.textPadding = textStyleModel.getShallow('padding');
	    textStyle.textBorderColor = getAutoColor(textStyleModel.getShallow('borderColor'), opt);
	    textStyle.textBorderWidth = textStyleModel.getShallow('borderWidth');
	    textStyle.textBorderRadius = textStyleModel.getShallow('borderRadius');
	    textStyle.textBoxShadowColor = textStyleModel.getShallow('shadowColor');
	    textStyle.textBoxShadowBlur = textStyleModel.getShallow('shadowBlur');
	    textStyle.textBoxShadowOffsetX = textStyleModel.getShallow('shadowOffsetX');
	    textStyle.textBoxShadowOffsetY = textStyleModel.getShallow('shadowOffsetY');
	  }

	  textStyle.textShadowColor = textStyleModel.getShallow('textShadowColor') || globalTextStyle.textShadowColor;
	  textStyle.textShadowBlur = textStyleModel.getShallow('textShadowBlur') || globalTextStyle.textShadowBlur;
	  textStyle.textShadowOffsetX = textStyleModel.getShallow('textShadowOffsetX') || globalTextStyle.textShadowOffsetX;
	  textStyle.textShadowOffsetY = textStyleModel.getShallow('textShadowOffsetY') || globalTextStyle.textShadowOffsetY;
	}

	function getAutoColor(color, opt) {
	  return color !== 'auto' ? color : opt && opt.autoColor ? opt.autoColor : null;
	}

	function applyInsideStyle(textStyle, textPosition, opt) {
	  var useInsideStyle = opt.useInsideStyle;
	  var insideRollback;

	  if (textStyle.textFill == null && useInsideStyle !== false && (useInsideStyle === true || opt.isRectText && textPosition // textPosition can be [10, 30]
	  && typeof textPosition === 'string' && textPosition.indexOf('inside') >= 0)) {
	    insideRollback = {
	      textFill: null,
	      textStroke: textStyle.textStroke,
	      textStrokeWidth: textStyle.textStrokeWidth
	    };
	    textStyle.textFill = '#fff'; // Consider text with #fff overflow its container.

	    if (textStyle.textStroke == null) {
	      textStyle.textStroke = opt.autoColor;
	      textStyle.textStrokeWidth == null && (textStyle.textStrokeWidth = 2);
	    }
	  }

	  return insideRollback;
	}

	function rollbackInsideStyle(style) {
	  var insideRollback = style.insideRollback;

	  if (insideRollback) {
	    style.textFill = insideRollback.textFill;
	    style.textStroke = insideRollback.textStroke;
	    style.textStrokeWidth = insideRollback.textStrokeWidth;
	  }
	}

	function getFont(opt, ecModel) {
	  // ecModel or default text style model.
	  var gTextStyleModel = ecModel || ecModel.getModel('textStyle');
	  return [// FIXME in node-canvas fontWeight is before fontStyle
	  opt.fontStyle || gTextStyleModel && gTextStyleModel.getShallow('fontStyle') || '', opt.fontWeight || gTextStyleModel && gTextStyleModel.getShallow('fontWeight') || '', (opt.fontSize || gTextStyleModel && gTextStyleModel.getShallow('fontSize') || 12) + 'px', opt.fontFamily || gTextStyleModel && gTextStyleModel.getShallow('fontFamily') || 'sans-serif'].join(' ');
	}

	function animateOrSetProps(isUpdate, el, props, animatableModel, dataIndex, cb) {
	  if (typeof dataIndex === 'function') {
	    cb = dataIndex;
	    dataIndex = null;
	  } // Do not check 'animation' property directly here. Consider this case:
	  // animation model is an `itemModel`, whose does not have `isAnimationEnabled`
	  // but its parent model (`seriesModel`) does.


	  var animationEnabled = animatableModel && animatableModel.isAnimationEnabled();

	  if (animationEnabled) {
	    var postfix = isUpdate ? 'Update' : '';
	    var duration = animatableModel.getShallow('animationDuration' + postfix);
	    var animationEasing = animatableModel.getShallow('animationEasing' + postfix);
	    var animationDelay = animatableModel.getShallow('animationDelay' + postfix);

	    if (typeof animationDelay === 'function') {
	      animationDelay = animationDelay(dataIndex, animatableModel.getAnimationDelayParams ? animatableModel.getAnimationDelayParams(el, dataIndex) : null);
	    }

	    if (typeof duration === 'function') {
	      duration = duration(dataIndex);
	    }

	    duration > 0 ? el.animateTo(props, duration, animationDelay || 0, animationEasing, cb, !!cb) : (el.stopAnimation(), el.attr(props), cb && cb());
	  } else {
	    el.stopAnimation();
	    el.attr(props);
	    cb && cb();
	  }
	}
	/**
	 * Update graphic element properties with or without animation according to the
	 * configuration in series.
	 *
	 * Caution: this method will stop previous animation.
	 * So if do not use this method to one element twice before
	 * animation starts, unless you know what you are doing.
	 *
	 * @param {module:zrender/Element} el
	 * @param {Object} props
	 * @param {module:echarts/model/Model} [animatableModel]
	 * @param {number} [dataIndex]
	 * @param {Function} [cb]
	 * @example
	 *     graphic.updateProps(el, {
	 *         position: [100, 100]
	 *     }, seriesModel, dataIndex, function () { console.log('Animation done!'); });
	 *     // Or
	 *     graphic.updateProps(el, {
	 *         position: [100, 100]
	 *     }, seriesModel, function () { console.log('Animation done!'); });
	 */


	function updateProps(el, props, animatableModel, dataIndex, cb) {
	  animateOrSetProps(true, el, props, animatableModel, dataIndex, cb);
	}
	/**
	 * Init graphic element properties with or without animation according to the
	 * configuration in series.
	 *
	 * Caution: this method will stop previous animation.
	 * So if do not use this method to one element twice before
	 * animation starts, unless you know what you are doing.
	 *
	 * @param {module:zrender/Element} el
	 * @param {Object} props
	 * @param {module:echarts/model/Model} [animatableModel]
	 * @param {number} [dataIndex]
	 * @param {Function} cb
	 */


	function initProps(el, props, animatableModel, dataIndex, cb) {
	  animateOrSetProps(false, el, props, animatableModel, dataIndex, cb);
	}
	/**
	 * Get transform matrix of target (param target),
	 * in coordinate of its ancestor (param ancestor)
	 *
	 * @param {module:zrender/mixin/Transformable} target
	 * @param {module:zrender/mixin/Transformable} [ancestor]
	 */


	function getTransform(target, ancestor) {
	  var mat = matrix.identity([]);

	  while (target && target !== ancestor) {
	    matrix.mul(mat, target.getLocalTransform(), mat);
	    target = target.parent;
	  }

	  return mat;
	}
	/**
	 * Apply transform to an vertex.
	 * @param {Array.<number>} target [x, y]
	 * @param {Array.<number>|TypedArray.<number>|Object} transform Can be:
	 *      + Transform matrix: like [1, 0, 0, 1, 0, 0]
	 *      + {position, rotation, scale}, the same as `zrender/Transformable`.
	 * @param {boolean=} invert Whether use invert matrix.
	 * @return {Array.<number>} [x, y]
	 */


	function applyTransform(target, transform, invert) {
	  if (transform && !zrUtil.isArrayLike(transform)) {
	    transform = Transformable.getLocalTransform(transform);
	  }

	  if (invert) {
	    transform = matrix.invert([], transform);
	  }

	  return vector.applyTransform([], target, transform);
	}
	/**
	 * @param {string} direction 'left' 'right' 'top' 'bottom'
	 * @param {Array.<number>} transform Transform matrix: like [1, 0, 0, 1, 0, 0]
	 * @param {boolean=} invert Whether use invert matrix.
	 * @return {string} Transformed direction. 'left' 'right' 'top' 'bottom'
	 */


	function transformDirection(direction, transform, invert) {
	  // Pick a base, ensure that transform result will not be (0, 0).
	  var hBase = transform[4] === 0 || transform[5] === 0 || transform[0] === 0 ? 1 : Math.abs(2 * transform[4] / transform[0]);
	  var vBase = transform[4] === 0 || transform[5] === 0 || transform[2] === 0 ? 1 : Math.abs(2 * transform[4] / transform[2]);
	  var vertex = [direction === 'left' ? -hBase : direction === 'right' ? hBase : 0, direction === 'top' ? -vBase : direction === 'bottom' ? vBase : 0];
	  vertex = applyTransform(vertex, transform, invert);
	  return Math.abs(vertex[0]) > Math.abs(vertex[1]) ? vertex[0] > 0 ? 'right' : 'left' : vertex[1] > 0 ? 'bottom' : 'top';
	}
	/**
	 * Apply group transition animation from g1 to g2.
	 * If no animatableModel, no animation.
	 */


	function groupTransition(g1, g2, animatableModel, cb) {
	  if (!g1 || !g2) {
	    return;
	  }

	  function getElMap(g) {
	    var elMap = {};
	    g.traverse(function (el) {
	      if (!el.isGroup && el.anid) {
	        elMap[el.anid] = el;
	      }
	    });
	    return elMap;
	  }

	  function getAnimatableProps(el) {
	    var obj = {
	      position: vector.clone(el.position),
	      rotation: el.rotation
	    };

	    if (el.shape) {
	      obj.shape = zrUtil.extend({}, el.shape);
	    }

	    return obj;
	  }

	  var elMap1 = getElMap(g1);
	  g2.traverse(function (el) {
	    if (!el.isGroup && el.anid) {
	      var oldEl = elMap1[el.anid];

	      if (oldEl) {
	        var newProp = getAnimatableProps(el);
	        el.attr(getAnimatableProps(oldEl));
	        updateProps(el, newProp, animatableModel, el.dataIndex);
	      } // else {
	      //     if (el.previousProps) {
	      //         graphic.updateProps
	      //     }
	      // }

	    }
	  });
	}
	/**
	 * @param {Array.<Array.<number>>} points Like: [[23, 44], [53, 66], ...]
	 * @param {Object} rect {x, y, width, height}
	 * @return {Array.<Array.<number>>} A new clipped points.
	 */


	function clipPointsByRect(points, rect) {
	  return zrUtil.map(points, function (point) {
	    var x = point[0];
	    x = mathMax(x, rect.x);
	    x = mathMin(x, rect.x + rect.width);
	    var y = point[1];
	    y = mathMax(y, rect.y);
	    y = mathMin(y, rect.y + rect.height);
	    return [x, y];
	  });
	}
	/**
	 * @param {Object} targetRect {x, y, width, height}
	 * @param {Object} rect {x, y, width, height}
	 * @return {Object} A new clipped rect. If rect size are negative, return undefined.
	 */


	function clipRectByRect(targetRect, rect) {
	  var x = mathMax(targetRect.x, rect.x);
	  var x2 = mathMin(targetRect.x + targetRect.width, rect.x + rect.width);
	  var y = mathMax(targetRect.y, rect.y);
	  var y2 = mathMin(targetRect.y + targetRect.height, rect.y + rect.height);

	  if (x2 >= x && y2 >= y) {
	    return {
	      x: x,
	      y: y,
	      width: x2 - x,
	      height: y2 - y
	    };
	  }
	}
	/**
	 * @param {string} iconStr Support 'image://' or 'path://' or direct svg path.
	 * @param {Object} [opt] Properties of `module:zrender/Element`, except `style`.
	 * @param {Object} [rect] {x, y, width, height}
	 * @return {module:zrender/Element} Icon path or image element.
	 */


	function createIcon(iconStr, opt, rect) {
	  opt = zrUtil.extend({
	    rectHover: true
	  }, opt);
	  var style = opt.style = {
	    strokeNoScale: true
	  };
	  rect = rect || {
	    x: -1,
	    y: -1,
	    width: 2,
	    height: 2
	  };

	  if (iconStr) {
	    return iconStr.indexOf('image://') === 0 ? (style.image = iconStr.slice(8), zrUtil.defaults(style, rect), new Image(opt)) : makePath(iconStr.replace('path://', ''), opt, rect, 'center');
	  }
	}

	exports.extendShape = extendShape;
	exports.extendPath = extendPath;
	exports.makePath = makePath;
	exports.makeImage = makeImage;
	exports.mergePath = mergePath;
	exports.resizePath = resizePath;
	exports.subPixelOptimizeLine = subPixelOptimizeLine;
	exports.subPixelOptimizeRect = subPixelOptimizeRect;
	exports.subPixelOptimize = subPixelOptimize;
	exports.setHoverStyle = setHoverStyle;
	exports.setLabelStyle = setLabelStyle;
	exports.setTextStyle = setTextStyle;
	exports.setText = setText;
	exports.getFont = getFont;
	exports.updateProps = updateProps;
	exports.initProps = initProps;
	exports.getTransform = getTransform;
	exports.applyTransform = applyTransform;
	exports.transformDirection = transformDirection;
	exports.groupTransition = groupTransition;
	exports.clipPointsByRect = clipPointsByRect;
	exports.clipRectByRect = clipRectByRect;
	exports.createIcon = createIcon;

/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	var Path = __webpack_require__(214);

	var PathProxy = __webpack_require__(215);

	var transformPath = __webpack_require__(225);

	// command chars
	var cc = ['m', 'M', 'l', 'L', 'v', 'V', 'h', 'H', 'z', 'Z', 'c', 'C', 'q', 'Q', 't', 'T', 's', 'S', 'a', 'A'];
	var mathSqrt = Math.sqrt;
	var mathSin = Math.sin;
	var mathCos = Math.cos;
	var PI = Math.PI;

	var vMag = function (v) {
	  return Math.sqrt(v[0] * v[0] + v[1] * v[1]);
	};

	var vRatio = function (u, v) {
	  return (u[0] * v[0] + u[1] * v[1]) / (vMag(u) * vMag(v));
	};

	var vAngle = function (u, v) {
	  return (u[0] * v[1] < u[1] * v[0] ? -1 : 1) * Math.acos(vRatio(u, v));
	};

	function processArc(x1, y1, x2, y2, fa, fs, rx, ry, psiDeg, cmd, path) {
	  var psi = psiDeg * (PI / 180.0);
	  var xp = mathCos(psi) * (x1 - x2) / 2.0 + mathSin(psi) * (y1 - y2) / 2.0;
	  var yp = -1 * mathSin(psi) * (x1 - x2) / 2.0 + mathCos(psi) * (y1 - y2) / 2.0;
	  var lambda = xp * xp / (rx * rx) + yp * yp / (ry * ry);

	  if (lambda > 1) {
	    rx *= mathSqrt(lambda);
	    ry *= mathSqrt(lambda);
	  }

	  var f = (fa === fs ? -1 : 1) * mathSqrt((rx * rx * (ry * ry) - rx * rx * (yp * yp) - ry * ry * (xp * xp)) / (rx * rx * (yp * yp) + ry * ry * (xp * xp))) || 0;
	  var cxp = f * rx * yp / ry;
	  var cyp = f * -ry * xp / rx;
	  var cx = (x1 + x2) / 2.0 + mathCos(psi) * cxp - mathSin(psi) * cyp;
	  var cy = (y1 + y2) / 2.0 + mathSin(psi) * cxp + mathCos(psi) * cyp;
	  var theta = vAngle([1, 0], [(xp - cxp) / rx, (yp - cyp) / ry]);
	  var u = [(xp - cxp) / rx, (yp - cyp) / ry];
	  var v = [(-1 * xp - cxp) / rx, (-1 * yp - cyp) / ry];
	  var dTheta = vAngle(u, v);

	  if (vRatio(u, v) <= -1) {
	    dTheta = PI;
	  }

	  if (vRatio(u, v) >= 1) {
	    dTheta = 0;
	  }

	  if (fs === 0 && dTheta > 0) {
	    dTheta = dTheta - 2 * PI;
	  }

	  if (fs === 1 && dTheta < 0) {
	    dTheta = dTheta + 2 * PI;
	  }

	  path.addData(cmd, cx, cy, rx, ry, theta, dTheta, psi, fs);
	}

	function createPathProxyFromString(data) {
	  if (!data) {
	    return [];
	  } // command string


	  var cs = data.replace(/-/g, ' -').replace(/  /g, ' ').replace(/ /g, ',').replace(/,,/g, ',');
	  var n; // create pipes so that we can split the data

	  for (n = 0; n < cc.length; n++) {
	    cs = cs.replace(new RegExp(cc[n], 'g'), '|' + cc[n]);
	  } // create array


	  var arr = cs.split('|'); // init context point

	  var cpx = 0;
	  var cpy = 0;
	  var path = new PathProxy();
	  var CMD = PathProxy.CMD;
	  var prevCmd;

	  for (n = 1; n < arr.length; n++) {
	    var str = arr[n];
	    var c = str.charAt(0);
	    var off = 0;
	    var p = str.slice(1).replace(/e,-/g, 'e-').split(',');
	    var cmd;

	    if (p.length > 0 && p[0] === '') {
	      p.shift();
	    }

	    for (var i = 0; i < p.length; i++) {
	      p[i] = parseFloat(p[i]);
	    }

	    while (off < p.length && !isNaN(p[off])) {
	      if (isNaN(p[0])) {
	        break;
	      }

	      var ctlPtx;
	      var ctlPty;
	      var rx;
	      var ry;
	      var psi;
	      var fa;
	      var fs;
	      var x1 = cpx;
	      var y1 = cpy; // convert l, H, h, V, and v to L

	      switch (c) {
	        case 'l':
	          cpx += p[off++];
	          cpy += p[off++];
	          cmd = CMD.L;
	          path.addData(cmd, cpx, cpy);
	          break;

	        case 'L':
	          cpx = p[off++];
	          cpy = p[off++];
	          cmd = CMD.L;
	          path.addData(cmd, cpx, cpy);
	          break;

	        case 'm':
	          cpx += p[off++];
	          cpy += p[off++];
	          cmd = CMD.M;
	          path.addData(cmd, cpx, cpy);
	          c = 'l';
	          break;

	        case 'M':
	          cpx = p[off++];
	          cpy = p[off++];
	          cmd = CMD.M;
	          path.addData(cmd, cpx, cpy);
	          c = 'L';
	          break;

	        case 'h':
	          cpx += p[off++];
	          cmd = CMD.L;
	          path.addData(cmd, cpx, cpy);
	          break;

	        case 'H':
	          cpx = p[off++];
	          cmd = CMD.L;
	          path.addData(cmd, cpx, cpy);
	          break;

	        case 'v':
	          cpy += p[off++];
	          cmd = CMD.L;
	          path.addData(cmd, cpx, cpy);
	          break;

	        case 'V':
	          cpy = p[off++];
	          cmd = CMD.L;
	          path.addData(cmd, cpx, cpy);
	          break;

	        case 'C':
	          cmd = CMD.C;
	          path.addData(cmd, p[off++], p[off++], p[off++], p[off++], p[off++], p[off++]);
	          cpx = p[off - 2];
	          cpy = p[off - 1];
	          break;

	        case 'c':
	          cmd = CMD.C;
	          path.addData(cmd, p[off++] + cpx, p[off++] + cpy, p[off++] + cpx, p[off++] + cpy, p[off++] + cpx, p[off++] + cpy);
	          cpx += p[off - 2];
	          cpy += p[off - 1];
	          break;

	        case 'S':
	          ctlPtx = cpx;
	          ctlPty = cpy;
	          var len = path.len();
	          var pathData = path.data;

	          if (prevCmd === CMD.C) {
	            ctlPtx += cpx - pathData[len - 4];
	            ctlPty += cpy - pathData[len - 3];
	          }

	          cmd = CMD.C;
	          x1 = p[off++];
	          y1 = p[off++];
	          cpx = p[off++];
	          cpy = p[off++];
	          path.addData(cmd, ctlPtx, ctlPty, x1, y1, cpx, cpy);
	          break;

	        case 's':
	          ctlPtx = cpx;
	          ctlPty = cpy;
	          var len = path.len();
	          var pathData = path.data;

	          if (prevCmd === CMD.C) {
	            ctlPtx += cpx - pathData[len - 4];
	            ctlPty += cpy - pathData[len - 3];
	          }

	          cmd = CMD.C;
	          x1 = cpx + p[off++];
	          y1 = cpy + p[off++];
	          cpx += p[off++];
	          cpy += p[off++];
	          path.addData(cmd, ctlPtx, ctlPty, x1, y1, cpx, cpy);
	          break;

	        case 'Q':
	          x1 = p[off++];
	          y1 = p[off++];
	          cpx = p[off++];
	          cpy = p[off++];
	          cmd = CMD.Q;
	          path.addData(cmd, x1, y1, cpx, cpy);
	          break;

	        case 'q':
	          x1 = p[off++] + cpx;
	          y1 = p[off++] + cpy;
	          cpx += p[off++];
	          cpy += p[off++];
	          cmd = CMD.Q;
	          path.addData(cmd, x1, y1, cpx, cpy);
	          break;

	        case 'T':
	          ctlPtx = cpx;
	          ctlPty = cpy;
	          var len = path.len();
	          var pathData = path.data;

	          if (prevCmd === CMD.Q) {
	            ctlPtx += cpx - pathData[len - 4];
	            ctlPty += cpy - pathData[len - 3];
	          }

	          cpx = p[off++];
	          cpy = p[off++];
	          cmd = CMD.Q;
	          path.addData(cmd, ctlPtx, ctlPty, cpx, cpy);
	          break;

	        case 't':
	          ctlPtx = cpx;
	          ctlPty = cpy;
	          var len = path.len();
	          var pathData = path.data;

	          if (prevCmd === CMD.Q) {
	            ctlPtx += cpx - pathData[len - 4];
	            ctlPty += cpy - pathData[len - 3];
	          }

	          cpx += p[off++];
	          cpy += p[off++];
	          cmd = CMD.Q;
	          path.addData(cmd, ctlPtx, ctlPty, cpx, cpy);
	          break;

	        case 'A':
	          rx = p[off++];
	          ry = p[off++];
	          psi = p[off++];
	          fa = p[off++];
	          fs = p[off++];
	          x1 = cpx, y1 = cpy;
	          cpx = p[off++];
	          cpy = p[off++];
	          cmd = CMD.A;
	          processArc(x1, y1, cpx, cpy, fa, fs, rx, ry, psi, cmd, path);
	          break;

	        case 'a':
	          rx = p[off++];
	          ry = p[off++];
	          psi = p[off++];
	          fa = p[off++];
	          fs = p[off++];
	          x1 = cpx, y1 = cpy;
	          cpx += p[off++];
	          cpy += p[off++];
	          cmd = CMD.A;
	          processArc(x1, y1, cpx, cpy, fa, fs, rx, ry, psi, cmd, path);
	          break;
	      }
	    }

	    if (c === 'z' || c === 'Z') {
	      cmd = CMD.Z;
	      path.addData(cmd);
	    }

	    prevCmd = cmd;
	  }

	  path.toStatic();
	  return path;
	} // TODO Optimize double memory cost problem


	function createPathOptions(str, opts) {
	  var pathProxy = createPathProxyFromString(str);
	  opts = opts || {};

	  opts.buildPath = function (path) {
	    if (path.setData) {
	      path.setData(pathProxy.data); // Svg and vml renderer don't have context

	      var ctx = path.getContext();

	      if (ctx) {
	        path.rebuildPath(ctx);
	      }
	    } else {
	      var ctx = path;
	      pathProxy.rebuildPath(ctx);
	    }
	  };

	  opts.applyTransform = function (m) {
	    transformPath(pathProxy, m);
	    this.dirty(true);
	  };

	  return opts;
	}
	/**
	 * Create a Path object from path string data
	 * http://www.w3.org/TR/SVG/paths.html#PathData
	 * @param  {Object} opts Other options
	 */


	function createFromString(str, opts) {
	  return new Path(createPathOptions(str, opts));
	}
	/**
	 * Create a Path class from path string data
	 * @param  {string} str
	 * @param  {Object} opts Other options
	 */


	function extendFromString(str, opts) {
	  return Path.extend(createPathOptions(str, opts));
	}
	/**
	 * Merge multiple paths
	 */
	// TODO Apply transform
	// TODO stroke dash
	// TODO Optimize double memory cost problem


	function mergePath(pathEls, opts) {
	  var pathList = [];
	  var len = pathEls.length;

	  for (var i = 0; i < len; i++) {
	    var pathEl = pathEls[i];

	    if (!pathEl.path) {
	      pathEl.createPathProxy();
	    }

	    if (pathEl.__dirtyPath) {
	      pathEl.buildPath(pathEl.path, pathEl.shape, true);
	    }

	    pathList.push(pathEl.path);
	  }

	  var pathBundle = new Path(opts); // Need path proxy.

	  pathBundle.createPathProxy();

	  pathBundle.buildPath = function (path) {
	    path.appendPath(pathList); // Svg and vml renderer don't have context

	    var ctx = path.getContext();

	    if (ctx) {
	      path.rebuildPath(ctx);
	    }
	  };

	  return pathBundle;
	}

	exports.createFromString = createFromString;
	exports.extendFromString = extendFromString;
	exports.mergePath = mergePath;

/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	var Displayable = __webpack_require__(192);

	var zrUtil = __webpack_require__(166);

	var PathProxy = __webpack_require__(215);

	var pathContain = __webpack_require__(218);

	var Pattern = __webpack_require__(189);

	var getCanvasPattern = Pattern.prototype.getCanvasPattern;
	var abs = Math.abs;
	var pathProxyForDraw = new PathProxy(true);
	/**
	 * @alias module:zrender/graphic/Path
	 * @extends module:zrender/graphic/Displayable
	 * @constructor
	 * @param {Object} opts
	 */

	function Path(opts) {
	  Displayable.call(this, opts);
	  /**
	   * @type {module:zrender/core/PathProxy}
	   * @readOnly
	   */

	  this.path = null;
	}

	Path.prototype = {
	  constructor: Path,
	  type: 'path',
	  __dirtyPath: true,
	  strokeContainThreshold: 5,
	  brush: function (ctx, prevEl) {
	    var style = this.style;
	    var path = this.path || pathProxyForDraw;
	    var hasStroke = style.hasStroke();
	    var hasFill = style.hasFill();
	    var fill = style.fill;
	    var stroke = style.stroke;
	    var hasFillGradient = hasFill && !!fill.colorStops;
	    var hasStrokeGradient = hasStroke && !!stroke.colorStops;
	    var hasFillPattern = hasFill && !!fill.image;
	    var hasStrokePattern = hasStroke && !!stroke.image;
	    style.bind(ctx, this, prevEl);
	    this.setTransform(ctx);

	    if (this.__dirty) {
	      var rect; // Update gradient because bounding rect may changed

	      if (hasFillGradient) {
	        rect = rect || this.getBoundingRect();
	        this._fillGradient = style.getGradient(ctx, fill, rect);
	      }

	      if (hasStrokeGradient) {
	        rect = rect || this.getBoundingRect();
	        this._strokeGradient = style.getGradient(ctx, stroke, rect);
	      }
	    } // Use the gradient or pattern


	    if (hasFillGradient) {
	      // PENDING If may have affect the state
	      ctx.fillStyle = this._fillGradient;
	    } else if (hasFillPattern) {
	      ctx.fillStyle = getCanvasPattern.call(fill, ctx);
	    }

	    if (hasStrokeGradient) {
	      ctx.strokeStyle = this._strokeGradient;
	    } else if (hasStrokePattern) {
	      ctx.strokeStyle = getCanvasPattern.call(stroke, ctx);
	    }

	    var lineDash = style.lineDash;
	    var lineDashOffset = style.lineDashOffset;
	    var ctxLineDash = !!ctx.setLineDash; // Update path sx, sy

	    var scale = this.getGlobalScale();
	    path.setScale(scale[0], scale[1]); // Proxy context
	    // Rebuild path in following 2 cases
	    // 1. Path is dirty
	    // 2. Path needs javascript implemented lineDash stroking.
	    //    In this case, lineDash information will not be saved in PathProxy

	    if (this.__dirtyPath || lineDash && !ctxLineDash && hasStroke) {
	      path.beginPath(ctx); // Setting line dash before build path

	      if (lineDash && !ctxLineDash) {
	        path.setLineDash(lineDash);
	        path.setLineDashOffset(lineDashOffset);
	      }

	      this.buildPath(path, this.shape, false); // Clear path dirty flag

	      if (this.path) {
	        this.__dirtyPath = false;
	      }
	    } else {
	      // Replay path building
	      ctx.beginPath();
	      this.path.rebuildPath(ctx);
	    }

	    hasFill && path.fill(ctx);

	    if (lineDash && ctxLineDash) {
	      ctx.setLineDash(lineDash);
	      ctx.lineDashOffset = lineDashOffset;
	    }

	    hasStroke && path.stroke(ctx);

	    if (lineDash && ctxLineDash) {
	      // PENDING
	      // Remove lineDash
	      ctx.setLineDash([]);
	    }

	    this.restoreTransform(ctx); // Draw rect text

	    if (style.text != null) {
	      this.drawRectText(ctx, this.getBoundingRect());
	    }
	  },
	  // When bundling path, some shape may decide if use moveTo to begin a new subpath or closePath
	  // Like in circle
	  buildPath: function (ctx, shapeCfg, inBundle) {},
	  createPathProxy: function () {
	    this.path = new PathProxy();
	  },
	  getBoundingRect: function () {
	    var rect = this._rect;
	    var style = this.style;
	    var needsUpdateRect = !rect;

	    if (needsUpdateRect) {
	      var path = this.path;

	      if (!path) {
	        // Create path on demand.
	        path = this.path = new PathProxy();
	      }

	      if (this.__dirtyPath) {
	        path.beginPath();
	        this.buildPath(path, this.shape, false);
	      }

	      rect = path.getBoundingRect();
	    }

	    this._rect = rect;

	    if (style.hasStroke()) {
	      // Needs update rect with stroke lineWidth when
	      // 1. Element changes scale or lineWidth
	      // 2. Shape is changed
	      var rectWithStroke = this._rectWithStroke || (this._rectWithStroke = rect.clone());

	      if (this.__dirty || needsUpdateRect) {
	        rectWithStroke.copy(rect); // FIXME Must after updateTransform

	        var w = style.lineWidth; // PENDING, Min line width is needed when line is horizontal or vertical

	        var lineScale = style.strokeNoScale ? this.getLineScale() : 1; // Only add extra hover lineWidth when there are no fill

	        if (!style.hasFill()) {
	          w = Math.max(w, this.strokeContainThreshold || 4);
	        } // Consider line width
	        // Line scale can't be 0;


	        if (lineScale > 1e-10) {
	          rectWithStroke.width += w / lineScale;
	          rectWithStroke.height += w / lineScale;
	          rectWithStroke.x -= w / lineScale / 2;
	          rectWithStroke.y -= w / lineScale / 2;
	        }
	      } // Return rect with stroke


	      return rectWithStroke;
	    }

	    return rect;
	  },
	  contain: function (x, y) {
	    var localPos = this.transformCoordToLocal(x, y);
	    var rect = this.getBoundingRect();
	    var style = this.style;
	    x = localPos[0];
	    y = localPos[1];

	    if (rect.contain(x, y)) {
	      var pathData = this.path.data;

	      if (style.hasStroke()) {
	        var lineWidth = style.lineWidth;
	        var lineScale = style.strokeNoScale ? this.getLineScale() : 1; // Line scale can't be 0;

	        if (lineScale > 1e-10) {
	          // Only add extra hover lineWidth when there are no fill
	          if (!style.hasFill()) {
	            lineWidth = Math.max(lineWidth, this.strokeContainThreshold);
	          }

	          if (pathContain.containStroke(pathData, lineWidth / lineScale, x, y)) {
	            return true;
	          }
	        }
	      }

	      if (style.hasFill()) {
	        return pathContain.contain(pathData, x, y);
	      }
	    }

	    return false;
	  },

	  /**
	   * @param  {boolean} dirtyPath
	   */
	  dirty: function (dirtyPath) {
	    if (dirtyPath == null) {
	      dirtyPath = true;
	    } // Only mark dirty, not mark clean


	    if (dirtyPath) {
	      this.__dirtyPath = dirtyPath;
	      this._rect = null;
	    }

	    this.__dirty = true;
	    this.__zr && this.__zr.refresh(); // Used as a clipping path

	    if (this.__clipTarget) {
	      this.__clipTarget.dirty();
	    }
	  },

	  /**
	   * Alias for animate('shape')
	   * @param {boolean} loop
	   */
	  animateShape: function (loop) {
	    return this.animate('shape', loop);
	  },
	  // Overwrite attrKV
	  attrKV: function (key, value) {
	    // FIXME
	    if (key === 'shape') {
	      this.setShape(value);
	      this.__dirtyPath = true;
	      this._rect = null;
	    } else {
	      Displayable.prototype.attrKV.call(this, key, value);
	    }
	  },

	  /**
	   * @param {Object|string} key
	   * @param {*} value
	   */
	  setShape: function (key, value) {
	    var shape = this.shape; // Path from string may not have shape

	    if (shape) {
	      if (zrUtil.isObject(key)) {
	        for (var name in key) {
	          if (key.hasOwnProperty(name)) {
	            shape[name] = key[name];
	          }
	        }
	      } else {
	        shape[key] = value;
	      }

	      this.dirty(true);
	    }

	    return this;
	  },
	  getLineScale: function () {
	    var m = this.transform; // Get the line scale.
	    // Determinant of `m` means how much the area is enlarged by the
	    // transformation. So its square root can be used as a scale factor
	    // for width.

	    return m && abs(m[0] - 1) > 1e-10 && abs(m[3] - 1) > 1e-10 ? Math.sqrt(abs(m[0] * m[3] - m[2] * m[1])) : 1;
	  }
	};
	/**
	 * 扩展一个 Path element, 比如星形，圆等。
	 * Extend a path element
	 * @param {Object} props
	 * @param {string} props.type Path type
	 * @param {Function} props.init Initialize
	 * @param {Function} props.buildPath Overwrite buildPath method
	 * @param {Object} [props.style] Extended default style config
	 * @param {Object} [props.shape] Extended default shape config
	 */

	Path.extend = function (defaults) {
	  var Sub = function (opts) {
	    Path.call(this, opts);

	    if (defaults.style) {
	      // Extend default style
	      this.style.extendFrom(defaults.style, false);
	    } // Extend default shape


	    var defaultShape = defaults.shape;

	    if (defaultShape) {
	      this.shape = this.shape || {};
	      var thisShape = this.shape;

	      for (var name in defaultShape) {
	        if (!thisShape.hasOwnProperty(name) && defaultShape.hasOwnProperty(name)) {
	          thisShape[name] = defaultShape[name];
	        }
	      }
	    }

	    defaults.init && defaults.init.call(this, opts);
	  };

	  zrUtil.inherits(Sub, Path); // FIXME 不能 extend position, rotation 等引用对象

	  for (var name in defaults) {
	    // Extending prototype values and methods
	    if (name !== 'style' && name !== 'shape') {
	      Sub.prototype[name] = defaults[name];
	    }
	  }

	  return Sub;
	};

	zrUtil.inherits(Path, Displayable);
	var _default = Path;
	module.exports = _default;

/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	var curve = __webpack_require__(216);

	var vec2 = __webpack_require__(168);

	var bbox = __webpack_require__(217);

	var BoundingRect = __webpack_require__(184);

	var _config = __webpack_require__(183);

	var dpr = _config.devicePixelRatio;

	/**
	 * Path 代理，可以在`buildPath`中用于替代`ctx`, 会保存每个path操作的命令到pathCommands属性中
	 * 可以用于 isInsidePath 判断以及获取boundingRect
	 *
	 * @module zrender/core/PathProxy
	 * @author Yi Shen (http://www.github.com/pissang)
	 */
	// TODO getTotalLength, getPointAtLength
	var CMD = {
	  M: 1,
	  L: 2,
	  C: 3,
	  Q: 4,
	  A: 5,
	  Z: 6,
	  // Rect
	  R: 7
	}; // var CMD_MEM_SIZE = {
	//     M: 3,
	//     L: 3,
	//     C: 7,
	//     Q: 5,
	//     A: 9,
	//     R: 5,
	//     Z: 1
	// };

	var min = [];
	var max = [];
	var min2 = [];
	var max2 = [];
	var mathMin = Math.min;
	var mathMax = Math.max;
	var mathCos = Math.cos;
	var mathSin = Math.sin;
	var mathSqrt = Math.sqrt;
	var mathAbs = Math.abs;
	var hasTypedArray = typeof Float32Array != 'undefined';
	/**
	 * @alias module:zrender/core/PathProxy
	 * @constructor
	 */

	var PathProxy = function (notSaveData) {
	  this._saveData = !(notSaveData || false);

	  if (this._saveData) {
	    /**
	     * Path data. Stored as flat array
	     * @type {Array.<Object>}
	     */
	    this.data = [];
	  }

	  this._ctx = null;
	};
	/**
	 * 快速计算Path包围盒（并不是最小包围盒）
	 * @return {Object}
	 */


	PathProxy.prototype = {
	  constructor: PathProxy,
	  _xi: 0,
	  _yi: 0,
	  _x0: 0,
	  _y0: 0,
	  // Unit x, Unit y. Provide for avoiding drawing that too short line segment
	  _ux: 0,
	  _uy: 0,
	  _len: 0,
	  _lineDash: null,
	  _dashOffset: 0,
	  _dashIdx: 0,
	  _dashSum: 0,

	  /**
	   * @readOnly
	   */
	  setScale: function (sx, sy) {
	    this._ux = mathAbs(1 / dpr / sx) || 0;
	    this._uy = mathAbs(1 / dpr / sy) || 0;
	  },
	  getContext: function () {
	    return this._ctx;
	  },

	  /**
	   * @param  {CanvasRenderingContext2D} ctx
	   * @return {module:zrender/core/PathProxy}
	   */
	  beginPath: function (ctx) {
	    this._ctx = ctx;
	    ctx && ctx.beginPath();
	    ctx && (this.dpr = ctx.dpr); // Reset

	    if (this._saveData) {
	      this._len = 0;
	    }

	    if (this._lineDash) {
	      this._lineDash = null;
	      this._dashOffset = 0;
	    }

	    return this;
	  },

	  /**
	   * @param  {number} x
	   * @param  {number} y
	   * @return {module:zrender/core/PathProxy}
	   */
	  moveTo: function (x, y) {
	    this.addData(CMD.M, x, y);
	    this._ctx && this._ctx.moveTo(x, y); // x0, y0, xi, yi 是记录在 _dashedXXXXTo 方法中使用
	    // xi, yi 记录当前点, x0, y0 在 closePath 的时候回到起始点。
	    // 有可能在 beginPath 之后直接调用 lineTo，这时候 x0, y0 需要
	    // 在 lineTo 方法中记录，这里先不考虑这种情况，dashed line 也只在 IE10- 中不支持

	    this._x0 = x;
	    this._y0 = y;
	    this._xi = x;
	    this._yi = y;
	    return this;
	  },

	  /**
	   * @param  {number} x
	   * @param  {number} y
	   * @return {module:zrender/core/PathProxy}
	   */
	  lineTo: function (x, y) {
	    var exceedUnit = mathAbs(x - this._xi) > this._ux || mathAbs(y - this._yi) > this._uy // Force draw the first segment
	    || this._len < 5;
	    this.addData(CMD.L, x, y);

	    if (this._ctx && exceedUnit) {
	      this._needsDash() ? this._dashedLineTo(x, y) : this._ctx.lineTo(x, y);
	    }

	    if (exceedUnit) {
	      this._xi = x;
	      this._yi = y;
	    }

	    return this;
	  },

	  /**
	   * @param  {number} x1
	   * @param  {number} y1
	   * @param  {number} x2
	   * @param  {number} y2
	   * @param  {number} x3
	   * @param  {number} y3
	   * @return {module:zrender/core/PathProxy}
	   */
	  bezierCurveTo: function (x1, y1, x2, y2, x3, y3) {
	    this.addData(CMD.C, x1, y1, x2, y2, x3, y3);

	    if (this._ctx) {
	      this._needsDash() ? this._dashedBezierTo(x1, y1, x2, y2, x3, y3) : this._ctx.bezierCurveTo(x1, y1, x2, y2, x3, y3);
	    }

	    this._xi = x3;
	    this._yi = y3;
	    return this;
	  },

	  /**
	   * @param  {number} x1
	   * @param  {number} y1
	   * @param  {number} x2
	   * @param  {number} y2
	   * @return {module:zrender/core/PathProxy}
	   */
	  quadraticCurveTo: function (x1, y1, x2, y2) {
	    this.addData(CMD.Q, x1, y1, x2, y2);

	    if (this._ctx) {
	      this._needsDash() ? this._dashedQuadraticTo(x1, y1, x2, y2) : this._ctx.quadraticCurveTo(x1, y1, x2, y2);
	    }

	    this._xi = x2;
	    this._yi = y2;
	    return this;
	  },

	  /**
	   * @param  {number} cx
	   * @param  {number} cy
	   * @param  {number} r
	   * @param  {number} startAngle
	   * @param  {number} endAngle
	   * @param  {boolean} anticlockwise
	   * @return {module:zrender/core/PathProxy}
	   */
	  arc: function (cx, cy, r, startAngle, endAngle, anticlockwise) {
	    this.addData(CMD.A, cx, cy, r, r, startAngle, endAngle - startAngle, 0, anticlockwise ? 0 : 1);
	    this._ctx && this._ctx.arc(cx, cy, r, startAngle, endAngle, anticlockwise);
	    this._xi = mathCos(endAngle) * r + cx;
	    this._yi = mathSin(endAngle) * r + cx;
	    return this;
	  },
	  // TODO
	  arcTo: function (x1, y1, x2, y2, radius) {
	    if (this._ctx) {
	      this._ctx.arcTo(x1, y1, x2, y2, radius);
	    }

	    return this;
	  },
	  // TODO
	  rect: function (x, y, w, h) {
	    this._ctx && this._ctx.rect(x, y, w, h);
	    this.addData(CMD.R, x, y, w, h);
	    return this;
	  },

	  /**
	   * @return {module:zrender/core/PathProxy}
	   */
	  closePath: function () {
	    this.addData(CMD.Z);
	    var ctx = this._ctx;
	    var x0 = this._x0;
	    var y0 = this._y0;

	    if (ctx) {
	      this._needsDash() && this._dashedLineTo(x0, y0);
	      ctx.closePath();
	    }

	    this._xi = x0;
	    this._yi = y0;
	    return this;
	  },

	  /**
	   * Context 从外部传入，因为有可能是 rebuildPath 完之后再 fill。
	   * stroke 同样
	   * @param {CanvasRenderingContext2D} ctx
	   * @return {module:zrender/core/PathProxy}
	   */
	  fill: function (ctx) {
	    ctx && ctx.fill();
	    this.toStatic();
	  },

	  /**
	   * @param {CanvasRenderingContext2D} ctx
	   * @return {module:zrender/core/PathProxy}
	   */
	  stroke: function (ctx) {
	    ctx && ctx.stroke();
	    this.toStatic();
	  },

	  /**
	   * 必须在其它绘制命令前调用
	   * Must be invoked before all other path drawing methods
	   * @return {module:zrender/core/PathProxy}
	   */
	  setLineDash: function (lineDash) {
	    if (lineDash instanceof Array) {
	      this._lineDash = lineDash;
	      this._dashIdx = 0;
	      var lineDashSum = 0;

	      for (var i = 0; i < lineDash.length; i++) {
	        lineDashSum += lineDash[i];
	      }

	      this._dashSum = lineDashSum;
	    }

	    return this;
	  },

	  /**
	   * 必须在其它绘制命令前调用
	   * Must be invoked before all other path drawing methods
	   * @return {module:zrender/core/PathProxy}
	   */
	  setLineDashOffset: function (offset) {
	    this._dashOffset = offset;
	    return this;
	  },

	  /**
	   *
	   * @return {boolean}
	   */
	  len: function () {
	    return this._len;
	  },

	  /**
	   * 直接设置 Path 数据
	   */
	  setData: function (data) {
	    var len = data.length;

	    if (!(this.data && this.data.length == len) && hasTypedArray) {
	      this.data = new Float32Array(len);
	    }

	    for (var i = 0; i < len; i++) {
	      this.data[i] = data[i];
	    }

	    this._len = len;
	  },

	  /**
	   * 添加子路径
	   * @param {module:zrender/core/PathProxy|Array.<module:zrender/core/PathProxy>} path
	   */
	  appendPath: function (path) {
	    if (!(path instanceof Array)) {
	      path = [path];
	    }

	    var len = path.length;
	    var appendSize = 0;
	    var offset = this._len;

	    for (var i = 0; i < len; i++) {
	      appendSize += path[i].len();
	    }

	    if (hasTypedArray && this.data instanceof Float32Array) {
	      this.data = new Float32Array(offset + appendSize);
	    }

	    for (var i = 0; i < len; i++) {
	      var appendPathData = path[i].data;

	      for (var k = 0; k < appendPathData.length; k++) {
	        this.data[offset++] = appendPathData[k];
	      }
	    }

	    this._len = offset;
	  },

	  /**
	   * 填充 Path 数据。
	   * 尽量复用而不申明新的数组。大部分图形重绘的指令数据长度都是不变的。
	   */
	  addData: function (cmd) {
	    if (!this._saveData) {
	      return;
	    }

	    var data = this.data;

	    if (this._len + arguments.length > data.length) {
	      // 因为之前的数组已经转换成静态的 Float32Array
	      // 所以不够用时需要扩展一个新的动态数组
	      this._expandData();

	      data = this.data;
	    }

	    for (var i = 0; i < arguments.length; i++) {
	      data[this._len++] = arguments[i];
	    }

	    this._prevCmd = cmd;
	  },
	  _expandData: function () {
	    // Only if data is Float32Array
	    if (!(this.data instanceof Array)) {
	      var newData = [];

	      for (var i = 0; i < this._len; i++) {
	        newData[i] = this.data[i];
	      }

	      this.data = newData;
	    }
	  },

	  /**
	   * If needs js implemented dashed line
	   * @return {boolean}
	   * @private
	   */
	  _needsDash: function () {
	    return this._lineDash;
	  },
	  _dashedLineTo: function (x1, y1) {
	    var dashSum = this._dashSum;
	    var offset = this._dashOffset;
	    var lineDash = this._lineDash;
	    var ctx = this._ctx;
	    var x0 = this._xi;
	    var y0 = this._yi;
	    var dx = x1 - x0;
	    var dy = y1 - y0;
	    var dist = mathSqrt(dx * dx + dy * dy);
	    var x = x0;
	    var y = y0;
	    var dash;
	    var nDash = lineDash.length;
	    var idx;
	    dx /= dist;
	    dy /= dist;

	    if (offset < 0) {
	      // Convert to positive offset
	      offset = dashSum + offset;
	    }

	    offset %= dashSum;
	    x -= offset * dx;
	    y -= offset * dy;

	    while (dx > 0 && x <= x1 || dx < 0 && x >= x1 || dx == 0 && (dy > 0 && y <= y1 || dy < 0 && y >= y1)) {
	      idx = this._dashIdx;
	      dash = lineDash[idx];
	      x += dx * dash;
	      y += dy * dash;
	      this._dashIdx = (idx + 1) % nDash; // Skip positive offset

	      if (dx > 0 && x < x0 || dx < 0 && x > x0 || dy > 0 && y < y0 || dy < 0 && y > y0) {
	        continue;
	      }

	      ctx[idx % 2 ? 'moveTo' : 'lineTo'](dx >= 0 ? mathMin(x, x1) : mathMax(x, x1), dy >= 0 ? mathMin(y, y1) : mathMax(y, y1));
	    } // Offset for next lineTo


	    dx = x - x1;
	    dy = y - y1;
	    this._dashOffset = -mathSqrt(dx * dx + dy * dy);
	  },
	  // Not accurate dashed line to
	  _dashedBezierTo: function (x1, y1, x2, y2, x3, y3) {
	    var dashSum = this._dashSum;
	    var offset = this._dashOffset;
	    var lineDash = this._lineDash;
	    var ctx = this._ctx;
	    var x0 = this._xi;
	    var y0 = this._yi;
	    var t;
	    var dx;
	    var dy;
	    var cubicAt = curve.cubicAt;
	    var bezierLen = 0;
	    var idx = this._dashIdx;
	    var nDash = lineDash.length;
	    var x;
	    var y;
	    var tmpLen = 0;

	    if (offset < 0) {
	      // Convert to positive offset
	      offset = dashSum + offset;
	    }

	    offset %= dashSum; // Bezier approx length

	    for (t = 0; t < 1; t += 0.1) {
	      dx = cubicAt(x0, x1, x2, x3, t + 0.1) - cubicAt(x0, x1, x2, x3, t);
	      dy = cubicAt(y0, y1, y2, y3, t + 0.1) - cubicAt(y0, y1, y2, y3, t);
	      bezierLen += mathSqrt(dx * dx + dy * dy);
	    } // Find idx after add offset


	    for (; idx < nDash; idx++) {
	      tmpLen += lineDash[idx];

	      if (tmpLen > offset) {
	        break;
	      }
	    }

	    t = (tmpLen - offset) / bezierLen;

	    while (t <= 1) {
	      x = cubicAt(x0, x1, x2, x3, t);
	      y = cubicAt(y0, y1, y2, y3, t); // Use line to approximate dashed bezier
	      // Bad result if dash is long

	      idx % 2 ? ctx.moveTo(x, y) : ctx.lineTo(x, y);
	      t += lineDash[idx] / bezierLen;
	      idx = (idx + 1) % nDash;
	    } // Finish the last segment and calculate the new offset


	    idx % 2 !== 0 && ctx.lineTo(x3, y3);
	    dx = x3 - x;
	    dy = y3 - y;
	    this._dashOffset = -mathSqrt(dx * dx + dy * dy);
	  },
	  _dashedQuadraticTo: function (x1, y1, x2, y2) {
	    // Convert quadratic to cubic using degree elevation
	    var x3 = x2;
	    var y3 = y2;
	    x2 = (x2 + 2 * x1) / 3;
	    y2 = (y2 + 2 * y1) / 3;
	    x1 = (this._xi + 2 * x1) / 3;
	    y1 = (this._yi + 2 * y1) / 3;

	    this._dashedBezierTo(x1, y1, x2, y2, x3, y3);
	  },

	  /**
	   * 转成静态的 Float32Array 减少堆内存占用
	   * Convert dynamic array to static Float32Array
	   */
	  toStatic: function () {
	    var data = this.data;

	    if (data instanceof Array) {
	      data.length = this._len;

	      if (hasTypedArray) {
	        this.data = new Float32Array(data);
	      }
	    }
	  },

	  /**
	   * @return {module:zrender/core/BoundingRect}
	   */
	  getBoundingRect: function () {
	    min[0] = min[1] = min2[0] = min2[1] = Number.MAX_VALUE;
	    max[0] = max[1] = max2[0] = max2[1] = -Number.MAX_VALUE;
	    var data = this.data;
	    var xi = 0;
	    var yi = 0;
	    var x0 = 0;
	    var y0 = 0;

	    for (var i = 0; i < data.length;) {
	      var cmd = data[i++];

	      if (i == 1) {
	        // 如果第一个命令是 L, C, Q
	        // 则 previous point 同绘制命令的第一个 point
	        //
	        // 第一个命令为 Arc 的情况下会在后面特殊处理
	        xi = data[i];
	        yi = data[i + 1];
	        x0 = xi;
	        y0 = yi;
	      }

	      switch (cmd) {
	        case CMD.M:
	          // moveTo 命令重新创建一个新的 subpath, 并且更新新的起点
	          // 在 closePath 的时候使用
	          x0 = data[i++];
	          y0 = data[i++];
	          xi = x0;
	          yi = y0;
	          min2[0] = x0;
	          min2[1] = y0;
	          max2[0] = x0;
	          max2[1] = y0;
	          break;

	        case CMD.L:
	          bbox.fromLine(xi, yi, data[i], data[i + 1], min2, max2);
	          xi = data[i++];
	          yi = data[i++];
	          break;

	        case CMD.C:
	          bbox.fromCubic(xi, yi, data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1], min2, max2);
	          xi = data[i++];
	          yi = data[i++];
	          break;

	        case CMD.Q:
	          bbox.fromQuadratic(xi, yi, data[i++], data[i++], data[i], data[i + 1], min2, max2);
	          xi = data[i++];
	          yi = data[i++];
	          break;

	        case CMD.A:
	          // TODO Arc 判断的开销比较大
	          var cx = data[i++];
	          var cy = data[i++];
	          var rx = data[i++];
	          var ry = data[i++];
	          var startAngle = data[i++];
	          var endAngle = data[i++] + startAngle; // TODO Arc 旋转

	          var psi = data[i++];
	          var anticlockwise = 1 - data[i++];

	          if (i == 1) {
	            // 直接使用 arc 命令
	            // 第一个命令起点还未定义
	            x0 = mathCos(startAngle) * rx + cx;
	            y0 = mathSin(startAngle) * ry + cy;
	          }

	          bbox.fromArc(cx, cy, rx, ry, startAngle, endAngle, anticlockwise, min2, max2);
	          xi = mathCos(endAngle) * rx + cx;
	          yi = mathSin(endAngle) * ry + cy;
	          break;

	        case CMD.R:
	          x0 = xi = data[i++];
	          y0 = yi = data[i++];
	          var width = data[i++];
	          var height = data[i++]; // Use fromLine

	          bbox.fromLine(x0, y0, x0 + width, y0 + height, min2, max2);
	          break;

	        case CMD.Z:
	          xi = x0;
	          yi = y0;
	          break;
	      } // Union


	      vec2.min(min, min, min2);
	      vec2.max(max, max, max2);
	    } // No data


	    if (i === 0) {
	      min[0] = min[1] = max[0] = max[1] = 0;
	    }

	    return new BoundingRect(min[0], min[1], max[0] - min[0], max[1] - min[1]);
	  },

	  /**
	   * Rebuild path from current data
	   * Rebuild path will not consider javascript implemented line dash.
	   * @param {CanvasRenderingContext2D} ctx
	   */
	  rebuildPath: function (ctx) {
	    var d = this.data;
	    var x0, y0;
	    var xi, yi;
	    var x, y;
	    var ux = this._ux;
	    var uy = this._uy;
	    var len = this._len;

	    for (var i = 0; i < len;) {
	      var cmd = d[i++];

	      if (i == 1) {
	        // 如果第一个命令是 L, C, Q
	        // 则 previous point 同绘制命令的第一个 point
	        //
	        // 第一个命令为 Arc 的情况下会在后面特殊处理
	        xi = d[i];
	        yi = d[i + 1];
	        x0 = xi;
	        y0 = yi;
	      }

	      switch (cmd) {
	        case CMD.M:
	          x0 = xi = d[i++];
	          y0 = yi = d[i++];
	          ctx.moveTo(xi, yi);
	          break;

	        case CMD.L:
	          x = d[i++];
	          y = d[i++]; // Not draw too small seg between

	          if (mathAbs(x - xi) > ux || mathAbs(y - yi) > uy || i === len - 1) {
	            ctx.lineTo(x, y);
	            xi = x;
	            yi = y;
	          }

	          break;

	        case CMD.C:
	          ctx.bezierCurveTo(d[i++], d[i++], d[i++], d[i++], d[i++], d[i++]);
	          xi = d[i - 2];
	          yi = d[i - 1];
	          break;

	        case CMD.Q:
	          ctx.quadraticCurveTo(d[i++], d[i++], d[i++], d[i++]);
	          xi = d[i - 2];
	          yi = d[i - 1];
	          break;

	        case CMD.A:
	          var cx = d[i++];
	          var cy = d[i++];
	          var rx = d[i++];
	          var ry = d[i++];
	          var theta = d[i++];
	          var dTheta = d[i++];
	          var psi = d[i++];
	          var fs = d[i++];
	          var r = rx > ry ? rx : ry;
	          var scaleX = rx > ry ? 1 : rx / ry;
	          var scaleY = rx > ry ? ry / rx : 1;
	          var isEllipse = Math.abs(rx - ry) > 1e-3;
	          var endAngle = theta + dTheta;

	          if (isEllipse) {
	            ctx.translate(cx, cy);
	            ctx.rotate(psi);
	            ctx.scale(scaleX, scaleY);
	            ctx.arc(0, 0, r, theta, endAngle, 1 - fs);
	            ctx.scale(1 / scaleX, 1 / scaleY);
	            ctx.rotate(-psi);
	            ctx.translate(-cx, -cy);
	          } else {
	            ctx.arc(cx, cy, r, theta, endAngle, 1 - fs);
	          }

	          if (i == 1) {
	            // 直接使用 arc 命令
	            // 第一个命令起点还未定义
	            x0 = mathCos(theta) * rx + cx;
	            y0 = mathSin(theta) * ry + cy;
	          }

	          xi = mathCos(endAngle) * rx + cx;
	          yi = mathSin(endAngle) * ry + cy;
	          break;

	        case CMD.R:
	          x0 = xi = d[i];
	          y0 = yi = d[i + 1];
	          ctx.rect(d[i++], d[i++], d[i++], d[i++]);
	          break;

	        case CMD.Z:
	          ctx.closePath();
	          xi = x0;
	          yi = y0;
	      }
	    }
	  }
	};
	PathProxy.CMD = CMD;
	var _default = PathProxy;
	module.exports = _default;

/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	var _vector = __webpack_require__(168);

	var v2Create = _vector.create;
	var v2DistSquare = _vector.distSquare;

	/**
	 * 曲线辅助模块
	 * @module zrender/core/curve
	 * @author pissang(https://www.github.com/pissang)
	 */
	var mathPow = Math.pow;
	var mathSqrt = Math.sqrt;
	var EPSILON = 1e-8;
	var EPSILON_NUMERIC = 1e-4;
	var THREE_SQRT = mathSqrt(3);
	var ONE_THIRD = 1 / 3; // 临时变量

	var _v0 = v2Create();

	var _v1 = v2Create();

	var _v2 = v2Create();

	function isAroundZero(val) {
	  return val > -EPSILON && val < EPSILON;
	}

	function isNotAroundZero(val) {
	  return val > EPSILON || val < -EPSILON;
	}
	/**
	 * 计算三次贝塞尔值
	 * @memberOf module:zrender/core/curve
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @param  {number} p3
	 * @param  {number} t
	 * @return {number}
	 */


	function cubicAt(p0, p1, p2, p3, t) {
	  var onet = 1 - t;
	  return onet * onet * (onet * p0 + 3 * t * p1) + t * t * (t * p3 + 3 * onet * p2);
	}
	/**
	 * 计算三次贝塞尔导数值
	 * @memberOf module:zrender/core/curve
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @param  {number} p3
	 * @param  {number} t
	 * @return {number}
	 */


	function cubicDerivativeAt(p0, p1, p2, p3, t) {
	  var onet = 1 - t;
	  return 3 * (((p1 - p0) * onet + 2 * (p2 - p1) * t) * onet + (p3 - p2) * t * t);
	}
	/**
	 * 计算三次贝塞尔方程根，使用盛金公式
	 * @memberOf module:zrender/core/curve
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @param  {number} p3
	 * @param  {number} val
	 * @param  {Array.<number>} roots
	 * @return {number} 有效根数目
	 */


	function cubicRootAt(p0, p1, p2, p3, val, roots) {
	  // Evaluate roots of cubic functions
	  var a = p3 + 3 * (p1 - p2) - p0;
	  var b = 3 * (p2 - p1 * 2 + p0);
	  var c = 3 * (p1 - p0);
	  var d = p0 - val;
	  var A = b * b - 3 * a * c;
	  var B = b * c - 9 * a * d;
	  var C = c * c - 3 * b * d;
	  var n = 0;

	  if (isAroundZero(A) && isAroundZero(B)) {
	    if (isAroundZero(b)) {
	      roots[0] = 0;
	    } else {
	      var t1 = -c / b; //t1, t2, t3, b is not zero

	      if (t1 >= 0 && t1 <= 1) {
	        roots[n++] = t1;
	      }
	    }
	  } else {
	    var disc = B * B - 4 * A * C;

	    if (isAroundZero(disc)) {
	      var K = B / A;
	      var t1 = -b / a + K; // t1, a is not zero

	      var t2 = -K / 2; // t2, t3

	      if (t1 >= 0 && t1 <= 1) {
	        roots[n++] = t1;
	      }

	      if (t2 >= 0 && t2 <= 1) {
	        roots[n++] = t2;
	      }
	    } else if (disc > 0) {
	      var discSqrt = mathSqrt(disc);
	      var Y1 = A * b + 1.5 * a * (-B + discSqrt);
	      var Y2 = A * b + 1.5 * a * (-B - discSqrt);

	      if (Y1 < 0) {
	        Y1 = -mathPow(-Y1, ONE_THIRD);
	      } else {
	        Y1 = mathPow(Y1, ONE_THIRD);
	      }

	      if (Y2 < 0) {
	        Y2 = -mathPow(-Y2, ONE_THIRD);
	      } else {
	        Y2 = mathPow(Y2, ONE_THIRD);
	      }

	      var t1 = (-b - (Y1 + Y2)) / (3 * a);

	      if (t1 >= 0 && t1 <= 1) {
	        roots[n++] = t1;
	      }
	    } else {
	      var T = (2 * A * b - 3 * a * B) / (2 * mathSqrt(A * A * A));
	      var theta = Math.acos(T) / 3;
	      var ASqrt = mathSqrt(A);
	      var tmp = Math.cos(theta);
	      var t1 = (-b - 2 * ASqrt * tmp) / (3 * a);
	      var t2 = (-b + ASqrt * (tmp + THREE_SQRT * Math.sin(theta))) / (3 * a);
	      var t3 = (-b + ASqrt * (tmp - THREE_SQRT * Math.sin(theta))) / (3 * a);

	      if (t1 >= 0 && t1 <= 1) {
	        roots[n++] = t1;
	      }

	      if (t2 >= 0 && t2 <= 1) {
	        roots[n++] = t2;
	      }

	      if (t3 >= 0 && t3 <= 1) {
	        roots[n++] = t3;
	      }
	    }
	  }

	  return n;
	}
	/**
	 * 计算三次贝塞尔方程极限值的位置
	 * @memberOf module:zrender/core/curve
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @param  {number} p3
	 * @param  {Array.<number>} extrema
	 * @return {number} 有效数目
	 */


	function cubicExtrema(p0, p1, p2, p3, extrema) {
	  var b = 6 * p2 - 12 * p1 + 6 * p0;
	  var a = 9 * p1 + 3 * p3 - 3 * p0 - 9 * p2;
	  var c = 3 * p1 - 3 * p0;
	  var n = 0;

	  if (isAroundZero(a)) {
	    if (isNotAroundZero(b)) {
	      var t1 = -c / b;

	      if (t1 >= 0 && t1 <= 1) {
	        extrema[n++] = t1;
	      }
	    }
	  } else {
	    var disc = b * b - 4 * a * c;

	    if (isAroundZero(disc)) {
	      extrema[0] = -b / (2 * a);
	    } else if (disc > 0) {
	      var discSqrt = mathSqrt(disc);
	      var t1 = (-b + discSqrt) / (2 * a);
	      var t2 = (-b - discSqrt) / (2 * a);

	      if (t1 >= 0 && t1 <= 1) {
	        extrema[n++] = t1;
	      }

	      if (t2 >= 0 && t2 <= 1) {
	        extrema[n++] = t2;
	      }
	    }
	  }

	  return n;
	}
	/**
	 * 细分三次贝塞尔曲线
	 * @memberOf module:zrender/core/curve
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @param  {number} p3
	 * @param  {number} t
	 * @param  {Array.<number>} out
	 */


	function cubicSubdivide(p0, p1, p2, p3, t, out) {
	  var p01 = (p1 - p0) * t + p0;
	  var p12 = (p2 - p1) * t + p1;
	  var p23 = (p3 - p2) * t + p2;
	  var p012 = (p12 - p01) * t + p01;
	  var p123 = (p23 - p12) * t + p12;
	  var p0123 = (p123 - p012) * t + p012; // Seg0

	  out[0] = p0;
	  out[1] = p01;
	  out[2] = p012;
	  out[3] = p0123; // Seg1

	  out[4] = p0123;
	  out[5] = p123;
	  out[6] = p23;
	  out[7] = p3;
	}
	/**
	 * 投射点到三次贝塞尔曲线上，返回投射距离。
	 * 投射点有可能会有一个或者多个，这里只返回其中距离最短的一个。
	 * @param {number} x0
	 * @param {number} y0
	 * @param {number} x1
	 * @param {number} y1
	 * @param {number} x2
	 * @param {number} y2
	 * @param {number} x3
	 * @param {number} y3
	 * @param {number} x
	 * @param {number} y
	 * @param {Array.<number>} [out] 投射点
	 * @return {number}
	 */


	function cubicProjectPoint(x0, y0, x1, y1, x2, y2, x3, y3, x, y, out) {
	  // http://pomax.github.io/bezierinfo/#projections
	  var t;
	  var interval = 0.005;
	  var d = Infinity;
	  var prev;
	  var next;
	  var d1;
	  var d2;
	  _v0[0] = x;
	  _v0[1] = y; // 先粗略估计一下可能的最小距离的 t 值
	  // PENDING

	  for (var _t = 0; _t < 1; _t += 0.05) {
	    _v1[0] = cubicAt(x0, x1, x2, x3, _t);
	    _v1[1] = cubicAt(y0, y1, y2, y3, _t);
	    d1 = v2DistSquare(_v0, _v1);

	    if (d1 < d) {
	      t = _t;
	      d = d1;
	    }
	  }

	  d = Infinity; // At most 32 iteration

	  for (var i = 0; i < 32; i++) {
	    if (interval < EPSILON_NUMERIC) {
	      break;
	    }

	    prev = t - interval;
	    next = t + interval; // t - interval

	    _v1[0] = cubicAt(x0, x1, x2, x3, prev);
	    _v1[1] = cubicAt(y0, y1, y2, y3, prev);
	    d1 = v2DistSquare(_v1, _v0);

	    if (prev >= 0 && d1 < d) {
	      t = prev;
	      d = d1;
	    } else {
	      // t + interval
	      _v2[0] = cubicAt(x0, x1, x2, x3, next);
	      _v2[1] = cubicAt(y0, y1, y2, y3, next);
	      d2 = v2DistSquare(_v2, _v0);

	      if (next <= 1 && d2 < d) {
	        t = next;
	        d = d2;
	      } else {
	        interval *= 0.5;
	      }
	    }
	  } // t


	  if (out) {
	    out[0] = cubicAt(x0, x1, x2, x3, t);
	    out[1] = cubicAt(y0, y1, y2, y3, t);
	  } // console.log(interval, i);


	  return mathSqrt(d);
	}
	/**
	 * 计算二次方贝塞尔值
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @param  {number} t
	 * @return {number}
	 */


	function quadraticAt(p0, p1, p2, t) {
	  var onet = 1 - t;
	  return onet * (onet * p0 + 2 * t * p1) + t * t * p2;
	}
	/**
	 * 计算二次方贝塞尔导数值
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @param  {number} t
	 * @return {number}
	 */


	function quadraticDerivativeAt(p0, p1, p2, t) {
	  return 2 * ((1 - t) * (p1 - p0) + t * (p2 - p1));
	}
	/**
	 * 计算二次方贝塞尔方程根
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @param  {number} t
	 * @param  {Array.<number>} roots
	 * @return {number} 有效根数目
	 */


	function quadraticRootAt(p0, p1, p2, val, roots) {
	  var a = p0 - 2 * p1 + p2;
	  var b = 2 * (p1 - p0);
	  var c = p0 - val;
	  var n = 0;

	  if (isAroundZero(a)) {
	    if (isNotAroundZero(b)) {
	      var t1 = -c / b;

	      if (t1 >= 0 && t1 <= 1) {
	        roots[n++] = t1;
	      }
	    }
	  } else {
	    var disc = b * b - 4 * a * c;

	    if (isAroundZero(disc)) {
	      var t1 = -b / (2 * a);

	      if (t1 >= 0 && t1 <= 1) {
	        roots[n++] = t1;
	      }
	    } else if (disc > 0) {
	      var discSqrt = mathSqrt(disc);
	      var t1 = (-b + discSqrt) / (2 * a);
	      var t2 = (-b - discSqrt) / (2 * a);

	      if (t1 >= 0 && t1 <= 1) {
	        roots[n++] = t1;
	      }

	      if (t2 >= 0 && t2 <= 1) {
	        roots[n++] = t2;
	      }
	    }
	  }

	  return n;
	}
	/**
	 * 计算二次贝塞尔方程极限值
	 * @memberOf module:zrender/core/curve
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @return {number}
	 */


	function quadraticExtremum(p0, p1, p2) {
	  var divider = p0 + p2 - 2 * p1;

	  if (divider === 0) {
	    // p1 is center of p0 and p2
	    return 0.5;
	  } else {
	    return (p0 - p1) / divider;
	  }
	}
	/**
	 * 细分二次贝塞尔曲线
	 * @memberOf module:zrender/core/curve
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @param  {number} t
	 * @param  {Array.<number>} out
	 */


	function quadraticSubdivide(p0, p1, p2, t, out) {
	  var p01 = (p1 - p0) * t + p0;
	  var p12 = (p2 - p1) * t + p1;
	  var p012 = (p12 - p01) * t + p01; // Seg0

	  out[0] = p0;
	  out[1] = p01;
	  out[2] = p012; // Seg1

	  out[3] = p012;
	  out[4] = p12;
	  out[5] = p2;
	}
	/**
	 * 投射点到二次贝塞尔曲线上，返回投射距离。
	 * 投射点有可能会有一个或者多个，这里只返回其中距离最短的一个。
	 * @param {number} x0
	 * @param {number} y0
	 * @param {number} x1
	 * @param {number} y1
	 * @param {number} x2
	 * @param {number} y2
	 * @param {number} x
	 * @param {number} y
	 * @param {Array.<number>} out 投射点
	 * @return {number}
	 */


	function quadraticProjectPoint(x0, y0, x1, y1, x2, y2, x, y, out) {
	  // http://pomax.github.io/bezierinfo/#projections
	  var t;
	  var interval = 0.005;
	  var d = Infinity;
	  _v0[0] = x;
	  _v0[1] = y; // 先粗略估计一下可能的最小距离的 t 值
	  // PENDING

	  for (var _t = 0; _t < 1; _t += 0.05) {
	    _v1[0] = quadraticAt(x0, x1, x2, _t);
	    _v1[1] = quadraticAt(y0, y1, y2, _t);
	    var d1 = v2DistSquare(_v0, _v1);

	    if (d1 < d) {
	      t = _t;
	      d = d1;
	    }
	  }

	  d = Infinity; // At most 32 iteration

	  for (var i = 0; i < 32; i++) {
	    if (interval < EPSILON_NUMERIC) {
	      break;
	    }

	    var prev = t - interval;
	    var next = t + interval; // t - interval

	    _v1[0] = quadraticAt(x0, x1, x2, prev);
	    _v1[1] = quadraticAt(y0, y1, y2, prev);
	    var d1 = v2DistSquare(_v1, _v0);

	    if (prev >= 0 && d1 < d) {
	      t = prev;
	      d = d1;
	    } else {
	      // t + interval
	      _v2[0] = quadraticAt(x0, x1, x2, next);
	      _v2[1] = quadraticAt(y0, y1, y2, next);
	      var d2 = v2DistSquare(_v2, _v0);

	      if (next <= 1 && d2 < d) {
	        t = next;
	        d = d2;
	      } else {
	        interval *= 0.5;
	      }
	    }
	  } // t


	  if (out) {
	    out[0] = quadraticAt(x0, x1, x2, t);
	    out[1] = quadraticAt(y0, y1, y2, t);
	  } // console.log(interval, i);


	  return mathSqrt(d);
	}

	exports.cubicAt = cubicAt;
	exports.cubicDerivativeAt = cubicDerivativeAt;
	exports.cubicRootAt = cubicRootAt;
	exports.cubicExtrema = cubicExtrema;
	exports.cubicSubdivide = cubicSubdivide;
	exports.cubicProjectPoint = cubicProjectPoint;
	exports.quadraticAt = quadraticAt;
	exports.quadraticDerivativeAt = quadraticDerivativeAt;
	exports.quadraticRootAt = quadraticRootAt;
	exports.quadraticExtremum = quadraticExtremum;
	exports.quadraticSubdivide = quadraticSubdivide;
	exports.quadraticProjectPoint = quadraticProjectPoint;

/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	var vec2 = __webpack_require__(168);

	var curve = __webpack_require__(216);

	/**
	 * @author Yi Shen(https://github.com/pissang)
	 */
	var mathMin = Math.min;
	var mathMax = Math.max;
	var mathSin = Math.sin;
	var mathCos = Math.cos;
	var PI2 = Math.PI * 2;
	var start = vec2.create();
	var end = vec2.create();
	var extremity = vec2.create();
	/**
	 * 从顶点数组中计算出最小包围盒，写入`min`和`max`中
	 * @module zrender/core/bbox
	 * @param {Array<Object>} points 顶点数组
	 * @param {number} min
	 * @param {number} max
	 */

	function fromPoints(points, min, max) {
	  if (points.length === 0) {
	    return;
	  }

	  var p = points[0];
	  var left = p[0];
	  var right = p[0];
	  var top = p[1];
	  var bottom = p[1];
	  var i;

	  for (i = 1; i < points.length; i++) {
	    p = points[i];
	    left = mathMin(left, p[0]);
	    right = mathMax(right, p[0]);
	    top = mathMin(top, p[1]);
	    bottom = mathMax(bottom, p[1]);
	  }

	  min[0] = left;
	  min[1] = top;
	  max[0] = right;
	  max[1] = bottom;
	}
	/**
	 * @memberOf module:zrender/core/bbox
	 * @param {number} x0
	 * @param {number} y0
	 * @param {number} x1
	 * @param {number} y1
	 * @param {Array.<number>} min
	 * @param {Array.<number>} max
	 */


	function fromLine(x0, y0, x1, y1, min, max) {
	  min[0] = mathMin(x0, x1);
	  min[1] = mathMin(y0, y1);
	  max[0] = mathMax(x0, x1);
	  max[1] = mathMax(y0, y1);
	}

	var xDim = [];
	var yDim = [];
	/**
	 * 从三阶贝塞尔曲线(p0, p1, p2, p3)中计算出最小包围盒，写入`min`和`max`中
	 * @memberOf module:zrender/core/bbox
	 * @param {number} x0
	 * @param {number} y0
	 * @param {number} x1
	 * @param {number} y1
	 * @param {number} x2
	 * @param {number} y2
	 * @param {number} x3
	 * @param {number} y3
	 * @param {Array.<number>} min
	 * @param {Array.<number>} max
	 */

	function fromCubic(x0, y0, x1, y1, x2, y2, x3, y3, min, max) {
	  var cubicExtrema = curve.cubicExtrema;
	  var cubicAt = curve.cubicAt;
	  var i;
	  var n = cubicExtrema(x0, x1, x2, x3, xDim);
	  min[0] = Infinity;
	  min[1] = Infinity;
	  max[0] = -Infinity;
	  max[1] = -Infinity;

	  for (i = 0; i < n; i++) {
	    var x = cubicAt(x0, x1, x2, x3, xDim[i]);
	    min[0] = mathMin(x, min[0]);
	    max[0] = mathMax(x, max[0]);
	  }

	  n = cubicExtrema(y0, y1, y2, y3, yDim);

	  for (i = 0; i < n; i++) {
	    var y = cubicAt(y0, y1, y2, y3, yDim[i]);
	    min[1] = mathMin(y, min[1]);
	    max[1] = mathMax(y, max[1]);
	  }

	  min[0] = mathMin(x0, min[0]);
	  max[0] = mathMax(x0, max[0]);
	  min[0] = mathMin(x3, min[0]);
	  max[0] = mathMax(x3, max[0]);
	  min[1] = mathMin(y0, min[1]);
	  max[1] = mathMax(y0, max[1]);
	  min[1] = mathMin(y3, min[1]);
	  max[1] = mathMax(y3, max[1]);
	}
	/**
	 * 从二阶贝塞尔曲线(p0, p1, p2)中计算出最小包围盒，写入`min`和`max`中
	 * @memberOf module:zrender/core/bbox
	 * @param {number} x0
	 * @param {number} y0
	 * @param {number} x1
	 * @param {number} y1
	 * @param {number} x2
	 * @param {number} y2
	 * @param {Array.<number>} min
	 * @param {Array.<number>} max
	 */


	function fromQuadratic(x0, y0, x1, y1, x2, y2, min, max) {
	  var quadraticExtremum = curve.quadraticExtremum;
	  var quadraticAt = curve.quadraticAt; // Find extremities, where derivative in x dim or y dim is zero

	  var tx = mathMax(mathMin(quadraticExtremum(x0, x1, x2), 1), 0);
	  var ty = mathMax(mathMin(quadraticExtremum(y0, y1, y2), 1), 0);
	  var x = quadraticAt(x0, x1, x2, tx);
	  var y = quadraticAt(y0, y1, y2, ty);
	  min[0] = mathMin(x0, x2, x);
	  min[1] = mathMin(y0, y2, y);
	  max[0] = mathMax(x0, x2, x);
	  max[1] = mathMax(y0, y2, y);
	}
	/**
	 * 从圆弧中计算出最小包围盒，写入`min`和`max`中
	 * @method
	 * @memberOf module:zrender/core/bbox
	 * @param {number} x
	 * @param {number} y
	 * @param {number} rx
	 * @param {number} ry
	 * @param {number} startAngle
	 * @param {number} endAngle
	 * @param {number} anticlockwise
	 * @param {Array.<number>} min
	 * @param {Array.<number>} max
	 */


	function fromArc(x, y, rx, ry, startAngle, endAngle, anticlockwise, min, max) {
	  var vec2Min = vec2.min;
	  var vec2Max = vec2.max;
	  var diff = Math.abs(startAngle - endAngle);

	  if (diff % PI2 < 1e-4 && diff > 1e-4) {
	    // Is a circle
	    min[0] = x - rx;
	    min[1] = y - ry;
	    max[0] = x + rx;
	    max[1] = y + ry;
	    return;
	  }

	  start[0] = mathCos(startAngle) * rx + x;
	  start[1] = mathSin(startAngle) * ry + y;
	  end[0] = mathCos(endAngle) * rx + x;
	  end[1] = mathSin(endAngle) * ry + y;
	  vec2Min(min, start, end);
	  vec2Max(max, start, end); // Thresh to [0, Math.PI * 2]

	  startAngle = startAngle % PI2;

	  if (startAngle < 0) {
	    startAngle = startAngle + PI2;
	  }

	  endAngle = endAngle % PI2;

	  if (endAngle < 0) {
	    endAngle = endAngle + PI2;
	  }

	  if (startAngle > endAngle && !anticlockwise) {
	    endAngle += PI2;
	  } else if (startAngle < endAngle && anticlockwise) {
	    startAngle += PI2;
	  }

	  if (anticlockwise) {
	    var tmp = endAngle;
	    endAngle = startAngle;
	    startAngle = tmp;
	  } // var number = 0;
	  // var step = (anticlockwise ? -Math.PI : Math.PI) / 2;


	  for (var angle = 0; angle < endAngle; angle += Math.PI / 2) {
	    if (angle > startAngle) {
	      extremity[0] = mathCos(angle) * rx + x;
	      extremity[1] = mathSin(angle) * ry + y;
	      vec2Min(min, extremity, min);
	      vec2Max(max, extremity, max);
	    }
	  }
	}

	exports.fromPoints = fromPoints;
	exports.fromLine = fromLine;
	exports.fromCubic = fromCubic;
	exports.fromQuadratic = fromQuadratic;
	exports.fromArc = fromArc;

/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	var PathProxy = __webpack_require__(215);

	var line = __webpack_require__(219);

	var cubic = __webpack_require__(220);

	var quadratic = __webpack_require__(221);

	var arc = __webpack_require__(222);

	var _util = __webpack_require__(223);

	var normalizeRadian = _util.normalizeRadian;

	var curve = __webpack_require__(216);

	var windingLine = __webpack_require__(224);

	var CMD = PathProxy.CMD;
	var PI2 = Math.PI * 2;
	var EPSILON = 1e-4;

	function isAroundEqual(a, b) {
	  return Math.abs(a - b) < EPSILON;
	} // 临时数组


	var roots = [-1, -1, -1];
	var extrema = [-1, -1];

	function swapExtrema() {
	  var tmp = extrema[0];
	  extrema[0] = extrema[1];
	  extrema[1] = tmp;
	}

	function windingCubic(x0, y0, x1, y1, x2, y2, x3, y3, x, y) {
	  // Quick reject
	  if (y > y0 && y > y1 && y > y2 && y > y3 || y < y0 && y < y1 && y < y2 && y < y3) {
	    return 0;
	  }

	  var nRoots = curve.cubicRootAt(y0, y1, y2, y3, y, roots);

	  if (nRoots === 0) {
	    return 0;
	  } else {
	    var w = 0;
	    var nExtrema = -1;
	    var y0_, y1_;

	    for (var i = 0; i < nRoots; i++) {
	      var t = roots[i]; // Avoid winding error when intersection point is the connect point of two line of polygon

	      var unit = t === 0 || t === 1 ? 0.5 : 1;
	      var x_ = curve.cubicAt(x0, x1, x2, x3, t);

	      if (x_ < x) {
	        // Quick reject
	        continue;
	      }

	      if (nExtrema < 0) {
	        nExtrema = curve.cubicExtrema(y0, y1, y2, y3, extrema);

	        if (extrema[1] < extrema[0] && nExtrema > 1) {
	          swapExtrema();
	        }

	        y0_ = curve.cubicAt(y0, y1, y2, y3, extrema[0]);

	        if (nExtrema > 1) {
	          y1_ = curve.cubicAt(y0, y1, y2, y3, extrema[1]);
	        }
	      }

	      if (nExtrema == 2) {
	        // 分成三段单调函数
	        if (t < extrema[0]) {
	          w += y0_ < y0 ? unit : -unit;
	        } else if (t < extrema[1]) {
	          w += y1_ < y0_ ? unit : -unit;
	        } else {
	          w += y3 < y1_ ? unit : -unit;
	        }
	      } else {
	        // 分成两段单调函数
	        if (t < extrema[0]) {
	          w += y0_ < y0 ? unit : -unit;
	        } else {
	          w += y3 < y0_ ? unit : -unit;
	        }
	      }
	    }

	    return w;
	  }
	}

	function windingQuadratic(x0, y0, x1, y1, x2, y2, x, y) {
	  // Quick reject
	  if (y > y0 && y > y1 && y > y2 || y < y0 && y < y1 && y < y2) {
	    return 0;
	  }

	  var nRoots = curve.quadraticRootAt(y0, y1, y2, y, roots);

	  if (nRoots === 0) {
	    return 0;
	  } else {
	    var t = curve.quadraticExtremum(y0, y1, y2);

	    if (t >= 0 && t <= 1) {
	      var w = 0;
	      var y_ = curve.quadraticAt(y0, y1, y2, t);

	      for (var i = 0; i < nRoots; i++) {
	        // Remove one endpoint.
	        var unit = roots[i] === 0 || roots[i] === 1 ? 0.5 : 1;
	        var x_ = curve.quadraticAt(x0, x1, x2, roots[i]);

	        if (x_ < x) {
	          // Quick reject
	          continue;
	        }

	        if (roots[i] < t) {
	          w += y_ < y0 ? unit : -unit;
	        } else {
	          w += y2 < y_ ? unit : -unit;
	        }
	      }

	      return w;
	    } else {
	      // Remove one endpoint.
	      var unit = roots[0] === 0 || roots[0] === 1 ? 0.5 : 1;
	      var x_ = curve.quadraticAt(x0, x1, x2, roots[0]);

	      if (x_ < x) {
	        // Quick reject
	        return 0;
	      }

	      return y2 < y0 ? unit : -unit;
	    }
	  }
	} // TODO
	// Arc 旋转


	function windingArc(cx, cy, r, startAngle, endAngle, anticlockwise, x, y) {
	  y -= cy;

	  if (y > r || y < -r) {
	    return 0;
	  }

	  var tmp = Math.sqrt(r * r - y * y);
	  roots[0] = -tmp;
	  roots[1] = tmp;
	  var diff = Math.abs(startAngle - endAngle);

	  if (diff < 1e-4) {
	    return 0;
	  }

	  if (diff % PI2 < 1e-4) {
	    // Is a circle
	    startAngle = 0;
	    endAngle = PI2;
	    var dir = anticlockwise ? 1 : -1;

	    if (x >= roots[0] + cx && x <= roots[1] + cx) {
	      return dir;
	    } else {
	      return 0;
	    }
	  }

	  if (anticlockwise) {
	    var tmp = startAngle;
	    startAngle = normalizeRadian(endAngle);
	    endAngle = normalizeRadian(tmp);
	  } else {
	    startAngle = normalizeRadian(startAngle);
	    endAngle = normalizeRadian(endAngle);
	  }

	  if (startAngle > endAngle) {
	    endAngle += PI2;
	  }

	  var w = 0;

	  for (var i = 0; i < 2; i++) {
	    var x_ = roots[i];

	    if (x_ + cx > x) {
	      var angle = Math.atan2(y, x_);
	      var dir = anticlockwise ? 1 : -1;

	      if (angle < 0) {
	        angle = PI2 + angle;
	      }

	      if (angle >= startAngle && angle <= endAngle || angle + PI2 >= startAngle && angle + PI2 <= endAngle) {
	        if (angle > Math.PI / 2 && angle < Math.PI * 1.5) {
	          dir = -dir;
	        }

	        w += dir;
	      }
	    }
	  }

	  return w;
	}

	function containPath(data, lineWidth, isStroke, x, y) {
	  var w = 0;
	  var xi = 0;
	  var yi = 0;
	  var x0 = 0;
	  var y0 = 0;

	  for (var i = 0; i < data.length;) {
	    var cmd = data[i++]; // Begin a new subpath

	    if (cmd === CMD.M && i > 1) {
	      // Close previous subpath
	      if (!isStroke) {
	        w += windingLine(xi, yi, x0, y0, x, y);
	      } // 如果被任何一个 subpath 包含
	      // if (w !== 0) {
	      //     return true;
	      // }

	    }

	    if (i == 1) {
	      // 如果第一个命令是 L, C, Q
	      // 则 previous point 同绘制命令的第一个 point
	      //
	      // 第一个命令为 Arc 的情况下会在后面特殊处理
	      xi = data[i];
	      yi = data[i + 1];
	      x0 = xi;
	      y0 = yi;
	    }

	    switch (cmd) {
	      case CMD.M:
	        // moveTo 命令重新创建一个新的 subpath, 并且更新新的起点
	        // 在 closePath 的时候使用
	        x0 = data[i++];
	        y0 = data[i++];
	        xi = x0;
	        yi = y0;
	        break;

	      case CMD.L:
	        if (isStroke) {
	          if (line.containStroke(xi, yi, data[i], data[i + 1], lineWidth, x, y)) {
	            return true;
	          }
	        } else {
	          // NOTE 在第一个命令为 L, C, Q 的时候会计算出 NaN
	          w += windingLine(xi, yi, data[i], data[i + 1], x, y) || 0;
	        }

	        xi = data[i++];
	        yi = data[i++];
	        break;

	      case CMD.C:
	        if (isStroke) {
	          if (cubic.containStroke(xi, yi, data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1], lineWidth, x, y)) {
	            return true;
	          }
	        } else {
	          w += windingCubic(xi, yi, data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1], x, y) || 0;
	        }

	        xi = data[i++];
	        yi = data[i++];
	        break;

	      case CMD.Q:
	        if (isStroke) {
	          if (quadratic.containStroke(xi, yi, data[i++], data[i++], data[i], data[i + 1], lineWidth, x, y)) {
	            return true;
	          }
	        } else {
	          w += windingQuadratic(xi, yi, data[i++], data[i++], data[i], data[i + 1], x, y) || 0;
	        }

	        xi = data[i++];
	        yi = data[i++];
	        break;

	      case CMD.A:
	        // TODO Arc 判断的开销比较大
	        var cx = data[i++];
	        var cy = data[i++];
	        var rx = data[i++];
	        var ry = data[i++];
	        var theta = data[i++];
	        var dTheta = data[i++]; // TODO Arc 旋转

	        var psi = data[i++];
	        var anticlockwise = 1 - data[i++];
	        var x1 = Math.cos(theta) * rx + cx;
	        var y1 = Math.sin(theta) * ry + cy; // 不是直接使用 arc 命令

	        if (i > 1) {
	          w += windingLine(xi, yi, x1, y1, x, y);
	        } else {
	          // 第一个命令起点还未定义
	          x0 = x1;
	          y0 = y1;
	        } // zr 使用scale来模拟椭圆, 这里也对x做一定的缩放


	        var _x = (x - cx) * ry / rx + cx;

	        if (isStroke) {
	          if (arc.containStroke(cx, cy, ry, theta, theta + dTheta, anticlockwise, lineWidth, _x, y)) {
	            return true;
	          }
	        } else {
	          w += windingArc(cx, cy, ry, theta, theta + dTheta, anticlockwise, _x, y);
	        }

	        xi = Math.cos(theta + dTheta) * rx + cx;
	        yi = Math.sin(theta + dTheta) * ry + cy;
	        break;

	      case CMD.R:
	        x0 = xi = data[i++];
	        y0 = yi = data[i++];
	        var width = data[i++];
	        var height = data[i++];
	        var x1 = x0 + width;
	        var y1 = y0 + height;

	        if (isStroke) {
	          if (line.containStroke(x0, y0, x1, y0, lineWidth, x, y) || line.containStroke(x1, y0, x1, y1, lineWidth, x, y) || line.containStroke(x1, y1, x0, y1, lineWidth, x, y) || line.containStroke(x0, y1, x0, y0, lineWidth, x, y)) {
	            return true;
	          }
	        } else {
	          // FIXME Clockwise ?
	          w += windingLine(x1, y0, x1, y1, x, y);
	          w += windingLine(x0, y1, x0, y0, x, y);
	        }

	        break;

	      case CMD.Z:
	        if (isStroke) {
	          if (line.containStroke(xi, yi, x0, y0, lineWidth, x, y)) {
	            return true;
	          }
	        } else {
	          // Close a subpath
	          w += windingLine(xi, yi, x0, y0, x, y); // 如果被任何一个 subpath 包含
	          // FIXME subpaths may overlap
	          // if (w !== 0) {
	          //     return true;
	          // }
	        }

	        xi = x0;
	        yi = y0;
	        break;
	    }
	  }

	  if (!isStroke && !isAroundEqual(yi, y0)) {
	    w += windingLine(xi, yi, x0, y0, x, y) || 0;
	  }

	  return w !== 0;
	}

	function contain(pathData, x, y) {
	  return containPath(pathData, 0, false, x, y);
	}

	function containStroke(pathData, lineWidth, x, y) {
	  return containPath(pathData, lineWidth, true, x, y);
	}

	exports.contain = contain;
	exports.containStroke = containStroke;

/***/ },
/* 219 */
/***/ function(module, exports) {

	/**
	 * 线段包含判断
	 * @param  {number}  x0
	 * @param  {number}  y0
	 * @param  {number}  x1
	 * @param  {number}  y1
	 * @param  {number}  lineWidth
	 * @param  {number}  x
	 * @param  {number}  y
	 * @return {boolean}
	 */
	function containStroke(x0, y0, x1, y1, lineWidth, x, y) {
	  if (lineWidth === 0) {
	    return false;
	  }

	  var _l = lineWidth;
	  var _a = 0;
	  var _b = x0; // Quick reject

	  if (y > y0 + _l && y > y1 + _l || y < y0 - _l && y < y1 - _l || x > x0 + _l && x > x1 + _l || x < x0 - _l && x < x1 - _l) {
	    return false;
	  }

	  if (x0 !== x1) {
	    _a = (y0 - y1) / (x0 - x1);
	    _b = (x0 * y1 - x1 * y0) / (x0 - x1);
	  } else {
	    return Math.abs(x - x0) <= _l / 2;
	  }

	  var tmp = _a * x - y + _b;

	  var _s = tmp * tmp / (_a * _a + 1);

	  return _s <= _l / 2 * _l / 2;
	}

	exports.containStroke = containStroke;

/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	var curve = __webpack_require__(216);

	/**
	 * 三次贝塞尔曲线描边包含判断
	 * @param  {number}  x0
	 * @param  {number}  y0
	 * @param  {number}  x1
	 * @param  {number}  y1
	 * @param  {number}  x2
	 * @param  {number}  y2
	 * @param  {number}  x3
	 * @param  {number}  y3
	 * @param  {number}  lineWidth
	 * @param  {number}  x
	 * @param  {number}  y
	 * @return {boolean}
	 */
	function containStroke(x0, y0, x1, y1, x2, y2, x3, y3, lineWidth, x, y) {
	  if (lineWidth === 0) {
	    return false;
	  }

	  var _l = lineWidth; // Quick reject

	  if (y > y0 + _l && y > y1 + _l && y > y2 + _l && y > y3 + _l || y < y0 - _l && y < y1 - _l && y < y2 - _l && y < y3 - _l || x > x0 + _l && x > x1 + _l && x > x2 + _l && x > x3 + _l || x < x0 - _l && x < x1 - _l && x < x2 - _l && x < x3 - _l) {
	    return false;
	  }

	  var d = curve.cubicProjectPoint(x0, y0, x1, y1, x2, y2, x3, y3, x, y, null);
	  return d <= _l / 2;
	}

	exports.containStroke = containStroke;

/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	var _curve = __webpack_require__(216);

	var quadraticProjectPoint = _curve.quadraticProjectPoint;

	/**
	 * 二次贝塞尔曲线描边包含判断
	 * @param  {number}  x0
	 * @param  {number}  y0
	 * @param  {number}  x1
	 * @param  {number}  y1
	 * @param  {number}  x2
	 * @param  {number}  y2
	 * @param  {number}  lineWidth
	 * @param  {number}  x
	 * @param  {number}  y
	 * @return {boolean}
	 */
	function containStroke(x0, y0, x1, y1, x2, y2, lineWidth, x, y) {
	  if (lineWidth === 0) {
	    return false;
	  }

	  var _l = lineWidth; // Quick reject

	  if (y > y0 + _l && y > y1 + _l && y > y2 + _l || y < y0 - _l && y < y1 - _l && y < y2 - _l || x > x0 + _l && x > x1 + _l && x > x2 + _l || x < x0 - _l && x < x1 - _l && x < x2 - _l) {
	    return false;
	  }

	  var d = quadraticProjectPoint(x0, y0, x1, y1, x2, y2, x, y, null);
	  return d <= _l / 2;
	}

	exports.containStroke = containStroke;

/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	var _util = __webpack_require__(223);

	var normalizeRadian = _util.normalizeRadian;
	var PI2 = Math.PI * 2;
	/**
	 * 圆弧描边包含判断
	 * @param  {number}  cx
	 * @param  {number}  cy
	 * @param  {number}  r
	 * @param  {number}  startAngle
	 * @param  {number}  endAngle
	 * @param  {boolean}  anticlockwise
	 * @param  {number} lineWidth
	 * @param  {number}  x
	 * @param  {number}  y
	 * @return {Boolean}
	 */

	function containStroke(cx, cy, r, startAngle, endAngle, anticlockwise, lineWidth, x, y) {
	  if (lineWidth === 0) {
	    return false;
	  }

	  var _l = lineWidth;
	  x -= cx;
	  y -= cy;
	  var d = Math.sqrt(x * x + y * y);

	  if (d - _l > r || d + _l < r) {
	    return false;
	  }

	  if (Math.abs(startAngle - endAngle) % PI2 < 1e-4) {
	    // Is a circle
	    return true;
	  }

	  if (anticlockwise) {
	    var tmp = startAngle;
	    startAngle = normalizeRadian(endAngle);
	    endAngle = normalizeRadian(tmp);
	  } else {
	    startAngle = normalizeRadian(startAngle);
	    endAngle = normalizeRadian(endAngle);
	  }

	  if (startAngle > endAngle) {
	    endAngle += PI2;
	  }

	  var angle = Math.atan2(y, x);

	  if (angle < 0) {
	    angle += PI2;
	  }

	  return angle >= startAngle && angle <= endAngle || angle + PI2 >= startAngle && angle + PI2 <= endAngle;
	}

	exports.containStroke = containStroke;

/***/ },
/* 223 */
/***/ function(module, exports) {

	var PI2 = Math.PI * 2;

	function normalizeRadian(angle) {
	  angle %= PI2;

	  if (angle < 0) {
	    angle += PI2;
	  }

	  return angle;
	}

	exports.normalizeRadian = normalizeRadian;

/***/ },
/* 224 */
/***/ function(module, exports) {

	function windingLine(x0, y0, x1, y1, x, y) {
	  if (y > y0 && y > y1 || y < y0 && y < y1) {
	    return 0;
	  } // Ignore horizontal line


	  if (y1 === y0) {
	    return 0;
	  }

	  var dir = y1 < y0 ? 1 : -1;
	  var t = (y - y0) / (y1 - y0); // Avoid winding error when intersection point is the connect point of two line of polygon

	  if (t === 1 || t === 0) {
	    dir = y1 < y0 ? 0.5 : -0.5;
	  }

	  var x_ = t * (x1 - x0) + x0;
	  return x_ > x ? dir : 0;
	}

	module.exports = windingLine;

/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	var PathProxy = __webpack_require__(215);

	var _vector = __webpack_require__(168);

	var v2ApplyTransform = _vector.applyTransform;
	var CMD = PathProxy.CMD;
	var points = [[], [], []];
	var mathSqrt = Math.sqrt;
	var mathAtan2 = Math.atan2;

	function _default(path, m) {
	  var data = path.data;
	  var cmd;
	  var nPoint;
	  var i;
	  var j;
	  var k;
	  var p;
	  var M = CMD.M;
	  var C = CMD.C;
	  var L = CMD.L;
	  var R = CMD.R;
	  var A = CMD.A;
	  var Q = CMD.Q;

	  for (i = 0, j = 0; i < data.length;) {
	    cmd = data[i++];
	    j = i;
	    nPoint = 0;

	    switch (cmd) {
	      case M:
	        nPoint = 1;
	        break;

	      case L:
	        nPoint = 1;
	        break;

	      case C:
	        nPoint = 3;
	        break;

	      case Q:
	        nPoint = 2;
	        break;

	      case A:
	        var x = m[4];
	        var y = m[5];
	        var sx = mathSqrt(m[0] * m[0] + m[1] * m[1]);
	        var sy = mathSqrt(m[2] * m[2] + m[3] * m[3]);
	        var angle = mathAtan2(-m[1] / sy, m[0] / sx); // cx

	        data[i] *= sx;
	        data[i++] += x; // cy

	        data[i] *= sy;
	        data[i++] += y; // Scale rx and ry
	        // FIXME Assume psi is 0 here

	        data[i++] *= sx;
	        data[i++] *= sy; // Start angle

	        data[i++] += angle; // end angle

	        data[i++] += angle; // FIXME psi

	        i += 2;
	        j = i;
	        break;

	      case R:
	        // x0, y0
	        p[0] = data[i++];
	        p[1] = data[i++];
	        v2ApplyTransform(p, p, m);
	        data[j++] = p[0];
	        data[j++] = p[1]; // x1, y1

	        p[0] += data[i++];
	        p[1] += data[i++];
	        v2ApplyTransform(p, p, m);
	        data[j++] = p[0];
	        data[j++] = p[1];
	    }

	    for (k = 0; k < nPoint; k++) {
	      var p = points[k];
	      p[0] = data[i++];
	      p[1] = data[i++];
	      v2ApplyTransform(p, p, m); // Write back

	      data[j++] = p[0];
	      data[j++] = p[1];
	    }
	  }
	}

	module.exports = _default;

/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	var Displayable = __webpack_require__(192);

	var zrUtil = __webpack_require__(166);

	var textContain = __webpack_require__(195);

	var textHelper = __webpack_require__(194);

	/**
	 * @alias zrender/graphic/Text
	 * @extends module:zrender/graphic/Displayable
	 * @constructor
	 * @param {Object} opts
	 */
	var Text = function (opts) {
	  // jshint ignore:line
	  Displayable.call(this, opts);
	};

	Text.prototype = {
	  constructor: Text,
	  type: 'text',
	  brush: function (ctx, prevEl) {
	    var style = this.style; // Optimize, avoid normalize every time.

	    this.__dirty && textHelper.normalizeTextStyle(style, true); // Use props with prefix 'text'.

	    style.fill = style.stroke = style.shadowBlur = style.shadowColor = style.shadowOffsetX = style.shadowOffsetY = null;
	    var text = style.text; // Convert to string

	    text != null && (text += ''); // Always bind style

	    style.bind(ctx, this, prevEl);

	    if (!textHelper.needDrawText(text, style)) {
	      return;
	    }

	    this.setTransform(ctx);
	    textHelper.renderText(this, ctx, text, style);
	    this.restoreTransform(ctx);
	  },
	  getBoundingRect: function () {
	    var style = this.style; // Optimize, avoid normalize every time.

	    this.__dirty && textHelper.normalizeTextStyle(style, true);

	    if (!this._rect) {
	      var text = style.text;
	      text != null ? text += '' : text = '';
	      var rect = textContain.getBoundingRect(style.text + '', style.font, style.textAlign, style.textVerticalAlign, style.textPadding, style.rich);
	      rect.x += style.x || 0;
	      rect.y += style.y || 0;

	      if (textHelper.getStroke(style.textStroke, style.textStrokeWidth)) {
	        var w = style.textStrokeWidth;
	        rect.x -= w / 2;
	        rect.y -= w / 2;
	        rect.width += w;
	        rect.height += w;
	      }

	      this._rect = rect;
	    }

	    return this._rect;
	  }
	};
	zrUtil.inherits(Text, Displayable);
	var _default = Text;
	module.exports = _default;

/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	var Path = __webpack_require__(214);

	/**
	 * 圆形
	 * @module zrender/shape/Circle
	 */
	var _default = Path.extend({
	  type: 'circle',
	  shape: {
	    cx: 0,
	    cy: 0,
	    r: 0
	  },
	  buildPath: function (ctx, shape, inBundle) {
	    // Better stroking in ShapeBundle
	    // Always do it may have performence issue ( fill may be 2x more cost)
	    if (inBundle) {
	      ctx.moveTo(shape.cx + shape.r, shape.cy);
	    } // else {
	    //     if (ctx.allocate && !ctx.data.length) {
	    //         ctx.allocate(ctx.CMD_MEM_SIZE.A);
	    //     }
	    // }
	    // Better stroking in ShapeBundle
	    // ctx.moveTo(shape.cx + shape.r, shape.cy);


	    ctx.arc(shape.cx, shape.cy, shape.r, 0, Math.PI * 2, true);
	  }
	});

	module.exports = _default;

/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	var Path = __webpack_require__(214);

	var fixClipWithShadow = __webpack_require__(229);

	/**
	 * 扇形
	 * @module zrender/graphic/shape/Sector
	 */
	var _default = Path.extend({
	  type: 'sector',
	  shape: {
	    cx: 0,
	    cy: 0,
	    r0: 0,
	    r: 0,
	    startAngle: 0,
	    endAngle: Math.PI * 2,
	    clockwise: true
	  },
	  brush: fixClipWithShadow(Path.prototype.brush),
	  buildPath: function (ctx, shape) {
	    var x = shape.cx;
	    var y = shape.cy;
	    var r0 = Math.max(shape.r0 || 0, 0);
	    var r = Math.max(shape.r, 0);
	    var startAngle = shape.startAngle;
	    var endAngle = shape.endAngle;
	    var clockwise = shape.clockwise;
	    var unitX = Math.cos(startAngle);
	    var unitY = Math.sin(startAngle);
	    ctx.moveTo(unitX * r0 + x, unitY * r0 + y);
	    ctx.lineTo(unitX * r + x, unitY * r + y);
	    ctx.arc(x, y, r, startAngle, endAngle, !clockwise);
	    ctx.lineTo(Math.cos(endAngle) * r0 + x, Math.sin(endAngle) * r0 + y);

	    if (r0 !== 0) {
	      ctx.arc(x, y, r0, endAngle, startAngle, clockwise);
	    }

	    ctx.closePath();
	  }
	});

	module.exports = _default;

/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	var env = __webpack_require__(165);

	// Fix weird bug in some version of IE11 (like 11.0.9600.178**),
	// where exception "unexpected call to method or property access"
	// might be thrown when calling ctx.fill or ctx.stroke after a path
	// whose area size is zero is drawn and ctx.clip() is called and
	// shadowBlur is set. See #4572, #3112, #5777.
	// (e.g.,
	//  ctx.moveTo(10, 10);
	//  ctx.lineTo(20, 10);
	//  ctx.closePath();
	//  ctx.clip();
	//  ctx.shadowBlur = 10;
	//  ...
	//  ctx.fill();
	// )
	var shadowTemp = [['shadowBlur', 0], ['shadowColor', '#000'], ['shadowOffsetX', 0], ['shadowOffsetY', 0]];

	function _default(orignalBrush) {
	  // version string can be: '11.0'
	  return env.browser.ie && env.browser.version >= 11 ? function () {
	    var clipPaths = this.__clipPaths;
	    var style = this.style;
	    var modified;

	    if (clipPaths) {
	      for (var i = 0; i < clipPaths.length; i++) {
	        var clipPath = clipPaths[i];
	        var shape = clipPath && clipPath.shape;
	        var type = clipPath && clipPath.type;

	        if (shape && (type === 'sector' && shape.startAngle === shape.endAngle || type === 'rect' && (!shape.width || !shape.height))) {
	          for (var j = 0; j < shadowTemp.length; j++) {
	            // It is save to put shadowTemp static, because shadowTemp
	            // will be all modified each item brush called.
	            shadowTemp[j][2] = style[shadowTemp[j][0]];
	            style[shadowTemp[j][0]] = shadowTemp[j][1];
	          }

	          modified = true;
	          break;
	        }
	      }
	    }

	    orignalBrush.apply(this, arguments);

	    if (modified) {
	      for (var j = 0; j < shadowTemp.length; j++) {
	        style[shadowTemp[j][0]] = shadowTemp[j][2];
	      }
	    }
	  } : orignalBrush;
	}

	module.exports = _default;

/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	var Path = __webpack_require__(214);

	/**
	 * 圆环
	 * @module zrender/graphic/shape/Ring
	 */
	var _default = Path.extend({
	  type: 'ring',
	  shape: {
	    cx: 0,
	    cy: 0,
	    r: 0,
	    r0: 0
	  },
	  buildPath: function (ctx, shape) {
	    var x = shape.cx;
	    var y = shape.cy;
	    var PI2 = Math.PI * 2;
	    ctx.moveTo(x + shape.r, y);
	    ctx.arc(x, y, shape.r, 0, PI2, false);
	    ctx.moveTo(x + shape.r0, y);
	    ctx.arc(x, y, shape.r0, 0, PI2, true);
	  }
	});

	module.exports = _default;

/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	var Path = __webpack_require__(214);

	var polyHelper = __webpack_require__(232);

	/**
	 * 多边形
	 * @module zrender/shape/Polygon
	 */
	var _default = Path.extend({
	  type: 'polygon',
	  shape: {
	    points: null,
	    smooth: false,
	    smoothConstraint: null
	  },
	  buildPath: function (ctx, shape) {
	    polyHelper.buildPath(ctx, shape, true);
	  }
	});

	module.exports = _default;

/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	var smoothSpline = __webpack_require__(233);

	var smoothBezier = __webpack_require__(234);

	function buildPath(ctx, shape, closePath) {
	  var points = shape.points;
	  var smooth = shape.smooth;

	  if (points && points.length >= 2) {
	    if (smooth && smooth !== 'spline') {
	      var controlPoints = smoothBezier(points, smooth, closePath, shape.smoothConstraint);
	      ctx.moveTo(points[0][0], points[0][1]);
	      var len = points.length;

	      for (var i = 0; i < (closePath ? len : len - 1); i++) {
	        var cp1 = controlPoints[i * 2];
	        var cp2 = controlPoints[i * 2 + 1];
	        var p = points[(i + 1) % len];
	        ctx.bezierCurveTo(cp1[0], cp1[1], cp2[0], cp2[1], p[0], p[1]);
	      }
	    } else {
	      if (smooth === 'spline') {
	        points = smoothSpline(points, closePath);
	      }

	      ctx.moveTo(points[0][0], points[0][1]);

	      for (var i = 1, l = points.length; i < l; i++) {
	        ctx.lineTo(points[i][0], points[i][1]);
	      }
	    }

	    closePath && ctx.closePath();
	  }
	}

	exports.buildPath = buildPath;

/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	var _vector = __webpack_require__(168);

	var v2Distance = _vector.distance;

	/**
	 * Catmull-Rom spline 插值折线
	 * @module zrender/shape/util/smoothSpline
	 * @author pissang (https://www.github.com/pissang)
	 *         Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         errorrik (errorrik@gmail.com)
	 */

	/**
	 * @inner
	 */
	function interpolate(p0, p1, p2, p3, t, t2, t3) {
	  var v0 = (p2 - p0) * 0.5;
	  var v1 = (p3 - p1) * 0.5;
	  return (2 * (p1 - p2) + v0 + v1) * t3 + (-3 * (p1 - p2) - 2 * v0 - v1) * t2 + v0 * t + p1;
	}
	/**
	 * @alias module:zrender/shape/util/smoothSpline
	 * @param {Array} points 线段顶点数组
	 * @param {boolean} isLoop
	 * @return {Array}
	 */


	function _default(points, isLoop) {
	  var len = points.length;
	  var ret = [];
	  var distance = 0;

	  for (var i = 1; i < len; i++) {
	    distance += v2Distance(points[i - 1], points[i]);
	  }

	  var segs = distance / 2;
	  segs = segs < len ? len : segs;

	  for (var i = 0; i < segs; i++) {
	    var pos = i / (segs - 1) * (isLoop ? len : len - 1);
	    var idx = Math.floor(pos);
	    var w = pos - idx;
	    var p0;
	    var p1 = points[idx % len];
	    var p2;
	    var p3;

	    if (!isLoop) {
	      p0 = points[idx === 0 ? idx : idx - 1];
	      p2 = points[idx > len - 2 ? len - 1 : idx + 1];
	      p3 = points[idx > len - 3 ? len - 1 : idx + 2];
	    } else {
	      p0 = points[(idx - 1 + len) % len];
	      p2 = points[(idx + 1) % len];
	      p3 = points[(idx + 2) % len];
	    }

	    var w2 = w * w;
	    var w3 = w * w2;
	    ret.push([interpolate(p0[0], p1[0], p2[0], p3[0], w, w2, w3), interpolate(p0[1], p1[1], p2[1], p3[1], w, w2, w3)]);
	  }

	  return ret;
	}

	module.exports = _default;

/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	var _vector = __webpack_require__(168);

	var v2Min = _vector.min;
	var v2Max = _vector.max;
	var v2Scale = _vector.scale;
	var v2Distance = _vector.distance;
	var v2Add = _vector.add;
	var v2Clone = _vector.clone;
	var v2Sub = _vector.sub;

	/**
	 * 贝塞尔平滑曲线
	 * @module zrender/shape/util/smoothBezier
	 * @author pissang (https://www.github.com/pissang)
	 *         Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         errorrik (errorrik@gmail.com)
	 */

	/**
	 * 贝塞尔平滑曲线
	 * @alias module:zrender/shape/util/smoothBezier
	 * @param {Array} points 线段顶点数组
	 * @param {number} smooth 平滑等级, 0-1
	 * @param {boolean} isLoop
	 * @param {Array} constraint 将计算出来的控制点约束在一个包围盒内
	 *                           比如 [[0, 0], [100, 100]], 这个包围盒会与
	 *                           整个折线的包围盒做一个并集用来约束控制点。
	 * @param {Array} 计算出来的控制点数组
	 */
	function _default(points, smooth, isLoop, constraint) {
	  var cps = [];
	  var v = [];
	  var v1 = [];
	  var v2 = [];
	  var prevPoint;
	  var nextPoint;
	  var min, max;

	  if (constraint) {
	    min = [Infinity, Infinity];
	    max = [-Infinity, -Infinity];

	    for (var i = 0, len = points.length; i < len; i++) {
	      v2Min(min, min, points[i]);
	      v2Max(max, max, points[i]);
	    } // 与指定的包围盒做并集


	    v2Min(min, min, constraint[0]);
	    v2Max(max, max, constraint[1]);
	  }

	  for (var i = 0, len = points.length; i < len; i++) {
	    var point = points[i];

	    if (isLoop) {
	      prevPoint = points[i ? i - 1 : len - 1];
	      nextPoint = points[(i + 1) % len];
	    } else {
	      if (i === 0 || i === len - 1) {
	        cps.push(v2Clone(points[i]));
	        continue;
	      } else {
	        prevPoint = points[i - 1];
	        nextPoint = points[i + 1];
	      }
	    }

	    v2Sub(v, nextPoint, prevPoint); // use degree to scale the handle length

	    v2Scale(v, v, smooth);
	    var d0 = v2Distance(point, prevPoint);
	    var d1 = v2Distance(point, nextPoint);
	    var sum = d0 + d1;

	    if (sum !== 0) {
	      d0 /= sum;
	      d1 /= sum;
	    }

	    v2Scale(v1, v, -d0);
	    v2Scale(v2, v, d1);
	    var cp0 = v2Add([], point, v1);
	    var cp1 = v2Add([], point, v2);

	    if (constraint) {
	      v2Max(cp0, cp0, min);
	      v2Min(cp0, cp0, max);
	      v2Max(cp1, cp1, min);
	      v2Min(cp1, cp1, max);
	    }

	    cps.push(cp0);
	    cps.push(cp1);
	  }

	  if (isLoop) {
	    cps.push(cps.shift());
	  }

	  return cps;
	}

	module.exports = _default;

/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	var Path = __webpack_require__(214);

	var polyHelper = __webpack_require__(232);

	/**
	 * @module zrender/graphic/shape/Polyline
	 */
	var _default = Path.extend({
	  type: 'polyline',
	  shape: {
	    points: null,
	    smooth: false,
	    smoothConstraint: null
	  },
	  style: {
	    stroke: '#000',
	    fill: null
	  },
	  buildPath: function (ctx, shape) {
	    polyHelper.buildPath(ctx, shape, false);
	  }
	});

	module.exports = _default;

/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	var Path = __webpack_require__(214);

	var roundRectHelper = __webpack_require__(197);

	/**
	 * 矩形
	 * @module zrender/graphic/shape/Rect
	 */
	var _default = Path.extend({
	  type: 'rect',
	  shape: {
	    // 左上、右上、右下、左下角的半径依次为r1、r2、r3、r4
	    // r缩写为1         相当于 [1, 1, 1, 1]
	    // r缩写为[1]       相当于 [1, 1, 1, 1]
	    // r缩写为[1, 2]    相当于 [1, 2, 1, 2]
	    // r缩写为[1, 2, 3] 相当于 [1, 2, 3, 2]
	    r: 0,
	    x: 0,
	    y: 0,
	    width: 0,
	    height: 0
	  },
	  buildPath: function (ctx, shape) {
	    var x = shape.x;
	    var y = shape.y;
	    var width = shape.width;
	    var height = shape.height;

	    if (!shape.r) {
	      ctx.rect(x, y, width, height);
	    } else {
	      roundRectHelper.buildPath(ctx, shape);
	    }

	    ctx.closePath();
	    return;
	  }
	});

	module.exports = _default;

/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	var Path = __webpack_require__(214);

	/**
	 * 直线
	 * @module zrender/graphic/shape/Line
	 */
	var _default = Path.extend({
	  type: 'line',
	  shape: {
	    // Start point
	    x1: 0,
	    y1: 0,
	    // End point
	    x2: 0,
	    y2: 0,
	    percent: 1
	  },
	  style: {
	    stroke: '#000',
	    fill: null
	  },
	  buildPath: function (ctx, shape) {
	    var x1 = shape.x1;
	    var y1 = shape.y1;
	    var x2 = shape.x2;
	    var y2 = shape.y2;
	    var percent = shape.percent;

	    if (percent === 0) {
	      return;
	    }

	    ctx.moveTo(x1, y1);

	    if (percent < 1) {
	      x2 = x1 * (1 - percent) + x2 * percent;
	      y2 = y1 * (1 - percent) + y2 * percent;
	    }

	    ctx.lineTo(x2, y2);
	  },

	  /**
	   * Get point at percent
	   * @param  {number} percent
	   * @return {Array.<number>}
	   */
	  pointAt: function (p) {
	    var shape = this.shape;
	    return [shape.x1 * (1 - p) + shape.x2 * p, shape.y1 * (1 - p) + shape.y2 * p];
	  }
	});

	module.exports = _default;

/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	var Path = __webpack_require__(214);

	var vec2 = __webpack_require__(168);

	var _curve = __webpack_require__(216);

	var quadraticSubdivide = _curve.quadraticSubdivide;
	var cubicSubdivide = _curve.cubicSubdivide;
	var quadraticAt = _curve.quadraticAt;
	var cubicAt = _curve.cubicAt;
	var quadraticDerivativeAt = _curve.quadraticDerivativeAt;
	var cubicDerivativeAt = _curve.cubicDerivativeAt;

	/**
	 * 贝塞尔曲线
	 * @module zrender/shape/BezierCurve
	 */
	var out = [];

	function someVectorAt(shape, t, isTangent) {
	  var cpx2 = shape.cpx2;
	  var cpy2 = shape.cpy2;

	  if (cpx2 === null || cpy2 === null) {
	    return [(isTangent ? cubicDerivativeAt : cubicAt)(shape.x1, shape.cpx1, shape.cpx2, shape.x2, t), (isTangent ? cubicDerivativeAt : cubicAt)(shape.y1, shape.cpy1, shape.cpy2, shape.y2, t)];
	  } else {
	    return [(isTangent ? quadraticDerivativeAt : quadraticAt)(shape.x1, shape.cpx1, shape.x2, t), (isTangent ? quadraticDerivativeAt : quadraticAt)(shape.y1, shape.cpy1, shape.y2, t)];
	  }
	}

	var _default = Path.extend({
	  type: 'bezier-curve',
	  shape: {
	    x1: 0,
	    y1: 0,
	    x2: 0,
	    y2: 0,
	    cpx1: 0,
	    cpy1: 0,
	    // cpx2: 0,
	    // cpy2: 0
	    // Curve show percent, for animating
	    percent: 1
	  },
	  style: {
	    stroke: '#000',
	    fill: null
	  },
	  buildPath: function (ctx, shape) {
	    var x1 = shape.x1;
	    var y1 = shape.y1;
	    var x2 = shape.x2;
	    var y2 = shape.y2;
	    var cpx1 = shape.cpx1;
	    var cpy1 = shape.cpy1;
	    var cpx2 = shape.cpx2;
	    var cpy2 = shape.cpy2;
	    var percent = shape.percent;

	    if (percent === 0) {
	      return;
	    }

	    ctx.moveTo(x1, y1);

	    if (cpx2 == null || cpy2 == null) {
	      if (percent < 1) {
	        quadraticSubdivide(x1, cpx1, x2, percent, out);
	        cpx1 = out[1];
	        x2 = out[2];
	        quadraticSubdivide(y1, cpy1, y2, percent, out);
	        cpy1 = out[1];
	        y2 = out[2];
	      }

	      ctx.quadraticCurveTo(cpx1, cpy1, x2, y2);
	    } else {
	      if (percent < 1) {
	        cubicSubdivide(x1, cpx1, cpx2, x2, percent, out);
	        cpx1 = out[1];
	        cpx2 = out[2];
	        x2 = out[3];
	        cubicSubdivide(y1, cpy1, cpy2, y2, percent, out);
	        cpy1 = out[1];
	        cpy2 = out[2];
	        y2 = out[3];
	      }

	      ctx.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, x2, y2);
	    }
	  },

	  /**
	   * Get point at percent
	   * @param  {number} t
	   * @return {Array.<number>}
	   */
	  pointAt: function (t) {
	    return someVectorAt(this.shape, t, false);
	  },

	  /**
	   * Get tangent at percent
	   * @param  {number} t
	   * @return {Array.<number>}
	   */
	  tangentAt: function (t) {
	    var p = someVectorAt(this.shape, t, true);
	    return vec2.normalize(p, p);
	  }
	});

	module.exports = _default;

/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	var Path = __webpack_require__(214);

	/**
	 * 圆弧
	 * @module zrender/graphic/shape/Arc
	 */
	var _default = Path.extend({
	  type: 'arc',
	  shape: {
	    cx: 0,
	    cy: 0,
	    r: 0,
	    startAngle: 0,
	    endAngle: Math.PI * 2,
	    clockwise: true
	  },
	  style: {
	    stroke: '#000',
	    fill: null
	  },
	  buildPath: function (ctx, shape) {
	    var x = shape.cx;
	    var y = shape.cy;
	    var r = Math.max(shape.r, 0);
	    var startAngle = shape.startAngle;
	    var endAngle = shape.endAngle;
	    var clockwise = shape.clockwise;
	    var unitX = Math.cos(startAngle);
	    var unitY = Math.sin(startAngle);
	    ctx.moveTo(unitX * r + x, unitY * r + y);
	    ctx.arc(x, y, r, startAngle, endAngle, !clockwise);
	  }
	});

	module.exports = _default;

/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	var Path = __webpack_require__(214);

	// CompoundPath to improve performance
	var _default = Path.extend({
	  type: 'compound',
	  shape: {
	    paths: null
	  },
	  _updatePathDirty: function () {
	    var dirtyPath = this.__dirtyPath;
	    var paths = this.shape.paths;

	    for (var i = 0; i < paths.length; i++) {
	      // Mark as dirty if any subpath is dirty
	      dirtyPath = dirtyPath || paths[i].__dirtyPath;
	    }

	    this.__dirtyPath = dirtyPath;
	    this.__dirty = this.__dirty || dirtyPath;
	  },
	  beforeBrush: function () {
	    this._updatePathDirty();

	    var paths = this.shape.paths || [];
	    var scale = this.getGlobalScale(); // Update path scale

	    for (var i = 0; i < paths.length; i++) {
	      if (!paths[i].path) {
	        paths[i].createPathProxy();
	      }

	      paths[i].path.setScale(scale[0], scale[1]);
	    }
	  },
	  buildPath: function (ctx, shape) {
	    var paths = shape.paths || [];

	    for (var i = 0; i < paths.length; i++) {
	      paths[i].buildPath(ctx, paths[i].shape, true);
	    }
	  },
	  afterBrush: function () {
	    var paths = this.shape.paths || [];

	    for (var i = 0; i < paths.length; i++) {
	      paths[i].__dirtyPath = false;
	    }
	  },
	  getBoundingRect: function () {
	    this._updatePathDirty();

	    return Path.prototype.getBoundingRect.call(this);
	  }
	});

	module.exports = _default;

/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var Gradient = __webpack_require__(242);

	/**
	 * x, y, x2, y2 are all percent from 0 to 1
	 * @param {number} [x=0]
	 * @param {number} [y=0]
	 * @param {number} [x2=1]
	 * @param {number} [y2=0]
	 * @param {Array.<Object>} colorStops
	 * @param {boolean} [globalCoord=false]
	 */
	var LinearGradient = function (x, y, x2, y2, colorStops, globalCoord) {
	  // Should do nothing more in this constructor. Because gradient can be
	  // declard by `color: {type: 'linear', colorStops: ...}`, where
	  // this constructor will not be called.
	  this.x = x == null ? 0 : x;
	  this.y = y == null ? 0 : y;
	  this.x2 = x2 == null ? 1 : x2;
	  this.y2 = y2 == null ? 0 : y2; // Can be cloned

	  this.type = 'linear'; // If use global coord

	  this.global = globalCoord || false;
	  Gradient.call(this, colorStops);
	};

	LinearGradient.prototype = {
	  constructor: LinearGradient
	};
	zrUtil.inherits(LinearGradient, Gradient);
	var _default = LinearGradient;
	module.exports = _default;

/***/ },
/* 242 */
/***/ function(module, exports) {

	/**
	 * @param {Array.<Object>} colorStops
	 */
	var Gradient = function (colorStops) {
	  this.colorStops = colorStops || [];
	};

	Gradient.prototype = {
	  constructor: Gradient,
	  addColorStop: function (offset, color) {
	    this.colorStops.push({
	      offset: offset,
	      color: color
	    });
	  }
	};
	var _default = Gradient;
	module.exports = _default;

/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var Gradient = __webpack_require__(242);

	/**
	 * x, y, r are all percent from 0 to 1
	 * @param {number} [x=0.5]
	 * @param {number} [y=0.5]
	 * @param {number} [r=0.5]
	 * @param {Array.<Object>} [colorStops]
	 * @param {boolean} [globalCoord=false]
	 */
	var RadialGradient = function (x, y, r, colorStops, globalCoord) {
	  // Should do nothing more in this constructor. Because gradient can be
	  // declard by `color: {type: 'radial', colorStops: ...}`, where
	  // this constructor will not be called.
	  this.x = x == null ? 0.5 : x;
	  this.y = y == null ? 0.5 : y;
	  this.r = r == null ? 0.5 : r; // Can be cloned

	  this.type = 'radial'; // If use global coord

	  this.global = globalCoord || false;
	  Gradient.call(this, colorStops);
	};

	RadialGradient.prototype = {
	  constructor: RadialGradient
	};
	zrUtil.inherits(RadialGradient, Gradient);
	var _default = RadialGradient;
	module.exports = _default;

/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	var makeStyleMapper = __webpack_require__(209);

	var getItemStyle = makeStyleMapper([['fill', 'color'], ['stroke', 'borderColor'], ['lineWidth', 'borderWidth'], ['opacity'], ['shadowBlur'], ['shadowOffsetX'], ['shadowOffsetY'], ['shadowColor'], ['textPosition'], ['textAlign']]);
	var _default = {
	  getItemStyle: function (excludes, includes) {
	    var style = getItemStyle(this, excludes, includes);
	    var lineDash = this.getBorderLineDash();
	    lineDash && (style.lineDash = lineDash);
	    return style;
	  },
	  getBorderLineDash: function () {
	    var lineType = this.get('borderType');
	    return lineType === 'solid' || lineType == null ? null : lineType === 'dashed' ? [5, 5] : [1, 1];
	  }
	};
	module.exports = _default;

/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var Model = __webpack_require__(206);

	var componentUtil = __webpack_require__(246);

	var clazzUtil = __webpack_require__(207);

	var layout = __webpack_require__(247);

	var boxLayoutMixin = __webpack_require__(248);

	/**
	 * Component model
	 *
	 * @module echarts/model/Component
	 */
	var arrayPush = Array.prototype.push;
	/**
	 * @alias module:echarts/model/Component
	 * @constructor
	 * @param {Object} option
	 * @param {module:echarts/model/Model} parentModel
	 * @param {module:echarts/model/Model} ecModel
	 */

	var ComponentModel = Model.extend({
	  type: 'component',

	  /**
	   * @readOnly
	   * @type {string}
	   */
	  id: '',

	  /**
	   * @readOnly
	   */
	  name: '',

	  /**
	   * @readOnly
	   * @type {string}
	   */
	  mainType: '',

	  /**
	   * @readOnly
	   * @type {string}
	   */
	  subType: '',

	  /**
	   * @readOnly
	   * @type {number}
	   */
	  componentIndex: 0,

	  /**
	   * @type {Object}
	   * @protected
	   */
	  defaultOption: null,

	  /**
	   * @type {module:echarts/model/Global}
	   * @readOnly
	   */
	  ecModel: null,

	  /**
	   * key: componentType
	   * value:  Component model list, can not be null.
	   * @type {Object.<string, Array.<module:echarts/model/Model>>}
	   * @readOnly
	   */
	  dependentModels: [],

	  /**
	   * @type {string}
	   * @readOnly
	   */
	  uid: null,

	  /**
	   * Support merge layout params.
	   * Only support 'box' now (left/right/top/bottom/width/height).
	   * @type {string|Object} Object can be {ignoreSize: true}
	   * @readOnly
	   */
	  layoutMode: null,
	  $constructor: function (option, parentModel, ecModel, extraOpt) {
	    Model.call(this, option, parentModel, ecModel, extraOpt);
	    this.uid = componentUtil.getUID('componentModel');
	  },
	  init: function (option, parentModel, ecModel, extraOpt) {
	    this.mergeDefaultAndTheme(option, ecModel);
	  },
	  mergeDefaultAndTheme: function (option, ecModel) {
	    var layoutMode = this.layoutMode;
	    var inputPositionParams = layoutMode ? layout.getLayoutParams(option) : {};
	    var themeModel = ecModel.getTheme();
	    zrUtil.merge(option, themeModel.get(this.mainType));
	    zrUtil.merge(option, this.getDefaultOption());

	    if (layoutMode) {
	      layout.mergeLayoutParam(option, inputPositionParams, layoutMode);
	    }
	  },
	  mergeOption: function (option, extraOpt) {
	    zrUtil.merge(this.option, option, true);
	    var layoutMode = this.layoutMode;

	    if (layoutMode) {
	      layout.mergeLayoutParam(this.option, option, layoutMode);
	    }
	  },
	  // Hooker after init or mergeOption
	  optionUpdated: function (newCptOption, isInit) {},
	  getDefaultOption: function () {
	    if (!clazzUtil.hasOwn(this, '__defaultOption')) {
	      var optList = [];
	      var Class = this.constructor;

	      while (Class) {
	        var opt = Class.prototype.defaultOption;
	        opt && optList.push(opt);
	        Class = Class.superClass;
	      }

	      var defaultOption = {};

	      for (var i = optList.length - 1; i >= 0; i--) {
	        defaultOption = zrUtil.merge(defaultOption, optList[i], true);
	      }

	      clazzUtil.set(this, '__defaultOption', defaultOption);
	    }

	    return clazzUtil.get(this, '__defaultOption');
	  },
	  getReferringComponents: function (mainType) {
	    return this.ecModel.queryComponents({
	      mainType: mainType,
	      index: this.get(mainType + 'Index', true),
	      id: this.get(mainType + 'Id', true)
	    });
	  }
	}); // Reset ComponentModel.extend, add preConstruct.
	// clazzUtil.enableClassExtend(
	//     ComponentModel,
	//     function (option, parentModel, ecModel, extraOpt) {
	//         // Set dependentModels, componentIndex, name, id, mainType, subType.
	//         zrUtil.extend(this, extraOpt);
	//         this.uid = componentUtil.getUID('componentModel');
	//         // this.setReadOnly([
	//         //     'type', 'id', 'uid', 'name', 'mainType', 'subType',
	//         //     'dependentModels', 'componentIndex'
	//         // ]);
	//     }
	// );
	// Add capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.

	clazzUtil.enableClassManagement(ComponentModel, {
	  registerWhenExtend: true
	});
	componentUtil.enableSubTypeDefaulter(ComponentModel); // Add capability of ComponentModel.topologicalTravel.

	componentUtil.enableTopologicalTravel(ComponentModel, getDependencies);

	function getDependencies(componentType) {
	  var deps = [];
	  zrUtil.each(ComponentModel.getClassesByMainType(componentType), function (Clazz) {
	    arrayPush.apply(deps, Clazz.prototype.dependencies || []);
	  }); // Ensure main type

	  return zrUtil.map(deps, function (type) {
	    return clazzUtil.parseClassType(type).main;
	  });
	}

	zrUtil.mixin(ComponentModel, boxLayoutMixin);
	var _default = ComponentModel;
	module.exports = _default;

/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var _clazz = __webpack_require__(207);

	var parseClassType = _clazz.parseClassType;
	var base = 0;
	var DELIMITER = '_';
	/**
	 * @public
	 * @param {string} type
	 * @return {string}
	 */

	function getUID(type) {
	  // Considering the case of crossing js context,
	  // use Math.random to make id as unique as possible.
	  return [type || '', base++, Math.random()].join(DELIMITER);
	}
	/**
	 * @inner
	 */


	function enableSubTypeDefaulter(entity) {
	  var subTypeDefaulters = {};

	  entity.registerSubTypeDefaulter = function (componentType, defaulter) {
	    componentType = parseClassType(componentType);
	    subTypeDefaulters[componentType.main] = defaulter;
	  };

	  entity.determineSubType = function (componentType, option) {
	    var type = option.type;

	    if (!type) {
	      var componentTypeMain = parseClassType(componentType).main;

	      if (entity.hasSubTypes(componentType) && subTypeDefaulters[componentTypeMain]) {
	        type = subTypeDefaulters[componentTypeMain](option);
	      }
	    }

	    return type;
	  };

	  return entity;
	}
	/**
	 * Topological travel on Activity Network (Activity On Vertices).
	 * Dependencies is defined in Model.prototype.dependencies, like ['xAxis', 'yAxis'].
	 *
	 * If 'xAxis' or 'yAxis' is absent in componentTypeList, just ignore it in topology.
	 *
	 * If there is circle dependencey, Error will be thrown.
	 *
	 */


	function enableTopologicalTravel(entity, dependencyGetter) {
	  /**
	   * @public
	   * @param {Array.<string>} targetNameList Target Component type list.
	   *                                           Can be ['aa', 'bb', 'aa.xx']
	   * @param {Array.<string>} fullNameList By which we can build dependency graph.
	   * @param {Function} callback Params: componentType, dependencies.
	   * @param {Object} context Scope of callback.
	   */
	  entity.topologicalTravel = function (targetNameList, fullNameList, callback, context) {
	    if (!targetNameList.length) {
	      return;
	    }

	    var result = makeDepndencyGraph(fullNameList);
	    var graph = result.graph;
	    var stack = result.noEntryList;
	    var targetNameSet = {};
	    zrUtil.each(targetNameList, function (name) {
	      targetNameSet[name] = true;
	    });

	    while (stack.length) {
	      var currComponentType = stack.pop();
	      var currVertex = graph[currComponentType];
	      var isInTargetNameSet = !!targetNameSet[currComponentType];

	      if (isInTargetNameSet) {
	        callback.call(context, currComponentType, currVertex.originalDeps.slice());
	        delete targetNameSet[currComponentType];
	      }

	      zrUtil.each(currVertex.successor, isInTargetNameSet ? removeEdgeAndAdd : removeEdge);
	    }

	    zrUtil.each(targetNameSet, function () {
	      throw new Error('Circle dependency may exists');
	    });

	    function removeEdge(succComponentType) {
	      graph[succComponentType].entryCount--;

	      if (graph[succComponentType].entryCount === 0) {
	        stack.push(succComponentType);
	      }
	    } // Consider this case: legend depends on series, and we call
	    // chart.setOption({series: [...]}), where only series is in option.
	    // If we do not have 'removeEdgeAndAdd', legendModel.mergeOption will
	    // not be called, but only sereis.mergeOption is called. Thus legend
	    // have no chance to update its local record about series (like which
	    // name of series is available in legend).


	    function removeEdgeAndAdd(succComponentType) {
	      targetNameSet[succComponentType] = true;
	      removeEdge(succComponentType);
	    }
	  };
	  /**
	   * DepndencyGraph: {Object}
	   * key: conponentType,
	   * value: {
	   *     successor: [conponentTypes...],
	   *     originalDeps: [conponentTypes...],
	   *     entryCount: {number}
	   * }
	   */


	  function makeDepndencyGraph(fullNameList) {
	    var graph = {};
	    var noEntryList = [];
	    zrUtil.each(fullNameList, function (name) {
	      var thisItem = createDependencyGraphItem(graph, name);
	      var originalDeps = thisItem.originalDeps = dependencyGetter(name);
	      var availableDeps = getAvailableDependencies(originalDeps, fullNameList);
	      thisItem.entryCount = availableDeps.length;

	      if (thisItem.entryCount === 0) {
	        noEntryList.push(name);
	      }

	      zrUtil.each(availableDeps, function (dependentName) {
	        if (zrUtil.indexOf(thisItem.predecessor, dependentName) < 0) {
	          thisItem.predecessor.push(dependentName);
	        }

	        var thatItem = createDependencyGraphItem(graph, dependentName);

	        if (zrUtil.indexOf(thatItem.successor, dependentName) < 0) {
	          thatItem.successor.push(name);
	        }
	      });
	    });
	    return {
	      graph: graph,
	      noEntryList: noEntryList
	    };
	  }

	  function createDependencyGraphItem(graph, name) {
	    if (!graph[name]) {
	      graph[name] = {
	        predecessor: [],
	        successor: []
	      };
	    }

	    return graph[name];
	  }

	  function getAvailableDependencies(originalDeps, fullNameList) {
	    var availableDeps = [];
	    zrUtil.each(originalDeps, function (dep) {
	      zrUtil.indexOf(fullNameList, dep) >= 0 && availableDeps.push(dep);
	    });
	    return availableDeps;
	  }
	}

	exports.getUID = getUID;
	exports.enableSubTypeDefaulter = enableSubTypeDefaulter;
	exports.enableTopologicalTravel = enableTopologicalTravel;

/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var BoundingRect = __webpack_require__(184);

	var _number = __webpack_require__(205);

	var parsePercent = _number.parsePercent;

	var formatUtil = __webpack_require__(204);

	// Layout helpers for each component positioning
	var each = zrUtil.each;
	/**
	 * @public
	 */

	var LOCATION_PARAMS = ['left', 'right', 'top', 'bottom', 'width', 'height'];
	/**
	 * @public
	 */

	var HV_NAMES = [['width', 'left', 'right'], ['height', 'top', 'bottom']];

	function boxLayout(orient, group, gap, maxWidth, maxHeight) {
	  var x = 0;
	  var y = 0;

	  if (maxWidth == null) {
	    maxWidth = Infinity;
	  }

	  if (maxHeight == null) {
	    maxHeight = Infinity;
	  }

	  var currentLineMaxSize = 0;
	  group.eachChild(function (child, idx) {
	    var position = child.position;
	    var rect = child.getBoundingRect();
	    var nextChild = group.childAt(idx + 1);
	    var nextChildRect = nextChild && nextChild.getBoundingRect();
	    var nextX;
	    var nextY;

	    if (orient === 'horizontal') {
	      var moveX = rect.width + (nextChildRect ? -nextChildRect.x + rect.x : 0);
	      nextX = x + moveX; // Wrap when width exceeds maxWidth or meet a `newline` group
	      // FIXME compare before adding gap?

	      if (nextX > maxWidth || child.newline) {
	        x = 0;
	        nextX = moveX;
	        y += currentLineMaxSize + gap;
	        currentLineMaxSize = rect.height;
	      } else {
	        // FIXME: consider rect.y is not `0`?
	        currentLineMaxSize = Math.max(currentLineMaxSize, rect.height);
	      }
	    } else {
	      var moveY = rect.height + (nextChildRect ? -nextChildRect.y + rect.y : 0);
	      nextY = y + moveY; // Wrap when width exceeds maxHeight or meet a `newline` group

	      if (nextY > maxHeight || child.newline) {
	        x += currentLineMaxSize + gap;
	        y = 0;
	        nextY = moveY;
	        currentLineMaxSize = rect.width;
	      } else {
	        currentLineMaxSize = Math.max(currentLineMaxSize, rect.width);
	      }
	    }

	    if (child.newline) {
	      return;
	    }

	    position[0] = x;
	    position[1] = y;
	    orient === 'horizontal' ? x = nextX + gap : y = nextY + gap;
	  });
	}
	/**
	 * VBox or HBox layouting
	 * @param {string} orient
	 * @param {module:zrender/container/Group} group
	 * @param {number} gap
	 * @param {number} [width=Infinity]
	 * @param {number} [height=Infinity]
	 */


	var box = boxLayout;
	/**
	 * VBox layouting
	 * @param {module:zrender/container/Group} group
	 * @param {number} gap
	 * @param {number} [width=Infinity]
	 * @param {number} [height=Infinity]
	 */

	var vbox = zrUtil.curry(boxLayout, 'vertical');
	/**
	 * HBox layouting
	 * @param {module:zrender/container/Group} group
	 * @param {number} gap
	 * @param {number} [width=Infinity]
	 * @param {number} [height=Infinity]
	 */

	var hbox = zrUtil.curry(boxLayout, 'horizontal');
	/**
	 * If x or x2 is not specified or 'center' 'left' 'right',
	 * the width would be as long as possible.
	 * If y or y2 is not specified or 'middle' 'top' 'bottom',
	 * the height would be as long as possible.
	 *
	 * @param {Object} positionInfo
	 * @param {number|string} [positionInfo.x]
	 * @param {number|string} [positionInfo.y]
	 * @param {number|string} [positionInfo.x2]
	 * @param {number|string} [positionInfo.y2]
	 * @param {Object} containerRect {width, height}
	 * @param {string|number} margin
	 * @return {Object} {width, height}
	 */

	function getAvailableSize(positionInfo, containerRect, margin) {
	  var containerWidth = containerRect.width;
	  var containerHeight = containerRect.height;
	  var x = parsePercent(positionInfo.x, containerWidth);
	  var y = parsePercent(positionInfo.y, containerHeight);
	  var x2 = parsePercent(positionInfo.x2, containerWidth);
	  var y2 = parsePercent(positionInfo.y2, containerHeight);
	  (isNaN(x) || isNaN(parseFloat(positionInfo.x))) && (x = 0);
	  (isNaN(x2) || isNaN(parseFloat(positionInfo.x2))) && (x2 = containerWidth);
	  (isNaN(y) || isNaN(parseFloat(positionInfo.y))) && (y = 0);
	  (isNaN(y2) || isNaN(parseFloat(positionInfo.y2))) && (y2 = containerHeight);
	  margin = formatUtil.normalizeCssArray(margin || 0);
	  return {
	    width: Math.max(x2 - x - margin[1] - margin[3], 0),
	    height: Math.max(y2 - y - margin[0] - margin[2], 0)
	  };
	}
	/**
	 * Parse position info.
	 *
	 * @param {Object} positionInfo
	 * @param {number|string} [positionInfo.left]
	 * @param {number|string} [positionInfo.top]
	 * @param {number|string} [positionInfo.right]
	 * @param {number|string} [positionInfo.bottom]
	 * @param {number|string} [positionInfo.width]
	 * @param {number|string} [positionInfo.height]
	 * @param {number|string} [positionInfo.aspect] Aspect is width / height
	 * @param {Object} containerRect
	 * @param {string|number} [margin]
	 *
	 * @return {module:zrender/core/BoundingRect}
	 */


	function getLayoutRect(positionInfo, containerRect, margin) {
	  margin = formatUtil.normalizeCssArray(margin || 0);
	  var containerWidth = containerRect.width;
	  var containerHeight = containerRect.height;
	  var left = parsePercent(positionInfo.left, containerWidth);
	  var top = parsePercent(positionInfo.top, containerHeight);
	  var right = parsePercent(positionInfo.right, containerWidth);
	  var bottom = parsePercent(positionInfo.bottom, containerHeight);
	  var width = parsePercent(positionInfo.width, containerWidth);
	  var height = parsePercent(positionInfo.height, containerHeight);
	  var verticalMargin = margin[2] + margin[0];
	  var horizontalMargin = margin[1] + margin[3];
	  var aspect = positionInfo.aspect; // If width is not specified, calculate width from left and right

	  if (isNaN(width)) {
	    width = containerWidth - right - horizontalMargin - left;
	  }

	  if (isNaN(height)) {
	    height = containerHeight - bottom - verticalMargin - top;
	  }

	  if (aspect != null) {
	    // If width and height are not given
	    // 1. Graph should not exceeds the container
	    // 2. Aspect must be keeped
	    // 3. Graph should take the space as more as possible
	    // FIXME
	    // Margin is not considered, because there is no case that both
	    // using margin and aspect so far.
	    if (isNaN(width) && isNaN(height)) {
	      if (aspect > containerWidth / containerHeight) {
	        width = containerWidth * 0.8;
	      } else {
	        height = containerHeight * 0.8;
	      }
	    } // Calculate width or height with given aspect


	    if (isNaN(width)) {
	      width = aspect * height;
	    }

	    if (isNaN(height)) {
	      height = width / aspect;
	    }
	  } // If left is not specified, calculate left from right and width


	  if (isNaN(left)) {
	    left = containerWidth - right - width - horizontalMargin;
	  }

	  if (isNaN(top)) {
	    top = containerHeight - bottom - height - verticalMargin;
	  } // Align left and top


	  switch (positionInfo.left || positionInfo.right) {
	    case 'center':
	      left = containerWidth / 2 - width / 2 - margin[3];
	      break;

	    case 'right':
	      left = containerWidth - width - horizontalMargin;
	      break;
	  }

	  switch (positionInfo.top || positionInfo.bottom) {
	    case 'middle':
	    case 'center':
	      top = containerHeight / 2 - height / 2 - margin[0];
	      break;

	    case 'bottom':
	      top = containerHeight - height - verticalMargin;
	      break;
	  } // If something is wrong and left, top, width, height are calculated as NaN


	  left = left || 0;
	  top = top || 0;

	  if (isNaN(width)) {
	    // Width may be NaN if only one value is given except width
	    width = containerWidth - horizontalMargin - left - (right || 0);
	  }

	  if (isNaN(height)) {
	    // Height may be NaN if only one value is given except height
	    height = containerHeight - verticalMargin - top - (bottom || 0);
	  }

	  var rect = new BoundingRect(left + margin[3], top + margin[0], width, height);
	  rect.margin = margin;
	  return rect;
	}
	/**
	 * Position a zr element in viewport
	 *  Group position is specified by either
	 *  {left, top}, {right, bottom}
	 *  If all properties exists, right and bottom will be igonred.
	 *
	 * Logic:
	 *     1. Scale (against origin point in parent coord)
	 *     2. Rotate (against origin point in parent coord)
	 *     3. Traslate (with el.position by this method)
	 * So this method only fixes the last step 'Traslate', which does not affect
	 * scaling and rotating.
	 *
	 * If be called repeatly with the same input el, the same result will be gotten.
	 *
	 * @param {module:zrender/Element} el Should have `getBoundingRect` method.
	 * @param {Object} positionInfo
	 * @param {number|string} [positionInfo.left]
	 * @param {number|string} [positionInfo.top]
	 * @param {number|string} [positionInfo.right]
	 * @param {number|string} [positionInfo.bottom]
	 * @param {number|string} [positionInfo.width] Only for opt.boundingModel: 'raw'
	 * @param {number|string} [positionInfo.height] Only for opt.boundingModel: 'raw'
	 * @param {Object} containerRect
	 * @param {string|number} margin
	 * @param {Object} [opt]
	 * @param {Array.<number>} [opt.hv=[1,1]] Only horizontal or only vertical.
	 * @param {Array.<number>} [opt.boundingMode='all']
	 *        Specify how to calculate boundingRect when locating.
	 *        'all': Position the boundingRect that is transformed and uioned
	 *               both itself and its descendants.
	 *               This mode simplies confine the elements in the bounding
	 *               of their container (e.g., using 'right: 0').
	 *        'raw': Position the boundingRect that is not transformed and only itself.
	 *               This mode is useful when you want a element can overflow its
	 *               container. (Consider a rotated circle needs to be located in a corner.)
	 *               In this mode positionInfo.width/height can only be number.
	 */


	function positionElement(el, positionInfo, containerRect, margin, opt) {
	  var h = !opt || !opt.hv || opt.hv[0];
	  var v = !opt || !opt.hv || opt.hv[1];
	  var boundingMode = opt && opt.boundingMode || 'all';

	  if (!h && !v) {
	    return;
	  }

	  var rect;

	  if (boundingMode === 'raw') {
	    rect = el.type === 'group' ? new BoundingRect(0, 0, +positionInfo.width || 0, +positionInfo.height || 0) : el.getBoundingRect();
	  } else {
	    rect = el.getBoundingRect();

	    if (el.needLocalTransform()) {
	      var transform = el.getLocalTransform(); // Notice: raw rect may be inner object of el,
	      // which should not be modified.

	      rect = rect.clone();
	      rect.applyTransform(transform);
	    }
	  } // The real width and height can not be specified but calculated by the given el.


	  positionInfo = getLayoutRect(zrUtil.defaults({
	    width: rect.width,
	    height: rect.height
	  }, positionInfo), containerRect, margin); // Because 'tranlate' is the last step in transform
	  // (see zrender/core/Transformable#getLocalTransfrom),
	  // we can just only modify el.position to get final result.

	  var elPos = el.position;
	  var dx = h ? positionInfo.x - rect.x : 0;
	  var dy = v ? positionInfo.y - rect.y : 0;
	  el.attr('position', boundingMode === 'raw' ? [dx, dy] : [elPos[0] + dx, elPos[1] + dy]);
	}
	/**
	 * @param {Object} option Contains some of the properties in HV_NAMES.
	 * @param {number} hvIdx 0: horizontal; 1: vertical.
	 */


	function sizeCalculable(option, hvIdx) {
	  return option[HV_NAMES[hvIdx][0]] != null || option[HV_NAMES[hvIdx][1]] != null && option[HV_NAMES[hvIdx][2]] != null;
	}
	/**
	 * Consider Case:
	 * When defulat option has {left: 0, width: 100}, and we set {right: 0}
	 * through setOption or media query, using normal zrUtil.merge will cause
	 * {right: 0} does not take effect.
	 *
	 * @example
	 * ComponentModel.extend({
	 *     init: function () {
	 *         ...
	 *         var inputPositionParams = layout.getLayoutParams(option);
	 *         this.mergeOption(inputPositionParams);
	 *     },
	 *     mergeOption: function (newOption) {
	 *         newOption && zrUtil.merge(thisOption, newOption, true);
	 *         layout.mergeLayoutParam(thisOption, newOption);
	 *     }
	 * });
	 *
	 * @param {Object} targetOption
	 * @param {Object} newOption
	 * @param {Object|string} [opt]
	 * @param {boolean|Array.<boolean>} [opt.ignoreSize=false] Used for the components
	 *  that width (or height) should not be calculated by left and right (or top and bottom).
	 */


	function mergeLayoutParam(targetOption, newOption, opt) {
	  !zrUtil.isObject(opt) && (opt = {});
	  var ignoreSize = opt.ignoreSize;
	  !zrUtil.isArray(ignoreSize) && (ignoreSize = [ignoreSize, ignoreSize]);
	  var hResult = merge(HV_NAMES[0], 0);
	  var vResult = merge(HV_NAMES[1], 1);
	  copy(HV_NAMES[0], targetOption, hResult);
	  copy(HV_NAMES[1], targetOption, vResult);

	  function merge(names, hvIdx) {
	    var newParams = {};
	    var newValueCount = 0;
	    var merged = {};
	    var mergedValueCount = 0;
	    var enoughParamNumber = 2;
	    each(names, function (name) {
	      merged[name] = targetOption[name];
	    });
	    each(names, function (name) {
	      // Consider case: newOption.width is null, which is
	      // set by user for removing width setting.
	      hasProp(newOption, name) && (newParams[name] = merged[name] = newOption[name]);
	      hasValue(newParams, name) && newValueCount++;
	      hasValue(merged, name) && mergedValueCount++;
	    });

	    if (ignoreSize[hvIdx]) {
	      // Only one of left/right is premitted to exist.
	      if (hasValue(newOption, names[1])) {
	        merged[names[2]] = null;
	      } else if (hasValue(newOption, names[2])) {
	        merged[names[1]] = null;
	      }

	      return merged;
	    } // Case: newOption: {width: ..., right: ...},
	    // or targetOption: {right: ...} and newOption: {width: ...},
	    // There is no conflict when merged only has params count
	    // little than enoughParamNumber.


	    if (mergedValueCount === enoughParamNumber || !newValueCount) {
	      return merged;
	    } // Case: newOption: {width: ..., right: ...},
	    // Than we can make sure user only want those two, and ignore
	    // all origin params in targetOption.
	    else if (newValueCount >= enoughParamNumber) {
	        return newParams;
	      } else {
	        // Chose another param from targetOption by priority.
	        for (var i = 0; i < names.length; i++) {
	          var name = names[i];

	          if (!hasProp(newParams, name) && hasProp(targetOption, name)) {
	            newParams[name] = targetOption[name];
	            break;
	          }
	        }

	        return newParams;
	      }
	  }

	  function hasProp(obj, name) {
	    return obj.hasOwnProperty(name);
	  }

	  function hasValue(obj, name) {
	    return obj[name] != null && obj[name] !== 'auto';
	  }

	  function copy(names, target, source) {
	    each(names, function (name) {
	      target[name] = source[name];
	    });
	  }
	}
	/**
	 * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.
	 * @param {Object} source
	 * @return {Object} Result contains those props.
	 */


	function getLayoutParams(source) {
	  return copyLayoutParams({}, source);
	}
	/**
	 * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.
	 * @param {Object} source
	 * @return {Object} Result contains those props.
	 */


	function copyLayoutParams(target, source) {
	  source && target && each(LOCATION_PARAMS, function (name) {
	    source.hasOwnProperty(name) && (target[name] = source[name]);
	  });
	  return target;
	}

	exports.LOCATION_PARAMS = LOCATION_PARAMS;
	exports.HV_NAMES = HV_NAMES;
	exports.box = box;
	exports.vbox = vbox;
	exports.hbox = hbox;
	exports.getAvailableSize = getAvailableSize;
	exports.getLayoutRect = getLayoutRect;
	exports.positionElement = positionElement;
	exports.sizeCalculable = sizeCalculable;
	exports.mergeLayoutParam = mergeLayoutParam;
	exports.getLayoutParams = getLayoutParams;
	exports.copyLayoutParams = copyLayoutParams;

/***/ },
/* 248 */
/***/ function(module, exports) {

	var _default = {
	  getBoxLayoutParams: function () {
	    return {
	      left: this.get('left'),
	      top: this.get('top'),
	      right: this.get('right'),
	      bottom: this.get('bottom'),
	      width: this.get('width'),
	      height: this.get('height')
	    };
	  }
	};
	module.exports = _default;

/***/ },
/* 249 */
/***/ function(module, exports) {

	var platform = ''; // Navigator not exists in node

	if (typeof navigator !== 'undefined') {
	  platform = navigator.platform || '';
	}

	var _default = {
	  // 全图默认背景
	  // backgroundColor: 'rgba(0,0,0,0)',
	  // https://dribbble.com/shots/1065960-Infographic-Pie-chart-visualization
	  // color: ['#5793f3', '#d14a61', '#fd9c35', '#675bba', '#fec42c', '#dd4444', '#d4df5a', '#cd4870'],
	  // 浅色
	  // color: ['#bcd3bb', '#e88f70', '#edc1a5', '#9dc5c8', '#e1e8c8', '#7b7c68', '#e5b5b5', '#f0b489', '#928ea8', '#bda29a'],
	  // color: ['#cc5664', '#9bd6ec', '#ea946e', '#8acaaa', '#f1ec64', '#ee8686', '#a48dc1', '#5da6bc', '#b9dcae'],
	  // 深色
	  color: ['#c23531', '#2f4554', '#61a0a8', '#d48265', '#91c7ae', '#749f83', '#ca8622', '#bda29a', '#6e7074', '#546570', '#c4ccd3'],
	  // 默认需要 Grid 配置项
	  // grid: {},
	  // 主题，主题
	  textStyle: {
	    // color: '#000',
	    // decoration: 'none',
	    // PENDING
	    fontFamily: platform.match(/^Win/) ? 'Microsoft YaHei' : 'sans-serif',
	    // fontFamily: 'Arial, Verdana, sans-serif',
	    fontSize: 12,
	    fontStyle: 'normal',
	    fontWeight: 'normal'
	  },
	  // http://blogs.adobe.com/webplatform/2014/02/24/using-blend-modes-in-html-canvas/
	  // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation
	  // Default is source-over
	  blendMode: null,
	  animation: 'auto',
	  animationDuration: 1000,
	  animationDurationUpdate: 300,
	  animationEasing: 'exponentialOut',
	  animationEasingUpdate: 'cubicOut',
	  animationThreshold: 2000,
	  // Configuration for progressive/incremental rendering
	  progressiveThreshold: 3000,
	  progressive: 400,
	  // Threshold of if use single hover layer to optimize.
	  // It is recommended that `hoverLayerThreshold` is equivalent to or less than
	  // `progressiveThreshold`, otherwise hover will cause restart of progressive,
	  // which is unexpected.
	  // see example <echarts/test/heatmap-large.html>.
	  hoverLayerThreshold: 3000,
	  // See: module:echarts/scale/Time
	  useUTC: false
	};
	module.exports = _default;

/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	var _clazz = __webpack_require__(207);

	var set = _clazz.set;
	var get = _clazz.get;
	var _default = {
	  clearColorPalette: function () {
	    set(this, 'colorIdx', 0);
	    set(this, 'colorNameMap', {});
	  },
	  getColorFromPalette: function (name, scope) {
	    scope = scope || this;
	    var colorIdx = get(scope, 'colorIdx') || 0;
	    var colorNameMap = get(scope, 'colorNameMap') || set(scope, 'colorNameMap', {}); // Use `hasOwnProperty` to avoid conflict with Object.prototype.

	    if (colorNameMap.hasOwnProperty(name)) {
	      return colorNameMap[name];
	    }

	    var colorPalette = this.get('color', true) || [];

	    if (!colorPalette.length) {
	      return;
	    }

	    var color = colorPalette[colorIdx];

	    if (name) {
	      colorNameMap[name] = color;
	    }

	    set(scope, 'colorIdx', (colorIdx + 1) % colorPalette.length);
	    return color;
	  }
	};
	module.exports = _default;

/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var echartsAPIList = ['getDom', 'getZr', 'getWidth', 'getHeight', 'getDevicePixelRatio', 'dispatchAction', 'isDisposed', 'on', 'off', 'getDataURL', 'getConnectedDataURL', 'getModel', 'getOption', 'getViewOfComponentModel', 'getViewOfSeriesModel']; // And `getCoordinateSystems` and `getComponentByElement` will be injected in echarts.js

	function ExtensionAPI(chartInstance) {
	  zrUtil.each(echartsAPIList, function (name) {
	    this[name] = zrUtil.bind(chartInstance[name], chartInstance);
	  }, this);
	}

	var _default = ExtensionAPI;
	module.exports = _default;

/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var coordinateSystemCreators = {};

	function CoordinateSystemManager() {
	  this._coordinateSystems = [];
	}

	CoordinateSystemManager.prototype = {
	  constructor: CoordinateSystemManager,
	  create: function (ecModel, api) {
	    var coordinateSystems = [];
	    zrUtil.each(coordinateSystemCreators, function (creater, type) {
	      var list = creater.create(ecModel, api);
	      coordinateSystems = coordinateSystems.concat(list || []);
	    });
	    this._coordinateSystems = coordinateSystems;
	  },
	  update: function (ecModel, api) {
	    zrUtil.each(this._coordinateSystems, function (coordSys) {
	      // FIXME MUST have
	      coordSys.update && coordSys.update(ecModel, api);
	    });
	  },
	  getCoordinateSystems: function () {
	    return this._coordinateSystems.slice();
	  }
	};

	CoordinateSystemManager.register = function (type, coordinateSystemCreator) {
	  coordinateSystemCreators[type] = coordinateSystemCreator;
	};

	CoordinateSystemManager.get = function (type) {
	  return coordinateSystemCreators[type];
	};

	var _default = CoordinateSystemManager;
	module.exports = _default;

/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var modelUtil = __webpack_require__(203);

	var ComponentModel = __webpack_require__(245);

	/**
	 * ECharts option manager
	 *
	 * @module {echarts/model/OptionManager}
	 */
	var each = zrUtil.each;
	var clone = zrUtil.clone;
	var map = zrUtil.map;
	var merge = zrUtil.merge;
	var QUERY_REG = /^(min|max)?(.+)$/;
	/**
	 * TERM EXPLANATIONS:
	 *
	 * [option]:
	 *
	 *     An object that contains definitions of components. For example:
	 *     var option = {
	 *         title: {...},
	 *         legend: {...},
	 *         visualMap: {...},
	 *         series: [
	 *             {data: [...]},
	 *             {data: [...]},
	 *             ...
	 *         ]
	 *     };
	 *
	 * [rawOption]:
	 *
	 *     An object input to echarts.setOption. 'rawOption' may be an
	 *     'option', or may be an object contains multi-options. For example:
	 *     var option = {
	 *         baseOption: {
	 *             title: {...},
	 *             legend: {...},
	 *             series: [
	 *                 {data: [...]},
	 *                 {data: [...]},
	 *                 ...
	 *             ]
	 *         },
	 *         timeline: {...},
	 *         options: [
	 *             {title: {...}, series: {data: [...]}},
	 *             {title: {...}, series: {data: [...]}},
	 *             ...
	 *         ],
	 *         media: [
	 *             {
	 *                 query: {maxWidth: 320},
	 *                 option: {series: {x: 20}, visualMap: {show: false}}
	 *             },
	 *             {
	 *                 query: {minWidth: 320, maxWidth: 720},
	 *                 option: {series: {x: 500}, visualMap: {show: true}}
	 *             },
	 *             {
	 *                 option: {series: {x: 1200}, visualMap: {show: true}}
	 *             }
	 *         ]
	 *     };
	 *
	 * @alias module:echarts/model/OptionManager
	 * @param {module:echarts/ExtensionAPI} api
	 */

	function OptionManager(api) {
	  /**
	   * @private
	   * @type {module:echarts/ExtensionAPI}
	   */
	  this._api = api;
	  /**
	   * @private
	   * @type {Array.<number>}
	   */

	  this._timelineOptions = [];
	  /**
	   * @private
	   * @type {Array.<Object>}
	   */

	  this._mediaList = [];
	  /**
	   * @private
	   * @type {Object}
	   */

	  this._mediaDefault;
	  /**
	   * -1, means default.
	   * empty means no media.
	   * @private
	   * @type {Array.<number>}
	   */

	  this._currentMediaIndices = [];
	  /**
	   * @private
	   * @type {Object}
	   */

	  this._optionBackup;
	  /**
	   * @private
	   * @type {Object}
	   */

	  this._newBaseOption;
	} // timeline.notMerge is not supported in ec3. Firstly there is rearly
	// case that notMerge is needed. Secondly supporting 'notMerge' requires
	// rawOption cloned and backuped when timeline changed, which does no
	// good to performance. What's more, that both timeline and setOption
	// method supply 'notMerge' brings complex and some problems.
	// Consider this case:
	// (step1) chart.setOption({timeline: {notMerge: false}, ...}, false);
	// (step2) chart.setOption({timeline: {notMerge: true}, ...}, false);


	OptionManager.prototype = {
	  constructor: OptionManager,

	  /**
	   * @public
	   * @param {Object} rawOption Raw option.
	   * @param {module:echarts/model/Global} ecModel
	   * @param {Array.<Function>} optionPreprocessorFuncs
	   * @return {Object} Init option
	   */
	  setOption: function (rawOption, optionPreprocessorFuncs) {
	    rawOption = clone(rawOption, true); // FIXME
	    // 如果 timeline options 或者 media 中设置了某个属性，而baseOption中没有设置，则进行警告。

	    var oldOptionBackup = this._optionBackup;
	    var newParsedOption = parseRawOption.call(this, rawOption, optionPreprocessorFuncs, !oldOptionBackup);
	    this._newBaseOption = newParsedOption.baseOption; // For setOption at second time (using merge mode);

	    if (oldOptionBackup) {
	      // Only baseOption can be merged.
	      mergeOption(oldOptionBackup.baseOption, newParsedOption.baseOption); // For simplicity, timeline options and media options do not support merge,
	      // that is, if you `setOption` twice and both has timeline options, the latter
	      // timeline opitons will not be merged to the formers, but just substitude them.

	      if (newParsedOption.timelineOptions.length) {
	        oldOptionBackup.timelineOptions = newParsedOption.timelineOptions;
	      }

	      if (newParsedOption.mediaList.length) {
	        oldOptionBackup.mediaList = newParsedOption.mediaList;
	      }

	      if (newParsedOption.mediaDefault) {
	        oldOptionBackup.mediaDefault = newParsedOption.mediaDefault;
	      }
	    } else {
	      this._optionBackup = newParsedOption;
	    }
	  },

	  /**
	   * @param {boolean} isRecreate
	   * @return {Object}
	   */
	  mountOption: function (isRecreate) {
	    var optionBackup = this._optionBackup; // TODO
	    // 如果没有reset功能则不clone。

	    this._timelineOptions = map(optionBackup.timelineOptions, clone);
	    this._mediaList = map(optionBackup.mediaList, clone);
	    this._mediaDefault = clone(optionBackup.mediaDefault);
	    this._currentMediaIndices = [];
	    return clone(isRecreate // this._optionBackup.baseOption, which is created at the first `setOption`
	    // called, and is merged into every new option by inner method `mergeOption`
	    // each time `setOption` called, can be only used in `isRecreate`, because
	    // its reliability is under suspicion. In other cases option merge is
	    // performed by `model.mergeOption`.
	    ? optionBackup.baseOption : this._newBaseOption);
	  },

	  /**
	   * @param {module:echarts/model/Global} ecModel
	   * @return {Object}
	   */
	  getTimelineOption: function (ecModel) {
	    var option;
	    var timelineOptions = this._timelineOptions;

	    if (timelineOptions.length) {
	      // getTimelineOption can only be called after ecModel inited,
	      // so we can get currentIndex from timelineModel.
	      var timelineModel = ecModel.getComponent('timeline');

	      if (timelineModel) {
	        option = clone(timelineOptions[timelineModel.getCurrentIndex()], true);
	      }
	    }

	    return option;
	  },

	  /**
	   * @param {module:echarts/model/Global} ecModel
	   * @return {Array.<Object>}
	   */
	  getMediaOption: function (ecModel) {
	    var ecWidth = this._api.getWidth();

	    var ecHeight = this._api.getHeight();

	    var mediaList = this._mediaList;
	    var mediaDefault = this._mediaDefault;
	    var indices = [];
	    var result = []; // No media defined.

	    if (!mediaList.length && !mediaDefault) {
	      return result;
	    } // Multi media may be applied, the latter defined media has higher priority.


	    for (var i = 0, len = mediaList.length; i < len; i++) {
	      if (applyMediaQuery(mediaList[i].query, ecWidth, ecHeight)) {
	        indices.push(i);
	      }
	    } // FIXME
	    // 是否mediaDefault应该强制用户设置，否则可能修改不能回归。


	    if (!indices.length && mediaDefault) {
	      indices = [-1];
	    }

	    if (indices.length && !indicesEquals(indices, this._currentMediaIndices)) {
	      result = map(indices, function (index) {
	        return clone(index === -1 ? mediaDefault.option : mediaList[index].option);
	      });
	    } // Otherwise return nothing.


	    this._currentMediaIndices = indices;
	    return result;
	  }
	};

	function parseRawOption(rawOption, optionPreprocessorFuncs, isNew) {
	  var timelineOptions = [];
	  var mediaList = [];
	  var mediaDefault;
	  var baseOption; // Compatible with ec2.

	  var timelineOpt = rawOption.timeline;

	  if (rawOption.baseOption) {
	    baseOption = rawOption.baseOption;
	  } // For timeline


	  if (timelineOpt || rawOption.options) {
	    baseOption = baseOption || {};
	    timelineOptions = (rawOption.options || []).slice();
	  } // For media query


	  if (rawOption.media) {
	    baseOption = baseOption || {};
	    var media = rawOption.media;
	    each(media, function (singleMedia) {
	      if (singleMedia && singleMedia.option) {
	        if (singleMedia.query) {
	          mediaList.push(singleMedia);
	        } else if (!mediaDefault) {
	          // Use the first media default.
	          mediaDefault = singleMedia;
	        }
	      }
	    });
	  } // For normal option


	  if (!baseOption) {
	    baseOption = rawOption;
	  } // Set timelineOpt to baseOption in ec3,
	  // which is convenient for merge option.


	  if (!baseOption.timeline) {
	    baseOption.timeline = timelineOpt;
	  } // Preprocess.


	  each([baseOption].concat(timelineOptions).concat(zrUtil.map(mediaList, function (media) {
	    return media.option;
	  })), function (option) {
	    each(optionPreprocessorFuncs, function (preProcess) {
	      preProcess(option, isNew);
	    });
	  });
	  return {
	    baseOption: baseOption,
	    timelineOptions: timelineOptions,
	    mediaDefault: mediaDefault,
	    mediaList: mediaList
	  };
	}
	/**
	 * @see <http://www.w3.org/TR/css3-mediaqueries/#media1>
	 * Support: width, height, aspectRatio
	 * Can use max or min as prefix.
	 */


	function applyMediaQuery(query, ecWidth, ecHeight) {
	  var realMap = {
	    width: ecWidth,
	    height: ecHeight,
	    aspectratio: ecWidth / ecHeight // lowser case for convenientce.

	  };
	  var applicatable = true;
	  zrUtil.each(query, function (value, attr) {
	    var matched = attr.match(QUERY_REG);

	    if (!matched || !matched[1] || !matched[2]) {
	      return;
	    }

	    var operator = matched[1];
	    var realAttr = matched[2].toLowerCase();

	    if (!compare(realMap[realAttr], value, operator)) {
	      applicatable = false;
	    }
	  });
	  return applicatable;
	}

	function compare(real, expect, operator) {
	  if (operator === 'min') {
	    return real >= expect;
	  } else if (operator === 'max') {
	    return real <= expect;
	  } else {
	    // Equals
	    return real === expect;
	  }
	}

	function indicesEquals(indices1, indices2) {
	  // indices is always order by asc and has only finite number.
	  return indices1.join(',') === indices2.join(',');
	}
	/**
	 * Consider case:
	 * `chart.setOption(opt1);`
	 * Then user do some interaction like dataZoom, dataView changing.
	 * `chart.setOption(opt2);`
	 * Then user press 'reset button' in toolbox.
	 *
	 * After doing that all of the interaction effects should be reset, the
	 * chart should be the same as the result of invoke
	 * `chart.setOption(opt1); chart.setOption(opt2);`.
	 *
	 * Although it is not able ensure that
	 * `chart.setOption(opt1); chart.setOption(opt2);` is equivalents to
	 * `chart.setOption(merge(opt1, opt2));` exactly,
	 * this might be the only simple way to implement that feature.
	 *
	 * MEMO: We've considered some other approaches:
	 * 1. Each model handle its self restoration but not uniform treatment.
	 *     (Too complex in logic and error-prone)
	 * 2. Use a shadow ecModel. (Performace expensive)
	 */


	function mergeOption(oldOption, newOption) {
	  newOption = newOption || {};
	  each(newOption, function (newCptOpt, mainType) {
	    if (newCptOpt == null) {
	      return;
	    }

	    var oldCptOpt = oldOption[mainType];

	    if (!ComponentModel.hasClass(mainType)) {
	      oldOption[mainType] = merge(oldCptOpt, newCptOpt, true);
	    } else {
	      newCptOpt = modelUtil.normalizeToArray(newCptOpt);
	      oldCptOpt = modelUtil.normalizeToArray(oldCptOpt);
	      var mapResult = modelUtil.mappingToExists(oldCptOpt, newCptOpt);
	      oldOption[mainType] = map(mapResult, function (item) {
	        return item.option && item.exist ? merge(item.exist, item.option, true) : item.exist || item.option;
	      });
	    }
	  });
	}

	var _default = OptionManager;
	module.exports = _default;

/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	var _util = __webpack_require__(166);

	var each = _util.each;
	var isArray = _util.isArray;
	var isObject = _util.isObject;

	var compatStyle = __webpack_require__(255);

	var _model = __webpack_require__(203);

	var normalizeToArray = _model.normalizeToArray;

	// Compatitable with 2.0
	function get(opt, path) {
	  path = path.split(',');
	  var obj = opt;

	  for (var i = 0; i < path.length; i++) {
	    obj = obj && obj[path[i]];

	    if (obj == null) {
	      break;
	    }
	  }

	  return obj;
	}

	function set(opt, path, val, overwrite) {
	  path = path.split(',');
	  var obj = opt;
	  var key;

	  for (var i = 0; i < path.length - 1; i++) {
	    key = path[i];

	    if (obj[key] == null) {
	      obj[key] = {};
	    }

	    obj = obj[key];
	  }

	  if (overwrite || obj[path[i]] == null) {
	    obj[path[i]] = val;
	  }
	}

	function compatLayoutProperties(option) {
	  each(LAYOUT_PROPERTIES, function (prop) {
	    if (prop[0] in option && !(prop[1] in option)) {
	      option[prop[1]] = option[prop[0]];
	    }
	  });
	}

	var LAYOUT_PROPERTIES = [['x', 'left'], ['y', 'top'], ['x2', 'right'], ['y2', 'bottom']];
	var COMPATITABLE_COMPONENTS = ['grid', 'geo', 'parallel', 'legend', 'toolbox', 'title', 'visualMap', 'dataZoom', 'timeline'];
	var COMPATITABLE_SERIES = ['bar', 'boxplot', 'candlestick', 'chord', 'effectScatter', 'funnel', 'gauge', 'lines', 'graph', 'heatmap', 'line', 'map', 'parallel', 'pie', 'radar', 'sankey', 'scatter', 'treemap'];

	function _default(option, isTheme) {
	  compatStyle(option, isTheme); // Make sure series array for model initialization.

	  option.series = normalizeToArray(option.series);
	  each(option.series, function (seriesOpt) {
	    if (!isObject(seriesOpt)) {
	      return;
	    }

	    var seriesType = seriesOpt.type;

	    if (seriesType === 'pie' || seriesType === 'gauge') {
	      if (seriesOpt.clockWise != null) {
	        seriesOpt.clockwise = seriesOpt.clockWise;
	      }
	    }

	    if (seriesType === 'gauge') {
	      var pointerColor = get(seriesOpt, 'pointer.color');
	      pointerColor != null && set(seriesOpt, 'itemStyle.normal.color', pointerColor);
	    }

	    for (var i = 0; i < COMPATITABLE_SERIES.length; i++) {
	      if (COMPATITABLE_SERIES[i] === seriesOpt.type) {
	        compatLayoutProperties(seriesOpt);
	        break;
	      }
	    }
	  }); // dataRange has changed to visualMap

	  if (option.dataRange) {
	    option.visualMap = option.dataRange;
	  }

	  each(COMPATITABLE_COMPONENTS, function (componentName) {
	    var options = option[componentName];

	    if (options) {
	      if (!isArray(options)) {
	        options = [options];
	      }

	      each(options, function (option) {
	        compatLayoutProperties(option);
	      });
	    }
	  });
	}

	module.exports = _default;

/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var modelUtil = __webpack_require__(203);

	var each = zrUtil.each;
	var isObject = zrUtil.isObject;
	var POSSIBLE_STYLES = ['areaStyle', 'lineStyle', 'nodeStyle', 'linkStyle', 'chordStyle', 'label', 'labelLine'];

	function compatItemStyle(opt) {
	  var itemStyleOpt = opt && opt.itemStyle;

	  if (!itemStyleOpt) {
	    return;
	  }

	  for (var i = 0, len = POSSIBLE_STYLES.length; i < len; i++) {
	    var styleName = POSSIBLE_STYLES[i];
	    var normalItemStyleOpt = itemStyleOpt.normal;
	    var emphasisItemStyleOpt = itemStyleOpt.emphasis;

	    if (normalItemStyleOpt && normalItemStyleOpt[styleName]) {
	      opt[styleName] = opt[styleName] || {};

	      if (!opt[styleName].normal) {
	        opt[styleName].normal = normalItemStyleOpt[styleName];
	      } else {
	        zrUtil.merge(opt[styleName].normal, normalItemStyleOpt[styleName]);
	      }

	      normalItemStyleOpt[styleName] = null;
	    }

	    if (emphasisItemStyleOpt && emphasisItemStyleOpt[styleName]) {
	      opt[styleName] = opt[styleName] || {};

	      if (!opt[styleName].emphasis) {
	        opt[styleName].emphasis = emphasisItemStyleOpt[styleName];
	      } else {
	        zrUtil.merge(opt[styleName].emphasis, emphasisItemStyleOpt[styleName]);
	      }

	      emphasisItemStyleOpt[styleName] = null;
	    }
	  }
	}

	function compatTextStyle(opt, propName) {
	  var labelOptSingle = isObject(opt) && opt[propName];
	  var textStyle = isObject(labelOptSingle) && labelOptSingle.textStyle;

	  if (textStyle) {
	    for (var i = 0, len = modelUtil.TEXT_STYLE_OPTIONS.length; i < len; i++) {
	      var propName = modelUtil.TEXT_STYLE_OPTIONS[i];

	      if (textStyle.hasOwnProperty(propName)) {
	        labelOptSingle[propName] = textStyle[propName];
	      }
	    }
	  }
	}

	function compatLabelTextStyle(labelOpt) {
	  if (isObject(labelOpt)) {
	    compatTextStyle(labelOpt, 'normal');
	    compatTextStyle(labelOpt, 'emphasis');
	  }
	}

	function processSeries(seriesOpt) {
	  if (!isObject(seriesOpt)) {
	    return;
	  }

	  compatItemStyle(seriesOpt);
	  compatLabelTextStyle(seriesOpt.label); // treemap

	  compatLabelTextStyle(seriesOpt.upperLabel); // graph

	  compatLabelTextStyle(seriesOpt.edgeLabel);
	  var markPoint = seriesOpt.markPoint;
	  compatItemStyle(markPoint);
	  compatLabelTextStyle(markPoint && markPoint.label);
	  var markLine = seriesOpt.markLine;
	  compatItemStyle(seriesOpt.markLine);
	  compatLabelTextStyle(markLine && markLine.label);
	  var markArea = seriesOpt.markArea;
	  compatLabelTextStyle(markArea && markArea.label); // For gauge

	  compatTextStyle(seriesOpt, 'axisLabel');
	  compatTextStyle(seriesOpt, 'title');
	  compatTextStyle(seriesOpt, 'detail');
	  var data = seriesOpt.data;

	  if (data) {
	    for (var i = 0; i < data.length; i++) {
	      compatItemStyle(data[i]);
	      compatLabelTextStyle(data[i] && data[i].label);
	    }
	  } // mark point data


	  var markPoint = seriesOpt.markPoint;

	  if (markPoint && markPoint.data) {
	    var mpData = markPoint.data;

	    for (var i = 0; i < mpData.length; i++) {
	      compatItemStyle(mpData[i]);
	      compatLabelTextStyle(mpData[i] && mpData[i].label);
	    }
	  } // mark line data


	  var markLine = seriesOpt.markLine;

	  if (markLine && markLine.data) {
	    var mlData = markLine.data;

	    for (var i = 0; i < mlData.length; i++) {
	      if (zrUtil.isArray(mlData[i])) {
	        compatItemStyle(mlData[i][0]);
	        compatLabelTextStyle(mlData[i][0] && mlData[i][0].label);
	        compatItemStyle(mlData[i][1]);
	        compatLabelTextStyle(mlData[i][1] && mlData[i][1].label);
	      } else {
	        compatItemStyle(mlData[i]);
	        compatLabelTextStyle(mlData[i] && mlData[i].label);
	      }
	    }
	  }
	}

	function toArr(o) {
	  return zrUtil.isArray(o) ? o : o ? [o] : [];
	}

	function toObj(o) {
	  return (zrUtil.isArray(o) ? o[0] : o) || {};
	}

	function _default(option, isTheme) {
	  each(toArr(option.series), function (seriesOpt) {
	    isObject(seriesOpt) && processSeries(seriesOpt);
	  });
	  var axes = ['xAxis', 'yAxis', 'radiusAxis', 'angleAxis', 'singleAxis', 'parallelAxis', 'radar'];
	  isTheme && axes.push('valueAxis', 'categoryAxis', 'logAxis', 'timeAxis');
	  each(axes, function (axisName) {
	    each(toArr(option[axisName]), function (axisOpt) {
	      if (axisOpt) {
	        compatTextStyle(axisOpt, 'axisLabel');
	        compatTextStyle(axisOpt.axisPointer, 'label');
	      }
	    });
	  });
	  each(toArr(option.parallel), function (parallelOpt) {
	    var parallelAxisDefault = parallelOpt && parallelOpt.parallelAxisDefault;
	    compatTextStyle(parallelAxisDefault, 'axisLabel');
	    compatTextStyle(parallelAxisDefault && parallelAxisDefault.axisPointer, 'label');
	  });
	  each(toArr(option.calendar), function (calendarOpt) {
	    compatTextStyle(calendarOpt, 'dayLabel');
	    compatTextStyle(calendarOpt, 'monthLabel');
	    compatTextStyle(calendarOpt, 'yearLabel');
	  }); // radar.name.textStyle

	  each(toArr(option.radar), function (radarOpt) {
	    compatTextStyle(radarOpt, 'name');
	  });
	  each(toArr(option.geo), function (geoOpt) {
	    if (isObject(geoOpt)) {
	      compatLabelTextStyle(geoOpt.label);
	      each(toArr(geoOpt.regions), function (regionObj) {
	        compatLabelTextStyle(regionObj.label);
	      });
	    }
	  });
	  compatLabelTextStyle(toObj(option.timeline).label);
	  compatTextStyle(toObj(option.axisPointer), 'label');
	  compatTextStyle(toObj(option.tooltip).axisPointer, 'label');
	}

	module.exports = _default;

/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(162);

	var __DEV__ = _config.__DEV__;

	var zrUtil = __webpack_require__(166);

	var env = __webpack_require__(165);

	var _format = __webpack_require__(204);

	var formatTime = _format.formatTime;
	var encodeHTML = _format.encodeHTML;
	var addCommas = _format.addCommas;
	var getTooltipMarker = _format.getTooltipMarker;

	var _clazz = __webpack_require__(207);

	var set = _clazz.set;
	var get = _clazz.get;

	var modelUtil = __webpack_require__(203);

	var ComponentModel = __webpack_require__(245);

	var colorPaletteMixin = __webpack_require__(250);

	var _layout = __webpack_require__(247);

	var getLayoutParams = _layout.getLayoutParams;
	var mergeLayoutParam = _layout.mergeLayoutParam;
	var SeriesModel = ComponentModel.extend({
	  type: 'series.__base__',

	  /**
	   * @readOnly
	   */
	  seriesIndex: 0,
	  // coodinateSystem will be injected in the echarts/CoordinateSystem
	  coordinateSystem: null,

	  /**
	   * @type {Object}
	   * @protected
	   */
	  defaultOption: null,

	  /**
	   * Data provided for legend
	   * @type {Function}
	   */
	  // PENDING
	  legendDataProvider: null,

	  /**
	   * Access path of color for visual
	   */
	  visualColorAccessPath: 'itemStyle.normal.color',

	  /**
	   * Support merge layout params.
	   * Only support 'box' now (left/right/top/bottom/width/height).
	   * @type {string|Object} Object can be {ignoreSize: true}
	   * @readOnly
	   */
	  layoutMode: null,
	  init: function (option, parentModel, ecModel, extraOpt) {
	    /**
	     * @type {number}
	     * @readOnly
	     */
	    this.seriesIndex = this.componentIndex;
	    this.mergeDefaultAndTheme(option, ecModel);
	    var data = this.getInitialData(option, ecModel);

	    /**
	     * @type {module:echarts/data/List|module:echarts/data/Tree|module:echarts/data/Graph}
	     * @private
	     */
	    set(this, 'dataBeforeProcessed', data); // If we reverse the order (make data firstly, and then make
	    // dataBeforeProcessed by cloneShallow), cloneShallow will
	    // cause data.graph.data !== data when using
	    // module:echarts/data/Graph or module:echarts/data/Tree.
	    // See module:echarts/data/helper/linkList

	    this.restoreData();
	  },

	  /**
	   * Util for merge default and theme to option
	   * @param  {Object} option
	   * @param  {module:echarts/model/Global} ecModel
	   */
	  mergeDefaultAndTheme: function (option, ecModel) {
	    var layoutMode = this.layoutMode;
	    var inputPositionParams = layoutMode ? getLayoutParams(option) : {}; // Backward compat: using subType on theme.
	    // But if name duplicate between series subType
	    // (for example: parallel) add component mainType,
	    // add suffix 'Series'.

	    var themeSubType = this.subType;

	    if (ComponentModel.hasClass(themeSubType)) {
	      themeSubType += 'Series';
	    }

	    zrUtil.merge(option, ecModel.getTheme().get(this.subType));
	    zrUtil.merge(option, this.getDefaultOption()); // Default label emphasis `show`

	    modelUtil.defaultEmphasis(option.label, ['show']);
	    this.fillDataTextStyle(option.data);

	    if (layoutMode) {
	      mergeLayoutParam(option, inputPositionParams, layoutMode);
	    }
	  },
	  mergeOption: function (newSeriesOption, ecModel) {
	    newSeriesOption = zrUtil.merge(this.option, newSeriesOption, true);
	    this.fillDataTextStyle(newSeriesOption.data);
	    var layoutMode = this.layoutMode;

	    if (layoutMode) {
	      mergeLayoutParam(this.option, newSeriesOption, layoutMode);
	    }

	    var data = this.getInitialData(newSeriesOption, ecModel); // TODO Merge data?

	    if (data) {
	      set(this, 'data', data);
	      set(this, 'dataBeforeProcessed', data.cloneShallow());
	    }
	  },
	  fillDataTextStyle: function (data) {
	    // Default data label emphasis `show`
	    // FIXME Tree structure data ?
	    // FIXME Performance ?
	    if (data) {
	      var props = ['show'];

	      for (var i = 0; i < data.length; i++) {
	        if (data[i] && data[i].label) {
	          modelUtil.defaultEmphasis(data[i].label, props);
	        }
	      }
	    }
	  },

	  /**
	   * Init a data structure from data related option in series
	   * Must be overwritten
	   */
	  getInitialData: function () {},

	  /**
	   * @param {string} [dataType]
	   * @return {module:echarts/data/List}
	   */
	  getData: function (dataType) {
	    var data = get(this, 'data');
	    return dataType == null ? data : data.getLinkedData(dataType);
	  },

	  /**
	   * @param {module:echarts/data/List} data
	   */
	  setData: function (data) {
	    set(this, 'data', data);
	  },

	  /**
	   * Get data before processed
	   * @return {module:echarts/data/List}
	   */
	  getRawData: function () {
	    return get(this, 'dataBeforeProcessed');
	  },

	  /**
	   * Coord dimension to data dimension.
	   *
	   * By default the result is the same as dimensions of series data.
	   * But in some series data dimensions are different from coord dimensions (i.e.
	   * candlestick and boxplot). Override this method to handle those cases.
	   *
	   * Coord dimension to data dimension can be one-to-many
	   *
	   * @param {string} coordDim
	   * @return {Array.<string>} dimensions on the axis.
	   */
	  coordDimToDataDim: function (coordDim) {
	    return modelUtil.coordDimToDataDim(this.getData(), coordDim);
	  },

	  /**
	   * Convert data dimension to coord dimension.
	   *
	   * @param {string|number} dataDim
	   * @return {string}
	   */
	  dataDimToCoordDim: function (dataDim) {
	    return modelUtil.dataDimToCoordDim(this.getData(), dataDim);
	  },

	  /**
	   * Get base axis if has coordinate system and has axis.
	   * By default use coordSys.getBaseAxis();
	   * Can be overrided for some chart.
	   * @return {type} description
	   */
	  getBaseAxis: function () {
	    var coordSys = this.coordinateSystem;
	    return coordSys && coordSys.getBaseAxis && coordSys.getBaseAxis();
	  },
	  // FIXME

	  /**
	   * Default tooltip formatter
	   *
	   * @param {number} dataIndex
	   * @param {boolean} [multipleSeries=false]
	   * @param {number} [dataType]
	   */
	  formatTooltip: function (dataIndex, multipleSeries, dataType) {
	    function formatArrayValue(value) {
	      var vertially = zrUtil.reduce(value, function (vertially, val, idx) {
	        var dimItem = data.getDimensionInfo(idx);
	        return vertially |= dimItem && dimItem.tooltip !== false && dimItem.tooltipName != null;
	      }, 0);
	      var result = [];
	      var tooltipDims = modelUtil.otherDimToDataDim(data, 'tooltip');
	      tooltipDims.length ? zrUtil.each(tooltipDims, function (dimIdx) {
	        setEachItem(data.get(dimIdx, dataIndex), dimIdx);
	      }) // By default, all dims is used on tooltip.
	      : zrUtil.each(value, setEachItem);

	      function setEachItem(val, dimIdx) {
	        var dimInfo = data.getDimensionInfo(dimIdx); // If `dimInfo.tooltip` is not set, show tooltip.

	        if (!dimInfo || dimInfo.otherDims.tooltip === false) {
	          return;
	        }

	        var dimType = dimInfo.type;
	        var valStr = (vertially ? '- ' + (dimInfo.tooltipName || dimInfo.name) + ': ' : '') + (dimType === 'ordinal' ? val + '' : dimType === 'time' ? multipleSeries ? '' : formatTime('yyyy/MM/dd hh:mm:ss', val) : addCommas(val));
	        valStr && result.push(encodeHTML(valStr));
	      }

	      return (vertially ? '<br/>' : '') + result.join(vertially ? '<br/>' : ', ');
	    }

	    var data = get(this, 'data');
	    var value = this.getRawValue(dataIndex);
	    var formattedValue = zrUtil.isArray(value) ? formatArrayValue(value) : encodeHTML(addCommas(value));
	    var name = data.getName(dataIndex);
	    var color = data.getItemVisual(dataIndex, 'color');

	    if (zrUtil.isObject(color) && color.colorStops) {
	      color = (color.colorStops[0] || {}).color;
	    }

	    color = color || 'transparent';
	    var colorEl = getTooltipMarker(color);
	    var seriesName = this.name; // FIXME

	    if (seriesName === '\0-') {
	      // Not show '-'
	      seriesName = '';
	    }

	    seriesName = seriesName ? encodeHTML(seriesName) + (!multipleSeries ? '<br/>' : ': ') : '';
	    return !multipleSeries ? seriesName + colorEl + (name ? encodeHTML(name) + ': ' + formattedValue : formattedValue) : colorEl + seriesName + formattedValue;
	  },

	  /**
	   * @return {boolean}
	   */
	  isAnimationEnabled: function () {
	    if (env.node) {
	      return false;
	    }

	    var animationEnabled = this.getShallow('animation');

	    if (animationEnabled) {
	      if (this.getData().count() > this.getShallow('animationThreshold')) {
	        animationEnabled = false;
	      }
	    }

	    return animationEnabled;
	  },
	  restoreData: function () {
	    set(this, 'data', get(this, 'dataBeforeProcessed').cloneShallow());
	  },
	  getColorFromPalette: function (name, scope) {
	    var ecModel = this.ecModel; // PENDING

	    var color = colorPaletteMixin.getColorFromPalette.call(this, name, scope);

	    if (!color) {
	      color = ecModel.getColorFromPalette(name, scope);
	    }

	    return color;
	  },

	  /**
	   * Get data indices for show tooltip content. See tooltip.
	   * @abstract
	   * @param {Array.<string>|string} dim
	   * @param {Array.<number>} value
	   * @param {module:echarts/coord/single/SingleAxis} baseAxis
	   * @return {Object} {dataIndices, nestestValue}.
	   */
	  getAxisTooltipData: null,

	  /**
	   * See tooltip.
	   * @abstract
	   * @param {number} dataIndex
	   * @return {Array.<number>} Point of tooltip. null/undefined can be returned.
	   */
	  getTooltipPosition: null
	});
	zrUtil.mixin(SeriesModel, modelUtil.dataFormatMixin);
	zrUtil.mixin(SeriesModel, colorPaletteMixin);
	var _default = SeriesModel;
	module.exports = _default;

/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	var Group = __webpack_require__(172);

	var componentUtil = __webpack_require__(246);

	var clazzUtil = __webpack_require__(207);

	var Component = function () {
	  /**
	   * @type {module:zrender/container/Group}
	   * @readOnly
	   */
	  this.group = new Group();
	  /**
	   * @type {string}
	   * @readOnly
	   */

	  this.uid = componentUtil.getUID('viewComponent');
	};

	Component.prototype = {
	  constructor: Component,
	  init: function (ecModel, api) {},
	  render: function (componentModel, ecModel, api, payload) {},
	  dispose: function () {}
	};
	var componentProto = Component.prototype;

	componentProto.updateView = componentProto.updateLayout = componentProto.updateVisual = function (seriesModel, ecModel, api, payload) {// Do nothing;
	}; // Enable Component.extend.


	clazzUtil.enableClassExtend(Component); // Enable capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.

	clazzUtil.enableClassManagement(Component, {
	  registerWhenExtend: true
	});
	var _default = Component;
	module.exports = _default;

/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var Group = __webpack_require__(172);

	var componentUtil = __webpack_require__(246);

	var clazzUtil = __webpack_require__(207);

	var modelUtil = __webpack_require__(203);

	function Chart() {
	  /**
	   * @type {module:zrender/container/Group}
	   * @readOnly
	   */
	  this.group = new Group();
	  /**
	   * @type {string}
	   * @readOnly
	   */

	  this.uid = componentUtil.getUID('viewChart');
	}

	Chart.prototype = {
	  type: 'chart',

	  /**
	   * Init the chart
	   * @param  {module:echarts/model/Global} ecModel
	   * @param  {module:echarts/ExtensionAPI} api
	   */
	  init: function (ecModel, api) {},

	  /**
	   * Render the chart
	   * @param  {module:echarts/model/Series} seriesModel
	   * @param  {module:echarts/model/Global} ecModel
	   * @param  {module:echarts/ExtensionAPI} api
	   * @param  {Object} payload
	   */
	  render: function (seriesModel, ecModel, api, payload) {},

	  /**
	   * Highlight series or specified data item
	   * @param  {module:echarts/model/Series} seriesModel
	   * @param  {module:echarts/model/Global} ecModel
	   * @param  {module:echarts/ExtensionAPI} api
	   * @param  {Object} payload
	   */
	  highlight: function (seriesModel, ecModel, api, payload) {
	    toggleHighlight(seriesModel.getData(), payload, 'emphasis');
	  },

	  /**
	   * Downplay series or specified data item
	   * @param  {module:echarts/model/Series} seriesModel
	   * @param  {module:echarts/model/Global} ecModel
	   * @param  {module:echarts/ExtensionAPI} api
	   * @param  {Object} payload
	   */
	  downplay: function (seriesModel, ecModel, api, payload) {
	    toggleHighlight(seriesModel.getData(), payload, 'normal');
	  },

	  /**
	   * Remove self
	   * @param  {module:echarts/model/Global} ecModel
	   * @param  {module:echarts/ExtensionAPI} api
	   */
	  remove: function (ecModel, api) {
	    this.group.removeAll();
	  },

	  /**
	   * Dispose self
	   * @param  {module:echarts/model/Global} ecModel
	   * @param  {module:echarts/ExtensionAPI} api
	   */
	  dispose: function () {}
	  /**
	   * The view contains the given point.
	   * @interface
	   * @param {Array.<number>} point
	   * @return {boolean}
	   */
	  // containPoint: function () {}

	};
	var chartProto = Chart.prototype;

	chartProto.updateView = chartProto.updateLayout = chartProto.updateVisual = function (seriesModel, ecModel, api, payload) {
	  this.render(seriesModel, ecModel, api, payload);
	};
	/**
	 * Set state of single element
	 * @param  {module:zrender/Element} el
	 * @param  {string} state
	 */


	function elSetState(el, state) {
	  if (el) {
	    el.trigger(state);

	    if (el.type === 'group') {
	      for (var i = 0; i < el.childCount(); i++) {
	        elSetState(el.childAt(i), state);
	      }
	    }
	  }
	}
	/**
	 * @param  {module:echarts/data/List} data
	 * @param  {Object} payload
	 * @param  {string} state 'normal'|'emphasis'
	 * @inner
	 */


	function toggleHighlight(data, payload, state) {
	  var dataIndex = modelUtil.queryDataIndex(data, payload);

	  if (dataIndex != null) {
	    zrUtil.each(modelUtil.normalizeToArray(dataIndex), function (dataIdx) {
	      elSetState(data.getItemGraphicEl(dataIdx), state);
	    });
	  } else {
	    data.eachItemGraphicEl(function (el) {
	      elSetState(el, state);
	    });
	  }
	} // Enable Chart.extend.


	clazzUtil.enableClassExtend(Chart, ['dispose']); // Add capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.

	clazzUtil.enableClassManagement(Chart, {
	  registerWhenExtend: true
	});
	var _default = Chart;
	module.exports = _default;

/***/ },
/* 259 */
/***/ function(module, exports) {

	var ORIGIN_METHOD = '\0__throttleOriginMethod';
	var RATE = '\0__throttleRate';
	var THROTTLE_TYPE = '\0__throttleType';
	/**
	 * @public
	 * @param {(Function)} fn
	 * @param {number} [delay=0] Unit: ms.
	 * @param {boolean} [debounce=false]
	 *        true: If call interval less than `delay`, only the last call works.
	 *        false: If call interval less than `delay, call works on fixed rate.
	 * @return {(Function)} throttled fn.
	 */

	function throttle(fn, delay, debounce) {
	  var currCall;
	  var lastCall = 0;
	  var lastExec = 0;
	  var timer = null;
	  var diff;
	  var scope;
	  var args;
	  var debounceNextCall;
	  delay = delay || 0;

	  function exec() {
	    lastExec = new Date().getTime();
	    timer = null;
	    fn.apply(scope, args || []);
	  }

	  var cb = function () {
	    currCall = new Date().getTime();
	    scope = this;
	    args = arguments;
	    var thisDelay = debounceNextCall || delay;
	    var thisDebounce = debounceNextCall || debounce;
	    debounceNextCall = null;
	    diff = currCall - (thisDebounce ? lastCall : lastExec) - thisDelay;
	    clearTimeout(timer);

	    if (thisDebounce) {
	      timer = setTimeout(exec, thisDelay);
	    } else {
	      if (diff >= 0) {
	        exec();
	      } else {
	        timer = setTimeout(exec, -diff);
	      }
	    }

	    lastCall = currCall;
	  };
	  /**
	   * Clear throttle.
	   * @public
	   */


	  cb.clear = function () {
	    if (timer) {
	      clearTimeout(timer);
	      timer = null;
	    }
	  };
	  /**
	   * Enable debounce once.
	   */


	  cb.debounceNextCall = function (debounceDelay) {
	    debounceNextCall = debounceDelay;
	  };

	  return cb;
	}
	/**
	 * Create throttle method or update throttle rate.
	 *
	 * @example
	 * ComponentView.prototype.render = function () {
	 *     ...
	 *     throttle.createOrUpdate(
	 *         this,
	 *         '_dispatchAction',
	 *         this.model.get('throttle'),
	 *         'fixRate'
	 *     );
	 * };
	 * ComponentView.prototype.remove = function () {
	 *     throttle.clear(this, '_dispatchAction');
	 * };
	 * ComponentView.prototype.dispose = function () {
	 *     throttle.clear(this, '_dispatchAction');
	 * };
	 *
	 * @public
	 * @param {Object} obj
	 * @param {string} fnAttr
	 * @param {number} [rate]
	 * @param {string} [throttleType='fixRate'] 'fixRate' or 'debounce'
	 * @return {Function} throttled function.
	 */


	function createOrUpdate(obj, fnAttr, rate, throttleType) {
	  var fn = obj[fnAttr];

	  if (!fn) {
	    return;
	  }

	  var originFn = fn[ORIGIN_METHOD] || fn;
	  var lastThrottleType = fn[THROTTLE_TYPE];
	  var lastRate = fn[RATE];

	  if (lastRate !== rate || lastThrottleType !== throttleType) {
	    if (rate == null || !throttleType) {
	      return obj[fnAttr] = originFn;
	    }

	    fn = obj[fnAttr] = throttle(originFn, rate, throttleType === 'debounce');
	    fn[ORIGIN_METHOD] = originFn;
	    fn[THROTTLE_TYPE] = throttleType;
	    fn[RATE] = rate;
	  }

	  return fn;
	}
	/**
	 * Clear throttle. Example see throttle.createOrUpdate.
	 *
	 * @public
	 * @param {Object} obj
	 * @param {string} fnAttr
	 */


	function clear(obj, fnAttr) {
	  var fn = obj[fnAttr];

	  if (fn && fn[ORIGIN_METHOD]) {
	    obj[fnAttr] = fn[ORIGIN_METHOD];
	  }
	}

	exports.throttle = throttle;
	exports.createOrUpdate = createOrUpdate;
	exports.clear = clear;

/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	var Gradient = __webpack_require__(242);

	function _default(ecModel) {
	  function encodeColor(seriesModel) {
	    var colorAccessPath = (seriesModel.visualColorAccessPath || 'itemStyle.normal.color').split('.');
	    var data = seriesModel.getData();
	    var color = seriesModel.get(colorAccessPath) // Set in itemStyle
	    || seriesModel.getColorFromPalette(seriesModel.get('name')); // Default color
	    // FIXME Set color function or use the platte color

	    data.setVisual('color', color); // Only visible series has each data be visual encoded

	    if (!ecModel.isSeriesFiltered(seriesModel)) {
	      if (typeof color === 'function' && !(color instanceof Gradient)) {
	        data.each(function (idx) {
	          data.setItemVisual(idx, 'color', color(seriesModel.getDataParams(idx)));
	        });
	      } // itemStyle in each data item


	      data.each(function (idx) {
	        var itemModel = data.getItemModel(idx);
	        var color = itemModel.get(colorAccessPath, true);

	        if (color != null) {
	          data.setItemVisual(idx, 'color', color);
	        }
	      });
	    }
	  }

	  ecModel.eachRawSeries(encodeColor);
	}

	module.exports = _default;

/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var graphic = __webpack_require__(212);

	var PI = Math.PI;
	/**
	 * @param {module:echarts/ExtensionAPI} api
	 * @param {Object} [opts]
	 * @param {string} [opts.text]
	 * @param {string} [opts.color]
	 * @param {string} [opts.textColor]
	 * @return {module:zrender/Element}
	 */

	function _default(api, opts) {
	  opts = opts || {};
	  zrUtil.defaults(opts, {
	    text: 'loading',
	    color: '#c23531',
	    textColor: '#000',
	    maskColor: 'rgba(255, 255, 255, 0.8)',
	    zlevel: 0
	  });
	  var mask = new graphic.Rect({
	    style: {
	      fill: opts.maskColor
	    },
	    zlevel: opts.zlevel,
	    z: 10000
	  });
	  var arc = new graphic.Arc({
	    shape: {
	      startAngle: -PI / 2,
	      endAngle: -PI / 2 + 0.1,
	      r: 10
	    },
	    style: {
	      stroke: opts.color,
	      lineCap: 'round',
	      lineWidth: 5
	    },
	    zlevel: opts.zlevel,
	    z: 10001
	  });
	  var labelRect = new graphic.Rect({
	    style: {
	      fill: 'none',
	      text: opts.text,
	      textPosition: 'right',
	      textDistance: 10,
	      textFill: opts.textColor
	    },
	    zlevel: opts.zlevel,
	    z: 10001
	  });
	  arc.animateShape(true).when(1000, {
	    endAngle: PI * 3 / 2
	  }).start('circularInOut');
	  arc.animateShape(true).when(1000, {
	    startAngle: PI * 3 / 2
	  }).delay(300).start('circularInOut');
	  var group = new graphic.Group();
	  group.add(arc);
	  group.add(labelRect);
	  group.add(mask); // Inject resize

	  group.resize = function () {
	    var cx = api.getWidth() / 2;
	    var cy = api.getHeight() / 2;
	    arc.setShape({
	      cx: cx,
	      cy: cy
	    });
	    var r = arc.shape.r;
	    labelRect.setShape({
	      x: cx - r,
	      y: cy - r,
	      width: r * 2,
	      height: r * 2
	    });
	    mask.setShape({
	      x: 0,
	      y: 0,
	      width: api.getWidth(),
	      height: api.getHeight()
	    });
	  };

	  group.resize();
	  return group;
	}

	module.exports = _default;

/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	var zrender = __webpack_require__(163);

	exports.zrender = zrender;

	var matrix = __webpack_require__(175);

	exports.matrix = matrix;

	var vector = __webpack_require__(168);

	exports.vector = vector;

	var zrUtil = __webpack_require__(166);

	var colorTool = __webpack_require__(180);

	exports.color = colorTool;

	var graphic = __webpack_require__(212);

	exports.graphic = graphic;

	var numberUtil = __webpack_require__(205);

	exports.number = numberUtil;

	var formatUtil = __webpack_require__(204);

	exports.format = formatUtil;

	var _throttle = __webpack_require__(259);

	var throttle = _throttle.throttle;
	exports.throttle = _throttle.throttle;

	var ecHelper = __webpack_require__(263);

	exports.helper = ecHelper;

	var _List = __webpack_require__(265);

	exports.List = _List;

	var _Model = __webpack_require__(206);

	exports.Model = _Model;

	var _Axis = __webpack_require__(277);

	exports.Axis = _Axis;

	var _env = __webpack_require__(165);

	exports.env = _env;

	var _parseGeoJson = __webpack_require__(278);

	exports.parseGeoJson = _parseGeoJson;

	/**
	 * Do not mount those modules on 'src/echarts' for better tree shaking.
	 */
	var ecUtil = {};
	zrUtil.each(['map', 'each', 'filter', 'indexOf', 'inherits', 'reduce', 'filter', 'bind', 'curry', 'isArray', 'isString', 'isObject', 'isFunction', 'extend', 'defaults', 'clone', 'merge'], function (name) {
	  ecUtil[name] = zrUtil[name];
	});
	exports.util = ecUtil;

/***/ },
/* 263 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var createListFromArray = __webpack_require__(264);

	var axisHelper = __webpack_require__(268);

	var axisModelCommonMixin = __webpack_require__(275);

	var Model = __webpack_require__(206);

	var _completeDimensions = __webpack_require__(267);

	exports.completeDimensions = _completeDimensions;

	var _symbol = __webpack_require__(276);

	exports.createSymbol = _symbol.createSymbol;

	/**
	 * Create a muti dimension List structure from seriesModel.
	 * @param  {module:echarts/model/Model} seriesModel
	 * @return {module:echarts/data/List} list
	 */
	function createList(seriesModel) {
	  var data = seriesModel.get('data');
	  return createListFromArray(data, seriesModel, seriesModel.ecModel);
	}
	/**
	 * @see {module:echarts/data/helper/completeDimensions}
	 */


	/**
	 * Create scale
	 * @param {Array.<number>} dataExtent
	 * @param {Object|module:echarts/Model} option
	 */
	function createScale(dataExtent, option) {
	  var axisModel = option;

	  if (!(option instanceof Model)) {
	    axisModel = new Model(option);
	    zrUtil.mixin(axisModel, axisModelCommonMixin);
	  }

	  var scale = axisHelper.createScaleByModel(axisModel);
	  scale.setExtent(dataExtent[0], dataExtent[1]);
	  axisHelper.niceScaleExtent(scale, axisModel);
	  return scale;
	}
	/**
	 * Mixin common methods to axis model,
	 *
	 * Inlcude methods
	 * `getFormattedLabels() => Array.<string>`
	 * `getCategories() => Array.<string>`
	 * `getMin(origin: boolean) => number`
	 * `getMax(origin: boolean) => number`
	 * `getNeedCrossZero() => boolean`
	 * `setRange(start: number, end: number)`
	 * `resetRange()`
	 */


	function mixinAxisModelCommonMethods(Model) {
	  zrUtil.mixin(Model, axisModelCommonMixin);
	}

	exports.createList = createList;
	exports.createScale = createScale;
	exports.mixinAxisModelCommonMethods = mixinAxisModelCommonMethods;

/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(162);

	var __DEV__ = _config.__DEV__;

	var zrUtil = __webpack_require__(166);

	var List = __webpack_require__(265);

	var completeDimensions = __webpack_require__(267);

	var _model = __webpack_require__(203);

	var getDataItemValue = _model.getDataItemValue;
	var converDataValue = _model.converDataValue;
	var isDataItemOption = _model.isDataItemOption;

	var CoordinateSystem = __webpack_require__(252);

	function firstDataNotNull(data) {
	  var i = 0;

	  while (i < data.length && data[i] == null) {
	    i++;
	  }

	  return data[i];
	}

	function ifNeedCompleteOrdinalData(data) {
	  var sampleItem = firstDataNotNull(data);
	  return sampleItem != null && !zrUtil.isArray(getDataItemValue(sampleItem));
	}
	/**
	 * Helper function to create a list from option data
	 */


	function createListFromArray(data, seriesModel, ecModel) {
	  // If data is undefined
	  data = data || [];
	  var coordSysName = seriesModel.get('coordinateSystem');
	  var creator = creators[coordSysName];
	  var registeredCoordSys = CoordinateSystem.get(coordSysName);
	  var completeDimOpt = {
	    encodeDef: seriesModel.get('encode'),
	    dimsDef: seriesModel.get('dimensions')
	  }; // FIXME

	  var axesInfo = creator && creator(data, seriesModel, ecModel, completeDimOpt);
	  var dimensions = axesInfo && axesInfo.dimensions;

	  if (!dimensions) {
	    // Get dimensions from registered coordinate system
	    dimensions = registeredCoordSys && (registeredCoordSys.getDimensionsInfo ? registeredCoordSys.getDimensionsInfo() : registeredCoordSys.dimensions.slice()) || ['x', 'y'];
	    dimensions = completeDimensions(dimensions, data, completeDimOpt);
	  }

	  var categoryIndex = axesInfo ? axesInfo.categoryIndex : -1;
	  var list = new List(dimensions, seriesModel);
	  var nameList = createNameList(axesInfo, data);
	  var categories = {};
	  var dimValueGetter = categoryIndex >= 0 && ifNeedCompleteOrdinalData(data) ? function (itemOpt, dimName, dataIndex, dimIndex) {
	    // If any dataItem is like { value: 10 }
	    if (isDataItemOption(itemOpt)) {
	      list.hasItemOption = true;
	    } // Use dataIndex as ordinal value in categoryAxis


	    return dimIndex === categoryIndex ? dataIndex : converDataValue(getDataItemValue(itemOpt), dimensions[dimIndex]);
	  } : function (itemOpt, dimName, dataIndex, dimIndex) {
	    var value = getDataItemValue(itemOpt);
	    var val = converDataValue(value && value[dimIndex], dimensions[dimIndex]); // If any dataItem is like { value: 10 }

	    if (isDataItemOption(itemOpt)) {
	      list.hasItemOption = true;
	    }

	    var categoryAxesModels = axesInfo && axesInfo.categoryAxesModels;

	    if (categoryAxesModels && categoryAxesModels[dimName]) {
	      // If given value is a category string
	      if (typeof val === 'string') {
	        // Lazy get categories
	        categories[dimName] = categories[dimName] || categoryAxesModels[dimName].getCategories();
	        val = zrUtil.indexOf(categories[dimName], val);

	        if (val < 0 && !isNaN(val)) {
	          // In case some one write '1', '2' istead of 1, 2
	          val = +val;
	        }
	      }
	    }

	    return val;
	  };
	  list.hasItemOption = false;
	  list.initData(data, nameList, dimValueGetter);
	  return list;
	}

	function isStackable(axisType) {
	  return axisType !== 'category' && axisType !== 'time';
	}

	function getDimTypeByAxis(axisType) {
	  return axisType === 'category' ? 'ordinal' : axisType === 'time' ? 'time' : 'float';
	}
	/**
	 * Creaters for each coord system.
	 */


	var creators = {
	  cartesian2d: function (data, seriesModel, ecModel, completeDimOpt) {
	    var axesModels = zrUtil.map(['xAxis', 'yAxis'], function (name) {
	      return ecModel.queryComponents({
	        mainType: name,
	        index: seriesModel.get(name + 'Index'),
	        id: seriesModel.get(name + 'Id')
	      })[0];
	    });
	    var xAxisModel = axesModels[0];
	    var yAxisModel = axesModels[1];
	    var xAxisType = xAxisModel.get('type');
	    var yAxisType = yAxisModel.get('type');
	    var dimensions = [{
	      name: 'x',
	      type: getDimTypeByAxis(xAxisType),
	      stackable: isStackable(xAxisType)
	    }, {
	      name: 'y',
	      // If two category axes
	      type: getDimTypeByAxis(yAxisType),
	      stackable: isStackable(yAxisType)
	    }];
	    var isXAxisCateogry = xAxisType === 'category';
	    var isYAxisCategory = yAxisType === 'category';
	    dimensions = completeDimensions(dimensions, data, completeDimOpt);
	    var categoryAxesModels = {};

	    if (isXAxisCateogry) {
	      categoryAxesModels.x = xAxisModel;
	    }

	    if (isYAxisCategory) {
	      categoryAxesModels.y = yAxisModel;
	    }

	    return {
	      dimensions: dimensions,
	      categoryIndex: isXAxisCateogry ? 0 : isYAxisCategory ? 1 : -1,
	      categoryAxesModels: categoryAxesModels
	    };
	  },
	  singleAxis: function (data, seriesModel, ecModel, completeDimOpt) {
	    var singleAxisModel = ecModel.queryComponents({
	      mainType: 'singleAxis',
	      index: seriesModel.get('singleAxisIndex'),
	      id: seriesModel.get('singleAxisId')
	    })[0];
	    var singleAxisType = singleAxisModel.get('type');
	    var isCategory = singleAxisType === 'category';
	    var dimensions = [{
	      name: 'single',
	      type: getDimTypeByAxis(singleAxisType),
	      stackable: isStackable(singleAxisType)
	    }];
	    dimensions = completeDimensions(dimensions, data, completeDimOpt);
	    var categoryAxesModels = {};

	    if (isCategory) {
	      categoryAxesModels.single = singleAxisModel;
	    }

	    return {
	      dimensions: dimensions,
	      categoryIndex: isCategory ? 0 : -1,
	      categoryAxesModels: categoryAxesModels
	    };
	  },
	  polar: function (data, seriesModel, ecModel, completeDimOpt) {
	    var polarModel = ecModel.queryComponents({
	      mainType: 'polar',
	      index: seriesModel.get('polarIndex'),
	      id: seriesModel.get('polarId')
	    })[0];
	    var angleAxisModel = polarModel.findAxisModel('angleAxis');
	    var radiusAxisModel = polarModel.findAxisModel('radiusAxis');
	    var radiusAxisType = radiusAxisModel.get('type');
	    var angleAxisType = angleAxisModel.get('type');
	    var dimensions = [{
	      name: 'radius',
	      type: getDimTypeByAxis(radiusAxisType),
	      stackable: isStackable(radiusAxisType)
	    }, {
	      name: 'angle',
	      type: getDimTypeByAxis(angleAxisType),
	      stackable: isStackable(angleAxisType)
	    }];
	    var isAngleAxisCateogry = angleAxisType === 'category';
	    var isRadiusAxisCateogry = radiusAxisType === 'category';
	    dimensions = completeDimensions(dimensions, data, completeDimOpt);
	    var categoryAxesModels = {};

	    if (isRadiusAxisCateogry) {
	      categoryAxesModels.radius = radiusAxisModel;
	    }

	    if (isAngleAxisCateogry) {
	      categoryAxesModels.angle = angleAxisModel;
	    }

	    return {
	      dimensions: dimensions,
	      categoryIndex: isAngleAxisCateogry ? 1 : isRadiusAxisCateogry ? 0 : -1,
	      categoryAxesModels: categoryAxesModels
	    };
	  },
	  geo: function (data, seriesModel, ecModel, completeDimOpt) {
	    // TODO Region
	    // 多个散点图系列在同一个地区的时候
	    return {
	      dimensions: completeDimensions([{
	        name: 'lng'
	      }, {
	        name: 'lat'
	      }], data, completeDimOpt)
	    };
	  }
	};

	function createNameList(result, data) {
	  var nameList = [];
	  var categoryDim = result && result.dimensions[result.categoryIndex];
	  var categoryAxisModel;

	  if (categoryDim) {
	    categoryAxisModel = result.categoryAxesModels[categoryDim.name];
	  }

	  if (categoryAxisModel) {
	    // FIXME Two category axis
	    var categories = categoryAxisModel.getCategories();

	    if (categories) {
	      var dataLen = data.length; // Ordered data is given explicitly like
	      // [[3, 0.2], [1, 0.3], [2, 0.15]]
	      // or given scatter data,
	      // pick the category

	      if (zrUtil.isArray(data[0]) && data[0].length > 1) {
	        nameList = [];

	        for (var i = 0; i < dataLen; i++) {
	          nameList[i] = categories[data[i][result.categoryIndex || 0]];
	        }
	      } else {
	        nameList = categories.slice(0);
	      }
	    }
	  }

	  return nameList;
	}

	var _default = createListFromArray;
	module.exports = _default;

/***/ },
/* 265 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {var _config = __webpack_require__(162);

	var __DEV__ = _config.__DEV__;

	var zrUtil = __webpack_require__(166);

	var Model = __webpack_require__(206);

	var DataDiffer = __webpack_require__(266);

	var modelUtil = __webpack_require__(203);

	/**
	 * List for data storage
	 * @module echarts/data/List
	 */
	var isObject = zrUtil.isObject;
	var UNDEFINED = 'undefined';
	var globalObj = typeof window === UNDEFINED ? global : window;
	var dataCtors = {
	  'float': typeof globalObj.Float64Array === UNDEFINED ? Array : globalObj.Float64Array,
	  'int': typeof globalObj.Int32Array === UNDEFINED ? Array : globalObj.Int32Array,
	  // Ordinal data type can be string or int
	  'ordinal': Array,
	  'number': Array,
	  'time': Array
	};
	var TRANSFERABLE_PROPERTIES = ['stackedOn', 'hasItemOption', '_nameList', '_idList', '_rawData'];

	function transferProperties(a, b) {
	  zrUtil.each(TRANSFERABLE_PROPERTIES.concat(b.__wrappedMethods || []), function (propName) {
	    if (b.hasOwnProperty(propName)) {
	      a[propName] = b[propName];
	    }
	  });
	  a.__wrappedMethods = b.__wrappedMethods;
	}

	function DefaultDataProvider(dataArray) {
	  this._array = dataArray || [];
	}

	DefaultDataProvider.prototype.pure = false;

	DefaultDataProvider.prototype.count = function () {
	  return this._array.length;
	};

	DefaultDataProvider.prototype.getItem = function (idx) {
	  return this._array[idx];
	};
	/**
	 * @constructor
	 * @alias module:echarts/data/List
	 *
	 * @param {Array.<string|Object>} dimensions
	 *      For example, ['someDimName', {name: 'someDimName', type: 'someDimType'}, ...].
	 *      Dimensions should be concrete names like x, y, z, lng, lat, angle, radius
	 * @param {module:echarts/model/Model} hostModel
	 */


	var List = function (dimensions, hostModel) {
	  dimensions = dimensions || ['x', 'y'];
	  var dimensionInfos = {};
	  var dimensionNames = [];

	  for (var i = 0; i < dimensions.length; i++) {
	    var dimensionName;
	    var dimensionInfo = {};

	    if (typeof dimensions[i] === 'string') {
	      dimensionName = dimensions[i];
	      dimensionInfo = {
	        name: dimensionName,
	        coordDim: dimensionName,
	        coordDimIndex: 0,
	        stackable: false,
	        // Type can be 'float', 'int', 'number'
	        // Default is number, Precision of float may not enough
	        type: 'number'
	      };
	    } else {
	      dimensionInfo = dimensions[i];
	      dimensionName = dimensionInfo.name;
	      dimensionInfo.type = dimensionInfo.type || 'number';

	      if (!dimensionInfo.coordDim) {
	        dimensionInfo.coordDim = dimensionName;
	        dimensionInfo.coordDimIndex = 0;
	      }
	    }

	    dimensionInfo.otherDims = dimensionInfo.otherDims || {};
	    dimensionNames.push(dimensionName);
	    dimensionInfos[dimensionName] = dimensionInfo;
	  }
	  /**
	   * @readOnly
	   * @type {Array.<string>}
	   */


	  this.dimensions = dimensionNames;
	  /**
	   * Infomation of each data dimension, like data type.
	   * @type {Object}
	   */

	  this._dimensionInfos = dimensionInfos;
	  /**
	   * @type {module:echarts/model/Model}
	   */

	  this.hostModel = hostModel;
	  /**
	   * @type {module:echarts/model/Model}
	   */

	  this.dataType;
	  /**
	   * Indices stores the indices of data subset after filtered.
	   * This data subset will be used in chart.
	   * @type {Array.<number>}
	   * @readOnly
	   */

	  this.indices = [];
	  /**
	   * Data storage
	   * @type {Object.<key, TypedArray|Array>}
	   * @private
	   */

	  this._storage = {};
	  /**
	   * @type {Array.<string>}
	   */

	  this._nameList = [];
	  /**
	   * @type {Array.<string>}
	   */

	  this._idList = [];
	  /**
	   * Models of data option is stored sparse for optimizing memory cost
	   * @type {Array.<module:echarts/model/Model>}
	   * @private
	   */

	  this._optionModels = [];
	  /**
	   * @param {module:echarts/data/List}
	   */

	  this.stackedOn = null;
	  /**
	   * Global visual properties after visual coding
	   * @type {Object}
	   * @private
	   */

	  this._visual = {};
	  /**
	   * Globel layout properties.
	   * @type {Object}
	   * @private
	   */

	  this._layout = {};
	  /**
	   * Item visual properties after visual coding
	   * @type {Array.<Object>}
	   * @private
	   */

	  this._itemVisuals = [];
	  /**
	   * Item layout properties after layout
	   * @type {Array.<Object>}
	   * @private
	   */

	  this._itemLayouts = [];
	  /**
	   * Graphic elemnents
	   * @type {Array.<module:zrender/Element>}
	   * @private
	   */

	  this._graphicEls = [];
	  /**
	   * @type {Array.<Array|Object>}
	   * @private
	   */

	  this._rawData;
	  /**
	   * @type {Object}
	   * @private
	   */

	  this._extent;
	};

	var listProto = List.prototype;
	listProto.type = 'list';
	/**
	 * If each data item has it's own option
	 * @type {boolean}
	 */

	listProto.hasItemOption = true;
	/**
	 * Get dimension name
	 * @param {string|number} dim
	 *        Dimension can be concrete names like x, y, z, lng, lat, angle, radius
	 *        Or a ordinal number. For example getDimensionInfo(0) will return 'x' or 'lng' or 'radius'
	 * @return {string} Concrete dim name.
	 */

	listProto.getDimension = function (dim) {
	  if (!isNaN(dim)) {
	    dim = this.dimensions[dim] || dim;
	  }

	  return dim;
	};
	/**
	 * Get type and stackable info of particular dimension
	 * @param {string|number} dim
	 *        Dimension can be concrete names like x, y, z, lng, lat, angle, radius
	 *        Or a ordinal number. For example getDimensionInfo(0) will return 'x' or 'lng' or 'radius'
	 */


	listProto.getDimensionInfo = function (dim) {
	  return zrUtil.clone(this._dimensionInfos[this.getDimension(dim)]);
	};
	/**
	 * Initialize from data
	 * @param {Array.<Object|number|Array>} data
	 * @param {Array.<string>} [nameList]
	 * @param {Function} [dimValueGetter] (dataItem, dimName, dataIndex, dimIndex) => number
	 */


	listProto.initData = function (data, nameList, dimValueGetter) {
	  data = data || [];
	  var isDataArray = zrUtil.isArray(data);

	  if (isDataArray) {
	    data = new DefaultDataProvider(data);
	  }

	  this._rawData = data; // Clear

	  var storage = this._storage = {};
	  var indices = this.indices = [];
	  var dimensions = this.dimensions;
	  var dimensionInfoMap = this._dimensionInfos;
	  var size = data.count();
	  var idList = [];
	  var nameRepeatCount = {};
	  var nameDimIdx;
	  nameList = nameList || []; // Init storage

	  for (var i = 0; i < dimensions.length; i++) {
	    var dimInfo = dimensionInfoMap[dimensions[i]];
	    dimInfo.otherDims.itemName === 0 && (nameDimIdx = i);
	    var DataCtor = dataCtors[dimInfo.type];
	    storage[dimensions[i]] = new DataCtor(size);
	  }

	  var self = this;

	  if (!dimValueGetter) {
	    self.hasItemOption = false;
	  } // Default dim value getter


	  dimValueGetter = dimValueGetter || function (dataItem, dimName, dataIndex, dimIndex) {
	    var value = modelUtil.getDataItemValue(dataItem); // If any dataItem is like { value: 10 }

	    if (modelUtil.isDataItemOption(dataItem)) {
	      self.hasItemOption = true;
	    }

	    return modelUtil.converDataValue(value instanceof Array ? value[dimIndex] // If value is a single number or something else not array.
	    : value, dimensionInfoMap[dimName]);
	  };

	  for (var i = 0; i < size; i++) {
	    // NOTICE: Try not to write things into dataItem
	    var dataItem = data.getItem(i); // Each data item is value
	    // [1, 2]
	    // 2
	    // Bar chart, line chart which uses category axis
	    // only gives the 'y' value. 'x' value is the indices of cateogry
	    // Use a tempValue to normalize the value to be a (x, y) value
	    // Store the data by dimensions

	    for (var k = 0; k < dimensions.length; k++) {
	      var dim = dimensions[k];
	      var dimStorage = storage[dim]; // PENDING NULL is empty or zero

	      dimStorage[i] = dimValueGetter(dataItem, dim, i, k);
	    }

	    indices.push(i);
	  } // Use the name in option and create id


	  for (var i = 0; i < size; i++) {
	    var dataItem = data.getItem(i);

	    if (!nameList[i] && dataItem) {
	      if (dataItem.name != null) {
	        nameList[i] = dataItem.name;
	      } else if (nameDimIdx != null) {
	        nameList[i] = storage[dimensions[nameDimIdx]][i];
	      }
	    }

	    var name = nameList[i] || ''; // Try using the id in option

	    var id = dataItem && dataItem.id;

	    if (!id && name) {
	      // Use name as id and add counter to avoid same name
	      nameRepeatCount[name] = nameRepeatCount[name] || 0;
	      id = name;

	      if (nameRepeatCount[name] > 0) {
	        id += '__ec__' + nameRepeatCount[name];
	      }

	      nameRepeatCount[name]++;
	    }

	    id && (idList[i] = id);
	  }

	  this._nameList = nameList;
	  this._idList = idList;
	};
	/**
	 * @return {number}
	 */


	listProto.count = function () {
	  return this.indices.length;
	};
	/**
	 * Get value. Return NaN if idx is out of range.
	 * @param {string} dim Dim must be concrete name.
	 * @param {number} idx
	 * @param {boolean} stack
	 * @return {number}
	 */


	listProto.get = function (dim, idx, stack) {
	  var storage = this._storage;
	  var dataIndex = this.indices[idx]; // If value not exists

	  if (dataIndex == null || !storage[dim]) {
	    return NaN;
	  }

	  var value = storage[dim][dataIndex]; // FIXME ordinal data type is not stackable

	  if (stack) {
	    var dimensionInfo = this._dimensionInfos[dim];

	    if (dimensionInfo && dimensionInfo.stackable) {
	      var stackedOn = this.stackedOn;

	      while (stackedOn) {
	        // Get no stacked data of stacked on
	        var stackedValue = stackedOn.get(dim, idx); // Considering positive stack, negative stack and empty data

	        if (value >= 0 && stackedValue > 0 || // Positive stack
	        value <= 0 && stackedValue < 0 // Negative stack
	        ) {
	            value += stackedValue;
	          }

	        stackedOn = stackedOn.stackedOn;
	      }
	    }
	  }

	  return value;
	};
	/**
	 * Get value for multi dimensions.
	 * @param {Array.<string>} [dimensions] If ignored, using all dimensions.
	 * @param {number} idx
	 * @param {boolean} stack
	 * @return {number}
	 */


	listProto.getValues = function (dimensions, idx, stack) {
	  var values = [];

	  if (!zrUtil.isArray(dimensions)) {
	    stack = idx;
	    idx = dimensions;
	    dimensions = this.dimensions;
	  }

	  for (var i = 0, len = dimensions.length; i < len; i++) {
	    values.push(this.get(dimensions[i], idx, stack));
	  }

	  return values;
	};
	/**
	 * If value is NaN. Inlcuding '-'
	 * @param {string} dim
	 * @param {number} idx
	 * @return {number}
	 */


	listProto.hasValue = function (idx) {
	  var dimensions = this.dimensions;
	  var dimensionInfos = this._dimensionInfos;

	  for (var i = 0, len = dimensions.length; i < len; i++) {
	    if ( // Ordinal type can be string or number
	    dimensionInfos[dimensions[i]].type !== 'ordinal' && isNaN(this.get(dimensions[i], idx))) {
	      return false;
	    }
	  }

	  return true;
	};
	/**
	 * Get extent of data in one dimension
	 * @param {string} dim
	 * @param {boolean} stack
	 * @param {Function} filter
	 */


	listProto.getDataExtent = function (dim, stack, filter) {
	  dim = this.getDimension(dim);
	  var dimData = this._storage[dim];
	  var dimInfo = this.getDimensionInfo(dim);
	  stack = dimInfo && dimInfo.stackable && stack;
	  var dimExtent = (this._extent || (this._extent = {}))[dim + !!stack];
	  var value;

	  if (dimExtent) {
	    return dimExtent;
	  } // var dimInfo = this._dimensionInfos[dim];


	  if (dimData) {
	    var min = Infinity;
	    var max = -Infinity; // var isOrdinal = dimInfo.type === 'ordinal';

	    for (var i = 0, len = this.count(); i < len; i++) {
	      value = this.get(dim, i, stack); // FIXME
	      // if (isOrdinal && typeof value === 'string') {
	      //     value = zrUtil.indexOf(dimData, value);
	      // }

	      if (!filter || filter(value, dim, i)) {
	        value < min && (min = value);
	        value > max && (max = value);
	      }
	    }

	    return this._extent[dim + !!stack] = [min, max];
	  } else {
	    return [Infinity, -Infinity];
	  }
	};
	/**
	 * Get sum of data in one dimension
	 * @param {string} dim
	 * @param {boolean} stack
	 */


	listProto.getSum = function (dim, stack) {
	  var dimData = this._storage[dim];
	  var sum = 0;

	  if (dimData) {
	    for (var i = 0, len = this.count(); i < len; i++) {
	      var value = this.get(dim, i, stack);

	      if (!isNaN(value)) {
	        sum += value;
	      }
	    }
	  }

	  return sum;
	};
	/**
	 * Retreive the index with given value
	 * @param {number} idx
	 * @param {number} value
	 * @return {number}
	 */
	// FIXME Precision of float value


	listProto.indexOf = function (dim, value) {
	  var storage = this._storage;
	  var dimData = storage[dim];
	  var indices = this.indices;

	  if (dimData) {
	    for (var i = 0, len = indices.length; i < len; i++) {
	      var rawIndex = indices[i];

	      if (dimData[rawIndex] === value) {
	        return i;
	      }
	    }
	  }

	  return -1;
	};
	/**
	 * Retreive the index with given name
	 * @param {number} idx
	 * @param {number} name
	 * @return {number}
	 */


	listProto.indexOfName = function (name) {
	  var indices = this.indices;
	  var nameList = this._nameList;

	  for (var i = 0, len = indices.length; i < len; i++) {
	    var rawIndex = indices[i];

	    if (nameList[rawIndex] === name) {
	      return i;
	    }
	  }

	  return -1;
	};
	/**
	 * Retreive the index with given raw data index
	 * @param {number} idx
	 * @param {number} name
	 * @return {number}
	 */


	listProto.indexOfRawIndex = function (rawIndex) {
	  // Indices are ascending
	  var indices = this.indices; // If rawIndex === dataIndex

	  var rawDataIndex = indices[rawIndex];

	  if (rawDataIndex != null && rawDataIndex === rawIndex) {
	    return rawIndex;
	  }

	  var left = 0;
	  var right = indices.length - 1;

	  while (left <= right) {
	    var mid = (left + right) / 2 | 0;

	    if (indices[mid] < rawIndex) {
	      left = mid + 1;
	    } else if (indices[mid] > rawIndex) {
	      right = mid - 1;
	    } else {
	      return mid;
	    }
	  }

	  return -1;
	};
	/**
	 * Retreive the index of nearest value
	 * @param {string} dim
	 * @param {number} value
	 * @param {boolean} stack If given value is after stacked
	 * @param {number} [maxDistance=Infinity]
	 * @return {Array.<number>} Considere multiple points has the same value.
	 */


	listProto.indicesOfNearest = function (dim, value, stack, maxDistance) {
	  var storage = this._storage;
	  var dimData = storage[dim];
	  var nearestIndices = [];

	  if (!dimData) {
	    return nearestIndices;
	  }

	  if (maxDistance == null) {
	    maxDistance = Infinity;
	  }

	  var minDist = Number.MAX_VALUE;
	  var minDiff = -1;

	  for (var i = 0, len = this.count(); i < len; i++) {
	    var diff = value - this.get(dim, i, stack);
	    var dist = Math.abs(diff);

	    if (diff <= maxDistance && dist <= minDist) {
	      // For the case of two data are same on xAxis, which has sequence data.
	      // Show the nearest index
	      // https://github.com/ecomfe/echarts/issues/2869
	      if (dist < minDist || diff >= 0 && minDiff < 0) {
	        minDist = dist;
	        minDiff = diff;
	        nearestIndices.length = 0;
	      }

	      nearestIndices.push(i);
	    }
	  }

	  return nearestIndices;
	};
	/**
	 * Get raw data index
	 * @param {number} idx
	 * @return {number}
	 */


	listProto.getRawIndex = function (idx) {
	  var rawIdx = this.indices[idx];
	  return rawIdx == null ? -1 : rawIdx;
	};
	/**
	 * Get raw data item
	 * @param {number} idx
	 * @return {number}
	 */


	listProto.getRawDataItem = function (idx) {
	  return this._rawData.getItem(this.getRawIndex(idx));
	};
	/**
	 * @param {number} idx
	 * @param {boolean} [notDefaultIdx=false]
	 * @return {string}
	 */


	listProto.getName = function (idx) {
	  return this._nameList[this.indices[idx]] || '';
	};
	/**
	 * @param {number} idx
	 * @param {boolean} [notDefaultIdx=false]
	 * @return {string}
	 */


	listProto.getId = function (idx) {
	  return this._idList[this.indices[idx]] || this.getRawIndex(idx) + '';
	};

	function normalizeDimensions(dimensions) {
	  if (!zrUtil.isArray(dimensions)) {
	    dimensions = [dimensions];
	  }

	  return dimensions;
	}
	/**
	 * Data iteration
	 * @param {string|Array.<string>}
	 * @param {Function} cb
	 * @param {boolean} [stack=false]
	 * @param {*} [context=this]
	 *
	 * @example
	 *  list.each('x', function (x, idx) {});
	 *  list.each(['x', 'y'], function (x, y, idx) {});
	 *  list.each(function (idx) {})
	 */


	listProto.each = function (dims, cb, stack, context) {
	  if (typeof dims === 'function') {
	    context = stack;
	    stack = cb;
	    cb = dims;
	    dims = [];
	  }

	  dims = zrUtil.map(normalizeDimensions(dims), this.getDimension, this);
	  var value = [];
	  var dimSize = dims.length;
	  var indices = this.indices;
	  context = context || this;

	  for (var i = 0; i < indices.length; i++) {
	    // Simple optimization
	    switch (dimSize) {
	      case 0:
	        cb.call(context, i);
	        break;

	      case 1:
	        cb.call(context, this.get(dims[0], i, stack), i);
	        break;

	      case 2:
	        cb.call(context, this.get(dims[0], i, stack), this.get(dims[1], i, stack), i);
	        break;

	      default:
	        for (var k = 0; k < dimSize; k++) {
	          value[k] = this.get(dims[k], i, stack);
	        } // Index


	        value[k] = i;
	        cb.apply(context, value);
	    }
	  }
	};
	/**
	 * Data filter
	 * @param {string|Array.<string>}
	 * @param {Function} cb
	 * @param {boolean} [stack=false]
	 * @param {*} [context=this]
	 */


	listProto.filterSelf = function (dimensions, cb, stack, context) {
	  if (typeof dimensions === 'function') {
	    context = stack;
	    stack = cb;
	    cb = dimensions;
	    dimensions = [];
	  }

	  dimensions = zrUtil.map(normalizeDimensions(dimensions), this.getDimension, this);
	  var newIndices = [];
	  var value = [];
	  var dimSize = dimensions.length;
	  var indices = this.indices;
	  context = context || this;

	  for (var i = 0; i < indices.length; i++) {
	    var keep; // Simple optimization

	    if (!dimSize) {
	      keep = cb.call(context, i);
	    } else if (dimSize === 1) {
	      keep = cb.call(context, this.get(dimensions[0], i, stack), i);
	    } else {
	      for (var k = 0; k < dimSize; k++) {
	        value[k] = this.get(dimensions[k], i, stack);
	      }

	      value[k] = i;
	      keep = cb.apply(context, value);
	    }

	    if (keep) {
	      newIndices.push(indices[i]);
	    }
	  }

	  this.indices = newIndices; // Reset data extent

	  this._extent = {};
	  return this;
	};
	/**
	 * Data mapping to a plain array
	 * @param {string|Array.<string>} [dimensions]
	 * @param {Function} cb
	 * @param {boolean} [stack=false]
	 * @param {*} [context=this]
	 * @return {Array}
	 */


	listProto.mapArray = function (dimensions, cb, stack, context) {
	  if (typeof dimensions === 'function') {
	    context = stack;
	    stack = cb;
	    cb = dimensions;
	    dimensions = [];
	  }

	  var result = [];
	  this.each(dimensions, function () {
	    result.push(cb && cb.apply(this, arguments));
	  }, stack, context);
	  return result;
	};

	function cloneListForMapAndSample(original, excludeDimensions) {
	  var allDimensions = original.dimensions;
	  var list = new List(zrUtil.map(allDimensions, original.getDimensionInfo, original), original.hostModel); // FIXME If needs stackedOn, value may already been stacked

	  transferProperties(list, original);
	  var storage = list._storage = {};
	  var originalStorage = original._storage; // Init storage

	  for (var i = 0; i < allDimensions.length; i++) {
	    var dim = allDimensions[i];
	    var dimStore = originalStorage[dim];

	    if (zrUtil.indexOf(excludeDimensions, dim) >= 0) {
	      storage[dim] = new dimStore.constructor(originalStorage[dim].length);
	    } else {
	      // Direct reference for other dimensions
	      storage[dim] = originalStorage[dim];
	    }
	  }

	  return list;
	}
	/**
	 * Data mapping to a new List with given dimensions
	 * @param {string|Array.<string>} dimensions
	 * @param {Function} cb
	 * @param {boolean} [stack=false]
	 * @param {*} [context=this]
	 * @return {Array}
	 */


	listProto.map = function (dimensions, cb, stack, context) {
	  dimensions = zrUtil.map(normalizeDimensions(dimensions), this.getDimension, this);
	  var list = cloneListForMapAndSample(this, dimensions); // Following properties are all immutable.
	  // So we can reference to the same value

	  var indices = list.indices = this.indices;
	  var storage = list._storage;
	  var tmpRetValue = [];
	  this.each(dimensions, function () {
	    var idx = arguments[arguments.length - 1];
	    var retValue = cb && cb.apply(this, arguments);

	    if (retValue != null) {
	      // a number
	      if (typeof retValue === 'number') {
	        tmpRetValue[0] = retValue;
	        retValue = tmpRetValue;
	      }

	      for (var i = 0; i < retValue.length; i++) {
	        var dim = dimensions[i];
	        var dimStore = storage[dim];
	        var rawIdx = indices[idx];

	        if (dimStore) {
	          dimStore[rawIdx] = retValue[i];
	        }
	      }
	    }
	  }, stack, context);
	  return list;
	};
	/**
	 * Large data down sampling on given dimension
	 * @param {string} dimension
	 * @param {number} rate
	 * @param {Function} sampleValue
	 * @param {Function} sampleIndex Sample index for name and id
	 */


	listProto.downSample = function (dimension, rate, sampleValue, sampleIndex) {
	  var list = cloneListForMapAndSample(this, [dimension]);
	  var storage = this._storage;
	  var targetStorage = list._storage;
	  var originalIndices = this.indices;
	  var indices = list.indices = [];
	  var frameValues = [];
	  var frameIndices = [];
	  var frameSize = Math.floor(1 / rate);
	  var dimStore = targetStorage[dimension];
	  var len = this.count(); // Copy data from original data

	  for (var i = 0; i < storage[dimension].length; i++) {
	    targetStorage[dimension][i] = storage[dimension][i];
	  }

	  for (var i = 0; i < len; i += frameSize) {
	    // Last frame
	    if (frameSize > len - i) {
	      frameSize = len - i;
	      frameValues.length = frameSize;
	    }

	    for (var k = 0; k < frameSize; k++) {
	      var idx = originalIndices[i + k];
	      frameValues[k] = dimStore[idx];
	      frameIndices[k] = idx;
	    }

	    var value = sampleValue(frameValues);
	    var idx = frameIndices[sampleIndex(frameValues, value) || 0]; // Only write value on the filtered data

	    dimStore[idx] = value;
	    indices.push(idx);
	  }

	  return list;
	};
	/**
	 * Get model of one data item.
	 *
	 * @param {number} idx
	 */
	// FIXME Model proxy ?


	listProto.getItemModel = function (idx) {
	  var hostModel = this.hostModel;
	  idx = this.indices[idx];
	  return new Model(this._rawData.getItem(idx), hostModel, hostModel && hostModel.ecModel);
	};
	/**
	 * Create a data differ
	 * @param {module:echarts/data/List} otherList
	 * @return {module:echarts/data/DataDiffer}
	 */


	listProto.diff = function (otherList) {
	  var idList = this._idList;
	  var otherIdList = otherList && otherList._idList;
	  var val; // Use prefix to avoid index to be the same as otherIdList[idx],
	  // which will cause weird udpate animation.

	  var prefix = 'e\0\0';
	  return new DataDiffer(otherList ? otherList.indices : [], this.indices, function (idx) {
	    return (val = otherIdList[idx]) != null ? val : prefix + idx;
	  }, function (idx) {
	    return (val = idList[idx]) != null ? val : prefix + idx;
	  });
	};
	/**
	 * Get visual property.
	 * @param {string} key
	 */


	listProto.getVisual = function (key) {
	  var visual = this._visual;
	  return visual && visual[key];
	};
	/**
	 * Set visual property
	 * @param {string|Object} key
	 * @param {*} [value]
	 *
	 * @example
	 *  setVisual('color', color);
	 *  setVisual({
	 *      'color': color
	 *  });
	 */


	listProto.setVisual = function (key, val) {
	  if (isObject(key)) {
	    for (var name in key) {
	      if (key.hasOwnProperty(name)) {
	        this.setVisual(name, key[name]);
	      }
	    }

	    return;
	  }

	  this._visual = this._visual || {};
	  this._visual[key] = val;
	};
	/**
	 * Set layout property.
	 * @param {string|Object} key
	 * @param {*} [val]
	 */


	listProto.setLayout = function (key, val) {
	  if (isObject(key)) {
	    for (var name in key) {
	      if (key.hasOwnProperty(name)) {
	        this.setLayout(name, key[name]);
	      }
	    }

	    return;
	  }

	  this._layout[key] = val;
	};
	/**
	 * Get layout property.
	 * @param  {string} key.
	 * @return {*}
	 */


	listProto.getLayout = function (key) {
	  return this._layout[key];
	};
	/**
	 * Get layout of single data item
	 * @param {number} idx
	 */


	listProto.getItemLayout = function (idx) {
	  return this._itemLayouts[idx];
	};
	/**
	 * Set layout of single data item
	 * @param {number} idx
	 * @param {Object} layout
	 * @param {boolean=} [merge=false]
	 */


	listProto.setItemLayout = function (idx, layout, merge) {
	  this._itemLayouts[idx] = merge ? zrUtil.extend(this._itemLayouts[idx] || {}, layout) : layout;
	};
	/**
	 * Clear all layout of single data item
	 */


	listProto.clearItemLayouts = function () {
	  this._itemLayouts.length = 0;
	};
	/**
	 * Get visual property of single data item
	 * @param {number} idx
	 * @param {string} key
	 * @param {boolean} [ignoreParent=false]
	 */


	listProto.getItemVisual = function (idx, key, ignoreParent) {
	  var itemVisual = this._itemVisuals[idx];
	  var val = itemVisual && itemVisual[key];

	  if (val == null && !ignoreParent) {
	    // Use global visual property
	    return this.getVisual(key);
	  }

	  return val;
	};
	/**
	 * Set visual property of single data item
	 *
	 * @param {number} idx
	 * @param {string|Object} key
	 * @param {*} [value]
	 *
	 * @example
	 *  setItemVisual(0, 'color', color);
	 *  setItemVisual(0, {
	 *      'color': color
	 *  });
	 */


	listProto.setItemVisual = function (idx, key, value) {
	  var itemVisual = this._itemVisuals[idx] || {};
	  this._itemVisuals[idx] = itemVisual;

	  if (isObject(key)) {
	    for (var name in key) {
	      if (key.hasOwnProperty(name)) {
	        itemVisual[name] = key[name];
	      }
	    }

	    return;
	  }

	  itemVisual[key] = value;
	};
	/**
	 * Clear itemVisuals and list visual.
	 */


	listProto.clearAllVisual = function () {
	  this._visual = {};
	  this._itemVisuals = [];
	};

	var setItemDataAndSeriesIndex = function (child) {
	  child.seriesIndex = this.seriesIndex;
	  child.dataIndex = this.dataIndex;
	  child.dataType = this.dataType;
	};
	/**
	 * Set graphic element relative to data. It can be set as null
	 * @param {number} idx
	 * @param {module:zrender/Element} [el]
	 */


	listProto.setItemGraphicEl = function (idx, el) {
	  var hostModel = this.hostModel;

	  if (el) {
	    // Add data index and series index for indexing the data by element
	    // Useful in tooltip
	    el.dataIndex = idx;
	    el.dataType = this.dataType;
	    el.seriesIndex = hostModel && hostModel.seriesIndex;

	    if (el.type === 'group') {
	      el.traverse(setItemDataAndSeriesIndex, el);
	    }
	  }

	  this._graphicEls[idx] = el;
	};
	/**
	 * @param {number} idx
	 * @return {module:zrender/Element}
	 */


	listProto.getItemGraphicEl = function (idx) {
	  return this._graphicEls[idx];
	};
	/**
	 * @param {Function} cb
	 * @param {*} context
	 */


	listProto.eachItemGraphicEl = function (cb, context) {
	  zrUtil.each(this._graphicEls, function (el, idx) {
	    if (el) {
	      cb && cb.call(context, el, idx);
	    }
	  });
	};
	/**
	 * Shallow clone a new list except visual and layout properties, and graph elements.
	 * New list only change the indices.
	 */


	listProto.cloneShallow = function () {
	  var dimensionInfoList = zrUtil.map(this.dimensions, this.getDimensionInfo, this);
	  var list = new List(dimensionInfoList, this.hostModel); // FIXME

	  list._storage = this._storage;
	  transferProperties(list, this); // Clone will not change the data extent and indices

	  list.indices = this.indices.slice();

	  if (this._extent) {
	    list._extent = zrUtil.extend({}, this._extent);
	  }

	  return list;
	};
	/**
	 * Wrap some method to add more feature
	 * @param {string} methodName
	 * @param {Function} injectFunction
	 */


	listProto.wrapMethod = function (methodName, injectFunction) {
	  var originalMethod = this[methodName];

	  if (typeof originalMethod !== 'function') {
	    return;
	  }

	  this.__wrappedMethods = this.__wrappedMethods || [];

	  this.__wrappedMethods.push(methodName);

	  this[methodName] = function () {
	    var res = originalMethod.apply(this, arguments);
	    return injectFunction.apply(this, [res].concat(zrUtil.slice(arguments)));
	  };
	}; // Methods that create a new list based on this list should be listed here.
	// Notice that those method should `RETURN` the new list.


	listProto.TRANSFERABLE_METHODS = ['cloneShallow', 'downSample', 'map']; // Methods that change indices of this list should be listed here.

	listProto.CHANGABLE_METHODS = ['filterSelf'];
	var _default = List;
	module.exports = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 266 */
/***/ function(module, exports) {

	function defaultKeyGetter(item) {
	  return item;
	}
	/**
	 * @param {Array} oldArr
	 * @param {Array} newArr
	 * @param {Function} oldKeyGetter
	 * @param {Function} newKeyGetter
	 * @param {Object} [context] Can be visited by this.context in callback.
	 */


	function DataDiffer(oldArr, newArr, oldKeyGetter, newKeyGetter, context) {
	  this._old = oldArr;
	  this._new = newArr;
	  this._oldKeyGetter = oldKeyGetter || defaultKeyGetter;
	  this._newKeyGetter = newKeyGetter || defaultKeyGetter;
	  this.context = context;
	}

	DataDiffer.prototype = {
	  constructor: DataDiffer,

	  /**
	   * Callback function when add a data
	   */
	  add: function (func) {
	    this._add = func;
	    return this;
	  },

	  /**
	   * Callback function when update a data
	   */
	  update: function (func) {
	    this._update = func;
	    return this;
	  },

	  /**
	   * Callback function when remove a data
	   */
	  remove: function (func) {
	    this._remove = func;
	    return this;
	  },
	  execute: function () {
	    var oldArr = this._old;
	    var newArr = this._new;
	    var oldDataIndexMap = {};
	    var newDataIndexMap = {};
	    var oldDataKeyArr = [];
	    var newDataKeyArr = [];
	    var i;
	    initIndexMap(oldArr, oldDataIndexMap, oldDataKeyArr, '_oldKeyGetter', this);
	    initIndexMap(newArr, newDataIndexMap, newDataKeyArr, '_newKeyGetter', this); // Travel by inverted order to make sure order consistency
	    // when duplicate keys exists (consider newDataIndex.pop() below).
	    // For performance consideration, these code below do not look neat.

	    for (i = 0; i < oldArr.length; i++) {
	      var key = oldDataKeyArr[i];
	      var idx = newDataIndexMap[key]; // idx can never be empty array here. see 'set null' logic below.

	      if (idx != null) {
	        // Consider there is duplicate key (for example, use dataItem.name as key).
	        // We should make sure every item in newArr and oldArr can be visited.
	        var len = idx.length;

	        if (len) {
	          len === 1 && (newDataIndexMap[key] = null);
	          idx = idx.unshift();
	        } else {
	          newDataIndexMap[key] = null;
	        }

	        this._update && this._update(idx, i);
	      } else {
	        this._remove && this._remove(i);
	      }
	    }

	    for (var i = 0; i < newDataKeyArr.length; i++) {
	      var key = newDataKeyArr[i];

	      if (newDataIndexMap.hasOwnProperty(key)) {
	        var idx = newDataIndexMap[key];

	        if (idx == null) {
	          continue;
	        } // idx can never be empty array here. see 'set null' logic above.


	        if (!idx.length) {
	          this._add && this._add(idx);
	        } else {
	          for (var j = 0, len = idx.length; j < len; j++) {
	            this._add && this._add(idx[j]);
	          }
	        }
	      }
	    }
	  }
	};

	function initIndexMap(arr, map, keyArr, keyGetterName, dataDiffer) {
	  for (var i = 0; i < arr.length; i++) {
	    // Add prefix to avoid conflict with Object.prototype.
	    var key = '_ec_' + dataDiffer[keyGetterName](arr[i], i);
	    var existence = map[key];

	    if (existence == null) {
	      keyArr.push(key);
	      map[key] = i;
	    } else {
	      if (!existence.length) {
	        map[key] = existence = [existence];
	      }

	      existence.push(i);
	    }
	  }
	}

	var _default = DataDiffer;
	module.exports = _default;

/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var _model = __webpack_require__(203);

	var normalizeToArray = _model.normalizeToArray;

	/**
	 * Complete dimensions by data (guess dimension).
	 */
	var each = zrUtil.each;
	var isString = zrUtil.isString;
	var defaults = zrUtil.defaults;
	var OTHER_DIMS = {
	  tooltip: 1,
	  label: 1,
	  itemName: 1
	};
	/**
	 * Complete the dimensions array, by user defined `dimension` and `encode`,
	 * and guessing from the data structure.
	 * If no 'value' dimension specified, the first no-named dimension will be
	 * named as 'value'.
	 *
	 * @param {Array.<string>} sysDims Necessary dimensions, like ['x', 'y'], which
	 *      provides not only dim template, but also default order.
	 *      `name` of each item provides default coord name.
	 *      [{dimsDef: []}, ...] can be specified to give names.
	 * @param {Array} data Data list. [[1, 2, 3], [2, 3, 4]].
	 * @param {Object} [opt]
	 * @param {Array.<Object|string>} [opt.dimsDef] option.series.dimensions User defined dimensions
	 *      For example: ['asdf', {name, type}, ...].
	 * @param {Object} [opt.encodeDef] option.series.encode {x: 2, y: [3, 1], tooltip: [1, 2], label: 3}
	 * @param {string} [opt.extraPrefix] Prefix of name when filling the left dimensions.
	 * @param {string} [opt.extraFromZero] If specified, extra dim names will be:
	 *                      extraPrefix + 0, extraPrefix + extraBaseIndex + 1 ...
	 *                      If not specified, extra dim names will be:
	 *                      extraPrefix, extraPrefix + 0, extraPrefix + 1 ...
	 * @param {number} [opt.dimCount] If not specified, guess by the first data item.
	 * @return {Array.<Object>} [{
	 *      name: string mandatory,
	 *      coordDim: string mandatory,
	 *      coordDimIndex: number mandatory,
	 *      type: string optional,
	 *      tooltipName: string optional,
	 *      otherDims: {
	 *          tooltip: number optional,
	 *          label: number optional
	 *      },
	 *      isExtraCoord: boolean true or undefined.
	 *      other props ...
	 * }]
	 */

	function completeDimensions(sysDims, data, opt) {
	  data = data || [];
	  opt = opt || {};
	  sysDims = (sysDims || []).slice();
	  var dimsDef = (opt.dimsDef || []).slice();
	  var encodeDef = zrUtil.createHashMap(opt.encodeDef);
	  var dataDimNameMap = zrUtil.createHashMap();
	  var coordDimNameMap = zrUtil.createHashMap(); // var valueCandidate;

	  var result = [];
	  var dimCount = opt.dimCount;

	  if (dimCount == null) {
	    var value0 = retrieveValue(data[0]);
	    dimCount = Math.max(zrUtil.isArray(value0) && value0.length || 1, sysDims.length, dimsDef.length);
	    each(sysDims, function (sysDimItem) {
	      var sysDimItemDimsDef = sysDimItem.dimsDef;
	      sysDimItemDimsDef && (dimCount = Math.max(dimCount, sysDimItemDimsDef.length));
	    });
	  } // Apply user defined dims (`name` and `type`) and init result.


	  for (var i = 0; i < dimCount; i++) {
	    var dimDefItem = isString(dimsDef[i]) ? {
	      name: dimsDef[i]
	    } : dimsDef[i] || {};
	    var userDimName = dimDefItem.name;
	    var resultItem = result[i] = {
	      otherDims: {}
	    }; // Name will be applied later for avoiding duplication.

	    if (userDimName != null && dataDimNameMap.get(userDimName) == null) {
	      // Only if `series.dimensions` is defined in option, tooltipName
	      // will be set, and dimension will be diplayed vertically in
	      // tooltip by default.
	      resultItem.name = resultItem.tooltipName = userDimName;
	      dataDimNameMap.set(userDimName, i);
	    }

	    dimDefItem.type != null && (resultItem.type = dimDefItem.type);
	  } // Set `coordDim` and `coordDimIndex` by `encodeDef` and normalize `encodeDef`.


	  encodeDef.each(function (dataDims, coordDim) {
	    dataDims = encodeDef.set(coordDim, normalizeToArray(dataDims).slice());
	    each(dataDims, function (resultDimIdx, coordDimIndex) {
	      // The input resultDimIdx can be dim name or index.
	      isString(resultDimIdx) && (resultDimIdx = dataDimNameMap.get(resultDimIdx));

	      if (resultDimIdx != null && resultDimIdx < dimCount) {
	        dataDims[coordDimIndex] = resultDimIdx;
	        applyDim(result[resultDimIdx], coordDim, coordDimIndex);
	      }
	    });
	  }); // Apply templetes and default order from `sysDims`.

	  var availDimIdx = 0;
	  each(sysDims, function (sysDimItem, sysDimIndex) {
	    var coordDim;
	    var sysDimItem;
	    var sysDimItemDimsDef;
	    var sysDimItemOtherDims;

	    if (isString(sysDimItem)) {
	      coordDim = sysDimItem;
	      sysDimItem = {};
	    } else {
	      coordDim = sysDimItem.name;
	      sysDimItem = zrUtil.clone(sysDimItem); // `coordDimIndex` should not be set directly.

	      sysDimItemDimsDef = sysDimItem.dimsDef;
	      sysDimItemOtherDims = sysDimItem.otherDims;
	      sysDimItem.name = sysDimItem.coordDim = sysDimItem.coordDimIndex = sysDimItem.dimsDef = sysDimItem.otherDims = null;
	    }

	    var dataDims = normalizeToArray(encodeDef.get(coordDim)); // dimensions provides default dim sequences.

	    if (!dataDims.length) {
	      for (var i = 0; i < (sysDimItemDimsDef && sysDimItemDimsDef.length || 1); i++) {
	        while (availDimIdx < result.length && result[availDimIdx].coordDim != null) {
	          availDimIdx++;
	        }

	        availDimIdx < result.length && dataDims.push(availDimIdx++);
	      }
	    } // Apply templates.


	    each(dataDims, function (resultDimIdx, coordDimIndex) {
	      var resultItem = result[resultDimIdx];
	      applyDim(defaults(resultItem, sysDimItem), coordDim, coordDimIndex);

	      if (resultItem.name == null && sysDimItemDimsDef) {
	        resultItem.name = resultItem.tooltipName = sysDimItemDimsDef[coordDimIndex];
	      }

	      sysDimItemOtherDims && defaults(resultItem.otherDims, sysDimItemOtherDims);
	    });
	  }); // Make sure the first extra dim is 'value'.

	  var extra = opt.extraPrefix || 'value'; // Set dim `name` and other `coordDim` and other props.

	  for (var resultDimIdx = 0; resultDimIdx < dimCount; resultDimIdx++) {
	    var resultItem = result[resultDimIdx] = result[resultDimIdx] || {};
	    var coordDim = resultItem.coordDim;
	    coordDim == null && (resultItem.coordDim = genName(extra, coordDimNameMap, opt.extraFromZero), resultItem.coordDimIndex = 0, resultItem.isExtraCoord = true);
	    resultItem.name == null && (resultItem.name = genName(resultItem.coordDim, dataDimNameMap));
	    resultItem.type == null && guessOrdinal(data, resultDimIdx) && (resultItem.type = 'ordinal');
	  }

	  return result;

	  function applyDim(resultItem, coordDim, coordDimIndex) {
	    if (OTHER_DIMS[coordDim]) {
	      resultItem.otherDims[coordDim] = coordDimIndex;
	    } else {
	      resultItem.coordDim = coordDim;
	      resultItem.coordDimIndex = coordDimIndex;
	      coordDimNameMap.set(coordDim, true);
	    }
	  }

	  function genName(name, map, fromZero) {
	    if (fromZero || map.get(name) != null) {
	      var i = 0;

	      while (map.get(name + i) != null) {
	        i++;
	      }

	      name += i;
	    }

	    map.set(name, true);
	    return name;
	  }
	} // The rule should not be complex, otherwise user might not
	// be able to known where the data is wrong.


	var guessOrdinal = completeDimensions.guessOrdinal = function (data, dimIndex) {
	  for (var i = 0, len = data.length; i < len; i++) {
	    var value = retrieveValue(data[i]);

	    if (!zrUtil.isArray(value)) {
	      return false;
	    }

	    var value = value[dimIndex]; // Consider usage convenience, '1', '2' will be treated as "number".
	    // `isFinit('')` get `true`.

	    if (value != null && isFinite(value) && value !== '') {
	      return false;
	    } else if (isString(value) && value !== '-') {
	      return true;
	    }
	  }

	  return false;
	};

	function retrieveValue(o) {
	  return zrUtil.isArray(o) ? o : zrUtil.isObject(o) ? o.value : o;
	}

	var _default = completeDimensions;
	module.exports = _default;

/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(162);

	var __DEV__ = _config.__DEV__;

	var zrUtil = __webpack_require__(166);

	var textContain = __webpack_require__(195);

	var OrdinalScale = __webpack_require__(269);

	var IntervalScale = __webpack_require__(271);

	var Scale = __webpack_require__(270);

	var numberUtil = __webpack_require__(205);

	__webpack_require__(273);

	__webpack_require__(274);

	/**
	 * Get axis scale extent before niced.
	 * Item of returned array can only be number (including Infinity and NaN).
	 */
	function getScaleExtent(scale, model) {
	  var scaleType = scale.type;
	  var min = model.getMin();
	  var max = model.getMax();
	  var fixMin = min != null;
	  var fixMax = max != null;
	  var originalExtent = scale.getExtent();
	  var axisDataLen;
	  var boundaryGap;
	  var span;

	  if (scaleType === 'ordinal') {
	    axisDataLen = (model.get('data') || []).length;
	  } else {
	    boundaryGap = model.get('boundaryGap');

	    if (!zrUtil.isArray(boundaryGap)) {
	      boundaryGap = [boundaryGap || 0, boundaryGap || 0];
	    }

	    if (typeof boundaryGap[0] === 'boolean') {
	      boundaryGap = [0, 0];
	    }

	    boundaryGap[0] = numberUtil.parsePercent(boundaryGap[0], 1);
	    boundaryGap[1] = numberUtil.parsePercent(boundaryGap[1], 1);
	    span = originalExtent[1] - originalExtent[0] || Math.abs(originalExtent[0]);
	  } // Notice: When min/max is not set (that is, when there are null/undefined,
	  // which is the most common case), these cases should be ensured:
	  // (1) For 'ordinal', show all axis.data.
	  // (2) For others:
	  //      + `boundaryGap` is applied (if min/max set, boundaryGap is
	  //      disabled).
	  //      + If `needCrossZero`, min/max should be zero, otherwise, min/max should
	  //      be the result that originalExtent enlarged by boundaryGap.
	  // (3) If no data, it should be ensured that `scale.setBlank` is set.
	  // FIXME
	  // (1) When min/max is 'dataMin' or 'dataMax', should boundaryGap be able to used?
	  // (2) When `needCrossZero` and all data is positive/negative, should it be ensured
	  // that the results processed by boundaryGap are positive/negative?


	  if (min == null) {
	    min = scaleType === 'ordinal' ? axisDataLen ? 0 : NaN : originalExtent[0] - boundaryGap[0] * span;
	  }

	  if (max == null) {
	    max = scaleType === 'ordinal' ? axisDataLen ? axisDataLen - 1 : NaN : originalExtent[1] + boundaryGap[1] * span;
	  }

	  if (min === 'dataMin') {
	    min = originalExtent[0];
	  } else if (typeof min === 'function') {
	    min = min({
	      min: originalExtent[0],
	      max: originalExtent[1]
	    });
	  }

	  if (max === 'dataMax') {
	    max = originalExtent[1];
	  } else if (typeof max === 'function') {
	    max = max({
	      min: originalExtent[0],
	      max: originalExtent[1]
	    });
	  }

	  (min == null || !isFinite(min)) && (min = NaN);
	  (max == null || !isFinite(max)) && (max = NaN);
	  scale.setBlank(zrUtil.eqNaN(min) || zrUtil.eqNaN(max)); // Evaluate if axis needs cross zero

	  if (model.getNeedCrossZero()) {
	    // Axis is over zero and min is not set
	    if (min > 0 && max > 0 && !fixMin) {
	      min = 0;
	    } // Axis is under zero and max is not set


	    if (min < 0 && max < 0 && !fixMax) {
	      max = 0;
	    }
	  }

	  return [min, max];
	}

	function niceScaleExtent(scale, model) {
	  var extent = getScaleExtent(scale, model);
	  var fixMin = model.getMin() != null;
	  var fixMax = model.getMax() != null;
	  var splitNumber = model.get('splitNumber');

	  if (scale.type === 'log') {
	    scale.base = model.get('logBase');
	  }

	  var scaleType = scale.type;
	  scale.setExtent(extent[0], extent[1]);
	  scale.niceExtent({
	    splitNumber: splitNumber,
	    fixMin: fixMin,
	    fixMax: fixMax,
	    minInterval: scaleType === 'interval' || scaleType === 'time' ? model.get('minInterval') : null,
	    maxInterval: scaleType === 'interval' || scaleType === 'time' ? model.get('maxInterval') : null
	  }); // If some one specified the min, max. And the default calculated interval
	  // is not good enough. He can specify the interval. It is often appeared
	  // in angle axis with angle 0 - 360. Interval calculated in interval scale is hard
	  // to be 60.
	  // FIXME

	  var interval = model.get('interval');

	  if (interval != null) {
	    scale.setInterval && scale.setInterval(interval);
	  }
	}
	/**
	 * @param {module:echarts/model/Model} model
	 * @param {string} [axisType] Default retrieve from model.type
	 * @return {module:echarts/scale/*}
	 */


	function createScaleByModel(model, axisType) {
	  axisType = axisType || model.get('type');

	  if (axisType) {
	    switch (axisType) {
	      // Buildin scale
	      case 'category':
	        return new OrdinalScale(model.getCategories(), [Infinity, -Infinity]);

	      case 'value':
	        return new IntervalScale();
	      // Extended scale, like time and log

	      default:
	        return (Scale.getClass(axisType) || IntervalScale).create(model);
	    }
	  }
	}
	/**
	 * Check if the axis corss 0
	 */


	function ifAxisCrossZero(axis) {
	  var dataExtent = axis.scale.getExtent();
	  var min = dataExtent[0];
	  var max = dataExtent[1];
	  return !(min > 0 && max > 0 || min < 0 && max < 0);
	}
	/**
	 * @param {Array.<number>} tickCoords In axis self coordinate.
	 * @param {Array.<string>} labels
	 * @param {string} font
	 * @param {number} axisRotate 0: towards right horizontally, clock-wise is negative.
	 * @param {number} [labelRotate=0] 0: towards right horizontally, clock-wise is negative.
	 * @return {number}
	 */


	function getAxisLabelInterval(tickCoords, labels, font, axisRotate, labelRotate) {
	  var textSpaceTakenRect;
	  var autoLabelInterval = 0;
	  var accumulatedLabelInterval = 0;
	  var rotation = (axisRotate - labelRotate) / 180 * Math.PI;
	  var step = 1;

	  if (labels.length > 40) {
	    // Simple optimization for large amount of labels
	    step = Math.floor(labels.length / 40);
	  }

	  for (var i = 0; i < tickCoords.length; i += step) {
	    var tickCoord = tickCoords[i]; // Not precise, do not consider align and vertical align
	    // and each distance from axis line yet.

	    var rect = textContain.getBoundingRect(labels[i], font, 'center', 'top');
	    rect.x += tickCoord * Math.cos(rotation);
	    rect.y += tickCoord * Math.sin(rotation); // Magic number

	    rect.width *= 1.3;
	    rect.height *= 1.3;

	    if (!textSpaceTakenRect) {
	      textSpaceTakenRect = rect.clone();
	    } // There is no space for current label;
	    else if (textSpaceTakenRect.intersect(rect)) {
	        accumulatedLabelInterval++;
	        autoLabelInterval = Math.max(autoLabelInterval, accumulatedLabelInterval);
	      } else {
	        textSpaceTakenRect.union(rect); // Reset

	        accumulatedLabelInterval = 0;
	      }
	  }

	  if (autoLabelInterval === 0 && step > 1) {
	    return step;
	  }

	  return (autoLabelInterval + 1) * step - 1;
	}
	/**
	 * @param {Object} axis
	 * @param {Function} labelFormatter
	 * @return {Array.<string>}
	 */


	function getFormattedLabels(axis, labelFormatter) {
	  var scale = axis.scale;
	  var labels = scale.getTicksLabels();
	  var ticks = scale.getTicks();

	  if (typeof labelFormatter === 'string') {
	    labelFormatter = function (tpl) {
	      return function (val) {
	        return tpl.replace('{value}', val != null ? val : '');
	      };
	    }(labelFormatter); // Consider empty array


	    return zrUtil.map(labels, labelFormatter);
	  } else if (typeof labelFormatter === 'function') {
	    return zrUtil.map(ticks, function (tick, idx) {
	      return labelFormatter(getAxisRawValue(axis, tick), idx);
	    }, this);
	  } else {
	    return labels;
	  }
	}

	function getAxisRawValue(axis, value) {
	  // In category axis with data zoom, tick is not the original
	  // index of axis.data. So tick should not be exposed to user
	  // in category axis.
	  return axis.type === 'category' ? axis.scale.getLabel(value) : value;
	}

	exports.getScaleExtent = getScaleExtent;
	exports.niceScaleExtent = niceScaleExtent;
	exports.createScaleByModel = createScaleByModel;
	exports.ifAxisCrossZero = ifAxisCrossZero;
	exports.getAxisLabelInterval = getAxisLabelInterval;
	exports.getFormattedLabels = getFormattedLabels;
	exports.getAxisRawValue = getAxisRawValue;

/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var Scale = __webpack_require__(270);

	/**
	 * Linear continuous scale
	 * @module echarts/coord/scale/Ordinal
	 *
	 * http://en.wikipedia.org/wiki/Level_of_measurement
	 */
	// FIXME only one data
	var scaleProto = Scale.prototype;
	var OrdinalScale = Scale.extend({
	  type: 'ordinal',
	  init: function (data, extent) {
	    this._data = data;
	    this._extent = extent || [0, data.length - 1];
	  },
	  parse: function (val) {
	    return typeof val === 'string' ? zrUtil.indexOf(this._data, val) // val might be float.
	    : Math.round(val);
	  },
	  contain: function (rank) {
	    rank = this.parse(rank);
	    return scaleProto.contain.call(this, rank) && this._data[rank] != null;
	  },

	  /**
	   * Normalize given rank or name to linear [0, 1]
	   * @param {number|string} [val]
	   * @return {number}
	   */
	  normalize: function (val) {
	    return scaleProto.normalize.call(this, this.parse(val));
	  },
	  scale: function (val) {
	    return Math.round(scaleProto.scale.call(this, val));
	  },

	  /**
	   * @return {Array}
	   */
	  getTicks: function () {
	    var ticks = [];
	    var extent = this._extent;
	    var rank = extent[0];

	    while (rank <= extent[1]) {
	      ticks.push(rank);
	      rank++;
	    }

	    return ticks;
	  },

	  /**
	   * Get item on rank n
	   * @param {number} n
	   * @return {string}
	   */
	  getLabel: function (n) {
	    return this._data[n];
	  },

	  /**
	   * @return {number}
	   */
	  count: function () {
	    return this._extent[1] - this._extent[0] + 1;
	  },

	  /**
	   * @override
	   */
	  unionExtentFromData: function (data, dim) {
	    this.unionExtent(data.getDataExtent(dim, false));
	  },
	  niceTicks: zrUtil.noop,
	  niceExtent: zrUtil.noop
	});
	/**
	 * @return {module:echarts/scale/Time}
	 */

	OrdinalScale.create = function () {
	  return new OrdinalScale();
	};

	var _default = OrdinalScale;
	module.exports = _default;

/***/ },
/* 270 */
/***/ function(module, exports, __webpack_require__) {

	var clazzUtil = __webpack_require__(207);

	/**
	 * // Scale class management
	 * @module echarts/scale/Scale
	 */

	/**
	 * @param {Object} [setting]
	 */
	function Scale(setting) {
	  this._setting = setting || {};
	  /**
	   * Extent
	   * @type {Array.<number>}
	   * @protected
	   */

	  this._extent = [Infinity, -Infinity];
	  /**
	   * Step is calculated in adjustExtent
	   * @type {Array.<number>}
	   * @protected
	   */

	  this._interval = 0;
	  this.init && this.init.apply(this, arguments);
	}
	/**
	 * Parse input val to valid inner number.
	 * @param {*} val
	 * @return {number}
	 */


	Scale.prototype.parse = function (val) {
	  // Notice: This would be a trap here, If the implementation
	  // of this method depends on extent, and this method is used
	  // before extent set (like in dataZoom), it would be wrong.
	  // Nevertheless, parse does not depend on extent generally.
	  return val;
	};

	Scale.prototype.getSetting = function (name) {
	  return this._setting[name];
	};

	Scale.prototype.contain = function (val) {
	  var extent = this._extent;
	  return val >= extent[0] && val <= extent[1];
	};
	/**
	 * Normalize value to linear [0, 1], return 0.5 if extent span is 0
	 * @param {number} val
	 * @return {number}
	 */


	Scale.prototype.normalize = function (val) {
	  var extent = this._extent;

	  if (extent[1] === extent[0]) {
	    return 0.5;
	  }

	  return (val - extent[0]) / (extent[1] - extent[0]);
	};
	/**
	 * Scale normalized value
	 * @param {number} val
	 * @return {number}
	 */


	Scale.prototype.scale = function (val) {
	  var extent = this._extent;
	  return val * (extent[1] - extent[0]) + extent[0];
	};
	/**
	 * Set extent from data
	 * @param {Array.<number>} other
	 */


	Scale.prototype.unionExtent = function (other) {
	  var extent = this._extent;
	  other[0] < extent[0] && (extent[0] = other[0]);
	  other[1] > extent[1] && (extent[1] = other[1]); // not setExtent because in log axis it may transformed to power
	  // this.setExtent(extent[0], extent[1]);
	};
	/**
	 * Set extent from data
	 * @param {module:echarts/data/List} data
	 * @param {string} dim
	 */


	Scale.prototype.unionExtentFromData = function (data, dim) {
	  this.unionExtent(data.getDataExtent(dim, true));
	};
	/**
	 * Get extent
	 * @return {Array.<number>}
	 */


	Scale.prototype.getExtent = function () {
	  return this._extent.slice();
	};
	/**
	 * Set extent
	 * @param {number} start
	 * @param {number} end
	 */


	Scale.prototype.setExtent = function (start, end) {
	  var thisExtent = this._extent;

	  if (!isNaN(start)) {
	    thisExtent[0] = start;
	  }

	  if (!isNaN(end)) {
	    thisExtent[1] = end;
	  }
	};
	/**
	 * @return {Array.<string>}
	 */


	Scale.prototype.getTicksLabels = function () {
	  var labels = [];
	  var ticks = this.getTicks();

	  for (var i = 0; i < ticks.length; i++) {
	    labels.push(this.getLabel(ticks[i]));
	  }

	  return labels;
	};
	/**
	 * When axis extent depends on data and no data exists,
	 * axis ticks should not be drawn, which is named 'blank'.
	 */


	Scale.prototype.isBlank = function () {
	  return this._isBlank;
	},
	/**
	 * When axis extent depends on data and no data exists,
	 * axis ticks should not be drawn, which is named 'blank'.
	 */
	Scale.prototype.setBlank = function (isBlank) {
	  this._isBlank = isBlank;
	};
	clazzUtil.enableClassExtend(Scale);
	clazzUtil.enableClassManagement(Scale, {
	  registerWhenExtend: true
	});
	var _default = Scale;
	module.exports = _default;

/***/ },
/* 271 */
/***/ function(module, exports, __webpack_require__) {

	var numberUtil = __webpack_require__(205);

	var formatUtil = __webpack_require__(204);

	var Scale = __webpack_require__(270);

	var helper = __webpack_require__(272);

	/**
	 * Interval scale
	 * @module echarts/scale/Interval
	 */
	var roundNumber = numberUtil.round;
	/**
	 * @alias module:echarts/coord/scale/Interval
	 * @constructor
	 */

	var IntervalScale = Scale.extend({
	  type: 'interval',
	  _interval: 0,
	  _intervalPrecision: 2,
	  setExtent: function (start, end) {
	    var thisExtent = this._extent; //start,end may be a Number like '25',so...

	    if (!isNaN(start)) {
	      thisExtent[0] = parseFloat(start);
	    }

	    if (!isNaN(end)) {
	      thisExtent[1] = parseFloat(end);
	    }
	  },
	  unionExtent: function (other) {
	    var extent = this._extent;
	    other[0] < extent[0] && (extent[0] = other[0]);
	    other[1] > extent[1] && (extent[1] = other[1]); // unionExtent may called by it's sub classes

	    IntervalScale.prototype.setExtent.call(this, extent[0], extent[1]);
	  },

	  /**
	   * Get interval
	   */
	  getInterval: function () {
	    return this._interval;
	  },

	  /**
	   * Set interval
	   */
	  setInterval: function (interval) {
	    this._interval = interval; // Dropped auto calculated niceExtent and use user setted extent
	    // We assume user wan't to set both interval, min, max to get a better result

	    this._niceExtent = this._extent.slice();
	    this._intervalPrecision = helper.getIntervalPrecision(interval);
	  },

	  /**
	   * @return {Array.<number>}
	   */
	  getTicks: function () {
	    return helper.intervalScaleGetTicks(this._interval, this._extent, this._niceExtent, this._intervalPrecision);
	  },

	  /**
	   * @return {Array.<string>}
	   */
	  getTicksLabels: function () {
	    var labels = [];
	    var ticks = this.getTicks();

	    for (var i = 0; i < ticks.length; i++) {
	      labels.push(this.getLabel(ticks[i]));
	    }

	    return labels;
	  },

	  /**
	   * @param {number} data
	   * @param {Object} [opt]
	   * @param {number|string} [opt.precision] If 'auto', use nice presision.
	   * @param {boolean} [opt.pad] returns 1.50 but not 1.5 if precision is 2.
	   * @return {string}
	   */
	  getLabel: function (data, opt) {
	    if (data == null) {
	      return '';
	    }

	    var precision = opt && opt.precision;

	    if (precision == null) {
	      precision = numberUtil.getPrecisionSafe(data) || 0;
	    } else if (precision === 'auto') {
	      // Should be more precise then tick.
	      precision = this._intervalPrecision;
	    } // (1) If `precision` is set, 12.005 should be display as '12.00500'.
	    // (2) Use roundNumber (toFixed) to avoid scientific notation like '3.5e-7'.


	    data = roundNumber(data, precision, true);
	    return formatUtil.addCommas(data);
	  },

	  /**
	   * Update interval and extent of intervals for nice ticks
	   *
	   * @param {number} [splitNumber = 5] Desired number of ticks
	   * @param {number} [minInterval]
	   * @param {number} [maxInterval]
	   */
	  niceTicks: function (splitNumber, minInterval, maxInterval) {
	    splitNumber = splitNumber || 5;
	    var extent = this._extent;
	    var span = extent[1] - extent[0];

	    if (!isFinite(span)) {
	      return;
	    } // User may set axis min 0 and data are all negative
	    // FIXME If it needs to reverse ?


	    if (span < 0) {
	      span = -span;
	      extent.reverse();
	    }

	    var result = helper.intervalScaleNiceTicks(extent, splitNumber, minInterval, maxInterval);
	    this._intervalPrecision = result.intervalPrecision;
	    this._interval = result.interval;
	    this._niceExtent = result.niceTickExtent;
	  },

	  /**
	   * Nice extent.
	   * @param {Object} opt
	   * @param {number} [opt.splitNumber = 5] Given approx tick number
	   * @param {boolean} [opt.fixMin=false]
	   * @param {boolean} [opt.fixMax=false]
	   * @param {boolean} [opt.minInterval]
	   * @param {boolean} [opt.maxInterval]
	   */
	  niceExtent: function (opt) {
	    var extent = this._extent; // If extent start and end are same, expand them

	    if (extent[0] === extent[1]) {
	      if (extent[0] !== 0) {
	        // Expand extent
	        var expandSize = extent[0]; // In the fowllowing case
	        //      Axis has been fixed max 100
	        //      Plus data are all 100 and axis extent are [100, 100].
	        // Extend to the both side will cause expanded max is larger than fixed max.
	        // So only expand to the smaller side.

	        if (!opt.fixMax) {
	          extent[1] += expandSize / 2;
	          extent[0] -= expandSize / 2;
	        } else {
	          extent[0] -= expandSize / 2;
	        }
	      } else {
	        extent[1] = 1;
	      }
	    }

	    var span = extent[1] - extent[0]; // If there are no data and extent are [Infinity, -Infinity]

	    if (!isFinite(span)) {
	      extent[0] = 0;
	      extent[1] = 1;
	    }

	    this.niceTicks(opt.splitNumber, opt.minInterval, opt.maxInterval); // var extent = this._extent;

	    var interval = this._interval;

	    if (!opt.fixMin) {
	      extent[0] = roundNumber(Math.floor(extent[0] / interval) * interval);
	    }

	    if (!opt.fixMax) {
	      extent[1] = roundNumber(Math.ceil(extent[1] / interval) * interval);
	    }
	  }
	});
	/**
	 * @return {module:echarts/scale/Time}
	 */

	IntervalScale.create = function () {
	  return new IntervalScale();
	};

	var _default = IntervalScale;
	module.exports = _default;

/***/ },
/* 272 */
/***/ function(module, exports, __webpack_require__) {

	var numberUtil = __webpack_require__(205);

	/**
	 * For testable.
	 */
	var roundNumber = numberUtil.round;
	/**
	 * @param {Array.<number>} extent Both extent[0] and extent[1] should be valid number.
	 *                                Should be extent[0] < extent[1].
	 * @param {number} splitNumber splitNumber should be >= 1.
	 * @param {number} [minInterval]
	 * @param {number} [maxInterval]
	 * @return {Object} {interval, intervalPrecision, niceTickExtent}
	 */

	function intervalScaleNiceTicks(extent, splitNumber, minInterval, maxInterval) {
	  var result = {};
	  var span = extent[1] - extent[0];
	  var interval = result.interval = numberUtil.nice(span / splitNumber, true);

	  if (minInterval != null && interval < minInterval) {
	    interval = result.interval = minInterval;
	  }

	  if (maxInterval != null && interval > maxInterval) {
	    interval = result.interval = maxInterval;
	  } // Tow more digital for tick.


	  var precision = result.intervalPrecision = getIntervalPrecision(interval); // Niced extent inside original extent

	  var niceTickExtent = result.niceTickExtent = [roundNumber(Math.ceil(extent[0] / interval) * interval, precision), roundNumber(Math.floor(extent[1] / interval) * interval, precision)];
	  fixExtent(niceTickExtent, extent);
	  return result;
	}
	/**
	 * @param {number} interval
	 * @return {number} interval precision
	 */


	function getIntervalPrecision(interval) {
	  // Tow more digital for tick.
	  return numberUtil.getPrecisionSafe(interval) + 2;
	}

	function clamp(niceTickExtent, idx, extent) {
	  niceTickExtent[idx] = Math.max(Math.min(niceTickExtent[idx], extent[1]), extent[0]);
	} // In some cases (e.g., splitNumber is 1), niceTickExtent may be out of extent.


	function fixExtent(niceTickExtent, extent) {
	  !isFinite(niceTickExtent[0]) && (niceTickExtent[0] = extent[0]);
	  !isFinite(niceTickExtent[1]) && (niceTickExtent[1] = extent[1]);
	  clamp(niceTickExtent, 0, extent);
	  clamp(niceTickExtent, 1, extent);

	  if (niceTickExtent[0] > niceTickExtent[1]) {
	    niceTickExtent[0] = niceTickExtent[1];
	  }
	}

	function intervalScaleGetTicks(interval, extent, niceTickExtent, intervalPrecision) {
	  var ticks = []; // If interval is 0, return [];

	  if (!interval) {
	    return ticks;
	  } // Consider this case: using dataZoom toolbox, zoom and zoom.


	  var safeLimit = 10000;

	  if (extent[0] < niceTickExtent[0]) {
	    ticks.push(extent[0]);
	  }

	  var tick = niceTickExtent[0];

	  while (tick <= niceTickExtent[1]) {
	    ticks.push(tick); // Avoid rounding error

	    tick = roundNumber(tick + interval, intervalPrecision);

	    if (tick === ticks[ticks.length - 1]) {
	      // Consider out of safe float point, e.g.,
	      // -3711126.9907707 + 2e-10 === -3711126.9907707
	      break;
	    }

	    if (ticks.length > safeLimit) {
	      return [];
	    }
	  } // Consider this case: the last item of ticks is smaller
	  // than niceTickExtent[1] and niceTickExtent[1] === extent[1].


	  if (extent[1] > (ticks.length ? ticks[ticks.length - 1] : niceTickExtent[1])) {
	    ticks.push(extent[1]);
	  }

	  return ticks;
	}

	exports.intervalScaleNiceTicks = intervalScaleNiceTicks;
	exports.getIntervalPrecision = getIntervalPrecision;
	exports.fixExtent = fixExtent;
	exports.intervalScaleGetTicks = intervalScaleGetTicks;

/***/ },
/* 273 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var numberUtil = __webpack_require__(205);

	var formatUtil = __webpack_require__(204);

	var scaleHelper = __webpack_require__(272);

	var IntervalScale = __webpack_require__(271);

	// [About UTC and local time zone]:
	// In most cases, `number.parseDate` will treat input data string as local time
	// (except time zone is specified in time string). And `format.formateTime` returns
	// local time by default. option.useUTC is false by default. This design have
	// concidered these common case:
	// (1) Time that is persistent in server is in UTC, but it is needed to be diplayed
	// in local time by default.
	// (2) By default, the input data string (e.g., '2011-01-02') should be displayed
	// as its original time, without any time difference.
	var intervalScaleProto = IntervalScale.prototype;
	var mathCeil = Math.ceil;
	var mathFloor = Math.floor;
	var ONE_SECOND = 1000;
	var ONE_MINUTE = ONE_SECOND * 60;
	var ONE_HOUR = ONE_MINUTE * 60;
	var ONE_DAY = ONE_HOUR * 24; // FIXME 公用？

	var bisect = function (a, x, lo, hi) {
	  while (lo < hi) {
	    var mid = lo + hi >>> 1;

	    if (a[mid][1] < x) {
	      lo = mid + 1;
	    } else {
	      hi = mid;
	    }
	  }

	  return lo;
	};
	/**
	 * @alias module:echarts/coord/scale/Time
	 * @constructor
	 */


	var TimeScale = IntervalScale.extend({
	  type: 'time',

	  /**
	   * @override
	   */
	  getLabel: function (val) {
	    var stepLvl = this._stepLvl;
	    var date = new Date(val);
	    return formatUtil.formatTime(stepLvl[0], date, this.getSetting('useUTC'));
	  },

	  /**
	   * @override
	   */
	  niceExtent: function (opt) {
	    var extent = this._extent; // If extent start and end are same, expand them

	    if (extent[0] === extent[1]) {
	      // Expand extent
	      extent[0] -= ONE_DAY;
	      extent[1] += ONE_DAY;
	    } // If there are no data and extent are [Infinity, -Infinity]


	    if (extent[1] === -Infinity && extent[0] === Infinity) {
	      var d = new Date();
	      extent[1] = +new Date(d.getFullYear(), d.getMonth(), d.getDate());
	      extent[0] = extent[1] - ONE_DAY;
	    }

	    this.niceTicks(opt.splitNumber, opt.minInterval, opt.maxInterval); // var extent = this._extent;

	    var interval = this._interval;

	    if (!opt.fixMin) {
	      extent[0] = numberUtil.round(mathFloor(extent[0] / interval) * interval);
	    }

	    if (!opt.fixMax) {
	      extent[1] = numberUtil.round(mathCeil(extent[1] / interval) * interval);
	    }
	  },

	  /**
	   * @override
	   */
	  niceTicks: function (approxTickNum, minInterval, maxInterval) {
	    approxTickNum = approxTickNum || 10;
	    var extent = this._extent;
	    var span = extent[1] - extent[0];
	    var approxInterval = span / approxTickNum;

	    if (minInterval != null && approxInterval < minInterval) {
	      approxInterval = minInterval;
	    }

	    if (maxInterval != null && approxInterval > maxInterval) {
	      approxInterval = maxInterval;
	    }

	    var scaleLevelsLen = scaleLevels.length;
	    var idx = bisect(scaleLevels, approxInterval, 0, scaleLevelsLen);
	    var level = scaleLevels[Math.min(idx, scaleLevelsLen - 1)];
	    var interval = level[1]; // Same with interval scale if span is much larger than 1 year

	    if (level[0] === 'year') {
	      var yearSpan = span / interval; // From "Nice Numbers for Graph Labels" of Graphic Gems
	      // var niceYearSpan = numberUtil.nice(yearSpan, false);

	      var yearStep = numberUtil.nice(yearSpan / approxTickNum, true);
	      interval *= yearStep;
	    }

	    var timezoneOffset = this.getSetting('useUTC') ? 0 : new Date(+extent[0] || +extent[1]).getTimezoneOffset() * 60 * 1000;
	    var niceExtent = [Math.round(mathCeil((extent[0] - timezoneOffset) / interval) * interval + timezoneOffset), Math.round(mathFloor((extent[1] - timezoneOffset) / interval) * interval + timezoneOffset)];
	    scaleHelper.fixExtent(niceExtent, extent);
	    this._stepLvl = level; // Interval will be used in getTicks

	    this._interval = interval;
	    this._niceExtent = niceExtent;
	  },
	  parse: function (val) {
	    // val might be float.
	    return +numberUtil.parseDate(val);
	  }
	});
	zrUtil.each(['contain', 'normalize'], function (methodName) {
	  TimeScale.prototype[methodName] = function (val) {
	    return intervalScaleProto[methodName].call(this, this.parse(val));
	  };
	}); // Steps from d3

	var scaleLevels = [// Format              interval
	['hh:mm:ss', ONE_SECOND], // 1s
	['hh:mm:ss', ONE_SECOND * 5], // 5s
	['hh:mm:ss', ONE_SECOND * 10], // 10s
	['hh:mm:ss', ONE_SECOND * 15], // 15s
	['hh:mm:ss', ONE_SECOND * 30], // 30s
	['hh:mm\nMM-dd', ONE_MINUTE], // 1m
	['hh:mm\nMM-dd', ONE_MINUTE * 5], // 5m
	['hh:mm\nMM-dd', ONE_MINUTE * 10], // 10m
	['hh:mm\nMM-dd', ONE_MINUTE * 15], // 15m
	['hh:mm\nMM-dd', ONE_MINUTE * 30], // 30m
	['hh:mm\nMM-dd', ONE_HOUR], // 1h
	['hh:mm\nMM-dd', ONE_HOUR * 2], // 2h
	['hh:mm\nMM-dd', ONE_HOUR * 6], // 6h
	['hh:mm\nMM-dd', ONE_HOUR * 12], // 12h
	['MM-dd\nyyyy', ONE_DAY], // 1d
	['MM-dd\nyyyy', ONE_DAY * 2], // 2d
	['MM-dd\nyyyy', ONE_DAY * 3], // 3d
	['MM-dd\nyyyy', ONE_DAY * 4], // 4d
	['MM-dd\nyyyy', ONE_DAY * 5], // 5d
	['MM-dd\nyyyy', ONE_DAY * 6], // 6d
	['week', ONE_DAY * 7], // 7d
	['MM-dd\nyyyy', ONE_DAY * 10], // 10d
	['week', ONE_DAY * 14], // 2w
	['week', ONE_DAY * 21], // 3w
	['month', ONE_DAY * 31], // 1M
	['week', ONE_DAY * 42], // 6w
	['month', ONE_DAY * 62], // 2M
	['week', ONE_DAY * 42], // 10w
	['quarter', ONE_DAY * 380 / 4], // 3M
	['month', ONE_DAY * 31 * 4], // 4M
	['month', ONE_DAY * 31 * 5], // 5M
	['half-year', ONE_DAY * 380 / 2], // 6M
	['month', ONE_DAY * 31 * 8], // 8M
	['month', ONE_DAY * 31 * 10], // 10M
	['year', ONE_DAY * 380] // 1Y
	];
	/**
	 * @param {module:echarts/model/Model}
	 * @return {module:echarts/scale/Time}
	 */

	TimeScale.create = function (model) {
	  return new TimeScale({
	    useUTC: model.ecModel.get('useUTC')
	  });
	};

	var _default = TimeScale;
	module.exports = _default;

/***/ },
/* 274 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var Scale = __webpack_require__(270);

	var numberUtil = __webpack_require__(205);

	var IntervalScale = __webpack_require__(271);

	/**
	 * Log scale
	 * @module echarts/scale/Log
	 */
	// Use some method of IntervalScale
	var scaleProto = Scale.prototype;
	var intervalScaleProto = IntervalScale.prototype;
	var getPrecisionSafe = numberUtil.getPrecisionSafe;
	var roundingErrorFix = numberUtil.round;
	var mathFloor = Math.floor;
	var mathCeil = Math.ceil;
	var mathPow = Math.pow;
	var mathLog = Math.log;
	var LogScale = Scale.extend({
	  type: 'log',
	  base: 10,
	  $constructor: function () {
	    Scale.apply(this, arguments);
	    this._originalScale = new IntervalScale();
	  },

	  /**
	   * @return {Array.<number>}
	   */
	  getTicks: function () {
	    var originalScale = this._originalScale;
	    var extent = this._extent;
	    var originalExtent = originalScale.getExtent();
	    return zrUtil.map(intervalScaleProto.getTicks.call(this), function (val) {
	      var powVal = numberUtil.round(mathPow(this.base, val)); // Fix #4158

	      powVal = val === extent[0] && originalScale.__fixMin ? fixRoundingError(powVal, originalExtent[0]) : powVal;
	      powVal = val === extent[1] && originalScale.__fixMax ? fixRoundingError(powVal, originalExtent[1]) : powVal;
	      return powVal;
	    }, this);
	  },

	  /**
	   * @param {number} val
	   * @return {string}
	   */
	  getLabel: intervalScaleProto.getLabel,

	  /**
	   * @param  {number} val
	   * @return {number}
	   */
	  scale: function (val) {
	    val = scaleProto.scale.call(this, val);
	    return mathPow(this.base, val);
	  },

	  /**
	   * @param {number} start
	   * @param {number} end
	   */
	  setExtent: function (start, end) {
	    var base = this.base;
	    start = mathLog(start) / mathLog(base);
	    end = mathLog(end) / mathLog(base);
	    intervalScaleProto.setExtent.call(this, start, end);
	  },

	  /**
	   * @return {number} end
	   */
	  getExtent: function () {
	    var base = this.base;
	    var extent = scaleProto.getExtent.call(this);
	    extent[0] = mathPow(base, extent[0]);
	    extent[1] = mathPow(base, extent[1]); // Fix #4158

	    var originalScale = this._originalScale;
	    var originalExtent = originalScale.getExtent();
	    originalScale.__fixMin && (extent[0] = fixRoundingError(extent[0], originalExtent[0]));
	    originalScale.__fixMax && (extent[1] = fixRoundingError(extent[1], originalExtent[1]));
	    return extent;
	  },

	  /**
	   * @param  {Array.<number>} extent
	   */
	  unionExtent: function (extent) {
	    this._originalScale.unionExtent(extent);

	    var base = this.base;
	    extent[0] = mathLog(extent[0]) / mathLog(base);
	    extent[1] = mathLog(extent[1]) / mathLog(base);
	    scaleProto.unionExtent.call(this, extent);
	  },

	  /**
	   * @override
	   */
	  unionExtentFromData: function (data, dim) {
	    this.unionExtent(data.getDataExtent(dim, true, function (val) {
	      return val > 0;
	    }));
	  },

	  /**
	   * Update interval and extent of intervals for nice ticks
	   * @param  {number} [approxTickNum = 10] Given approx tick number
	   */
	  niceTicks: function (approxTickNum) {
	    approxTickNum = approxTickNum || 10;
	    var extent = this._extent;
	    var span = extent[1] - extent[0];

	    if (span === Infinity || span <= 0) {
	      return;
	    }

	    var interval = numberUtil.quantity(span);
	    var err = approxTickNum / span * interval; // Filter ticks to get closer to the desired count.

	    if (err <= 0.5) {
	      interval *= 10;
	    } // Interval should be integer


	    while (!isNaN(interval) && Math.abs(interval) < 1 && Math.abs(interval) > 0) {
	      interval *= 10;
	    }

	    var niceExtent = [numberUtil.round(mathCeil(extent[0] / interval) * interval), numberUtil.round(mathFloor(extent[1] / interval) * interval)];
	    this._interval = interval;
	    this._niceExtent = niceExtent;
	  },

	  /**
	   * Nice extent.
	   * @override
	   */
	  niceExtent: function (opt) {
	    intervalScaleProto.niceExtent.call(this, opt);
	    var originalScale = this._originalScale;
	    originalScale.__fixMin = opt.fixMin;
	    originalScale.__fixMax = opt.fixMax;
	  }
	});
	zrUtil.each(['contain', 'normalize'], function (methodName) {
	  LogScale.prototype[methodName] = function (val) {
	    val = mathLog(val) / mathLog(this.base);
	    return scaleProto[methodName].call(this, val);
	  };
	});

	LogScale.create = function () {
	  return new LogScale();
	};

	function fixRoundingError(val, originalVal) {
	  return roundingErrorFix(val, getPrecisionSafe(originalVal));
	}

	var _default = LogScale;
	module.exports = _default;

/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var axisHelper = __webpack_require__(268);

	function getName(obj) {
	  if (zrUtil.isObject(obj) && obj.value != null) {
	    return obj.value;
	  } else {
	    return obj + '';
	  }
	}

	var _default = {
	  /**
	   * Format labels
	   * @return {Array.<string>}
	   */
	  getFormattedLabels: function () {
	    return axisHelper.getFormattedLabels(this.axis, this.get('axisLabel.formatter'));
	  },

	  /**
	   * Get categories
	   */
	  getCategories: function () {
	    return this.get('type') === 'category' && zrUtil.map(this.get('data'), getName);
	  },

	  /**
	   * @param {boolean} origin
	   * @return {number|string} min value or 'dataMin' or null/undefined (means auto) or NaN
	   */
	  getMin: function (origin) {
	    var option = this.option;
	    var min = !origin && option.rangeStart != null ? option.rangeStart : option.min;

	    if (this.axis && min != null && min !== 'dataMin' && typeof min !== 'function' && !zrUtil.eqNaN(min)) {
	      min = this.axis.scale.parse(min);
	    }

	    return min;
	  },

	  /**
	   * @param {boolean} origin
	   * @return {number|string} max value or 'dataMax' or null/undefined (means auto) or NaN
	   */
	  getMax: function (origin) {
	    var option = this.option;
	    var max = !origin && option.rangeEnd != null ? option.rangeEnd : option.max;

	    if (this.axis && max != null && max !== 'dataMax' && typeof max !== 'function' && !zrUtil.eqNaN(max)) {
	      max = this.axis.scale.parse(max);
	    }

	    return max;
	  },

	  /**
	   * @return {boolean}
	   */
	  getNeedCrossZero: function () {
	    var option = this.option;
	    return option.rangeStart != null || option.rangeEnd != null ? false : !option.scale;
	  },

	  /**
	   * Should be implemented by each axis model if necessary.
	   * @return {module:echarts/model/Component} coordinate system model
	   */
	  getCoordSysModel: zrUtil.noop,

	  /**
	   * @param {number} rangeStart Can only be finite number or null/undefined or NaN.
	   * @param {number} rangeEnd Can only be finite number or null/undefined or NaN.
	   */
	  setRange: function (rangeStart, rangeEnd) {
	    this.option.rangeStart = rangeStart;
	    this.option.rangeEnd = rangeEnd;
	  },

	  /**
	   * Reset range
	   */
	  resetRange: function () {
	    // rangeStart and rangeEnd is readonly.
	    this.option.rangeStart = this.option.rangeEnd = null;
	  }
	};
	module.exports = _default;

/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var graphic = __webpack_require__(212);

	var BoundingRect = __webpack_require__(184);

	// Symbol factory

	/**
	 * Triangle shape
	 * @inner
	 */
	var Triangle = graphic.extendShape({
	  type: 'triangle',
	  shape: {
	    cx: 0,
	    cy: 0,
	    width: 0,
	    height: 0
	  },
	  buildPath: function (path, shape) {
	    var cx = shape.cx;
	    var cy = shape.cy;
	    var width = shape.width / 2;
	    var height = shape.height / 2;
	    path.moveTo(cx, cy - height);
	    path.lineTo(cx + width, cy + height);
	    path.lineTo(cx - width, cy + height);
	    path.closePath();
	  }
	});
	/**
	 * Diamond shape
	 * @inner
	 */

	var Diamond = graphic.extendShape({
	  type: 'diamond',
	  shape: {
	    cx: 0,
	    cy: 0,
	    width: 0,
	    height: 0
	  },
	  buildPath: function (path, shape) {
	    var cx = shape.cx;
	    var cy = shape.cy;
	    var width = shape.width / 2;
	    var height = shape.height / 2;
	    path.moveTo(cx, cy - height);
	    path.lineTo(cx + width, cy);
	    path.lineTo(cx, cy + height);
	    path.lineTo(cx - width, cy);
	    path.closePath();
	  }
	});
	/**
	 * Pin shape
	 * @inner
	 */

	var Pin = graphic.extendShape({
	  type: 'pin',
	  shape: {
	    // x, y on the cusp
	    x: 0,
	    y: 0,
	    width: 0,
	    height: 0
	  },
	  buildPath: function (path, shape) {
	    var x = shape.x;
	    var y = shape.y;
	    var w = shape.width / 5 * 3; // Height must be larger than width

	    var h = Math.max(w, shape.height);
	    var r = w / 2; // Dist on y with tangent point and circle center

	    var dy = r * r / (h - r);
	    var cy = y - h + r + dy;
	    var angle = Math.asin(dy / r); // Dist on x with tangent point and circle center

	    var dx = Math.cos(angle) * r;
	    var tanX = Math.sin(angle);
	    var tanY = Math.cos(angle);
	    var cpLen = r * 0.6;
	    var cpLen2 = r * 0.7;
	    path.moveTo(x - dx, cy + dy);
	    path.arc(x, cy, r, Math.PI - angle, Math.PI * 2 + angle);
	    path.bezierCurveTo(x + dx - tanX * cpLen, cy + dy + tanY * cpLen, x, y - cpLen2, x, y);
	    path.bezierCurveTo(x, y - cpLen2, x - dx + tanX * cpLen, cy + dy + tanY * cpLen, x - dx, cy + dy);
	    path.closePath();
	  }
	});
	/**
	 * Arrow shape
	 * @inner
	 */

	var Arrow = graphic.extendShape({
	  type: 'arrow',
	  shape: {
	    x: 0,
	    y: 0,
	    width: 0,
	    height: 0
	  },
	  buildPath: function (ctx, shape) {
	    var height = shape.height;
	    var width = shape.width;
	    var x = shape.x;
	    var y = shape.y;
	    var dx = width / 3 * 2;
	    ctx.moveTo(x, y);
	    ctx.lineTo(x + dx, y + height);
	    ctx.lineTo(x, y + height / 4 * 3);
	    ctx.lineTo(x - dx, y + height);
	    ctx.lineTo(x, y);
	    ctx.closePath();
	  }
	});
	/**
	 * Map of path contructors
	 * @type {Object.<string, module:zrender/graphic/Path>}
	 */

	var symbolCtors = {
	  line: graphic.Line,
	  rect: graphic.Rect,
	  roundRect: graphic.Rect,
	  square: graphic.Rect,
	  circle: graphic.Circle,
	  diamond: Diamond,
	  pin: Pin,
	  arrow: Arrow,
	  triangle: Triangle
	};
	var symbolShapeMakers = {
	  line: function (x, y, w, h, shape) {
	    // FIXME
	    shape.x1 = x;
	    shape.y1 = y + h / 2;
	    shape.x2 = x + w;
	    shape.y2 = y + h / 2;
	  },
	  rect: function (x, y, w, h, shape) {
	    shape.x = x;
	    shape.y = y;
	    shape.width = w;
	    shape.height = h;
	  },
	  roundRect: function (x, y, w, h, shape) {
	    shape.x = x;
	    shape.y = y;
	    shape.width = w;
	    shape.height = h;
	    shape.r = Math.min(w, h) / 4;
	  },
	  square: function (x, y, w, h, shape) {
	    var size = Math.min(w, h);
	    shape.x = x;
	    shape.y = y;
	    shape.width = size;
	    shape.height = size;
	  },
	  circle: function (x, y, w, h, shape) {
	    // Put circle in the center of square
	    shape.cx = x + w / 2;
	    shape.cy = y + h / 2;
	    shape.r = Math.min(w, h) / 2;
	  },
	  diamond: function (x, y, w, h, shape) {
	    shape.cx = x + w / 2;
	    shape.cy = y + h / 2;
	    shape.width = w;
	    shape.height = h;
	  },
	  pin: function (x, y, w, h, shape) {
	    shape.x = x + w / 2;
	    shape.y = y + h / 2;
	    shape.width = w;
	    shape.height = h;
	  },
	  arrow: function (x, y, w, h, shape) {
	    shape.x = x + w / 2;
	    shape.y = y + h / 2;
	    shape.width = w;
	    shape.height = h;
	  },
	  triangle: function (x, y, w, h, shape) {
	    shape.cx = x + w / 2;
	    shape.cy = y + h / 2;
	    shape.width = w;
	    shape.height = h;
	  }
	};
	var symbolBuildProxies = {};
	zrUtil.each(symbolCtors, function (Ctor, name) {
	  symbolBuildProxies[name] = new Ctor();
	});
	var SymbolClz = graphic.extendShape({
	  type: 'symbol',
	  shape: {
	    symbolType: '',
	    x: 0,
	    y: 0,
	    width: 0,
	    height: 0
	  },
	  beforeBrush: function () {
	    var style = this.style;
	    var shape = this.shape; // FIXME

	    if (shape.symbolType === 'pin' && style.textPosition === 'inside') {
	      style.textPosition = ['50%', '40%'];
	      style.textAlign = 'center';
	      style.textVerticalAlign = 'middle';
	    }
	  },
	  buildPath: function (ctx, shape, inBundle) {
	    var symbolType = shape.symbolType;
	    var proxySymbol = symbolBuildProxies[symbolType];

	    if (shape.symbolType !== 'none') {
	      if (!proxySymbol) {
	        // Default rect
	        symbolType = 'rect';
	        proxySymbol = symbolBuildProxies[symbolType];
	      }

	      symbolShapeMakers[symbolType](shape.x, shape.y, shape.width, shape.height, proxySymbol.shape);
	      proxySymbol.buildPath(ctx, proxySymbol.shape, inBundle);
	    }
	  }
	}); // Provide setColor helper method to avoid determine if set the fill or stroke outside

	function symbolPathSetColor(color, innerColor) {
	  if (this.type !== 'image') {
	    var symbolStyle = this.style;
	    var symbolShape = this.shape;

	    if (symbolShape && symbolShape.symbolType === 'line') {
	      symbolStyle.stroke = color;
	    } else if (this.__isEmptyBrush) {
	      symbolStyle.stroke = color;
	      symbolStyle.fill = innerColor || '#fff';
	    } else {
	      // FIXME 判断图形默认是填充还是描边，使用 onlyStroke ?
	      symbolStyle.fill && (symbolStyle.fill = color);
	      symbolStyle.stroke && (symbolStyle.stroke = color);
	    }

	    this.dirty(false);
	  }
	}
	/**
	 * Create a symbol element with given symbol configuration: shape, x, y, width, height, color
	 * @param {string} symbolType
	 * @param {number} x
	 * @param {number} y
	 * @param {number} w
	 * @param {number} h
	 * @param {string} color
	 * @param {boolean} [keepAspect=false] whether to keep the ratio of w/h,
	 *                            for path and image only.
	 */


	function createSymbol(symbolType, x, y, w, h, color, keepAspect) {
	  // TODO Support image object, DynamicImage.
	  var isEmpty = symbolType.indexOf('empty') === 0;

	  if (isEmpty) {
	    symbolType = symbolType.substr(5, 1).toLowerCase() + symbolType.substr(6);
	  }

	  var symbolPath;

	  if (symbolType.indexOf('image://') === 0) {
	    symbolPath = graphic.makeImage(symbolType.slice(8), new BoundingRect(x, y, w, h), keepAspect ? 'center' : 'cover');
	  } else if (symbolType.indexOf('path://') === 0) {
	    symbolPath = graphic.makePath(symbolType.slice(7), {}, new BoundingRect(x, y, w, h), keepAspect ? 'center' : 'cover');
	  } else {
	    symbolPath = new SymbolClz({
	      shape: {
	        symbolType: symbolType,
	        x: x,
	        y: y,
	        width: w,
	        height: h
	      }
	    });
	  }

	  symbolPath.__isEmptyBrush = isEmpty;
	  symbolPath.setColor = symbolPathSetColor;
	  symbolPath.setColor(color);
	  return symbolPath;
	}

	exports.createSymbol = createSymbol;

/***/ },
/* 277 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var numberUtil = __webpack_require__(205);

	var axisHelper = __webpack_require__(268);

	var linearMap = numberUtil.linearMap;

	function fixExtentWithBands(extent, nTick) {
	  var size = extent[1] - extent[0];
	  var len = nTick;
	  var margin = size / len / 2;
	  extent[0] += margin;
	  extent[1] -= margin;
	}

	var normalizedExtent = [0, 1];
	/**
	 * @name module:echarts/coord/CartesianAxis
	 * @constructor
	 */

	var Axis = function (dim, scale, extent) {
	  /**
	   * Axis dimension. Such as 'x', 'y', 'z', 'angle', 'radius'
	   * @type {string}
	   */
	  this.dim = dim;
	  /**
	   * Axis scale
	   * @type {module:echarts/coord/scale/*}
	   */

	  this.scale = scale;
	  /**
	   * @type {Array.<number>}
	   * @private
	   */

	  this._extent = extent || [0, 0];
	  /**
	   * @type {boolean}
	   */

	  this.inverse = false;
	  /**
	   * Usually true when axis has a ordinal scale
	   * @type {boolean}
	   */

	  this.onBand = false;
	  /**
	   * @private
	   * @type {number}
	   */

	  this._labelInterval;
	};

	Axis.prototype = {
	  constructor: Axis,

	  /**
	   * If axis extent contain given coord
	   * @param {number} coord
	   * @return {boolean}
	   */
	  contain: function (coord) {
	    var extent = this._extent;
	    var min = Math.min(extent[0], extent[1]);
	    var max = Math.max(extent[0], extent[1]);
	    return coord >= min && coord <= max;
	  },

	  /**
	   * If axis extent contain given data
	   * @param {number} data
	   * @return {boolean}
	   */
	  containData: function (data) {
	    return this.contain(this.dataToCoord(data));
	  },

	  /**
	   * Get coord extent.
	   * @return {Array.<number>}
	   */
	  getExtent: function () {
	    return this._extent.slice();
	  },

	  /**
	   * Get precision used for formatting
	   * @param {Array.<number>} [dataExtent]
	   * @return {number}
	   */
	  getPixelPrecision: function (dataExtent) {
	    return numberUtil.getPixelPrecision(dataExtent || this.scale.getExtent(), this._extent);
	  },

	  /**
	   * Set coord extent
	   * @param {number} start
	   * @param {number} end
	   */
	  setExtent: function (start, end) {
	    var extent = this._extent;
	    extent[0] = start;
	    extent[1] = end;
	  },

	  /**
	   * Convert data to coord. Data is the rank if it has a ordinal scale
	   * @param {number} data
	   * @param  {boolean} clamp
	   * @return {number}
	   */
	  dataToCoord: function (data, clamp) {
	    var extent = this._extent;
	    var scale = this.scale;
	    data = scale.normalize(data);

	    if (this.onBand && scale.type === 'ordinal') {
	      extent = extent.slice();
	      fixExtentWithBands(extent, scale.count());
	    }

	    return linearMap(data, normalizedExtent, extent, clamp);
	  },

	  /**
	   * Convert coord to data. Data is the rank if it has a ordinal scale
	   * @param {number} coord
	   * @param  {boolean} clamp
	   * @return {number}
	   */
	  coordToData: function (coord, clamp) {
	    var extent = this._extent;
	    var scale = this.scale;

	    if (this.onBand && scale.type === 'ordinal') {
	      extent = extent.slice();
	      fixExtentWithBands(extent, scale.count());
	    }

	    var t = linearMap(coord, extent, normalizedExtent, clamp);
	    return this.scale.scale(t);
	  },

	  /**
	   * Convert pixel point to data in axis
	   * @param {Array.<number>} point
	   * @param  {boolean} clamp
	   * @return {number} data
	   */
	  pointToData: function (point, clamp) {// Should be implemented in derived class if necessary.
	  },

	  /**
	   * @return {Array.<number>}
	   */
	  getTicksCoords: function (alignWithLabel) {
	    if (this.onBand && !alignWithLabel) {
	      var bands = this.getBands();
	      var coords = [];

	      for (var i = 0; i < bands.length; i++) {
	        coords.push(bands[i][0]);
	      }

	      if (bands[i - 1]) {
	        coords.push(bands[i - 1][1]);
	      }

	      return coords;
	    } else {
	      return zrUtil.map(this.scale.getTicks(), this.dataToCoord, this);
	    }
	  },

	  /**
	   * Coords of labels are on the ticks or on the middle of bands
	   * @return {Array.<number>}
	   */
	  getLabelsCoords: function () {
	    return zrUtil.map(this.scale.getTicks(), this.dataToCoord, this);
	  },

	  /**
	   * Get bands.
	   *
	   * If axis has labels [1, 2, 3, 4]. Bands on the axis are
	   * |---1---|---2---|---3---|---4---|.
	   *
	   * @return {Array}
	   */
	  // FIXME Situation when labels is on ticks
	  getBands: function () {
	    var extent = this.getExtent();
	    var bands = [];
	    var len = this.scale.count();
	    var start = extent[0];
	    var end = extent[1];
	    var span = end - start;

	    for (var i = 0; i < len; i++) {
	      bands.push([span * i / len + start, span * (i + 1) / len + start]);
	    }

	    return bands;
	  },

	  /**
	   * Get width of band
	   * @return {number}
	   */
	  getBandWidth: function () {
	    var axisExtent = this._extent;
	    var dataExtent = this.scale.getExtent();
	    var len = dataExtent[1] - dataExtent[0] + (this.onBand ? 1 : 0); // Fix #2728, avoid NaN when only one data.

	    len === 0 && (len = 1);
	    var size = Math.abs(axisExtent[1] - axisExtent[0]);
	    return Math.abs(size) / len;
	  },

	  /**
	   * @abstract
	   * @return {boolean} Is horizontal
	   */
	  isHorizontal: null,

	  /**
	   * @abstract
	   * @return {number} Get axis rotate, by degree.
	   */
	  getRotate: null,

	  /**
	   * Get interval of the axis label.
	   * To get precise result, at least one of `getRotate` and `isHorizontal`
	   * should be implemented.
	   * @return {number}
	   */
	  getLabelInterval: function () {
	    var labelInterval = this._labelInterval;

	    if (!labelInterval) {
	      var axisModel = this.model;
	      var labelModel = axisModel.getModel('axisLabel');
	      labelInterval = labelModel.get('interval');

	      if (this.type === 'category' && (labelInterval == null || labelInterval === 'auto')) {
	        labelInterval = axisHelper.getAxisLabelInterval(zrUtil.map(this.scale.getTicks(), this.dataToCoord, this), axisModel.getFormattedLabels(), labelModel.getFont(), this.getRotate ? this.getRotate() : this.isHorizontal && !this.isHorizontal() ? 90 : 0, labelModel.get('rotate'));
	      }

	      this._labelInterval = labelInterval;
	    }

	    return labelInterval;
	  }
	};
	var _default = Axis;
	module.exports = _default;

/***/ },
/* 278 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var Region = __webpack_require__(279);

	/**
	 * Parse and decode geo json
	 * @module echarts/coord/geo/parseGeoJson
	 */
	function decode(json) {
	  if (!json.UTF8Encoding) {
	    return json;
	  }

	  var encodeScale = json.UTF8Scale;

	  if (encodeScale == null) {
	    encodeScale = 1024;
	  }

	  var features = json.features;

	  for (var f = 0; f < features.length; f++) {
	    var feature = features[f];
	    var geometry = feature.geometry;
	    var coordinates = geometry.coordinates;
	    var encodeOffsets = geometry.encodeOffsets;

	    for (var c = 0; c < coordinates.length; c++) {
	      var coordinate = coordinates[c];

	      if (geometry.type === 'Polygon') {
	        coordinates[c] = decodePolygon(coordinate, encodeOffsets[c], encodeScale);
	      } else if (geometry.type === 'MultiPolygon') {
	        for (var c2 = 0; c2 < coordinate.length; c2++) {
	          var polygon = coordinate[c2];
	          coordinate[c2] = decodePolygon(polygon, encodeOffsets[c][c2], encodeScale);
	        }
	      }
	    }
	  } // Has been decoded


	  json.UTF8Encoding = false;
	  return json;
	}

	function decodePolygon(coordinate, encodeOffsets, encodeScale) {
	  var result = [];
	  var prevX = encodeOffsets[0];
	  var prevY = encodeOffsets[1];

	  for (var i = 0; i < coordinate.length; i += 2) {
	    var x = coordinate.charCodeAt(i) - 64;
	    var y = coordinate.charCodeAt(i + 1) - 64; // ZigZag decoding

	    x = x >> 1 ^ -(x & 1);
	    y = y >> 1 ^ -(y & 1); // Delta deocding

	    x += prevX;
	    y += prevY;
	    prevX = x;
	    prevY = y; // Dequantize

	    result.push([x / encodeScale, y / encodeScale]);
	  }

	  return result;
	}
	/**
	 * @alias module:echarts/coord/geo/parseGeoJson
	 * @param {Object} geoJson
	 * @return {module:zrender/container/Group}
	 */


	function _default(geoJson) {
	  decode(geoJson);
	  return zrUtil.map(zrUtil.filter(geoJson.features, function (featureObj) {
	    // Output of mapshaper may have geometry null
	    return featureObj.geometry && featureObj.properties && featureObj.geometry.coordinates.length > 0;
	  }), function (featureObj) {
	    var properties = featureObj.properties;
	    var geo = featureObj.geometry;
	    var coordinates = geo.coordinates;
	    var geometries = [];

	    if (geo.type === 'Polygon') {
	      geometries.push({
	        type: 'polygon',
	        // According to the GeoJSON specification.
	        // First must be exterior, and the rest are all interior(holes).
	        exterior: coordinates[0],
	        interiors: coordinates.slice(1)
	      });
	    }

	    if (geo.type === 'MultiPolygon') {
	      zrUtil.each(coordinates, function (item) {
	        if (item[0]) {
	          geometries.push({
	            type: 'polygon',
	            exterior: item[0],
	            interiors: item.slice(1)
	          });
	        }
	      });
	    }

	    var region = new Region(properties.name, geometries, properties.cp);
	    region.properties = properties;
	    return region;
	  });
	}

	module.exports = _default;

/***/ },
/* 279 */
/***/ function(module, exports, __webpack_require__) {

	var BoundingRect = __webpack_require__(184);

	var bbox = __webpack_require__(217);

	var vec2 = __webpack_require__(168);

	var polygonContain = __webpack_require__(280);

	/**
	 * @module echarts/coord/geo/Region
	 */

	/**
	 * @param {string} name
	 * @param {Array} geometries
	 * @param {Array.<number>} cp
	 */
	function Region(name, geometries, cp) {
	  /**
	   * @type {string}
	   * @readOnly
	   */
	  this.name = name;
	  /**
	   * @type {Array.<Array>}
	   * @readOnly
	   */

	  this.geometries = geometries;

	  if (!cp) {
	    var rect = this.getBoundingRect();
	    cp = [rect.x + rect.width / 2, rect.y + rect.height / 2];
	  } else {
	    cp = [cp[0], cp[1]];
	  }
	  /**
	   * @type {Array.<number>}
	   */


	  this.center = cp;
	}

	Region.prototype = {
	  constructor: Region,
	  properties: null,

	  /**
	   * @return {module:zrender/core/BoundingRect}
	   */
	  getBoundingRect: function () {
	    var rect = this._rect;

	    if (rect) {
	      return rect;
	    }

	    var MAX_NUMBER = Number.MAX_VALUE;
	    var min = [MAX_NUMBER, MAX_NUMBER];
	    var max = [-MAX_NUMBER, -MAX_NUMBER];
	    var min2 = [];
	    var max2 = [];
	    var geometries = this.geometries;

	    for (var i = 0; i < geometries.length; i++) {
	      // Only support polygon
	      if (geometries[i].type !== 'polygon') {
	        continue;
	      } // Doesn't consider hole


	      var exterior = geometries[i].exterior;
	      bbox.fromPoints(exterior, min2, max2);
	      vec2.min(min, min, min2);
	      vec2.max(max, max, max2);
	    } // No data


	    if (i === 0) {
	      min[0] = min[1] = max[0] = max[1] = 0;
	    }

	    return this._rect = new BoundingRect(min[0], min[1], max[0] - min[0], max[1] - min[1]);
	  },

	  /**
	   * @param {<Array.<number>} coord
	   * @return {boolean}
	   */
	  contain: function (coord) {
	    var rect = this.getBoundingRect();
	    var geometries = this.geometries;

	    if (!rect.contain(coord[0], coord[1])) {
	      return false;
	    }

	    loopGeo: for (var i = 0, len = geometries.length; i < len; i++) {
	      // Only support polygon.
	      if (geometries[i].type !== 'polygon') {
	        continue;
	      }

	      var exterior = geometries[i].exterior;
	      var interiors = geometries[i].interiors;

	      if (polygonContain.contain(exterior, coord[0], coord[1])) {
	        // Not in the region if point is in the hole.
	        for (var k = 0; k < (interiors ? interiors.length : 0); k++) {
	          if (polygonContain.contain(interiors[k])) {
	            continue loopGeo;
	          }
	        }

	        return true;
	      }
	    }

	    return false;
	  },
	  transformTo: function (x, y, width, height) {
	    var rect = this.getBoundingRect();
	    var aspect = rect.width / rect.height;

	    if (!width) {
	      width = aspect * height;
	    } else if (!height) {
	      height = width / aspect;
	    }

	    var target = new BoundingRect(x, y, width, height);
	    var transform = rect.calculateTransform(target);
	    var geometries = this.geometries;

	    for (var i = 0; i < geometries.length; i++) {
	      // Only support polygon.
	      if (geometries[i].type !== 'polygon') {
	        continue;
	      }

	      var exterior = geometries[i].exterior;
	      var interiors = geometries[i].interiors;

	      for (var p = 0; p < exterior.length; p++) {
	        vec2.applyTransform(exterior[p], exterior[p], transform);
	      }

	      for (var h = 0; h < (interiors ? interiors.length : 0); h++) {
	        for (var p = 0; p < interiors[h].length; p++) {
	          vec2.applyTransform(interiors[h][p], interiors[h][p], transform);
	        }
	      }
	    }

	    rect = this._rect;
	    rect.copy(target); // Update center

	    this.center = [rect.x + rect.width / 2, rect.y + rect.height / 2];
	  }
	};
	var _default = Region;
	module.exports = _default;

/***/ },
/* 280 */
/***/ function(module, exports, __webpack_require__) {

	var windingLine = __webpack_require__(224);

	var EPSILON = 1e-8;

	function isAroundEqual(a, b) {
	  return Math.abs(a - b) < EPSILON;
	}

	function contain(points, x, y) {
	  var w = 0;
	  var p = points[0];

	  if (!p) {
	    return false;
	  }

	  for (var i = 1; i < points.length; i++) {
	    var p2 = points[i];
	    w += windingLine(p[0], p[1], p2[0], p2[1], x, y);
	    p = p2;
	  } // Close polygon


	  var p0 = points[0];

	  if (!isAroundEqual(p[0], p0[0]) || !isAroundEqual(p[1], p0[1])) {
	    w += windingLine(p[0], p[1], p0[0], p0[1], x, y);
	  }

	  return w !== 0;
	}

	exports.contain = contain;

/***/ },
/* 281 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var zrUtil = __webpack_require__(166);

	__webpack_require__(282);

	__webpack_require__(283);

	var visualSymbol = __webpack_require__(289);

	var layoutPoints = __webpack_require__(290);

	var dataSample = __webpack_require__(291);

	__webpack_require__(292);

	// In case developer forget to include grid component
	echarts.registerVisual(zrUtil.curry(visualSymbol, 'line', 'circle', 'line'));
	echarts.registerLayout(zrUtil.curry(layoutPoints, 'line')); // Down sample after filter

	echarts.registerProcessor(echarts.PRIORITY.PROCESSOR.STATISTIC, zrUtil.curry(dataSample, 'line'));

/***/ },
/* 282 */
/***/ function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(162);

	var __DEV__ = _config.__DEV__;

	var createListFromArray = __webpack_require__(264);

	var SeriesModel = __webpack_require__(256);

	var _default = SeriesModel.extend({
	  type: 'series.line',
	  dependencies: ['grid', 'polar'],
	  getInitialData: function (option, ecModel) {
	    return createListFromArray(option.data, this, ecModel);
	  },
	  defaultOption: {
	    zlevel: 0,
	    // 一级层叠
	    z: 2,
	    // 二级层叠
	    coordinateSystem: 'cartesian2d',
	    legendHoverLink: true,
	    hoverAnimation: true,
	    // stack: null
	    // xAxisIndex: 0,
	    // yAxisIndex: 0,
	    // polarIndex: 0,
	    // If clip the overflow value
	    clipOverflow: true,
	    // cursor: null,
	    label: {
	      normal: {
	        position: 'top'
	      }
	    },
	    // itemStyle: {
	    //     normal: {},
	    //     emphasis: {}
	    // },
	    lineStyle: {
	      normal: {
	        width: 2,
	        type: 'solid'
	      }
	    },
	    // areaStyle: {},
	    // false, 'start', 'end', 'middle'
	    step: false,
	    // Disabled if step is true
	    smooth: false,
	    smoothMonotone: null,
	    // 拐点图形类型
	    symbol: 'emptyCircle',
	    // 拐点图形大小
	    symbolSize: 4,
	    // 拐点图形旋转控制
	    symbolRotate: null,
	    // 是否显示 symbol, 只有在 tooltip hover 的时候显示
	    showSymbol: true,
	    // 标志图形默认只有主轴显示（随主轴标签间隔隐藏策略）
	    showAllSymbol: false,
	    // 是否连接断点
	    connectNulls: false,
	    // 数据过滤，'average', 'max', 'min', 'sum'
	    sampling: 'none',
	    animationEasing: 'linear',
	    // Disable progressive
	    progressive: 0,
	    hoverLayerThreshold: Infinity
	  }
	});

	module.exports = _default;

/***/ },
/* 283 */
/***/ function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(162);

	var __DEV__ = _config.__DEV__;

	var zrUtil = __webpack_require__(166);

	var SymbolDraw = __webpack_require__(284);

	var SymbolClz = __webpack_require__(285);

	var lineAnimationDiff = __webpack_require__(287);

	var graphic = __webpack_require__(212);

	var modelUtil = __webpack_require__(203);

	var _poly = __webpack_require__(288);

	var Polyline = _poly.Polyline;
	var Polygon = _poly.Polygon;

	var ChartView = __webpack_require__(258);

	// FIXME step not support polar
	function isPointsSame(points1, points2) {
	  if (points1.length !== points2.length) {
	    return;
	  }

	  for (var i = 0; i < points1.length; i++) {
	    var p1 = points1[i];
	    var p2 = points2[i];

	    if (p1[0] !== p2[0] || p1[1] !== p2[1]) {
	      return;
	    }
	  }

	  return true;
	}

	function getSmooth(smooth) {
	  return typeof smooth === 'number' ? smooth : smooth ? 0.3 : 0;
	}

	function getAxisExtentWithGap(axis) {
	  var extent = axis.getGlobalExtent();

	  if (axis.onBand) {
	    // Remove extra 1px to avoid line miter in clipped edge
	    var halfBandWidth = axis.getBandWidth() / 2 - 1;
	    var dir = extent[1] > extent[0] ? 1 : -1;
	    extent[0] += dir * halfBandWidth;
	    extent[1] -= dir * halfBandWidth;
	  }

	  return extent;
	}

	function sign(val) {
	  return val >= 0 ? 1 : -1;
	}
	/**
	 * @param {module:echarts/coord/cartesian/Cartesian2D|module:echarts/coord/polar/Polar} coordSys
	 * @param {module:echarts/data/List} data
	 * @param {Array.<Array.<number>>} points
	 * @private
	 */


	function getStackedOnPoints(coordSys, data) {
	  var baseAxis = coordSys.getBaseAxis();
	  var valueAxis = coordSys.getOtherAxis(baseAxis);
	  var valueStart = 0;

	  if (!baseAxis.onZero) {
	    var extent = valueAxis.scale.getExtent();

	    if (extent[0] > 0) {
	      // Both positive
	      valueStart = extent[0];
	    } else if (extent[1] < 0) {
	      // Both negative
	      valueStart = extent[1];
	    } // If is one positive, and one negative, onZero shall be true

	  }

	  var valueDim = valueAxis.dim;
	  var baseDataOffset = valueDim === 'x' || valueDim === 'radius' ? 1 : 0;
	  return data.mapArray([valueDim], function (val, idx) {
	    var stackedOnSameSign;
	    var stackedOn = data.stackedOn; // Find first stacked value with same sign

	    while (stackedOn && sign(stackedOn.get(valueDim, idx)) === sign(val)) {
	      stackedOnSameSign = stackedOn;
	      break;
	    }

	    var stackedData = [];
	    stackedData[baseDataOffset] = data.get(baseAxis.dim, idx);
	    stackedData[1 - baseDataOffset] = stackedOnSameSign ? stackedOnSameSign.get(valueDim, idx, true) : valueStart;
	    return coordSys.dataToPoint(stackedData);
	  }, true);
	}

	function createGridClipShape(cartesian, hasAnimation, seriesModel) {
	  var xExtent = getAxisExtentWithGap(cartesian.getAxis('x'));
	  var yExtent = getAxisExtentWithGap(cartesian.getAxis('y'));
	  var isHorizontal = cartesian.getBaseAxis().isHorizontal();
	  var x = Math.min(xExtent[0], xExtent[1]);
	  var y = Math.min(yExtent[0], yExtent[1]);
	  var width = Math.max(xExtent[0], xExtent[1]) - x;
	  var height = Math.max(yExtent[0], yExtent[1]) - y;
	  var lineWidth = seriesModel.get('lineStyle.normal.width') || 2; // Expand clip shape to avoid clipping when line value exceeds axis

	  var expandSize = seriesModel.get('clipOverflow') ? lineWidth / 2 : Math.max(width, height);

	  if (isHorizontal) {
	    y -= expandSize;
	    height += expandSize * 2;
	  } else {
	    x -= expandSize;
	    width += expandSize * 2;
	  }

	  var clipPath = new graphic.Rect({
	    shape: {
	      x: x,
	      y: y,
	      width: width,
	      height: height
	    }
	  });

	  if (hasAnimation) {
	    clipPath.shape[isHorizontal ? 'width' : 'height'] = 0;
	    graphic.initProps(clipPath, {
	      shape: {
	        width: width,
	        height: height
	      }
	    }, seriesModel);
	  }

	  return clipPath;
	}

	function createPolarClipShape(polar, hasAnimation, seriesModel) {
	  var angleAxis = polar.getAngleAxis();
	  var radiusAxis = polar.getRadiusAxis();
	  var radiusExtent = radiusAxis.getExtent();
	  var angleExtent = angleAxis.getExtent();
	  var RADIAN = Math.PI / 180;
	  var clipPath = new graphic.Sector({
	    shape: {
	      cx: polar.cx,
	      cy: polar.cy,
	      r0: radiusExtent[0],
	      r: radiusExtent[1],
	      startAngle: -angleExtent[0] * RADIAN,
	      endAngle: -angleExtent[1] * RADIAN,
	      clockwise: angleAxis.inverse
	    }
	  });

	  if (hasAnimation) {
	    clipPath.shape.endAngle = -angleExtent[0] * RADIAN;
	    graphic.initProps(clipPath, {
	      shape: {
	        endAngle: -angleExtent[1] * RADIAN
	      }
	    }, seriesModel);
	  }

	  return clipPath;
	}

	function createClipShape(coordSys, hasAnimation, seriesModel) {
	  return coordSys.type === 'polar' ? createPolarClipShape(coordSys, hasAnimation, seriesModel) : createGridClipShape(coordSys, hasAnimation, seriesModel);
	}

	function turnPointsIntoStep(points, coordSys, stepTurnAt) {
	  var baseAxis = coordSys.getBaseAxis();
	  var baseIndex = baseAxis.dim === 'x' || baseAxis.dim === 'radius' ? 0 : 1;
	  var stepPoints = [];

	  for (var i = 0; i < points.length - 1; i++) {
	    var nextPt = points[i + 1];
	    var pt = points[i];
	    stepPoints.push(pt);
	    var stepPt = [];

	    switch (stepTurnAt) {
	      case 'end':
	        stepPt[baseIndex] = nextPt[baseIndex];
	        stepPt[1 - baseIndex] = pt[1 - baseIndex]; // default is start

	        stepPoints.push(stepPt);
	        break;

	      case 'middle':
	        // default is start
	        var middle = (pt[baseIndex] + nextPt[baseIndex]) / 2;
	        var stepPt2 = [];
	        stepPt[baseIndex] = stepPt2[baseIndex] = middle;
	        stepPt[1 - baseIndex] = pt[1 - baseIndex];
	        stepPt2[1 - baseIndex] = nextPt[1 - baseIndex];
	        stepPoints.push(stepPt);
	        stepPoints.push(stepPt2);
	        break;

	      default:
	        stepPt[baseIndex] = pt[baseIndex];
	        stepPt[1 - baseIndex] = nextPt[1 - baseIndex]; // default is start

	        stepPoints.push(stepPt);
	    }
	  } // Last points


	  points[i] && stepPoints.push(points[i]);
	  return stepPoints;
	}

	function getVisualGradient(data, coordSys) {
	  var visualMetaList = data.getVisual('visualMeta');

	  if (!visualMetaList || !visualMetaList.length || !data.count()) {
	    // When data.count() is 0, gradient range can not be calculated.
	    return;
	  }

	  var visualMeta;

	  for (var i = visualMetaList.length - 1; i >= 0; i--) {
	    // Can only be x or y
	    if (visualMetaList[i].dimension < 2) {
	      visualMeta = visualMetaList[i];
	      break;
	    }
	  }

	  if (!visualMeta || coordSys.type !== 'cartesian2d') {
	    return;
	  } // If the area to be rendered is bigger than area defined by LinearGradient,
	  // the canvas spec prescribes that the color of the first stop and the last
	  // stop should be used. But if two stops are added at offset 0, in effect
	  // browsers use the color of the second stop to render area outside
	  // LinearGradient. So we can only infinitesimally extend area defined in
	  // LinearGradient to render `outerColors`.


	  var dimension = visualMeta.dimension;
	  var dimName = data.dimensions[dimension];
	  var axis = coordSys.getAxis(dimName); // dataToCoor mapping may not be linear, but must be monotonic.

	  var colorStops = zrUtil.map(visualMeta.stops, function (stop) {
	    return {
	      coord: axis.toGlobalCoord(axis.dataToCoord(stop.value)),
	      color: stop.color
	    };
	  });
	  var stopLen = colorStops.length;
	  var outerColors = visualMeta.outerColors.slice();

	  if (stopLen && colorStops[0].coord > colorStops[stopLen - 1].coord) {
	    colorStops.reverse();
	    outerColors.reverse();
	  }

	  var tinyExtent = 10; // Arbitrary value: 10px

	  var minCoord = colorStops[0].coord - tinyExtent;
	  var maxCoord = colorStops[stopLen - 1].coord + tinyExtent;
	  var coordSpan = maxCoord - minCoord;

	  if (coordSpan < 1e-3) {
	    return 'transparent';
	  }

	  zrUtil.each(colorStops, function (stop) {
	    stop.offset = (stop.coord - minCoord) / coordSpan;
	  });
	  colorStops.push({
	    offset: stopLen ? colorStops[stopLen - 1].offset : 0.5,
	    color: outerColors[1] || 'transparent'
	  });
	  colorStops.unshift({
	    // notice colorStops.length have been changed.
	    offset: stopLen ? colorStops[0].offset : 0.5,
	    color: outerColors[0] || 'transparent'
	  }); // zrUtil.each(colorStops, function (colorStop) {
	  //     // Make sure each offset has rounded px to avoid not sharp edge
	  //     colorStop.offset = (Math.round(colorStop.offset * (end - start) + start) - start) / (end - start);
	  // });

	  var gradient = new graphic.LinearGradient(0, 0, 0, 0, colorStops, true);
	  gradient[dimName] = minCoord;
	  gradient[dimName + '2'] = maxCoord;
	  return gradient;
	}

	var _default = ChartView.extend({
	  type: 'line',
	  init: function () {
	    var lineGroup = new graphic.Group();
	    var symbolDraw = new SymbolDraw();
	    this.group.add(symbolDraw.group);
	    this._symbolDraw = symbolDraw;
	    this._lineGroup = lineGroup;
	  },
	  render: function (seriesModel, ecModel, api) {
	    var coordSys = seriesModel.coordinateSystem;
	    var group = this.group;
	    var data = seriesModel.getData();
	    var lineStyleModel = seriesModel.getModel('lineStyle.normal');
	    var areaStyleModel = seriesModel.getModel('areaStyle.normal');
	    var points = data.mapArray(data.getItemLayout, true);
	    var isCoordSysPolar = coordSys.type === 'polar';
	    var prevCoordSys = this._coordSys;
	    var symbolDraw = this._symbolDraw;
	    var polyline = this._polyline;
	    var polygon = this._polygon;
	    var lineGroup = this._lineGroup;
	    var hasAnimation = seriesModel.get('animation');
	    var isAreaChart = !areaStyleModel.isEmpty();
	    var stackedOnPoints = getStackedOnPoints(coordSys, data);
	    var showSymbol = seriesModel.get('showSymbol');

	    var isSymbolIgnore = showSymbol && !isCoordSysPolar && !seriesModel.get('showAllSymbol') && this._getSymbolIgnoreFunc(data, coordSys); // Remove temporary symbols


	    var oldData = this._data;
	    oldData && oldData.eachItemGraphicEl(function (el, idx) {
	      if (el.__temp) {
	        group.remove(el);
	        oldData.setItemGraphicEl(idx, null);
	      }
	    }); // Remove previous created symbols if showSymbol changed to false

	    if (!showSymbol) {
	      symbolDraw.remove();
	    }

	    group.add(lineGroup); // FIXME step not support polar

	    var step = !isCoordSysPolar && seriesModel.get('step'); // Initialization animation or coordinate system changed

	    if (!(polyline && prevCoordSys.type === coordSys.type && step === this._step)) {
	      showSymbol && symbolDraw.updateData(data, isSymbolIgnore);

	      if (step) {
	        // TODO If stacked series is not step
	        points = turnPointsIntoStep(points, coordSys, step);
	        stackedOnPoints = turnPointsIntoStep(stackedOnPoints, coordSys, step);
	      }

	      polyline = this._newPolyline(points, coordSys, hasAnimation);

	      if (isAreaChart) {
	        polygon = this._newPolygon(points, stackedOnPoints, coordSys, hasAnimation);
	      }

	      lineGroup.setClipPath(createClipShape(coordSys, true, seriesModel));
	    } else {
	      if (isAreaChart && !polygon) {
	        // If areaStyle is added
	        polygon = this._newPolygon(points, stackedOnPoints, coordSys, hasAnimation);
	      } else if (polygon && !isAreaChart) {
	        // If areaStyle is removed
	        lineGroup.remove(polygon);
	        polygon = this._polygon = null;
	      } // Update clipPath


	      lineGroup.setClipPath(createClipShape(coordSys, false, seriesModel)); // Always update, or it is wrong in the case turning on legend
	      // because points are not changed

	      showSymbol && symbolDraw.updateData(data, isSymbolIgnore); // Stop symbol animation and sync with line points
	      // FIXME performance?

	      data.eachItemGraphicEl(function (el) {
	        el.stopAnimation(true);
	      }); // In the case data zoom triggerred refreshing frequently
	      // Data may not change if line has a category axis. So it should animate nothing

	      if (!isPointsSame(this._stackedOnPoints, stackedOnPoints) || !isPointsSame(this._points, points)) {
	        if (hasAnimation) {
	          this._updateAnimation(data, stackedOnPoints, coordSys, api, step);
	        } else {
	          // Not do it in update with animation
	          if (step) {
	            // TODO If stacked series is not step
	            points = turnPointsIntoStep(points, coordSys, step);
	            stackedOnPoints = turnPointsIntoStep(stackedOnPoints, coordSys, step);
	          }

	          polyline.setShape({
	            points: points
	          });
	          polygon && polygon.setShape({
	            points: points,
	            stackedOnPoints: stackedOnPoints
	          });
	        }
	      }
	    }

	    var visualColor = getVisualGradient(data, coordSys) || data.getVisual('color');
	    polyline.useStyle(zrUtil.defaults( // Use color in lineStyle first
	    lineStyleModel.getLineStyle(), {
	      fill: 'none',
	      stroke: visualColor,
	      lineJoin: 'bevel'
	    }));
	    var smooth = seriesModel.get('smooth');
	    smooth = getSmooth(seriesModel.get('smooth'));
	    polyline.setShape({
	      smooth: smooth,
	      smoothMonotone: seriesModel.get('smoothMonotone'),
	      connectNulls: seriesModel.get('connectNulls')
	    });

	    if (polygon) {
	      var stackedOn = data.stackedOn;
	      var stackedOnSmooth = 0;
	      polygon.useStyle(zrUtil.defaults(areaStyleModel.getAreaStyle(), {
	        fill: visualColor,
	        opacity: 0.7,
	        lineJoin: 'bevel'
	      }));

	      if (stackedOn) {
	        var stackedOnSeries = stackedOn.hostModel;
	        stackedOnSmooth = getSmooth(stackedOnSeries.get('smooth'));
	      }

	      polygon.setShape({
	        smooth: smooth,
	        stackedOnSmooth: stackedOnSmooth,
	        smoothMonotone: seriesModel.get('smoothMonotone'),
	        connectNulls: seriesModel.get('connectNulls')
	      });
	    }

	    this._data = data; // Save the coordinate system for transition animation when data changed

	    this._coordSys = coordSys;
	    this._stackedOnPoints = stackedOnPoints;
	    this._points = points;
	    this._step = step;
	  },
	  dispose: function () {},
	  highlight: function (seriesModel, ecModel, api, payload) {
	    var data = seriesModel.getData();
	    var dataIndex = modelUtil.queryDataIndex(data, payload);

	    if (!(dataIndex instanceof Array) && dataIndex != null && dataIndex >= 0) {
	      var symbol = data.getItemGraphicEl(dataIndex);

	      if (!symbol) {
	        // Create a temporary symbol if it is not exists
	        var pt = data.getItemLayout(dataIndex);

	        if (!pt) {
	          // Null data
	          return;
	        }

	        symbol = new SymbolClz(data, dataIndex);
	        symbol.position = pt;
	        symbol.setZ(seriesModel.get('zlevel'), seriesModel.get('z'));
	        symbol.ignore = isNaN(pt[0]) || isNaN(pt[1]);
	        symbol.__temp = true;
	        data.setItemGraphicEl(dataIndex, symbol); // Stop scale animation

	        symbol.stopSymbolAnimation(true);
	        this.group.add(symbol);
	      }

	      symbol.highlight();
	    } else {
	      // Highlight whole series
	      ChartView.prototype.highlight.call(this, seriesModel, ecModel, api, payload);
	    }
	  },
	  downplay: function (seriesModel, ecModel, api, payload) {
	    var data = seriesModel.getData();
	    var dataIndex = modelUtil.queryDataIndex(data, payload);

	    if (dataIndex != null && dataIndex >= 0) {
	      var symbol = data.getItemGraphicEl(dataIndex);

	      if (symbol) {
	        if (symbol.__temp) {
	          data.setItemGraphicEl(dataIndex, null);
	          this.group.remove(symbol);
	        } else {
	          symbol.downplay();
	        }
	      }
	    } else {
	      // FIXME
	      // can not downplay completely.
	      // Downplay whole series
	      ChartView.prototype.downplay.call(this, seriesModel, ecModel, api, payload);
	    }
	  },

	  /**
	   * @param {module:zrender/container/Group} group
	   * @param {Array.<Array.<number>>} points
	   * @private
	   */
	  _newPolyline: function (points) {
	    var polyline = this._polyline; // Remove previous created polyline

	    if (polyline) {
	      this._lineGroup.remove(polyline);
	    }

	    polyline = new Polyline({
	      shape: {
	        points: points
	      },
	      silent: true,
	      z2: 10
	    });

	    this._lineGroup.add(polyline);

	    this._polyline = polyline;
	    return polyline;
	  },

	  /**
	   * @param {module:zrender/container/Group} group
	   * @param {Array.<Array.<number>>} stackedOnPoints
	   * @param {Array.<Array.<number>>} points
	   * @private
	   */
	  _newPolygon: function (points, stackedOnPoints) {
	    var polygon = this._polygon; // Remove previous created polygon

	    if (polygon) {
	      this._lineGroup.remove(polygon);
	    }

	    polygon = new Polygon({
	      shape: {
	        points: points,
	        stackedOnPoints: stackedOnPoints
	      },
	      silent: true
	    });

	    this._lineGroup.add(polygon);

	    this._polygon = polygon;
	    return polygon;
	  },

	  /**
	   * @private
	   */
	  _getSymbolIgnoreFunc: function (data, coordSys) {
	    var categoryAxis = coordSys.getAxesByScale('ordinal')[0]; // `getLabelInterval` is provided by echarts/component/axis

	    if (categoryAxis && categoryAxis.isLabelIgnored) {
	      return zrUtil.bind(categoryAxis.isLabelIgnored, categoryAxis);
	    }
	  },

	  /**
	   * @private
	   */
	  // FIXME Two value axis
	  _updateAnimation: function (data, stackedOnPoints, coordSys, api, step) {
	    var polyline = this._polyline;
	    var polygon = this._polygon;
	    var seriesModel = data.hostModel;
	    var diff = lineAnimationDiff(this._data, data, this._stackedOnPoints, stackedOnPoints, this._coordSys, coordSys);
	    var current = diff.current;
	    var stackedOnCurrent = diff.stackedOnCurrent;
	    var next = diff.next;
	    var stackedOnNext = diff.stackedOnNext;

	    if (step) {
	      // TODO If stacked series is not step
	      current = turnPointsIntoStep(diff.current, coordSys, step);
	      stackedOnCurrent = turnPointsIntoStep(diff.stackedOnCurrent, coordSys, step);
	      next = turnPointsIntoStep(diff.next, coordSys, step);
	      stackedOnNext = turnPointsIntoStep(diff.stackedOnNext, coordSys, step);
	    } // `diff.current` is subset of `current` (which should be ensured by
	    // turnPointsIntoStep), so points in `__points` can be updated when
	    // points in `current` are update during animation.


	    polyline.shape.__points = diff.current;
	    polyline.shape.points = current;
	    graphic.updateProps(polyline, {
	      shape: {
	        points: next
	      }
	    }, seriesModel);

	    if (polygon) {
	      polygon.setShape({
	        points: current,
	        stackedOnPoints: stackedOnCurrent
	      });
	      graphic.updateProps(polygon, {
	        shape: {
	          points: next,
	          stackedOnPoints: stackedOnNext
	        }
	      }, seriesModel);
	    }

	    var updatedDataInfo = [];
	    var diffStatus = diff.status;

	    for (var i = 0; i < diffStatus.length; i++) {
	      var cmd = diffStatus[i].cmd;

	      if (cmd === '=') {
	        var el = data.getItemGraphicEl(diffStatus[i].idx1);

	        if (el) {
	          updatedDataInfo.push({
	            el: el,
	            ptIdx: i // Index of points

	          });
	        }
	      }
	    }

	    if (polyline.animators && polyline.animators.length) {
	      polyline.animators[0].during(function () {
	        for (var i = 0; i < updatedDataInfo.length; i++) {
	          var el = updatedDataInfo[i].el;
	          el.attr('position', polyline.shape.__points[updatedDataInfo[i].ptIdx]);
	        }
	      });
	    }
	  },
	  remove: function (ecModel) {
	    var group = this.group;
	    var oldData = this._data;

	    this._lineGroup.removeAll();

	    this._symbolDraw.remove(true); // Remove temporary created elements when highlighting


	    oldData && oldData.eachItemGraphicEl(function (el, idx) {
	      if (el.__temp) {
	        group.remove(el);
	        oldData.setItemGraphicEl(idx, null);
	      }
	    });
	    this._polyline = this._polygon = this._coordSys = this._points = this._stackedOnPoints = this._data = null;
	  }
	});

	module.exports = _default;

/***/ },
/* 284 */
/***/ function(module, exports, __webpack_require__) {

	var graphic = __webpack_require__(212);

	var SymbolClz = __webpack_require__(285);

	/**
	 * @module echarts/chart/helper/SymbolDraw
	 */

	/**
	 * @constructor
	 * @alias module:echarts/chart/helper/SymbolDraw
	 * @param {module:zrender/graphic/Group} [symbolCtor]
	 */
	function SymbolDraw(symbolCtor) {
	  this.group = new graphic.Group();
	  this._symbolCtor = symbolCtor || SymbolClz;
	}

	var symbolDrawProto = SymbolDraw.prototype;

	function symbolNeedsDraw(data, idx, isIgnore) {
	  var point = data.getItemLayout(idx); // Is an object
	  // if (point && point.hasOwnProperty('point')) {
	  //     point = point.point;
	  // }

	  return point && !isNaN(point[0]) && !isNaN(point[1]) && !(isIgnore && isIgnore(idx)) && data.getItemVisual(idx, 'symbol') !== 'none';
	}
	/**
	 * Update symbols draw by new data
	 * @param {module:echarts/data/List} data
	 * @param {Array.<boolean>} [isIgnore]
	 */


	symbolDrawProto.updateData = function (data, isIgnore) {
	  var group = this.group;
	  var seriesModel = data.hostModel;
	  var oldData = this._data;
	  var SymbolCtor = this._symbolCtor;
	  var seriesScope = {
	    itemStyle: seriesModel.getModel('itemStyle.normal').getItemStyle(['color']),
	    hoverItemStyle: seriesModel.getModel('itemStyle.emphasis').getItemStyle(),
	    symbolRotate: seriesModel.get('symbolRotate'),
	    symbolOffset: seriesModel.get('symbolOffset'),
	    hoverAnimation: seriesModel.get('hoverAnimation'),
	    labelModel: seriesModel.getModel('label.normal'),
	    hoverLabelModel: seriesModel.getModel('label.emphasis'),
	    cursorStyle: seriesModel.get('cursor')
	  };
	  data.diff(oldData).add(function (newIdx) {
	    var point = data.getItemLayout(newIdx);

	    if (symbolNeedsDraw(data, newIdx, isIgnore)) {
	      var symbolEl = new SymbolCtor(data, newIdx, seriesScope);
	      symbolEl.attr('position', point);
	      data.setItemGraphicEl(newIdx, symbolEl);
	      group.add(symbolEl);
	    }
	  }).update(function (newIdx, oldIdx) {
	    var symbolEl = oldData.getItemGraphicEl(oldIdx);
	    var point = data.getItemLayout(newIdx);

	    if (!symbolNeedsDraw(data, newIdx, isIgnore)) {
	      group.remove(symbolEl);
	      return;
	    }

	    if (!symbolEl) {
	      symbolEl = new SymbolCtor(data, newIdx);
	      symbolEl.attr('position', point);
	    } else {
	      symbolEl.updateData(data, newIdx, seriesScope);
	      graphic.updateProps(symbolEl, {
	        position: point
	      }, seriesModel);
	    } // Add back


	    group.add(symbolEl);
	    data.setItemGraphicEl(newIdx, symbolEl);
	  }).remove(function (oldIdx) {
	    var el = oldData.getItemGraphicEl(oldIdx);
	    el && el.fadeOut(function () {
	      group.remove(el);
	    });
	  }).execute();
	  this._data = data;
	};

	symbolDrawProto.updateLayout = function () {
	  var data = this._data;

	  if (data) {
	    // Not use animation
	    data.eachItemGraphicEl(function (el, idx) {
	      var point = data.getItemLayout(idx);
	      el.attr('position', point);
	    });
	  }
	};

	symbolDrawProto.remove = function (enableAnimation) {
	  var group = this.group;
	  var data = this._data;

	  if (data) {
	    if (enableAnimation) {
	      data.eachItemGraphicEl(function (el) {
	        el.fadeOut(function () {
	          group.remove(el);
	        });
	      });
	    } else {
	      group.removeAll();
	    }
	  }
	};

	var _default = SymbolDraw;
	module.exports = _default;

/***/ },
/* 285 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var _symbol = __webpack_require__(276);

	var createSymbol = _symbol.createSymbol;

	var graphic = __webpack_require__(212);

	var _number = __webpack_require__(205);

	var parsePercent = _number.parsePercent;

	var _labelHelper = __webpack_require__(286);

	var findLabelValueDim = _labelHelper.findLabelValueDim;

	/**
	 * @module echarts/chart/helper/Symbol
	 */
	function getSymbolSize(data, idx) {
	  var symbolSize = data.getItemVisual(idx, 'symbolSize');
	  return symbolSize instanceof Array ? symbolSize.slice() : [+symbolSize, +symbolSize];
	}

	function getScale(symbolSize) {
	  return [symbolSize[0] / 2, symbolSize[1] / 2];
	}
	/**
	 * @constructor
	 * @alias {module:echarts/chart/helper/Symbol}
	 * @param {module:echarts/data/List} data
	 * @param {number} idx
	 * @extends {module:zrender/graphic/Group}
	 */


	function SymbolClz(data, idx, seriesScope) {
	  graphic.Group.call(this);
	  this.updateData(data, idx, seriesScope);
	}

	var symbolProto = SymbolClz.prototype;

	function driftSymbol(dx, dy) {
	  this.parent.drift(dx, dy);
	}

	symbolProto._createSymbol = function (symbolType, data, idx, symbolSize) {
	  // Remove paths created before
	  this.removeAll();
	  var color = data.getItemVisual(idx, 'color'); // var symbolPath = createSymbol(
	  //     symbolType, -0.5, -0.5, 1, 1, color
	  // );
	  // If width/height are set too small (e.g., set to 1) on ios10
	  // and macOS Sierra, a circle stroke become a rect, no matter what
	  // the scale is set. So we set width/height as 2. See #4150.

	  var symbolPath = createSymbol(symbolType, -1, -1, 2, 2, color);
	  symbolPath.attr({
	    z2: 100,
	    culling: true,
	    scale: getScale(symbolSize)
	  }); // Rewrite drift method

	  symbolPath.drift = driftSymbol;
	  this._symbolType = symbolType;
	  this.add(symbolPath);
	};
	/**
	 * Stop animation
	 * @param {boolean} toLastFrame
	 */


	symbolProto.stopSymbolAnimation = function (toLastFrame) {
	  this.childAt(0).stopAnimation(toLastFrame);
	};
	/**
	 * FIXME:
	 * Caution: This method breaks the encapsulation of this module,
	 * but it indeed brings convenience. So do not use the method
	 * unless you detailedly know all the implements of `Symbol`,
	 * especially animation.
	 *
	 * Get symbol path element.
	 */


	symbolProto.getSymbolPath = function () {
	  return this.childAt(0);
	};
	/**
	 * Get scale(aka, current symbol size).
	 * Including the change caused by animation
	 */


	symbolProto.getScale = function () {
	  return this.childAt(0).scale;
	};
	/**
	 * Highlight symbol
	 */


	symbolProto.highlight = function () {
	  this.childAt(0).trigger('emphasis');
	};
	/**
	 * Downplay symbol
	 */


	symbolProto.downplay = function () {
	  this.childAt(0).trigger('normal');
	};
	/**
	 * @param {number} zlevel
	 * @param {number} z
	 */


	symbolProto.setZ = function (zlevel, z) {
	  var symbolPath = this.childAt(0);
	  symbolPath.zlevel = zlevel;
	  symbolPath.z = z;
	};

	symbolProto.setDraggable = function (draggable) {
	  var symbolPath = this.childAt(0);
	  symbolPath.draggable = draggable;
	  symbolPath.cursor = draggable ? 'move' : 'pointer';
	};
	/**
	 * Update symbol properties
	 * @param {module:echarts/data/List} data
	 * @param {number} idx
	 * @param {Object} [seriesScope]
	 * @param {Object} [seriesScope.itemStyle]
	 * @param {Object} [seriesScope.hoverItemStyle]
	 * @param {Object} [seriesScope.symbolRotate]
	 * @param {Object} [seriesScope.symbolOffset]
	 * @param {module:echarts/model/Model} [seriesScope.labelModel]
	 * @param {module:echarts/model/Model} [seriesScope.hoverLabelModel]
	 * @param {boolean} [seriesScope.hoverAnimation]
	 * @param {Object} [seriesScope.cursorStyle]
	 * @param {module:echarts/model/Model} [seriesScope.itemModel]
	 * @param {string} [seriesScope.symbolInnerColor]
	 * @param {Object} [seriesScope.fadeIn=false]
	 */


	symbolProto.updateData = function (data, idx, seriesScope) {
	  this.silent = false;
	  var symbolType = data.getItemVisual(idx, 'symbol') || 'circle';
	  var seriesModel = data.hostModel;
	  var symbolSize = getSymbolSize(data, idx);
	  var isInit = symbolType !== this._symbolType;

	  if (isInit) {
	    this._createSymbol(symbolType, data, idx, symbolSize);
	  } else {
	    var symbolPath = this.childAt(0);
	    symbolPath.silent = false;
	    graphic.updateProps(symbolPath, {
	      scale: getScale(symbolSize)
	    }, seriesModel, idx);
	  }

	  this._updateCommon(data, idx, symbolSize, seriesScope);

	  if (isInit) {
	    var symbolPath = this.childAt(0);
	    var fadeIn = seriesScope && seriesScope.fadeIn;
	    var target = {
	      scale: symbolPath.scale.slice()
	    };
	    fadeIn && (target.style = {
	      opacity: symbolPath.style.opacity
	    });
	    symbolPath.scale = [0, 0];
	    fadeIn && (symbolPath.style.opacity = 0);
	    graphic.initProps(symbolPath, target, seriesModel, idx);
	  }

	  this._seriesModel = seriesModel;
	}; // Update common properties


	var normalStyleAccessPath = ['itemStyle', 'normal'];
	var emphasisStyleAccessPath = ['itemStyle', 'emphasis'];
	var normalLabelAccessPath = ['label', 'normal'];
	var emphasisLabelAccessPath = ['label', 'emphasis'];
	/**
	 * @param {module:echarts/data/List} data
	 * @param {number} idx
	 * @param {Array.<number>} symbolSize
	 * @param {Object} [seriesScope]
	 */

	symbolProto._updateCommon = function (data, idx, symbolSize, seriesScope) {
	  var symbolPath = this.childAt(0);
	  var seriesModel = data.hostModel;
	  var color = data.getItemVisual(idx, 'color'); // Reset style

	  if (symbolPath.type !== 'image') {
	    symbolPath.useStyle({
	      strokeNoScale: true
	    });
	  }

	  var itemStyle = seriesScope && seriesScope.itemStyle;
	  var hoverItemStyle = seriesScope && seriesScope.hoverItemStyle;
	  var symbolRotate = seriesScope && seriesScope.symbolRotate;
	  var symbolOffset = seriesScope && seriesScope.symbolOffset;
	  var labelModel = seriesScope && seriesScope.labelModel;
	  var hoverLabelModel = seriesScope && seriesScope.hoverLabelModel;
	  var hoverAnimation = seriesScope && seriesScope.hoverAnimation;
	  var cursorStyle = seriesScope && seriesScope.cursorStyle;

	  if (!seriesScope || data.hasItemOption) {
	    var itemModel = seriesScope && seriesScope.itemModel ? seriesScope.itemModel : data.getItemModel(idx); // Color must be excluded.
	    // Because symbol provide setColor individually to set fill and stroke

	    itemStyle = itemModel.getModel(normalStyleAccessPath).getItemStyle(['color']);
	    hoverItemStyle = itemModel.getModel(emphasisStyleAccessPath).getItemStyle();
	    symbolRotate = itemModel.getShallow('symbolRotate');
	    symbolOffset = itemModel.getShallow('symbolOffset');
	    labelModel = itemModel.getModel(normalLabelAccessPath);
	    hoverLabelModel = itemModel.getModel(emphasisLabelAccessPath);
	    hoverAnimation = itemModel.getShallow('hoverAnimation');
	    cursorStyle = itemModel.getShallow('cursor');
	  } else {
	    hoverItemStyle = zrUtil.extend({}, hoverItemStyle);
	  }

	  var elStyle = symbolPath.style;
	  symbolPath.attr('rotation', (symbolRotate || 0) * Math.PI / 180 || 0);

	  if (symbolOffset) {
	    symbolPath.attr('position', [parsePercent(symbolOffset[0], symbolSize[0]), parsePercent(symbolOffset[1], symbolSize[1])]);
	  }

	  cursorStyle && symbolPath.attr('cursor', cursorStyle); // PENDING setColor before setStyle!!!

	  symbolPath.setColor(color, seriesScope && seriesScope.symbolInnerColor);
	  symbolPath.setStyle(itemStyle);
	  var opacity = data.getItemVisual(idx, 'opacity');

	  if (opacity != null) {
	    elStyle.opacity = opacity;
	  }

	  var useNameLabel = seriesScope && seriesScope.useNameLabel;
	  var valueDim = !useNameLabel && findLabelValueDim(data);

	  if (useNameLabel || valueDim != null) {
	    graphic.setLabelStyle(elStyle, hoverItemStyle, labelModel, hoverLabelModel, {
	      labelFetcher: seriesModel,
	      labelDataIndex: idx,
	      defaultText: useNameLabel ? data.getName(idx) : data.get(valueDim, idx),
	      isRectText: true,
	      autoColor: color
	    });
	  }

	  symbolPath.off('mouseover').off('mouseout').off('emphasis').off('normal');
	  symbolPath.hoverStyle = hoverItemStyle; // FIXME
	  // Do not use symbol.trigger('emphasis'), but use symbol.highlight() instead.

	  graphic.setHoverStyle(symbolPath);
	  var scale = getScale(symbolSize);

	  if (hoverAnimation && seriesModel.isAnimationEnabled()) {
	    var onEmphasis = function () {
	      var ratio = scale[1] / scale[0];
	      this.animateTo({
	        scale: [Math.max(scale[0] * 1.1, scale[0] + 3), Math.max(scale[1] * 1.1, scale[1] + 3 * ratio)]
	      }, 400, 'elasticOut');
	    };

	    var onNormal = function () {
	      this.animateTo({
	        scale: scale
	      }, 400, 'elasticOut');
	    };

	    symbolPath.on('mouseover', onEmphasis).on('mouseout', onNormal).on('emphasis', onEmphasis).on('normal', onNormal);
	  }
	};
	/**
	 * @param {Function} cb
	 * @param {Object} [opt]
	 * @param {Object} [opt.keepLabel=true]
	 */


	symbolProto.fadeOut = function (cb, opt) {
	  var symbolPath = this.childAt(0); // Avoid mistaken hover when fading out

	  this.silent = symbolPath.silent = true; // Not show text when animating

	  !(opt && opt.keepLabel) && (symbolPath.style.text = null);
	  graphic.updateProps(symbolPath, {
	    style: {
	      opacity: 0
	    },
	    scale: [0, 0]
	  }, this._seriesModel, this.dataIndex, cb);
	};

	zrUtil.inherits(SymbolClz, graphic.Group);
	var _default = SymbolClz;
	module.exports = _default;

/***/ },
/* 286 */
/***/ function(module, exports, __webpack_require__) {

	var _model = __webpack_require__(203);

	var otherDimToDataDim = _model.otherDimToDataDim;

	/**
	 * @module echarts/chart/helper/Symbol
	 */
	function findLabelValueDim(data) {
	  var valueDim;
	  var labelDims = otherDimToDataDim(data, 'label');

	  if (labelDims.length) {
	    valueDim = labelDims[0];
	  } else {
	    // Get last value dim
	    var dimensions = data.dimensions.slice();
	    var dataType;

	    while (dimensions.length && (valueDim = dimensions.pop(), dataType = data.getDimensionInfo(valueDim).type, dataType === 'ordinal' || dataType === 'time')) {} // jshint ignore:line

	  }

	  return valueDim;
	}

	exports.findLabelValueDim = findLabelValueDim;

/***/ },
/* 287 */
/***/ function(module, exports) {

	// var arrayDiff = require('zrender/src/core/arrayDiff');
	// 'zrender/src/core/arrayDiff' has been used before, but it did
	// not do well in performance when roam with fixed dataZoom window.
	function sign(val) {
	  return val >= 0 ? 1 : -1;
	}

	function getStackedOnPoint(coordSys, data, idx) {
	  var baseAxis = coordSys.getBaseAxis();
	  var valueAxis = coordSys.getOtherAxis(baseAxis);
	  var valueStart = baseAxis.onZero ? 0 : valueAxis.scale.getExtent()[0];
	  var valueDim = valueAxis.dim;
	  var baseDataOffset = valueDim === 'x' || valueDim === 'radius' ? 1 : 0;
	  var stackedOnSameSign;
	  var stackedOn = data.stackedOn;
	  var val = data.get(valueDim, idx); // Find first stacked value with same sign

	  while (stackedOn && sign(stackedOn.get(valueDim, idx)) === sign(val)) {
	    stackedOnSameSign = stackedOn;
	    break;
	  }

	  var stackedData = [];
	  stackedData[baseDataOffset] = data.get(baseAxis.dim, idx);
	  stackedData[1 - baseDataOffset] = stackedOnSameSign ? stackedOnSameSign.get(valueDim, idx, true) : valueStart;
	  return coordSys.dataToPoint(stackedData);
	} // function convertToIntId(newIdList, oldIdList) {
	//     // Generate int id instead of string id.
	//     // Compare string maybe slow in score function of arrDiff
	//     // Assume id in idList are all unique
	//     var idIndicesMap = {};
	//     var idx = 0;
	//     for (var i = 0; i < newIdList.length; i++) {
	//         idIndicesMap[newIdList[i]] = idx;
	//         newIdList[i] = idx++;
	//     }
	//     for (var i = 0; i < oldIdList.length; i++) {
	//         var oldId = oldIdList[i];
	//         // Same with newIdList
	//         if (idIndicesMap[oldId]) {
	//             oldIdList[i] = idIndicesMap[oldId];
	//         }
	//         else {
	//             oldIdList[i] = idx++;
	//         }
	//     }
	// }


	function diffData(oldData, newData) {
	  var diffResult = [];
	  newData.diff(oldData).add(function (idx) {
	    diffResult.push({
	      cmd: '+',
	      idx: idx
	    });
	  }).update(function (newIdx, oldIdx) {
	    diffResult.push({
	      cmd: '=',
	      idx: oldIdx,
	      idx1: newIdx
	    });
	  }).remove(function (idx) {
	    diffResult.push({
	      cmd: '-',
	      idx: idx
	    });
	  }).execute();
	  return diffResult;
	}

	function _default(oldData, newData, oldStackedOnPoints, newStackedOnPoints, oldCoordSys, newCoordSys) {
	  var diff = diffData(oldData, newData); // var newIdList = newData.mapArray(newData.getId);
	  // var oldIdList = oldData.mapArray(oldData.getId);
	  // convertToIntId(newIdList, oldIdList);
	  // // FIXME One data ?
	  // diff = arrayDiff(oldIdList, newIdList);

	  var currPoints = [];
	  var nextPoints = []; // Points for stacking base line

	  var currStackedPoints = [];
	  var nextStackedPoints = [];
	  var status = [];
	  var sortedIndices = [];
	  var rawIndices = [];
	  var dims = newCoordSys.dimensions;

	  for (var i = 0; i < diff.length; i++) {
	    var diffItem = diff[i];
	    var pointAdded = true; // FIXME, animation is not so perfect when dataZoom window moves fast
	    // Which is in case remvoing or add more than one data in the tail or head

	    switch (diffItem.cmd) {
	      case '=':
	        var currentPt = oldData.getItemLayout(diffItem.idx);
	        var nextPt = newData.getItemLayout(diffItem.idx1); // If previous data is NaN, use next point directly

	        if (isNaN(currentPt[0]) || isNaN(currentPt[1])) {
	          currentPt = nextPt.slice();
	        }

	        currPoints.push(currentPt);
	        nextPoints.push(nextPt);
	        currStackedPoints.push(oldStackedOnPoints[diffItem.idx]);
	        nextStackedPoints.push(newStackedOnPoints[diffItem.idx1]);
	        rawIndices.push(newData.getRawIndex(diffItem.idx1));
	        break;

	      case '+':
	        var idx = diffItem.idx;
	        currPoints.push(oldCoordSys.dataToPoint([newData.get(dims[0], idx, true), newData.get(dims[1], idx, true)]));
	        nextPoints.push(newData.getItemLayout(idx).slice());
	        currStackedPoints.push(getStackedOnPoint(oldCoordSys, newData, idx));
	        nextStackedPoints.push(newStackedOnPoints[idx]);
	        rawIndices.push(newData.getRawIndex(idx));
	        break;

	      case '-':
	        var idx = diffItem.idx;
	        var rawIndex = oldData.getRawIndex(idx); // Data is replaced. In the case of dynamic data queue
	        // FIXME FIXME FIXME

	        if (rawIndex !== idx) {
	          currPoints.push(oldData.getItemLayout(idx));
	          nextPoints.push(newCoordSys.dataToPoint([oldData.get(dims[0], idx, true), oldData.get(dims[1], idx, true)]));
	          currStackedPoints.push(oldStackedOnPoints[idx]);
	          nextStackedPoints.push(getStackedOnPoint(newCoordSys, oldData, idx));
	          rawIndices.push(rawIndex);
	        } else {
	          pointAdded = false;
	        }

	    } // Original indices


	    if (pointAdded) {
	      status.push(diffItem);
	      sortedIndices.push(sortedIndices.length);
	    }
	  } // Diff result may be crossed if all items are changed
	  // Sort by data index


	  sortedIndices.sort(function (a, b) {
	    return rawIndices[a] - rawIndices[b];
	  });
	  var sortedCurrPoints = [];
	  var sortedNextPoints = [];
	  var sortedCurrStackedPoints = [];
	  var sortedNextStackedPoints = [];
	  var sortedStatus = [];

	  for (var i = 0; i < sortedIndices.length; i++) {
	    var idx = sortedIndices[i];
	    sortedCurrPoints[i] = currPoints[idx];
	    sortedNextPoints[i] = nextPoints[idx];
	    sortedCurrStackedPoints[i] = currStackedPoints[idx];
	    sortedNextStackedPoints[i] = nextStackedPoints[idx];
	    sortedStatus[i] = status[idx];
	  }

	  return {
	    current: sortedCurrPoints,
	    next: sortedNextPoints,
	    stackedOnCurrent: sortedCurrStackedPoints,
	    stackedOnNext: sortedNextStackedPoints,
	    status: sortedStatus
	  };
	}

	module.exports = _default;

/***/ },
/* 288 */
/***/ function(module, exports, __webpack_require__) {

	var Path = __webpack_require__(214);

	var vec2 = __webpack_require__(168);

	var fixClipWithShadow = __webpack_require__(229);

	// Poly path support NaN point
	var vec2Min = vec2.min;
	var vec2Max = vec2.max;
	var scaleAndAdd = vec2.scaleAndAdd;
	var v2Copy = vec2.copy; // Temporary variable

	var v = [];
	var cp0 = [];
	var cp1 = [];

	function isPointNull(p) {
	  return isNaN(p[0]) || isNaN(p[1]);
	}

	function drawSegment(ctx, points, start, segLen, allLen, dir, smoothMin, smoothMax, smooth, smoothMonotone, connectNulls) {
	  var prevIdx = 0;
	  var idx = start;

	  for (var k = 0; k < segLen; k++) {
	    var p = points[idx];

	    if (idx >= allLen || idx < 0) {
	      break;
	    }

	    if (isPointNull(p)) {
	      if (connectNulls) {
	        idx += dir;
	        continue;
	      }

	      break;
	    }

	    if (idx === start) {
	      ctx[dir > 0 ? 'moveTo' : 'lineTo'](p[0], p[1]);
	      v2Copy(cp0, p);
	    } else {
	      if (smooth > 0) {
	        var nextIdx = idx + dir;
	        var nextP = points[nextIdx];

	        if (connectNulls) {
	          // Find next point not null
	          while (nextP && isPointNull(points[nextIdx])) {
	            nextIdx += dir;
	            nextP = points[nextIdx];
	          }
	        }

	        var ratioNextSeg = 0.5;
	        var prevP = points[prevIdx];
	        var nextP = points[nextIdx]; // Last point

	        if (!nextP || isPointNull(nextP)) {
	          v2Copy(cp1, p);
	        } else {
	          // If next data is null in not connect case
	          if (isPointNull(nextP) && !connectNulls) {
	            nextP = p;
	          }

	          vec2.sub(v, nextP, prevP);
	          var lenPrevSeg;
	          var lenNextSeg;

	          if (smoothMonotone === 'x' || smoothMonotone === 'y') {
	            var dim = smoothMonotone === 'x' ? 0 : 1;
	            lenPrevSeg = Math.abs(p[dim] - prevP[dim]);
	            lenNextSeg = Math.abs(p[dim] - nextP[dim]);
	          } else {
	            lenPrevSeg = vec2.dist(p, prevP);
	            lenNextSeg = vec2.dist(p, nextP);
	          } // Use ratio of seg length


	          ratioNextSeg = lenNextSeg / (lenNextSeg + lenPrevSeg);
	          scaleAndAdd(cp1, p, v, -smooth * (1 - ratioNextSeg));
	        } // Smooth constraint


	        vec2Min(cp0, cp0, smoothMax);
	        vec2Max(cp0, cp0, smoothMin);
	        vec2Min(cp1, cp1, smoothMax);
	        vec2Max(cp1, cp1, smoothMin);
	        ctx.bezierCurveTo(cp0[0], cp0[1], cp1[0], cp1[1], p[0], p[1]); // cp0 of next segment

	        scaleAndAdd(cp0, p, v, smooth * ratioNextSeg);
	      } else {
	        ctx.lineTo(p[0], p[1]);
	      }
	    }

	    prevIdx = idx;
	    idx += dir;
	  }

	  return k;
	}

	function getBoundingBox(points, smoothConstraint) {
	  var ptMin = [Infinity, Infinity];
	  var ptMax = [-Infinity, -Infinity];

	  if (smoothConstraint) {
	    for (var i = 0; i < points.length; i++) {
	      var pt = points[i];

	      if (pt[0] < ptMin[0]) {
	        ptMin[0] = pt[0];
	      }

	      if (pt[1] < ptMin[1]) {
	        ptMin[1] = pt[1];
	      }

	      if (pt[0] > ptMax[0]) {
	        ptMax[0] = pt[0];
	      }

	      if (pt[1] > ptMax[1]) {
	        ptMax[1] = pt[1];
	      }
	    }
	  }

	  return {
	    min: smoothConstraint ? ptMin : ptMax,
	    max: smoothConstraint ? ptMax : ptMin
	  };
	}

	var Polyline = Path.extend({
	  type: 'ec-polyline',
	  shape: {
	    points: [],
	    smooth: 0,
	    smoothConstraint: true,
	    smoothMonotone: null,
	    connectNulls: false
	  },
	  style: {
	    fill: null,
	    stroke: '#000'
	  },
	  brush: fixClipWithShadow(Path.prototype.brush),
	  buildPath: function (ctx, shape) {
	    var points = shape.points;
	    var i = 0;
	    var len = points.length;
	    var result = getBoundingBox(points, shape.smoothConstraint);

	    if (shape.connectNulls) {
	      // Must remove first and last null values avoid draw error in polygon
	      for (; len > 0; len--) {
	        if (!isPointNull(points[len - 1])) {
	          break;
	        }
	      }

	      for (; i < len; i++) {
	        if (!isPointNull(points[i])) {
	          break;
	        }
	      }
	    }

	    while (i < len) {
	      i += drawSegment(ctx, points, i, len, len, 1, result.min, result.max, shape.smooth, shape.smoothMonotone, shape.connectNulls) + 1;
	    }
	  }
	});
	var Polygon = Path.extend({
	  type: 'ec-polygon',
	  shape: {
	    points: [],
	    // Offset between stacked base points and points
	    stackedOnPoints: [],
	    smooth: 0,
	    stackedOnSmooth: 0,
	    smoothConstraint: true,
	    smoothMonotone: null,
	    connectNulls: false
	  },
	  brush: fixClipWithShadow(Path.prototype.brush),
	  buildPath: function (ctx, shape) {
	    var points = shape.points;
	    var stackedOnPoints = shape.stackedOnPoints;
	    var i = 0;
	    var len = points.length;
	    var smoothMonotone = shape.smoothMonotone;
	    var bbox = getBoundingBox(points, shape.smoothConstraint);
	    var stackedOnBBox = getBoundingBox(stackedOnPoints, shape.smoothConstraint);

	    if (shape.connectNulls) {
	      // Must remove first and last null values avoid draw error in polygon
	      for (; len > 0; len--) {
	        if (!isPointNull(points[len - 1])) {
	          break;
	        }
	      }

	      for (; i < len; i++) {
	        if (!isPointNull(points[i])) {
	          break;
	        }
	      }
	    }

	    while (i < len) {
	      var k = drawSegment(ctx, points, i, len, len, 1, bbox.min, bbox.max, shape.smooth, smoothMonotone, shape.connectNulls);
	      drawSegment(ctx, stackedOnPoints, i + k - 1, k, len, -1, stackedOnBBox.min, stackedOnBBox.max, shape.stackedOnSmooth, smoothMonotone, shape.connectNulls);
	      i += k + 1;
	      ctx.closePath();
	    }
	  }
	});
	exports.Polyline = Polyline;
	exports.Polygon = Polygon;

/***/ },
/* 289 */
/***/ function(module, exports) {

	function _default(seriesType, defaultSymbolType, legendSymbol, ecModel, api) {
	  // Encoding visual for all series include which is filtered for legend drawing
	  ecModel.eachRawSeriesByType(seriesType, function (seriesModel) {
	    var data = seriesModel.getData();
	    var symbolType = seriesModel.get('symbol') || defaultSymbolType;
	    var symbolSize = seriesModel.get('symbolSize');
	    data.setVisual({
	      legendSymbol: legendSymbol || symbolType,
	      symbol: symbolType,
	      symbolSize: symbolSize
	    }); // Only visible series has each data be visual encoded

	    if (!ecModel.isSeriesFiltered(seriesModel)) {
	      if (typeof symbolSize === 'function') {
	        data.each(function (idx) {
	          var rawValue = seriesModel.getRawValue(idx); // FIXME

	          var params = seriesModel.getDataParams(idx);
	          data.setItemVisual(idx, 'symbolSize', symbolSize(rawValue, params));
	        });
	      }

	      data.each(function (idx) {
	        var itemModel = data.getItemModel(idx);
	        var itemSymbolType = itemModel.getShallow('symbol', true);
	        var itemSymbolSize = itemModel.getShallow('symbolSize', true); // If has item symbol

	        if (itemSymbolType != null) {
	          data.setItemVisual(idx, 'symbol', itemSymbolType);
	        }

	        if (itemSymbolSize != null) {
	          // PENDING Transform symbolSize ?
	          data.setItemVisual(idx, 'symbolSize', itemSymbolSize);
	        }
	      });
	    }
	  });
	}

	module.exports = _default;

/***/ },
/* 290 */
/***/ function(module, exports) {

	function _default(seriesType, ecModel) {
	  ecModel.eachSeriesByType(seriesType, function (seriesModel) {
	    var data = seriesModel.getData();
	    var coordSys = seriesModel.coordinateSystem;

	    if (!coordSys) {
	      return;
	    }

	    var dims = [];
	    var coordDims = coordSys.dimensions;

	    for (var i = 0; i < coordDims.length; i++) {
	      dims.push(seriesModel.coordDimToDataDim(coordSys.dimensions[i])[0]);
	    }

	    if (dims.length === 1) {
	      data.each(dims[0], function (x, idx) {
	        // Also {Array.<number>}, not undefined to avoid if...else... statement
	        data.setItemLayout(idx, isNaN(x) ? [NaN, NaN] : coordSys.dataToPoint(x));
	      });
	    } else if (dims.length === 2) {
	      data.each(dims, function (x, y, idx) {
	        // Also {Array.<number>}, not undefined to avoid if...else... statement
	        data.setItemLayout(idx, isNaN(x) || isNaN(y) ? [NaN, NaN] : coordSys.dataToPoint([x, y]));
	      }, true);
	    }
	  });
	}

	module.exports = _default;

/***/ },
/* 291 */
/***/ function(module, exports) {

	var samplers = {
	  average: function (frame) {
	    var sum = 0;
	    var count = 0;

	    for (var i = 0; i < frame.length; i++) {
	      if (!isNaN(frame[i])) {
	        sum += frame[i];
	        count++;
	      }
	    } // Return NaN if count is 0


	    return count === 0 ? NaN : sum / count;
	  },
	  sum: function (frame) {
	    var sum = 0;

	    for (var i = 0; i < frame.length; i++) {
	      // Ignore NaN
	      sum += frame[i] || 0;
	    }

	    return sum;
	  },
	  max: function (frame) {
	    var max = -Infinity;

	    for (var i = 0; i < frame.length; i++) {
	      frame[i] > max && (max = frame[i]);
	    }

	    return max;
	  },
	  min: function (frame) {
	    var min = Infinity;

	    for (var i = 0; i < frame.length; i++) {
	      frame[i] < min && (min = frame[i]);
	    }

	    return min;
	  },
	  // TODO
	  // Median
	  nearest: function (frame) {
	    return frame[0];
	  }
	};

	var indexSampler = function (frame, value) {
	  return Math.round(frame.length / 2);
	};

	function _default(seriesType, ecModel, api) {
	  ecModel.eachSeriesByType(seriesType, function (seriesModel) {
	    var data = seriesModel.getData();
	    var sampling = seriesModel.get('sampling');
	    var coordSys = seriesModel.coordinateSystem; // Only cartesian2d support down sampling

	    if (coordSys.type === 'cartesian2d' && sampling) {
	      var baseAxis = coordSys.getBaseAxis();
	      var valueAxis = coordSys.getOtherAxis(baseAxis);
	      var extent = baseAxis.getExtent(); // Coordinste system has been resized

	      var size = extent[1] - extent[0];
	      var rate = Math.round(data.count() / size);

	      if (rate > 1) {
	        var sampler;

	        if (typeof sampling === 'string') {
	          sampler = samplers[sampling];
	        } else if (typeof sampling === 'function') {
	          sampler = sampling;
	        }

	        if (sampler) {
	          data = data.downSample(valueAxis.dim, 1 / rate, sampler, indexSampler);
	          seriesModel.setData(data);
	        }
	      }
	    }
	  }, this);
	}

	module.exports = _default;

/***/ },
/* 292 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var zrUtil = __webpack_require__(166);

	var graphic = __webpack_require__(212);

	__webpack_require__(293);

	__webpack_require__(301);

	// Grid view
	echarts.extendComponentView({
	  type: 'grid',
	  render: function (gridModel, ecModel) {
	    this.group.removeAll();

	    if (gridModel.get('show')) {
	      this.group.add(new graphic.Rect({
	        shape: gridModel.coordinateSystem.getRect(),
	        style: zrUtil.defaults({
	          fill: gridModel.get('backgroundColor')
	        }, gridModel.getItemStyle()),
	        silent: true,
	        z2: -1
	      }));
	    }
	  }
	});
	echarts.registerPreprocessor(function (option) {
	  // Only create grid when need
	  if (option.xAxis && option.yAxis && !option.grid) {
	    option.grid = {};
	  }
	});

/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(162);

	var __DEV__ = _config.__DEV__;

	var zrUtil = __webpack_require__(166);

	var BoundingRect = __webpack_require__(184);

	var _layout = __webpack_require__(247);

	var getLayoutRect = _layout.getLayoutRect;

	var axisHelper = __webpack_require__(268);

	var Cartesian2D = __webpack_require__(294);

	var Axis2D = __webpack_require__(296);

	var CoordinateSystem = __webpack_require__(252);

	__webpack_require__(297);

	/**
	 * Grid is a region which contains at most 4 cartesian systems
	 *
	 * TODO Default cartesian
	 */
	// Depends on GridModel, AxisModel, which performs preprocess.
	var each = zrUtil.each;
	var ifAxisCrossZero = axisHelper.ifAxisCrossZero;
	var niceScaleExtent = axisHelper.niceScaleExtent;
	/**
	 * Check if the axis is used in the specified grid
	 * @inner
	 */

	function isAxisUsedInTheGrid(axisModel, gridModel, ecModel) {
	  return axisModel.getCoordSysModel() === gridModel;
	}

	function rotateTextRect(textRect, rotate) {
	  var rotateRadians = rotate * Math.PI / 180;
	  var boundingBox = textRect.plain();
	  var beforeWidth = boundingBox.width;
	  var beforeHeight = boundingBox.height;
	  var afterWidth = beforeWidth * Math.cos(rotateRadians) + beforeHeight * Math.sin(rotateRadians);
	  var afterHeight = beforeWidth * Math.sin(rotateRadians) + beforeHeight * Math.cos(rotateRadians);
	  var rotatedRect = new BoundingRect(boundingBox.x, boundingBox.y, afterWidth, afterHeight);
	  return rotatedRect;
	}

	function getLabelUnionRect(axis) {
	  var axisModel = axis.model;
	  var labels = axisModel.getFormattedLabels();
	  var axisLabelModel = axisModel.getModel('axisLabel');
	  var rect;
	  var step = 1;
	  var labelCount = labels.length;

	  if (labelCount > 40) {
	    // Simple optimization for large amount of labels
	    step = Math.ceil(labelCount / 40);
	  }

	  for (var i = 0; i < labelCount; i += step) {
	    if (!axis.isLabelIgnored(i)) {
	      var unrotatedSingleRect = axisLabelModel.getTextRect(labels[i]);
	      var singleRect = rotateTextRect(unrotatedSingleRect, axisLabelModel.get('rotate') || 0);
	      rect ? rect.union(singleRect) : rect = singleRect;
	    }
	  }

	  return rect;
	}

	function Grid(gridModel, ecModel, api) {
	  /**
	   * @type {Object.<string, module:echarts/coord/cartesian/Cartesian2D>}
	   * @private
	   */
	  this._coordsMap = {};
	  /**
	   * @type {Array.<module:echarts/coord/cartesian/Cartesian>}
	   * @private
	   */

	  this._coordsList = [];
	  /**
	   * @type {Object.<string, module:echarts/coord/cartesian/Axis2D>}
	   * @private
	   */

	  this._axesMap = {};
	  /**
	   * @type {Array.<module:echarts/coord/cartesian/Axis2D>}
	   * @private
	   */

	  this._axesList = [];

	  this._initCartesian(gridModel, ecModel, api);

	  this.model = gridModel;
	}

	var gridProto = Grid.prototype;
	gridProto.type = 'grid';
	gridProto.axisPointerEnabled = true;

	gridProto.getRect = function () {
	  return this._rect;
	};

	gridProto.update = function (ecModel, api) {
	  var axesMap = this._axesMap;

	  this._updateScale(ecModel, this.model);

	  each(axesMap.x, function (xAxis) {
	    niceScaleExtent(xAxis.scale, xAxis.model);
	  });
	  each(axesMap.y, function (yAxis) {
	    niceScaleExtent(yAxis.scale, yAxis.model);
	  });
	  each(axesMap.x, function (xAxis) {
	    fixAxisOnZero(axesMap, 'y', xAxis);
	  });
	  each(axesMap.y, function (yAxis) {
	    fixAxisOnZero(axesMap, 'x', yAxis);
	  }); // Resize again if containLabel is enabled
	  // FIXME It may cause getting wrong grid size in data processing stage

	  this.resize(this.model, api);
	};

	function fixAxisOnZero(axesMap, otherAxisDim, axis) {
	  // onZero can not be enabled in these two situations:
	  // 1. When any other axis is a category axis.
	  // 2. When no axis is cross 0 point.
	  var axes = axesMap[otherAxisDim];

	  if (!axis.onZero) {
	    return;
	  }

	  var onZeroAxisIndex = axis.onZeroAxisIndex; // If target axis is specified.

	  if (onZeroAxisIndex != null) {
	    var otherAxis = axes[onZeroAxisIndex];

	    if (otherAxis && canNotOnZeroToAxis(otherAxis)) {
	      axis.onZero = false;
	    }

	    return;
	  }

	  for (var idx in axes) {
	    if (axes.hasOwnProperty(idx)) {
	      var otherAxis = axes[idx];

	      if (otherAxis && !canNotOnZeroToAxis(otherAxis)) {
	        onZeroAxisIndex = +idx;
	        break;
	      }
	    }
	  }

	  if (onZeroAxisIndex == null) {
	    axis.onZero = false;
	  }

	  axis.onZeroAxisIndex = onZeroAxisIndex;
	}

	function canNotOnZeroToAxis(axis) {
	  return axis.type === 'category' || axis.type === 'time' || !ifAxisCrossZero(axis);
	}
	/**
	 * Resize the grid
	 * @param {module:echarts/coord/cartesian/GridModel} gridModel
	 * @param {module:echarts/ExtensionAPI} api
	 */


	gridProto.resize = function (gridModel, api, ignoreContainLabel) {
	  var gridRect = getLayoutRect(gridModel.getBoxLayoutParams(), {
	    width: api.getWidth(),
	    height: api.getHeight()
	  });
	  this._rect = gridRect;
	  var axesList = this._axesList;
	  adjustAxes(); // Minus label size

	  if (!ignoreContainLabel && gridModel.get('containLabel')) {
	    each(axesList, function (axis) {
	      if (!axis.model.get('axisLabel.inside')) {
	        var labelUnionRect = getLabelUnionRect(axis);

	        if (labelUnionRect) {
	          var dim = axis.isHorizontal() ? 'height' : 'width';
	          var margin = axis.model.get('axisLabel.margin');
	          gridRect[dim] -= labelUnionRect[dim] + margin;

	          if (axis.position === 'top') {
	            gridRect.y += labelUnionRect.height + margin;
	          } else if (axis.position === 'left') {
	            gridRect.x += labelUnionRect.width + margin;
	          }
	        }
	      }
	    });
	    adjustAxes();
	  }

	  function adjustAxes() {
	    each(axesList, function (axis) {
	      var isHorizontal = axis.isHorizontal();
	      var extent = isHorizontal ? [0, gridRect.width] : [0, gridRect.height];
	      var idx = axis.inverse ? 1 : 0;
	      axis.setExtent(extent[idx], extent[1 - idx]);
	      updateAxisTransfrom(axis, isHorizontal ? gridRect.x : gridRect.y);
	    });
	  }
	};
	/**
	 * @param {string} axisType
	 * @param {number} [axisIndex]
	 */


	gridProto.getAxis = function (axisType, axisIndex) {
	  var axesMapOnDim = this._axesMap[axisType];

	  if (axesMapOnDim != null) {
	    if (axisIndex == null) {
	      // Find first axis
	      for (var name in axesMapOnDim) {
	        if (axesMapOnDim.hasOwnProperty(name)) {
	          return axesMapOnDim[name];
	        }
	      }
	    }

	    return axesMapOnDim[axisIndex];
	  }
	};
	/**
	 * @return {Array.<module:echarts/coord/Axis>}
	 */


	gridProto.getAxes = function () {
	  return this._axesList.slice();
	};
	/**
	 * Usage:
	 *      grid.getCartesian(xAxisIndex, yAxisIndex);
	 *      grid.getCartesian(xAxisIndex);
	 *      grid.getCartesian(null, yAxisIndex);
	 *      grid.getCartesian({xAxisIndex: ..., yAxisIndex: ...});
	 *
	 * @param {number|Object} [xAxisIndex]
	 * @param {number} [yAxisIndex]
	 */


	gridProto.getCartesian = function (xAxisIndex, yAxisIndex) {
	  if (xAxisIndex != null && yAxisIndex != null) {
	    var key = 'x' + xAxisIndex + 'y' + yAxisIndex;
	    return this._coordsMap[key];
	  }

	  if (zrUtil.isObject(xAxisIndex)) {
	    yAxisIndex = xAxisIndex.yAxisIndex;
	    xAxisIndex = xAxisIndex.xAxisIndex;
	  } // When only xAxisIndex or yAxisIndex given, find its first cartesian.


	  for (var i = 0, coordList = this._coordsList; i < coordList.length; i++) {
	    if (coordList[i].getAxis('x').index === xAxisIndex || coordList[i].getAxis('y').index === yAxisIndex) {
	      return coordList[i];
	    }
	  }
	};

	gridProto.getCartesians = function () {
	  return this._coordsList.slice();
	};
	/**
	 * @implements
	 * see {module:echarts/CoodinateSystem}
	 */


	gridProto.convertToPixel = function (ecModel, finder, value) {
	  var target = this._findConvertTarget(ecModel, finder);

	  return target.cartesian ? target.cartesian.dataToPoint(value) : target.axis ? target.axis.toGlobalCoord(target.axis.dataToCoord(value)) : null;
	};
	/**
	 * @implements
	 * see {module:echarts/CoodinateSystem}
	 */


	gridProto.convertFromPixel = function (ecModel, finder, value) {
	  var target = this._findConvertTarget(ecModel, finder);

	  return target.cartesian ? target.cartesian.pointToData(value) : target.axis ? target.axis.coordToData(target.axis.toLocalCoord(value)) : null;
	};
	/**
	 * @inner
	 */


	gridProto._findConvertTarget = function (ecModel, finder) {
	  var seriesModel = finder.seriesModel;
	  var xAxisModel = finder.xAxisModel || seriesModel && seriesModel.getReferringComponents('xAxis')[0];
	  var yAxisModel = finder.yAxisModel || seriesModel && seriesModel.getReferringComponents('yAxis')[0];
	  var gridModel = finder.gridModel;
	  var coordsList = this._coordsList;
	  var cartesian;
	  var axis;

	  if (seriesModel) {
	    cartesian = seriesModel.coordinateSystem;
	    zrUtil.indexOf(coordsList, cartesian) < 0 && (cartesian = null);
	  } else if (xAxisModel && yAxisModel) {
	    cartesian = this.getCartesian(xAxisModel.componentIndex, yAxisModel.componentIndex);
	  } else if (xAxisModel) {
	    axis = this.getAxis('x', xAxisModel.componentIndex);
	  } else if (yAxisModel) {
	    axis = this.getAxis('y', yAxisModel.componentIndex);
	  } // Lowest priority.
	  else if (gridModel) {
	      var grid = gridModel.coordinateSystem;

	      if (grid === this) {
	        cartesian = this._coordsList[0];
	      }
	    }

	  return {
	    cartesian: cartesian,
	    axis: axis
	  };
	};
	/**
	 * @implements
	 * see {module:echarts/CoodinateSystem}
	 */


	gridProto.containPoint = function (point) {
	  var coord = this._coordsList[0];

	  if (coord) {
	    return coord.containPoint(point);
	  }
	};
	/**
	 * Initialize cartesian coordinate systems
	 * @private
	 */


	gridProto._initCartesian = function (gridModel, ecModel, api) {
	  var axisPositionUsed = {
	    left: false,
	    right: false,
	    top: false,
	    bottom: false
	  };
	  var axesMap = {
	    x: {},
	    y: {}
	  };
	  var axesCount = {
	    x: 0,
	    y: 0
	  }; /// Create axis

	  ecModel.eachComponent('xAxis', createAxisCreator('x'), this);
	  ecModel.eachComponent('yAxis', createAxisCreator('y'), this);

	  if (!axesCount.x || !axesCount.y) {
	    // Roll back when there no either x or y axis
	    this._axesMap = {};
	    this._axesList = [];
	    return;
	  }

	  this._axesMap = axesMap; /// Create cartesian2d

	  each(axesMap.x, function (xAxis, xAxisIndex) {
	    each(axesMap.y, function (yAxis, yAxisIndex) {
	      var key = 'x' + xAxisIndex + 'y' + yAxisIndex;
	      var cartesian = new Cartesian2D(key);
	      cartesian.grid = this;
	      cartesian.model = gridModel;
	      this._coordsMap[key] = cartesian;

	      this._coordsList.push(cartesian);

	      cartesian.addAxis(xAxis);
	      cartesian.addAxis(yAxis);
	    }, this);
	  }, this);

	  function createAxisCreator(axisType) {
	    return function (axisModel, idx) {
	      if (!isAxisUsedInTheGrid(axisModel, gridModel, ecModel)) {
	        return;
	      }

	      var axisPosition = axisModel.get('position');

	      if (axisType === 'x') {
	        // Fix position
	        if (axisPosition !== 'top' && axisPosition !== 'bottom') {
	          // Default bottom of X
	          axisPosition = 'bottom';

	          if (axisPositionUsed[axisPosition]) {
	            axisPosition = axisPosition === 'top' ? 'bottom' : 'top';
	          }
	        }
	      } else {
	        // Fix position
	        if (axisPosition !== 'left' && axisPosition !== 'right') {
	          // Default left of Y
	          axisPosition = 'left';

	          if (axisPositionUsed[axisPosition]) {
	            axisPosition = axisPosition === 'left' ? 'right' : 'left';
	          }
	        }
	      }

	      axisPositionUsed[axisPosition] = true;
	      var axis = new Axis2D(axisType, axisHelper.createScaleByModel(axisModel), [0, 0], axisModel.get('type'), axisPosition);
	      var isCategory = axis.type === 'category';
	      axis.onBand = isCategory && axisModel.get('boundaryGap');
	      axis.inverse = axisModel.get('inverse');
	      axis.onZero = axisModel.get('axisLine.onZero');
	      axis.onZeroAxisIndex = axisModel.get('axisLine.onZeroAxisIndex'); // Inject axis into axisModel

	      axisModel.axis = axis; // Inject axisModel into axis

	      axis.model = axisModel; // Inject grid info axis

	      axis.grid = this; // Index of axis, can be used as key

	      axis.index = idx;

	      this._axesList.push(axis);

	      axesMap[axisType][idx] = axis;
	      axesCount[axisType]++;
	    };
	  }
	};
	/**
	 * Update cartesian properties from series
	 * @param  {module:echarts/model/Option} option
	 * @private
	 */


	gridProto._updateScale = function (ecModel, gridModel) {
	  // Reset scale
	  zrUtil.each(this._axesList, function (axis) {
	    axis.scale.setExtent(Infinity, -Infinity);
	  });
	  ecModel.eachSeries(function (seriesModel) {
	    if (isCartesian2D(seriesModel)) {
	      var axesModels = findAxesModels(seriesModel, ecModel);
	      var xAxisModel = axesModels[0];
	      var yAxisModel = axesModels[1];

	      if (!isAxisUsedInTheGrid(xAxisModel, gridModel, ecModel) || !isAxisUsedInTheGrid(yAxisModel, gridModel, ecModel)) {
	        return;
	      }

	      var cartesian = this.getCartesian(xAxisModel.componentIndex, yAxisModel.componentIndex);
	      var data = seriesModel.getData();
	      var xAxis = cartesian.getAxis('x');
	      var yAxis = cartesian.getAxis('y');

	      if (data.type === 'list') {
	        unionExtent(data, xAxis, seriesModel);
	        unionExtent(data, yAxis, seriesModel);
	      }
	    }
	  }, this);

	  function unionExtent(data, axis, seriesModel) {
	    each(seriesModel.coordDimToDataDim(axis.dim), function (dim) {
	      axis.scale.unionExtentFromData(data, dim);
	    });
	  }
	};
	/**
	 * @param {string} [dim] 'x' or 'y' or 'auto' or null/undefined
	 * @return {Object} {baseAxes: [], otherAxes: []}
	 */


	gridProto.getTooltipAxes = function (dim) {
	  var baseAxes = [];
	  var otherAxes = [];
	  each(this.getCartesians(), function (cartesian) {
	    var baseAxis = dim != null && dim !== 'auto' ? cartesian.getAxis(dim) : cartesian.getBaseAxis();
	    var otherAxis = cartesian.getOtherAxis(baseAxis);
	    zrUtil.indexOf(baseAxes, baseAxis) < 0 && baseAxes.push(baseAxis);
	    zrUtil.indexOf(otherAxes, otherAxis) < 0 && otherAxes.push(otherAxis);
	  });
	  return {
	    baseAxes: baseAxes,
	    otherAxes: otherAxes
	  };
	};
	/**
	 * @inner
	 */


	function updateAxisTransfrom(axis, coordBase) {
	  var axisExtent = axis.getExtent();
	  var axisExtentSum = axisExtent[0] + axisExtent[1]; // Fast transform

	  axis.toGlobalCoord = axis.dim === 'x' ? function (coord) {
	    return coord + coordBase;
	  } : function (coord) {
	    return axisExtentSum - coord + coordBase;
	  };
	  axis.toLocalCoord = axis.dim === 'x' ? function (coord) {
	    return coord - coordBase;
	  } : function (coord) {
	    return axisExtentSum - coord + coordBase;
	  };
	}

	var axesTypes = ['xAxis', 'yAxis'];
	/**
	 * @inner
	 */

	function findAxesModels(seriesModel, ecModel) {
	  return zrUtil.map(axesTypes, function (axisType) {
	    var axisModel = seriesModel.getReferringComponents(axisType)[0];
	    return axisModel;
	  });
	}
	/**
	 * @inner
	 */


	function isCartesian2D(seriesModel) {
	  return seriesModel.get('coordinateSystem') === 'cartesian2d';
	}

	Grid.create = function (ecModel, api) {
	  var grids = [];
	  ecModel.eachComponent('grid', function (gridModel, idx) {
	    var grid = new Grid(gridModel, ecModel, api);
	    grid.name = 'grid_' + idx; // dataSampling requires axis extent, so resize
	    // should be performed in create stage.

	    grid.resize(gridModel, api, true);
	    gridModel.coordinateSystem = grid;
	    grids.push(grid);
	  }); // Inject the coordinateSystems into seriesModel

	  ecModel.eachSeries(function (seriesModel) {
	    if (!isCartesian2D(seriesModel)) {
	      return;
	    }

	    var axesModels = findAxesModels(seriesModel, ecModel);
	    var xAxisModel = axesModels[0];
	    var yAxisModel = axesModels[1];
	    var gridModel = xAxisModel.getCoordSysModel();
	    var grid = gridModel.coordinateSystem;
	    seriesModel.coordinateSystem = grid.getCartesian(xAxisModel.componentIndex, yAxisModel.componentIndex);
	  });
	  return grids;
	}; // For deciding which dimensions to use when creating list data


	Grid.dimensions = Grid.prototype.dimensions = Cartesian2D.prototype.dimensions;
	CoordinateSystem.register('cartesian2d', Grid);
	var _default = Grid;
	module.exports = _default;

/***/ },
/* 294 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var Cartesian = __webpack_require__(295);

	function Cartesian2D(name) {
	  Cartesian.call(this, name);
	}

	Cartesian2D.prototype = {
	  constructor: Cartesian2D,
	  type: 'cartesian2d',

	  /**
	   * @type {Array.<string>}
	   * @readOnly
	   */
	  dimensions: ['x', 'y'],

	  /**
	   * Base axis will be used on stacking.
	   *
	   * @return {module:echarts/coord/cartesian/Axis2D}
	   */
	  getBaseAxis: function () {
	    return this.getAxesByScale('ordinal')[0] || this.getAxesByScale('time')[0] || this.getAxis('x');
	  },

	  /**
	   * If contain point
	   * @param {Array.<number>} point
	   * @return {boolean}
	   */
	  containPoint: function (point) {
	    var axisX = this.getAxis('x');
	    var axisY = this.getAxis('y');
	    return axisX.contain(axisX.toLocalCoord(point[0])) && axisY.contain(axisY.toLocalCoord(point[1]));
	  },

	  /**
	   * If contain data
	   * @param {Array.<number>} data
	   * @return {boolean}
	   */
	  containData: function (data) {
	    return this.getAxis('x').containData(data[0]) && this.getAxis('y').containData(data[1]);
	  },

	  /**
	   * @param {Array.<number>} data
	   * @param {boolean} [clamp=false]
	   * @return {Array.<number>}
	   */
	  dataToPoint: function (data, clamp) {
	    var xAxis = this.getAxis('x');
	    var yAxis = this.getAxis('y');
	    return [xAxis.toGlobalCoord(xAxis.dataToCoord(data[0], clamp)), yAxis.toGlobalCoord(yAxis.dataToCoord(data[1], clamp))];
	  },

	  /**
	   * @param {Array.<number>} point
	   * @param {boolean} [clamp=false]
	   * @return {Array.<number>}
	   */
	  pointToData: function (point, clamp) {
	    var xAxis = this.getAxis('x');
	    var yAxis = this.getAxis('y');
	    return [xAxis.coordToData(xAxis.toLocalCoord(point[0]), clamp), yAxis.coordToData(yAxis.toLocalCoord(point[1]), clamp)];
	  },

	  /**
	   * Get other axis
	   * @param {module:echarts/coord/cartesian/Axis2D} axis
	   */
	  getOtherAxis: function (axis) {
	    return this.getAxis(axis.dim === 'x' ? 'y' : 'x');
	  }
	};
	zrUtil.inherits(Cartesian2D, Cartesian);
	var _default = Cartesian2D;
	module.exports = _default;

/***/ },
/* 295 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	/**
	 * Cartesian coordinate system
	 * @module  echarts/coord/Cartesian
	 *
	 */
	function dimAxisMapper(dim) {
	  return this._axes[dim];
	}
	/**
	 * @alias module:echarts/coord/Cartesian
	 * @constructor
	 */


	var Cartesian = function (name) {
	  this._axes = {};
	  this._dimList = [];
	  /**
	   * @type {string}
	   */

	  this.name = name || '';
	};

	Cartesian.prototype = {
	  constructor: Cartesian,
	  type: 'cartesian',

	  /**
	   * Get axis
	   * @param  {number|string} dim
	   * @return {module:echarts/coord/Cartesian~Axis}
	   */
	  getAxis: function (dim) {
	    return this._axes[dim];
	  },

	  /**
	   * Get axes list
	   * @return {Array.<module:echarts/coord/Cartesian~Axis>}
	   */
	  getAxes: function () {
	    return zrUtil.map(this._dimList, dimAxisMapper, this);
	  },

	  /**
	   * Get axes list by given scale type
	   */
	  getAxesByScale: function (scaleType) {
	    scaleType = scaleType.toLowerCase();
	    return zrUtil.filter(this.getAxes(), function (axis) {
	      return axis.scale.type === scaleType;
	    });
	  },

	  /**
	   * Add axis
	   * @param {module:echarts/coord/Cartesian.Axis}
	   */
	  addAxis: function (axis) {
	    var dim = axis.dim;
	    this._axes[dim] = axis;

	    this._dimList.push(dim);
	  },

	  /**
	   * Convert data to coord in nd space
	   * @param {Array.<number>|Object.<string, number>} val
	   * @return {Array.<number>|Object.<string, number>}
	   */
	  dataToCoord: function (val) {
	    return this._dataCoordConvert(val, 'dataToCoord');
	  },

	  /**
	   * Convert coord in nd space to data
	   * @param  {Array.<number>|Object.<string, number>} val
	   * @return {Array.<number>|Object.<string, number>}
	   */
	  coordToData: function (val) {
	    return this._dataCoordConvert(val, 'coordToData');
	  },
	  _dataCoordConvert: function (input, method) {
	    var dimList = this._dimList;
	    var output = input instanceof Array ? [] : {};

	    for (var i = 0; i < dimList.length; i++) {
	      var dim = dimList[i];
	      var axis = this._axes[dim];
	      output[dim] = axis[method](input[dim]);
	    }

	    return output;
	  }
	};
	var _default = Cartesian;
	module.exports = _default;

/***/ },
/* 296 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var Axis = __webpack_require__(277);

	/**
	 * Extend axis 2d
	 * @constructor module:echarts/coord/cartesian/Axis2D
	 * @extends {module:echarts/coord/cartesian/Axis}
	 * @param {string} dim
	 * @param {*} scale
	 * @param {Array.<number>} coordExtent
	 * @param {string} axisType
	 * @param {string} position
	 */
	var Axis2D = function (dim, scale, coordExtent, axisType, position) {
	  Axis.call(this, dim, scale, coordExtent);
	  /**
	   * Axis type
	   *  - 'category'
	   *  - 'value'
	   *  - 'time'
	   *  - 'log'
	   * @type {string}
	   */

	  this.type = axisType || 'value';
	  /**
	   * Axis position
	   *  - 'top'
	   *  - 'bottom'
	   *  - 'left'
	   *  - 'right'
	   */

	  this.position = position || 'bottom';
	};

	Axis2D.prototype = {
	  constructor: Axis2D,

	  /**
	   * Index of axis, can be used as key
	   */
	  index: 0,

	  /**
	   * If axis is on the zero position of the other axis
	   * @type {boolean}
	   */
	  onZero: false,

	  /**
	   * Axis model
	   * @param {module:echarts/coord/cartesian/AxisModel}
	   */
	  model: null,
	  isHorizontal: function () {
	    var position = this.position;
	    return position === 'top' || position === 'bottom';
	  },

	  /**
	   * Each item cooresponds to this.getExtent(), which
	   * means globalExtent[0] may greater than globalExtent[1],
	   * unless `asc` is input.
	   *
	   * @param {boolean} [asc]
	   * @return {Array.<number>}
	   */
	  getGlobalExtent: function (asc) {
	    var ret = this.getExtent();
	    ret[0] = this.toGlobalCoord(ret[0]);
	    ret[1] = this.toGlobalCoord(ret[1]);
	    asc && ret[0] > ret[1] && ret.reverse();
	    return ret;
	  },
	  getOtherAxis: function () {
	    this.grid.getOtherAxis();
	  },

	  /**
	   * If label is ignored.
	   * Automatically used when axis is category and label can not be all shown
	   * @param  {number}  idx
	   * @return {boolean}
	   */
	  isLabelIgnored: function (idx) {
	    if (this.type === 'category') {
	      var labelInterval = this.getLabelInterval();
	      return typeof labelInterval === 'function' && !labelInterval(idx, this.scale.getLabel(idx)) || idx % (labelInterval + 1);
	    }
	  },

	  /**
	   * @override
	   */
	  pointToData: function (point, clamp) {
	    return this.coordToData(this.toLocalCoord(point[this.dim === 'x' ? 0 : 1]), clamp);
	  },

	  /**
	   * Transform global coord to local coord,
	   * i.e. var localCoord = axis.toLocalCoord(80);
	   * designate by module:echarts/coord/cartesian/Grid.
	   * @type {Function}
	   */
	  toLocalCoord: null,

	  /**
	   * Transform global coord to local coord,
	   * i.e. var globalCoord = axis.toLocalCoord(40);
	   * designate by module:echarts/coord/cartesian/Grid.
	   * @type {Function}
	   */
	  toGlobalCoord: null
	};
	zrUtil.inherits(Axis2D, Axis);
	var _default = Axis2D;
	module.exports = _default;

/***/ },
/* 297 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(298);

	var ComponentModel = __webpack_require__(245);

	// Grid 是在有直角坐标系的时候必须要存在的
	// 所以这里也要被 Cartesian2D 依赖
	var _default = ComponentModel.extend({
	  type: 'grid',
	  dependencies: ['xAxis', 'yAxis'],
	  layoutMode: 'box',

	  /**
	   * @type {module:echarts/coord/cartesian/Grid}
	   */
	  coordinateSystem: null,
	  defaultOption: {
	    show: false,
	    zlevel: 0,
	    z: 0,
	    left: '10%',
	    top: 60,
	    right: '10%',
	    bottom: 60,
	    // If grid size contain label
	    containLabel: false,
	    // width: {totalWidth} - left - right,
	    // height: {totalHeight} - top - bottom,
	    backgroundColor: 'rgba(0,0,0,0)',
	    borderWidth: 1,
	    borderColor: '#ccc'
	  }
	});

	module.exports = _default;

/***/ },
/* 298 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var ComponentModel = __webpack_require__(245);

	var axisModelCreator = __webpack_require__(299);

	var axisModelCommonMixin = __webpack_require__(275);

	var AxisModel = ComponentModel.extend({
	  type: 'cartesian2dAxis',

	  /**
	   * @type {module:echarts/coord/cartesian/Axis2D}
	   */
	  axis: null,

	  /**
	   * @override
	   */
	  init: function () {
	    AxisModel.superApply(this, 'init', arguments);
	    this.resetRange();
	  },

	  /**
	   * @override
	   */
	  mergeOption: function () {
	    AxisModel.superApply(this, 'mergeOption', arguments);
	    this.resetRange();
	  },

	  /**
	   * @override
	   */
	  restoreData: function () {
	    AxisModel.superApply(this, 'restoreData', arguments);
	    this.resetRange();
	  },

	  /**
	   * @override
	   * @return {module:echarts/model/Component}
	   */
	  getCoordSysModel: function () {
	    return this.ecModel.queryComponents({
	      mainType: 'grid',
	      index: this.option.gridIndex,
	      id: this.option.gridId
	    })[0];
	  }
	});

	function getAxisType(axisDim, option) {
	  // Default axis with data is category axis
	  return option.type || (option.data ? 'category' : 'value');
	}

	zrUtil.merge(AxisModel.prototype, axisModelCommonMixin);
	var extraOption = {
	  // gridIndex: 0,
	  // gridId: '',
	  // Offset is for multiple axis on the same position
	  offset: 0
	};
	axisModelCreator('x', AxisModel, getAxisType, extraOption);
	axisModelCreator('y', AxisModel, getAxisType, extraOption);
	var _default = AxisModel;
	module.exports = _default;

/***/ },
/* 299 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var axisDefault = __webpack_require__(300);

	var ComponentModel = __webpack_require__(245);

	var _layout = __webpack_require__(247);

	var getLayoutParams = _layout.getLayoutParams;
	var mergeLayoutParam = _layout.mergeLayoutParam;
	// FIXME axisType is fixed ?
	var AXIS_TYPES = ['value', 'category', 'time', 'log'];
	/**
	 * Generate sub axis model class
	 * @param {string} axisName 'x' 'y' 'radius' 'angle' 'parallel'
	 * @param {module:echarts/model/Component} BaseAxisModelClass
	 * @param {Function} axisTypeDefaulter
	 * @param {Object} [extraDefaultOption]
	 */

	function _default(axisName, BaseAxisModelClass, axisTypeDefaulter, extraDefaultOption) {
	  zrUtil.each(AXIS_TYPES, function (axisType) {
	    BaseAxisModelClass.extend({
	      type: axisName + 'Axis.' + axisType,
	      mergeDefaultAndTheme: function (option, ecModel) {
	        var layoutMode = this.layoutMode;
	        var inputPositionParams = layoutMode ? getLayoutParams(option) : {};
	        var themeModel = ecModel.getTheme();
	        zrUtil.merge(option, themeModel.get(axisType + 'Axis'));
	        zrUtil.merge(option, this.getDefaultOption());
	        option.type = axisTypeDefaulter(axisName, option);

	        if (layoutMode) {
	          mergeLayoutParam(option, inputPositionParams, layoutMode);
	        }
	      },
	      defaultOption: zrUtil.mergeAll([{}, axisDefault[axisType + 'Axis'], extraDefaultOption], true)
	    });
	  });
	  ComponentModel.registerSubTypeDefaulter(axisName + 'Axis', zrUtil.curry(axisTypeDefaulter, axisName));
	}

	module.exports = _default;

/***/ },
/* 300 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var defaultOption = {
	  show: true,
	  zlevel: 0,
	  // 一级层叠
	  z: 0,
	  // 二级层叠
	  // 反向坐标轴
	  inverse: false,
	  // 坐标轴名字，默认为空
	  name: '',
	  // 坐标轴名字位置，支持'start' | 'middle' | 'end'
	  nameLocation: 'end',
	  // 坐标轴名字旋转，degree。
	  nameRotate: null,
	  // Adapt to axis rotate, when nameLocation is 'middle'.
	  nameTruncate: {
	    maxWidth: null,
	    ellipsis: '...',
	    placeholder: '.'
	  },
	  // 坐标轴文字样式，默认取全局样式
	  nameTextStyle: {},
	  // 文字与轴线距离
	  nameGap: 15,
	  silent: false,
	  // Default false to support tooltip.
	  triggerEvent: false,
	  // Default false to avoid legacy user event listener fail.
	  tooltip: {
	    show: false
	  },
	  axisPointer: {},
	  // 坐标轴线
	  axisLine: {
	    // 默认显示，属性show控制显示与否
	    show: true,
	    onZero: true,
	    onZeroAxisIndex: null,
	    // 属性lineStyle控制线条样式
	    lineStyle: {
	      color: '#333',
	      width: 1,
	      type: 'solid'
	    },
	    // 坐标轴两端的箭头
	    symbol: ['none', 'none'],
	    symbolSize: [10, 15]
	  },
	  // 坐标轴小标记
	  axisTick: {
	    // 属性show控制显示与否，默认显示
	    show: true,
	    // 控制小标记是否在grid里
	    inside: false,
	    // 属性length控制线长
	    length: 5,
	    // 属性lineStyle控制线条样式
	    lineStyle: {
	      width: 1
	    }
	  },
	  // 坐标轴文本标签，详见axis.axisLabel
	  axisLabel: {
	    show: true,
	    // 控制文本标签是否在grid里
	    inside: false,
	    rotate: 0,
	    showMinLabel: null,
	    // true | false | null (auto)
	    showMaxLabel: null,
	    // true | false | null (auto)
	    margin: 8,
	    // formatter: null,
	    // 其余属性默认使用全局文本样式，详见TEXTSTYLE
	    fontSize: 12
	  },
	  // 分隔线
	  splitLine: {
	    // 默认显示，属性show控制显示与否
	    show: true,
	    // 属性lineStyle（详见lineStyle）控制线条样式
	    lineStyle: {
	      color: ['#ccc'],
	      width: 1,
	      type: 'solid'
	    }
	  },
	  // 分隔区域
	  splitArea: {
	    // 默认不显示，属性show控制显示与否
	    show: false,
	    // 属性areaStyle（详见areaStyle）控制区域样式
	    areaStyle: {
	      color: ['rgba(250,250,250,0.3)', 'rgba(200,200,200,0.3)']
	    }
	  }
	};
	var axisDefault = {};
	axisDefault.categoryAxis = zrUtil.merge({
	  // 类目起始和结束两端空白策略
	  boundaryGap: true,
	  // splitArea: {
	  // show: false
	  // },
	  splitLine: {
	    show: false
	  },
	  // 坐标轴小标记
	  axisTick: {
	    // If tick is align with label when boundaryGap is true
	    alignWithLabel: false,
	    interval: 'auto'
	  },
	  // 坐标轴文本标签，详见axis.axisLabel
	  axisLabel: {
	    interval: 'auto'
	  }
	}, defaultOption);
	axisDefault.valueAxis = zrUtil.merge({
	  // 数值起始和结束两端空白策略
	  boundaryGap: [0, 0],
	  // 最小值, 设置成 'dataMin' 则从数据中计算最小值
	  // min: null,
	  // 最大值，设置成 'dataMax' 则从数据中计算最大值
	  // max: null,
	  // Readonly prop, specifies start value of the range when using data zoom.
	  // rangeStart: null
	  // Readonly prop, specifies end value of the range when using data zoom.
	  // rangeEnd: null
	  // 脱离0值比例，放大聚焦到最终_min，_max区间
	  // scale: false,
	  // 分割段数，默认为5
	  splitNumber: 5 // Minimum interval
	  // minInterval: null
	  // maxInterval: null

	}, defaultOption); // FIXME

	axisDefault.timeAxis = zrUtil.defaults({
	  scale: true,
	  min: 'dataMin',
	  max: 'dataMax'
	}, axisDefault.valueAxis);
	axisDefault.logAxis = zrUtil.defaults({
	  scale: true,
	  logBase: 10
	}, axisDefault.valueAxis);
	var _default = axisDefault;
	module.exports = _default;

/***/ },
/* 301 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(298);

	__webpack_require__(302);

/***/ },
/* 302 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var graphic = __webpack_require__(212);

	var AxisBuilder = __webpack_require__(303);

	var AxisView = __webpack_require__(304);

	var cartesianAxisHelper = __webpack_require__(306);

	var ifIgnoreOnTick = AxisBuilder.ifIgnoreOnTick;
	var getInterval = AxisBuilder.getInterval;
	var axisBuilderAttrs = ['axisLine', 'axisTickLabel', 'axisName'];
	var selfBuilderAttrs = ['splitArea', 'splitLine']; // function getAlignWithLabel(model, axisModel) {
	//     var alignWithLabel = model.get('alignWithLabel');
	//     if (alignWithLabel === 'auto') {
	//         alignWithLabel = axisModel.get('axisTick.alignWithLabel');
	//     }
	//     return alignWithLabel;
	// }

	var CartesianAxisView = AxisView.extend({
	  type: 'cartesianAxis',
	  axisPointerClass: 'CartesianAxisPointer',

	  /**
	   * @override
	   */
	  render: function (axisModel, ecModel, api, payload) {
	    this.group.removeAll();
	    var oldAxisGroup = this._axisGroup;
	    this._axisGroup = new graphic.Group();
	    this.group.add(this._axisGroup);

	    if (!axisModel.get('show')) {
	      return;
	    }

	    var gridModel = axisModel.getCoordSysModel();
	    var layout = cartesianAxisHelper.layout(gridModel, axisModel);
	    var axisBuilder = new AxisBuilder(axisModel, layout);
	    zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);

	    this._axisGroup.add(axisBuilder.getGroup());

	    zrUtil.each(selfBuilderAttrs, function (name) {
	      if (axisModel.get(name + '.show')) {
	        this['_' + name](axisModel, gridModel, layout.labelInterval);
	      }
	    }, this);
	    graphic.groupTransition(oldAxisGroup, this._axisGroup, axisModel);
	    CartesianAxisView.superCall(this, 'render', axisModel, ecModel, api, payload);
	  },

	  /**
	   * @param {module:echarts/coord/cartesian/AxisModel} axisModel
	   * @param {module:echarts/coord/cartesian/GridModel} gridModel
	   * @param {number|Function} labelInterval
	   * @private
	   */
	  _splitLine: function (axisModel, gridModel, labelInterval) {
	    var axis = axisModel.axis;

	    if (axis.scale.isBlank()) {
	      return;
	    }

	    var splitLineModel = axisModel.getModel('splitLine');
	    var lineStyleModel = splitLineModel.getModel('lineStyle');
	    var lineColors = lineStyleModel.get('color');
	    var lineInterval = getInterval(splitLineModel, labelInterval);
	    lineColors = zrUtil.isArray(lineColors) ? lineColors : [lineColors];
	    var gridRect = gridModel.coordinateSystem.getRect();
	    var isHorizontal = axis.isHorizontal();
	    var lineCount = 0;
	    var ticksCoords = axis.getTicksCoords();
	    var ticks = axis.scale.getTicks();
	    var showMinLabel = axisModel.get('axisLabel.showMinLabel');
	    var showMaxLabel = axisModel.get('axisLabel.showMaxLabel');
	    var p1 = [];
	    var p2 = []; // Simple optimization
	    // Batching the lines if color are the same

	    var lineStyle = lineStyleModel.getLineStyle();

	    for (var i = 0; i < ticksCoords.length; i++) {
	      if (ifIgnoreOnTick(axis, i, lineInterval, ticksCoords.length, showMinLabel, showMaxLabel)) {
	        continue;
	      }

	      var tickCoord = axis.toGlobalCoord(ticksCoords[i]);

	      if (isHorizontal) {
	        p1[0] = tickCoord;
	        p1[1] = gridRect.y;
	        p2[0] = tickCoord;
	        p2[1] = gridRect.y + gridRect.height;
	      } else {
	        p1[0] = gridRect.x;
	        p1[1] = tickCoord;
	        p2[0] = gridRect.x + gridRect.width;
	        p2[1] = tickCoord;
	      }

	      var colorIndex = lineCount++ % lineColors.length;

	      this._axisGroup.add(new graphic.Line(graphic.subPixelOptimizeLine({
	        anid: 'line_' + ticks[i],
	        shape: {
	          x1: p1[0],
	          y1: p1[1],
	          x2: p2[0],
	          y2: p2[1]
	        },
	        style: zrUtil.defaults({
	          stroke: lineColors[colorIndex]
	        }, lineStyle),
	        silent: true
	      })));
	    }
	  },

	  /**
	   * @param {module:echarts/coord/cartesian/AxisModel} axisModel
	   * @param {module:echarts/coord/cartesian/GridModel} gridModel
	   * @param {number|Function} labelInterval
	   * @private
	   */
	  _splitArea: function (axisModel, gridModel, labelInterval) {
	    var axis = axisModel.axis;

	    if (axis.scale.isBlank()) {
	      return;
	    }

	    var splitAreaModel = axisModel.getModel('splitArea');
	    var areaStyleModel = splitAreaModel.getModel('areaStyle');
	    var areaColors = areaStyleModel.get('color');
	    var gridRect = gridModel.coordinateSystem.getRect();
	    var ticksCoords = axis.getTicksCoords();
	    var ticks = axis.scale.getTicks();
	    var prevX = axis.toGlobalCoord(ticksCoords[0]);
	    var prevY = axis.toGlobalCoord(ticksCoords[0]);
	    var count = 0;
	    var areaInterval = getInterval(splitAreaModel, labelInterval);
	    var areaStyle = areaStyleModel.getAreaStyle();
	    areaColors = zrUtil.isArray(areaColors) ? areaColors : [areaColors];
	    var showMinLabel = axisModel.get('axisLabel.showMinLabel');
	    var showMaxLabel = axisModel.get('axisLabel.showMaxLabel');

	    for (var i = 1; i < ticksCoords.length; i++) {
	      if (ifIgnoreOnTick(axis, i, areaInterval, ticksCoords.length, showMinLabel, showMaxLabel)) {
	        continue;
	      }

	      var tickCoord = axis.toGlobalCoord(ticksCoords[i]);
	      var x;
	      var y;
	      var width;
	      var height;

	      if (axis.isHorizontal()) {
	        x = prevX;
	        y = gridRect.y;
	        width = tickCoord - x;
	        height = gridRect.height;
	      } else {
	        x = gridRect.x;
	        y = prevY;
	        width = gridRect.width;
	        height = tickCoord - y;
	      }

	      var colorIndex = count++ % areaColors.length;

	      this._axisGroup.add(new graphic.Rect({
	        anid: 'area_' + ticks[i],
	        shape: {
	          x: x,
	          y: y,
	          width: width,
	          height: height
	        },
	        style: zrUtil.defaults({
	          fill: areaColors[colorIndex]
	        }, areaStyle),
	        silent: true
	      }));

	      prevX = x + width;
	      prevY = y + height;
	    }
	  }
	});
	CartesianAxisView.extend({
	  type: 'xAxis'
	});
	CartesianAxisView.extend({
	  type: 'yAxis'
	});

/***/ },
/* 303 */
/***/ function(module, exports, __webpack_require__) {

	var _util = __webpack_require__(166);

	var retrieve = _util.retrieve;
	var defaults = _util.defaults;
	var extend = _util.extend;
	var each = _util.each;

	var formatUtil = __webpack_require__(204);

	var graphic = __webpack_require__(212);

	var Model = __webpack_require__(206);

	var _number = __webpack_require__(205);

	var isRadianAroundZero = _number.isRadianAroundZero;
	var remRadian = _number.remRadian;

	var _symbol = __webpack_require__(276);

	var createSymbol = _symbol.createSymbol;

	var matrixUtil = __webpack_require__(175);

	var _vector = __webpack_require__(168);

	var v2ApplyTransform = _vector.applyTransform;
	var PI = Math.PI;

	function makeAxisEventDataBase(axisModel) {
	  var eventData = {
	    componentType: axisModel.mainType
	  };
	  eventData[axisModel.mainType + 'Index'] = axisModel.componentIndex;
	  return eventData;
	}
	/**
	 * A final axis is translated and rotated from a "standard axis".
	 * So opt.position and opt.rotation is required.
	 *
	 * A standard axis is and axis from [0, 0] to [0, axisExtent[1]],
	 * for example: (0, 0) ------------> (0, 50)
	 *
	 * nameDirection or tickDirection or labelDirection is 1 means tick
	 * or label is below the standard axis, whereas is -1 means above
	 * the standard axis. labelOffset means offset between label and axis,
	 * which is useful when 'onZero', where axisLabel is in the grid and
	 * label in outside grid.
	 *
	 * Tips: like always,
	 * positive rotation represents anticlockwise, and negative rotation
	 * represents clockwise.
	 * The direction of position coordinate is the same as the direction
	 * of screen coordinate.
	 *
	 * Do not need to consider axis 'inverse', which is auto processed by
	 * axis extent.
	 *
	 * @param {module:zrender/container/Group} group
	 * @param {Object} axisModel
	 * @param {Object} opt Standard axis parameters.
	 * @param {Array.<number>} opt.position [x, y]
	 * @param {number} opt.rotation by radian
	 * @param {number} [opt.nameDirection=1] 1 or -1 Used when nameLocation is 'middle' or 'center'.
	 * @param {number} [opt.tickDirection=1] 1 or -1
	 * @param {number} [opt.labelDirection=1] 1 or -1
	 * @param {number} [opt.labelOffset=0] Usefull when onZero.
	 * @param {string} [opt.axisLabelShow] default get from axisModel.
	 * @param {string} [opt.axisName] default get from axisModel.
	 * @param {number} [opt.axisNameAvailableWidth]
	 * @param {number} [opt.labelRotate] by degree, default get from axisModel.
	 * @param {number} [opt.labelInterval] Default label interval when label
	 *                                     interval from model is null or 'auto'.
	 * @param {number} [opt.strokeContainThreshold] Default label interval when label
	 * @param {number} [opt.nameTruncateMaxWidth]
	 */


	var AxisBuilder = function (axisModel, opt) {
	  /**
	   * @readOnly
	   */
	  this.opt = opt;
	  /**
	   * @readOnly
	   */

	  this.axisModel = axisModel; // Default value

	  defaults(opt, {
	    labelOffset: 0,
	    nameDirection: 1,
	    tickDirection: 1,
	    labelDirection: 1,
	    silent: true
	  });
	  /**
	   * @readOnly
	   */

	  this.group = new graphic.Group(); // FIXME Not use a seperate text group?

	  var dumbGroup = new graphic.Group({
	    position: opt.position.slice(),
	    rotation: opt.rotation
	  }); // this.group.add(dumbGroup);
	  // this._dumbGroup = dumbGroup;

	  dumbGroup.updateTransform();
	  this._transform = dumbGroup.transform;
	  this._dumbGroup = dumbGroup;
	};

	AxisBuilder.prototype = {
	  constructor: AxisBuilder,
	  hasBuilder: function (name) {
	    return !!builders[name];
	  },
	  add: function (name) {
	    builders[name].call(this);
	  },
	  getGroup: function () {
	    return this.group;
	  }
	};
	var builders = {
	  /**
	   * @private
	   */
	  axisLine: function () {
	    var opt = this.opt;
	    var axisModel = this.axisModel;

	    if (!axisModel.get('axisLine.show')) {
	      return;
	    }

	    var extent = this.axisModel.axis.getExtent();
	    var matrix = this._transform;
	    var pt1 = [extent[0], 0];
	    var pt2 = [extent[1], 0];

	    if (matrix) {
	      v2ApplyTransform(pt1, pt1, matrix);
	      v2ApplyTransform(pt2, pt2, matrix);
	    }

	    var lineStyle = extend({
	      lineCap: 'round'
	    }, axisModel.getModel('axisLine.lineStyle').getLineStyle());
	    this.group.add(new graphic.Line(graphic.subPixelOptimizeLine({
	      // Id for animation
	      anid: 'line',
	      shape: {
	        x1: pt1[0],
	        y1: pt1[1],
	        x2: pt2[0],
	        y2: pt2[1]
	      },
	      style: lineStyle,
	      strokeContainThreshold: opt.strokeContainThreshold || 5,
	      silent: true,
	      z2: 1
	    })));
	    var arrows = axisModel.get('axisLine.symbol');
	    var arrowSize = axisModel.get('axisLine.symbolSize');

	    if (arrows != null) {
	      if (typeof arrows === 'string') {
	        // Use the same arrow for start and end point
	        arrows = [arrows, arrows];
	      }

	      if (typeof arrowSize === 'string' || typeof arrowSize === 'number') {
	        // Use the same size for width and height
	        arrowSize = [arrowSize, arrowSize];
	      }

	      var symbolWidth = arrowSize[0];
	      var symbolHeight = arrowSize[1];
	      each([[opt.rotation + Math.PI / 2, pt1], [opt.rotation - Math.PI / 2, pt2]], function (item, index) {
	        if (arrows[index] !== 'none' && arrows[index] != null) {
	          var symbol = createSymbol(arrows[index], -symbolWidth / 2, -symbolHeight / 2, symbolWidth, symbolHeight, lineStyle.stroke, true);
	          symbol.attr({
	            rotation: item[0],
	            position: item[1],
	            silent: true
	          });
	          this.group.add(symbol);
	        }
	      }, this);
	    }
	  },

	  /**
	   * @private
	   */
	  axisTickLabel: function () {
	    var axisModel = this.axisModel;
	    var opt = this.opt;
	    var tickEls = buildAxisTick(this, axisModel, opt);
	    var labelEls = buildAxisLabel(this, axisModel, opt);
	    fixMinMaxLabelShow(axisModel, labelEls, tickEls);
	  },

	  /**
	   * @private
	   */
	  axisName: function () {
	    var opt = this.opt;
	    var axisModel = this.axisModel;
	    var name = retrieve(opt.axisName, axisModel.get('name'));

	    if (!name) {
	      return;
	    }

	    var nameLocation = axisModel.get('nameLocation');
	    var nameDirection = opt.nameDirection;
	    var textStyleModel = axisModel.getModel('nameTextStyle');
	    var gap = axisModel.get('nameGap') || 0;
	    var extent = this.axisModel.axis.getExtent();
	    var gapSignal = extent[0] > extent[1] ? -1 : 1;
	    var pos = [nameLocation === 'start' ? extent[0] - gapSignal * gap : nameLocation === 'end' ? extent[1] + gapSignal * gap : (extent[0] + extent[1]) / 2, // 'middle'
	    // Reuse labelOffset.
	    isNameLocationCenter(nameLocation) ? opt.labelOffset + nameDirection * gap : 0];
	    var labelLayout;
	    var nameRotation = axisModel.get('nameRotate');

	    if (nameRotation != null) {
	      nameRotation = nameRotation * PI / 180; // To radian.
	    }

	    var axisNameAvailableWidth;

	    if (isNameLocationCenter(nameLocation)) {
	      labelLayout = innerTextLayout(opt.rotation, nameRotation != null ? nameRotation : opt.rotation, // Adapt to axis.
	      nameDirection);
	    } else {
	      labelLayout = endTextLayout(opt, nameLocation, nameRotation || 0, extent);
	      axisNameAvailableWidth = opt.axisNameAvailableWidth;

	      if (axisNameAvailableWidth != null) {
	        axisNameAvailableWidth = Math.abs(axisNameAvailableWidth / Math.sin(labelLayout.rotation));
	        !isFinite(axisNameAvailableWidth) && (axisNameAvailableWidth = null);
	      }
	    }

	    var textFont = textStyleModel.getFont();
	    var truncateOpt = axisModel.get('nameTruncate', true) || {};
	    var ellipsis = truncateOpt.ellipsis;
	    var maxWidth = retrieve(opt.nameTruncateMaxWidth, truncateOpt.maxWidth, axisNameAvailableWidth); // FIXME
	    // truncate rich text? (consider performance)

	    var truncatedText = ellipsis != null && maxWidth != null ? formatUtil.truncateText(name, maxWidth, textFont, ellipsis, {
	      minChar: 2,
	      placeholder: truncateOpt.placeholder
	    }) : name;
	    var tooltipOpt = axisModel.get('tooltip', true);
	    var mainType = axisModel.mainType;
	    var formatterParams = {
	      componentType: mainType,
	      name: name,
	      $vars: ['name']
	    };
	    formatterParams[mainType + 'Index'] = axisModel.componentIndex;
	    var textEl = new graphic.Text({
	      // Id for animation
	      anid: 'name',
	      __fullText: name,
	      __truncatedText: truncatedText,
	      position: pos,
	      rotation: labelLayout.rotation,
	      silent: isSilent(axisModel),
	      z2: 1,
	      tooltip: tooltipOpt && tooltipOpt.show ? extend({
	        content: name,
	        formatter: function () {
	          return name;
	        },
	        formatterParams: formatterParams
	      }, tooltipOpt) : null
	    });
	    graphic.setTextStyle(textEl.style, textStyleModel, {
	      text: truncatedText,
	      textFont: textFont,
	      textFill: textStyleModel.getTextColor() || axisModel.get('axisLine.lineStyle.color'),
	      textAlign: labelLayout.textAlign,
	      textVerticalAlign: labelLayout.textVerticalAlign
	    });

	    if (axisModel.get('triggerEvent')) {
	      textEl.eventData = makeAxisEventDataBase(axisModel);
	      textEl.eventData.targetType = 'axisName';
	      textEl.eventData.name = name;
	    } // FIXME


	    this._dumbGroup.add(textEl);

	    textEl.updateTransform();
	    this.group.add(textEl);
	    textEl.decomposeTransform();
	  }
	};
	/**
	 * @public
	 * @static
	 * @param {Object} opt
	 * @param {number} axisRotation in radian
	 * @param {number} textRotation in radian
	 * @param {number} direction
	 * @return {Object} {
	 *  rotation, // according to axis
	 *  textAlign,
	 *  textVerticalAlign
	 * }
	 */

	var innerTextLayout = AxisBuilder.innerTextLayout = function (axisRotation, textRotation, direction) {
	  var rotationDiff = remRadian(textRotation - axisRotation);
	  var textAlign;
	  var textVerticalAlign;

	  if (isRadianAroundZero(rotationDiff)) {
	    // Label is parallel with axis line.
	    textVerticalAlign = direction > 0 ? 'top' : 'bottom';
	    textAlign = 'center';
	  } else if (isRadianAroundZero(rotationDiff - PI)) {
	    // Label is inverse parallel with axis line.
	    textVerticalAlign = direction > 0 ? 'bottom' : 'top';
	    textAlign = 'center';
	  } else {
	    textVerticalAlign = 'middle';

	    if (rotationDiff > 0 && rotationDiff < PI) {
	      textAlign = direction > 0 ? 'right' : 'left';
	    } else {
	      textAlign = direction > 0 ? 'left' : 'right';
	    }
	  }

	  return {
	    rotation: rotationDiff,
	    textAlign: textAlign,
	    textVerticalAlign: textVerticalAlign
	  };
	};

	function endTextLayout(opt, textPosition, textRotate, extent) {
	  var rotationDiff = remRadian(textRotate - opt.rotation);
	  var textAlign;
	  var textVerticalAlign;
	  var inverse = extent[0] > extent[1];
	  var onLeft = textPosition === 'start' && !inverse || textPosition !== 'start' && inverse;

	  if (isRadianAroundZero(rotationDiff - PI / 2)) {
	    textVerticalAlign = onLeft ? 'bottom' : 'top';
	    textAlign = 'center';
	  } else if (isRadianAroundZero(rotationDiff - PI * 1.5)) {
	    textVerticalAlign = onLeft ? 'top' : 'bottom';
	    textAlign = 'center';
	  } else {
	    textVerticalAlign = 'middle';

	    if (rotationDiff < PI * 1.5 && rotationDiff > PI / 2) {
	      textAlign = onLeft ? 'left' : 'right';
	    } else {
	      textAlign = onLeft ? 'right' : 'left';
	    }
	  }

	  return {
	    rotation: rotationDiff,
	    textAlign: textAlign,
	    textVerticalAlign: textVerticalAlign
	  };
	}

	function isSilent(axisModel) {
	  var tooltipOpt = axisModel.get('tooltip');
	  return axisModel.get('silent') // Consider mouse cursor, add these restrictions.
	  || !(axisModel.get('triggerEvent') || tooltipOpt && tooltipOpt.show);
	}

	function fixMinMaxLabelShow(axisModel, labelEls, tickEls) {
	  // If min or max are user set, we need to check
	  // If the tick on min(max) are overlap on their neighbour tick
	  // If they are overlapped, we need to hide the min(max) tick label
	  var showMinLabel = axisModel.get('axisLabel.showMinLabel');
	  var showMaxLabel = axisModel.get('axisLabel.showMaxLabel'); // FIXME
	  // Have not consider onBand yet, where tick els is more than label els.

	  labelEls = labelEls || [];
	  tickEls = tickEls || [];
	  var firstLabel = labelEls[0];
	  var nextLabel = labelEls[1];
	  var lastLabel = labelEls[labelEls.length - 1];
	  var prevLabel = labelEls[labelEls.length - 2];
	  var firstTick = tickEls[0];
	  var nextTick = tickEls[1];
	  var lastTick = tickEls[tickEls.length - 1];
	  var prevTick = tickEls[tickEls.length - 2];

	  if (showMinLabel === false) {
	    ignoreEl(firstLabel);
	    ignoreEl(firstTick);
	  } else if (isTwoLabelOverlapped(firstLabel, nextLabel)) {
	    if (showMinLabel) {
	      ignoreEl(nextLabel);
	      ignoreEl(nextTick);
	    } else {
	      ignoreEl(firstLabel);
	      ignoreEl(firstTick);
	    }
	  }

	  if (showMaxLabel === false) {
	    ignoreEl(lastLabel);
	    ignoreEl(lastTick);
	  } else if (isTwoLabelOverlapped(prevLabel, lastLabel)) {
	    if (showMaxLabel) {
	      ignoreEl(prevLabel);
	      ignoreEl(prevTick);
	    } else {
	      ignoreEl(lastLabel);
	      ignoreEl(lastTick);
	    }
	  }
	}

	function ignoreEl(el) {
	  el && (el.ignore = true);
	}

	function isTwoLabelOverlapped(current, next, labelLayout) {
	  // current and next has the same rotation.
	  var firstRect = current && current.getBoundingRect().clone();
	  var nextRect = next && next.getBoundingRect().clone();

	  if (!firstRect || !nextRect) {
	    return;
	  } // When checking intersect of two rotated labels, we use mRotationBack
	  // to avoid that boundingRect is enlarge when using `boundingRect.applyTransform`.


	  var mRotationBack = matrixUtil.identity([]);
	  matrixUtil.rotate(mRotationBack, mRotationBack, -current.rotation);
	  firstRect.applyTransform(matrixUtil.mul([], mRotationBack, current.getLocalTransform()));
	  nextRect.applyTransform(matrixUtil.mul([], mRotationBack, next.getLocalTransform()));
	  return firstRect.intersect(nextRect);
	}

	function isNameLocationCenter(nameLocation) {
	  return nameLocation === 'middle' || nameLocation === 'center';
	}
	/**
	 * @static
	 */


	var ifIgnoreOnTick = AxisBuilder.ifIgnoreOnTick = function (axis, i, interval, ticksCnt, showMinLabel, showMaxLabel) {
	  if (i === 0 && showMinLabel || i === ticksCnt - 1 && showMaxLabel) {
	    return false;
	  } // FIXME
	  // Have not consider label overlap (if label is too long) yet.


	  var rawTick;
	  var scale = axis.scale;
	  return scale.type === 'ordinal' && (typeof interval === 'function' ? (rawTick = scale.getTicks()[i], !interval(rawTick, scale.getLabel(rawTick))) : i % (interval + 1));
	};
	/**
	 * @static
	 */


	var getInterval = AxisBuilder.getInterval = function (model, labelInterval) {
	  var interval = model.get('interval');

	  if (interval == null || interval == 'auto') {
	    interval = labelInterval;
	  }

	  return interval;
	};

	function buildAxisTick(axisBuilder, axisModel, opt) {
	  var axis = axisModel.axis;

	  if (!axisModel.get('axisTick.show') || axis.scale.isBlank()) {
	    return;
	  }

	  var tickModel = axisModel.getModel('axisTick');
	  var lineStyleModel = tickModel.getModel('lineStyle');
	  var tickLen = tickModel.get('length');
	  var tickInterval = getInterval(tickModel, opt.labelInterval);
	  var ticksCoords = axis.getTicksCoords(tickModel.get('alignWithLabel')); // FIXME
	  // Corresponds to ticksCoords ?

	  var ticks = axis.scale.getTicks();
	  var showMinLabel = axisModel.get('axisLabel.showMinLabel');
	  var showMaxLabel = axisModel.get('axisLabel.showMaxLabel');
	  var pt1 = [];
	  var pt2 = [];
	  var matrix = axisBuilder._transform;
	  var tickEls = [];
	  var ticksCnt = ticksCoords.length;

	  for (var i = 0; i < ticksCnt; i++) {
	    // Only ordinal scale support tick interval
	    if (ifIgnoreOnTick(axis, i, tickInterval, ticksCnt, showMinLabel, showMaxLabel)) {
	      continue;
	    }

	    var tickCoord = ticksCoords[i];
	    pt1[0] = tickCoord;
	    pt1[1] = 0;
	    pt2[0] = tickCoord;
	    pt2[1] = opt.tickDirection * tickLen;

	    if (matrix) {
	      v2ApplyTransform(pt1, pt1, matrix);
	      v2ApplyTransform(pt2, pt2, matrix);
	    } // Tick line, Not use group transform to have better line draw


	    var tickEl = new graphic.Line(graphic.subPixelOptimizeLine({
	      // Id for animation
	      anid: 'tick_' + ticks[i],
	      shape: {
	        x1: pt1[0],
	        y1: pt1[1],
	        x2: pt2[0],
	        y2: pt2[1]
	      },
	      style: defaults(lineStyleModel.getLineStyle(), {
	        stroke: axisModel.get('axisLine.lineStyle.color')
	      }),
	      z2: 2,
	      silent: true
	    }));
	    axisBuilder.group.add(tickEl);
	    tickEls.push(tickEl);
	  }

	  return tickEls;
	}

	function buildAxisLabel(axisBuilder, axisModel, opt) {
	  var axis = axisModel.axis;
	  var show = retrieve(opt.axisLabelShow, axisModel.get('axisLabel.show'));

	  if (!show || axis.scale.isBlank()) {
	    return;
	  }

	  var labelModel = axisModel.getModel('axisLabel');
	  var labelMargin = labelModel.get('margin');
	  var ticks = axis.scale.getTicks();
	  var labels = axisModel.getFormattedLabels(); // Special label rotate.

	  var labelRotation = (retrieve(opt.labelRotate, labelModel.get('rotate')) || 0) * PI / 180;
	  var labelLayout = innerTextLayout(opt.rotation, labelRotation, opt.labelDirection);
	  var categoryData = axisModel.get('data');
	  var labelEls = [];
	  var silent = isSilent(axisModel);
	  var triggerEvent = axisModel.get('triggerEvent');
	  var showMinLabel = axisModel.get('axisLabel.showMinLabel');
	  var showMaxLabel = axisModel.get('axisLabel.showMaxLabel');
	  each(ticks, function (tickVal, index) {
	    if (ifIgnoreOnTick(axis, index, opt.labelInterval, ticks.length, showMinLabel, showMaxLabel)) {
	      return;
	    }

	    var itemLabelModel = labelModel;

	    if (categoryData && categoryData[tickVal] && categoryData[tickVal].textStyle) {
	      itemLabelModel = new Model(categoryData[tickVal].textStyle, labelModel, axisModel.ecModel);
	    }

	    var textColor = itemLabelModel.getTextColor() || axisModel.get('axisLine.lineStyle.color');
	    var tickCoord = axis.dataToCoord(tickVal);
	    var pos = [tickCoord, opt.labelOffset + opt.labelDirection * labelMargin];
	    var labelStr = axis.scale.getLabel(tickVal);
	    var textEl = new graphic.Text({
	      // Id for animation
	      anid: 'label_' + tickVal,
	      position: pos,
	      rotation: labelLayout.rotation,
	      silent: silent,
	      z2: 10
	    });
	    graphic.setTextStyle(textEl.style, itemLabelModel, {
	      text: labels[index],
	      textAlign: itemLabelModel.getShallow('align', true) || labelLayout.textAlign,
	      textVerticalAlign: itemLabelModel.getShallow('verticalAlign', true) || itemLabelModel.getShallow('baseline', true) || labelLayout.textVerticalAlign,
	      textFill: typeof textColor === 'function' ? textColor( // (1) In category axis with data zoom, tick is not the original
	      // index of axis.data. So tick should not be exposed to user
	      // in category axis.
	      // (2) Compatible with previous version, which always returns labelStr.
	      // But in interval scale labelStr is like '223,445', which maked
	      // user repalce ','. So we modify it to return original val but remain
	      // it as 'string' to avoid error in replacing.
	      axis.type === 'category' ? labelStr : axis.type === 'value' ? tickVal + '' : tickVal, index) : textColor
	    }); // Pack data for mouse event

	    if (triggerEvent) {
	      textEl.eventData = makeAxisEventDataBase(axisModel);
	      textEl.eventData.targetType = 'axisLabel';
	      textEl.eventData.value = labelStr;
	    } // FIXME


	    axisBuilder._dumbGroup.add(textEl);

	    textEl.updateTransform();
	    labelEls.push(textEl);
	    axisBuilder.group.add(textEl);
	    textEl.decomposeTransform();
	  });
	  return labelEls;
	}

	var _default = AxisBuilder;
	module.exports = _default;

/***/ },
/* 304 */
/***/ function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(162);

	var __DEV__ = _config.__DEV__;

	var echarts = __webpack_require__(161);

	var axisPointerModelHelper = __webpack_require__(305);

	/**
	 * Base class of AxisView.
	 */
	var AxisView = echarts.extendComponentView({
	  type: 'axis',

	  /**
	   * @private
	   */
	  _axisPointer: null,

	  /**
	   * @protected
	   * @type {string}
	   */
	  axisPointerClass: null,

	  /**
	   * @override
	   */
	  render: function (axisModel, ecModel, api, payload) {
	    // FIXME
	    // This process should proformed after coordinate systems updated
	    // (axis scale updated), and should be performed each time update.
	    // So put it here temporarily, although it is not appropriate to
	    // put a model-writing procedure in `view`.
	    this.axisPointerClass && axisPointerModelHelper.fixValue(axisModel);
	    AxisView.superApply(this, 'render', arguments);
	    updateAxisPointer(this, axisModel, ecModel, api, payload, true);
	  },

	  /**
	   * Action handler.
	   * @public
	   * @param {module:echarts/coord/cartesian/AxisModel} axisModel
	   * @param {module:echarts/model/Global} ecModel
	   * @param {module:echarts/ExtensionAPI} api
	   * @param {Object} payload
	   */
	  updateAxisPointer: function (axisModel, ecModel, api, payload, force) {
	    updateAxisPointer(this, axisModel, ecModel, api, payload, false);
	  },

	  /**
	   * @override
	   */
	  remove: function (ecModel, api) {
	    var axisPointer = this._axisPointer;
	    axisPointer && axisPointer.remove(api);
	    AxisView.superApply(this, 'remove', arguments);
	  },

	  /**
	   * @override
	   */
	  dispose: function (ecModel, api) {
	    disposeAxisPointer(this, api);
	    AxisView.superApply(this, 'dispose', arguments);
	  }
	});

	function updateAxisPointer(axisView, axisModel, ecModel, api, payload, forceRender) {
	  var Clazz = AxisView.getAxisPointerClass(axisView.axisPointerClass);

	  if (!Clazz) {
	    return;
	  }

	  var axisPointerModel = axisPointerModelHelper.getAxisPointerModel(axisModel);
	  axisPointerModel ? (axisView._axisPointer || (axisView._axisPointer = new Clazz())).render(axisModel, axisPointerModel, api, forceRender) : disposeAxisPointer(axisView, api);
	}

	function disposeAxisPointer(axisView, ecModel, api) {
	  var axisPointer = axisView._axisPointer;
	  axisPointer && axisPointer.dispose(ecModel, api);
	  axisView._axisPointer = null;
	}

	var axisPointerClazz = [];

	AxisView.registerAxisPointerClass = function (type, clazz) {
	  axisPointerClazz[type] = clazz;
	};

	AxisView.getAxisPointerClass = function (type) {
	  return type && axisPointerClazz[type];
	};

	var _default = AxisView;
	module.exports = _default;

/***/ },
/* 305 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var Model = __webpack_require__(206);

	var each = zrUtil.each;
	var curry = zrUtil.curry; // Build axisPointerModel, mergin tooltip.axisPointer model for each axis.
	// allAxesInfo should be updated when setOption performed.

	function collect(ecModel, api) {
	  var result = {
	    /**
	     * key: makeKey(axis.model)
	     * value: {
	     *      axis,
	     *      coordSys,
	     *      axisPointerModel,
	     *      triggerTooltip,
	     *      involveSeries,
	     *      snap,
	     *      seriesModels,
	     *      seriesDataCount
	     * }
	     */
	    axesInfo: {},
	    seriesInvolved: false,

	    /**
	     * key: makeKey(coordSys.model)
	     * value: Object: key makeKey(axis.model), value: axisInfo
	     */
	    coordSysAxesInfo: {},
	    coordSysMap: {}
	  };
	  collectAxesInfo(result, ecModel, api); // Check seriesInvolved for performance, in case too many series in some chart.

	  result.seriesInvolved && collectSeriesInfo(result, ecModel);
	  return result;
	}

	function collectAxesInfo(result, ecModel, api) {
	  var globalTooltipModel = ecModel.getComponent('tooltip');
	  var globalAxisPointerModel = ecModel.getComponent('axisPointer'); // links can only be set on global.

	  var linksOption = globalAxisPointerModel.get('link', true) || [];
	  var linkGroups = []; // Collect axes info.

	  each(api.getCoordinateSystems(), function (coordSys) {
	    // Some coordinate system do not support axes, like geo.
	    if (!coordSys.axisPointerEnabled) {
	      return;
	    }

	    var coordSysKey = makeKey(coordSys.model);
	    var axesInfoInCoordSys = result.coordSysAxesInfo[coordSysKey] = {};
	    result.coordSysMap[coordSysKey] = coordSys; // Set tooltip (like 'cross') is a convienent way to show axisPointer
	    // for user. So we enable seting tooltip on coordSys model.

	    var coordSysModel = coordSys.model;
	    var baseTooltipModel = coordSysModel.getModel('tooltip', globalTooltipModel);
	    each(coordSys.getAxes(), curry(saveTooltipAxisInfo, false, null)); // If axis tooltip used, choose tooltip axis for each coordSys.
	    // Notice this case: coordSys is `grid` but not `cartesian2D` here.

	    if (coordSys.getTooltipAxes && globalTooltipModel // If tooltip.showContent is set as false, tooltip will not
	    // show but axisPointer will show as normal.
	    && baseTooltipModel.get('show')) {
	      // Compatible with previous logic. But series.tooltip.trigger: 'axis'
	      // or series.data[n].tooltip.trigger: 'axis' are not support any more.
	      var triggerAxis = baseTooltipModel.get('trigger') === 'axis';
	      var cross = baseTooltipModel.get('axisPointer.type') === 'cross';
	      var tooltipAxes = coordSys.getTooltipAxes(baseTooltipModel.get('axisPointer.axis'));

	      if (triggerAxis || cross) {
	        each(tooltipAxes.baseAxes, curry(saveTooltipAxisInfo, cross ? 'cross' : true, triggerAxis));
	      }

	      if (cross) {
	        each(tooltipAxes.otherAxes, curry(saveTooltipAxisInfo, 'cross', false));
	      }
	    } // fromTooltip: true | false | 'cross'
	    // triggerTooltip: true | false | null


	    function saveTooltipAxisInfo(fromTooltip, triggerTooltip, axis) {
	      var axisPointerModel = axis.model.getModel('axisPointer', globalAxisPointerModel);
	      var axisPointerShow = axisPointerModel.get('show');

	      if (!axisPointerShow || axisPointerShow === 'auto' && !fromTooltip && !isHandleTrigger(axisPointerModel)) {
	        return;
	      }

	      if (triggerTooltip == null) {
	        triggerTooltip = axisPointerModel.get('triggerTooltip');
	      }

	      axisPointerModel = fromTooltip ? makeAxisPointerModel(axis, baseTooltipModel, globalAxisPointerModel, ecModel, fromTooltip, triggerTooltip) : axisPointerModel;
	      var snap = axisPointerModel.get('snap');
	      var key = makeKey(axis.model);
	      var involveSeries = triggerTooltip || snap || axis.type === 'category'; // If result.axesInfo[key] exist, override it (tooltip has higher priority).

	      var axisInfo = result.axesInfo[key] = {
	        key: key,
	        axis: axis,
	        coordSys: coordSys,
	        axisPointerModel: axisPointerModel,
	        triggerTooltip: triggerTooltip,
	        involveSeries: involveSeries,
	        snap: snap,
	        useHandle: isHandleTrigger(axisPointerModel),
	        seriesModels: []
	      };
	      axesInfoInCoordSys[key] = axisInfo;
	      result.seriesInvolved |= involveSeries;
	      var groupIndex = getLinkGroupIndex(linksOption, axis);

	      if (groupIndex != null) {
	        var linkGroup = linkGroups[groupIndex] || (linkGroups[groupIndex] = {
	          axesInfo: {}
	        });
	        linkGroup.axesInfo[key] = axisInfo;
	        linkGroup.mapper = linksOption[groupIndex].mapper;
	        axisInfo.linkGroup = linkGroup;
	      }
	    }
	  });
	}

	function makeAxisPointerModel(axis, baseTooltipModel, globalAxisPointerModel, ecModel, fromTooltip, triggerTooltip) {
	  var tooltipAxisPointerModel = baseTooltipModel.getModel('axisPointer');
	  var volatileOption = {};
	  each(['type', 'snap', 'lineStyle', 'shadowStyle', 'label', 'animation', 'animationDurationUpdate', 'animationEasingUpdate', 'z'], function (field) {
	    volatileOption[field] = zrUtil.clone(tooltipAxisPointerModel.get(field));
	  }); // category axis do not auto snap, otherwise some tick that do not
	  // has value can not be hovered. value/time/log axis default snap if
	  // triggered from tooltip and trigger tooltip.

	  volatileOption.snap = axis.type !== 'category' && !!triggerTooltip; // Compatibel with previous behavior, tooltip axis do not show label by default.
	  // Only these properties can be overrided from tooltip to axisPointer.

	  if (tooltipAxisPointerModel.get('type') === 'cross') {
	    volatileOption.type = 'line';
	  }

	  var labelOption = volatileOption.label || (volatileOption.label = {}); // Follow the convention, do not show label when triggered by tooltip by default.

	  labelOption.show == null && (labelOption.show = false);

	  if (fromTooltip === 'cross') {
	    // When 'cross', both axes show labels.
	    labelOption.show = true; // If triggerTooltip, this is a base axis, which should better not use cross style
	    // (cross style is dashed by default)

	    if (!triggerTooltip) {
	      var crossStyle = volatileOption.lineStyle = tooltipAxisPointerModel.get('crossStyle');
	      crossStyle && zrUtil.defaults(labelOption, crossStyle.textStyle);
	    }
	  }

	  return axis.model.getModel('axisPointer', new Model(volatileOption, globalAxisPointerModel, ecModel));
	}

	function collectSeriesInfo(result, ecModel) {
	  // Prepare data for axis trigger
	  ecModel.eachSeries(function (seriesModel) {
	    // Notice this case: this coordSys is `cartesian2D` but not `grid`.
	    var coordSys = seriesModel.coordinateSystem;
	    var seriesTooltipTrigger = seriesModel.get('tooltip.trigger', true);
	    var seriesTooltipShow = seriesModel.get('tooltip.show', true);

	    if (!coordSys || seriesTooltipTrigger === 'none' || seriesTooltipTrigger === false || seriesTooltipTrigger === 'item' || seriesTooltipShow === false || seriesModel.get('axisPointer.show', true) === false) {
	      return;
	    }

	    each(result.coordSysAxesInfo[makeKey(coordSys.model)], function (axisInfo) {
	      var axis = axisInfo.axis;

	      if (coordSys.getAxis(axis.dim) === axis) {
	        axisInfo.seriesModels.push(seriesModel);
	        axisInfo.seriesDataCount == null && (axisInfo.seriesDataCount = 0);
	        axisInfo.seriesDataCount += seriesModel.getData().count();
	      }
	    });
	  }, this);
	}
	/**
	 * For example:
	 * {
	 *     axisPointer: {
	 *         links: [{
	 *             xAxisIndex: [2, 4],
	 *             yAxisIndex: 'all'
	 *         }, {
	 *             xAxisId: ['a5', 'a7'],
	 *             xAxisName: 'xxx'
	 *         }]
	 *     }
	 * }
	 */


	function getLinkGroupIndex(linksOption, axis) {
	  var axisModel = axis.model;
	  var dim = axis.dim;

	  for (var i = 0; i < linksOption.length; i++) {
	    var linkOption = linksOption[i] || {};

	    if (checkPropInLink(linkOption[dim + 'AxisId'], axisModel.id) || checkPropInLink(linkOption[dim + 'AxisIndex'], axisModel.componentIndex) || checkPropInLink(linkOption[dim + 'AxisName'], axisModel.name)) {
	      return i;
	    }
	  }
	}

	function checkPropInLink(linkPropValue, axisPropValue) {
	  return linkPropValue === 'all' || zrUtil.isArray(linkPropValue) && zrUtil.indexOf(linkPropValue, axisPropValue) >= 0 || linkPropValue === axisPropValue;
	}

	function fixValue(axisModel) {
	  var axisInfo = getAxisInfo(axisModel);

	  if (!axisInfo) {
	    return;
	  }

	  var axisPointerModel = axisInfo.axisPointerModel;
	  var scale = axisInfo.axis.scale;
	  var option = axisPointerModel.option;
	  var status = axisPointerModel.get('status');
	  var value = axisPointerModel.get('value'); // Parse init value for category and time axis.

	  if (value != null) {
	    value = scale.parse(value);
	  }

	  var useHandle = isHandleTrigger(axisPointerModel); // If `handle` used, `axisPointer` will always be displayed, so value
	  // and status should be initialized.

	  if (status == null) {
	    option.status = useHandle ? 'show' : 'hide';
	  }

	  var extent = scale.getExtent().slice();
	  extent[0] > extent[1] && extent.reverse();

	  if ( // Pick a value on axis when initializing.
	  value == null // If both `handle` and `dataZoom` are used, value may be out of axis extent,
	  // where we should re-pick a value to keep `handle` displaying normally.
	  || value > extent[1]) {
	    // Make handle displayed on the end of the axis when init, which looks better.
	    value = extent[1];
	  }

	  if (value < extent[0]) {
	    value = extent[0];
	  }

	  option.value = value;

	  if (useHandle) {
	    option.status = axisInfo.axis.scale.isBlank() ? 'hide' : 'show';
	  }
	}

	function getAxisInfo(axisModel) {
	  var coordSysAxesInfo = (axisModel.ecModel.getComponent('axisPointer') || {}).coordSysAxesInfo;
	  return coordSysAxesInfo && coordSysAxesInfo.axesInfo[makeKey(axisModel)];
	}

	function getAxisPointerModel(axisModel) {
	  var axisInfo = getAxisInfo(axisModel);
	  return axisInfo && axisInfo.axisPointerModel;
	}

	function isHandleTrigger(axisPointerModel) {
	  return !!axisPointerModel.get('handle.show');
	}
	/**
	 * @param {module:echarts/model/Model} model
	 * @return {string} unique key
	 */


	function makeKey(model) {
	  return model.type + '||' + model.id;
	}

	exports.collect = collect;
	exports.fixValue = fixValue;
	exports.getAxisInfo = getAxisInfo;
	exports.getAxisPointerModel = getAxisPointerModel;
	exports.makeKey = makeKey;

/***/ },
/* 306 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	/**
	 * @param {Object} opt {labelInside}
	 * @return {Object} {
	 *  position, rotation, labelDirection, labelOffset,
	 *  tickDirection, labelRotate, labelInterval, z2
	 * }
	 */
	function layout(gridModel, axisModel, opt) {
	  opt = opt || {};
	  var grid = gridModel.coordinateSystem;
	  var axis = axisModel.axis;
	  var layout = {};
	  var rawAxisPosition = axis.position;
	  var axisPosition = axis.onZero ? 'onZero' : rawAxisPosition;
	  var axisDim = axis.dim;
	  var rect = grid.getRect();
	  var rectBound = [rect.x, rect.x + rect.width, rect.y, rect.y + rect.height];
	  var idx = {
	    left: 0,
	    right: 1,
	    top: 0,
	    bottom: 1,
	    onZero: 2
	  };
	  var axisOffset = axisModel.get('offset') || 0;
	  var posBound = axisDim === 'x' ? [rectBound[2] - axisOffset, rectBound[3] + axisOffset] : [rectBound[0] - axisOffset, rectBound[1] + axisOffset];

	  if (axis.onZero) {
	    var otherAxis = grid.getAxis(axisDim === 'x' ? 'y' : 'x', axis.onZeroAxisIndex);
	    var onZeroCoord = otherAxis.toGlobalCoord(otherAxis.dataToCoord(0));
	    posBound[idx['onZero']] = Math.max(Math.min(onZeroCoord, posBound[1]), posBound[0]);
	  } // Axis position


	  layout.position = [axisDim === 'y' ? posBound[idx[axisPosition]] : rectBound[0], axisDim === 'x' ? posBound[idx[axisPosition]] : rectBound[3]]; // Axis rotation

	  layout.rotation = Math.PI / 2 * (axisDim === 'x' ? 0 : 1); // Tick and label direction, x y is axisDim

	  var dirMap = {
	    top: -1,
	    bottom: 1,
	    left: -1,
	    right: 1
	  };
	  layout.labelDirection = layout.tickDirection = layout.nameDirection = dirMap[rawAxisPosition];
	  layout.labelOffset = axis.onZero ? posBound[idx[rawAxisPosition]] - posBound[idx['onZero']] : 0;

	  if (axisModel.get('axisTick.inside')) {
	    layout.tickDirection = -layout.tickDirection;
	  }

	  if (zrUtil.retrieve(opt.labelInside, axisModel.get('axisLabel.inside'))) {
	    layout.labelDirection = -layout.labelDirection;
	  } // Special label rotation


	  var labelRotate = axisModel.get('axisLabel.rotate');
	  layout.labelRotate = axisPosition === 'top' ? -labelRotate : labelRotate; // label interval when auto mode.

	  layout.labelInterval = axis.getLabelInterval(); // Over splitLine and splitArea

	  layout.z2 = 1;
	  return layout;
	}

	exports.layout = layout;

/***/ },
/* 307 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var zrUtil = __webpack_require__(166);

	var barLayoutGrid = __webpack_require__(308);

	__webpack_require__(293);

	__webpack_require__(309);

	__webpack_require__(311);

	__webpack_require__(292);

	// In case developer forget to include grid component
	echarts.registerLayout(zrUtil.curry(barLayoutGrid, 'bar')); // Visual coding for legend

	echarts.registerVisual(function (ecModel) {
	  ecModel.eachSeriesByType('bar', function (seriesModel) {
	    var data = seriesModel.getData();
	    data.setVisual('legendSymbol', 'roundRect');
	  });
	});

/***/ },
/* 308 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var _number = __webpack_require__(205);

	var parsePercent = _number.parsePercent;
	var STACK_PREFIX = '__ec_stack_';

	function getSeriesStackId(seriesModel) {
	  return seriesModel.get('stack') || STACK_PREFIX + seriesModel.seriesIndex;
	}

	function getAxisKey(axis) {
	  return axis.dim + axis.index;
	}
	/**
	 * @param {Object} opt
	 * @param {module:echarts/coord/Axis} opt.axis Only support category axis currently.
	 * @param {number} opt.count Positive interger.
	 * @param {number} [opt.barWidth]
	 * @param {number} [opt.barMaxWidth]
	 * @param {number} [opt.barGap]
	 * @param {number} [opt.barCategoryGap]
	 * @return {Object} {width, offset, offsetCenter} If axis.type is not 'category', return undefined.
	 */


	function getLayoutOnAxis(opt, api) {
	  var params = [];
	  var baseAxis = opt.axis;
	  var axisKey = 'axis0';

	  if (baseAxis.type !== 'category') {
	    return;
	  }

	  var bandWidth = baseAxis.getBandWidth();

	  for (var i = 0; i < opt.count || 0; i++) {
	    params.push(zrUtil.defaults({
	      bandWidth: bandWidth,
	      axisKey: axisKey,
	      stackId: STACK_PREFIX + i
	    }, opt));
	  }

	  var widthAndOffsets = doCalBarWidthAndOffset(params, api);
	  var result = [];

	  for (var i = 0; i < opt.count; i++) {
	    var item = widthAndOffsets[axisKey][STACK_PREFIX + i];
	    item.offsetCenter = item.offset + item.width / 2;
	    result.push(item);
	  }

	  return result;
	}

	function calBarWidthAndOffset(barSeries, api) {
	  var seriesInfoList = zrUtil.map(barSeries, function (seriesModel) {
	    var data = seriesModel.getData();
	    var cartesian = seriesModel.coordinateSystem;
	    var baseAxis = cartesian.getBaseAxis();
	    var axisExtent = baseAxis.getExtent();
	    var bandWidth = baseAxis.type === 'category' ? baseAxis.getBandWidth() : Math.abs(axisExtent[1] - axisExtent[0]) / data.count();
	    var barWidth = parsePercent(seriesModel.get('barWidth'), bandWidth);
	    var barMaxWidth = parsePercent(seriesModel.get('barMaxWidth'), bandWidth);
	    var barGap = seriesModel.get('barGap');
	    var barCategoryGap = seriesModel.get('barCategoryGap');
	    return {
	      bandWidth: bandWidth,
	      barWidth: barWidth,
	      barMaxWidth: barMaxWidth,
	      barGap: barGap,
	      barCategoryGap: barCategoryGap,
	      axisKey: getAxisKey(baseAxis),
	      stackId: getSeriesStackId(seriesModel)
	    };
	  });
	  return doCalBarWidthAndOffset(seriesInfoList, api);
	}

	function doCalBarWidthAndOffset(seriesInfoList, api) {
	  // Columns info on each category axis. Key is cartesian name
	  var columnsMap = {};
	  zrUtil.each(seriesInfoList, function (seriesInfo, idx) {
	    var axisKey = seriesInfo.axisKey;
	    var bandWidth = seriesInfo.bandWidth;
	    var columnsOnAxis = columnsMap[axisKey] || {
	      bandWidth: bandWidth,
	      remainedWidth: bandWidth,
	      autoWidthCount: 0,
	      categoryGap: '20%',
	      gap: '30%',
	      stacks: {}
	    };
	    var stacks = columnsOnAxis.stacks;
	    columnsMap[axisKey] = columnsOnAxis;
	    var stackId = seriesInfo.stackId;

	    if (!stacks[stackId]) {
	      columnsOnAxis.autoWidthCount++;
	    }

	    stacks[stackId] = stacks[stackId] || {
	      width: 0,
	      maxWidth: 0
	    }; // Caution: In a single coordinate system, these barGrid attributes
	    // will be shared by series. Consider that they have default values,
	    // only the attributes set on the last series will work.
	    // Do not change this fact unless there will be a break change.
	    // TODO

	    var barWidth = seriesInfo.barWidth;

	    if (barWidth && !stacks[stackId].width) {
	      // See #6312, do not restrict width.
	      stacks[stackId].width = barWidth;
	      barWidth = Math.min(columnsOnAxis.remainedWidth, barWidth);
	      columnsOnAxis.remainedWidth -= barWidth;
	    }

	    var barMaxWidth = seriesInfo.barMaxWidth;
	    barMaxWidth && (stacks[stackId].maxWidth = barMaxWidth);
	    var barGap = seriesInfo.barGap;
	    barGap != null && (columnsOnAxis.gap = barGap);
	    var barCategoryGap = seriesInfo.barCategoryGap;
	    barCategoryGap != null && (columnsOnAxis.categoryGap = barCategoryGap);
	  });
	  var result = {};
	  zrUtil.each(columnsMap, function (columnsOnAxis, coordSysName) {
	    result[coordSysName] = {};
	    var stacks = columnsOnAxis.stacks;
	    var bandWidth = columnsOnAxis.bandWidth;
	    var categoryGap = parsePercent(columnsOnAxis.categoryGap, bandWidth);
	    var barGapPercent = parsePercent(columnsOnAxis.gap, 1);
	    var remainedWidth = columnsOnAxis.remainedWidth;
	    var autoWidthCount = columnsOnAxis.autoWidthCount;
	    var autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);
	    autoWidth = Math.max(autoWidth, 0); // Find if any auto calculated bar exceeded maxBarWidth

	    zrUtil.each(stacks, function (column, stack) {
	      var maxWidth = column.maxWidth;

	      if (maxWidth && maxWidth < autoWidth) {
	        maxWidth = Math.min(maxWidth, remainedWidth);

	        if (column.width) {
	          maxWidth = Math.min(maxWidth, column.width);
	        }

	        remainedWidth -= maxWidth;
	        column.width = maxWidth;
	        autoWidthCount--;
	      }
	    }); // Recalculate width again

	    autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);
	    autoWidth = Math.max(autoWidth, 0);
	    var widthSum = 0;
	    var lastColumn;
	    zrUtil.each(stacks, function (column, idx) {
	      if (!column.width) {
	        column.width = autoWidth;
	      }

	      lastColumn = column;
	      widthSum += column.width * (1 + barGapPercent);
	    });

	    if (lastColumn) {
	      widthSum -= lastColumn.width * barGapPercent;
	    }

	    var offset = -widthSum / 2;
	    zrUtil.each(stacks, function (column, stackId) {
	      result[coordSysName][stackId] = result[coordSysName][stackId] || {
	        offset: offset,
	        width: column.width
	      };
	      offset += column.width * (1 + barGapPercent);
	    });
	  });
	  return result;
	}
	/**
	 * @param {string} seriesType
	 * @param {module:echarts/model/Global} ecModel
	 * @param {module:echarts/ExtensionAPI} api
	 */


	function barLayoutGrid(seriesType, ecModel, api) {
	  var barWidthAndOffset = calBarWidthAndOffset(zrUtil.filter(ecModel.getSeriesByType(seriesType), function (seriesModel) {
	    return !ecModel.isSeriesFiltered(seriesModel) && seriesModel.coordinateSystem && seriesModel.coordinateSystem.type === 'cartesian2d';
	  }));
	  var lastStackCoords = {};
	  var lastStackCoordsOrigin = {};
	  ecModel.eachSeriesByType(seriesType, function (seriesModel) {
	    // Check series coordinate, do layout for cartesian2d only
	    if (seriesModel.coordinateSystem.type !== 'cartesian2d') {
	      return;
	    }

	    var data = seriesModel.getData();
	    var cartesian = seriesModel.coordinateSystem;
	    var baseAxis = cartesian.getBaseAxis();
	    var stackId = getSeriesStackId(seriesModel);
	    var columnLayoutInfo = barWidthAndOffset[getAxisKey(baseAxis)][stackId];
	    var columnOffset = columnLayoutInfo.offset;
	    var columnWidth = columnLayoutInfo.width;
	    var valueAxis = cartesian.getOtherAxis(baseAxis);
	    var barMinHeight = seriesModel.get('barMinHeight') || 0;
	    var valueAxisStart = baseAxis.onZero ? valueAxis.toGlobalCoord(valueAxis.dataToCoord(0)) : valueAxis.getGlobalExtent()[0];
	    var coordDims = [seriesModel.coordDimToDataDim('x')[0], seriesModel.coordDimToDataDim('y')[0]];
	    var coords = data.mapArray(coordDims, function (x, y) {
	      return cartesian.dataToPoint([x, y]);
	    }, true);
	    lastStackCoords[stackId] = lastStackCoords[stackId] || [];
	    lastStackCoordsOrigin[stackId] = lastStackCoordsOrigin[stackId] || []; // Fix #4243

	    data.setLayout({
	      offset: columnOffset,
	      size: columnWidth
	    });
	    data.each(seriesModel.coordDimToDataDim(valueAxis.dim)[0], function (value, idx) {
	      if (isNaN(value)) {
	        return;
	      }

	      if (!lastStackCoords[stackId][idx]) {
	        lastStackCoords[stackId][idx] = {
	          p: valueAxisStart,
	          // Positive stack
	          n: valueAxisStart // Negative stack

	        };
	        lastStackCoordsOrigin[stackId][idx] = {
	          p: valueAxisStart,
	          // Positive stack
	          n: valueAxisStart // Negative stack

	        };
	      }

	      var sign = value >= 0 ? 'p' : 'n';
	      var coord = coords[idx];
	      var lastCoord = lastStackCoords[stackId][idx][sign];
	      var lastCoordOrigin = lastStackCoordsOrigin[stackId][idx][sign];
	      var x;
	      var y;
	      var width;
	      var height;

	      if (valueAxis.isHorizontal()) {
	        x = lastCoord;
	        y = coord[1] + columnOffset;
	        width = coord[0] - lastCoordOrigin;
	        height = columnWidth;
	        lastStackCoordsOrigin[stackId][idx][sign] += width;

	        if (Math.abs(width) < barMinHeight) {
	          width = (width < 0 ? -1 : 1) * barMinHeight;
	        }

	        lastStackCoords[stackId][idx][sign] += width;
	      } else {
	        x = coord[0] + columnOffset;
	        y = lastCoord;
	        width = columnWidth;
	        height = coord[1] - lastCoordOrigin;
	        lastStackCoordsOrigin[stackId][idx][sign] += height;

	        if (Math.abs(height) < barMinHeight) {
	          // Include zero to has a positive bar
	          height = (height <= 0 ? -1 : 1) * barMinHeight;
	        }

	        lastStackCoords[stackId][idx][sign] += height;
	      }

	      data.setItemLayout(idx, {
	        x: x,
	        y: y,
	        width: width,
	        height: height
	      });
	    }, true);
	  }, this);
	}

	barLayoutGrid.getLayoutOnAxis = getLayoutOnAxis;
	var _default = barLayoutGrid;
	module.exports = _default;

/***/ },
/* 309 */
/***/ function(module, exports, __webpack_require__) {

	var BaseBarSeries = __webpack_require__(310);

	var _default = BaseBarSeries.extend({
	  type: 'series.bar',
	  dependencies: ['grid', 'polar'],
	  brushSelector: 'rect'
	});

	module.exports = _default;

/***/ },
/* 310 */
/***/ function(module, exports, __webpack_require__) {

	var SeriesModel = __webpack_require__(256);

	var createListFromArray = __webpack_require__(264);

	var _default = SeriesModel.extend({
	  type: 'series.__base_bar__',
	  getInitialData: function (option, ecModel) {
	    return createListFromArray(option.data, this, ecModel);
	  },
	  getMarkerPosition: function (value) {
	    var coordSys = this.coordinateSystem;

	    if (coordSys) {
	      // PENDING if clamp ?
	      var pt = coordSys.dataToPoint(value, true);
	      var data = this.getData();
	      var offset = data.getLayout('offset');
	      var size = data.getLayout('size');
	      var offsetIndex = coordSys.getBaseAxis().isHorizontal() ? 0 : 1;
	      pt[offsetIndex] += offset + size / 2;
	      return pt;
	    }

	    return [NaN, NaN];
	  },
	  defaultOption: {
	    zlevel: 0,
	    // 一级层叠
	    z: 2,
	    // 二级层叠
	    coordinateSystem: 'cartesian2d',
	    legendHoverLink: true,
	    // stack: null
	    // Cartesian coordinate system
	    // xAxisIndex: 0,
	    // yAxisIndex: 0,
	    // 最小高度改为0
	    barMinHeight: 0,
	    // 最小角度为0，仅对极坐标系下的柱状图有效
	    barMinAngle: 0,
	    // cursor: null,
	    // barMaxWidth: null,
	    // 默认自适应
	    // barWidth: null,
	    // 柱间距离，默认为柱形宽度的30%，可设固定值
	    // barGap: '30%',
	    // 类目间柱形距离，默认为类目间距的20%，可设固定值
	    // barCategoryGap: '20%',
	    // label: {
	    //     normal: {
	    //         show: false
	    //     }
	    // },
	    itemStyle: {// normal: {
	      // color: '各异'
	      // },
	      // emphasis: {}
	    }
	  }
	});

	module.exports = _default;

/***/ },
/* 311 */
/***/ function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(162);

	var __DEV__ = _config.__DEV__;

	var echarts = __webpack_require__(161);

	var zrUtil = __webpack_require__(166);

	var graphic = __webpack_require__(212);

	var _helper = __webpack_require__(312);

	var setLabel = _helper.setLabel;

	var Model = __webpack_require__(206);

	var barItemStyle = __webpack_require__(313);

	var BAR_BORDER_WIDTH_QUERY = ['itemStyle', 'normal', 'barBorderWidth']; // FIXME
	// Just for compatible with ec2.

	zrUtil.extend(Model.prototype, barItemStyle);

	var _default = echarts.extendChartView({
	  type: 'bar',
	  render: function (seriesModel, ecModel, api) {
	    var coordinateSystemType = seriesModel.get('coordinateSystem');

	    if (coordinateSystemType === 'cartesian2d' || coordinateSystemType === 'polar') {
	      this._render(seriesModel, ecModel, api);
	    } else {}

	    return this.group;
	  },
	  dispose: zrUtil.noop,
	  _render: function (seriesModel, ecModel, api) {
	    var group = this.group;
	    var data = seriesModel.getData();
	    var oldData = this._data;
	    var coord = seriesModel.coordinateSystem;
	    var baseAxis = coord.getBaseAxis();
	    var isHorizontalOrRadial;

	    if (coord.type === 'cartesian2d') {
	      isHorizontalOrRadial = baseAxis.isHorizontal();
	    } else if (coord.type === 'polar') {
	      isHorizontalOrRadial = baseAxis.dim === 'angle';
	    }

	    var animationModel = seriesModel.isAnimationEnabled() ? seriesModel : null;
	    data.diff(oldData).add(function (dataIndex) {
	      if (!data.hasValue(dataIndex)) {
	        return;
	      }

	      var itemModel = data.getItemModel(dataIndex);
	      var layout = getLayout[coord.type](data, dataIndex, itemModel);
	      var el = elementCreator[coord.type](data, dataIndex, itemModel, layout, isHorizontalOrRadial, animationModel);
	      data.setItemGraphicEl(dataIndex, el);
	      group.add(el);
	      updateStyle(el, data, dataIndex, itemModel, layout, seriesModel, isHorizontalOrRadial, coord.type === 'polar');
	    }).update(function (newIndex, oldIndex) {
	      var el = oldData.getItemGraphicEl(oldIndex);

	      if (!data.hasValue(newIndex)) {
	        group.remove(el);
	        return;
	      }

	      var itemModel = data.getItemModel(newIndex);
	      var layout = getLayout[coord.type](data, newIndex, itemModel);

	      if (el) {
	        graphic.updateProps(el, {
	          shape: layout
	        }, animationModel, newIndex);
	      } else {
	        el = elementCreator[coord.type](data, newIndex, itemModel, layout, isHorizontalOrRadial, animationModel, true);
	      }

	      data.setItemGraphicEl(newIndex, el); // Add back

	      group.add(el);
	      updateStyle(el, data, newIndex, itemModel, layout, seriesModel, isHorizontalOrRadial, coord.type === 'polar');
	    }).remove(function (dataIndex) {
	      var el = oldData.getItemGraphicEl(dataIndex);

	      if (coord.type === 'cartesian2d') {
	        el && removeRect(dataIndex, animationModel, el);
	      } else {
	        el && removeSector(dataIndex, animationModel, el);
	      }
	    }).execute();
	    this._data = data;
	  },
	  remove: function (ecModel, api) {
	    var group = this.group;
	    var data = this._data;

	    if (ecModel.get('animation')) {
	      if (data) {
	        data.eachItemGraphicEl(function (el) {
	          if (el.type === 'sector') {
	            removeSector(el.dataIndex, ecModel, el);
	          } else {
	            removeRect(el.dataIndex, ecModel, el);
	          }
	        });
	      }
	    } else {
	      group.removeAll();
	    }
	  }
	});

	var elementCreator = {
	  cartesian2d: function (data, dataIndex, itemModel, layout, isHorizontal, animationModel, isUpdate) {
	    var rect = new graphic.Rect({
	      shape: zrUtil.extend({}, layout)
	    }); // Animation

	    if (animationModel) {
	      var rectShape = rect.shape;
	      var animateProperty = isHorizontal ? 'height' : 'width';
	      var animateTarget = {};
	      rectShape[animateProperty] = 0;
	      animateTarget[animateProperty] = layout[animateProperty];
	      graphic[isUpdate ? 'updateProps' : 'initProps'](rect, {
	        shape: animateTarget
	      }, animationModel, dataIndex);
	    }

	    return rect;
	  },
	  polar: function (data, dataIndex, itemModel, layout, isRadial, animationModel, isUpdate) {
	    var sector = new graphic.Sector({
	      shape: zrUtil.extend({}, layout)
	    }); // Animation

	    if (animationModel) {
	      var sectorShape = sector.shape;
	      var animateProperty = isRadial ? 'r' : 'endAngle';
	      var animateTarget = {};
	      sectorShape[animateProperty] = isRadial ? 0 : layout.startAngle;
	      animateTarget[animateProperty] = layout[animateProperty];
	      graphic[isUpdate ? 'updateProps' : 'initProps'](sector, {
	        shape: animateTarget
	      }, animationModel, dataIndex);
	    }

	    return sector;
	  }
	};

	function removeRect(dataIndex, animationModel, el) {
	  // Not show text when animating
	  el.style.text = null;
	  graphic.updateProps(el, {
	    shape: {
	      width: 0
	    }
	  }, animationModel, dataIndex, function () {
	    el.parent && el.parent.remove(el);
	  });
	}

	function removeSector(dataIndex, animationModel, el) {
	  // Not show text when animating
	  el.style.text = null;
	  graphic.updateProps(el, {
	    shape: {
	      r: el.shape.r0
	    }
	  }, animationModel, dataIndex, function () {
	    el.parent && el.parent.remove(el);
	  });
	}

	var getLayout = {
	  cartesian2d: function (data, dataIndex, itemModel) {
	    var layout = data.getItemLayout(dataIndex);
	    var fixedLineWidth = getLineWidth(itemModel, layout); // fix layout with lineWidth

	    var signX = layout.width > 0 ? 1 : -1;
	    var signY = layout.height > 0 ? 1 : -1;
	    return {
	      x: layout.x + signX * fixedLineWidth / 2,
	      y: layout.y + signY * fixedLineWidth / 2,
	      width: layout.width - signX * fixedLineWidth,
	      height: layout.height - signY * fixedLineWidth
	    };
	  },
	  polar: function (data, dataIndex, itemModel) {
	    var layout = data.getItemLayout(dataIndex);
	    return {
	      cx: layout.cx,
	      cy: layout.cy,
	      r0: layout.r0,
	      r: layout.r,
	      startAngle: layout.startAngle,
	      endAngle: layout.endAngle
	    };
	  }
	};

	function updateStyle(el, data, dataIndex, itemModel, layout, seriesModel, isHorizontal, isPolar) {
	  var color = data.getItemVisual(dataIndex, 'color');
	  var opacity = data.getItemVisual(dataIndex, 'opacity');
	  var itemStyleModel = itemModel.getModel('itemStyle.normal');
	  var hoverStyle = itemModel.getModel('itemStyle.emphasis').getBarItemStyle();

	  if (!isPolar) {
	    el.setShape('r', itemStyleModel.get('barBorderRadius') || 0);
	  }

	  el.useStyle(zrUtil.defaults({
	    fill: color,
	    opacity: opacity
	  }, itemStyleModel.getBarItemStyle()));
	  var cursorStyle = itemModel.getShallow('cursor');
	  cursorStyle && el.attr('cursor', cursorStyle);
	  var labelPositionOutside = isHorizontal ? layout.height > 0 ? 'bottom' : 'top' : layout.width > 0 ? 'left' : 'right';

	  if (!isPolar) {
	    setLabel(el.style, hoverStyle, itemModel, color, seriesModel, dataIndex, labelPositionOutside);
	  }

	  graphic.setHoverStyle(el, hoverStyle);
	} // In case width or height are too small.


	function getLineWidth(itemModel, rawLayout) {
	  var lineWidth = itemModel.get(BAR_BORDER_WIDTH_QUERY) || 0;
	  return Math.min(lineWidth, Math.abs(rawLayout.width), Math.abs(rawLayout.height));
	}

	module.exports = _default;

/***/ },
/* 312 */
/***/ function(module, exports, __webpack_require__) {

	var graphic = __webpack_require__(212);

	function setLabel(normalStyle, hoverStyle, itemModel, color, seriesModel, dataIndex, labelPositionOutside) {
	  var labelModel = itemModel.getModel('label.normal');
	  var hoverLabelModel = itemModel.getModel('label.emphasis');
	  graphic.setLabelStyle(normalStyle, hoverStyle, labelModel, hoverLabelModel, {
	    labelFetcher: seriesModel,
	    labelDataIndex: dataIndex,
	    defaultText: seriesModel.getRawValue(dataIndex),
	    isRectText: true,
	    autoColor: color
	  });
	  fixPosition(normalStyle);
	  fixPosition(hoverStyle);
	}

	function fixPosition(style, labelPositionOutside) {
	  if (style.textPosition === 'outside') {
	    style.textPosition = labelPositionOutside;
	  }
	}

	exports.setLabel = setLabel;

/***/ },
/* 313 */
/***/ function(module, exports, __webpack_require__) {

	var makeStyleMapper = __webpack_require__(209);

	var getBarItemStyle = makeStyleMapper([['fill', 'color'], ['stroke', 'borderColor'], ['lineWidth', 'borderWidth'], // Compatitable with 2
	['stroke', 'barBorderColor'], ['lineWidth', 'barBorderWidth'], ['opacity'], ['shadowBlur'], ['shadowOffsetX'], ['shadowOffsetY'], ['shadowColor']]);
	var _default = {
	  getBarItemStyle: function (excludes) {
	    var style = getBarItemStyle(this, excludes);

	    if (this.getBorderLineDash) {
	      var lineDash = this.getBorderLineDash();
	      lineDash && (style.lineDash = lineDash);
	    }

	    return style;
	  }
	};
	module.exports = _default;

/***/ },
/* 314 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var zrUtil = __webpack_require__(166);

	__webpack_require__(315);

	__webpack_require__(317);

	var createDataSelectAction = __webpack_require__(318);

	var dataColor = __webpack_require__(319);

	var pieLayout = __webpack_require__(320);

	var dataFilter = __webpack_require__(322);

	createDataSelectAction('pie', [{
	  type: 'pieToggleSelect',
	  event: 'pieselectchanged',
	  method: 'toggleSelected'
	}, {
	  type: 'pieSelect',
	  event: 'pieselected',
	  method: 'select'
	}, {
	  type: 'pieUnSelect',
	  event: 'pieunselected',
	  method: 'unSelect'
	}]);
	echarts.registerVisual(zrUtil.curry(dataColor, 'pie'));
	echarts.registerLayout(zrUtil.curry(pieLayout, 'pie'));
	echarts.registerProcessor(zrUtil.curry(dataFilter, 'pie'));

/***/ },
/* 315 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var List = __webpack_require__(265);

	var zrUtil = __webpack_require__(166);

	var modelUtil = __webpack_require__(203);

	var _number = __webpack_require__(205);

	var getPercentWithPrecision = _number.getPercentWithPrecision;

	var completeDimensions = __webpack_require__(267);

	var dataSelectableMixin = __webpack_require__(316);

	var PieSeries = echarts.extendSeriesModel({
	  type: 'series.pie',
	  // Overwrite
	  init: function (option) {
	    PieSeries.superApply(this, 'init', arguments); // Enable legend selection for each data item
	    // Use a function instead of direct access because data reference may changed

	    this.legendDataProvider = function () {
	      return this.getRawData();
	    };

	    this.updateSelectedMap(option.data);

	    this._defaultLabelLine(option);
	  },
	  // Overwrite
	  mergeOption: function (newOption) {
	    PieSeries.superCall(this, 'mergeOption', newOption);
	    this.updateSelectedMap(this.option.data);
	  },
	  getInitialData: function (option, ecModel) {
	    var dimensions = completeDimensions(['value'], option.data);
	    var list = new List(dimensions, this);
	    list.initData(option.data);
	    return list;
	  },
	  // Overwrite
	  getDataParams: function (dataIndex) {
	    var data = this.getData();
	    var params = PieSeries.superCall(this, 'getDataParams', dataIndex); // FIXME toFixed?

	    var valueList = [];
	    data.each('value', function (value) {
	      valueList.push(value);
	    });
	    params.percent = getPercentWithPrecision(valueList, dataIndex, data.hostModel.get('percentPrecision'));
	    params.$vars.push('percent');
	    return params;
	  },
	  _defaultLabelLine: function (option) {
	    // Extend labelLine emphasis
	    modelUtil.defaultEmphasis(option.labelLine, ['show']);
	    var labelLineNormalOpt = option.labelLine.normal;
	    var labelLineEmphasisOpt = option.labelLine.emphasis; // Not show label line if `label.normal.show = false`

	    labelLineNormalOpt.show = labelLineNormalOpt.show && option.label.normal.show;
	    labelLineEmphasisOpt.show = labelLineEmphasisOpt.show && option.label.emphasis.show;
	  },
	  defaultOption: {
	    zlevel: 0,
	    z: 2,
	    legendHoverLink: true,
	    hoverAnimation: true,
	    // 默认全局居中
	    center: ['50%', '50%'],
	    radius: [0, '75%'],
	    // 默认顺时针
	    clockwise: true,
	    startAngle: 90,
	    // 最小角度改为0
	    minAngle: 0,
	    // 选中时扇区偏移量
	    selectedOffset: 10,
	    // 高亮扇区偏移量
	    hoverOffset: 10,
	    // If use strategy to avoid label overlapping
	    avoidLabelOverlap: true,
	    // 选择模式，默认关闭，可选single，multiple
	    // selectedMode: false,
	    // 南丁格尔玫瑰图模式，'radius'（半径） | 'area'（面积）
	    // roseType: null,
	    percentPrecision: 2,
	    // If still show when all data zero.
	    stillShowZeroSum: true,
	    // cursor: null,
	    label: {
	      normal: {
	        // If rotate around circle
	        rotate: false,
	        show: true,
	        // 'outer', 'inside', 'center'
	        position: 'outer' // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调
	        // 默认使用全局文本样式，详见TEXTSTYLE
	        // distance: 当position为inner时有效，为label位置到圆心的距离与圆半径(环状图为内外半径和)的比例系数

	      },
	      emphasis: {}
	    },
	    // Enabled when label.normal.position is 'outer'
	    labelLine: {
	      normal: {
	        show: true,
	        // 引导线两段中的第一段长度
	        length: 15,
	        // 引导线两段中的第二段长度
	        length2: 15,
	        smooth: false,
	        lineStyle: {
	          // color: 各异,
	          width: 1,
	          type: 'solid'
	        }
	      }
	    },
	    itemStyle: {
	      normal: {
	        borderWidth: 1
	      },
	      emphasis: {}
	    },
	    // Animation type canbe expansion, scale
	    animationType: 'expansion',
	    animationEasing: 'cubicOut',
	    data: []
	  }
	});
	zrUtil.mixin(PieSeries, dataSelectableMixin);
	var _default = PieSeries;
	module.exports = _default;

/***/ },
/* 316 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	/**
	 * Data selectable mixin for chart series.
	 * To eanble data select, option of series must have `selectedMode`.
	 * And each data item will use `selected` to toggle itself selected status
	 */
	var _default = {
	  updateSelectedMap: function (targetList) {
	    this._targetList = targetList.slice();
	    this._selectTargetMap = zrUtil.reduce(targetList || [], function (targetMap, target) {
	      targetMap.set(target.name, target);
	      return targetMap;
	    }, zrUtil.createHashMap());
	  },

	  /**
	   * Either name or id should be passed as input here.
	   * If both of them are defined, id is used.
	   *
	   * @param {string|undefined} name name of data
	   * @param {number|undefined} id dataIndex of data
	   */
	  // PENGING If selectedMode is null ?
	  select: function (name, id) {
	    var target = id != null ? this._targetList[id] : this._selectTargetMap.get(name);
	    var selectedMode = this.get('selectedMode');

	    if (selectedMode === 'single') {
	      this._selectTargetMap.each(function (target) {
	        target.selected = false;
	      });
	    }

	    target && (target.selected = true);
	  },

	  /**
	   * Either name or id should be passed as input here.
	   * If both of them are defined, id is used.
	   *
	   * @param {string|undefined} name name of data
	   * @param {number|undefined} id dataIndex of data
	   */
	  unSelect: function (name, id) {
	    var target = id != null ? this._targetList[id] : this._selectTargetMap.get(name); // var selectedMode = this.get('selectedMode');
	    // selectedMode !== 'single' && target && (target.selected = false);

	    target && (target.selected = false);
	  },

	  /**
	   * Either name or id should be passed as input here.
	   * If both of them are defined, id is used.
	   *
	   * @param {string|undefined} name name of data
	   * @param {number|undefined} id dataIndex of data
	   */
	  toggleSelected: function (name, id) {
	    var target = id != null ? this._targetList[id] : this._selectTargetMap.get(name);

	    if (target != null) {
	      this[target.selected ? 'unSelect' : 'select'](name, id);
	      return target.selected;
	    }
	  },

	  /**
	   * Either name or id should be passed as input here.
	   * If both of them are defined, id is used.
	   *
	   * @param {string|undefined} name name of data
	   * @param {number|undefined} id dataIndex of data
	   */
	  isSelected: function (name, id) {
	    var target = id != null ? this._targetList[id] : this._selectTargetMap.get(name);
	    return target && target.selected;
	  }
	};
	module.exports = _default;

/***/ },
/* 317 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var graphic = __webpack_require__(212);

	var ChartView = __webpack_require__(258);

	/**
	 * @param {module:echarts/model/Series} seriesModel
	 * @param {boolean} hasAnimation
	 * @inner
	 */
	function updateDataSelected(uid, seriesModel, hasAnimation, api) {
	  var data = seriesModel.getData();
	  var dataIndex = this.dataIndex;
	  var name = data.getName(dataIndex);
	  var selectedOffset = seriesModel.get('selectedOffset');
	  api.dispatchAction({
	    type: 'pieToggleSelect',
	    from: uid,
	    name: name,
	    seriesId: seriesModel.id
	  });
	  data.each(function (idx) {
	    toggleItemSelected(data.getItemGraphicEl(idx), data.getItemLayout(idx), seriesModel.isSelected(data.getName(idx)), selectedOffset, hasAnimation);
	  });
	}
	/**
	 * @param {module:zrender/graphic/Sector} el
	 * @param {Object} layout
	 * @param {boolean} isSelected
	 * @param {number} selectedOffset
	 * @param {boolean} hasAnimation
	 * @inner
	 */


	function toggleItemSelected(el, layout, isSelected, selectedOffset, hasAnimation) {
	  var midAngle = (layout.startAngle + layout.endAngle) / 2;
	  var dx = Math.cos(midAngle);
	  var dy = Math.sin(midAngle);
	  var offset = isSelected ? selectedOffset : 0;
	  var position = [dx * offset, dy * offset];
	  hasAnimation // animateTo will stop revious animation like update transition
	  ? el.animate().when(200, {
	    position: position
	  }).start('bounceOut') : el.attr('position', position);
	}
	/**
	 * Piece of pie including Sector, Label, LabelLine
	 * @constructor
	 * @extends {module:zrender/graphic/Group}
	 */


	function PiePiece(data, idx) {
	  graphic.Group.call(this);
	  var sector = new graphic.Sector({
	    z2: 2
	  });
	  var polyline = new graphic.Polyline();
	  var text = new graphic.Text();
	  this.add(sector);
	  this.add(polyline);
	  this.add(text);
	  this.updateData(data, idx, true); // Hover to change label and labelLine

	  function onEmphasis() {
	    polyline.ignore = polyline.hoverIgnore;
	    text.ignore = text.hoverIgnore;
	  }

	  function onNormal() {
	    polyline.ignore = polyline.normalIgnore;
	    text.ignore = text.normalIgnore;
	  }

	  this.on('emphasis', onEmphasis).on('normal', onNormal).on('mouseover', onEmphasis).on('mouseout', onNormal);
	}

	var piePieceProto = PiePiece.prototype;

	piePieceProto.updateData = function (data, idx, firstCreate) {
	  var sector = this.childAt(0);
	  var seriesModel = data.hostModel;
	  var itemModel = data.getItemModel(idx);
	  var layout = data.getItemLayout(idx);
	  var sectorShape = zrUtil.extend({}, layout);
	  sectorShape.label = null;

	  if (firstCreate) {
	    sector.setShape(sectorShape);
	    var animationType = seriesModel.getShallow('animationType');

	    if (animationType === 'scale') {
	      sector.shape.r = layout.r0;
	      graphic.initProps(sector, {
	        shape: {
	          r: layout.r
	        }
	      }, seriesModel, idx);
	    } // Expansion
	    else {
	        sector.shape.endAngle = layout.startAngle;
	        graphic.updateProps(sector, {
	          shape: {
	            endAngle: layout.endAngle
	          }
	        }, seriesModel, idx);
	      }
	  } else {
	    graphic.updateProps(sector, {
	      shape: sectorShape
	    }, seriesModel, idx);
	  } // Update common style


	  var itemStyleModel = itemModel.getModel('itemStyle');
	  var visualColor = data.getItemVisual(idx, 'color');
	  sector.useStyle(zrUtil.defaults({
	    lineJoin: 'bevel',
	    fill: visualColor
	  }, itemStyleModel.getModel('normal').getItemStyle()));
	  sector.hoverStyle = itemStyleModel.getModel('emphasis').getItemStyle();
	  var cursorStyle = itemModel.getShallow('cursor');
	  cursorStyle && sector.attr('cursor', cursorStyle); // Toggle selected

	  toggleItemSelected(this, data.getItemLayout(idx), itemModel.get('selected'), seriesModel.get('selectedOffset'), seriesModel.get('animation'));

	  function onEmphasis() {
	    // Sector may has animation of updating data. Force to move to the last frame
	    // Or it may stopped on the wrong shape
	    sector.stopAnimation(true);
	    sector.animateTo({
	      shape: {
	        r: layout.r + seriesModel.get('hoverOffset')
	      }
	    }, 300, 'elasticOut');
	  }

	  function onNormal() {
	    sector.stopAnimation(true);
	    sector.animateTo({
	      shape: {
	        r: layout.r
	      }
	    }, 300, 'elasticOut');
	  }

	  sector.off('mouseover').off('mouseout').off('emphasis').off('normal');

	  if (itemModel.get('hoverAnimation') && seriesModel.isAnimationEnabled()) {
	    sector.on('mouseover', onEmphasis).on('mouseout', onNormal).on('emphasis', onEmphasis).on('normal', onNormal);
	  }

	  this._updateLabel(data, idx);

	  graphic.setHoverStyle(this);
	};

	piePieceProto._updateLabel = function (data, idx) {
	  var labelLine = this.childAt(1);
	  var labelText = this.childAt(2);
	  var seriesModel = data.hostModel;
	  var itemModel = data.getItemModel(idx);
	  var layout = data.getItemLayout(idx);
	  var labelLayout = layout.label;
	  var visualColor = data.getItemVisual(idx, 'color');
	  graphic.updateProps(labelLine, {
	    shape: {
	      points: labelLayout.linePoints || [[labelLayout.x, labelLayout.y], [labelLayout.x, labelLayout.y], [labelLayout.x, labelLayout.y]]
	    }
	  }, seriesModel, idx);
	  graphic.updateProps(labelText, {
	    style: {
	      x: labelLayout.x,
	      y: labelLayout.y
	    }
	  }, seriesModel, idx);
	  labelText.attr({
	    rotation: labelLayout.rotation,
	    origin: [labelLayout.x, labelLayout.y],
	    z2: 10
	  });
	  var labelModel = itemModel.getModel('label.normal');
	  var labelHoverModel = itemModel.getModel('label.emphasis');
	  var labelLineModel = itemModel.getModel('labelLine.normal');
	  var labelLineHoverModel = itemModel.getModel('labelLine.emphasis');
	  var visualColor = data.getItemVisual(idx, 'color');
	  graphic.setLabelStyle(labelText.style, labelText.hoverStyle = {}, labelModel, labelHoverModel, {
	    labelFetcher: data.hostModel,
	    labelDataIndex: idx,
	    defaultText: data.getName(idx),
	    autoColor: visualColor,
	    useInsideStyle: !!labelLayout.inside
	  }, {
	    textAlign: labelLayout.textAlign,
	    textVerticalAlign: labelLayout.verticalAlign,
	    opacity: data.getItemVisual(idx, 'opacity')
	  });
	  labelText.ignore = labelText.normalIgnore = !labelModel.get('show');
	  labelText.hoverIgnore = !labelHoverModel.get('show');
	  labelLine.ignore = labelLine.normalIgnore = !labelLineModel.get('show');
	  labelLine.hoverIgnore = !labelLineHoverModel.get('show'); // Default use item visual color

	  labelLine.setStyle({
	    stroke: visualColor,
	    opacity: data.getItemVisual(idx, 'opacity')
	  });
	  labelLine.setStyle(labelLineModel.getModel('lineStyle').getLineStyle());
	  labelLine.hoverStyle = labelLineHoverModel.getModel('lineStyle').getLineStyle();
	  var smooth = labelLineModel.get('smooth');

	  if (smooth && smooth === true) {
	    smooth = 0.4;
	  }

	  labelLine.setShape({
	    smooth: smooth
	  });
	};

	zrUtil.inherits(PiePiece, graphic.Group); // Pie view

	var PieView = ChartView.extend({
	  type: 'pie',
	  init: function () {
	    var sectorGroup = new graphic.Group();
	    this._sectorGroup = sectorGroup;
	  },
	  render: function (seriesModel, ecModel, api, payload) {
	    if (payload && payload.from === this.uid) {
	      return;
	    }

	    var data = seriesModel.getData();
	    var oldData = this._data;
	    var group = this.group;
	    var hasAnimation = ecModel.get('animation');
	    var isFirstRender = !oldData;
	    var animationType = seriesModel.get('animationType');
	    var onSectorClick = zrUtil.curry(updateDataSelected, this.uid, seriesModel, hasAnimation, api);
	    var selectedMode = seriesModel.get('selectedMode');
	    data.diff(oldData).add(function (idx) {
	      var piePiece = new PiePiece(data, idx); // Default expansion animation

	      if (isFirstRender && animationType !== 'scale') {
	        piePiece.eachChild(function (child) {
	          child.stopAnimation(true);
	        });
	      }

	      selectedMode && piePiece.on('click', onSectorClick);
	      data.setItemGraphicEl(idx, piePiece);
	      group.add(piePiece);
	    }).update(function (newIdx, oldIdx) {
	      var piePiece = oldData.getItemGraphicEl(oldIdx);
	      piePiece.updateData(data, newIdx);
	      piePiece.off('click');
	      selectedMode && piePiece.on('click', onSectorClick);
	      group.add(piePiece);
	      data.setItemGraphicEl(newIdx, piePiece);
	    }).remove(function (idx) {
	      var piePiece = oldData.getItemGraphicEl(idx);
	      group.remove(piePiece);
	    }).execute();

	    if (hasAnimation && isFirstRender && data.count() > 0 // Default expansion animation
	    && animationType !== 'scale') {
	      var shape = data.getItemLayout(0);
	      var r = Math.max(api.getWidth(), api.getHeight()) / 2;
	      var removeClipPath = zrUtil.bind(group.removeClipPath, group);
	      group.setClipPath(this._createClipPath(shape.cx, shape.cy, r, shape.startAngle, shape.clockwise, removeClipPath, seriesModel));
	    }

	    this._data = data;
	  },
	  dispose: function () {},
	  _createClipPath: function (cx, cy, r, startAngle, clockwise, cb, seriesModel) {
	    var clipPath = new graphic.Sector({
	      shape: {
	        cx: cx,
	        cy: cy,
	        r0: 0,
	        r: r,
	        startAngle: startAngle,
	        endAngle: startAngle,
	        clockwise: clockwise
	      }
	    });
	    graphic.initProps(clipPath, {
	      shape: {
	        endAngle: startAngle + (clockwise ? 1 : -1) * Math.PI * 2
	      }
	    }, seriesModel, cb);
	    return clipPath;
	  },

	  /**
	   * @implement
	   */
	  containPoint: function (point, seriesModel) {
	    var data = seriesModel.getData();
	    var itemLayout = data.getItemLayout(0);

	    if (itemLayout) {
	      var dx = point[0] - itemLayout.cx;
	      var dy = point[1] - itemLayout.cy;
	      var radius = Math.sqrt(dx * dx + dy * dy);
	      return radius <= itemLayout.r && radius >= itemLayout.r0;
	    }
	  }
	});
	var _default = PieView;
	module.exports = _default;

/***/ },
/* 318 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var zrUtil = __webpack_require__(166);

	function _default(seriesType, actionInfos) {
	  zrUtil.each(actionInfos, function (actionInfo) {
	    actionInfo.update = 'updateView';
	    /**
	     * @payload
	     * @property {string} seriesName
	     * @property {string} name
	     */

	    echarts.registerAction(actionInfo, function (payload, ecModel) {
	      var selected = {};
	      ecModel.eachComponent({
	        mainType: 'series',
	        subType: seriesType,
	        query: payload
	      }, function (seriesModel) {
	        if (seriesModel[actionInfo.method]) {
	          seriesModel[actionInfo.method](payload.name, payload.dataIndex);
	        }

	        var data = seriesModel.getData(); // Create selected map

	        data.each(function (idx) {
	          var name = data.getName(idx);
	          selected[name] = seriesModel.isSelected(name) || false;
	        });
	      });
	      return {
	        name: payload.name,
	        selected: selected
	      };
	    });
	  });
	}

	module.exports = _default;

/***/ },
/* 319 */
/***/ function(module, exports) {

	// Pick color from palette for each data item.
	// Applicable for charts that require applying color palette
	// in data level (like pie, funnel, chord).
	function _default(seriesType, ecModel) {
	  // Pie and funnel may use diferrent scope
	  var paletteScope = {};
	  ecModel.eachRawSeriesByType(seriesType, function (seriesModel) {
	    var dataAll = seriesModel.getRawData();
	    var idxMap = {};

	    if (!ecModel.isSeriesFiltered(seriesModel)) {
	      var data = seriesModel.getData();
	      data.each(function (idx) {
	        var rawIdx = data.getRawIndex(idx);
	        idxMap[rawIdx] = idx;
	      });
	      dataAll.each(function (rawIdx) {
	        var filteredIdx = idxMap[rawIdx]; // If series.itemStyle.normal.color is a function. itemVisual may be encoded

	        var singleDataColor = filteredIdx != null && data.getItemVisual(filteredIdx, 'color', true);

	        if (!singleDataColor) {
	          // FIXME Performance
	          var itemModel = dataAll.getItemModel(rawIdx);
	          var color = itemModel.get('itemStyle.normal.color') || seriesModel.getColorFromPalette(dataAll.getName(rawIdx), paletteScope); // Legend may use the visual info in data before processed

	          dataAll.setItemVisual(rawIdx, 'color', color); // Data is not filtered

	          if (filteredIdx != null) {
	            data.setItemVisual(filteredIdx, 'color', color);
	          }
	        } else {
	          // Set data all color for legend
	          dataAll.setItemVisual(rawIdx, 'color', singleDataColor);
	        }
	      });
	    }
	  });
	}

	module.exports = _default;

/***/ },
/* 320 */
/***/ function(module, exports, __webpack_require__) {

	var _number = __webpack_require__(205);

	var parsePercent = _number.parsePercent;
	var linearMap = _number.linearMap;

	var labelLayout = __webpack_require__(321);

	var zrUtil = __webpack_require__(166);

	var PI2 = Math.PI * 2;
	var RADIAN = Math.PI / 180;

	function _default(seriesType, ecModel, api, payload) {
	  ecModel.eachSeriesByType(seriesType, function (seriesModel) {
	    var center = seriesModel.get('center');
	    var radius = seriesModel.get('radius');

	    if (!zrUtil.isArray(radius)) {
	      radius = [0, radius];
	    }

	    if (!zrUtil.isArray(center)) {
	      center = [center, center];
	    }

	    var width = api.getWidth();
	    var height = api.getHeight();
	    var size = Math.min(width, height);
	    var cx = parsePercent(center[0], width);
	    var cy = parsePercent(center[1], height);
	    var r0 = parsePercent(radius[0], size / 2);
	    var r = parsePercent(radius[1], size / 2);
	    var data = seriesModel.getData();
	    var startAngle = -seriesModel.get('startAngle') * RADIAN;
	    var minAngle = seriesModel.get('minAngle') * RADIAN;
	    var validDataCount = 0;
	    data.each('value', function (value) {
	      !isNaN(value) && validDataCount++;
	    });
	    var sum = data.getSum('value'); // Sum may be 0

	    var unitRadian = Math.PI / (sum || validDataCount) * 2;
	    var clockwise = seriesModel.get('clockwise');
	    var roseType = seriesModel.get('roseType');
	    var stillShowZeroSum = seriesModel.get('stillShowZeroSum'); // [0...max]

	    var extent = data.getDataExtent('value');
	    extent[0] = 0; // In the case some sector angle is smaller than minAngle

	    var restAngle = PI2;
	    var valueSumLargerThanMinAngle = 0;
	    var currentAngle = startAngle;
	    var dir = clockwise ? 1 : -1;
	    data.each('value', function (value, idx) {
	      var angle;

	      if (isNaN(value)) {
	        data.setItemLayout(idx, {
	          angle: NaN,
	          startAngle: NaN,
	          endAngle: NaN,
	          clockwise: clockwise,
	          cx: cx,
	          cy: cy,
	          r0: r0,
	          r: roseType ? NaN : r
	        });
	        return;
	      } // FIXME 兼容 2.0 但是 roseType 是 area 的时候才是这样？


	      if (roseType !== 'area') {
	        angle = sum === 0 && stillShowZeroSum ? unitRadian : value * unitRadian;
	      } else {
	        angle = PI2 / validDataCount;
	      }

	      if (angle < minAngle) {
	        angle = minAngle;
	        restAngle -= minAngle;
	      } else {
	        valueSumLargerThanMinAngle += value;
	      }

	      var endAngle = currentAngle + dir * angle;
	      data.setItemLayout(idx, {
	        angle: angle,
	        startAngle: currentAngle,
	        endAngle: endAngle,
	        clockwise: clockwise,
	        cx: cx,
	        cy: cy,
	        r0: r0,
	        r: roseType ? linearMap(value, extent, [r0, r]) : r
	      });
	      currentAngle = endAngle;
	    }, true); // Some sector is constrained by minAngle
	    // Rest sectors needs recalculate angle

	    if (restAngle < PI2 && validDataCount) {
	      // Average the angle if rest angle is not enough after all angles is
	      // Constrained by minAngle
	      if (restAngle <= 1e-3) {
	        var angle = PI2 / validDataCount;
	        data.each('value', function (value, idx) {
	          if (!isNaN(value)) {
	            var layout = data.getItemLayout(idx);
	            layout.angle = angle;
	            layout.startAngle = startAngle + dir * idx * angle;
	            layout.endAngle = startAngle + dir * (idx + 1) * angle;
	          }
	        });
	      } else {
	        unitRadian = restAngle / valueSumLargerThanMinAngle;
	        currentAngle = startAngle;
	        data.each('value', function (value, idx) {
	          if (!isNaN(value)) {
	            var layout = data.getItemLayout(idx);
	            var angle = layout.angle === minAngle ? minAngle : value * unitRadian;
	            layout.startAngle = currentAngle;
	            layout.endAngle = currentAngle + dir * angle;
	            currentAngle += dir * angle;
	          }
	        });
	      }
	    }

	    labelLayout(seriesModel, r, width, height);
	  });
	}

	module.exports = _default;

/***/ },
/* 321 */
/***/ function(module, exports, __webpack_require__) {

	var textContain = __webpack_require__(195);

	// FIXME emphasis label position is not same with normal label position
	function adjustSingleSide(list, cx, cy, r, dir, viewWidth, viewHeight) {
	  list.sort(function (a, b) {
	    return a.y - b.y;
	  }); // 压

	  function shiftDown(start, end, delta, dir) {
	    for (var j = start; j < end; j++) {
	      list[j].y += delta;

	      if (j > start && j + 1 < end && list[j + 1].y > list[j].y + list[j].height) {
	        shiftUp(j, delta / 2);
	        return;
	      }
	    }

	    shiftUp(end - 1, delta / 2);
	  } // 弹


	  function shiftUp(end, delta) {
	    for (var j = end; j >= 0; j--) {
	      list[j].y -= delta;

	      if (j > 0 && list[j].y > list[j - 1].y + list[j - 1].height) {
	        break;
	      }
	    }
	  }

	  function changeX(list, isDownList, cx, cy, r, dir) {
	    var lastDeltaX = dir > 0 ? isDownList // 右侧
	    ? Number.MAX_VALUE // 下
	    : 0 // 上
	    : isDownList // 左侧
	    ? Number.MAX_VALUE // 下
	    : 0; // 上

	    for (var i = 0, l = list.length; i < l; i++) {
	      // Not change x for center label
	      if (list[i].position === 'center') {
	        continue;
	      }

	      var deltaY = Math.abs(list[i].y - cy);
	      var length = list[i].len;
	      var length2 = list[i].len2;
	      var deltaX = deltaY < r + length ? Math.sqrt((r + length + length2) * (r + length + length2) - deltaY * deltaY) : Math.abs(list[i].x - cx);

	      if (isDownList && deltaX >= lastDeltaX) {
	        // 右下，左下
	        deltaX = lastDeltaX - 10;
	      }

	      if (!isDownList && deltaX <= lastDeltaX) {
	        // 右上，左上
	        deltaX = lastDeltaX + 10;
	      }

	      list[i].x = cx + deltaX * dir;
	      lastDeltaX = deltaX;
	    }
	  }

	  var lastY = 0;
	  var delta;
	  var len = list.length;
	  var upList = [];
	  var downList = [];

	  for (var i = 0; i < len; i++) {
	    delta = list[i].y - lastY;

	    if (delta < 0) {
	      shiftDown(i, len, -delta, dir);
	    }

	    lastY = list[i].y + list[i].height;
	  }

	  if (viewHeight - lastY < 0) {
	    shiftUp(len - 1, lastY - viewHeight);
	  }

	  for (var i = 0; i < len; i++) {
	    if (list[i].y >= cy) {
	      downList.push(list[i]);
	    } else {
	      upList.push(list[i]);
	    }
	  }

	  changeX(upList, false, cx, cy, r, dir);
	  changeX(downList, true, cx, cy, r, dir);
	}

	function avoidOverlap(labelLayoutList, cx, cy, r, viewWidth, viewHeight) {
	  var leftList = [];
	  var rightList = [];

	  for (var i = 0; i < labelLayoutList.length; i++) {
	    if (labelLayoutList[i].x < cx) {
	      leftList.push(labelLayoutList[i]);
	    } else {
	      rightList.push(labelLayoutList[i]);
	    }
	  }

	  adjustSingleSide(rightList, cx, cy, r, 1, viewWidth, viewHeight);
	  adjustSingleSide(leftList, cx, cy, r, -1, viewWidth, viewHeight);

	  for (var i = 0; i < labelLayoutList.length; i++) {
	    var linePoints = labelLayoutList[i].linePoints;

	    if (linePoints) {
	      var dist = linePoints[1][0] - linePoints[2][0];

	      if (labelLayoutList[i].x < cx) {
	        linePoints[2][0] = labelLayoutList[i].x + 3;
	      } else {
	        linePoints[2][0] = labelLayoutList[i].x - 3;
	      }

	      linePoints[1][1] = linePoints[2][1] = labelLayoutList[i].y;
	      linePoints[1][0] = linePoints[2][0] + dist;
	    }
	  }
	}

	function _default(seriesModel, r, viewWidth, viewHeight) {
	  var data = seriesModel.getData();
	  var labelLayoutList = [];
	  var cx;
	  var cy;
	  var hasLabelRotate = false;
	  data.each(function (idx) {
	    var layout = data.getItemLayout(idx);
	    var itemModel = data.getItemModel(idx);
	    var labelModel = itemModel.getModel('label.normal'); // Use position in normal or emphasis

	    var labelPosition = labelModel.get('position') || itemModel.get('label.emphasis.position');
	    var labelLineModel = itemModel.getModel('labelLine.normal');
	    var labelLineLen = labelLineModel.get('length');
	    var labelLineLen2 = labelLineModel.get('length2');
	    var midAngle = (layout.startAngle + layout.endAngle) / 2;
	    var dx = Math.cos(midAngle);
	    var dy = Math.sin(midAngle);
	    var textX;
	    var textY;
	    var linePoints;
	    var textAlign;
	    cx = layout.cx;
	    cy = layout.cy;
	    var isLabelInside = labelPosition === 'inside' || labelPosition === 'inner';

	    if (labelPosition === 'center') {
	      textX = layout.cx;
	      textY = layout.cy;
	      textAlign = 'center';
	    } else {
	      var x1 = (isLabelInside ? (layout.r + layout.r0) / 2 * dx : layout.r * dx) + cx;
	      var y1 = (isLabelInside ? (layout.r + layout.r0) / 2 * dy : layout.r * dy) + cy;
	      textX = x1 + dx * 3;
	      textY = y1 + dy * 3;

	      if (!isLabelInside) {
	        // For roseType
	        var x2 = x1 + dx * (labelLineLen + r - layout.r);
	        var y2 = y1 + dy * (labelLineLen + r - layout.r);
	        var x3 = x2 + (dx < 0 ? -1 : 1) * labelLineLen2;
	        var y3 = y2;
	        textX = x3 + (dx < 0 ? -5 : 5);
	        textY = y3;
	        linePoints = [[x1, y1], [x2, y2], [x3, y3]];
	      }

	      textAlign = isLabelInside ? 'center' : dx > 0 ? 'left' : 'right';
	    }

	    var font = labelModel.getFont();
	    var labelRotate = labelModel.get('rotate') ? dx < 0 ? -midAngle + Math.PI : -midAngle : 0;
	    var text = seriesModel.getFormattedLabel(idx, 'normal') || data.getName(idx);
	    var textRect = textContain.getBoundingRect(text, font, textAlign, 'top');
	    hasLabelRotate = !!labelRotate;
	    layout.label = {
	      x: textX,
	      y: textY,
	      position: labelPosition,
	      height: textRect.height,
	      len: labelLineLen,
	      len2: labelLineLen2,
	      linePoints: linePoints,
	      textAlign: textAlign,
	      verticalAlign: 'middle',
	      rotation: labelRotate,
	      inside: isLabelInside
	    }; // Not layout the inside label

	    if (!isLabelInside) {
	      labelLayoutList.push(layout.label);
	    }
	  });

	  if (!hasLabelRotate && seriesModel.get('avoidLabelOverlap')) {
	    avoidOverlap(labelLayoutList, cx, cy, r, viewWidth, viewHeight);
	  }
	}

	module.exports = _default;

/***/ },
/* 322 */
/***/ function(module, exports) {

	function _default(seriesType, ecModel) {
	  var legendModels = ecModel.findComponents({
	    mainType: 'legend'
	  });

	  if (!legendModels || !legendModels.length) {
	    return;
	  }

	  ecModel.eachSeriesByType(seriesType, function (series) {
	    var data = series.getData();
	    data.filterSelf(function (idx) {
	      var name = data.getName(idx); // If in any legend component the status is not selected.

	      for (var i = 0; i < legendModels.length; i++) {
	        if (!legendModels[i].isSelected(name)) {
	          return false;
	        }
	      }

	      return true;
	    }, this);
	  }, this);
	}

	module.exports = _default;

/***/ },
/* 323 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var zrUtil = __webpack_require__(166);

	__webpack_require__(324);

	__webpack_require__(325);

	var visualSymbol = __webpack_require__(289);

	var layoutPoints = __webpack_require__(290);

	__webpack_require__(292);

	// In case developer forget to include grid component
	echarts.registerVisual(zrUtil.curry(visualSymbol, 'scatter', 'circle', null));
	echarts.registerLayout(zrUtil.curry(layoutPoints, 'scatter'));

/***/ },
/* 324 */
/***/ function(module, exports, __webpack_require__) {

	var createListFromArray = __webpack_require__(264);

	var SeriesModel = __webpack_require__(256);

	var _default = SeriesModel.extend({
	  type: 'series.scatter',
	  dependencies: ['grid', 'polar', 'geo', 'singleAxis', 'calendar'],
	  getInitialData: function (option, ecModel) {
	    return createListFromArray(option.data, this, ecModel);
	  },
	  brushSelector: 'point',
	  defaultOption: {
	    coordinateSystem: 'cartesian2d',
	    zlevel: 0,
	    z: 2,
	    legendHoverLink: true,
	    hoverAnimation: true,
	    // Cartesian coordinate system
	    // xAxisIndex: 0,
	    // yAxisIndex: 0,
	    // Polar coordinate system
	    // polarIndex: 0,
	    // Geo coordinate system
	    // geoIndex: 0,
	    // symbol: null,        // 图形类型
	    symbolSize: 10,
	    // 图形大小，半宽（半径）参数，当图形为方向或菱形则总宽度为symbolSize * 2
	    // symbolRotate: null,  // 图形旋转控制
	    large: false,
	    // Available when large is true
	    largeThreshold: 2000,
	    // cursor: null,
	    // label: {
	    // normal: {
	    // show: false
	    // distance: 5,
	    // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调
	    // position: 默认自适应，水平布局为'top'，垂直布局为'right'，可选为
	    //           'inside'|'left'|'right'|'top'|'bottom'
	    // 默认使用全局文本样式，详见TEXTSTYLE
	    //     }
	    // },
	    itemStyle: {
	      normal: {
	        opacity: 0.8 // color: 各异

	      }
	    }
	  }
	});

	module.exports = _default;

/***/ },
/* 325 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var SymbolDraw = __webpack_require__(284);

	var LargeSymbolDraw = __webpack_require__(326);

	echarts.extendChartView({
	  type: 'scatter',
	  init: function () {
	    this._normalSymbolDraw = new SymbolDraw();
	    this._largeSymbolDraw = new LargeSymbolDraw();
	  },
	  render: function (seriesModel, ecModel, api) {
	    var data = seriesModel.getData();
	    var largeSymbolDraw = this._largeSymbolDraw;
	    var normalSymbolDraw = this._normalSymbolDraw;
	    var group = this.group;
	    var symbolDraw = seriesModel.get('large') && data.count() > seriesModel.get('largeThreshold') ? largeSymbolDraw : normalSymbolDraw;
	    this._symbolDraw = symbolDraw;
	    symbolDraw.updateData(data);
	    group.add(symbolDraw.group);
	    group.remove(symbolDraw === largeSymbolDraw ? normalSymbolDraw.group : largeSymbolDraw.group);
	  },
	  updateLayout: function (seriesModel) {
	    this._symbolDraw.updateLayout(seriesModel);
	  },
	  remove: function (ecModel, api) {
	    this._symbolDraw && this._symbolDraw.remove(api, true);
	  },
	  dispose: function () {}
	});

/***/ },
/* 326 */
/***/ function(module, exports, __webpack_require__) {

	var graphic = __webpack_require__(212);

	var _symbol = __webpack_require__(276);

	var createSymbol = _symbol.createSymbol;
	// TODO Batch by color
	var LargeSymbolPath = graphic.extendShape({
	  shape: {
	    points: null,
	    sizes: null
	  },
	  symbolProxy: null,
	  buildPath: function (path, shape) {
	    var points = shape.points;
	    var sizes = shape.sizes;
	    var symbolProxy = this.symbolProxy;
	    var symbolProxyShape = symbolProxy.shape;

	    for (var i = 0; i < points.length; i++) {
	      var pt = points[i];

	      if (isNaN(pt[0]) || isNaN(pt[1])) {
	        continue;
	      }

	      var size = sizes[i];

	      if (size[0] < 4) {
	        // Optimize for small symbol
	        path.rect(pt[0] - size[0] / 2, pt[1] - size[1] / 2, size[0], size[1]);
	      } else {
	        symbolProxyShape.x = pt[0] - size[0] / 2;
	        symbolProxyShape.y = pt[1] - size[1] / 2;
	        symbolProxyShape.width = size[0];
	        symbolProxyShape.height = size[1];
	        symbolProxy.buildPath(path, symbolProxyShape, true);
	      }
	    }
	  },
	  findDataIndex: function (x, y) {
	    var shape = this.shape;
	    var points = shape.points;
	    var sizes = shape.sizes; // Not consider transform
	    // Treat each element as a rect
	    // top down traverse

	    for (var i = points.length - 1; i >= 0; i--) {
	      var pt = points[i];
	      var size = sizes[i];
	      var x0 = pt[0] - size[0] / 2;
	      var y0 = pt[1] - size[1] / 2;

	      if (x >= x0 && y >= y0 && x <= x0 + size[0] && y <= y0 + size[1]) {
	        // i is dataIndex
	        return i;
	      }
	    }

	    return -1;
	  }
	});

	function LargeSymbolDraw() {
	  this.group = new graphic.Group();
	  this._symbolEl = new LargeSymbolPath({// rectHover: true,
	    // cursor: 'default'
	  });
	}

	var largeSymbolProto = LargeSymbolDraw.prototype;
	/**
	 * Update symbols draw by new data
	 * @param {module:echarts/data/List} data
	 */

	largeSymbolProto.updateData = function (data) {
	  this.group.removeAll();
	  var symbolEl = this._symbolEl;
	  var seriesModel = data.hostModel;
	  symbolEl.setShape({
	    points: data.mapArray(data.getItemLayout),
	    sizes: data.mapArray(function (idx) {
	      var size = data.getItemVisual(idx, 'symbolSize');

	      if (!(size instanceof Array)) {
	        size = [size, size];
	      }

	      return size;
	    })
	  }); // Create symbolProxy to build path for each data

	  symbolEl.symbolProxy = createSymbol(data.getVisual('symbol'), 0, 0, 0, 0); // Use symbolProxy setColor method

	  symbolEl.setColor = symbolEl.symbolProxy.setColor;
	  symbolEl.useStyle(seriesModel.getModel('itemStyle.normal').getItemStyle(['color']));
	  var visualColor = data.getVisual('color');

	  if (visualColor) {
	    symbolEl.setColor(visualColor);
	  } // Enable tooltip
	  // PENDING May have performance issue when path is extremely large


	  symbolEl.seriesIndex = seriesModel.seriesIndex;
	  symbolEl.on('mousemove', function (e) {
	    symbolEl.dataIndex = null;
	    var dataIndex = symbolEl.findDataIndex(e.offsetX, e.offsetY);

	    if (dataIndex >= 0) {
	      // Provide dataIndex for tooltip
	      symbolEl.dataIndex = dataIndex;
	    }
	  }); // Add back

	  this.group.add(symbolEl);
	};

	largeSymbolProto.updateLayout = function (seriesModel) {
	  var data = seriesModel.getData();

	  this._symbolEl.setShape({
	    points: data.mapArray(data.getItemLayout)
	  });
	};

	largeSymbolProto.remove = function () {
	  this.group.removeAll();
	};

	var _default = LargeSymbolDraw;
	module.exports = _default;

/***/ },
/* 327 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var zrUtil = __webpack_require__(166);

	__webpack_require__(328);

	__webpack_require__(333);

	__webpack_require__(334);

	var dataColor = __webpack_require__(319);

	var visualSymbol = __webpack_require__(289);

	var radarLayout = __webpack_require__(335);

	var dataFilter = __webpack_require__(322);

	var backwardCompat = __webpack_require__(336);

	// Must use radar component
	echarts.registerVisual(zrUtil.curry(dataColor, 'radar'));
	echarts.registerVisual(zrUtil.curry(visualSymbol, 'radar', 'circle', null));
	echarts.registerLayout(radarLayout);
	echarts.registerProcessor(zrUtil.curry(dataFilter, 'radar'));
	echarts.registerPreprocessor(backwardCompat);

/***/ },
/* 328 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(329);

	__webpack_require__(331);

	__webpack_require__(332);

/***/ },
/* 329 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var IndicatorAxis = __webpack_require__(330);

	var IntervalScale = __webpack_require__(271);

	var numberUtil = __webpack_require__(205);

	var _axisHelper = __webpack_require__(268);

	var getScaleExtent = _axisHelper.getScaleExtent;
	var niceScaleExtent = _axisHelper.niceScaleExtent;

	var CoordinateSystem = __webpack_require__(252);

	// TODO clockwise
	function Radar(radarModel, ecModel, api) {
	  this._model = radarModel;
	  /**
	   * Radar dimensions
	   * @type {Array.<string>}
	   */

	  this.dimensions = [];
	  this._indicatorAxes = zrUtil.map(radarModel.getIndicatorModels(), function (indicatorModel, idx) {
	    var dim = 'indicator_' + idx;
	    var indicatorAxis = new IndicatorAxis(dim, new IntervalScale());
	    indicatorAxis.name = indicatorModel.get('name'); // Inject model and axis

	    indicatorAxis.model = indicatorModel;
	    indicatorModel.axis = indicatorAxis;
	    this.dimensions.push(dim);
	    return indicatorAxis;
	  }, this);
	  this.resize(radarModel, api);
	  /**
	   * @type {number}
	   * @readOnly
	   */

	  this.cx;
	  /**
	   * @type {number}
	   * @readOnly
	   */

	  this.cy;
	  /**
	   * @type {number}
	   * @readOnly
	   */

	  this.r;
	  /**
	   * @type {number}
	   * @readOnly
	   */

	  this.startAngle;
	}

	Radar.prototype.getIndicatorAxes = function () {
	  return this._indicatorAxes;
	};

	Radar.prototype.dataToPoint = function (value, indicatorIndex) {
	  var indicatorAxis = this._indicatorAxes[indicatorIndex];
	  return this.coordToPoint(indicatorAxis.dataToCoord(value), indicatorIndex);
	};

	Radar.prototype.coordToPoint = function (coord, indicatorIndex) {
	  var indicatorAxis = this._indicatorAxes[indicatorIndex];
	  var angle = indicatorAxis.angle;
	  var x = this.cx + coord * Math.cos(angle);
	  var y = this.cy - coord * Math.sin(angle);
	  return [x, y];
	};

	Radar.prototype.pointToData = function (pt) {
	  var dx = pt[0] - this.cx;
	  var dy = pt[1] - this.cy;
	  var radius = Math.sqrt(dx * dx + dy * dy);
	  dx /= radius;
	  dy /= radius;
	  var radian = Math.atan2(-dy, dx); // Find the closest angle
	  // FIXME index can calculated directly

	  var minRadianDiff = Infinity;
	  var closestAxis;
	  var closestAxisIdx = -1;

	  for (var i = 0; i < this._indicatorAxes.length; i++) {
	    var indicatorAxis = this._indicatorAxes[i];
	    var diff = Math.abs(radian - indicatorAxis.angle);

	    if (diff < minRadianDiff) {
	      closestAxis = indicatorAxis;
	      closestAxisIdx = i;
	      minRadianDiff = diff;
	    }
	  }

	  return [closestAxisIdx, +(closestAxis && closestAxis.coodToData(radius))];
	};

	Radar.prototype.resize = function (radarModel, api) {
	  var center = radarModel.get('center');
	  var viewWidth = api.getWidth();
	  var viewHeight = api.getHeight();
	  var viewSize = Math.min(viewWidth, viewHeight) / 2;
	  this.cx = numberUtil.parsePercent(center[0], viewWidth);
	  this.cy = numberUtil.parsePercent(center[1], viewHeight);
	  this.startAngle = radarModel.get('startAngle') * Math.PI / 180;
	  this.r = numberUtil.parsePercent(radarModel.get('radius'), viewSize);
	  zrUtil.each(this._indicatorAxes, function (indicatorAxis, idx) {
	    indicatorAxis.setExtent(0, this.r);
	    var angle = this.startAngle + idx * Math.PI * 2 / this._indicatorAxes.length; // Normalize to [-PI, PI]

	    angle = Math.atan2(Math.sin(angle), Math.cos(angle));
	    indicatorAxis.angle = angle;
	  }, this);
	};

	Radar.prototype.update = function (ecModel, api) {
	  var indicatorAxes = this._indicatorAxes;
	  var radarModel = this._model;
	  zrUtil.each(indicatorAxes, function (indicatorAxis) {
	    indicatorAxis.scale.setExtent(Infinity, -Infinity);
	  });
	  ecModel.eachSeriesByType('radar', function (radarSeries, idx) {
	    if (radarSeries.get('coordinateSystem') !== 'radar' || ecModel.getComponent('radar', radarSeries.get('radarIndex')) !== radarModel) {
	      return;
	    }

	    var data = radarSeries.getData();
	    zrUtil.each(indicatorAxes, function (indicatorAxis) {
	      indicatorAxis.scale.unionExtentFromData(data, indicatorAxis.dim);
	    });
	  }, this);
	  var splitNumber = radarModel.get('splitNumber');

	  function increaseInterval(interval) {
	    var exp10 = Math.pow(10, Math.floor(Math.log(interval) / Math.LN10)); // Increase interval

	    var f = interval / exp10;

	    if (f === 2) {
	      f = 5;
	    } else {
	      // f is 2 or 5
	      f *= 2;
	    }

	    return f * exp10;
	  } // Force all the axis fixing the maxSplitNumber.


	  zrUtil.each(indicatorAxes, function (indicatorAxis, idx) {
	    var rawExtent = getScaleExtent(indicatorAxis.scale, indicatorAxis.model);
	    niceScaleExtent(indicatorAxis.scale, indicatorAxis.model);
	    var axisModel = indicatorAxis.model;
	    var scale = indicatorAxis.scale;
	    var fixedMin = axisModel.getMin();
	    var fixedMax = axisModel.getMax();
	    var interval = scale.getInterval();

	    if (fixedMin != null && fixedMax != null) {
	      // User set min, max, divide to get new interval
	      scale.setExtent(+fixedMin, +fixedMax);
	      scale.setInterval((fixedMax - fixedMin) / splitNumber);
	    } else if (fixedMin != null) {
	      var max; // User set min, expand extent on the other side

	      do {
	        max = fixedMin + interval * splitNumber;
	        scale.setExtent(+fixedMin, max); // Interval must been set after extent
	        // FIXME

	        scale.setInterval(interval);
	        interval = increaseInterval(interval);
	      } while (max < rawExtent[1] && isFinite(max) && isFinite(rawExtent[1]));
	    } else if (fixedMax != null) {
	      var min; // User set min, expand extent on the other side

	      do {
	        min = fixedMax - interval * splitNumber;
	        scale.setExtent(min, +fixedMax);
	        scale.setInterval(interval);
	        interval = increaseInterval(interval);
	      } while (min > rawExtent[0] && isFinite(min) && isFinite(rawExtent[0]));
	    } else {
	      var nicedSplitNumber = scale.getTicks().length - 1;

	      if (nicedSplitNumber > splitNumber) {
	        interval = increaseInterval(interval);
	      } // PENDING


	      var center = Math.round((rawExtent[0] + rawExtent[1]) / 2 / interval) * interval;
	      var halfSplitNumber = Math.round(splitNumber / 2);
	      scale.setExtent(numberUtil.round(center - halfSplitNumber * interval), numberUtil.round(center + (splitNumber - halfSplitNumber) * interval));
	      scale.setInterval(interval);
	    }
	  });
	};
	/**
	 * Radar dimensions is based on the data
	 * @type {Array}
	 */


	Radar.dimensions = [];

	Radar.create = function (ecModel, api) {
	  var radarList = [];
	  ecModel.eachComponent('radar', function (radarModel) {
	    var radar = new Radar(radarModel, ecModel, api);
	    radarList.push(radar);
	    radarModel.coordinateSystem = radar;
	  });
	  ecModel.eachSeriesByType('radar', function (radarSeries) {
	    if (radarSeries.get('coordinateSystem') === 'radar') {
	      // Inject coordinate system
	      radarSeries.coordinateSystem = radarList[radarSeries.get('radarIndex') || 0];
	    }
	  });
	  return radarList;
	};

	CoordinateSystem.register('radar', Radar);
	var _default = Radar;
	module.exports = _default;

/***/ },
/* 330 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var Axis = __webpack_require__(277);

	function IndicatorAxis(dim, scale, radiusExtent) {
	  Axis.call(this, dim, scale, radiusExtent);
	  /**
	   * Axis type
	   *  - 'category'
	   *  - 'value'
	   *  - 'time'
	   *  - 'log'
	   * @type {string}
	   */

	  this.type = 'value';
	  this.angle = 0;
	  /**
	   * Indicator name
	   * @type {string}
	   */

	  this.name = '';
	  /**
	   * @type {module:echarts/model/Model}
	   */

	  this.model;
	}

	zrUtil.inherits(IndicatorAxis, Axis);
	var _default = IndicatorAxis;
	module.exports = _default;

/***/ },
/* 331 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var zrUtil = __webpack_require__(166);

	var axisDefault = __webpack_require__(300);

	var Model = __webpack_require__(206);

	var axisModelCommonMixin = __webpack_require__(275);

	var valueAxisDefault = axisDefault.valueAxis;

	function defaultsShow(opt, show) {
	  return zrUtil.defaults({
	    show: show
	  }, opt);
	}

	var RadarModel = echarts.extendComponentModel({
	  type: 'radar',
	  optionUpdated: function () {
	    var boundaryGap = this.get('boundaryGap');
	    var splitNumber = this.get('splitNumber');
	    var scale = this.get('scale');
	    var axisLine = this.get('axisLine');
	    var axisTick = this.get('axisTick');
	    var axisLabel = this.get('axisLabel');
	    var nameTextStyle = this.get('name');
	    var showName = this.get('name.show');
	    var nameFormatter = this.get('name.formatter');
	    var nameGap = this.get('nameGap');
	    var triggerEvent = this.get('triggerEvent');
	    var indicatorModels = zrUtil.map(this.get('indicator') || [], function (indicatorOpt) {
	      // PENDING
	      if (indicatorOpt.max != null && indicatorOpt.max > 0 && !indicatorOpt.min) {
	        indicatorOpt.min = 0;
	      } else if (indicatorOpt.min != null && indicatorOpt.min < 0 && !indicatorOpt.max) {
	        indicatorOpt.max = 0;
	      }

	      var iNameTextStyle = nameTextStyle;

	      if (indicatorOpt.color != null) {
	        iNameTextStyle = zrUtil.defaults({
	          color: indicatorOpt.color
	        }, nameTextStyle);
	      } // Use same configuration


	      indicatorOpt = zrUtil.merge(zrUtil.clone(indicatorOpt), {
	        boundaryGap: boundaryGap,
	        splitNumber: splitNumber,
	        scale: scale,
	        axisLine: axisLine,
	        axisTick: axisTick,
	        axisLabel: axisLabel,
	        // Competitable with 2 and use text
	        name: indicatorOpt.text,
	        nameLocation: 'end',
	        nameGap: nameGap,
	        // min: 0,
	        nameTextStyle: iNameTextStyle,
	        triggerEvent: triggerEvent
	      }, false);

	      if (!showName) {
	        indicatorOpt.name = '';
	      }

	      if (typeof nameFormatter === 'string') {
	        var indName = indicatorOpt.name;
	        indicatorOpt.name = nameFormatter.replace('{value}', indName != null ? indName : '');
	      } else if (typeof nameFormatter === 'function') {
	        indicatorOpt.name = nameFormatter(indicatorOpt.name, indicatorOpt);
	      }

	      var model = zrUtil.extend(new Model(indicatorOpt, null, this.ecModel), axisModelCommonMixin); // For triggerEvent.

	      model.mainType = 'radar';
	      model.componentIndex = this.componentIndex;
	      return model;
	    }, this);

	    this.getIndicatorModels = function () {
	      return indicatorModels;
	    };
	  },
	  defaultOption: {
	    zlevel: 0,
	    z: 0,
	    center: ['50%', '50%'],
	    radius: '75%',
	    startAngle: 90,
	    name: {
	      show: true // formatter: null
	      // textStyle: {}

	    },
	    boundaryGap: [0, 0],
	    splitNumber: 5,
	    nameGap: 15,
	    scale: false,
	    // Polygon or circle
	    shape: 'polygon',
	    axisLine: zrUtil.merge({
	      lineStyle: {
	        color: '#bbb'
	      }
	    }, valueAxisDefault.axisLine),
	    axisLabel: defaultsShow(valueAxisDefault.axisLabel, false),
	    axisTick: defaultsShow(valueAxisDefault.axisTick, false),
	    splitLine: defaultsShow(valueAxisDefault.splitLine, true),
	    splitArea: defaultsShow(valueAxisDefault.splitArea, true),
	    // {text, min, max}
	    indicator: []
	  }
	});
	var _default = RadarModel;
	module.exports = _default;

/***/ },
/* 332 */
/***/ function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(162);

	var __DEV__ = _config.__DEV__;

	var echarts = __webpack_require__(161);

	var zrUtil = __webpack_require__(166);

	var AxisBuilder = __webpack_require__(303);

	var graphic = __webpack_require__(212);

	var axisBuilderAttrs = ['axisLine', 'axisTickLabel', 'axisName'];

	var _default = echarts.extendComponentView({
	  type: 'radar',
	  render: function (radarModel, ecModel, api) {
	    var group = this.group;
	    group.removeAll();

	    this._buildAxes(radarModel);

	    this._buildSplitLineAndArea(radarModel);
	  },
	  _buildAxes: function (radarModel) {
	    var radar = radarModel.coordinateSystem;
	    var indicatorAxes = radar.getIndicatorAxes();
	    var axisBuilders = zrUtil.map(indicatorAxes, function (indicatorAxis) {
	      var axisBuilder = new AxisBuilder(indicatorAxis.model, {
	        position: [radar.cx, radar.cy],
	        rotation: indicatorAxis.angle,
	        labelDirection: -1,
	        tickDirection: -1,
	        nameDirection: 1
	      });
	      return axisBuilder;
	    });
	    zrUtil.each(axisBuilders, function (axisBuilder) {
	      zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);
	      this.group.add(axisBuilder.getGroup());
	    }, this);
	  },
	  _buildSplitLineAndArea: function (radarModel) {
	    var radar = radarModel.coordinateSystem;
	    var indicatorAxes = radar.getIndicatorAxes();

	    if (!indicatorAxes.length) {
	      return;
	    }

	    var shape = radarModel.get('shape');
	    var splitLineModel = radarModel.getModel('splitLine');
	    var splitAreaModel = radarModel.getModel('splitArea');
	    var lineStyleModel = splitLineModel.getModel('lineStyle');
	    var areaStyleModel = splitAreaModel.getModel('areaStyle');
	    var showSplitLine = splitLineModel.get('show');
	    var showSplitArea = splitAreaModel.get('show');
	    var splitLineColors = lineStyleModel.get('color');
	    var splitAreaColors = areaStyleModel.get('color');
	    splitLineColors = zrUtil.isArray(splitLineColors) ? splitLineColors : [splitLineColors];
	    splitAreaColors = zrUtil.isArray(splitAreaColors) ? splitAreaColors : [splitAreaColors];
	    var splitLines = [];
	    var splitAreas = [];

	    function getColorIndex(areaOrLine, areaOrLineColorList, idx) {
	      var colorIndex = idx % areaOrLineColorList.length;
	      areaOrLine[colorIndex] = areaOrLine[colorIndex] || [];
	      return colorIndex;
	    }

	    if (shape === 'circle') {
	      var ticksRadius = indicatorAxes[0].getTicksCoords();
	      var cx = radar.cx;
	      var cy = radar.cy;

	      for (var i = 0; i < ticksRadius.length; i++) {
	        if (showSplitLine) {
	          var colorIndex = getColorIndex(splitLines, splitLineColors, i);
	          splitLines[colorIndex].push(new graphic.Circle({
	            shape: {
	              cx: cx,
	              cy: cy,
	              r: ticksRadius[i]
	            }
	          }));
	        }

	        if (showSplitArea && i < ticksRadius.length - 1) {
	          var colorIndex = getColorIndex(splitAreas, splitAreaColors, i);
	          splitAreas[colorIndex].push(new graphic.Ring({
	            shape: {
	              cx: cx,
	              cy: cy,
	              r0: ticksRadius[i],
	              r: ticksRadius[i + 1]
	            }
	          }));
	        }
	      }
	    } // Polyyon
	    else {
	        var realSplitNumber;
	        var axesTicksPoints = zrUtil.map(indicatorAxes, function (indicatorAxis, idx) {
	          var ticksCoords = indicatorAxis.getTicksCoords();
	          realSplitNumber = realSplitNumber == null ? ticksCoords.length - 1 : Math.min(ticksCoords.length - 1, realSplitNumber);
	          return zrUtil.map(ticksCoords, function (tickCoord) {
	            return radar.coordToPoint(tickCoord, idx);
	          });
	        });
	        var prevPoints = [];

	        for (var i = 0; i <= realSplitNumber; i++) {
	          var points = [];

	          for (var j = 0; j < indicatorAxes.length; j++) {
	            points.push(axesTicksPoints[j][i]);
	          } // Close


	          if (points[0]) {
	            points.push(points[0].slice());
	          } else {}

	          if (showSplitLine) {
	            var colorIndex = getColorIndex(splitLines, splitLineColors, i);
	            splitLines[colorIndex].push(new graphic.Polyline({
	              shape: {
	                points: points
	              }
	            }));
	          }

	          if (showSplitArea && prevPoints) {
	            var colorIndex = getColorIndex(splitAreas, splitAreaColors, i - 1);
	            splitAreas[colorIndex].push(new graphic.Polygon({
	              shape: {
	                points: points.concat(prevPoints)
	              }
	            }));
	          }

	          prevPoints = points.slice().reverse();
	        }
	      }

	    var lineStyle = lineStyleModel.getLineStyle();
	    var areaStyle = areaStyleModel.getAreaStyle(); // Add splitArea before splitLine

	    zrUtil.each(splitAreas, function (splitAreas, idx) {
	      this.group.add(graphic.mergePath(splitAreas, {
	        style: zrUtil.defaults({
	          stroke: 'none',
	          fill: splitAreaColors[idx % splitAreaColors.length]
	        }, areaStyle),
	        silent: true
	      }));
	    }, this);
	    zrUtil.each(splitLines, function (splitLines, idx) {
	      this.group.add(graphic.mergePath(splitLines, {
	        style: zrUtil.defaults({
	          fill: 'none',
	          stroke: splitLineColors[idx % splitLineColors.length]
	        }, lineStyle),
	        silent: true
	      }));
	    }, this);
	  }
	});

	module.exports = _default;

/***/ },
/* 333 */
/***/ function(module, exports, __webpack_require__) {

	var SeriesModel = __webpack_require__(256);

	var List = __webpack_require__(265);

	var completeDimensions = __webpack_require__(267);

	var zrUtil = __webpack_require__(166);

	var _format = __webpack_require__(204);

	var encodeHTML = _format.encodeHTML;
	var RadarSeries = SeriesModel.extend({
	  type: 'series.radar',
	  dependencies: ['radar'],
	  // Overwrite
	  init: function (option) {
	    RadarSeries.superApply(this, 'init', arguments); // Enable legend selection for each data item
	    // Use a function instead of direct access because data reference may changed

	    this.legendDataProvider = function () {
	      return this.getRawData();
	    };
	  },
	  getInitialData: function (option, ecModel) {
	    var data = option.data || [];
	    var dimensions = completeDimensions([], data, {
	      extraPrefix: 'indicator_',
	      extraFromZero: true
	    });
	    var list = new List(dimensions, this);
	    list.initData(data);
	    return list;
	  },
	  formatTooltip: function (dataIndex) {
	    var value = this.getRawValue(dataIndex);
	    var coordSys = this.coordinateSystem;
	    var indicatorAxes = coordSys.getIndicatorAxes();
	    var name = this.getData().getName(dataIndex);
	    return encodeHTML(name === '' ? this.name : name) + '<br/>' + zrUtil.map(indicatorAxes, function (axis, idx) {
	      return encodeHTML(axis.name + ' : ' + value[idx]);
	    }).join('<br />');
	  },
	  defaultOption: {
	    zlevel: 0,
	    z: 2,
	    coordinateSystem: 'radar',
	    legendHoverLink: true,
	    radarIndex: 0,
	    lineStyle: {
	      normal: {
	        width: 2,
	        type: 'solid'
	      }
	    },
	    label: {
	      normal: {
	        position: 'top'
	      }
	    },
	    // areaStyle: {
	    // },
	    // itemStyle: {}
	    symbol: 'emptyCircle',
	    symbolSize: 4 // symbolRotate: null

	  }
	});
	var _default = RadarSeries;
	module.exports = _default;

/***/ },
/* 334 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var graphic = __webpack_require__(212);

	var zrUtil = __webpack_require__(166);

	var symbolUtil = __webpack_require__(276);

	function normalizeSymbolSize(symbolSize) {
	  if (!zrUtil.isArray(symbolSize)) {
	    symbolSize = [+symbolSize, +symbolSize];
	  }

	  return symbolSize;
	}

	var _default = echarts.extendChartView({
	  type: 'radar',
	  render: function (seriesModel, ecModel, api) {
	    var polar = seriesModel.coordinateSystem;
	    var group = this.group;
	    var data = seriesModel.getData();
	    var oldData = this._data;

	    function createSymbol(data, idx) {
	      var symbolType = data.getItemVisual(idx, 'symbol') || 'circle';
	      var color = data.getItemVisual(idx, 'color');

	      if (symbolType === 'none') {
	        return;
	      }

	      var symbolSize = normalizeSymbolSize(data.getItemVisual(idx, 'symbolSize'));
	      var symbolPath = symbolUtil.createSymbol(symbolType, -1, -1, 2, 2, color);
	      symbolPath.attr({
	        style: {
	          strokeNoScale: true
	        },
	        z2: 100,
	        scale: [symbolSize[0] / 2, symbolSize[1] / 2]
	      });
	      return symbolPath;
	    }

	    function updateSymbols(oldPoints, newPoints, symbolGroup, data, idx, isInit) {
	      // Simply rerender all
	      symbolGroup.removeAll();

	      for (var i = 0; i < newPoints.length - 1; i++) {
	        var symbolPath = createSymbol(data, idx);

	        if (symbolPath) {
	          symbolPath.__dimIdx = i;

	          if (oldPoints[i]) {
	            symbolPath.attr('position', oldPoints[i]);
	            graphic[isInit ? 'initProps' : 'updateProps'](symbolPath, {
	              position: newPoints[i]
	            }, seriesModel, idx);
	          } else {
	            symbolPath.attr('position', newPoints[i]);
	          }

	          symbolGroup.add(symbolPath);
	        }
	      }
	    }

	    function getInitialPoints(points) {
	      return zrUtil.map(points, function (pt) {
	        return [polar.cx, polar.cy];
	      });
	    }

	    data.diff(oldData).add(function (idx) {
	      var points = data.getItemLayout(idx);

	      if (!points) {
	        return;
	      }

	      var polygon = new graphic.Polygon();
	      var polyline = new graphic.Polyline();
	      var target = {
	        shape: {
	          points: points
	        }
	      };
	      polygon.shape.points = getInitialPoints(points);
	      polyline.shape.points = getInitialPoints(points);
	      graphic.initProps(polygon, target, seriesModel, idx);
	      graphic.initProps(polyline, target, seriesModel, idx);
	      var itemGroup = new graphic.Group();
	      var symbolGroup = new graphic.Group();
	      itemGroup.add(polyline);
	      itemGroup.add(polygon);
	      itemGroup.add(symbolGroup);
	      updateSymbols(polyline.shape.points, points, symbolGroup, data, idx, true);
	      data.setItemGraphicEl(idx, itemGroup);
	    }).update(function (newIdx, oldIdx) {
	      var itemGroup = oldData.getItemGraphicEl(oldIdx);
	      var polyline = itemGroup.childAt(0);
	      var polygon = itemGroup.childAt(1);
	      var symbolGroup = itemGroup.childAt(2);
	      var target = {
	        shape: {
	          points: data.getItemLayout(newIdx)
	        }
	      };

	      if (!target.shape.points) {
	        return;
	      }

	      updateSymbols(polyline.shape.points, target.shape.points, symbolGroup, data, newIdx, false);
	      graphic.updateProps(polyline, target, seriesModel);
	      graphic.updateProps(polygon, target, seriesModel);
	      data.setItemGraphicEl(newIdx, itemGroup);
	    }).remove(function (idx) {
	      group.remove(oldData.getItemGraphicEl(idx));
	    }).execute();
	    data.eachItemGraphicEl(function (itemGroup, idx) {
	      var itemModel = data.getItemModel(idx);
	      var polyline = itemGroup.childAt(0);
	      var polygon = itemGroup.childAt(1);
	      var symbolGroup = itemGroup.childAt(2);
	      var color = data.getItemVisual(idx, 'color');
	      group.add(itemGroup);
	      polyline.useStyle(zrUtil.defaults(itemModel.getModel('lineStyle.normal').getLineStyle(), {
	        fill: 'none',
	        stroke: color
	      }));
	      polyline.hoverStyle = itemModel.getModel('lineStyle.emphasis').getLineStyle();
	      var areaStyleModel = itemModel.getModel('areaStyle.normal');
	      var hoverAreaStyleModel = itemModel.getModel('areaStyle.emphasis');
	      var polygonIgnore = areaStyleModel.isEmpty() && areaStyleModel.parentModel.isEmpty();
	      var hoverPolygonIgnore = hoverAreaStyleModel.isEmpty() && hoverAreaStyleModel.parentModel.isEmpty();
	      hoverPolygonIgnore = hoverPolygonIgnore && polygonIgnore;
	      polygon.ignore = polygonIgnore;
	      polygon.useStyle(zrUtil.defaults(areaStyleModel.getAreaStyle(), {
	        fill: color,
	        opacity: 0.7
	      }));
	      polygon.hoverStyle = hoverAreaStyleModel.getAreaStyle();
	      var itemStyle = itemModel.getModel('itemStyle.normal').getItemStyle(['color']);
	      var itemHoverStyle = itemModel.getModel('itemStyle.emphasis').getItemStyle();
	      var labelModel = itemModel.getModel('label.normal');
	      var labelHoverModel = itemModel.getModel('label.emphasis');
	      symbolGroup.eachChild(function (symbolPath) {
	        symbolPath.setStyle(itemStyle);
	        symbolPath.hoverStyle = zrUtil.clone(itemHoverStyle);
	        graphic.setLabelStyle(symbolPath.style, symbolPath.hoverStyle, labelModel, labelHoverModel, {
	          labelFetcher: data.hostModel,
	          labelDataIndex: idx,
	          labelDimIndex: symbolPath.__dimIdx,
	          defaultText: data.get(data.dimensions[symbolPath.__dimIdx], idx),
	          autoColor: color,
	          isRectText: true
	        });
	      });

	      function onEmphasis() {
	        polygon.attr('ignore', hoverPolygonIgnore);
	      }

	      function onNormal() {
	        polygon.attr('ignore', polygonIgnore);
	      }

	      itemGroup.off('mouseover').off('mouseout').off('normal').off('emphasis');
	      itemGroup.on('emphasis', onEmphasis).on('mouseover', onEmphasis).on('normal', onNormal).on('mouseout', onNormal);
	      graphic.setHoverStyle(itemGroup);
	    });
	    this._data = data;
	  },
	  remove: function () {
	    this.group.removeAll();
	    this._data = null;
	  },
	  dispose: function () {}
	});

	module.exports = _default;

/***/ },
/* 335 */
/***/ function(module, exports) {

	function _default(ecModel) {
	  ecModel.eachSeriesByType('radar', function (seriesModel) {
	    var data = seriesModel.getData();
	    var points = [];
	    var coordSys = seriesModel.coordinateSystem;

	    if (!coordSys) {
	      return;
	    }

	    function pointsConverter(val, idx) {
	      points[idx] = points[idx] || [];
	      points[idx][i] = coordSys.dataToPoint(val, i);
	    }

	    for (var i = 0; i < coordSys.getIndicatorAxes().length; i++) {
	      var dim = data.dimensions[i];
	      data.each(dim, pointsConverter);
	    }

	    data.each(function (idx) {
	      // Close polygon
	      points[idx][0] && points[idx].push(points[idx][0].slice());
	      data.setItemLayout(idx, points[idx]);
	    });
	  });
	}

	module.exports = _default;

/***/ },
/* 336 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	// Backward compat for radar chart in 2
	function _default(option) {
	  var polarOptArr = option.polar;

	  if (polarOptArr) {
	    if (!zrUtil.isArray(polarOptArr)) {
	      polarOptArr = [polarOptArr];
	    }

	    var polarNotRadar = [];
	    zrUtil.each(polarOptArr, function (polarOpt, idx) {
	      if (polarOpt.indicator) {
	        if (polarOpt.type && !polarOpt.shape) {
	          polarOpt.shape = polarOpt.type;
	        }

	        option.radar = option.radar || [];

	        if (!zrUtil.isArray(option.radar)) {
	          option.radar = [option.radar];
	        }

	        option.radar.push(polarOpt);
	      } else {
	        polarNotRadar.push(polarOpt);
	      }
	    });
	    option.polar = polarNotRadar;
	  }

	  zrUtil.each(option.series, function (seriesOpt) {
	    if (seriesOpt && seriesOpt.type === 'radar' && seriesOpt.polarIndex) {
	      seriesOpt.radarIndex = seriesOpt.polarIndex;
	    }
	  });
	}

	module.exports = _default;

/***/ },
/* 337 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	__webpack_require__(338);

	__webpack_require__(346);

	__webpack_require__(352);

	__webpack_require__(339);

	var mapSymbolLayout = __webpack_require__(354);

	var mapVisual = __webpack_require__(355);

	var mapDataStatistic = __webpack_require__(356);

	var backwardCompat = __webpack_require__(357);

	var createDataSelectAction = __webpack_require__(318);

	echarts.registerLayout(mapSymbolLayout);
	echarts.registerVisual(mapVisual);
	echarts.registerProcessor(echarts.PRIORITY.PROCESSOR.STATISTIC, mapDataStatistic);
	echarts.registerPreprocessor(backwardCompat);
	createDataSelectAction('map', [{
	  type: 'mapToggleSelect',
	  event: 'mapselectchanged',
	  method: 'toggleSelected'
	}, {
	  type: 'mapSelect',
	  event: 'mapselected',
	  method: 'select'
	}, {
	  type: 'mapUnSelect',
	  event: 'mapunselected',
	  method: 'unSelect'
	}]);

/***/ },
/* 338 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var List = __webpack_require__(265);

	var SeriesModel = __webpack_require__(256);

	var completeDimensions = __webpack_require__(267);

	var _format = __webpack_require__(204);

	var encodeHTML = _format.encodeHTML;
	var addCommas = _format.addCommas;

	var dataSelectableMixin = __webpack_require__(316);

	var geoCreator = __webpack_require__(339);

	var MapSeries = SeriesModel.extend({
	  type: 'series.map',
	  dependencies: ['geo'],
	  layoutMode: 'box',

	  /**
	   * Only first map series of same mapType will drawMap
	   * @type {boolean}
	   */
	  needsDrawMap: false,

	  /**
	   * Group of all map series with same mapType
	   * @type {boolean}
	   */
	  seriesGroup: [],
	  init: function (option) {
	    this._fillOption(option, this.getMapType()); // this.option = option;


	    MapSeries.superApply(this, 'init', arguments);
	    this.updateSelectedMap(option.data);
	  },
	  getInitialData: function (option) {
	    var dimensions = completeDimensions(['value'], option.data || []);
	    var list = new List(dimensions, this);
	    list.initData(option.data);
	    return list;
	  },
	  mergeOption: function (newOption) {
	    this._fillOption(newOption, this.getMapType());

	    MapSeries.superApply(this, 'mergeOption', arguments);
	    this.updateSelectedMap(this.option.data);
	  },

	  /**
	   * If no host geo model, return null, which means using a
	   * inner exclusive geo model.
	   */
	  getHostGeoModel: function () {
	    var geoIndex = this.option.geoIndex;
	    return geoIndex != null ? this.dependentModels.geo[geoIndex] : null;
	  },
	  getMapType: function () {
	    return (this.getHostGeoModel() || this).option.map;
	  },
	  _fillOption: function (option, mapName) {
	    // Shallow clone
	    // option = zrUtil.extend({}, option);
	    option.data = geoCreator.getFilledRegions(option.data, mapName, option.nameMap); // return option;
	  },
	  getRawValue: function (dataIndex) {
	    // Use value stored in data instead because it is calculated from multiple series
	    // FIXME Provide all value of multiple series ?
	    return this.getData().get('value', dataIndex);
	  },

	  /**
	   * Get model of region
	   * @param  {string} name
	   * @return {module:echarts/model/Model}
	   */
	  getRegionModel: function (regionName) {
	    var data = this.getData();
	    return data.getItemModel(data.indexOfName(regionName));
	  },

	  /**
	   * Map tooltip formatter
	   *
	   * @param {number} dataIndex
	   */
	  formatTooltip: function (dataIndex) {
	    // FIXME orignalData and data is a bit confusing
	    var data = this.getData();
	    var formattedValue = addCommas(this.getRawValue(dataIndex));
	    var name = data.getName(dataIndex);
	    var seriesGroup = this.seriesGroup;
	    var seriesNames = [];

	    for (var i = 0; i < seriesGroup.length; i++) {
	      var otherIndex = seriesGroup[i].originalData.indexOfName(name);

	      if (!isNaN(seriesGroup[i].originalData.get('value', otherIndex))) {
	        seriesNames.push(encodeHTML(seriesGroup[i].name));
	      }
	    }

	    return seriesNames.join(', ') + '<br />' + encodeHTML(name + ' : ' + formattedValue);
	  },

	  /**
	   * @implement
	   */
	  getTooltipPosition: function (dataIndex) {
	    if (dataIndex != null) {
	      var name = this.getData().getName(dataIndex);
	      var geo = this.coordinateSystem;
	      var region = geo.getRegion(name);
	      return region && geo.dataToPoint(region.center);
	    }
	  },
	  setZoom: function (zoom) {
	    this.option.zoom = zoom;
	  },
	  setCenter: function (center) {
	    this.option.center = center;
	  },
	  defaultOption: {
	    // 一级层叠
	    zlevel: 0,
	    // 二级层叠
	    z: 2,
	    coordinateSystem: 'geo',
	    // map should be explicitly specified since ec3.
	    map: '',
	    // If `geoIndex` is not specified, a exclusive geo will be
	    // created. Otherwise use the specified geo component, and
	    // `map` and `mapType` are ignored.
	    // geoIndex: 0,
	    // 'center' | 'left' | 'right' | 'x%' | {number}
	    left: 'center',
	    // 'center' | 'top' | 'bottom' | 'x%' | {number}
	    top: 'center',
	    // right
	    // bottom
	    // width:
	    // height
	    // Aspect is width / height. Inited to be geoJson bbox aspect
	    // This parameter is used for scale this aspect
	    aspectScale: 0.75,
	    ///// Layout with center and size
	    // If you wan't to put map in a fixed size box with right aspect ratio
	    // This two properties may more conveninet
	    // layoutCenter: [50%, 50%]
	    // layoutSize: 100
	    // 数值合并方式，默认加和，可选为：
	    // 'sum' | 'average' | 'max' | 'min'
	    // mapValueCalculation: 'sum',
	    // 地图数值计算结果小数精度
	    // mapValuePrecision: 0,
	    // 显示图例颜色标识（系列标识的小圆点），图例开启时有效
	    showLegendSymbol: true,
	    // 选择模式，默认关闭，可选single，multiple
	    // selectedMode: false,
	    dataRangeHoverLink: true,
	    // 是否开启缩放及漫游模式
	    // roam: false,
	    // Define left-top, right-bottom coords to control view
	    // For example, [ [180, 90], [-180, -90] ],
	    // higher priority than center and zoom
	    boundingCoords: null,
	    // Default on center of map
	    center: null,
	    zoom: 1,
	    scaleLimit: null,
	    label: {
	      normal: {
	        show: false,
	        color: '#000'
	      },
	      emphasis: {
	        show: true,
	        color: 'rgb(100,0,0)'
	      }
	    },
	    // scaleLimit: null,
	    itemStyle: {
	      normal: {
	        // color: 各异,
	        borderWidth: 0.5,
	        borderColor: '#444',
	        areaColor: '#eee'
	      },
	      // 也是选中样式
	      emphasis: {
	        areaColor: 'rgba(255,215,0,0.8)'
	      }
	    }
	  }
	});
	zrUtil.mixin(MapSeries, dataSelectableMixin);
	var _default = MapSeries;
	module.exports = _default;

/***/ },
/* 339 */
/***/ function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(162);

	var __DEV__ = _config.__DEV__;

	var echarts = __webpack_require__(161);

	var zrUtil = __webpack_require__(166);

	var Geo = __webpack_require__(340);

	var layout = __webpack_require__(247);

	var numberUtil = __webpack_require__(205);

	/**
	 * Resize method bound to the geo
	 * @param {module:echarts/coord/geo/GeoModel|module:echarts/chart/map/MapModel} geoModel
	 * @param {module:echarts/ExtensionAPI} api
	 */
	function resizeGeo(geoModel, api) {
	  var boundingCoords = geoModel.get('boundingCoords');

	  if (boundingCoords != null) {
	    var leftTop = boundingCoords[0];
	    var rightBottom = boundingCoords[1];

	    if (isNaN(leftTop[0]) || isNaN(leftTop[1]) || isNaN(rightBottom[0]) || isNaN(rightBottom[1])) {} else {
	      this.setBoundingRect(leftTop[0], leftTop[1], rightBottom[0] - leftTop[0], rightBottom[1] - leftTop[1]);
	    }
	  }

	  var rect = this.getBoundingRect();
	  var boxLayoutOption;
	  var center = geoModel.get('layoutCenter');
	  var size = geoModel.get('layoutSize');
	  var viewWidth = api.getWidth();
	  var viewHeight = api.getHeight();
	  var aspectScale = geoModel.get('aspectScale') || 0.75;
	  var aspect = rect.width / rect.height * aspectScale;
	  var useCenterAndSize = false;

	  if (center && size) {
	    center = [numberUtil.parsePercent(center[0], viewWidth), numberUtil.parsePercent(center[1], viewHeight)];
	    size = numberUtil.parsePercent(size, Math.min(viewWidth, viewHeight));

	    if (!isNaN(center[0]) && !isNaN(center[1]) && !isNaN(size)) {
	      useCenterAndSize = true;
	    } else {}
	  }

	  var viewRect;

	  if (useCenterAndSize) {
	    var viewRect = {};

	    if (aspect > 1) {
	      // Width is same with size
	      viewRect.width = size;
	      viewRect.height = size / aspect;
	    } else {
	      viewRect.height = size;
	      viewRect.width = size * aspect;
	    }

	    viewRect.y = center[1] - viewRect.height / 2;
	    viewRect.x = center[0] - viewRect.width / 2;
	  } else {
	    // Use left/top/width/height
	    boxLayoutOption = geoModel.getBoxLayoutParams(); // 0.75 rate

	    boxLayoutOption.aspect = aspect;
	    viewRect = layout.getLayoutRect(boxLayoutOption, {
	      width: viewWidth,
	      height: viewHeight
	    });
	  }

	  this.setViewRect(viewRect.x, viewRect.y, viewRect.width, viewRect.height);
	  this.setCenter(geoModel.get('center'));
	  this.setZoom(geoModel.get('zoom'));
	}
	/**
	 * @param {module:echarts/coord/Geo} geo
	 * @param {module:echarts/model/Model} model
	 * @inner
	 */


	function setGeoCoords(geo, model) {
	  zrUtil.each(model.get('geoCoord'), function (geoCoord, name) {
	    geo.addGeoCoord(name, geoCoord);
	  });
	}

	var geoCreator = {
	  // For deciding which dimensions to use when creating list data
	  dimensions: Geo.prototype.dimensions,
	  create: function (ecModel, api) {
	    var geoList = []; // FIXME Create each time may be slow

	    ecModel.eachComponent('geo', function (geoModel, idx) {
	      var name = geoModel.get('map');
	      var mapData = echarts.getMap(name);
	      var geo = new Geo(name + idx, name, mapData && mapData.geoJson, mapData && mapData.specialAreas, geoModel.get('nameMap'));
	      geo.zoomLimit = geoModel.get('scaleLimit');
	      geoList.push(geo);
	      setGeoCoords(geo, geoModel);
	      geoModel.coordinateSystem = geo;
	      geo.model = geoModel; // Inject resize method

	      geo.resize = resizeGeo;
	      geo.resize(geoModel, api);
	    });
	    ecModel.eachSeries(function (seriesModel) {
	      var coordSys = seriesModel.get('coordinateSystem');

	      if (coordSys === 'geo') {
	        var geoIndex = seriesModel.get('geoIndex') || 0;
	        seriesModel.coordinateSystem = geoList[geoIndex];
	      }
	    }); // If has map series

	    var mapModelGroupBySeries = {};
	    ecModel.eachSeriesByType('map', function (seriesModel) {
	      if (!seriesModel.getHostGeoModel()) {
	        var mapType = seriesModel.getMapType();
	        mapModelGroupBySeries[mapType] = mapModelGroupBySeries[mapType] || [];
	        mapModelGroupBySeries[mapType].push(seriesModel);
	      }
	    });
	    zrUtil.each(mapModelGroupBySeries, function (mapSeries, mapType) {
	      var mapData = echarts.getMap(mapType);
	      var nameMapList = zrUtil.map(mapSeries, function (singleMapSeries) {
	        return singleMapSeries.get('nameMap');
	      });
	      var geo = new Geo(mapType, mapType, mapData && mapData.geoJson, mapData && mapData.specialAreas, zrUtil.mergeAll(nameMapList));
	      geo.zoomLimit = zrUtil.retrieve.apply(null, zrUtil.map(mapSeries, function (singleMapSeries) {
	        return singleMapSeries.get('scaleLimit');
	      }));
	      geoList.push(geo); // Inject resize method

	      geo.resize = resizeGeo;
	      geo.resize(mapSeries[0], api);
	      zrUtil.each(mapSeries, function (singleMapSeries) {
	        singleMapSeries.coordinateSystem = geo;
	        setGeoCoords(geo, singleMapSeries);
	      });
	    });
	    return geoList;
	  },

	  /**
	   * Fill given regions array
	   * @param  {Array.<Object>} originRegionArr
	   * @param  {string} mapName
	   * @param  {Object} [nameMap]
	   * @return {Array}
	   */
	  getFilledRegions: function (originRegionArr, mapName, nameMap) {
	    // Not use the original
	    var regionsArr = (originRegionArr || []).slice();
	    nameMap = nameMap || {};
	    var map = echarts.getMap(mapName);
	    var geoJson = map && map.geoJson;

	    if (!geoJson) {
	      return originRegionArr;
	    }

	    var dataNameMap = zrUtil.createHashMap();
	    var features = geoJson.features;

	    for (var i = 0; i < regionsArr.length; i++) {
	      dataNameMap.set(regionsArr[i].name, regionsArr[i]);
	    }

	    for (var i = 0; i < features.length; i++) {
	      var name = features[i].properties.name;

	      if (!dataNameMap.get(name)) {
	        if (nameMap.hasOwnProperty(name)) {
	          name = nameMap[name];
	        }

	        regionsArr.push({
	          name: name
	        });
	      }
	    }

	    return regionsArr;
	  }
	};
	echarts.registerCoordinateSystem('geo', geoCreator);
	var _default = geoCreator;
	module.exports = _default;

/***/ },
/* 340 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var BoundingRect = __webpack_require__(184);

	var parseGeoJson = __webpack_require__(278);

	var View = __webpack_require__(341);

	var fixNanhai = __webpack_require__(342);

	var fixTextCoord = __webpack_require__(343);

	var fixGeoCoord = __webpack_require__(344);

	var fixDiaoyuIsland = __webpack_require__(345);

	// Geo fix functions
	var geoFixFuncs = [fixNanhai, fixTextCoord, fixGeoCoord, fixDiaoyuIsland];
	/**
	 * [Geo description]
	 * @param {string} name Geo name
	 * @param {string} map Map type
	 * @param {Object} geoJson
	 * @param {Object} [specialAreas]
	 *        Specify the positioned areas by left, top, width, height
	 * @param {Object.<string, string>} [nameMap]
	 *        Specify name alias
	 */

	function Geo(name, map, geoJson, specialAreas, nameMap) {
	  View.call(this, name);
	  /**
	   * Map type
	   * @type {string}
	   */

	  this.map = map;
	  this._nameCoordMap = zrUtil.createHashMap();
	  this.loadGeoJson(geoJson, specialAreas, nameMap);
	}

	Geo.prototype = {
	  constructor: Geo,
	  type: 'geo',

	  /**
	   * @param {Array.<string>}
	   * @readOnly
	   */
	  dimensions: ['lng', 'lat'],

	  /**
	   * If contain given lng,lat coord
	   * @param {Array.<number>}
	   * @readOnly
	   */
	  containCoord: function (coord) {
	    var regions = this.regions;

	    for (var i = 0; i < regions.length; i++) {
	      if (regions[i].contain(coord)) {
	        return true;
	      }
	    }

	    return false;
	  },

	  /**
	   * @param {Object} geoJson
	   * @param {Object} [specialAreas]
	   *        Specify the positioned areas by left, top, width, height
	   * @param {Object.<string, string>} [nameMap]
	   *        Specify name alias
	   */
	  loadGeoJson: function (geoJson, specialAreas, nameMap) {
	    // https://jsperf.com/try-catch-performance-overhead
	    try {
	      this.regions = geoJson ? parseGeoJson(geoJson) : [];
	    } catch (e) {
	      throw 'Invalid geoJson format\n' + e.message;
	    }

	    specialAreas = specialAreas || {};
	    nameMap = nameMap || {};
	    var regions = this.regions;
	    var regionsMap = zrUtil.createHashMap();

	    for (var i = 0; i < regions.length; i++) {
	      var regionName = regions[i].name; // Try use the alias in nameMap

	      regionName = nameMap.hasOwnProperty(regionName) ? nameMap[regionName] : regionName;
	      regions[i].name = regionName;
	      regionsMap.set(regionName, regions[i]); // Add geoJson

	      this.addGeoCoord(regionName, regions[i].center); // Some area like Alaska in USA map needs to be tansformed
	      // to look better

	      var specialArea = specialAreas[regionName];

	      if (specialArea) {
	        regions[i].transformTo(specialArea.left, specialArea.top, specialArea.width, specialArea.height);
	      }
	    }

	    this._regionsMap = regionsMap;
	    this._rect = null;
	    zrUtil.each(geoFixFuncs, function (fixFunc) {
	      fixFunc(this);
	    }, this);
	  },
	  // Overwrite
	  transformTo: function (x, y, width, height) {
	    var rect = this.getBoundingRect();
	    rect = rect.clone(); // Longitute is inverted

	    rect.y = -rect.y - rect.height;
	    var viewTransform = this._viewTransform;
	    viewTransform.transform = rect.calculateTransform(new BoundingRect(x, y, width, height));
	    viewTransform.decomposeTransform();
	    var scale = viewTransform.scale;
	    scale[1] = -scale[1];
	    viewTransform.updateTransform();

	    this._updateTransform();
	  },

	  /**
	   * @param {string} name
	   * @return {module:echarts/coord/geo/Region}
	   */
	  getRegion: function (name) {
	    return this._regionsMap.get(name);
	  },
	  getRegionByCoord: function (coord) {
	    var regions = this.regions;

	    for (var i = 0; i < regions.length; i++) {
	      if (regions[i].contain(coord)) {
	        return regions[i];
	      }
	    }
	  },

	  /**
	   * Add geoCoord for indexing by name
	   * @param {string} name
	   * @param {Array.<number>} geoCoord
	   */
	  addGeoCoord: function (name, geoCoord) {
	    this._nameCoordMap.set(name, geoCoord);
	  },

	  /**
	   * Get geoCoord by name
	   * @param {string} name
	   * @return {Array.<number>}
	   */
	  getGeoCoord: function (name) {
	    return this._nameCoordMap.get(name);
	  },
	  // Overwrite
	  getBoundingRect: function () {
	    if (this._rect) {
	      return this._rect;
	    }

	    var rect;
	    var regions = this.regions;

	    for (var i = 0; i < regions.length; i++) {
	      var regionRect = regions[i].getBoundingRect();
	      rect = rect || regionRect.clone();
	      rect.union(regionRect);
	    } // FIXME Always return new ?


	    return this._rect = rect || new BoundingRect(0, 0, 0, 0);
	  },

	  /**
	   * @param {string|Array.<number>} data
	   * @return {Array.<number>}
	   */
	  dataToPoint: function (data) {
	    if (typeof data === 'string') {
	      // Map area name to geoCoord
	      data = this.getGeoCoord(data);
	    }

	    if (data) {
	      return View.prototype.dataToPoint.call(this, data);
	    }
	  },

	  /**
	   * @inheritDoc
	   */
	  convertToPixel: zrUtil.curry(doConvert, 'dataToPoint'),

	  /**
	   * @inheritDoc
	   */
	  convertFromPixel: zrUtil.curry(doConvert, 'pointToData')
	};
	zrUtil.mixin(Geo, View);

	function doConvert(methodName, ecModel, finder, value) {
	  var geoModel = finder.geoModel;
	  var seriesModel = finder.seriesModel;
	  var coordSys = geoModel ? geoModel.coordinateSystem : seriesModel ? seriesModel.coordinateSystem // For map.
	  || (seriesModel.getReferringComponents('geo')[0] || {}).coordinateSystem : null;
	  return coordSys === this ? coordSys[methodName](value) : null;
	}

	var _default = Geo;
	module.exports = _default;

/***/ },
/* 341 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var vector = __webpack_require__(168);

	var matrix = __webpack_require__(175);

	var BoundingRect = __webpack_require__(184);

	var Transformable = __webpack_require__(174);

	/**
	 * Simple view coordinate system
	 * Mapping given x, y to transformd view x, y
	 */
	var v2ApplyTransform = vector.applyTransform; // Dummy transform node

	function TransformDummy() {
	  Transformable.call(this);
	}

	zrUtil.mixin(TransformDummy, Transformable);

	function View(name) {
	  /**
	   * @type {string}
	   */
	  this.name = name;
	  /**
	   * @type {Object}
	   */

	  this.zoomLimit;
	  Transformable.call(this);
	  this._roamTransform = new TransformDummy();
	  this._viewTransform = new TransformDummy();
	  this._center;
	  this._zoom;
	}

	View.prototype = {
	  constructor: View,
	  type: 'view',

	  /**
	   * @param {Array.<string>}
	   * @readOnly
	   */
	  dimensions: ['x', 'y'],

	  /**
	   * Set bounding rect
	   * @param {number} x
	   * @param {number} y
	   * @param {number} width
	   * @param {number} height
	   */
	  // PENDING to getRect
	  setBoundingRect: function (x, y, width, height) {
	    this._rect = new BoundingRect(x, y, width, height);
	    return this._rect;
	  },

	  /**
	   * @return {module:zrender/core/BoundingRect}
	   */
	  // PENDING to getRect
	  getBoundingRect: function () {
	    return this._rect;
	  },

	  /**
	   * @param {number} x
	   * @param {number} y
	   * @param {number} width
	   * @param {number} height
	   */
	  setViewRect: function (x, y, width, height) {
	    this.transformTo(x, y, width, height);
	    this._viewRect = new BoundingRect(x, y, width, height);
	  },

	  /**
	   * Transformed to particular position and size
	   * @param {number} x
	   * @param {number} y
	   * @param {number} width
	   * @param {number} height
	   */
	  transformTo: function (x, y, width, height) {
	    var rect = this.getBoundingRect();
	    var viewTransform = this._viewTransform;
	    viewTransform.transform = rect.calculateTransform(new BoundingRect(x, y, width, height));
	    viewTransform.decomposeTransform();

	    this._updateTransform();
	  },

	  /**
	   * Set center of view
	   * @param {Array.<number>} [centerCoord]
	   */
	  setCenter: function (centerCoord) {
	    if (!centerCoord) {
	      return;
	    }

	    this._center = centerCoord;

	    this._updateCenterAndZoom();
	  },

	  /**
	   * @param {number} zoom
	   */
	  setZoom: function (zoom) {
	    zoom = zoom || 1;
	    var zoomLimit = this.zoomLimit;

	    if (zoomLimit) {
	      if (zoomLimit.max != null) {
	        zoom = Math.min(zoomLimit.max, zoom);
	      }

	      if (zoomLimit.min != null) {
	        zoom = Math.max(zoomLimit.min, zoom);
	      }
	    }

	    this._zoom = zoom;

	    this._updateCenterAndZoom();
	  },

	  /**
	   * Get default center without roam
	   */
	  getDefaultCenter: function () {
	    // Rect before any transform
	    var rawRect = this.getBoundingRect();
	    var cx = rawRect.x + rawRect.width / 2;
	    var cy = rawRect.y + rawRect.height / 2;
	    return [cx, cy];
	  },
	  getCenter: function () {
	    return this._center || this.getDefaultCenter();
	  },
	  getZoom: function () {
	    return this._zoom || 1;
	  },

	  /**
	   * @return {Array.<number}
	   */
	  getRoamTransform: function () {
	    return this._roamTransform;
	  },
	  _updateCenterAndZoom: function () {
	    // Must update after view transform updated
	    var viewTransformMatrix = this._viewTransform.getLocalTransform();

	    var roamTransform = this._roamTransform;
	    var defaultCenter = this.getDefaultCenter();
	    var center = this.getCenter();
	    var zoom = this.getZoom();
	    center = vector.applyTransform([], center, viewTransformMatrix);
	    defaultCenter = vector.applyTransform([], defaultCenter, viewTransformMatrix);
	    roamTransform.origin = center;
	    roamTransform.position = [defaultCenter[0] - center[0], defaultCenter[1] - center[1]];
	    roamTransform.scale = [zoom, zoom];

	    this._updateTransform();
	  },

	  /**
	   * Update transform from roam and mapLocation
	   * @private
	   */
	  _updateTransform: function () {
	    var roamTransform = this._roamTransform;
	    var viewTransform = this._viewTransform;
	    viewTransform.parent = roamTransform;
	    roamTransform.updateTransform();
	    viewTransform.updateTransform();
	    viewTransform.transform && matrix.copy(this.transform || (this.transform = []), viewTransform.transform);

	    if (this.transform) {
	      this.invTransform = this.invTransform || [];
	      matrix.invert(this.invTransform, this.transform);
	    } else {
	      this.invTransform = null;
	    }

	    this.decomposeTransform();
	  },

	  /**
	   * @return {module:zrender/core/BoundingRect}
	   */
	  getViewRect: function () {
	    return this._viewRect;
	  },

	  /**
	   * Get view rect after roam transform
	   * @return {module:zrender/core/BoundingRect}
	   */
	  getViewRectAfterRoam: function () {
	    var rect = this.getBoundingRect().clone();
	    rect.applyTransform(this.transform);
	    return rect;
	  },

	  /**
	   * Convert a single (lon, lat) data item to (x, y) point.
	   * @param {Array.<number>} data
	   * @return {Array.<number>}
	   */
	  dataToPoint: function (data) {
	    var transform = this.transform;
	    return transform ? v2ApplyTransform([], data, transform) : [data[0], data[1]];
	  },

	  /**
	   * Convert a (x, y) point to (lon, lat) data
	   * @param {Array.<number>} point
	   * @return {Array.<number>}
	   */
	  pointToData: function (point) {
	    var invTransform = this.invTransform;
	    return invTransform ? v2ApplyTransform([], point, invTransform) : [point[0], point[1]];
	  },

	  /**
	   * @implements
	   * see {module:echarts/CoodinateSystem}
	   */
	  convertToPixel: zrUtil.curry(doConvert, 'dataToPoint'),

	  /**
	   * @implements
	   * see {module:echarts/CoodinateSystem}
	   */
	  convertFromPixel: zrUtil.curry(doConvert, 'pointToData'),

	  /**
	   * @implements
	   * see {module:echarts/CoodinateSystem}
	   */
	  containPoint: function (point) {
	    return this.getViewRectAfterRoam().contain(point[0], point[1]);
	  }
	  /**
	   * @return {number}
	   */
	  // getScalarScale: function () {
	  //     // Use determinant square root of transform to mutiply scalar
	  //     var m = this.transform;
	  //     var det = Math.sqrt(Math.abs(m[0] * m[3] - m[2] * m[1]));
	  //     return det;
	  // }

	};
	zrUtil.mixin(View, Transformable);

	function doConvert(methodName, ecModel, finder, value) {
	  var seriesModel = finder.seriesModel;
	  var coordSys = seriesModel ? seriesModel.coordinateSystem : null; // e.g., graph.

	  return coordSys === this ? coordSys[methodName](value) : null;
	}

	var _default = View;
	module.exports = _default;

/***/ },
/* 342 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var Region = __webpack_require__(279);

	// Fix for 南海诸岛
	var geoCoord = [126, 25];
	var points = [[[0, 3.5], [7, 11.2], [15, 11.9], [30, 7], [42, 0.7], [52, 0.7], [56, 7.7], [59, 0.7], [64, 0.7], [64, 0], [5, 0], [0, 3.5]], [[13, 16.1], [19, 14.7], [16, 21.7], [11, 23.1], [13, 16.1]], [[12, 32.2], [14, 38.5], [15, 38.5], [13, 32.2], [12, 32.2]], [[16, 47.6], [12, 53.2], [13, 53.2], [18, 47.6], [16, 47.6]], [[6, 64.4], [8, 70], [9, 70], [8, 64.4], [6, 64.4]], [[23, 82.6], [29, 79.8], [30, 79.8], [25, 82.6], [23, 82.6]], [[37, 70.7], [43, 62.3], [44, 62.3], [39, 70.7], [37, 70.7]], [[48, 51.1], [51, 45.5], [53, 45.5], [50, 51.1], [48, 51.1]], [[51, 35], [51, 28.7], [53, 28.7], [53, 35], [51, 35]], [[52, 22.4], [55, 17.5], [56, 17.5], [53, 22.4], [52, 22.4]], [[58, 12.6], [62, 7], [63, 7], [60, 12.6], [58, 12.6]], [[0, 3.5], [0, 93.1], [64, 93.1], [64, 0], [63, 0], [63, 92.4], [1, 92.4], [1, 3.5], [0, 3.5]]];

	for (var i = 0; i < points.length; i++) {
	  for (var k = 0; k < points[i].length; k++) {
	    points[i][k][0] /= 10.5;
	    points[i][k][1] /= -10.5 / 0.75;
	    points[i][k][0] += geoCoord[0];
	    points[i][k][1] += geoCoord[1];
	  }
	}

	function _default(geo) {
	  if (geo.map === 'china') {
	    geo.regions.push(new Region('南海诸岛', zrUtil.map(points, function (exterior) {
	      return {
	        type: 'polygon',
	        exterior: exterior
	      };
	    }), geoCoord));
	  }
	}

	module.exports = _default;

/***/ },
/* 343 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var coordsOffsetMap = {
	  '南海诸岛': [32, 80],
	  // 全国
	  '广东': [0, -10],
	  '香港': [10, 5],
	  '澳门': [-10, 10],
	  //'北京': [-10, 0],
	  '天津': [5, 5]
	};

	function _default(geo) {
	  zrUtil.each(geo.regions, function (region) {
	    var coordFix = coordsOffsetMap[region.name];

	    if (coordFix) {
	      var cp = region.center;
	      cp[0] += coordFix[0] / 10.5;
	      cp[1] += -coordFix[1] / (10.5 / 0.75);
	    }
	  });
	}

	module.exports = _default;

/***/ },
/* 344 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var geoCoordMap = {
	  'Russia': [100, 60],
	  'United States': [-99, 38],
	  'United States of America': [-99, 38]
	};

	function _default(geo) {
	  zrUtil.each(geo.regions, function (region) {
	    var geoCoord = geoCoordMap[region.name];

	    if (geoCoord) {
	      var cp = region.center;
	      cp[0] = geoCoord[0];
	      cp[1] = geoCoord[1];
	    }
	  });
	}

	module.exports = _default;

/***/ },
/* 345 */
/***/ function(module, exports) {

	// Fix for 钓鱼岛
	// var Region = require('../Region');
	// var zrUtil = require('zrender/src/core/util');
	// var geoCoord = [126, 25];
	var points = [[[123.45165252685547, 25.73527164402261], [123.49731445312499, 25.73527164402261], [123.49731445312499, 25.750734064600884], [123.45165252685547, 25.750734064600884], [123.45165252685547, 25.73527164402261]]];

	function _default(geo) {
	  if (geo.map === 'china') {
	    for (var i = 0, len = geo.regions.length; i < len; ++i) {
	      if (geo.regions[i].name === '台湾') {
	        geo.regions[i].geometries.push({
	          type: 'polygon',
	          exterior: points[0]
	        });
	      }
	    }
	  }
	}

	module.exports = _default;

/***/ },
/* 346 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var zrUtil = __webpack_require__(166);

	var graphic = __webpack_require__(212);

	var MapDraw = __webpack_require__(347);

	var _default = echarts.extendChartView({
	  type: 'map',
	  render: function (mapModel, ecModel, api, payload) {
	    // Not render if it is an toggleSelect action from self
	    if (payload && payload.type === 'mapToggleSelect' && payload.from === this.uid) {
	      return;
	    }

	    var group = this.group;
	    group.removeAll();

	    if (mapModel.getHostGeoModel()) {
	      return;
	    } // Not update map if it is an roam action from self


	    if (!(payload && payload.type === 'geoRoam' && payload.componentType === 'series' && payload.seriesId === mapModel.id)) {
	      if (mapModel.needsDrawMap) {
	        var mapDraw = this._mapDraw || new MapDraw(api, true);
	        group.add(mapDraw.group);
	        mapDraw.draw(mapModel, ecModel, api, this, payload);
	        this._mapDraw = mapDraw;
	      } else {
	        // Remove drawed map
	        this._mapDraw && this._mapDraw.remove();
	        this._mapDraw = null;
	      }
	    } else {
	      var mapDraw = this._mapDraw;
	      mapDraw && group.add(mapDraw.group);
	    }

	    mapModel.get('showLegendSymbol') && ecModel.getComponent('legend') && this._renderSymbols(mapModel, ecModel, api);
	  },
	  remove: function () {
	    this._mapDraw && this._mapDraw.remove();
	    this._mapDraw = null;
	    this.group.removeAll();
	  },
	  dispose: function () {
	    this._mapDraw && this._mapDraw.remove();
	    this._mapDraw = null;
	  },
	  _renderSymbols: function (mapModel, ecModel, api) {
	    var originalData = mapModel.originalData;
	    var group = this.group;
	    originalData.each('value', function (value, idx) {
	      if (isNaN(value)) {
	        return;
	      }

	      var layout = originalData.getItemLayout(idx);

	      if (!layout || !layout.point) {
	        // Not exists in map
	        return;
	      }

	      var point = layout.point;
	      var offset = layout.offset;
	      var circle = new graphic.Circle({
	        style: {
	          // Because the special of map draw.
	          // Which needs statistic of multiple series and draw on one map.
	          // And each series also need a symbol with legend color
	          //
	          // Layout and visual are put one the different data
	          fill: mapModel.getData().getVisual('color')
	        },
	        shape: {
	          cx: point[0] + offset * 9,
	          cy: point[1],
	          r: 3
	        },
	        silent: true,
	        // Do not overlap the first series, on which labels are displayed.
	        z2: !offset ? 10 : 8
	      }); // First data on the same region

	      if (!offset) {
	        var fullData = mapModel.mainSeries.getData();
	        var name = originalData.getName(idx);
	        var fullIndex = fullData.indexOfName(name);
	        var itemModel = originalData.getItemModel(idx);
	        var labelModel = itemModel.getModel('label.normal');
	        var hoverLabelModel = itemModel.getModel('label.emphasis');
	        var polygonGroups = fullData.getItemGraphicEl(fullIndex);
	        var normalText = zrUtil.retrieve2(mapModel.getFormattedLabel(idx, 'normal'), name);
	        var emphasisText = zrUtil.retrieve2(mapModel.getFormattedLabel(idx, 'emphasis'), normalText);

	        var onEmphasis = function () {
	          var hoverStyle = graphic.setTextStyle({}, hoverLabelModel, {
	            text: hoverLabelModel.get('show') ? emphasisText : null
	          }, {
	            isRectText: true,
	            useInsideStyle: false
	          }, true);
	          circle.style.extendFrom(hoverStyle); // Make label upper than others if overlaps.

	          circle.__mapOriginalZ2 = circle.z2;
	          circle.z2 += 1;
	        };

	        var onNormal = function () {
	          graphic.setTextStyle(circle.style, labelModel, {
	            text: labelModel.get('show') ? normalText : null,
	            textPosition: labelModel.getShallow('position') || 'bottom'
	          }, {
	            isRectText: true,
	            useInsideStyle: false
	          });

	          if (circle.__mapOriginalZ2 != null) {
	            circle.z2 = circle.__mapOriginalZ2;
	            circle.__mapOriginalZ2 = null;
	          }
	        };

	        polygonGroups.on('mouseover', onEmphasis).on('mouseout', onNormal).on('emphasis', onEmphasis).on('normal', onNormal);
	        onNormal();
	      }

	      group.add(circle);
	    });
	  }
	});

	module.exports = _default;

/***/ },
/* 347 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var RoamController = __webpack_require__(348);

	var roamHelper = __webpack_require__(350);

	var _cursorHelper = __webpack_require__(351);

	var onIrrelevantElement = _cursorHelper.onIrrelevantElement;

	var graphic = __webpack_require__(212);

	function getFixedItemStyle(model, scale) {
	  var itemStyle = model.getItemStyle();
	  var areaColor = model.get('areaColor'); // If user want the color not to be changed when hover,
	  // they should both set areaColor and color to be null.

	  if (areaColor != null) {
	    itemStyle.fill = areaColor;
	  }

	  return itemStyle;
	}

	function updateMapSelectHandler(mapDraw, mapOrGeoModel, group, api, fromView) {
	  group.off('click');
	  group.off('mousedown');

	  if (mapOrGeoModel.get('selectedMode')) {
	    group.on('mousedown', function () {
	      mapDraw._mouseDownFlag = true;
	    });
	    group.on('click', function (e) {
	      if (!mapDraw._mouseDownFlag) {
	        return;
	      }

	      mapDraw._mouseDownFlag = false;
	      var el = e.target;

	      while (!el.__regions) {
	        el = el.parent;
	      }

	      if (!el) {
	        return;
	      }

	      var action = {
	        type: (mapOrGeoModel.mainType === 'geo' ? 'geo' : 'map') + 'ToggleSelect',
	        batch: zrUtil.map(el.__regions, function (region) {
	          return {
	            name: region.name,
	            from: fromView.uid
	          };
	        })
	      };
	      action[mapOrGeoModel.mainType + 'Id'] = mapOrGeoModel.id;
	      api.dispatchAction(action);
	      updateMapSelected(mapOrGeoModel, group);
	    });
	  }
	}

	function updateMapSelected(mapOrGeoModel, group) {
	  // FIXME
	  group.eachChild(function (otherRegionEl) {
	    zrUtil.each(otherRegionEl.__regions, function (region) {
	      otherRegionEl.trigger(mapOrGeoModel.isSelected(region.name) ? 'emphasis' : 'normal');
	    });
	  });
	}
	/**
	 * @alias module:echarts/component/helper/MapDraw
	 * @param {module:echarts/ExtensionAPI} api
	 * @param {boolean} updateGroup
	 */


	function MapDraw(api, updateGroup) {
	  var group = new graphic.Group();
	  /**
	   * @type {module:echarts/component/helper/RoamController}
	   * @private
	   */

	  this._controller = new RoamController(api.getZr());
	  /**
	   * @type {Object} {target, zoom, zoomLimit}
	   * @private
	   */

	  this._controllerHost = {
	    target: updateGroup ? group : null
	  };
	  /**
	   * @type {module:zrender/container/Group}
	   * @readOnly
	   */

	  this.group = group;
	  /**
	   * @type {boolean}
	   * @private
	   */

	  this._updateGroup = updateGroup;
	  /**
	   * This flag is used to make sure that only one among
	   * `pan`, `zoom`, `click` can occurs, otherwise 'selected'
	   * action may be triggered when `pan`, which is unexpected.
	   * @type {booelan}
	   */

	  this._mouseDownFlag;
	}

	MapDraw.prototype = {
	  constructor: MapDraw,
	  draw: function (mapOrGeoModel, ecModel, api, fromView, payload) {
	    var isGeo = mapOrGeoModel.mainType === 'geo'; // Map series has data. GEO model that controlled by map series
	    // will be assigned with map data. Other GEO model has no data.

	    var data = mapOrGeoModel.getData && mapOrGeoModel.getData();
	    isGeo && ecModel.eachComponent({
	      mainType: 'series',
	      subType: 'map'
	    }, function (mapSeries) {
	      if (!data && mapSeries.getHostGeoModel() === mapOrGeoModel) {
	        data = mapSeries.getData();
	      }
	    });
	    var geo = mapOrGeoModel.coordinateSystem;
	    var group = this.group;
	    var scale = geo.scale;
	    var groupNewProp = {
	      position: geo.position,
	      scale: scale
	    }; // No animation when first draw or in action

	    if (!group.childAt(0) || payload) {
	      group.attr(groupNewProp);
	    } else {
	      graphic.updateProps(group, groupNewProp, mapOrGeoModel);
	    }

	    group.removeAll();
	    var itemStyleAccessPath = ['itemStyle', 'normal'];
	    var hoverItemStyleAccessPath = ['itemStyle', 'emphasis'];
	    var labelAccessPath = ['label', 'normal'];
	    var hoverLabelAccessPath = ['label', 'emphasis'];
	    var nameMap = zrUtil.createHashMap();
	    zrUtil.each(geo.regions, function (region) {
	      // Consider in GeoJson properties.name may be duplicated, for example,
	      // there is multiple region named "United Kindom" or "France" (so many
	      // colonies). And it is not appropriate to merge them in geo, which
	      // will make them share the same label and bring trouble in label
	      // location calculation.
	      var regionGroup = nameMap.get(region.name) || nameMap.set(region.name, new graphic.Group());
	      var compoundPath = new graphic.CompoundPath({
	        shape: {
	          paths: []
	        }
	      });
	      regionGroup.add(compoundPath);
	      var regionModel = mapOrGeoModel.getRegionModel(region.name) || mapOrGeoModel;
	      var itemStyleModel = regionModel.getModel(itemStyleAccessPath);
	      var hoverItemStyleModel = regionModel.getModel(hoverItemStyleAccessPath);
	      var itemStyle = getFixedItemStyle(itemStyleModel, scale);
	      var hoverItemStyle = getFixedItemStyle(hoverItemStyleModel, scale);
	      var labelModel = regionModel.getModel(labelAccessPath);
	      var hoverLabelModel = regionModel.getModel(hoverLabelAccessPath);
	      var dataIdx; // Use the itemStyle in data if has data

	      if (data) {
	        dataIdx = data.indexOfName(region.name); // Only visual color of each item will be used. It can be encoded by dataRange
	        // But visual color of series is used in symbol drawing
	        //
	        // Visual color for each series is for the symbol draw

	        var visualColor = data.getItemVisual(dataIdx, 'color', true);

	        if (visualColor) {
	          itemStyle.fill = visualColor;
	        }
	      }

	      zrUtil.each(region.geometries, function (geometry) {
	        if (geometry.type !== 'polygon') {
	          return;
	        }

	        compoundPath.shape.paths.push(new graphic.Polygon({
	          shape: {
	            points: geometry.exterior
	          }
	        }));

	        for (var i = 0; i < (geometry.interiors ? geometry.interiors.length : 0); i++) {
	          compoundPath.shape.paths.push(new graphic.Polygon({
	            shape: {
	              points: geometry.interiors[i]
	            }
	          }));
	        }
	      });
	      compoundPath.setStyle(itemStyle);
	      compoundPath.style.strokeNoScale = true;
	      compoundPath.culling = true; // Label

	      var showLabel = labelModel.get('show');
	      var hoverShowLabel = hoverLabelModel.get('show');
	      var isDataNaN = data && isNaN(data.get('value', dataIdx));
	      var itemLayout = data && data.getItemLayout(dataIdx); // In the following cases label will be drawn
	      // 1. In map series and data value is NaN
	      // 2. In geo component
	      // 4. Region has no series legendSymbol, which will be add a showLabel flag in mapSymbolLayout

	      if (isGeo || isDataNaN && (showLabel || hoverShowLabel) || itemLayout && itemLayout.showLabel) {
	        var query = !isGeo ? dataIdx : region.name;
	        var labelFetcher; // Consider dataIdx not found.

	        if (!data || dataIdx >= 0) {
	          labelFetcher = mapOrGeoModel;
	        }

	        var textEl = new graphic.Text({
	          position: region.center.slice(),
	          scale: [1 / scale[0], 1 / scale[1]],
	          z2: 10,
	          silent: true
	        });
	        graphic.setLabelStyle(textEl.style, textEl.hoverStyle = {}, labelModel, hoverLabelModel, {
	          labelFetcher: labelFetcher,
	          labelDataIndex: query,
	          defaultText: region.name,
	          useInsideStyle: false
	        }, {
	          textAlign: 'center',
	          textVerticalAlign: 'middle'
	        });
	        regionGroup.add(textEl);
	      } // setItemGraphicEl, setHoverStyle after all polygons and labels
	      // are added to the rigionGroup


	      if (data) {
	        data.setItemGraphicEl(dataIdx, regionGroup);
	      } else {
	        var regionModel = mapOrGeoModel.getRegionModel(region.name); // Package custom mouse event for geo component

	        compoundPath.eventData = {
	          componentType: 'geo',
	          geoIndex: mapOrGeoModel.componentIndex,
	          name: region.name,
	          region: regionModel && regionModel.option || {}
	        };
	      }

	      var groupRegions = regionGroup.__regions || (regionGroup.__regions = []);
	      groupRegions.push(region);
	      graphic.setHoverStyle(regionGroup, hoverItemStyle, {
	        hoverSilentOnTouch: !!mapOrGeoModel.get('selectedMode')
	      });
	      group.add(regionGroup);
	    });

	    this._updateController(mapOrGeoModel, ecModel, api);

	    updateMapSelectHandler(this, mapOrGeoModel, group, api, fromView);
	    updateMapSelected(mapOrGeoModel, group);
	  },
	  remove: function () {
	    this.group.removeAll();

	    this._controller.dispose();

	    this._controllerHost = {};
	  },
	  _updateController: function (mapOrGeoModel, ecModel, api) {
	    var geo = mapOrGeoModel.coordinateSystem;
	    var controller = this._controller;
	    var controllerHost = this._controllerHost;
	    controllerHost.zoomLimit = mapOrGeoModel.get('scaleLimit');
	    controllerHost.zoom = geo.getZoom(); // roamType is will be set default true if it is null

	    controller.enable(mapOrGeoModel.get('roam') || false);
	    var mainType = mapOrGeoModel.mainType;

	    function makeActionBase() {
	      var action = {
	        type: 'geoRoam',
	        componentType: mainType
	      };
	      action[mainType + 'Id'] = mapOrGeoModel.id;
	      return action;
	    }

	    controller.off('pan').on('pan', function (dx, dy) {
	      this._mouseDownFlag = false;
	      roamHelper.updateViewOnPan(controllerHost, dx, dy);
	      api.dispatchAction(zrUtil.extend(makeActionBase(), {
	        dx: dx,
	        dy: dy
	      }));
	    }, this);
	    controller.off('zoom').on('zoom', function (zoom, mouseX, mouseY) {
	      this._mouseDownFlag = false;
	      roamHelper.updateViewOnZoom(controllerHost, zoom, mouseX, mouseY);
	      api.dispatchAction(zrUtil.extend(makeActionBase(), {
	        zoom: zoom,
	        originX: mouseX,
	        originY: mouseY
	      }));

	      if (this._updateGroup) {
	        var group = this.group;
	        var scale = group.scale;
	        group.traverse(function (el) {
	          if (el.type === 'text') {
	            el.attr('scale', [1 / scale[0], 1 / scale[1]]);
	          }
	        });
	      }
	    }, this);
	    controller.setPointerChecker(function (e, x, y) {
	      return geo.getViewRectAfterRoam().contain(x, y) && !onIrrelevantElement(e, api, mapOrGeoModel);
	    });
	  }
	};
	var _default = MapDraw;
	module.exports = _default;

/***/ },
/* 348 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var Eventful = __webpack_require__(170);

	var eventTool = __webpack_require__(199);

	var interactionMutex = __webpack_require__(349);

	/**
	 * @alias module:echarts/component/helper/RoamController
	 * @constructor
	 * @mixin {module:zrender/mixin/Eventful}
	 *
	 * @param {module:zrender/zrender~ZRender} zr
	 */
	function RoamController(zr) {
	  /**
	   * @type {Function}
	   */
	  this.pointerChecker;
	  /**
	   * @type {module:zrender}
	   */

	  this._zr = zr;
	  /**
	   * @type {Object}
	   */

	  this._opt = {}; // Avoid two roamController bind the same handler

	  var bind = zrUtil.bind;
	  var mousedownHandler = bind(mousedown, this);
	  var mousemoveHandler = bind(mousemove, this);
	  var mouseupHandler = bind(mouseup, this);
	  var mousewheelHandler = bind(mousewheel, this);
	  var pinchHandler = bind(pinch, this);
	  Eventful.call(this);
	  /**
	   * @param {Function} pointerChecker
	   *                   input: x, y
	   *                   output: boolean
	   */

	  this.setPointerChecker = function (pointerChecker) {
	    this.pointerChecker = pointerChecker;
	  };
	  /**
	   * Notice: only enable needed types. For example, if 'zoom'
	   * is not needed, 'zoom' should not be enabled, otherwise
	   * default mousewheel behaviour (scroll page) will be disabled.
	   *
	   * @param  {boolean|string} [controlType=true] Specify the control type,
	   *                          which can be null/undefined or true/false
	   *                          or 'pan/move' or 'zoom'/'scale'
	   * @param {Object} [opt]
	   * @param {Object} [opt.zoomOnMouseWheel=true]
	   * @param {Object} [opt.moveOnMouseMove=true]
	   * @param {Object} [opt.preventDefaultMouseMove=true] When pan.
	   */


	  this.enable = function (controlType, opt) {
	    // Disable previous first
	    this.disable();
	    this._opt = zrUtil.defaults(zrUtil.clone(opt) || {}, {
	      zoomOnMouseWheel: true,
	      moveOnMouseMove: true,
	      preventDefaultMouseMove: true
	    });

	    if (controlType == null) {
	      controlType = true;
	    }

	    if (controlType === true || controlType === 'move' || controlType === 'pan') {
	      zr.on('mousedown', mousedownHandler);
	      zr.on('mousemove', mousemoveHandler);
	      zr.on('mouseup', mouseupHandler);
	    }

	    if (controlType === true || controlType === 'scale' || controlType === 'zoom') {
	      zr.on('mousewheel', mousewheelHandler);
	      zr.on('pinch', pinchHandler);
	    }
	  };

	  this.disable = function () {
	    zr.off('mousedown', mousedownHandler);
	    zr.off('mousemove', mousemoveHandler);
	    zr.off('mouseup', mouseupHandler);
	    zr.off('mousewheel', mousewheelHandler);
	    zr.off('pinch', pinchHandler);
	  };

	  this.dispose = this.disable;

	  this.isDragging = function () {
	    return this._dragging;
	  };

	  this.isPinching = function () {
	    return this._pinching;
	  };
	}

	zrUtil.mixin(RoamController, Eventful);

	function mousedown(e) {
	  if (eventTool.notLeftMouse(e) || e.target && e.target.draggable) {
	    return;
	  }

	  var x = e.offsetX;
	  var y = e.offsetY; // Only check on mosedown, but not mousemove.
	  // Mouse can be out of target when mouse moving.

	  if (this.pointerChecker && this.pointerChecker(e, x, y)) {
	    this._x = x;
	    this._y = y;
	    this._dragging = true;
	  }
	}

	function mousemove(e) {
	  if (eventTool.notLeftMouse(e) || !checkKeyBinding(this, 'moveOnMouseMove', e) || !this._dragging || e.gestureEvent === 'pinch' || interactionMutex.isTaken(this._zr, 'globalPan')) {
	    return;
	  }

	  var x = e.offsetX;
	  var y = e.offsetY;
	  var oldX = this._x;
	  var oldY = this._y;
	  var dx = x - oldX;
	  var dy = y - oldY;
	  this._x = x;
	  this._y = y;
	  this._opt.preventDefaultMouseMove && eventTool.stop(e.event);
	  this.trigger('pan', dx, dy, oldX, oldY, x, y);
	}

	function mouseup(e) {
	  if (!eventTool.notLeftMouse(e)) {
	    this._dragging = false;
	  }
	}

	function mousewheel(e) {
	  // wheelDelta maybe -0 in chrome mac.
	  if (!checkKeyBinding(this, 'zoomOnMouseWheel', e) || e.wheelDelta === 0) {
	    return;
	  } // Convenience:
	  // Mac and VM Windows on Mac: scroll up: zoom out.
	  // Windows: scroll up: zoom in.


	  var zoomDelta = e.wheelDelta > 0 ? 1.1 : 1 / 1.1;
	  zoom.call(this, e, zoomDelta, e.offsetX, e.offsetY);
	}

	function pinch(e) {
	  if (interactionMutex.isTaken(this._zr, 'globalPan')) {
	    return;
	  }

	  var zoomDelta = e.pinchScale > 1 ? 1.1 : 1 / 1.1;
	  zoom.call(this, e, zoomDelta, e.pinchX, e.pinchY);
	}

	function zoom(e, zoomDelta, zoomX, zoomY) {
	  if (this.pointerChecker && this.pointerChecker(e, zoomX, zoomY)) {
	    // When mouse is out of roamController rect,
	    // default befavoius should not be be disabled, otherwise
	    // page sliding is disabled, contrary to expectation.
	    eventTool.stop(e.event);
	    this.trigger('zoom', zoomDelta, zoomX, zoomY);
	  }
	}

	function checkKeyBinding(roamController, prop, e) {
	  var setting = roamController._opt[prop];
	  return setting && (!zrUtil.isString(setting) || e.event[setting + 'Key']);
	}

	var _default = RoamController;
	module.exports = _default;

/***/ },
/* 349 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var ATTR = '\0_ec_interaction_mutex';

	function take(zr, resourceKey, userKey) {
	  var store = getStore(zr);
	  store[resourceKey] = userKey;
	}

	function release(zr, resourceKey, userKey) {
	  var store = getStore(zr);
	  var uKey = store[resourceKey];

	  if (uKey === userKey) {
	    store[resourceKey] = null;
	  }
	}

	function isTaken(zr, resourceKey) {
	  return !!getStore(zr)[resourceKey];
	}

	function getStore(zr) {
	  return zr[ATTR] || (zr[ATTR] = {});
	}
	/**
	 * payload: {
	 *     type: 'takeGlobalCursor',
	 *     key: 'dataZoomSelect', or 'brush', or ...,
	 *         If no userKey, release global cursor.
	 * }
	 */


	echarts.registerAction({
	  type: 'takeGlobalCursor',
	  event: 'globalCursorTaken',
	  update: 'update'
	}, function () {});
	exports.take = take;
	exports.release = release;
	exports.isTaken = isTaken;

/***/ },
/* 350 */
/***/ function(module, exports) {

	/**
	 * For geo and graph.
	 *
	 * @param {Object} controllerHost
	 * @param {module:zrender/Element} controllerHost.target
	 */
	function updateViewOnPan(controllerHost, dx, dy) {
	  var target = controllerHost.target;
	  var pos = target.position;
	  pos[0] += dx;
	  pos[1] += dy;
	  target.dirty();
	}
	/**
	 * For geo and graph.
	 *
	 * @param {Object} controllerHost
	 * @param {module:zrender/Element} controllerHost.target
	 * @param {number} controllerHost.zoom
	 * @param {number} controllerHost.zoomLimit like: {min: 1, max: 2}
	 */


	function updateViewOnZoom(controllerHost, zoomDelta, zoomX, zoomY) {
	  var target = controllerHost.target;
	  var zoomLimit = controllerHost.zoomLimit;
	  var pos = target.position;
	  var scale = target.scale;
	  var newZoom = controllerHost.zoom = controllerHost.zoom || 1;
	  newZoom *= zoomDelta;

	  if (zoomLimit) {
	    var zoomMin = zoomLimit.min || 0;
	    var zoomMax = zoomLimit.max || Infinity;
	    newZoom = Math.max(Math.min(zoomMax, newZoom), zoomMin);
	  }

	  var zoomScale = newZoom / controllerHost.zoom;
	  controllerHost.zoom = newZoom; // Keep the mouse center when scaling

	  pos[0] -= (zoomX - pos[0]) * (zoomScale - 1);
	  pos[1] -= (zoomY - pos[1]) * (zoomScale - 1);
	  scale[0] *= zoomScale;
	  scale[1] *= zoomScale;
	  target.dirty();
	}

	exports.updateViewOnPan = updateViewOnPan;
	exports.updateViewOnZoom = updateViewOnZoom;

/***/ },
/* 351 */
/***/ function(module, exports) {

	var IRRELEVANT_EXCLUDES = {
	  'axisPointer': 1,
	  'tooltip': 1,
	  'brush': 1
	};
	/**
	 * Avoid that: mouse click on a elements that is over geo or graph,
	 * but roam is triggered.
	 */

	function onIrrelevantElement(e, api, targetCoordSysModel) {
	  var model = api.getComponentByElement(e.topTarget); // If model is axisModel, it works only if it is injected with coordinateSystem.

	  var coordSys = model && model.coordinateSystem;
	  return model && model !== targetCoordSysModel && !IRRELEVANT_EXCLUDES[model.mainType] && coordSys && coordSys.model !== targetCoordSysModel;
	}

	exports.onIrrelevantElement = onIrrelevantElement;

/***/ },
/* 352 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var zrUtil = __webpack_require__(166);

	var _roamHelper = __webpack_require__(353);

	var updateCenterAndZoom = _roamHelper.updateCenterAndZoom;

	/**
	 * @payload
	 * @property {string} [componentType=series]
	 * @property {number} [dx]
	 * @property {number} [dy]
	 * @property {number} [zoom]
	 * @property {number} [originX]
	 * @property {number} [originY]
	 */
	echarts.registerAction({
	  type: 'geoRoam',
	  event: 'geoRoam',
	  update: 'updateLayout'
	}, function (payload, ecModel) {
	  var componentType = payload.componentType || 'series';
	  ecModel.eachComponent({
	    mainType: componentType,
	    query: payload
	  }, function (componentModel) {
	    var geo = componentModel.coordinateSystem;

	    if (geo.type !== 'geo') {
	      return;
	    }

	    var res = updateCenterAndZoom(geo, payload, componentModel.get('scaleLimit'));
	    componentModel.setCenter && componentModel.setCenter(res.center);
	    componentModel.setZoom && componentModel.setZoom(res.zoom); // All map series with same `map` use the same geo coordinate system
	    // So the center and zoom must be in sync. Include the series not selected by legend

	    if (componentType === 'series') {
	      zrUtil.each(componentModel.seriesGroup, function (seriesModel) {
	        seriesModel.setCenter(res.center);
	        seriesModel.setZoom(res.zoom);
	      });
	    }
	  });
	});

/***/ },
/* 353 */
/***/ function(module, exports) {

	/**
	 * @param {module:echarts/coord/View} view
	 * @param {Object} payload
	 * @param {Object} [zoomLimit]
	 */
	function updateCenterAndZoom(view, payload, zoomLimit) {
	  var previousZoom = view.getZoom();
	  var center = view.getCenter();
	  var zoom = payload.zoom;
	  var point = view.dataToPoint(center);

	  if (payload.dx != null && payload.dy != null) {
	    point[0] -= payload.dx;
	    point[1] -= payload.dy;
	    var center = view.pointToData(point);
	    view.setCenter(center);
	  }

	  if (zoom != null) {
	    if (zoomLimit) {
	      var zoomMin = zoomLimit.min || 0;
	      var zoomMax = zoomLimit.max || Infinity;
	      zoom = Math.max(Math.min(previousZoom * zoom, zoomMax), zoomMin) / previousZoom;
	    } // Zoom on given point(originX, originY)


	    view.scale[0] *= zoom;
	    view.scale[1] *= zoom;
	    var position = view.position;
	    var fixX = (payload.originX - position[0]) * (zoom - 1);
	    var fixY = (payload.originY - position[1]) * (zoom - 1);
	    position[0] -= fixX;
	    position[1] -= fixY;
	    view.updateTransform(); // Get the new center

	    var center = view.pointToData(point);
	    view.setCenter(center);
	    view.setZoom(zoom * previousZoom);
	  }

	  return {
	    center: view.getCenter(),
	    zoom: view.getZoom()
	  };
	}

	exports.updateCenterAndZoom = updateCenterAndZoom;

/***/ },
/* 354 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	function _default(ecModel) {
	  var processedMapType = {};
	  ecModel.eachSeriesByType('map', function (mapSeries) {
	    var mapType = mapSeries.getMapType();

	    if (mapSeries.getHostGeoModel() || processedMapType[mapType]) {
	      return;
	    }

	    var mapSymbolOffsets = {};
	    zrUtil.each(mapSeries.seriesGroup, function (subMapSeries) {
	      var geo = subMapSeries.coordinateSystem;
	      var data = subMapSeries.originalData;

	      if (subMapSeries.get('showLegendSymbol') && ecModel.getComponent('legend')) {
	        data.each('value', function (value, idx) {
	          var name = data.getName(idx);
	          var region = geo.getRegion(name); // If input series.data is [11, 22, '-'/null/undefined, 44],
	          // it will be filled with NaN: [11, 22, NaN, 44] and NaN will
	          // not be drawn. So here must validate if value is NaN.

	          if (!region || isNaN(value)) {
	            return;
	          }

	          var offset = mapSymbolOffsets[name] || 0;
	          var point = geo.dataToPoint(region.center);
	          mapSymbolOffsets[name] = offset + 1;
	          data.setItemLayout(idx, {
	            point: point,
	            offset: offset
	          });
	        });
	      }
	    }); // Show label of those region not has legendSymbol(which is offset 0)

	    var data = mapSeries.getData();
	    data.each(function (idx) {
	      var name = data.getName(idx);
	      var layout = data.getItemLayout(idx) || {};
	      layout.showLabel = !mapSymbolOffsets[name];
	      data.setItemLayout(idx, layout);
	    });
	    processedMapType[mapType] = true;
	  });
	}

	module.exports = _default;

/***/ },
/* 355 */
/***/ function(module, exports) {

	function _default(ecModel) {
	  ecModel.eachSeriesByType('map', function (seriesModel) {
	    var colorList = seriesModel.get('color');
	    var itemStyleModel = seriesModel.getModel('itemStyle.normal');
	    var areaColor = itemStyleModel.get('areaColor');
	    var color = itemStyleModel.get('color') || colorList[seriesModel.seriesIndex % colorList.length];
	    seriesModel.getData().setVisual({
	      'areaColor': areaColor,
	      'color': color
	    });
	  });
	}

	module.exports = _default;

/***/ },
/* 356 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	// FIXME 公用？

	/**
	 * @param {Array.<module:echarts/data/List>} datas
	 * @param {string} statisticType 'average' 'sum'
	 * @inner
	 */
	function dataStatistics(datas, statisticType) {
	  var dataNameMap = {};
	  var dims = ['value'];
	  zrUtil.each(datas, function (data) {
	    data.each(dims, function (value, idx) {
	      // Add prefix to avoid conflict with Object.prototype.
	      var mapKey = 'ec-' + data.getName(idx);
	      dataNameMap[mapKey] = dataNameMap[mapKey] || [];

	      if (!isNaN(value)) {
	        dataNameMap[mapKey].push(value);
	      }
	    });
	  });
	  return datas[0].map(dims, function (value, idx) {
	    var mapKey = 'ec-' + datas[0].getName(idx);
	    var sum = 0;
	    var min = Infinity;
	    var max = -Infinity;
	    var len = dataNameMap[mapKey].length;

	    for (var i = 0; i < len; i++) {
	      min = Math.min(min, dataNameMap[mapKey][i]);
	      max = Math.max(max, dataNameMap[mapKey][i]);
	      sum += dataNameMap[mapKey][i];
	    }

	    var result;

	    if (statisticType === 'min') {
	      result = min;
	    } else if (statisticType === 'max') {
	      result = max;
	    } else if (statisticType === 'average') {
	      result = sum / len;
	    } else {
	      result = sum;
	    }

	    return len === 0 ? NaN : result;
	  });
	}

	function _default(ecModel) {
	  var seriesGroups = {};
	  ecModel.eachSeriesByType('map', function (seriesModel) {
	    var hostGeoModel = seriesModel.getHostGeoModel();
	    var key = hostGeoModel ? 'o' + hostGeoModel.id : 'i' + seriesModel.getMapType();
	    (seriesGroups[key] = seriesGroups[key] || []).push(seriesModel);
	  });
	  zrUtil.each(seriesGroups, function (seriesList, key) {
	    var data = dataStatistics(zrUtil.map(seriesList, function (seriesModel) {
	      return seriesModel.getData();
	    }), seriesList[0].get('mapValueCalculation'));

	    for (var i = 0; i < seriesList.length; i++) {
	      seriesList[i].originalData = seriesList[i].getData();
	    } // FIXME Put where?


	    for (var i = 0; i < seriesList.length; i++) {
	      seriesList[i].seriesGroup = seriesList;
	      seriesList[i].needsDrawMap = i === 0 && !seriesList[i].getHostGeoModel();
	      seriesList[i].setData(data.cloneShallow());
	      seriesList[i].mainSeries = seriesList[0];
	    }
	  });
	}

	module.exports = _default;

/***/ },
/* 357 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	function _default(option) {
	  // Save geoCoord
	  var mapSeries = [];
	  zrUtil.each(option.series, function (seriesOpt) {
	    if (seriesOpt && seriesOpt.type === 'map') {
	      mapSeries.push(seriesOpt);
	      seriesOpt.map = seriesOpt.map || seriesOpt.mapType; // Put x, y, width, height, x2, y2 in the top level

	      zrUtil.defaults(seriesOpt, seriesOpt.mapLocation);
	    }
	  });
	}

	module.exports = _default;

/***/ },
/* 358 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var zrUtil = __webpack_require__(166);

	__webpack_require__(359);

	__webpack_require__(362);

	__webpack_require__(364);

	var visualSymbol = __webpack_require__(289);

	var orthogonalLayout = __webpack_require__(365);

	var radialLayout = __webpack_require__(368);

	echarts.registerVisual(zrUtil.curry(visualSymbol, 'tree', 'circle', null));
	echarts.registerLayout(orthogonalLayout);
	echarts.registerLayout(radialLayout);

/***/ },
/* 359 */
/***/ function(module, exports, __webpack_require__) {

	var SeriesModel = __webpack_require__(256);

	var Tree = __webpack_require__(360);

	var _format = __webpack_require__(204);

	var encodeHTML = _format.encodeHTML;

	/**
	 * @file Create data struct and define tree view's series model
	 */
	var _default = SeriesModel.extend({
	  type: 'series.tree',
	  layoutInfo: null,
	  // can support the position parameters 'left', 'top','right','bottom', 'width',
	  // 'height' in the setOption() with 'merge' mode normal.
	  layoutMode: 'box',

	  /**
	   * Init a tree data structure from data in option series
	   * @param  {Object} option  the object used to config echarts view
	   * @return {module:echarts/data/List} storage initial data
	   */
	  getInitialData: function (option) {
	    //create an virtual root
	    var root = {
	      name: option.name,
	      children: option.data
	    };
	    var leaves = option.leaves || {};
	    var treeOption = {};
	    treeOption.leaves = leaves;
	    var tree = Tree.createTree(root, this, treeOption);
	    var treeDepth = 0;
	    tree.eachNode('preorder', function (node) {
	      if (node.depth > treeDepth) {
	        treeDepth = node.depth;
	      }
	    });
	    var expandAndCollapse = option.expandAndCollapse;
	    var expandTreeDepth = expandAndCollapse && option.initialTreeDepth >= 0 ? option.initialTreeDepth : treeDepth;
	    tree.root.eachNode('preorder', function (node) {
	      var item = node.hostTree.data.getRawDataItem(node.dataIndex);
	      node.isExpand = item && item.collapsed != null ? !item.collapsed : node.depth <= expandTreeDepth;
	    });
	    return tree.data;
	  },

	  /**
	   * @override
	   * @param {number} dataIndex
	   */
	  formatTooltip: function (dataIndex) {
	    var tree = this.getData().tree;
	    var realRoot = tree.root.children[0];
	    var node = tree.getNodeByDataIndex(dataIndex);
	    var value = node.getValue();
	    var name = node.name;

	    while (node && node !== realRoot) {
	      name = node.parentNode.name + '.' + name;
	      node = node.parentNode;
	    }

	    return encodeHTML(name + (isNaN(value) || value == null ? '' : ' : ' + value));
	  },
	  defaultOption: {
	    zlevel: 0,
	    z: 2,
	    // the position of the whole view
	    left: '12%',
	    top: '12%',
	    right: '12%',
	    bottom: '12%',
	    // the layout of the tree, two value can be selected, 'orthogonal' or 'radial'
	    layout: 'orthogonal',
	    // the orient of orthoginal layout, can be setted to 'horizontal' or 'vertical'
	    orient: 'horizontal',
	    symbol: 'emptyCircle',
	    symbolSize: 7,
	    expandAndCollapse: true,
	    initialTreeDepth: 2,
	    lineStyle: {
	      normal: {
	        color: '#ccc',
	        width: 1.5,
	        curveness: 0.5
	      }
	    },
	    itemStyle: {
	      normal: {
	        color: 'lightsteelblue',
	        borderColor: '#c23531',
	        borderWidth: 1.5
	      }
	    },
	    label: {
	      normal: {
	        show: true,
	        color: '#555'
	      }
	    },
	    leaves: {
	      label: {
	        normal: {
	          show: true
	        }
	      }
	    },
	    animationEasing: 'linear',
	    animationDuration: 700,
	    animationDurationUpdate: 1000
	  }
	});

	module.exports = _default;

/***/ },
/* 360 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var Model = __webpack_require__(206);

	var List = __webpack_require__(265);

	var linkList = __webpack_require__(361);

	var completeDimensions = __webpack_require__(267);

	/**
	 * Tree data structure
	 *
	 * @module echarts/data/Tree
	 */

	/**
	 * @constructor module:echarts/data/Tree~TreeNode
	 * @param {string} name
	 * @param {module:echarts/data/Tree} hostTree
	 */
	var TreeNode = function (name, hostTree) {
	  /**
	   * @type {string}
	   */
	  this.name = name || '';
	  /**
	   * Depth of node
	   *
	   * @type {number}
	   * @readOnly
	   */

	  this.depth = 0;
	  /**
	   * Height of the subtree rooted at this node.
	   * @type {number}
	   * @readOnly
	   */

	  this.height = 0;
	  /**
	   * @type {module:echarts/data/Tree~TreeNode}
	   * @readOnly
	   */

	  this.parentNode = null;
	  /**
	   * Reference to list item.
	   * Do not persistent dataIndex outside,
	   * besause it may be changed by list.
	   * If dataIndex -1,
	   * this node is logical deleted (filtered) in list.
	   *
	   * @type {Object}
	   * @readOnly
	   */

	  this.dataIndex = -1;
	  /**
	   * @type {Array.<module:echarts/data/Tree~TreeNode>}
	   * @readOnly
	   */

	  this.children = [];
	  /**
	   * @type {Array.<module:echarts/data/Tree~TreeNode>}
	   * @pubilc
	   */

	  this.viewChildren = [];
	  /**
	   * @type {moduel:echarts/data/Tree}
	   * @readOnly
	   */

	  this.hostTree = hostTree;
	};

	TreeNode.prototype = {
	  constructor: TreeNode,

	  /**
	   * The node is removed.
	   * @return {boolean} is removed.
	   */
	  isRemoved: function () {
	    return this.dataIndex < 0;
	  },

	  /**
	   * Travel this subtree (include this node).
	   * Usage:
	   *    node.eachNode(function () { ... }); // preorder
	   *    node.eachNode('preorder', function () { ... }); // preorder
	   *    node.eachNode('postorder', function () { ... }); // postorder
	   *    node.eachNode(
	   *        {order: 'postorder', attr: 'viewChildren'},
	   *        function () { ... }
	   *    ); // postorder
	   *
	   * @param {(Object|string)} options If string, means order.
	   * @param {string=} options.order 'preorder' or 'postorder'
	   * @param {string=} options.attr 'children' or 'viewChildren'
	   * @param {Function} cb If in preorder and return false,
	   *                      its subtree will not be visited.
	   * @param {Object} [context]
	   */
	  eachNode: function (options, cb, context) {
	    if (typeof options === 'function') {
	      context = cb;
	      cb = options;
	      options = null;
	    }

	    options = options || {};

	    if (zrUtil.isString(options)) {
	      options = {
	        order: options
	      };
	    }

	    var order = options.order || 'preorder';
	    var children = this[options.attr || 'children'];
	    var suppressVisitSub;
	    order === 'preorder' && (suppressVisitSub = cb.call(context, this));

	    for (var i = 0; !suppressVisitSub && i < children.length; i++) {
	      children[i].eachNode(options, cb, context);
	    }

	    order === 'postorder' && cb.call(context, this);
	  },

	  /**
	   * Update depth and height of this subtree.
	   *
	   * @param  {number} depth
	   */
	  updateDepthAndHeight: function (depth) {
	    var height = 0;
	    this.depth = depth;

	    for (var i = 0; i < this.children.length; i++) {
	      var child = this.children[i];
	      child.updateDepthAndHeight(depth + 1);

	      if (child.height > height) {
	        height = child.height;
	      }
	    }

	    this.height = height + 1;
	  },

	  /**
	   * @param  {string} id
	   * @return {module:echarts/data/Tree~TreeNode}
	   */
	  getNodeById: function (id) {
	    if (this.getId() === id) {
	      return this;
	    }

	    for (var i = 0, children = this.children, len = children.length; i < len; i++) {
	      var res = children[i].getNodeById(id);

	      if (res) {
	        return res;
	      }
	    }
	  },

	  /**
	   * @param {module:echarts/data/Tree~TreeNode} node
	   * @return {boolean}
	   */
	  contains: function (node) {
	    if (node === this) {
	      return true;
	    }

	    for (var i = 0, children = this.children, len = children.length; i < len; i++) {
	      var res = children[i].contains(node);

	      if (res) {
	        return res;
	      }
	    }
	  },

	  /**
	   * @param {boolean} includeSelf Default false.
	   * @return {Array.<module:echarts/data/Tree~TreeNode>} order: [root, child, grandchild, ...]
	   */
	  getAncestors: function (includeSelf) {
	    var ancestors = [];
	    var node = includeSelf ? this : this.parentNode;

	    while (node) {
	      ancestors.push(node);
	      node = node.parentNode;
	    }

	    ancestors.reverse();
	    return ancestors;
	  },

	  /**
	   * @param {string|Array=} [dimension='value'] Default 'value'. can be 0, 1, 2, 3
	   * @return {number} Value.
	   */
	  getValue: function (dimension) {
	    var data = this.hostTree.data;
	    return data.get(data.getDimension(dimension || 'value'), this.dataIndex);
	  },

	  /**
	   * @param {Object} layout
	   * @param {boolean=} [merge=false]
	   */
	  setLayout: function (layout, merge) {
	    this.dataIndex >= 0 && this.hostTree.data.setItemLayout(this.dataIndex, layout, merge);
	  },

	  /**
	   * @return {Object} layout
	   */
	  getLayout: function () {
	    return this.hostTree.data.getItemLayout(this.dataIndex);
	  },

	  /**
	   * @param {string} [path]
	   * @return {module:echarts/model/Model}
	   */
	  getModel: function (path) {
	    if (this.dataIndex < 0) {
	      return;
	    }

	    var hostTree = this.hostTree;
	    var itemModel = hostTree.data.getItemModel(this.dataIndex);
	    var levelModel = this.getLevelModel();
	    var leavesModel;

	    if (!levelModel && (this.children.length === 0 || this.children.length !== 0 && this.isExpand === false)) {
	      leavesModel = this.getLeavesModel();
	    }

	    return itemModel.getModel(path, (levelModel || leavesModel || hostTree.hostModel).getModel(path));
	  },

	  /**
	   * @return {module:echarts/model/Model}
	   */
	  getLevelModel: function () {
	    return (this.hostTree.levelModels || [])[this.depth];
	  },

	  /**
	   * @return {module:echarts/model/Model}
	   */
	  getLeavesModel: function () {
	    return this.hostTree.leavesModel;
	  },

	  /**
	   * @example
	   *  setItemVisual('color', color);
	   *  setItemVisual({
	   *      'color': color
	   *  });
	   */
	  setVisual: function (key, value) {
	    this.dataIndex >= 0 && this.hostTree.data.setItemVisual(this.dataIndex, key, value);
	  },

	  /**
	   * Get item visual
	   */
	  getVisual: function (key, ignoreParent) {
	    return this.hostTree.data.getItemVisual(this.dataIndex, key, ignoreParent);
	  },

	  /**
	   * @public
	   * @return {number}
	   */
	  getRawIndex: function () {
	    return this.hostTree.data.getRawIndex(this.dataIndex);
	  },

	  /**
	   * @public
	   * @return {string}
	   */
	  getId: function () {
	    return this.hostTree.data.getId(this.dataIndex);
	  }
	};
	/**
	 * @constructor
	 * @alias module:echarts/data/Tree
	 * @param {module:echarts/model/Model} hostModel
	 * @param {Array.<Object>} levelOptions
	 * @param {Object} leavesOption
	 */

	function Tree(hostModel, levelOptions, leavesOption) {
	  /**
	   * @type {module:echarts/data/Tree~TreeNode}
	   * @readOnly
	   */
	  this.root;
	  /**
	   * @type {module:echarts/data/List}
	   * @readOnly
	   */

	  this.data;
	  /**
	   * Index of each item is the same as the raw index of coresponding list item.
	   * @private
	   * @type {Array.<module:echarts/data/Tree~TreeNode}
	   */

	  this._nodes = [];
	  /**
	   * @private
	   * @readOnly
	   * @type {module:echarts/model/Model}
	   */

	  this.hostModel = hostModel;
	  /**
	   * @private
	   * @readOnly
	   * @type {Array.<module:echarts/model/Model}
	   */

	  this.levelModels = zrUtil.map(levelOptions || [], function (levelDefine) {
	    return new Model(levelDefine, hostModel, hostModel.ecModel);
	  });
	  this.leavesModel = new Model(leavesOption || {}, hostModel, hostModel.ecModel);
	}

	Tree.prototype = {
	  constructor: Tree,
	  type: 'tree',

	  /**
	   * Travel this subtree (include this node).
	   * Usage:
	   *    node.eachNode(function () { ... }); // preorder
	   *    node.eachNode('preorder', function () { ... }); // preorder
	   *    node.eachNode('postorder', function () { ... }); // postorder
	   *    node.eachNode(
	   *        {order: 'postorder', attr: 'viewChildren'},
	   *        function () { ... }
	   *    ); // postorder
	   *
	   * @param {(Object|string)} options If string, means order.
	   * @param {string=} options.order 'preorder' or 'postorder'
	   * @param {string=} options.attr 'children' or 'viewChildren'
	   * @param {Function} cb
	   * @param {Object}   [context]
	   */
	  eachNode: function (options, cb, context) {
	    this.root.eachNode(options, cb, context);
	  },

	  /**
	   * @param {number} dataIndex
	   * @return {module:echarts/data/Tree~TreeNode}
	   */
	  getNodeByDataIndex: function (dataIndex) {
	    var rawIndex = this.data.getRawIndex(dataIndex);
	    return this._nodes[rawIndex];
	  },

	  /**
	   * @param {string} name
	   * @return {module:echarts/data/Tree~TreeNode}
	   */
	  getNodeByName: function (name) {
	    return this.root.getNodeByName(name);
	  },

	  /**
	   * Update item available by list,
	   * when list has been performed options like 'filterSelf' or 'map'.
	   */
	  update: function () {
	    var data = this.data;
	    var nodes = this._nodes;

	    for (var i = 0, len = nodes.length; i < len; i++) {
	      nodes[i].dataIndex = -1;
	    }

	    for (var i = 0, len = data.count(); i < len; i++) {
	      nodes[data.getRawIndex(i)].dataIndex = i;
	    }
	  },

	  /**
	   * Clear all layouts
	   */
	  clearLayouts: function () {
	    this.data.clearItemLayouts();
	  }
	};
	/**
	 * data node format:
	 * {
	 *     name: ...
	 *     value: ...
	 *     children: [
	 *         {
	 *             name: ...
	 *             value: ...
	 *             children: ...
	 *         },
	 *         ...
	 *     ]
	 * }
	 *
	 * @static
	 * @param {Object} dataRoot Root node.
	 * @param {module:echarts/model/Model} hostModel
	 * @param {Object} treeOptions
	 * @param {Array.<Object>} treeOptions.levels
	 * @param {Array.<Object>} treeOptions.leaves
	 * @return module:echarts/data/Tree
	 */

	Tree.createTree = function (dataRoot, hostModel, treeOptions) {
	  var tree = new Tree(hostModel, treeOptions.levels, treeOptions.leaves);
	  var listData = [];
	  var dimMax = 1;
	  buildHierarchy(dataRoot);

	  function buildHierarchy(dataNode, parentNode) {
	    var value = dataNode.value;
	    dimMax = Math.max(dimMax, zrUtil.isArray(value) ? value.length : 1);
	    listData.push(dataNode);
	    var node = new TreeNode(dataNode.name, tree);
	    parentNode ? addChild(node, parentNode) : tree.root = node;

	    tree._nodes.push(node);

	    var children = dataNode.children;

	    if (children) {
	      for (var i = 0; i < children.length; i++) {
	        buildHierarchy(children[i], node);
	      }
	    }
	  }

	  tree.root.updateDepthAndHeight(0);
	  var dimensions = completeDimensions([{
	    name: 'value'
	  }], listData, {
	    dimCount: dimMax
	  });
	  var list = new List(dimensions, hostModel);
	  list.initData(listData);
	  linkList({
	    mainData: list,
	    struct: tree,
	    structAttr: 'tree'
	  });
	  tree.update();
	  return tree;
	};
	/**
	 * It is needed to consider the mess of 'list', 'hostModel' when creating a TreeNote,
	 * so this function is not ready and not necessary to be public.
	 *
	 * @param {(module:echarts/data/Tree~TreeNode|Object)} child
	 */


	function addChild(child, node) {
	  var children = node.children;

	  if (child.parentNode === node) {
	    return;
	  }

	  children.push(child);
	  child.parentNode = node;
	}

	var _default = Tree;
	module.exports = _default;

/***/ },
/* 361 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	/**
	 * Link lists and struct (graph or tree)
	 */
	var each = zrUtil.each;
	var DATAS = '\0__link_datas';
	var MAIN_DATA = '\0__link_mainData'; // Caution:
	// In most case, either list or its shallow clones (see list.cloneShallow)
	// is active in echarts process. So considering heap memory consumption,
	// we do not clone tree or graph, but share them among list and its shallow clones.
	// But in some rare case, we have to keep old list (like do animation in chart). So
	// please take care that both the old list and the new list share the same tree/graph.

	/**
	 * @param {Object} opt
	 * @param {module:echarts/data/List} opt.mainData
	 * @param {Object} [opt.struct] For example, instance of Graph or Tree.
	 * @param {string} [opt.structAttr] designation: list[structAttr] = struct;
	 * @param {Object} [opt.datas] {dataType: data},
	 *                 like: {node: nodeList, edge: edgeList}.
	 *                 Should contain mainData.
	 * @param {Object} [opt.datasAttr] {dataType: attr},
	 *                 designation: struct[datasAttr[dataType]] = list;
	 */

	function linkList(opt) {
	  var mainData = opt.mainData;
	  var datas = opt.datas;

	  if (!datas) {
	    datas = {
	      main: mainData
	    };
	    opt.datasAttr = {
	      main: 'data'
	    };
	  }

	  opt.datas = opt.mainData = null;
	  linkAll(mainData, datas, opt); // Porxy data original methods.

	  each(datas, function (data) {
	    each(mainData.TRANSFERABLE_METHODS, function (methodName) {
	      data.wrapMethod(methodName, zrUtil.curry(transferInjection, opt));
	    });
	  }); // Beyond transfer, additional features should be added to `cloneShallow`.

	  mainData.wrapMethod('cloneShallow', zrUtil.curry(cloneShallowInjection, opt)); // Only mainData trigger change, because struct.update may trigger
	  // another changable methods, which may bring about dead lock.

	  each(mainData.CHANGABLE_METHODS, function (methodName) {
	    mainData.wrapMethod(methodName, zrUtil.curry(changeInjection, opt));
	  }); // Make sure datas contains mainData.

	  zrUtil.assert(datas[mainData.dataType] === mainData);
	}

	function transferInjection(opt, res) {
	  if (isMainData(this)) {
	    // Transfer datas to new main data.
	    var datas = zrUtil.extend({}, this[DATAS]);
	    datas[this.dataType] = res;
	    linkAll(res, datas, opt);
	  } else {
	    // Modify the reference in main data to point newData.
	    linkSingle(res, this.dataType, this[MAIN_DATA], opt);
	  }

	  return res;
	}

	function changeInjection(opt, res) {
	  opt.struct && opt.struct.update(this);
	  return res;
	}

	function cloneShallowInjection(opt, res) {
	  // cloneShallow, which brings about some fragilities, may be inappropriate
	  // to be exposed as an API. So for implementation simplicity we can make
	  // the restriction that cloneShallow of not-mainData should not be invoked
	  // outside, but only be invoked here.
	  each(res[DATAS], function (data, dataType) {
	    data !== res && linkSingle(data.cloneShallow(), dataType, res, opt);
	  });
	  return res;
	}
	/**
	 * Supplement method to List.
	 *
	 * @public
	 * @param {string} [dataType] If not specified, return mainData.
	 * @return {module:echarts/data/List}
	 */


	function getLinkedData(dataType) {
	  var mainData = this[MAIN_DATA];
	  return dataType == null || mainData == null ? mainData : mainData[DATAS][dataType];
	}

	function isMainData(data) {
	  return data[MAIN_DATA] === data;
	}

	function linkAll(mainData, datas, opt) {
	  mainData[DATAS] = {};
	  each(datas, function (data, dataType) {
	    linkSingle(data, dataType, mainData, opt);
	  });
	}

	function linkSingle(data, dataType, mainData, opt) {
	  mainData[DATAS][dataType] = data;
	  data[MAIN_DATA] = mainData;
	  data.dataType = dataType;

	  if (opt.struct) {
	    data[opt.structAttr] = opt.struct;
	    opt.struct[opt.datasAttr[dataType]] = data;
	  } // Supplement method.


	  data.getLinkedData = getLinkedData;
	}

	var _default = linkList;
	module.exports = _default;

/***/ },
/* 362 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var graphic = __webpack_require__(212);

	var SymbolClz = __webpack_require__(285);

	var _layoutHelper = __webpack_require__(363);

	var radialCoordinate = _layoutHelper.radialCoordinate;

	var echarts = __webpack_require__(161);

	/**
	 * @file  This file used to draw tree view
	 */
	var _default = echarts.extendChartView({
	  type: 'tree',

	  /**
	   * Init the chart
	   * @override
	   * @param  {module:echarts/model/Global} ecModel
	   * @param  {module:echarts/ExtensionAPI} api
	   */
	  init: function (ecModel, api) {
	    /**
	     * @private
	     * @type {module:echarts/data/Tree}
	     */
	    this._oldTree;
	    /**
	     * @private
	     * @type {module:zrender/container/Group}
	     */

	    this._mainGroup = new graphic.Group();
	    this.group.add(this._mainGroup);
	  },
	  render: function (seriesModel, ecModel, api, payload) {
	    var data = seriesModel.getData();
	    var layoutInfo = seriesModel.layoutInfo;
	    var group = this._mainGroup;
	    var layout = seriesModel.get('layout');

	    if (layout === 'radial') {
	      group.attr('position', [layoutInfo.x + layoutInfo.width / 2, layoutInfo.y + layoutInfo.height / 2]);
	    } else {
	      group.attr('position', [layoutInfo.x, layoutInfo.y]);
	    }

	    var oldData = this._data;
	    var seriesScope = {
	      expandAndCollapse: seriesModel.get('expandAndCollapse'),
	      layout: layout,
	      orient: seriesModel.get('orient'),
	      curvature: seriesModel.get('lineStyle.normal.curveness'),
	      symbolRotate: seriesModel.get('symbolRotate'),
	      symbolOffset: seriesModel.get('symbolOffset'),
	      hoverAnimation: seriesModel.get('hoverAnimation'),
	      useNameLabel: true,
	      fadeIn: true
	    };
	    data.diff(oldData).add(function (newIdx) {
	      if (symbolNeedsDraw(data, newIdx)) {
	        // create node and edge
	        updateNode(data, newIdx, null, group, seriesModel, seriesScope);
	      }
	    }).update(function (newIdx, oldIdx) {
	      var symbolEl = oldData.getItemGraphicEl(oldIdx);

	      if (!symbolNeedsDraw(data, newIdx)) {
	        symbolEl && removeNode(data, newIdx, symbolEl, group, seriesModel, seriesScope);
	        return;
	      } // update  node and edge


	      updateNode(data, newIdx, symbolEl, group, seriesModel, seriesScope);
	    }).remove(function (oldIdx) {
	      var symbolEl = oldData.getItemGraphicEl(oldIdx);
	      removeNode(data, oldIdx, symbolEl, group, seriesModel, seriesScope);
	    }).execute();

	    if (seriesScope.expandAndCollapse === true) {
	      data.eachItemGraphicEl(function (el, dataIndex) {
	        el.off('click').on('click', function () {
	          api.dispatchAction({
	            type: 'treeExpandAndCollapse',
	            seriesId: seriesModel.id,
	            dataIndex: dataIndex
	          });
	        });
	      });
	    }

	    this._data = data;
	  },
	  dispose: function () {},
	  remove: function () {
	    this._mainGroup.removeAll();

	    this._data = null;
	  }
	});

	function symbolNeedsDraw(data, dataIndex) {
	  var layout = data.getItemLayout(dataIndex);
	  return layout && !isNaN(layout.x) && !isNaN(layout.y) && data.getItemVisual(dataIndex, 'symbol') !== 'none';
	}

	function getTreeNodeStyle(node, itemModel, seriesScope) {
	  seriesScope.itemModel = itemModel;
	  seriesScope.itemStyle = itemModel.getModel('itemStyle.normal').getItemStyle();
	  seriesScope.hoverItemStyle = itemModel.getModel('itemStyle.emphasis').getItemStyle();
	  seriesScope.lineStyle = itemModel.getModel('lineStyle.normal').getLineStyle();
	  seriesScope.labelModel = itemModel.getModel('label.normal');
	  seriesScope.hoverLabelModel = itemModel.getModel('label.emphasis');

	  if (node.isExpand === false && node.children.length !== 0) {
	    seriesScope.symbolInnerColor = seriesScope.itemStyle.fill;
	  } else {
	    seriesScope.symbolInnerColor = '#fff';
	  }

	  return seriesScope;
	}

	function updateNode(data, dataIndex, symbolEl, group, seriesModel, seriesScope) {
	  var isInit = !symbolEl;
	  var node = data.tree.getNodeByDataIndex(dataIndex);
	  var itemModel = node.getModel();
	  var seriesScope = getTreeNodeStyle(node, itemModel, seriesScope);
	  var virtualRoot = data.tree.root;
	  var source = node.parentNode === virtualRoot ? node : node.parentNode || node;
	  var sourceSymbolEl = data.getItemGraphicEl(source.dataIndex);
	  var sourceLayout = source.getLayout();
	  var sourceOldLayout = sourceSymbolEl ? {
	    x: sourceSymbolEl.position[0],
	    y: sourceSymbolEl.position[1],
	    rawX: sourceSymbolEl.__radialOldRawX,
	    rawY: sourceSymbolEl.__radialOldRawY
	  } : sourceLayout;
	  var targetLayout = node.getLayout();

	  if (isInit) {
	    symbolEl = new SymbolClz(data, dataIndex, seriesScope);
	    symbolEl.attr('position', [sourceOldLayout.x, sourceOldLayout.y]);
	  } else {
	    symbolEl.updateData(data, dataIndex, seriesScope);
	  }

	  symbolEl.__radialOldRawX = symbolEl.__radialRawX;
	  symbolEl.__radialOldRawY = symbolEl.__radialRawY;
	  symbolEl.__radialRawX = targetLayout.rawX;
	  symbolEl.__radialRawY = targetLayout.rawY;
	  group.add(symbolEl);
	  data.setItemGraphicEl(dataIndex, symbolEl);
	  graphic.updateProps(symbolEl, {
	    position: [targetLayout.x, targetLayout.y]
	  }, seriesModel);
	  var symbolPath = symbolEl.getSymbolPath();

	  if (seriesScope.layout === 'radial') {
	    var realRoot = virtualRoot.children[0];
	    var rootLayout = realRoot.getLayout();
	    var length = realRoot.children.length;
	    var rad;
	    var isLeft;

	    if (targetLayout.x === rootLayout.x && node.isExpand === true) {
	      var center = {};
	      center.x = (realRoot.children[0].getLayout().x + realRoot.children[length - 1].getLayout().x) / 2;
	      center.y = (realRoot.children[0].getLayout().y + realRoot.children[length - 1].getLayout().y) / 2;
	      rad = Math.atan2(center.y - rootLayout.y, center.x - rootLayout.x);

	      if (rad < 0) {
	        rad = Math.PI * 2 + rad;
	      }

	      isLeft = center.x < rootLayout.x;

	      if (isLeft) {
	        rad = rad - Math.PI;
	      }
	    } else {
	      rad = Math.atan2(targetLayout.y - rootLayout.y, targetLayout.x - rootLayout.x);

	      if (rad < 0) {
	        rad = Math.PI * 2 + rad;
	      }

	      if (node.children.length === 0 || node.children.length !== 0 && node.isExpand === false) {
	        isLeft = targetLayout.x < rootLayout.x;

	        if (isLeft) {
	          rad = rad - Math.PI;
	        }
	      } else {
	        isLeft = targetLayout.x > rootLayout.x;

	        if (!isLeft) {
	          rad = rad - Math.PI;
	        }
	      }
	    }

	    var textPosition = isLeft ? 'left' : 'right';
	    symbolPath.setStyle({
	      textPosition: textPosition,
	      textRotation: -rad,
	      textOrigin: 'center',
	      verticalAlign: 'middle'
	    });
	  }

	  if (node.parentNode && node.parentNode !== virtualRoot) {
	    var edge = symbolEl.__edge;

	    if (!edge) {
	      edge = symbolEl.__edge = new graphic.BezierCurve({
	        shape: getEdgeShape(seriesScope, sourceOldLayout, sourceOldLayout),
	        style: zrUtil.defaults({
	          opacity: 0
	        }, seriesScope.lineStyle)
	      });
	    }

	    graphic.updateProps(edge, {
	      shape: getEdgeShape(seriesScope, sourceLayout, targetLayout),
	      style: {
	        opacity: 1
	      }
	    }, seriesModel);
	    group.add(edge);
	  }
	}

	function removeNode(data, dataIndex, symbolEl, group, seriesModel, seriesScope) {
	  var node = data.tree.getNodeByDataIndex(dataIndex);
	  var virtualRoot = data.tree.root;
	  var itemModel = node.getModel();
	  var seriesScope = getTreeNodeStyle(node, itemModel, seriesScope);
	  var source = node.parentNode === virtualRoot ? node : node.parentNode || node;
	  var sourceLayout;

	  while (sourceLayout = source.getLayout(), sourceLayout == null) {
	    source = source.parentNode === virtualRoot ? source : source.parentNode || source;
	  }

	  graphic.updateProps(symbolEl, {
	    position: [sourceLayout.x + 1, sourceLayout.y + 1]
	  }, seriesModel, function () {
	    group.remove(symbolEl);
	    data.setItemGraphicEl(dataIndex, null);
	  });
	  symbolEl.fadeOut(null, {
	    keepLabel: true
	  });
	  var edge = symbolEl.__edge;

	  if (edge) {
	    graphic.updateProps(edge, {
	      shape: getEdgeShape(seriesScope, sourceLayout, sourceLayout),
	      style: {
	        opacity: 0
	      }
	    }, seriesModel, function () {
	      group.remove(edge);
	    });
	  }
	}

	function getEdgeShape(seriesScope, sourceLayout, targetLayout) {
	  var cpx1;
	  var cpy1;
	  var cpx2;
	  var cpy2;
	  var orient = seriesScope.orient;

	  if (seriesScope.layout === 'radial') {
	    var x1 = sourceLayout.rawX;
	    var y1 = sourceLayout.rawY;
	    var x2 = targetLayout.rawX;
	    var y2 = targetLayout.rawY;
	    var radialCoor1 = radialCoordinate(x1, y1);
	    var radialCoor2 = radialCoordinate(x1, y1 + (y2 - y1) * seriesScope.curvature);
	    var radialCoor3 = radialCoordinate(x2, y2 + (y1 - y2) * seriesScope.curvature);
	    var radialCoor4 = radialCoordinate(x2, y2);
	    return {
	      x1: radialCoor1.x,
	      y1: radialCoor1.y,
	      x2: radialCoor4.x,
	      y2: radialCoor4.y,
	      cpx1: radialCoor2.x,
	      cpy1: radialCoor2.y,
	      cpx2: radialCoor3.x,
	      cpy2: radialCoor3.y
	    };
	  } else {
	    var x1 = sourceLayout.x;
	    var y1 = sourceLayout.y;
	    var x2 = targetLayout.x;
	    var y2 = targetLayout.y;

	    if (orient === 'horizontal') {
	      cpx1 = x1 + (x2 - x1) * seriesScope.curvature;
	      cpy1 = y1;
	      cpx2 = x2 + (x1 - x2) * seriesScope.curvature;
	      cpy2 = y2;
	    }

	    if (orient === 'vertical') {
	      cpx1 = x1;
	      cpy1 = y1 + (y2 - y1) * seriesScope.curvature;
	      cpx2 = x2;
	      cpy2 = y2 + (y1 - y2) * seriesScope.curvature;
	    }

	    return {
	      x1: x1,
	      y1: y1,
	      x2: x2,
	      y2: y2,
	      cpx1: cpx1,
	      cpy1: cpy1,
	      cpx2: cpx2,
	      cpy2: cpy2
	    };
	  }
	}

	module.exports = _default;

/***/ },
/* 363 */
/***/ function(module, exports, __webpack_require__) {

	var layout = __webpack_require__(247);

	/**
	 * @file The layout algorithm of node-link tree diagrams. Here we using Reingold-Tilford algorithm to drawing
	 *       the tree.
	 * @see https://github.com/d3/d3-hierarchy
	 */

	/**
	 * Initialize all computational message for following algorithm
	 * @param  {module:echarts/data/Tree~TreeNode} root   The virtual root of the tree
	 */
	function init(root) {
	  root.hierNode = {
	    defaultAncestor: null,
	    ancestor: root,
	    prelim: 0,
	    modifier: 0,
	    change: 0,
	    shift: 0,
	    i: 0,
	    thread: null
	  };
	  var nodes = [root];
	  var node;
	  var children;

	  while (node = nodes.pop()) {
	    // jshint ignore:line
	    children = node.children;

	    if (node.isExpand && children.length) {
	      var n = children.length;

	      for (var i = n - 1; i >= 0; i--) {
	        var child = children[i];
	        child.hierNode = {
	          defaultAncestor: null,
	          ancestor: child,
	          prelim: 0,
	          modifier: 0,
	          change: 0,
	          shift: 0,
	          i: i,
	          thread: null
	        };
	        nodes.push(child);
	      }
	    }
	  }
	}
	/**
	 * Computes a preliminary x coordinate for node. Before that, this function is
	 * applied recursively to the children of node, as well as the function
	 * apportion(). After spacing out the children by calling executeShifts(), the
	 * node is placed to the midpoint of its outermost children.
	 * @param  {module:echarts/data/Tree~TreeNode} node
	 * @param {Function} separation
	 */


	function firstWalk(node, separation) {
	  var children = node.isExpand ? node.children : [];
	  var siblings = node.parentNode.children;
	  var subtreeW = node.hierNode.i ? siblings[node.hierNode.i - 1] : null;

	  if (children.length) {
	    executeShifts(node);
	    var midPoint = (children[0].hierNode.prelim + children[children.length - 1].hierNode.prelim) / 2;

	    if (subtreeW) {
	      node.hierNode.prelim = subtreeW.hierNode.prelim + separation(node, subtreeW);
	      node.hierNode.modifier = node.hierNode.prelim - midPoint;
	    } else {
	      node.hierNode.prelim = midPoint;
	    }
	  } else if (subtreeW) {
	    node.hierNode.prelim = subtreeW.hierNode.prelim + separation(node, subtreeW);
	  }

	  node.parentNode.hierNode.defaultAncestor = apportion(node, subtreeW, node.parentNode.hierNode.defaultAncestor || siblings[0], separation);
	}
	/**
	 * Computes all real x-coordinates by summing up the modifiers recursively.
	 * @param  {module:echarts/data/Tree~TreeNode} node
	 */


	function secondWalk(node) {
	  var nodeX = node.hierNode.prelim + node.parentNode.hierNode.modifier;
	  node.setLayout({
	    x: nodeX
	  }, true);
	  node.hierNode.modifier += node.parentNode.hierNode.modifier;
	}

	function separation(cb) {
	  return arguments.length ? cb : defaultSeparation;
	}
	/**
	 * Transform the common coordinate to radial coordinate
	 * @param  {number} x
	 * @param  {number} y
	 * @return {Object}
	 */


	function radialCoordinate(x, y) {
	  var radialCoor = {};
	  x -= Math.PI / 2;
	  radialCoor.x = y * Math.cos(x);
	  radialCoor.y = y * Math.sin(x);
	  return radialCoor;
	}
	/**
	 * Get the layout position of the whole view
	 * @param {module:echarts/model/Series} seriesModel  the model object of sankey series
	 * @param {module:echarts/ExtensionAPI} api  provide the API list that the developer can call
	 * @return {module:zrender/core/BoundingRect}  size of rect to draw the sankey view
	 */


	function getViewRect(seriesModel, api) {
	  return layout.getLayoutRect(seriesModel.getBoxLayoutParams(), {
	    width: api.getWidth(),
	    height: api.getHeight()
	  });
	}
	/**
	 * All other shifts, applied to the smaller subtrees between w- and w+, are
	 * performed by this function.
	 * @param  {module:echarts/data/Tree~TreeNode} node
	 */


	function executeShifts(node) {
	  var children = node.children;
	  var n = children.length;
	  var shift = 0;
	  var change = 0;

	  while (--n >= 0) {
	    var child = children[n];
	    child.hierNode.prelim += shift;
	    child.hierNode.modifier += shift;
	    change += child.hierNode.change;
	    shift += child.hierNode.shift + change;
	  }
	}
	/**
	 * The core of the algorithm. Here, a new subtree is combined with the
	 * previous subtrees. Threads are used to traverse the inside and outside
	 * contours of the left and right subtree up to the highest common level.
	 * Whenever two nodes of the inside contours conflict, we compute the left
	 * one of the greatest uncommon ancestors using the function nextAncestor()
	 * and call moveSubtree() to shift the subtree and prepare the shifts of
	 * smaller subtrees. Finally, we add a new thread (if necessary).
	 * @param  {module:echarts/data/Tree~TreeNode} subtreeV
	 * @param  {module:echarts/data/Tree~TreeNode} subtreeW
	 * @param  {module:echarts/data/Tree~TreeNode} ancestor
	 * @param  {Function} separation
	 * @return {module:echarts/data/Tree~TreeNode}
	 */


	function apportion(subtreeV, subtreeW, ancestor, separation) {
	  if (subtreeW) {
	    var nodeOutRight = subtreeV;
	    var nodeInRight = subtreeV;
	    var nodeOutLeft = nodeInRight.parentNode.children[0];
	    var nodeInLeft = subtreeW;
	    var sumOutRight = nodeOutRight.hierNode.modifier;
	    var sumInRight = nodeInRight.hierNode.modifier;
	    var sumOutLeft = nodeOutLeft.hierNode.modifier;
	    var sumInLeft = nodeInLeft.hierNode.modifier;

	    while (nodeInLeft = nextRight(nodeInLeft), nodeInRight = nextLeft(nodeInRight), nodeInLeft && nodeInRight) {
	      nodeOutRight = nextRight(nodeOutRight);
	      nodeOutLeft = nextLeft(nodeOutLeft);
	      nodeOutRight.hierNode.ancestor = subtreeV;
	      var shift = nodeInLeft.hierNode.prelim + sumInLeft - nodeInRight.hierNode.prelim - sumInRight + separation(nodeInLeft, nodeInRight);

	      if (shift > 0) {
	        moveSubtree(nextAncestor(nodeInLeft, subtreeV, ancestor), subtreeV, shift);
	        sumInRight += shift;
	        sumOutRight += shift;
	      }

	      sumInLeft += nodeInLeft.hierNode.modifier;
	      sumInRight += nodeInRight.hierNode.modifier;
	      sumOutRight += nodeOutRight.hierNode.modifier;
	      sumOutLeft += nodeOutLeft.hierNode.modifier;
	    }

	    if (nodeInLeft && !nextRight(nodeOutRight)) {
	      nodeOutRight.hierNode.thread = nodeInLeft;
	      nodeOutRight.hierNode.modifier += sumInLeft - sumOutRight;
	    }

	    if (nodeInRight && !nextLeft(nodeOutLeft)) {
	      nodeOutLeft.hierNode.thread = nodeInRight;
	      nodeOutLeft.hierNode.modifier += sumInRight - sumOutLeft;
	      ancestor = subtreeV;
	    }
	  }

	  return ancestor;
	}
	/**
	 * This function is used to traverse the right contour of a subtree.
	 * It returns the rightmost child of node or the thread of node. The function
	 * returns null if and only if node is on the highest depth of its subtree.
	 * @param  {module:echarts/data/Tree~TreeNode} node
	 * @return {module:echarts/data/Tree~TreeNode}
	 */


	function nextRight(node) {
	  var children = node.children;
	  return children.length && node.isExpand ? children[children.length - 1] : node.hierNode.thread;
	}
	/**
	 * This function is used to traverse the left contour of a subtree (or a subforest).
	 * It returns the leftmost child of node or the thread of node. The function
	 * returns null if and only if node is on the highest depth of its subtree.
	 * @param  {module:echarts/data/Tree~TreeNode} node
	 * @return {module:echarts/data/Tree~TreeNode}
	 */


	function nextLeft(node) {
	  var children = node.children;
	  return children.length && node.isExpand ? children[0] : node.hierNode.thread;
	}
	/**
	 * If nodeInLeft’s ancestor is a sibling of node, returns nodeInLeft’s ancestor.
	 * Otherwise, returns the specified ancestor.
	 * @param  {module:echarts/data/Tree~TreeNode} nodeInLeft
	 * @param  {module:echarts/data/Tree~TreeNode} node
	 * @param  {module:echarts/data/Tree~TreeNode} ancestor
	 * @return {module:echarts/data/Tree~TreeNode}
	 */


	function nextAncestor(nodeInLeft, node, ancestor) {
	  return nodeInLeft.hierNode.ancestor.parentNode === node.parentNode ? nodeInLeft.hierNode.ancestor : ancestor;
	}
	/**
	 * Shifts the current subtree rooted at wr. This is done by increasing prelim(w+) and modifier(w+) by shift.
	 * @param  {module:echarts/data/Tree~TreeNode} wl
	 * @param  {module:echarts/data/Tree~TreeNode} wr
	 * @param  {number} shift [description]
	 */


	function moveSubtree(wl, wr, shift) {
	  var change = shift / (wr.hierNode.i - wl.hierNode.i);
	  wr.hierNode.change -= change;
	  wr.hierNode.shift += shift;
	  wr.hierNode.modifier += shift;
	  wr.hierNode.prelim += shift;
	  wl.hierNode.change += change;
	}

	function defaultSeparation(node1, node2) {
	  return node1.parentNode === node2.parentNode ? 1 : 2;
	}

	exports.init = init;
	exports.firstWalk = firstWalk;
	exports.secondWalk = secondWalk;
	exports.separation = separation;
	exports.radialCoordinate = radialCoordinate;
	exports.getViewRect = getViewRect;

/***/ },
/* 364 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	echarts.registerAction({
	  type: 'treeExpandAndCollapse',
	  event: 'treeExpandAndCollapse',
	  update: 'update'
	}, function (payload, ecModel) {
	  ecModel.eachComponent({
	    mainType: 'series',
	    subType: 'tree',
	    query: payload
	  }, function (seriesModel) {
	    var dataIndex = payload.dataIndex;
	    var tree = seriesModel.getData().tree;
	    var node = tree.getNodeByDataIndex(dataIndex);
	    node.isExpand = !node.isExpand;
	  });
	});

/***/ },
/* 365 */
/***/ function(module, exports, __webpack_require__) {

	var commonLayout = __webpack_require__(366);

	function _default(ecModel, api) {
	  ecModel.eachSeriesByType('tree', function (seriesModel) {
	    commonLayout(seriesModel, api);
	  });
	}

	module.exports = _default;

/***/ },
/* 366 */
/***/ function(module, exports, __webpack_require__) {

	var _traversalHelper = __webpack_require__(367);

	var eachAfter = _traversalHelper.eachAfter;
	var eachBefore = _traversalHelper.eachBefore;

	var _layoutHelper = __webpack_require__(363);

	var init = _layoutHelper.init;
	var firstWalk = _layoutHelper.firstWalk;
	var secondWalk = _layoutHelper.secondWalk;
	var sep = _layoutHelper.separation;
	var radialCoordinate = _layoutHelper.radialCoordinate;
	var getViewRect = _layoutHelper.getViewRect;

	function _default(seriesModel, api) {
	  var layoutInfo = getViewRect(seriesModel, api);
	  seriesModel.layoutInfo = layoutInfo;
	  var layout = seriesModel.get('layout');
	  var width = 0;
	  var height = 0;
	  var separation = null;

	  if (layout === 'radial') {
	    width = 2 * Math.PI;
	    height = Math.min(layoutInfo.height, layoutInfo.width) / 2;
	    separation = sep(function (node1, node2) {
	      return (node1.parentNode === node2.parentNode ? 1 : 2) / node1.depth;
	    });
	  } else {
	    width = layoutInfo.width;
	    height = layoutInfo.height;
	    separation = sep();
	  }

	  var virtualRoot = seriesModel.getData().tree.root;
	  var realRoot = virtualRoot.children[0];
	  init(virtualRoot);
	  eachAfter(realRoot, firstWalk, separation);
	  virtualRoot.hierNode.modifier = -realRoot.hierNode.prelim;
	  eachBefore(realRoot, secondWalk);
	  var left = realRoot;
	  var right = realRoot;
	  var bottom = realRoot;
	  eachBefore(realRoot, function (node) {
	    var x = node.getLayout().x;

	    if (x < left.getLayout().x) {
	      left = node;
	    }

	    if (x > right.getLayout().x) {
	      right = node;
	    }

	    if (node.depth > bottom.depth) {
	      bottom = node;
	    }
	  });
	  var delta = left === right ? 1 : separation(left, right) / 2;
	  var tx = delta - left.getLayout().x;
	  var kx = 0;
	  var ky = 0;
	  var coorX = 0;
	  var coorY = 0;

	  if (layout === 'radial') {
	    kx = width / (right.getLayout().x + delta + tx); // here we use (node.depth - 1), bucause the real root's depth is 1

	    ky = height / (bottom.depth - 1 || 1);
	    eachBefore(realRoot, function (node) {
	      coorX = (node.getLayout().x + tx) * kx;
	      coorY = (node.depth - 1) * ky;
	      var finalCoor = radialCoordinate(coorX, coorY);
	      node.setLayout({
	        x: finalCoor.x,
	        y: finalCoor.y,
	        rawX: coorX,
	        rawY: coorY
	      }, true);
	    });
	  } else {
	    if (seriesModel.get('orient') === 'horizontal') {
	      ky = height / (right.getLayout().x + delta + tx);
	      kx = width / (bottom.depth - 1 || 1);
	      eachBefore(realRoot, function (node) {
	        coorY = (node.getLayout().x + tx) * ky;
	        coorX = (node.depth - 1) * kx;
	        node.setLayout({
	          x: coorX,
	          y: coorY
	        }, true);
	      });
	    } else {
	      kx = width / (right.getLayout().x + delta + tx);
	      ky = height / (bottom.depth - 1 || 1);
	      eachBefore(realRoot, function (node) {
	        coorX = (node.getLayout().x + tx) * kx;
	        coorY = (node.depth - 1) * ky;
	        node.setLayout({
	          x: coorX,
	          y: coorY
	        }, true);
	      });
	    }
	  }
	}

	module.exports = _default;

/***/ },
/* 367 */
/***/ function(module, exports) {

	/**
	 * Traverse the tree from bottom to top and do something
	 * @param  {module:echarts/data/Tree~TreeNode} root  The real root of the tree
	 * @param  {Function} callback
	 */
	function eachAfter(root, callback, separation) {
	  var nodes = [root];
	  var next = [];
	  var node;

	  while (node = nodes.pop()) {
	    // jshint ignore:line
	    next.push(node);

	    if (node.isExpand) {
	      var children = node.children;

	      if (children.length) {
	        for (var i = 0; i < children.length; i++) {
	          nodes.push(children[i]);
	        }
	      }
	    }
	  }

	  while (node = next.pop()) {
	    // jshint ignore:line
	    callback(node, separation);
	  }
	}
	/**
	 * Traverse the tree from top to bottom and do something
	 * @param  {module:echarts/data/Tree~TreeNode} root  The real root of the tree
	 * @param  {Function} callback
	 */


	function eachBefore(root, callback) {
	  var nodes = [root];
	  var node;

	  while (node = nodes.pop()) {
	    // jshint ignore:line
	    callback(node);

	    if (node.isExpand) {
	      var children = node.children;

	      if (children.length) {
	        for (var i = children.length - 1; i >= 0; i--) {
	          nodes.push(children[i]);
	        }
	      }
	    }
	  }
	}

	exports.eachAfter = eachAfter;
	exports.eachBefore = eachBefore;

/***/ },
/* 368 */
/***/ function(module, exports, __webpack_require__) {

	var commonLayout = __webpack_require__(366);

	function _default(ecModel, api) {
	  ecModel.eachSeriesByType('tree', function (seriesModel) {
	    commonLayout(seriesModel, api);
	  });
	}

	module.exports = _default;

/***/ },
/* 369 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	__webpack_require__(370);

	__webpack_require__(372);

	__webpack_require__(375);

	var treemapVisual = __webpack_require__(376);

	var treemapLayout = __webpack_require__(378);

	echarts.registerVisual(treemapVisual);
	echarts.registerLayout(treemapLayout);

/***/ },
/* 370 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var SeriesModel = __webpack_require__(256);

	var Tree = __webpack_require__(360);

	var Model = __webpack_require__(206);

	var _format = __webpack_require__(204);

	var encodeHTML = _format.encodeHTML;
	var addCommas = _format.addCommas;

	var _helper = __webpack_require__(371);

	var wrapTreePathInfo = _helper.wrapTreePathInfo;

	var _default = SeriesModel.extend({
	  type: 'series.treemap',
	  layoutMode: 'box',
	  dependencies: ['grid', 'polar'],

	  /**
	   * @type {module:echarts/data/Tree~Node}
	   */
	  _viewRoot: null,
	  defaultOption: {
	    // Disable progressive rendering
	    progressive: 0,
	    hoverLayerThreshold: Infinity,
	    // center: ['50%', '50%'],          // not supported in ec3.
	    // size: ['80%', '80%'],            // deprecated, compatible with ec2.
	    left: 'center',
	    top: 'middle',
	    right: null,
	    bottom: null,
	    width: '80%',
	    height: '80%',
	    sort: true,
	    // Can be null or false or true
	    // (order by desc default, asc not supported yet (strange effect))
	    clipWindow: 'origin',
	    // Size of clipped window when zooming. 'origin' or 'fullscreen'
	    squareRatio: 0.5 * (1 + Math.sqrt(5)),
	    // golden ratio
	    leafDepth: null,
	    // Nodes on depth from root are regarded as leaves.
	    // Count from zero (zero represents only view root).
	    drillDownIcon: '▶',
	    // Use html character temporarily because it is complicated
	    // to align specialized icon. ▷▶❒❐▼✚
	    zoomToNodeRatio: 0.32 * 0.32,
	    // Be effective when using zoomToNode. Specify the proportion of the
	    // target node area in the view area.
	    roam: true,
	    // true, false, 'scale' or 'zoom', 'move'.
	    nodeClick: 'zoomToNode',
	    // Leaf node click behaviour: 'zoomToNode', 'link', false.
	    // If leafDepth is set and clicking a node which has children but
	    // be on left depth, the behaviour would be changing root. Otherwise
	    // use behavious defined above.
	    animation: true,
	    animationDurationUpdate: 900,
	    animationEasing: 'quinticInOut',
	    breadcrumb: {
	      show: true,
	      height: 22,
	      left: 'center',
	      top: 'bottom',
	      // right
	      // bottom
	      emptyItemWidth: 25,
	      // Width of empty node.
	      itemStyle: {
	        normal: {
	          color: 'rgba(0,0,0,0.7)',
	          //'#5793f3',
	          borderColor: 'rgba(255,255,255,0.7)',
	          borderWidth: 1,
	          shadowColor: 'rgba(150,150,150,1)',
	          shadowBlur: 3,
	          shadowOffsetX: 0,
	          shadowOffsetY: 0,
	          textStyle: {
	            color: '#fff'
	          }
	        },
	        emphasis: {
	          textStyle: {}
	        }
	      }
	    },
	    label: {
	      normal: {
	        show: true,
	        // Do not use textDistance, for ellipsis rect just the same as treemap node rect.
	        distance: 0,
	        padding: 5,
	        position: 'inside',
	        // Can be [5, '5%'] or position stirng like 'insideTopLeft', ...
	        // formatter: null,
	        color: '#fff',
	        ellipsis: true // align
	        // verticalAlign

	      }
	    },
	    upperLabel: {
	      // Label when node is parent.
	      normal: {
	        show: false,
	        position: [0, '50%'],
	        height: 20,
	        // formatter: null,
	        color: '#fff',
	        ellipsis: true,
	        // align: null,
	        verticalAlign: 'middle'
	      },
	      emphasis: {
	        show: true,
	        position: [0, '50%'],
	        color: '#fff',
	        ellipsis: true,
	        verticalAlign: 'middle'
	      }
	    },
	    itemStyle: {
	      normal: {
	        color: null,
	        // Can be 'none' if not necessary.
	        colorAlpha: null,
	        // Can be 'none' if not necessary.
	        colorSaturation: null,
	        // Can be 'none' if not necessary.
	        borderWidth: 0,
	        gapWidth: 0,
	        borderColor: '#fff',
	        borderColorSaturation: null // If specified, borderColor will be ineffective, and the
	        // border color is evaluated by color of current node and
	        // borderColorSaturation.

	      },
	      emphasis: {}
	    },
	    visualDimension: 0,
	    // Can be 0, 1, 2, 3.
	    visualMin: null,
	    visualMax: null,
	    color: [],
	    // + treemapSeries.color should not be modified. Please only modified
	    // level[n].color (if necessary).
	    // + Specify color list of each level. level[0].color would be global
	    // color list if not specified. (see method `setDefault`).
	    // + But set as a empty array to forbid fetch color from global palette
	    // when using nodeModel.get('color'), otherwise nodes on deep level
	    // will always has color palette set and are not able to inherit color
	    // from parent node.
	    // + TreemapSeries.color can not be set as 'none', otherwise effect
	    // legend color fetching (see seriesColor.js).
	    colorAlpha: null,
	    // Array. Specify color alpha range of each level, like [0.2, 0.8]
	    colorSaturation: null,
	    // Array. Specify color saturation of each level, like [0.2, 0.5]
	    colorMappingBy: 'index',
	    // 'value' or 'index' or 'id'.
	    visibleMin: 10,
	    // If area less than this threshold (unit: pixel^2), node will not
	    // be rendered. Only works when sort is 'asc' or 'desc'.
	    childrenVisibleMin: null,
	    // If area of a node less than this threshold (unit: pixel^2),
	    // grandchildren will not show.
	    // Why grandchildren? If not grandchildren but children,
	    // some siblings show children and some not,
	    // the appearance may be mess and not consistent,
	    levels: [] // Each item: {
	    //     visibleMin, itemStyle, visualDimension, label
	    // }
	    // data: {
	    //      value: [],
	    //      children: [],
	    //      link: 'http://xxx.xxx.xxx',
	    //      target: 'blank' or 'self'
	    // }

	  },

	  /**
	   * @override
	   */
	  getInitialData: function (option, ecModel) {
	    // Create a virtual root.
	    var root = {
	      name: option.name,
	      children: option.data
	    };
	    completeTreeValue(root);
	    var levels = option.levels || [];
	    levels = option.levels = setDefault(levels, ecModel);
	    var treeOption = {};
	    treeOption.levels = levels; // Make sure always a new tree is created when setOption,
	    // in TreemapView, we check whether oldTree === newTree
	    // to choose mappings approach among old shapes and new shapes.

	    return Tree.createTree(root, this, treeOption).data;
	  },
	  optionUpdated: function () {
	    this.resetViewRoot();
	  },

	  /**
	   * @override
	   * @param {number} dataIndex
	   * @param {boolean} [mutipleSeries=false]
	   */
	  formatTooltip: function (dataIndex) {
	    var data = this.getData();
	    var value = this.getRawValue(dataIndex);
	    var formattedValue = zrUtil.isArray(value) ? addCommas(value[0]) : addCommas(value);
	    var name = data.getName(dataIndex);
	    return encodeHTML(name + ': ' + formattedValue);
	  },

	  /**
	   * Add tree path to tooltip param
	   *
	   * @override
	   * @param {number} dataIndex
	   * @return {Object}
	   */
	  getDataParams: function (dataIndex) {
	    var params = SeriesModel.prototype.getDataParams.apply(this, arguments);
	    var node = this.getData().tree.getNodeByDataIndex(dataIndex);
	    params.treePathInfo = wrapTreePathInfo(node, this);
	    return params;
	  },

	  /**
	   * @public
	   * @param {Object} layoutInfo {
	   *                                x: containerGroup x
	   *                                y: containerGroup y
	   *                                width: containerGroup width
	   *                                height: containerGroup height
	   *                            }
	   */
	  setLayoutInfo: function (layoutInfo) {
	    /**
	     * @readOnly
	     * @type {Object}
	     */
	    this.layoutInfo = this.layoutInfo || {};
	    zrUtil.extend(this.layoutInfo, layoutInfo);
	  },

	  /**
	   * @param  {string} id
	   * @return {number} index
	   */
	  mapIdToIndex: function (id) {
	    // A feature is implemented:
	    // index is monotone increasing with the sequence of
	    // input id at the first time.
	    // This feature can make sure that each data item and its
	    // mapped color have the same index between data list and
	    // color list at the beginning, which is useful for user
	    // to adjust data-color mapping.

	    /**
	     * @private
	     * @type {Object}
	     */
	    var idIndexMap = this._idIndexMap;

	    if (!idIndexMap) {
	      idIndexMap = this._idIndexMap = zrUtil.createHashMap();
	      /**
	       * @private
	       * @type {number}
	       */

	      this._idIndexMapCount = 0;
	    }

	    var index = idIndexMap.get(id);

	    if (index == null) {
	      idIndexMap.set(id, index = this._idIndexMapCount++);
	    }

	    return index;
	  },
	  getViewRoot: function () {
	    return this._viewRoot;
	  },

	  /**
	   * @param {module:echarts/data/Tree~Node} [viewRoot]
	   */
	  resetViewRoot: function (viewRoot) {
	    viewRoot ? this._viewRoot = viewRoot : viewRoot = this._viewRoot;
	    var root = this.getData().tree.root;

	    if (!viewRoot || viewRoot !== root && !root.contains(viewRoot)) {
	      this._viewRoot = root;
	    }
	  }
	});
	/**
	 * @param {Object} dataNode
	 */


	function completeTreeValue(dataNode) {
	  // Postorder travel tree.
	  // If value of none-leaf node is not set,
	  // calculate it by suming up the value of all children.
	  var sum = 0;
	  zrUtil.each(dataNode.children, function (child) {
	    completeTreeValue(child);
	    var childValue = child.value;
	    zrUtil.isArray(childValue) && (childValue = childValue[0]);
	    sum += childValue;
	  });
	  var thisValue = dataNode.value;

	  if (zrUtil.isArray(thisValue)) {
	    thisValue = thisValue[0];
	  }

	  if (thisValue == null || isNaN(thisValue)) {
	    thisValue = sum;
	  } // Value should not less than 0.


	  if (thisValue < 0) {
	    thisValue = 0;
	  }

	  zrUtil.isArray(dataNode.value) ? dataNode.value[0] = thisValue : dataNode.value = thisValue;
	}
	/**
	 * set default to level configuration
	 */


	function setDefault(levels, ecModel) {
	  var globalColorList = ecModel.get('color');

	  if (!globalColorList) {
	    return;
	  }

	  levels = levels || [];
	  var hasColorDefine;
	  zrUtil.each(levels, function (levelDefine) {
	    var model = new Model(levelDefine);
	    var modelColor = model.get('color');

	    if (model.get('itemStyle.normal.color') || modelColor && modelColor !== 'none') {
	      hasColorDefine = true;
	    }
	  });

	  if (!hasColorDefine) {
	    var level0 = levels[0] || (levels[0] = {});
	    level0.color = globalColorList.slice();
	  }

	  return levels;
	}

	module.exports = _default;

/***/ },
/* 371 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	function retrieveTargetInfo(payload, seriesModel) {
	  if (payload && (payload.type === 'treemapZoomToNode' || payload.type === 'treemapRootToNode')) {
	    var root = seriesModel.getData().tree.root;
	    var targetNode = payload.targetNode;

	    if (targetNode && root.contains(targetNode)) {
	      return {
	        node: targetNode
	      };
	    }

	    var targetNodeId = payload.targetNodeId;

	    if (targetNodeId != null && (targetNode = root.getNodeById(targetNodeId))) {
	      return {
	        node: targetNode
	      };
	    }
	  }
	} // Not includes the given node at the last item.


	function getPathToRoot(node) {
	  var path = [];

	  while (node) {
	    node = node.parentNode;
	    node && path.push(node);
	  }

	  return path.reverse();
	}

	function aboveViewRoot(viewRoot, node) {
	  var viewPath = getPathToRoot(viewRoot);
	  return zrUtil.indexOf(viewPath, node) >= 0;
	} // From root to the input node (the input node will be included).


	function wrapTreePathInfo(node, seriesModel) {
	  var treePathInfo = [];

	  while (node) {
	    var nodeDataIndex = node.dataIndex;
	    treePathInfo.push({
	      name: node.name,
	      dataIndex: nodeDataIndex,
	      value: seriesModel.getRawValue(nodeDataIndex)
	    });
	    node = node.parentNode;
	  }

	  treePathInfo.reverse();
	  return treePathInfo;
	}

	exports.retrieveTargetInfo = retrieveTargetInfo;
	exports.getPathToRoot = getPathToRoot;
	exports.aboveViewRoot = aboveViewRoot;
	exports.wrapTreePathInfo = wrapTreePathInfo;

/***/ },
/* 372 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var zrUtil = __webpack_require__(166);

	var graphic = __webpack_require__(212);

	var DataDiffer = __webpack_require__(266);

	var helper = __webpack_require__(371);

	var Breadcrumb = __webpack_require__(373);

	var RoamController = __webpack_require__(348);

	var BoundingRect = __webpack_require__(184);

	var matrix = __webpack_require__(175);

	var animationUtil = __webpack_require__(374);

	var makeStyleMapper = __webpack_require__(209);

	var bind = zrUtil.bind;
	var Group = graphic.Group;
	var Rect = graphic.Rect;
	var each = zrUtil.each;
	var DRAG_THRESHOLD = 3;
	var PATH_LABEL_NOAMAL = ['label', 'normal'];
	var PATH_LABEL_EMPHASIS = ['label', 'emphasis'];
	var PATH_UPPERLABEL_NORMAL = ['upperLabel', 'normal'];
	var PATH_UPPERLABEL_EMPHASIS = ['upperLabel', 'emphasis'];
	var Z_BASE = 10; // Should bigger than every z.

	var Z_BG = 1;
	var Z_CONTENT = 2;
	var getItemStyleEmphasis = makeStyleMapper([['fill', 'color'], // `borderColor` and `borderWidth` has been occupied,
	// so use `stroke` to indicate the stroke of the rect.
	['stroke', 'strokeColor'], ['lineWidth', 'strokeWidth'], ['shadowBlur'], ['shadowOffsetX'], ['shadowOffsetY'], ['shadowColor']]);

	var getItemStyleNormal = function (model) {
	  // Normal style props should include emphasis style props.
	  var itemStyle = getItemStyleEmphasis(model); // Clear styles set by emphasis.

	  itemStyle.stroke = itemStyle.fill = itemStyle.lineWidth = null;
	  return itemStyle;
	};

	var _default = echarts.extendChartView({
	  type: 'treemap',

	  /**
	   * @override
	   */
	  init: function (o, api) {
	    /**
	     * @private
	     * @type {module:zrender/container/Group}
	     */
	    this._containerGroup;
	    /**
	     * @private
	     * @type {Object.<string, Array.<module:zrender/container/Group>>}
	     */

	    this._storage = createStorage();
	    /**
	     * @private
	     * @type {module:echarts/data/Tree}
	     */

	    this._oldTree;
	    /**
	     * @private
	     * @type {module:echarts/chart/treemap/Breadcrumb}
	     */

	    this._breadcrumb;
	    /**
	     * @private
	     * @type {module:echarts/component/helper/RoamController}
	     */

	    this._controller;
	    /**
	     * 'ready', 'animating'
	     * @private
	     */

	    this._state = 'ready';
	  },

	  /**
	   * @override
	   */
	  render: function (seriesModel, ecModel, api, payload) {
	    var models = ecModel.findComponents({
	      mainType: 'series',
	      subType: 'treemap',
	      query: payload
	    });

	    if (zrUtil.indexOf(models, seriesModel) < 0) {
	      return;
	    }

	    this.seriesModel = seriesModel;
	    this.api = api;
	    this.ecModel = ecModel;
	    var targetInfo = helper.retrieveTargetInfo(payload, seriesModel);
	    var payloadType = payload && payload.type;
	    var layoutInfo = seriesModel.layoutInfo;
	    var isInit = !this._oldTree;
	    var thisStorage = this._storage; // Mark new root when action is treemapRootToNode.

	    var reRoot = payloadType === 'treemapRootToNode' && targetInfo && thisStorage ? {
	      rootNodeGroup: thisStorage.nodeGroup[targetInfo.node.getRawIndex()],
	      direction: payload.direction
	    } : null;

	    var containerGroup = this._giveContainerGroup(layoutInfo);

	    var renderResult = this._doRender(containerGroup, seriesModel, reRoot);

	    !isInit && (!payloadType || payloadType === 'treemapZoomToNode' || payloadType === 'treemapRootToNode') ? this._doAnimation(containerGroup, renderResult, seriesModel, reRoot) : renderResult.renderFinally();

	    this._resetController(api);

	    this._renderBreadcrumb(seriesModel, api, targetInfo);
	  },

	  /**
	   * @private
	   */
	  _giveContainerGroup: function (layoutInfo) {
	    var containerGroup = this._containerGroup;

	    if (!containerGroup) {
	      // FIXME
	      // 加一层containerGroup是为了clip，但是现在clip功能并没有实现。
	      containerGroup = this._containerGroup = new Group();

	      this._initEvents(containerGroup);

	      this.group.add(containerGroup);
	    }

	    containerGroup.attr('position', [layoutInfo.x, layoutInfo.y]);
	    return containerGroup;
	  },

	  /**
	   * @private
	   */
	  _doRender: function (containerGroup, seriesModel, reRoot) {
	    var thisTree = seriesModel.getData().tree;
	    var oldTree = this._oldTree; // Clear last shape records.

	    var lastsForAnimation = createStorage();
	    var thisStorage = createStorage();
	    var oldStorage = this._storage;
	    var willInvisibleEls = [];
	    var doRenderNode = zrUtil.curry(renderNode, seriesModel, thisStorage, oldStorage, reRoot, lastsForAnimation, willInvisibleEls); // Notice: when thisTree and oldTree are the same tree (see list.cloneShallow),
	    // the oldTree is actually losted, so we can not find all of the old graphic
	    // elements from tree. So we use this stragegy: make element storage, move
	    // from old storage to new storage, clear old storage.

	    dualTravel(thisTree.root ? [thisTree.root] : [], oldTree && oldTree.root ? [oldTree.root] : [], containerGroup, thisTree === oldTree || !oldTree, 0); // Process all removing.

	    var willDeleteEls = clearStorage(oldStorage);
	    this._oldTree = thisTree;
	    this._storage = thisStorage;
	    return {
	      lastsForAnimation: lastsForAnimation,
	      willDeleteEls: willDeleteEls,
	      renderFinally: renderFinally
	    };

	    function dualTravel(thisViewChildren, oldViewChildren, parentGroup, sameTree, depth) {
	      // When 'render' is triggered by action,
	      // 'this' and 'old' may be the same tree,
	      // we use rawIndex in that case.
	      if (sameTree) {
	        oldViewChildren = thisViewChildren;
	        each(thisViewChildren, function (child, index) {
	          !child.isRemoved() && processNode(index, index);
	        });
	      } // Diff hierarchically (diff only in each subtree, but not whole).
	      // because, consistency of view is important.
	      else {
	          new DataDiffer(oldViewChildren, thisViewChildren, getKey, getKey).add(processNode).update(processNode).remove(zrUtil.curry(processNode, null)).execute();
	        }

	      function getKey(node) {
	        // Identify by name or raw index.
	        return node.getId();
	      }

	      function processNode(newIndex, oldIndex) {
	        var thisNode = newIndex != null ? thisViewChildren[newIndex] : null;
	        var oldNode = oldIndex != null ? oldViewChildren[oldIndex] : null;
	        var group = doRenderNode(thisNode, oldNode, parentGroup, depth);
	        group && dualTravel(thisNode && thisNode.viewChildren || [], oldNode && oldNode.viewChildren || [], group, sameTree, depth + 1);
	      }
	    }

	    function clearStorage(storage) {
	      var willDeleteEls = createStorage();
	      storage && each(storage, function (store, storageName) {
	        var delEls = willDeleteEls[storageName];
	        each(store, function (el) {
	          el && (delEls.push(el), el.__tmWillDelete = 1);
	        });
	      });
	      return willDeleteEls;
	    }

	    function renderFinally() {
	      each(willDeleteEls, function (els) {
	        each(els, function (el) {
	          el.parent && el.parent.remove(el);
	        });
	      });
	      each(willInvisibleEls, function (el) {
	        el.invisible = true; // Setting invisible is for optimizing, so no need to set dirty,
	        // just mark as invisible.

	        el.dirty();
	      });
	    }
	  },

	  /**
	   * @private
	   */
	  _doAnimation: function (containerGroup, renderResult, seriesModel, reRoot) {
	    if (!seriesModel.get('animation')) {
	      return;
	    }

	    var duration = seriesModel.get('animationDurationUpdate');
	    var easing = seriesModel.get('animationEasing');
	    var animationWrap = animationUtil.createWrap(); // Make delete animations.

	    each(renderResult.willDeleteEls, function (store, storageName) {
	      each(store, function (el, rawIndex) {
	        if (el.invisible) {
	          return;
	        }

	        var parent = el.parent; // Always has parent, and parent is nodeGroup.

	        var target;

	        if (reRoot && reRoot.direction === 'drillDown') {
	          target = parent === reRoot.rootNodeGroup // This is the content element of view root.
	          // Only `content` will enter this branch, because
	          // `background` and `nodeGroup` will not be deleted.
	          ? {
	            shape: {
	              x: 0,
	              y: 0,
	              width: parent.__tmNodeWidth,
	              height: parent.__tmNodeHeight
	            },
	            style: {
	              opacity: 0
	            } // Others.

	          } : {
	            style: {
	              opacity: 0
	            }
	          };
	        } else {
	          var targetX = 0;
	          var targetY = 0;

	          if (!parent.__tmWillDelete) {
	            // Let node animate to right-bottom corner, cooperating with fadeout,
	            // which is appropriate for user understanding.
	            // Divided by 2 for reRoot rolling up effect.
	            targetX = parent.__tmNodeWidth / 2;
	            targetY = parent.__tmNodeHeight / 2;
	          }

	          target = storageName === 'nodeGroup' ? {
	            position: [targetX, targetY],
	            style: {
	              opacity: 0
	            }
	          } : {
	            shape: {
	              x: targetX,
	              y: targetY,
	              width: 0,
	              height: 0
	            },
	            style: {
	              opacity: 0
	            }
	          };
	        }

	        target && animationWrap.add(el, target, duration, easing);
	      });
	    }); // Make other animations

	    each(this._storage, function (store, storageName) {
	      each(store, function (el, rawIndex) {
	        var last = renderResult.lastsForAnimation[storageName][rawIndex];
	        var target = {};

	        if (!last) {
	          return;
	        }

	        if (storageName === 'nodeGroup') {
	          if (last.old) {
	            target.position = el.position.slice();
	            el.attr('position', last.old);
	          }
	        } else {
	          if (last.old) {
	            target.shape = zrUtil.extend({}, el.shape);
	            el.setShape(last.old);
	          }

	          if (last.fadein) {
	            el.setStyle('opacity', 0);
	            target.style = {
	              opacity: 1
	            };
	          } // When animation is stopped for succedent animation starting,
	          // el.style.opacity might not be 1
	          else if (el.style.opacity !== 1) {
	              target.style = {
	                opacity: 1
	              };
	            }
	        }

	        animationWrap.add(el, target, duration, easing);
	      });
	    }, this);
	    this._state = 'animating';
	    animationWrap.done(bind(function () {
	      this._state = 'ready';
	      renderResult.renderFinally();
	    }, this)).start();
	  },

	  /**
	   * @private
	   */
	  _resetController: function (api) {
	    var controller = this._controller; // Init controller.

	    if (!controller) {
	      controller = this._controller = new RoamController(api.getZr());
	      controller.enable(this.seriesModel.get('roam'));
	      controller.on('pan', bind(this._onPan, this));
	      controller.on('zoom', bind(this._onZoom, this));
	    }

	    var rect = new BoundingRect(0, 0, api.getWidth(), api.getHeight());
	    controller.setPointerChecker(function (e, x, y) {
	      return rect.contain(x, y);
	    });
	  },

	  /**
	   * @private
	   */
	  _clearController: function () {
	    var controller = this._controller;

	    if (controller) {
	      controller.dispose();
	      controller = null;
	    }
	  },

	  /**
	   * @private
	   */
	  _onPan: function (dx, dy) {
	    if (this._state !== 'animating' && (Math.abs(dx) > DRAG_THRESHOLD || Math.abs(dy) > DRAG_THRESHOLD)) {
	      // These param must not be cached.
	      var root = this.seriesModel.getData().tree.root;

	      if (!root) {
	        return;
	      }

	      var rootLayout = root.getLayout();

	      if (!rootLayout) {
	        return;
	      }

	      this.api.dispatchAction({
	        type: 'treemapMove',
	        from: this.uid,
	        seriesId: this.seriesModel.id,
	        rootRect: {
	          x: rootLayout.x + dx,
	          y: rootLayout.y + dy,
	          width: rootLayout.width,
	          height: rootLayout.height
	        }
	      });
	    }
	  },

	  /**
	   * @private
	   */
	  _onZoom: function (scale, mouseX, mouseY) {
	    if (this._state !== 'animating') {
	      // These param must not be cached.
	      var root = this.seriesModel.getData().tree.root;

	      if (!root) {
	        return;
	      }

	      var rootLayout = root.getLayout();

	      if (!rootLayout) {
	        return;
	      }

	      var rect = new BoundingRect(rootLayout.x, rootLayout.y, rootLayout.width, rootLayout.height);
	      var layoutInfo = this.seriesModel.layoutInfo; // Transform mouse coord from global to containerGroup.

	      mouseX -= layoutInfo.x;
	      mouseY -= layoutInfo.y; // Scale root bounding rect.

	      var m = matrix.create();
	      matrix.translate(m, m, [-mouseX, -mouseY]);
	      matrix.scale(m, m, [scale, scale]);
	      matrix.translate(m, m, [mouseX, mouseY]);
	      rect.applyTransform(m);
	      this.api.dispatchAction({
	        type: 'treemapRender',
	        from: this.uid,
	        seriesId: this.seriesModel.id,
	        rootRect: {
	          x: rect.x,
	          y: rect.y,
	          width: rect.width,
	          height: rect.height
	        }
	      });
	    }
	  },

	  /**
	   * @private
	   */
	  _initEvents: function (containerGroup) {
	    containerGroup.on('click', function (e) {
	      if (this._state !== 'ready') {
	        return;
	      }

	      var nodeClick = this.seriesModel.get('nodeClick', true);

	      if (!nodeClick) {
	        return;
	      }

	      var targetInfo = this.findTarget(e.offsetX, e.offsetY);

	      if (!targetInfo) {
	        return;
	      }

	      var node = targetInfo.node;

	      if (node.getLayout().isLeafRoot) {
	        this._rootToNode(targetInfo);
	      } else {
	        if (nodeClick === 'zoomToNode') {
	          this._zoomToNode(targetInfo);
	        } else if (nodeClick === 'link') {
	          var itemModel = node.hostTree.data.getItemModel(node.dataIndex);
	          var link = itemModel.get('link', true);
	          var linkTarget = itemModel.get('target', true) || 'blank';
	          link && window.open(link, linkTarget);
	        }
	      }
	    }, this);
	  },

	  /**
	   * @private
	   */
	  _renderBreadcrumb: function (seriesModel, api, targetInfo) {
	    if (!targetInfo) {
	      targetInfo = seriesModel.get('leafDepth', true) != null ? {
	        node: seriesModel.getViewRoot() // FIXME
	        // better way?
	        // Find breadcrumb tail on center of containerGroup.

	      } : this.findTarget(api.getWidth() / 2, api.getHeight() / 2);

	      if (!targetInfo) {
	        targetInfo = {
	          node: seriesModel.getData().tree.root
	        };
	      }
	    }

	    (this._breadcrumb || (this._breadcrumb = new Breadcrumb(this.group))).render(seriesModel, api, targetInfo.node, bind(onSelect, this));

	    function onSelect(node) {
	      if (this._state !== 'animating') {
	        helper.aboveViewRoot(seriesModel.getViewRoot(), node) ? this._rootToNode({
	          node: node
	        }) : this._zoomToNode({
	          node: node
	        });
	      }
	    }
	  },

	  /**
	   * @override
	   */
	  remove: function () {
	    this._clearController();

	    this._containerGroup && this._containerGroup.removeAll();
	    this._storage = createStorage();
	    this._state = 'ready';
	    this._breadcrumb && this._breadcrumb.remove();
	  },
	  dispose: function () {
	    this._clearController();
	  },

	  /**
	   * @private
	   */
	  _zoomToNode: function (targetInfo) {
	    this.api.dispatchAction({
	      type: 'treemapZoomToNode',
	      from: this.uid,
	      seriesId: this.seriesModel.id,
	      targetNode: targetInfo.node
	    });
	  },

	  /**
	   * @private
	   */
	  _rootToNode: function (targetInfo) {
	    this.api.dispatchAction({
	      type: 'treemapRootToNode',
	      from: this.uid,
	      seriesId: this.seriesModel.id,
	      targetNode: targetInfo.node
	    });
	  },

	  /**
	   * @public
	   * @param {number} x Global coord x.
	   * @param {number} y Global coord y.
	   * @return {Object} info If not found, return undefined;
	   * @return {number} info.node Target node.
	   * @return {number} info.offsetX x refer to target node.
	   * @return {number} info.offsetY y refer to target node.
	   */
	  findTarget: function (x, y) {
	    var targetInfo;
	    var viewRoot = this.seriesModel.getViewRoot();
	    viewRoot.eachNode({
	      attr: 'viewChildren',
	      order: 'preorder'
	    }, function (node) {
	      var bgEl = this._storage.background[node.getRawIndex()]; // If invisible, there might be no element.


	      if (bgEl) {
	        var point = bgEl.transformCoordToLocal(x, y);
	        var shape = bgEl.shape; // For performance consideration, dont use 'getBoundingRect'.

	        if (shape.x <= point[0] && point[0] <= shape.x + shape.width && shape.y <= point[1] && point[1] <= shape.y + shape.height) {
	          targetInfo = {
	            node: node,
	            offsetX: point[0],
	            offsetY: point[1]
	          };
	        } else {
	          return false; // Suppress visit subtree.
	        }
	      }
	    }, this);
	    return targetInfo;
	  }
	});
	/**
	 * @inner
	 */


	function createStorage() {
	  return {
	    nodeGroup: [],
	    background: [],
	    content: []
	  };
	}
	/**
	 * @inner
	 * @return Return undefined means do not travel further.
	 */


	function renderNode(seriesModel, thisStorage, oldStorage, reRoot, lastsForAnimation, willInvisibleEls, thisNode, oldNode, parentGroup, depth) {
	  // Whether under viewRoot.
	  if (!thisNode) {
	    // Deleting nodes will be performed finally. This method just find
	    // element from old storage, or create new element, set them to new
	    // storage, and set styles.
	    return;
	  } // -------------------------------------------------------------------
	  // Start of closure variables available in "Procedures in renderNode".


	  var thisLayout = thisNode.getLayout();

	  if (!thisLayout || !thisLayout.isInView) {
	    return;
	  }

	  var thisWidth = thisLayout.width;
	  var thisHeight = thisLayout.height;
	  var borderWidth = thisLayout.borderWidth;
	  var thisInvisible = thisLayout.invisible;
	  var thisRawIndex = thisNode.getRawIndex();
	  var oldRawIndex = oldNode && oldNode.getRawIndex();
	  var thisViewChildren = thisNode.viewChildren;
	  var upperHeight = thisLayout.upperHeight;
	  var isParent = thisViewChildren && thisViewChildren.length;
	  var itemStyleNormalModel = thisNode.getModel('itemStyle.normal');
	  var itemStyleEmphasisModel = thisNode.getModel('itemStyle.emphasis'); // End of closure ariables available in "Procedures in renderNode".
	  // -----------------------------------------------------------------
	  // Node group

	  var group = giveGraphic('nodeGroup', Group);

	  if (!group) {
	    return;
	  }

	  parentGroup.add(group); // x,y are not set when el is above view root.

	  group.attr('position', [thisLayout.x || 0, thisLayout.y || 0]);
	  group.__tmNodeWidth = thisWidth;
	  group.__tmNodeHeight = thisHeight;

	  if (thisLayout.isAboveViewRoot) {
	    return group;
	  } // Background


	  var bg = giveGraphic('background', Rect, depth, Z_BG);
	  bg && renderBackground(group, bg, isParent && thisLayout.upperHeight); // No children, render content.

	  if (!isParent) {
	    var content = giveGraphic('content', Rect, depth, Z_CONTENT);
	    content && renderContent(group, content);
	  }

	  return group; // ----------------------------
	  // | Procedures in renderNode |
	  // ----------------------------

	  function renderBackground(group, bg, useUpperLabel) {
	    // For tooltip.
	    bg.dataIndex = thisNode.dataIndex;
	    bg.seriesIndex = seriesModel.seriesIndex;
	    bg.setShape({
	      x: 0,
	      y: 0,
	      width: thisWidth,
	      height: thisHeight
	    });
	    var visualBorderColor = thisNode.getVisual('borderColor', true);
	    var emphasisBorderColor = itemStyleEmphasisModel.get('borderColor');
	    updateStyle(bg, function () {
	      var normalStyle = getItemStyleNormal(itemStyleNormalModel);
	      normalStyle.fill = visualBorderColor;
	      var emphasisStyle = getItemStyleEmphasis(itemStyleEmphasisModel);
	      emphasisStyle.fill = emphasisBorderColor;

	      if (useUpperLabel) {
	        var upperLabelWidth = thisWidth - 2 * borderWidth;
	        prepareText(normalStyle, emphasisStyle, visualBorderColor, upperLabelWidth, upperHeight, {
	          x: borderWidth,
	          y: 0,
	          width: upperLabelWidth,
	          height: upperHeight
	        });
	      } // For old bg.
	      else {
	          normalStyle.text = emphasisStyle.text = null;
	        }

	      bg.setStyle(normalStyle);
	      graphic.setHoverStyle(bg, emphasisStyle);
	    });
	    group.add(bg);
	  }

	  function renderContent(group, content) {
	    // For tooltip.
	    content.dataIndex = thisNode.dataIndex;
	    content.seriesIndex = seriesModel.seriesIndex;
	    var contentWidth = Math.max(thisWidth - 2 * borderWidth, 0);
	    var contentHeight = Math.max(thisHeight - 2 * borderWidth, 0);
	    content.culling = true;
	    content.setShape({
	      x: borderWidth,
	      y: borderWidth,
	      width: contentWidth,
	      height: contentHeight
	    });
	    var visualColor = thisNode.getVisual('color', true);
	    updateStyle(content, function () {
	      var normalStyle = getItemStyleNormal(itemStyleNormalModel);
	      normalStyle.fill = visualColor;
	      var emphasisStyle = getItemStyleEmphasis(itemStyleEmphasisModel);
	      prepareText(normalStyle, emphasisStyle, visualColor, contentWidth, contentHeight);
	      content.setStyle(normalStyle);
	      graphic.setHoverStyle(content, emphasisStyle);
	    });
	    group.add(content);
	  }

	  function updateStyle(element, cb) {
	    if (!thisInvisible) {
	      // If invisible, do not set visual, otherwise the element will
	      // change immediately before animation. We think it is OK to
	      // remain its origin color when moving out of the view window.
	      cb();

	      if (!element.__tmWillVisible) {
	        element.invisible = false;
	      }
	    } else {
	      // Delay invisible setting utill animation finished,
	      // avoid element vanish suddenly before animation.
	      !element.invisible && willInvisibleEls.push(element);
	    }
	  }

	  function prepareText(normalStyle, emphasisStyle, visualColor, width, height, upperLabelRect) {
	    var nodeModel = thisNode.getModel();
	    var text = zrUtil.retrieve(seriesModel.getFormattedLabel(thisNode.dataIndex, 'normal', null, null, upperLabelRect ? 'upperLabel' : 'label'), nodeModel.get('name'));

	    if (!upperLabelRect && thisLayout.isLeafRoot) {
	      var iconChar = seriesModel.get('drillDownIcon', true);
	      text = iconChar ? iconChar + ' ' + text : text;
	    }

	    var normalLabelModel = nodeModel.getModel(upperLabelRect ? PATH_UPPERLABEL_NORMAL : PATH_LABEL_NOAMAL);
	    var emphasisLabelModel = nodeModel.getModel(upperLabelRect ? PATH_UPPERLABEL_EMPHASIS : PATH_LABEL_EMPHASIS);
	    var isShow = normalLabelModel.getShallow('show');
	    graphic.setLabelStyle(normalStyle, emphasisStyle, normalLabelModel, emphasisLabelModel, {
	      defaultText: isShow ? text : null,
	      autoColor: visualColor,
	      isRectText: true
	    });
	    upperLabelRect && (normalStyle.textRect = zrUtil.clone(upperLabelRect));
	    normalStyle.truncate = isShow && normalLabelModel.get('ellipsis') ? {
	      outerWidth: width,
	      outerHeight: height,
	      minChar: 2
	    } : null;
	  }

	  function giveGraphic(storageName, Ctor, depth, z) {
	    var element = oldRawIndex != null && oldStorage[storageName][oldRawIndex];
	    var lasts = lastsForAnimation[storageName];

	    if (element) {
	      // Remove from oldStorage
	      oldStorage[storageName][oldRawIndex] = null;
	      prepareAnimationWhenHasOld(lasts, element, storageName);
	    } // If invisible and no old element, do not create new element (for optimizing).
	    else if (!thisInvisible) {
	        element = new Ctor({
	          z: calculateZ(depth, z)
	        });
	        element.__tmDepth = depth;
	        element.__tmStorageName = storageName;
	        prepareAnimationWhenNoOld(lasts, element, storageName);
	      } // Set to thisStorage


	    return thisStorage[storageName][thisRawIndex] = element;
	  }

	  function prepareAnimationWhenHasOld(lasts, element, storageName) {
	    var lastCfg = lasts[thisRawIndex] = {};
	    lastCfg.old = storageName === 'nodeGroup' ? element.position.slice() : zrUtil.extend({}, element.shape);
	  } // If a element is new, we need to find the animation start point carefully,
	  // otherwise it will looks strange when 'zoomToNode'.


	  function prepareAnimationWhenNoOld(lasts, element, storageName) {
	    var lastCfg = lasts[thisRawIndex] = {};
	    var parentNode = thisNode.parentNode;

	    if (parentNode && (!reRoot || reRoot.direction === 'drillDown')) {
	      var parentOldX = 0;
	      var parentOldY = 0; // New nodes appear from right-bottom corner in 'zoomToNode' animation.
	      // For convenience, get old bounding rect from background.

	      var parentOldBg = lastsForAnimation.background[parentNode.getRawIndex()];

	      if (!reRoot && parentOldBg && parentOldBg.old) {
	        parentOldX = parentOldBg.old.width;
	        parentOldY = parentOldBg.old.height;
	      } // When no parent old shape found, its parent is new too,
	      // so we can just use {x:0, y:0}.


	      lastCfg.old = storageName === 'nodeGroup' ? [0, parentOldY] : {
	        x: parentOldX,
	        y: parentOldY,
	        width: 0,
	        height: 0
	      };
	    } // Fade in, user can be aware that these nodes are new.


	    lastCfg.fadein = storageName !== 'nodeGroup';
	  }
	} // We can not set all backgroud with the same z, Because the behaviour of
	// drill down and roll up differ background creation sequence from tree
	// hierarchy sequence, which cause that lowser background element overlap
	// upper ones. So we calculate z based on depth.
	// Moreover, we try to shrink down z interval to [0, 1] to avoid that
	// treemap with large z overlaps other components.


	function calculateZ(depth, zInLevel) {
	  var zb = depth * Z_BASE + zInLevel;
	  return (zb - 1) / zb;
	}

	module.exports = _default;

/***/ },
/* 373 */
/***/ function(module, exports, __webpack_require__) {

	var graphic = __webpack_require__(212);

	var layout = __webpack_require__(247);

	var zrUtil = __webpack_require__(166);

	var _helper = __webpack_require__(371);

	var wrapTreePathInfo = _helper.wrapTreePathInfo;
	var TEXT_PADDING = 8;
	var ITEM_GAP = 8;
	var ARRAY_LENGTH = 5;

	function Breadcrumb(containerGroup) {
	  /**
	   * @private
	   * @type {module:zrender/container/Group}
	   */
	  this.group = new graphic.Group();
	  containerGroup.add(this.group);
	}

	Breadcrumb.prototype = {
	  constructor: Breadcrumb,
	  render: function (seriesModel, api, targetNode, onSelect) {
	    var model = seriesModel.getModel('breadcrumb');
	    var thisGroup = this.group;
	    thisGroup.removeAll();

	    if (!model.get('show') || !targetNode) {
	      return;
	    }

	    var normalStyleModel = model.getModel('itemStyle.normal'); // var emphasisStyleModel = model.getModel('itemStyle.emphasis');

	    var textStyleModel = normalStyleModel.getModel('textStyle');
	    var layoutParam = {
	      pos: {
	        left: model.get('left'),
	        right: model.get('right'),
	        top: model.get('top'),
	        bottom: model.get('bottom')
	      },
	      box: {
	        width: api.getWidth(),
	        height: api.getHeight()
	      },
	      emptyItemWidth: model.get('emptyItemWidth'),
	      totalWidth: 0,
	      renderList: []
	    };

	    this._prepare(targetNode, layoutParam, textStyleModel);

	    this._renderContent(seriesModel, layoutParam, normalStyleModel, textStyleModel, onSelect);

	    layout.positionElement(thisGroup, layoutParam.pos, layoutParam.box);
	  },

	  /**
	   * Prepare render list and total width
	   * @private
	   */
	  _prepare: function (targetNode, layoutParam, textStyleModel) {
	    for (var node = targetNode; node; node = node.parentNode) {
	      var text = node.getModel().get('name');
	      var textRect = textStyleModel.getTextRect(text);
	      var itemWidth = Math.max(textRect.width + TEXT_PADDING * 2, layoutParam.emptyItemWidth);
	      layoutParam.totalWidth += itemWidth + ITEM_GAP;
	      layoutParam.renderList.push({
	        node: node,
	        text: text,
	        width: itemWidth
	      });
	    }
	  },

	  /**
	   * @private
	   */
	  _renderContent: function (seriesModel, layoutParam, normalStyleModel, textStyleModel, onSelect) {
	    // Start rendering.
	    var lastX = 0;
	    var emptyItemWidth = layoutParam.emptyItemWidth;
	    var height = seriesModel.get('breadcrumb.height');
	    var availableSize = layout.getAvailableSize(layoutParam.pos, layoutParam.box);
	    var totalWidth = layoutParam.totalWidth;
	    var renderList = layoutParam.renderList;

	    for (var i = renderList.length - 1; i >= 0; i--) {
	      var item = renderList[i];
	      var itemNode = item.node;
	      var itemWidth = item.width;
	      var text = item.text; // Hdie text and shorten width if necessary.

	      if (totalWidth > availableSize.width) {
	        totalWidth -= itemWidth - emptyItemWidth;
	        itemWidth = emptyItemWidth;
	        text = null;
	      }

	      var el = new graphic.Polygon({
	        shape: {
	          points: makeItemPoints(lastX, 0, itemWidth, height, i === renderList.length - 1, i === 0)
	        },
	        style: zrUtil.defaults(normalStyleModel.getItemStyle(), {
	          lineJoin: 'bevel',
	          text: text,
	          textFill: textStyleModel.getTextColor(),
	          textFont: textStyleModel.getFont()
	        }),
	        z: 10,
	        onclick: zrUtil.curry(onSelect, itemNode)
	      });
	      this.group.add(el);
	      packEventData(el, seriesModel, itemNode);
	      lastX += itemWidth + ITEM_GAP;
	    }
	  },

	  /**
	   * @override
	   */
	  remove: function () {
	    this.group.removeAll();
	  }
	};

	function makeItemPoints(x, y, itemWidth, itemHeight, head, tail) {
	  var points = [[head ? x : x - ARRAY_LENGTH, y], [x + itemWidth, y], [x + itemWidth, y + itemHeight], [head ? x : x - ARRAY_LENGTH, y + itemHeight]];
	  !tail && points.splice(2, 0, [x + itemWidth + ARRAY_LENGTH, y + itemHeight / 2]);
	  !head && points.push([x, y + itemHeight / 2]);
	  return points;
	} // Package custom mouse event.


	function packEventData(el, seriesModel, itemNode) {
	  el.eventData = {
	    componentType: 'series',
	    componentSubType: 'treemap',
	    seriesIndex: seriesModel.componentIndex,
	    seriesName: seriesModel.name,
	    seriesType: 'treemap',
	    selfType: 'breadcrumb',
	    // Distinguish with click event on treemap node.
	    nodeData: {
	      dataIndex: itemNode && itemNode.dataIndex,
	      name: itemNode && itemNode.name
	    },
	    treePathInfo: itemNode && wrapTreePathInfo(itemNode, seriesModel)
	  };
	}

	var _default = Breadcrumb;
	module.exports = _default;

/***/ },
/* 374 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	/**
	 * @param {number} [time=500] Time in ms
	 * @param {string} [easing='linear']
	 * @param {number} [delay=0]
	 * @param {Function} [callback]
	 *
	 * @example
	 *  // Animate position
	 *  animation
	 *      .createWrap()
	 *      .add(el1, {position: [10, 10]})
	 *      .add(el2, {shape: {width: 500}, style: {fill: 'red'}}, 400)
	 *      .done(function () { // done })
	 *      .start('cubicOut');
	 */
	function createWrap() {
	  var storage = [];
	  var elExistsMap = {};
	  var doneCallback;
	  return {
	    /**
	     * Caution: a el can only be added once, otherwise 'done'
	     * might not be called. This method checks this (by el.id),
	     * suppresses adding and returns false when existing el found.
	     *
	     * @param {modele:zrender/Element} el
	     * @param {Object} target
	     * @param {number} [time=500]
	     * @param {number} [delay=0]
	     * @param {string} [easing='linear']
	     * @return {boolean} Whether adding succeeded.
	     *
	     * @example
	     *     add(el, target, time, delay, easing);
	     *     add(el, target, time, easing);
	     *     add(el, target, time);
	     *     add(el, target);
	     */
	    add: function (el, target, time, delay, easing) {
	      if (zrUtil.isString(delay)) {
	        easing = delay;
	        delay = 0;
	      }

	      if (elExistsMap[el.id]) {
	        return false;
	      }

	      elExistsMap[el.id] = 1;
	      storage.push({
	        el: el,
	        target: target,
	        time: time,
	        delay: delay,
	        easing: easing
	      });
	      return true;
	    },

	    /**
	     * Only execute when animation finished. Will not execute when any
	     * of 'stop' or 'stopAnimation' called.
	     *
	     * @param {Function} callback
	     */
	    done: function (callback) {
	      doneCallback = callback;
	      return this;
	    },

	    /**
	     * Will stop exist animation firstly.
	     */
	    start: function () {
	      var count = storage.length;

	      for (var i = 0, len = storage.length; i < len; i++) {
	        var item = storage[i];
	        item.el.animateTo(item.target, item.time, item.delay, item.easing, done);
	      }

	      return this;

	      function done() {
	        count--;

	        if (!count) {
	          storage.length = 0;
	          elExistsMap = {};
	          doneCallback && doneCallback();
	        }
	      }
	    }
	  };
	}

	exports.createWrap = createWrap;

/***/ },
/* 375 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var helper = __webpack_require__(371);

	/**
	 * @file Treemap action
	 */
	var noop = function () {};

	var actionTypes = ['treemapZoomToNode', 'treemapRender', 'treemapMove'];

	for (var i = 0; i < actionTypes.length; i++) {
	  echarts.registerAction({
	    type: actionTypes[i],
	    update: 'updateView'
	  }, noop);
	}

	echarts.registerAction({
	  type: 'treemapRootToNode',
	  update: 'updateView'
	}, function (payload, ecModel) {
	  ecModel.eachComponent({
	    mainType: 'series',
	    subType: 'treemap',
	    query: payload
	  }, handleRootToNode);

	  function handleRootToNode(model, index) {
	    var targetInfo = helper.retrieveTargetInfo(payload, model);

	    if (targetInfo) {
	      var originViewRoot = model.getViewRoot();

	      if (originViewRoot) {
	        payload.direction = helper.aboveViewRoot(originViewRoot, targetInfo.node) ? 'rollUp' : 'drillDown';
	      }

	      model.resetViewRoot(targetInfo.node);
	    }
	  }
	});

/***/ },
/* 376 */
/***/ function(module, exports, __webpack_require__) {

	var VisualMapping = __webpack_require__(377);

	var zrColor = __webpack_require__(180);

	var zrUtil = __webpack_require__(166);

	var isArray = zrUtil.isArray;
	var ITEM_STYLE_NORMAL = 'itemStyle.normal';

	function _default(ecModel, api, payload) {
	  var condition = {
	    mainType: 'series',
	    subType: 'treemap',
	    query: payload
	  };
	  ecModel.eachComponent(condition, function (seriesModel) {
	    var tree = seriesModel.getData().tree;
	    var root = tree.root;
	    var seriesItemStyleModel = seriesModel.getModel(ITEM_STYLE_NORMAL);

	    if (root.isRemoved()) {
	      return;
	    }

	    var levelItemStyles = zrUtil.map(tree.levelModels, function (levelModel) {
	      return levelModel ? levelModel.get(ITEM_STYLE_NORMAL) : null;
	    });
	    travelTree(root, // Visual should calculate from tree root but not view root.
	    {}, levelItemStyles, seriesItemStyleModel, seriesModel.getViewRoot().getAncestors(), seriesModel);
	  });
	}

	function travelTree(node, designatedVisual, levelItemStyles, seriesItemStyleModel, viewRootAncestors, seriesModel) {
	  var nodeModel = node.getModel();
	  var nodeLayout = node.getLayout(); // Optimize

	  if (!nodeLayout || nodeLayout.invisible || !nodeLayout.isInView) {
	    return;
	  }

	  var nodeItemStyleModel = node.getModel(ITEM_STYLE_NORMAL);
	  var levelItemStyle = levelItemStyles[node.depth];
	  var visuals = buildVisuals(nodeItemStyleModel, designatedVisual, levelItemStyle, seriesItemStyleModel); // calculate border color

	  var borderColor = nodeItemStyleModel.get('borderColor');
	  var borderColorSaturation = nodeItemStyleModel.get('borderColorSaturation');
	  var thisNodeColor;

	  if (borderColorSaturation != null) {
	    // For performance, do not always execute 'calculateColor'.
	    thisNodeColor = calculateColor(visuals, node);
	    borderColor = calculateBorderColor(borderColorSaturation, thisNodeColor);
	  }

	  node.setVisual('borderColor', borderColor);
	  var viewChildren = node.viewChildren;

	  if (!viewChildren || !viewChildren.length) {
	    thisNodeColor = calculateColor(visuals, node); // Apply visual to this node.

	    node.setVisual('color', thisNodeColor);
	  } else {
	    var mapping = buildVisualMapping(node, nodeModel, nodeLayout, nodeItemStyleModel, visuals, viewChildren); // Designate visual to children.

	    zrUtil.each(viewChildren, function (child, index) {
	      // If higher than viewRoot, only ancestors of viewRoot is needed to visit.
	      if (child.depth >= viewRootAncestors.length || child === viewRootAncestors[child.depth]) {
	        var childVisual = mapVisual(nodeModel, visuals, child, index, mapping, seriesModel);
	        travelTree(child, childVisual, levelItemStyles, seriesItemStyleModel, viewRootAncestors, seriesModel);
	      }
	    });
	  }
	}

	function buildVisuals(nodeItemStyleModel, designatedVisual, levelItemStyle, seriesItemStyleModel) {
	  var visuals = zrUtil.extend({}, designatedVisual);
	  zrUtil.each(['color', 'colorAlpha', 'colorSaturation'], function (visualName) {
	    // Priority: thisNode > thisLevel > parentNodeDesignated > seriesModel
	    var val = nodeItemStyleModel.get(visualName, true); // Ignore parent

	    val == null && levelItemStyle && (val = levelItemStyle[visualName]);
	    val == null && (val = designatedVisual[visualName]);
	    val == null && (val = seriesItemStyleModel.get(visualName));
	    val != null && (visuals[visualName] = val);
	  });
	  return visuals;
	}

	function calculateColor(visuals) {
	  var color = getValueVisualDefine(visuals, 'color');

	  if (color) {
	    var colorAlpha = getValueVisualDefine(visuals, 'colorAlpha');
	    var colorSaturation = getValueVisualDefine(visuals, 'colorSaturation');

	    if (colorSaturation) {
	      color = zrColor.modifyHSL(color, null, null, colorSaturation);
	    }

	    if (colorAlpha) {
	      color = zrColor.modifyAlpha(color, colorAlpha);
	    }

	    return color;
	  }
	}

	function calculateBorderColor(borderColorSaturation, thisNodeColor) {
	  return thisNodeColor != null ? zrColor.modifyHSL(thisNodeColor, null, null, borderColorSaturation) : null;
	}

	function getValueVisualDefine(visuals, name) {
	  var value = visuals[name];

	  if (value != null && value !== 'none') {
	    return value;
	  }
	}

	function buildVisualMapping(node, nodeModel, nodeLayout, nodeItemStyleModel, visuals, viewChildren) {
	  if (!viewChildren || !viewChildren.length) {
	    return;
	  }

	  var rangeVisual = getRangeVisual(nodeModel, 'color') || visuals.color != null && visuals.color !== 'none' && (getRangeVisual(nodeModel, 'colorAlpha') || getRangeVisual(nodeModel, 'colorSaturation'));

	  if (!rangeVisual) {
	    return;
	  }

	  var visualMin = nodeModel.get('visualMin');
	  var visualMax = nodeModel.get('visualMax');
	  var dataExtent = nodeLayout.dataExtent.slice();
	  visualMin != null && visualMin < dataExtent[0] && (dataExtent[0] = visualMin);
	  visualMax != null && visualMax > dataExtent[1] && (dataExtent[1] = visualMax);
	  var colorMappingBy = nodeModel.get('colorMappingBy');
	  var opt = {
	    type: rangeVisual.name,
	    dataExtent: dataExtent,
	    visual: rangeVisual.range
	  };

	  if (opt.type === 'color' && (colorMappingBy === 'index' || colorMappingBy === 'id')) {
	    opt.mappingMethod = 'category';
	    opt.loop = true; // categories is ordinal, so do not set opt.categories.
	  } else {
	    opt.mappingMethod = 'linear';
	  }

	  var mapping = new VisualMapping(opt);
	  mapping.__drColorMappingBy = colorMappingBy;
	  return mapping;
	} // Notice: If we dont have the attribute 'colorRange', but only use
	// attribute 'color' to represent both concepts of 'colorRange' and 'color',
	// (It means 'colorRange' when 'color' is Array, means 'color' when not array),
	// this problem will be encountered:
	// If a level-1 node dont have children, and its siblings has children,
	// and colorRange is set on level-1, then the node can not be colored.
	// So we separate 'colorRange' and 'color' to different attributes.


	function getRangeVisual(nodeModel, name) {
	  // 'colorRange', 'colorARange', 'colorSRange'.
	  // If not exsits on this node, fetch from levels and series.
	  var range = nodeModel.get(name);
	  return isArray(range) && range.length ? {
	    name: name,
	    range: range
	  } : null;
	}

	function mapVisual(nodeModel, visuals, child, index, mapping, seriesModel) {
	  var childVisuals = zrUtil.extend({}, visuals);

	  if (mapping) {
	    var mappingType = mapping.type;
	    var colorMappingBy = mappingType === 'color' && mapping.__drColorMappingBy;
	    var value = colorMappingBy === 'index' ? index : colorMappingBy === 'id' ? seriesModel.mapIdToIndex(child.getId()) : child.getValue(nodeModel.get('visualDimension'));
	    childVisuals[mappingType] = mapping.mapValueToVisual(value);
	  }

	  return childVisuals;
	}

	module.exports = _default;

/***/ },
/* 377 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var zrColor = __webpack_require__(180);

	var _number = __webpack_require__(205);

	var linearMap = _number.linearMap;
	var each = zrUtil.each;
	var isObject = zrUtil.isObject;
	var CATEGORY_DEFAULT_VISUAL_INDEX = -1;
	/**
	 * @param {Object} option
	 * @param {string} [option.type] See visualHandlers.
	 * @param {string} [option.mappingMethod] 'linear' or 'piecewise' or 'category' or 'fixed'
	 * @param {Array.<number>=} [option.dataExtent] [minExtent, maxExtent],
	 *                                              required when mappingMethod is 'linear'
	 * @param {Array.<Object>=} [option.pieceList] [
	 *                                             {value: someValue},
	 *                                             {interval: [min1, max1], visual: {...}},
	 *                                             {interval: [min2, max2]}
	 *                                             ],
	 *                                            required when mappingMethod is 'piecewise'.
	 *                                            Visual for only each piece can be specified.
	 * @param {Array.<string|Object>=} [option.categories] ['cate1', 'cate2']
	 *                                            required when mappingMethod is 'category'.
	 *                                            If no option.categories, categories is set
	 *                                            as [0, 1, 2, ...].
	 * @param {boolean} [option.loop=false] Whether loop mapping when mappingMethod is 'category'.
	 * @param {(Array|Object|*)} [option.visual]  Visual data.
	 *                                            when mappingMethod is 'category',
	 *                                            visual data can be array or object
	 *                                            (like: {cate1: '#222', none: '#fff'})
	 *                                            or primary types (which represents
	 *                                            defualt category visual), otherwise visual
	 *                                            can be array or primary (which will be
	 *                                            normalized to array).
	 *
	 */

	var VisualMapping = function (option) {
	  var mappingMethod = option.mappingMethod;
	  var visualType = option.type;
	  /**
	   * @readOnly
	   * @type {Object}
	   */

	  var thisOption = this.option = zrUtil.clone(option);
	  /**
	   * @readOnly
	   * @type {string}
	   */

	  this.type = visualType;
	  /**
	   * @readOnly
	   * @type {string}
	   */

	  this.mappingMethod = mappingMethod;
	  /**
	   * @private
	   * @type {Function}
	   */

	  this._normalizeData = normalizers[mappingMethod];
	  var visualHandler = visualHandlers[visualType];
	  /**
	   * @public
	   * @type {Function}
	   */

	  this.applyVisual = visualHandler.applyVisual;
	  /**
	   * @public
	   * @type {Function}
	   */

	  this.getColorMapper = visualHandler.getColorMapper;
	  /**
	   * @private
	   * @type {Function}
	   */

	  this._doMap = visualHandler._doMap[mappingMethod];

	  if (mappingMethod === 'piecewise') {
	    normalizeVisualRange(thisOption);
	    preprocessForPiecewise(thisOption);
	  } else if (mappingMethod === 'category') {
	    thisOption.categories ? preprocessForSpecifiedCategory(thisOption) // categories is ordinal when thisOption.categories not specified,
	    // which need no more preprocess except normalize visual.
	    : normalizeVisualRange(thisOption, true);
	  } else {
	    // mappingMethod === 'linear' or 'fixed'
	    zrUtil.assert(mappingMethod !== 'linear' || thisOption.dataExtent);
	    normalizeVisualRange(thisOption);
	  }
	};

	VisualMapping.prototype = {
	  constructor: VisualMapping,
	  mapValueToVisual: function (value) {
	    var normalized = this._normalizeData(value);

	    return this._doMap(normalized, value);
	  },
	  getNormalizer: function () {
	    return zrUtil.bind(this._normalizeData, this);
	  }
	};
	var visualHandlers = VisualMapping.visualHandlers = {
	  color: {
	    applyVisual: makeApplyVisual('color'),

	    /**
	     * Create a mapper function
	     * @return {Function}
	     */
	    getColorMapper: function () {
	      var thisOption = this.option;
	      return zrUtil.bind(thisOption.mappingMethod === 'category' ? function (value, isNormalized) {
	        !isNormalized && (value = this._normalizeData(value));
	        return doMapCategory.call(this, value);
	      } : function (value, isNormalized, out) {
	        // If output rgb array
	        // which will be much faster and useful in pixel manipulation
	        var returnRGBArray = !!out;
	        !isNormalized && (value = this._normalizeData(value));
	        out = zrColor.fastLerp(value, thisOption.parsedVisual, out);
	        return returnRGBArray ? out : zrColor.stringify(out, 'rgba');
	      }, this);
	    },
	    _doMap: {
	      linear: function (normalized) {
	        return zrColor.stringify(zrColor.fastLerp(normalized, this.option.parsedVisual), 'rgba');
	      },
	      category: doMapCategory,
	      piecewise: function (normalized, value) {
	        var result = getSpecifiedVisual.call(this, value);

	        if (result == null) {
	          result = zrColor.stringify(zrColor.fastLerp(normalized, this.option.parsedVisual), 'rgba');
	        }

	        return result;
	      },
	      fixed: doMapFixed
	    }
	  },
	  colorHue: makePartialColorVisualHandler(function (color, value) {
	    return zrColor.modifyHSL(color, value);
	  }),
	  colorSaturation: makePartialColorVisualHandler(function (color, value) {
	    return zrColor.modifyHSL(color, null, value);
	  }),
	  colorLightness: makePartialColorVisualHandler(function (color, value) {
	    return zrColor.modifyHSL(color, null, null, value);
	  }),
	  colorAlpha: makePartialColorVisualHandler(function (color, value) {
	    return zrColor.modifyAlpha(color, value);
	  }),
	  opacity: {
	    applyVisual: makeApplyVisual('opacity'),
	    _doMap: makeDoMap([0, 1])
	  },
	  symbol: {
	    applyVisual: function (value, getter, setter) {
	      var symbolCfg = this.mapValueToVisual(value);

	      if (zrUtil.isString(symbolCfg)) {
	        setter('symbol', symbolCfg);
	      } else if (isObject(symbolCfg)) {
	        for (var name in symbolCfg) {
	          if (symbolCfg.hasOwnProperty(name)) {
	            setter(name, symbolCfg[name]);
	          }
	        }
	      }
	    },
	    _doMap: {
	      linear: doMapToArray,
	      category: doMapCategory,
	      piecewise: function (normalized, value) {
	        var result = getSpecifiedVisual.call(this, value);

	        if (result == null) {
	          result = doMapToArray.call(this, normalized);
	        }

	        return result;
	      },
	      fixed: doMapFixed
	    }
	  },
	  symbolSize: {
	    applyVisual: makeApplyVisual('symbolSize'),
	    _doMap: makeDoMap([0, 1])
	  }
	};

	function preprocessForPiecewise(thisOption) {
	  var pieceList = thisOption.pieceList;
	  thisOption.hasSpecialVisual = false;
	  zrUtil.each(pieceList, function (piece, index) {
	    piece.originIndex = index; // piece.visual is "result visual value" but not
	    // a visual range, so it does not need to be normalized.

	    if (piece.visual != null) {
	      thisOption.hasSpecialVisual = true;
	    }
	  });
	}

	function preprocessForSpecifiedCategory(thisOption) {
	  // Hash categories.
	  var categories = thisOption.categories;
	  var visual = thisOption.visual;
	  var categoryMap = thisOption.categoryMap = {};
	  each(categories, function (cate, index) {
	    categoryMap[cate] = index;
	  }); // Process visual map input.

	  if (!zrUtil.isArray(visual)) {
	    var visualArr = [];

	    if (zrUtil.isObject(visual)) {
	      each(visual, function (v, cate) {
	        var index = categoryMap[cate];
	        visualArr[index != null ? index : CATEGORY_DEFAULT_VISUAL_INDEX] = v;
	      });
	    } else {
	      // Is primary type, represents default visual.
	      visualArr[CATEGORY_DEFAULT_VISUAL_INDEX] = visual;
	    }

	    visual = setVisualToOption(thisOption, visualArr);
	  } // Remove categories that has no visual,
	  // then we can mapping them to CATEGORY_DEFAULT_VISUAL_INDEX.


	  for (var i = categories.length - 1; i >= 0; i--) {
	    if (visual[i] == null) {
	      delete categoryMap[categories[i]];
	      categories.pop();
	    }
	  }
	}

	function normalizeVisualRange(thisOption, isCategory) {
	  var visual = thisOption.visual;
	  var visualArr = [];

	  if (zrUtil.isObject(visual)) {
	    each(visual, function (v) {
	      visualArr.push(v);
	    });
	  } else if (visual != null) {
	    visualArr.push(visual);
	  }

	  var doNotNeedPair = {
	    color: 1,
	    symbol: 1
	  };

	  if (!isCategory && visualArr.length === 1 && !doNotNeedPair.hasOwnProperty(thisOption.type)) {
	    // Do not care visualArr.length === 0, which is illegal.
	    visualArr[1] = visualArr[0];
	  }

	  setVisualToOption(thisOption, visualArr);
	}

	function makePartialColorVisualHandler(applyValue) {
	  return {
	    applyVisual: function (value, getter, setter) {
	      value = this.mapValueToVisual(value); // Must not be array value

	      setter('color', applyValue(getter('color'), value));
	    },
	    _doMap: makeDoMap([0, 1])
	  };
	}

	function doMapToArray(normalized) {
	  var visual = this.option.visual;
	  return visual[Math.round(linearMap(normalized, [0, 1], [0, visual.length - 1], true))] || {};
	}

	function makeApplyVisual(visualType) {
	  return function (value, getter, setter) {
	    setter(visualType, this.mapValueToVisual(value));
	  };
	}

	function doMapCategory(normalized) {
	  var visual = this.option.visual;
	  return visual[this.option.loop && normalized !== CATEGORY_DEFAULT_VISUAL_INDEX ? normalized % visual.length : normalized];
	}

	function doMapFixed() {
	  return this.option.visual[0];
	}

	function makeDoMap(sourceExtent) {
	  return {
	    linear: function (normalized) {
	      return linearMap(normalized, sourceExtent, this.option.visual, true);
	    },
	    category: doMapCategory,
	    piecewise: function (normalized, value) {
	      var result = getSpecifiedVisual.call(this, value);

	      if (result == null) {
	        result = linearMap(normalized, sourceExtent, this.option.visual, true);
	      }

	      return result;
	    },
	    fixed: doMapFixed
	  };
	}

	function getSpecifiedVisual(value) {
	  var thisOption = this.option;
	  var pieceList = thisOption.pieceList;

	  if (thisOption.hasSpecialVisual) {
	    var pieceIndex = VisualMapping.findPieceIndex(value, pieceList);
	    var piece = pieceList[pieceIndex];

	    if (piece && piece.visual) {
	      return piece.visual[this.type];
	    }
	  }
	}

	function setVisualToOption(thisOption, visualArr) {
	  thisOption.visual = visualArr;

	  if (thisOption.type === 'color') {
	    thisOption.parsedVisual = zrUtil.map(visualArr, function (item) {
	      return zrColor.parse(item);
	    });
	  }

	  return visualArr;
	}
	/**
	 * Normalizers by mapping methods.
	 */


	var normalizers = {
	  linear: function (value) {
	    return linearMap(value, this.option.dataExtent, [0, 1], true);
	  },
	  piecewise: function (value) {
	    var pieceList = this.option.pieceList;
	    var pieceIndex = VisualMapping.findPieceIndex(value, pieceList, true);

	    if (pieceIndex != null) {
	      return linearMap(pieceIndex, [0, pieceList.length - 1], [0, 1], true);
	    }
	  },
	  category: function (value) {
	    var index = this.option.categories ? this.option.categoryMap[value] : value; // ordinal

	    return index == null ? CATEGORY_DEFAULT_VISUAL_INDEX : index;
	  },
	  fixed: zrUtil.noop
	};
	/**
	 * List available visual types.
	 *
	 * @public
	 * @return {Array.<string>}
	 */

	VisualMapping.listVisualTypes = function () {
	  var visualTypes = [];
	  zrUtil.each(visualHandlers, function (handler, key) {
	    visualTypes.push(key);
	  });
	  return visualTypes;
	};
	/**
	 * @public
	 */


	VisualMapping.addVisualHandler = function (name, handler) {
	  visualHandlers[name] = handler;
	};
	/**
	 * @public
	 */


	VisualMapping.isValidType = function (visualType) {
	  return visualHandlers.hasOwnProperty(visualType);
	};
	/**
	 * Convinent method.
	 * Visual can be Object or Array or primary type.
	 *
	 * @public
	 */


	VisualMapping.eachVisual = function (visual, callback, context) {
	  if (zrUtil.isObject(visual)) {
	    zrUtil.each(visual, callback, context);
	  } else {
	    callback.call(context, visual);
	  }
	};

	VisualMapping.mapVisual = function (visual, callback, context) {
	  var isPrimary;
	  var newVisual = zrUtil.isArray(visual) ? [] : zrUtil.isObject(visual) ? {} : (isPrimary = true, null);
	  VisualMapping.eachVisual(visual, function (v, key) {
	    var newVal = callback.call(context, v, key);
	    isPrimary ? newVisual = newVal : newVisual[key] = newVal;
	  });
	  return newVisual;
	};
	/**
	 * @public
	 * @param {Object} obj
	 * @return {Object} new object containers visual values.
	 *                 If no visuals, return null.
	 */


	VisualMapping.retrieveVisuals = function (obj) {
	  var ret = {};
	  var hasVisual;
	  obj && each(visualHandlers, function (h, visualType) {
	    if (obj.hasOwnProperty(visualType)) {
	      ret[visualType] = obj[visualType];
	      hasVisual = true;
	    }
	  });
	  return hasVisual ? ret : null;
	};
	/**
	 * Give order to visual types, considering colorSaturation, colorAlpha depends on color.
	 *
	 * @public
	 * @param {(Object|Array)} visualTypes If Object, like: {color: ..., colorSaturation: ...}
	 *                                     IF Array, like: ['color', 'symbol', 'colorSaturation']
	 * @return {Array.<string>} Sorted visual types.
	 */


	VisualMapping.prepareVisualTypes = function (visualTypes) {
	  if (isObject(visualTypes)) {
	    var types = [];
	    each(visualTypes, function (item, type) {
	      types.push(type);
	    });
	    visualTypes = types;
	  } else if (zrUtil.isArray(visualTypes)) {
	    visualTypes = visualTypes.slice();
	  } else {
	    return [];
	  }

	  visualTypes.sort(function (type1, type2) {
	    // color should be front of colorSaturation, colorAlpha, ...
	    // symbol and symbolSize do not matter.
	    return type2 === 'color' && type1 !== 'color' && type1.indexOf('color') === 0 ? 1 : -1;
	  });
	  return visualTypes;
	};
	/**
	 * 'color', 'colorSaturation', 'colorAlpha', ... are depends on 'color'.
	 * Other visuals are only depends on themself.
	 *
	 * @public
	 * @param {string} visualType1
	 * @param {string} visualType2
	 * @return {boolean}
	 */


	VisualMapping.dependsOn = function (visualType1, visualType2) {
	  return visualType2 === 'color' ? !!(visualType1 && visualType1.indexOf(visualType2) === 0) : visualType1 === visualType2;
	};
	/**
	 * @param {number} value
	 * @param {Array.<Object>} pieceList [{value: ..., interval: [min, max]}, ...]
	 *                         Always from small to big.
	 * @param {boolean} [findClosestWhenOutside=false]
	 * @return {number} index
	 */


	VisualMapping.findPieceIndex = function (value, pieceList, findClosestWhenOutside) {
	  var possibleI;
	  var abs = Infinity; // value has the higher priority.

	  for (var i = 0, len = pieceList.length; i < len; i++) {
	    var pieceValue = pieceList[i].value;

	    if (pieceValue != null) {
	      if (pieceValue === value // FIXME
	      // It is supposed to compare value according to value type of dimension,
	      // but currently value type can exactly be string or number.
	      // Compromise for numeric-like string (like '12'), especially
	      // in the case that visualMap.categories is ['22', '33'].
	      || typeof pieceValue === 'string' && pieceValue === value + '') {
	        return i;
	      }

	      findClosestWhenOutside && updatePossible(pieceValue, i);
	    }
	  }

	  for (var i = 0, len = pieceList.length; i < len; i++) {
	    var piece = pieceList[i];
	    var interval = piece.interval;
	    var close = piece.close;

	    if (interval) {
	      if (interval[0] === -Infinity) {
	        if (littleThan(close[1], value, interval[1])) {
	          return i;
	        }
	      } else if (interval[1] === Infinity) {
	        if (littleThan(close[0], interval[0], value)) {
	          return i;
	        }
	      } else if (littleThan(close[0], interval[0], value) && littleThan(close[1], value, interval[1])) {
	        return i;
	      }

	      findClosestWhenOutside && updatePossible(interval[0], i);
	      findClosestWhenOutside && updatePossible(interval[1], i);
	    }
	  }

	  if (findClosestWhenOutside) {
	    return value === Infinity ? pieceList.length - 1 : value === -Infinity ? 0 : possibleI;
	  }

	  function updatePossible(val, index) {
	    var newAbs = Math.abs(val - value);

	    if (newAbs < abs) {
	      abs = newAbs;
	      possibleI = index;
	    }
	  }
	};

	function littleThan(close, a, b) {
	  return close ? a <= b : a < b;
	}

	var _default = VisualMapping;
	module.exports = _default;

/***/ },
/* 378 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var BoundingRect = __webpack_require__(184);

	var _number = __webpack_require__(205);

	var parsePercent = _number.parsePercent;
	var MAX_SAFE_INTEGER = _number.MAX_SAFE_INTEGER;

	var layout = __webpack_require__(247);

	var helper = __webpack_require__(371);

	var mathMax = Math.max;
	var mathMin = Math.min;
	var retrieveValue = zrUtil.retrieve;
	var each = zrUtil.each;
	var PATH_BORDER_WIDTH = ['itemStyle', 'normal', 'borderWidth'];
	var PATH_GAP_WIDTH = ['itemStyle', 'normal', 'gapWidth'];
	var PATH_UPPER_LABEL_SHOW = ['upperLabel', 'normal', 'show'];
	var PATH_UPPER_LABEL_HEIGHT = ['upperLabel', 'normal', 'height'];
	/**
	 * @public
	 */

	function _default(ecModel, api, payload) {
	  // Layout result in each node:
	  // {x, y, width, height, area, borderWidth}
	  var condition = {
	    mainType: 'series',
	    subType: 'treemap',
	    query: payload
	  };
	  ecModel.eachComponent(condition, function (seriesModel) {
	    var ecWidth = api.getWidth();
	    var ecHeight = api.getHeight();
	    var seriesOption = seriesModel.option;
	    var layoutInfo = layout.getLayoutRect(seriesModel.getBoxLayoutParams(), {
	      width: api.getWidth(),
	      height: api.getHeight()
	    });
	    var size = seriesOption.size || []; // Compatible with ec2.

	    var containerWidth = parsePercent(retrieveValue(layoutInfo.width, size[0]), ecWidth);
	    var containerHeight = parsePercent(retrieveValue(layoutInfo.height, size[1]), ecHeight); // Fetch payload info.

	    var payloadType = payload && payload.type;
	    var targetInfo = helper.retrieveTargetInfo(payload, seriesModel);
	    var rootRect = payloadType === 'treemapRender' || payloadType === 'treemapMove' ? payload.rootRect : null;
	    var viewRoot = seriesModel.getViewRoot();
	    var viewAbovePath = helper.getPathToRoot(viewRoot);

	    if (payloadType !== 'treemapMove') {
	      var rootSize = payloadType === 'treemapZoomToNode' ? estimateRootSize(seriesModel, targetInfo, viewRoot, containerWidth, containerHeight) : rootRect ? [rootRect.width, rootRect.height] : [containerWidth, containerHeight];
	      var sort = seriesOption.sort;

	      if (sort && sort !== 'asc' && sort !== 'desc') {
	        sort = 'desc';
	      }

	      var options = {
	        squareRatio: seriesOption.squareRatio,
	        sort: sort,
	        leafDepth: seriesOption.leafDepth
	      }; // layout should be cleared because using updateView but not update.

	      viewRoot.hostTree.clearLayouts(); // TODO
	      // optimize: if out of view clip, do not layout.
	      // But take care that if do not render node out of view clip,
	      // how to calculate start po

	      var viewRootLayout = {
	        x: 0,
	        y: 0,
	        width: rootSize[0],
	        height: rootSize[1],
	        area: rootSize[0] * rootSize[1]
	      };
	      viewRoot.setLayout(viewRootLayout);
	      squarify(viewRoot, options, false, 0); // Supplement layout.

	      var viewRootLayout = viewRoot.getLayout();
	      each(viewAbovePath, function (node, index) {
	        var childValue = (viewAbovePath[index + 1] || viewRoot).getValue();
	        node.setLayout(zrUtil.extend({
	          dataExtent: [childValue, childValue],
	          borderWidth: 0,
	          upperHeight: 0
	        }, viewRootLayout));
	      });
	    }

	    var treeRoot = seriesModel.getData().tree.root;
	    treeRoot.setLayout(calculateRootPosition(layoutInfo, rootRect, targetInfo), true);
	    seriesModel.setLayoutInfo(layoutInfo); // FIXME
	    // 现在没有clip功能，暂时取ec高宽。

	    prunning(treeRoot, // Transform to base element coordinate system.
	    new BoundingRect(-layoutInfo.x, -layoutInfo.y, ecWidth, ecHeight), viewAbovePath, viewRoot, 0);
	  });
	}
	/**
	 * Layout treemap with squarify algorithm.
	 * @see https://graphics.ethz.ch/teaching/scivis_common/Literature/squarifiedTreeMaps.pdf
	 * @see https://github.com/mbostock/d3/blob/master/src/layout/treemap.js
	 *
	 * @protected
	 * @param {module:echarts/data/Tree~TreeNode} node
	 * @param {Object} options
	 * @param {string} options.sort 'asc' or 'desc'
	 * @param {number} options.squareRatio
	 * @param {boolean} hideChildren
	 * @param {number} depth
	 */


	function squarify(node, options, hideChildren, depth) {
	  var width;
	  var height;

	  if (node.isRemoved()) {
	    return;
	  }

	  var thisLayout = node.getLayout();
	  width = thisLayout.width;
	  height = thisLayout.height; // Considering border and gap

	  var nodeModel = node.getModel();
	  var borderWidth = nodeModel.get(PATH_BORDER_WIDTH);
	  var halfGapWidth = nodeModel.get(PATH_GAP_WIDTH) / 2;
	  var upperLabelHeight = getUpperLabelHeight(nodeModel);
	  var upperHeight = Math.max(borderWidth, upperLabelHeight);
	  var layoutOffset = borderWidth - halfGapWidth;
	  var layoutOffsetUpper = upperHeight - halfGapWidth;
	  var nodeModel = node.getModel();
	  node.setLayout({
	    borderWidth: borderWidth,
	    upperHeight: upperHeight,
	    upperLabelHeight: upperLabelHeight
	  }, true);
	  width = mathMax(width - 2 * layoutOffset, 0);
	  height = mathMax(height - layoutOffset - layoutOffsetUpper, 0);
	  var totalArea = width * height;
	  var viewChildren = initChildren(node, nodeModel, totalArea, options, hideChildren, depth);

	  if (!viewChildren.length) {
	    return;
	  }

	  var rect = {
	    x: layoutOffset,
	    y: layoutOffsetUpper,
	    width: width,
	    height: height
	  };
	  var rowFixedLength = mathMin(width, height);
	  var best = Infinity; // the best row score so far

	  var row = [];
	  row.area = 0;

	  for (var i = 0, len = viewChildren.length; i < len;) {
	    var child = viewChildren[i];
	    row.push(child);
	    row.area += child.getLayout().area;
	    var score = worst(row, rowFixedLength, options.squareRatio); // continue with this orientation

	    if (score <= best) {
	      i++;
	      best = score;
	    } // abort, and try a different orientation
	    else {
	        row.area -= row.pop().getLayout().area;
	        position(row, rowFixedLength, rect, halfGapWidth, false);
	        rowFixedLength = mathMin(rect.width, rect.height);
	        row.length = row.area = 0;
	        best = Infinity;
	      }
	  }

	  if (row.length) {
	    position(row, rowFixedLength, rect, halfGapWidth, true);
	  }

	  if (!hideChildren) {
	    var childrenVisibleMin = nodeModel.get('childrenVisibleMin');

	    if (childrenVisibleMin != null && totalArea < childrenVisibleMin) {
	      hideChildren = true;
	    }
	  }

	  for (var i = 0, len = viewChildren.length; i < len; i++) {
	    squarify(viewChildren[i], options, hideChildren, depth + 1);
	  }
	}
	/**
	 * Set area to each child, and calculate data extent for visual coding.
	 */


	function initChildren(node, nodeModel, totalArea, options, hideChildren, depth) {
	  var viewChildren = node.children || [];
	  var orderBy = options.sort;
	  orderBy !== 'asc' && orderBy !== 'desc' && (orderBy = null);
	  var overLeafDepth = options.leafDepth != null && options.leafDepth <= depth; // leafDepth has higher priority.

	  if (hideChildren && !overLeafDepth) {
	    return node.viewChildren = [];
	  } // Sort children, order by desc.


	  viewChildren = zrUtil.filter(viewChildren, function (child) {
	    return !child.isRemoved();
	  });
	  sort(viewChildren, orderBy);
	  var info = statistic(nodeModel, viewChildren, orderBy);

	  if (info.sum === 0) {
	    return node.viewChildren = [];
	  }

	  info.sum = filterByThreshold(nodeModel, totalArea, info.sum, orderBy, viewChildren);

	  if (info.sum === 0) {
	    return node.viewChildren = [];
	  } // Set area to each child.


	  for (var i = 0, len = viewChildren.length; i < len; i++) {
	    var area = viewChildren[i].getValue() / info.sum * totalArea; // Do not use setLayout({...}, true), because it is needed to clear last layout.

	    viewChildren[i].setLayout({
	      area: area
	    });
	  }

	  if (overLeafDepth) {
	    viewChildren.length && node.setLayout({
	      isLeafRoot: true
	    }, true);
	    viewChildren.length = 0;
	  }

	  node.viewChildren = viewChildren;
	  node.setLayout({
	    dataExtent: info.dataExtent
	  }, true);
	  return viewChildren;
	}
	/**
	 * Consider 'visibleMin'. Modify viewChildren and get new sum.
	 */


	function filterByThreshold(nodeModel, totalArea, sum, orderBy, orderedChildren) {
	  // visibleMin is not supported yet when no option.sort.
	  if (!orderBy) {
	    return sum;
	  }

	  var visibleMin = nodeModel.get('visibleMin');
	  var len = orderedChildren.length;
	  var deletePoint = len; // Always travel from little value to big value.

	  for (var i = len - 1; i >= 0; i--) {
	    var value = orderedChildren[orderBy === 'asc' ? len - i - 1 : i].getValue();

	    if (value / sum * totalArea < visibleMin) {
	      deletePoint = i;
	      sum -= value;
	    }
	  }

	  orderBy === 'asc' ? orderedChildren.splice(0, len - deletePoint) : orderedChildren.splice(deletePoint, len - deletePoint);
	  return sum;
	}
	/**
	 * Sort
	 */


	function sort(viewChildren, orderBy) {
	  if (orderBy) {
	    viewChildren.sort(function (a, b) {
	      var diff = orderBy === 'asc' ? a.getValue() - b.getValue() : b.getValue() - a.getValue();
	      return diff === 0 ? orderBy === 'asc' ? a.dataIndex - b.dataIndex : b.dataIndex - a.dataIndex : diff;
	    });
	  }

	  return viewChildren;
	}
	/**
	 * Statistic
	 */


	function statistic(nodeModel, children, orderBy) {
	  // Calculate sum.
	  var sum = 0;

	  for (var i = 0, len = children.length; i < len; i++) {
	    sum += children[i].getValue();
	  } // Statistic data extent for latter visual coding.
	  // Notice: data extent should be calculate based on raw children
	  // but not filtered view children, otherwise visual mapping will not
	  // be stable when zoom (where children is filtered by visibleMin).


	  var dimension = nodeModel.get('visualDimension');
	  var dataExtent; // The same as area dimension.

	  if (!children || !children.length) {
	    dataExtent = [NaN, NaN];
	  } else if (dimension === 'value' && orderBy) {
	    dataExtent = [children[children.length - 1].getValue(), children[0].getValue()];
	    orderBy === 'asc' && dataExtent.reverse();
	  } // Other dimension.
	  else {
	      var dataExtent = [Infinity, -Infinity];
	      each(children, function (child) {
	        var value = child.getValue(dimension);
	        value < dataExtent[0] && (dataExtent[0] = value);
	        value > dataExtent[1] && (dataExtent[1] = value);
	      });
	    }

	  return {
	    sum: sum,
	    dataExtent: dataExtent
	  };
	}
	/**
	 * Computes the score for the specified row,
	 * as the worst aspect ratio.
	 */


	function worst(row, rowFixedLength, ratio) {
	  var areaMax = 0;
	  var areaMin = Infinity;

	  for (var i = 0, area, len = row.length; i < len; i++) {
	    area = row[i].getLayout().area;

	    if (area) {
	      area < areaMin && (areaMin = area);
	      area > areaMax && (areaMax = area);
	    }
	  }

	  var squareArea = row.area * row.area;
	  var f = rowFixedLength * rowFixedLength * ratio;
	  return squareArea ? mathMax(f * areaMax / squareArea, squareArea / (f * areaMin)) : Infinity;
	}
	/**
	 * Positions the specified row of nodes. Modifies `rect`.
	 */


	function position(row, rowFixedLength, rect, halfGapWidth, flush) {
	  // When rowFixedLength === rect.width,
	  // it is horizontal subdivision,
	  // rowFixedLength is the width of the subdivision,
	  // rowOtherLength is the height of the subdivision,
	  // and nodes will be positioned from left to right.
	  // wh[idx0WhenH] means: when horizontal,
	  //      wh[idx0WhenH] => wh[0] => 'width'.
	  //      xy[idx1WhenH] => xy[1] => 'y'.
	  var idx0WhenH = rowFixedLength === rect.width ? 0 : 1;
	  var idx1WhenH = 1 - idx0WhenH;
	  var xy = ['x', 'y'];
	  var wh = ['width', 'height'];
	  var last = rect[xy[idx0WhenH]];
	  var rowOtherLength = rowFixedLength ? row.area / rowFixedLength : 0;

	  if (flush || rowOtherLength > rect[wh[idx1WhenH]]) {
	    rowOtherLength = rect[wh[idx1WhenH]]; // over+underflow
	  }

	  for (var i = 0, rowLen = row.length; i < rowLen; i++) {
	    var node = row[i];
	    var nodeLayout = {};
	    var step = rowOtherLength ? node.getLayout().area / rowOtherLength : 0;
	    var wh1 = nodeLayout[wh[idx1WhenH]] = mathMax(rowOtherLength - 2 * halfGapWidth, 0); // We use Math.max/min to avoid negative width/height when considering gap width.

	    var remain = rect[xy[idx0WhenH]] + rect[wh[idx0WhenH]] - last;
	    var modWH = i === rowLen - 1 || remain < step ? remain : step;
	    var wh0 = nodeLayout[wh[idx0WhenH]] = mathMax(modWH - 2 * halfGapWidth, 0);
	    nodeLayout[xy[idx1WhenH]] = rect[xy[idx1WhenH]] + mathMin(halfGapWidth, wh1 / 2);
	    nodeLayout[xy[idx0WhenH]] = last + mathMin(halfGapWidth, wh0 / 2);
	    last += modWH;
	    node.setLayout(nodeLayout, true);
	  }

	  rect[xy[idx1WhenH]] += rowOtherLength;
	  rect[wh[idx1WhenH]] -= rowOtherLength;
	} // Return [containerWidth, containerHeight] as defualt.


	function estimateRootSize(seriesModel, targetInfo, viewRoot, containerWidth, containerHeight) {
	  // If targetInfo.node exists, we zoom to the node,
	  // so estimate whold width and heigth by target node.
	  var currNode = (targetInfo || {}).node;
	  var defaultSize = [containerWidth, containerHeight];

	  if (!currNode || currNode === viewRoot) {
	    return defaultSize;
	  }

	  var parent;
	  var viewArea = containerWidth * containerHeight;
	  var area = viewArea * seriesModel.option.zoomToNodeRatio;

	  while (parent = currNode.parentNode) {
	    // jshint ignore:line
	    var sum = 0;
	    var siblings = parent.children;

	    for (var i = 0, len = siblings.length; i < len; i++) {
	      sum += siblings[i].getValue();
	    }

	    var currNodeValue = currNode.getValue();

	    if (currNodeValue === 0) {
	      return defaultSize;
	    }

	    area *= sum / currNodeValue; // Considering border, suppose aspect ratio is 1.

	    var parentModel = parent.getModel();
	    var borderWidth = parentModel.get(PATH_BORDER_WIDTH);
	    var upperHeight = Math.max(borderWidth, getUpperLabelHeight(parentModel, borderWidth));
	    area += 4 * borderWidth * borderWidth + (3 * borderWidth + upperHeight) * Math.pow(area, 0.5);
	    area > MAX_SAFE_INTEGER && (area = MAX_SAFE_INTEGER);
	    currNode = parent;
	  }

	  area < viewArea && (area = viewArea);
	  var scale = Math.pow(area / viewArea, 0.5);
	  return [containerWidth * scale, containerHeight * scale];
	} // Root postion base on coord of containerGroup


	function calculateRootPosition(layoutInfo, rootRect, targetInfo) {
	  if (rootRect) {
	    return {
	      x: rootRect.x,
	      y: rootRect.y
	    };
	  }

	  var defaultPosition = {
	    x: 0,
	    y: 0
	  };

	  if (!targetInfo) {
	    return defaultPosition;
	  } // If targetInfo is fetched by 'retrieveTargetInfo',
	  // old tree and new tree are the same tree,
	  // so the node still exists and we can visit it.


	  var targetNode = targetInfo.node;
	  var layout = targetNode.getLayout();

	  if (!layout) {
	    return defaultPosition;
	  } // Transform coord from local to container.


	  var targetCenter = [layout.width / 2, layout.height / 2];
	  var node = targetNode;

	  while (node) {
	    var nodeLayout = node.getLayout();
	    targetCenter[0] += nodeLayout.x;
	    targetCenter[1] += nodeLayout.y;
	    node = node.parentNode;
	  }

	  return {
	    x: layoutInfo.width / 2 - targetCenter[0],
	    y: layoutInfo.height / 2 - targetCenter[1]
	  };
	} // Mark nodes visible for prunning when visual coding and rendering.
	// Prunning depends on layout and root position, so we have to do it after layout.


	function prunning(node, clipRect, viewAbovePath, viewRoot, depth) {
	  var nodeLayout = node.getLayout();
	  var nodeInViewAbovePath = viewAbovePath[depth];
	  var isAboveViewRoot = nodeInViewAbovePath && nodeInViewAbovePath === node;

	  if (nodeInViewAbovePath && !isAboveViewRoot || depth === viewAbovePath.length && node !== viewRoot) {
	    return;
	  }

	  node.setLayout({
	    // isInView means: viewRoot sub tree + viewAbovePath
	    isInView: true,
	    // invisible only means: outside view clip so that the node can not
	    // see but still layout for animation preparation but not render.
	    invisible: !isAboveViewRoot && !clipRect.intersect(nodeLayout),
	    isAboveViewRoot: isAboveViewRoot
	  }, true); // Transform to child coordinate.

	  var childClipRect = new BoundingRect(clipRect.x - nodeLayout.x, clipRect.y - nodeLayout.y, clipRect.width, clipRect.height);
	  each(node.viewChildren || [], function (child) {
	    prunning(child, childClipRect, viewAbovePath, viewRoot, depth + 1);
	  });
	}

	function getUpperLabelHeight(model) {
	  return model.get(PATH_UPPER_LABEL_SHOW) ? model.get(PATH_UPPER_LABEL_HEIGHT) : 0;
	}

	module.exports = _default;

/***/ },
/* 379 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var zrUtil = __webpack_require__(166);

	__webpack_require__(380);

	__webpack_require__(383);

	__webpack_require__(388);

	var categoryFilter = __webpack_require__(389);

	var visualSymbol = __webpack_require__(289);

	var categoryVisual = __webpack_require__(390);

	var edgeVisual = __webpack_require__(391);

	var simpleLayout = __webpack_require__(392);

	var circularLayout = __webpack_require__(394);

	var forceLayout = __webpack_require__(396);

	var createView = __webpack_require__(398);

	echarts.registerProcessor(categoryFilter);
	echarts.registerVisual(zrUtil.curry(visualSymbol, 'graph', 'circle', null));
	echarts.registerVisual(categoryVisual);
	echarts.registerVisual(edgeVisual);
	echarts.registerLayout(simpleLayout);
	echarts.registerLayout(circularLayout);
	echarts.registerLayout(forceLayout); // Graph view coordinate system

	echarts.registerCoordinateSystem('graphView', {
	  create: createView
	});

/***/ },
/* 380 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var List = __webpack_require__(265);

	var zrUtil = __webpack_require__(166);

	var _model = __webpack_require__(203);

	var defaultEmphasis = _model.defaultEmphasis;

	var Model = __webpack_require__(206);

	var _format = __webpack_require__(204);

	var encodeHTML = _format.encodeHTML;

	var createGraphFromNodeEdge = __webpack_require__(381);

	var GraphSeries = echarts.extendSeriesModel({
	  type: 'series.graph',
	  init: function (option) {
	    GraphSeries.superApply(this, 'init', arguments); // Provide data for legend select

	    this.legendDataProvider = function () {
	      return this._categoriesData;
	    };

	    this.fillDataTextStyle(option.edges || option.links);

	    this._updateCategoriesData();
	  },
	  mergeOption: function (option) {
	    GraphSeries.superApply(this, 'mergeOption', arguments);
	    this.fillDataTextStyle(option.edges || option.links);

	    this._updateCategoriesData();
	  },
	  mergeDefaultAndTheme: function (option) {
	    GraphSeries.superApply(this, 'mergeDefaultAndTheme', arguments);
	    defaultEmphasis(option.edgeLabel, ['show']);
	  },
	  getInitialData: function (option, ecModel) {
	    var edges = option.edges || option.links || [];
	    var nodes = option.data || option.nodes || [];
	    var self = this;

	    if (nodes && edges) {
	      return createGraphFromNodeEdge(nodes, edges, this, true, beforeLink).data;
	    }

	    function beforeLink(nodeData, edgeData) {
	      // Overwrite nodeData.getItemModel to
	      nodeData.wrapMethod('getItemModel', function (model) {
	        var categoriesModels = self._categoriesModels;
	        var categoryIdx = model.getShallow('category');
	        var categoryModel = categoriesModels[categoryIdx];

	        if (categoryModel) {
	          categoryModel.parentModel = model.parentModel;
	          model.parentModel = categoryModel;
	        }

	        return model;
	      });
	      var edgeLabelModel = self.getModel('edgeLabel'); // For option `edgeLabel` can be found by label.xxx.xxx on item mode.

	      var fakeSeriesModel = new Model({
	        label: edgeLabelModel.option
	      }, edgeLabelModel.parentModel, ecModel);
	      edgeData.wrapMethod('getItemModel', function (model) {
	        model.customizeGetParent(edgeGetParent);
	        return model;
	      });

	      function edgeGetParent(path) {
	        path = this.parsePath(path);
	        return path && path[0] === 'label' ? fakeSeriesModel : this.parentModel;
	      }
	    }
	  },

	  /**
	   * @return {module:echarts/data/Graph}
	   */
	  getGraph: function () {
	    return this.getData().graph;
	  },

	  /**
	   * @return {module:echarts/data/List}
	   */
	  getEdgeData: function () {
	    return this.getGraph().edgeData;
	  },

	  /**
	   * @return {module:echarts/data/List}
	   */
	  getCategoriesData: function () {
	    return this._categoriesData;
	  },

	  /**
	   * @override
	   */
	  formatTooltip: function (dataIndex, multipleSeries, dataType) {
	    if (dataType === 'edge') {
	      var nodeData = this.getData();
	      var params = this.getDataParams(dataIndex, dataType);
	      var edge = nodeData.graph.getEdgeByIndex(dataIndex);
	      var sourceName = nodeData.getName(edge.node1.dataIndex);
	      var targetName = nodeData.getName(edge.node2.dataIndex);
	      var html = [];
	      sourceName != null && html.push(sourceName);
	      targetName != null && html.push(targetName);
	      html = encodeHTML(html.join(' > '));

	      if (params.value) {
	        html += ' : ' + encodeHTML(params.value);
	      }

	      return html;
	    } else {
	      // dataType === 'node' or empty
	      return GraphSeries.superApply(this, 'formatTooltip', arguments);
	    }
	  },
	  _updateCategoriesData: function () {
	    var categories = zrUtil.map(this.option.categories || [], function (category) {
	      // Data must has value
	      return category.value != null ? category : zrUtil.extend({
	        value: 0
	      }, category);
	    });
	    var categoriesData = new List(['value'], this);
	    categoriesData.initData(categories);
	    this._categoriesData = categoriesData;
	    this._categoriesModels = categoriesData.mapArray(function (idx) {
	      return categoriesData.getItemModel(idx, true);
	    });
	  },
	  setZoom: function (zoom) {
	    this.option.zoom = zoom;
	  },
	  setCenter: function (center) {
	    this.option.center = center;
	  },
	  isAnimationEnabled: function () {
	    return GraphSeries.superCall(this, 'isAnimationEnabled') // Not enable animation when do force layout
	    && !(this.get('layout') === 'force' && this.get('force.layoutAnimation'));
	  },
	  defaultOption: {
	    zlevel: 0,
	    z: 2,
	    coordinateSystem: 'view',
	    // Default option for all coordinate systems
	    // xAxisIndex: 0,
	    // yAxisIndex: 0,
	    // polarIndex: 0,
	    // geoIndex: 0,
	    legendHoverLink: true,
	    hoverAnimation: true,
	    layout: null,
	    focusNodeAdjacency: false,
	    // Configuration of circular layout
	    circular: {
	      rotateLabel: false
	    },
	    // Configuration of force directed layout
	    force: {
	      initLayout: null,
	      // Node repulsion. Can be an array to represent range.
	      repulsion: [0, 50],
	      gravity: 0.1,
	      // Edge length. Can be an array to represent range.
	      edgeLength: 30,
	      layoutAnimation: true
	    },
	    left: 'center',
	    top: 'center',
	    // right: null,
	    // bottom: null,
	    // width: '80%',
	    // height: '80%',
	    symbol: 'circle',
	    symbolSize: 10,
	    edgeSymbol: ['none', 'none'],
	    edgeSymbolSize: 10,
	    edgeLabel: {
	      normal: {
	        position: 'middle'
	      },
	      emphasis: {}
	    },
	    draggable: false,
	    roam: false,
	    // Default on center of graph
	    center: null,
	    zoom: 1,
	    // Symbol size scale ratio in roam
	    nodeScaleRatio: 0.6,
	    // cursor: null,
	    // categories: [],
	    // data: []
	    // Or
	    // nodes: []
	    //
	    // links: []
	    // Or
	    // edges: []
	    label: {
	      normal: {
	        show: false,
	        formatter: '{b}'
	      },
	      emphasis: {
	        show: true
	      }
	    },
	    itemStyle: {
	      normal: {},
	      emphasis: {}
	    },
	    lineStyle: {
	      normal: {
	        color: '#aaa',
	        width: 1,
	        curveness: 0,
	        opacity: 0.5
	      },
	      emphasis: {}
	    }
	  }
	});
	var _default = GraphSeries;
	module.exports = _default;

/***/ },
/* 381 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var List = __webpack_require__(265);

	var Graph = __webpack_require__(382);

	var linkList = __webpack_require__(361);

	var completeDimensions = __webpack_require__(267);

	var CoordinateSystem = __webpack_require__(252);

	var createListFromArray = __webpack_require__(264);

	function _default(nodes, edges, hostModel, directed, beforeLink) {
	  var graph = new Graph(directed);

	  for (var i = 0; i < nodes.length; i++) {
	    graph.addNode(zrUtil.retrieve( // Id, name, dataIndex
	    nodes[i].id, nodes[i].name, i), i);
	  }

	  var linkNameList = [];
	  var validEdges = [];
	  var linkCount = 0;

	  for (var i = 0; i < edges.length; i++) {
	    var link = edges[i];
	    var source = link.source;
	    var target = link.target; // addEdge may fail when source or target not exists

	    if (graph.addEdge(source, target, linkCount)) {
	      validEdges.push(link);
	      linkNameList.push(zrUtil.retrieve(link.id, source + ' > ' + target));
	      linkCount++;
	    }
	  }

	  var coordSys = hostModel.get('coordinateSystem');
	  var nodeData;

	  if (coordSys === 'cartesian2d' || coordSys === 'polar') {
	    nodeData = createListFromArray(nodes, hostModel, hostModel.ecModel);
	  } else {
	    // FIXME
	    var coordSysCtor = CoordinateSystem.get(coordSys); // FIXME

	    var dimensionNames = completeDimensions((coordSysCtor && coordSysCtor.type !== 'view' ? coordSysCtor.dimensions || [] : []).concat(['value']), nodes);
	    nodeData = new List(dimensionNames, hostModel);
	    nodeData.initData(nodes);
	  }

	  var edgeData = new List(['value'], hostModel);
	  edgeData.initData(validEdges, linkNameList);
	  beforeLink && beforeLink(nodeData, edgeData);
	  linkList({
	    mainData: nodeData,
	    struct: graph,
	    structAttr: 'graph',
	    datas: {
	      node: nodeData,
	      edge: edgeData
	    },
	    datasAttr: {
	      node: 'data',
	      edge: 'edgeData'
	    }
	  }); // Update dataIndex of nodes and edges because invalid edge may be removed

	  graph.update();
	  return graph;
	}

	module.exports = _default;

/***/ },
/* 382 */
/***/ function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(162);

	var __DEV__ = _config.__DEV__;

	var zrUtil = __webpack_require__(166);

	/**
	 * Graph data structure
	 *
	 * @module echarts/data/Graph
	 * @author Yi Shen(https://www.github.com/pissang)
	 */
	// id may be function name of Object, add a prefix to avoid this problem.
	function generateNodeKey(id) {
	  return '_EC_' + id;
	}
	/**
	 * @alias module:echarts/data/Graph
	 * @constructor
	 * @param {boolean} directed
	 */


	var Graph = function (directed) {
	  /**
	   * 是否是有向图
	   * @type {boolean}
	   * @private
	   */
	  this._directed = directed || false;
	  /**
	   * @type {Array.<module:echarts/data/Graph.Node>}
	   * @readOnly
	   */

	  this.nodes = [];
	  /**
	   * @type {Array.<module:echarts/data/Graph.Edge>}
	   * @readOnly
	   */

	  this.edges = [];
	  /**
	   * @type {Object.<string, module:echarts/data/Graph.Node>}
	   * @private
	   */

	  this._nodesMap = {};
	  /**
	   * @type {Object.<string, module:echarts/data/Graph.Edge>}
	   * @private
	   */

	  this._edgesMap = {};
	  /**
	   * @type {module:echarts/data/List}
	   * @readOnly
	   */

	  this.data;
	  /**
	   * @type {module:echarts/data/List}
	   * @readOnly
	   */

	  this.edgeData;
	};

	var graphProto = Graph.prototype;
	/**
	 * @type {string}
	 */

	graphProto.type = 'graph';
	/**
	 * If is directed graph
	 * @return {boolean}
	 */

	graphProto.isDirected = function () {
	  return this._directed;
	};
	/**
	 * Add a new node
	 * @param {string} id
	 * @param {number} [dataIndex]
	 */


	graphProto.addNode = function (id, dataIndex) {
	  id = id || '' + dataIndex;
	  var nodesMap = this._nodesMap;

	  if (nodesMap[generateNodeKey(id)]) {
	    return;
	  }

	  var node = new Node(id, dataIndex);
	  node.hostGraph = this;
	  this.nodes.push(node);
	  nodesMap[generateNodeKey(id)] = node;
	  return node;
	};
	/**
	 * Get node by data index
	 * @param  {number} dataIndex
	 * @return {module:echarts/data/Graph~Node}
	 */


	graphProto.getNodeByIndex = function (dataIndex) {
	  var rawIdx = this.data.getRawIndex(dataIndex);
	  return this.nodes[rawIdx];
	};
	/**
	 * Get node by id
	 * @param  {string} id
	 * @return {module:echarts/data/Graph.Node}
	 */


	graphProto.getNodeById = function (id) {
	  return this._nodesMap[generateNodeKey(id)];
	};
	/**
	 * Add a new edge
	 * @param {number|string|module:echarts/data/Graph.Node} n1
	 * @param {number|string|module:echarts/data/Graph.Node} n2
	 * @param {number} [dataIndex=-1]
	 * @return {module:echarts/data/Graph.Edge}
	 */


	graphProto.addEdge = function (n1, n2, dataIndex) {
	  var nodesMap = this._nodesMap;
	  var edgesMap = this._edgesMap; // PNEDING

	  if (typeof n1 === 'number') {
	    n1 = this.nodes[n1];
	  }

	  if (typeof n2 === 'number') {
	    n2 = this.nodes[n2];
	  }

	  if (!(n1 instanceof Node)) {
	    n1 = nodesMap[generateNodeKey(n1)];
	  }

	  if (!(n2 instanceof Node)) {
	    n2 = nodesMap[generateNodeKey(n2)];
	  }

	  if (!n1 || !n2) {
	    return;
	  }

	  var key = n1.id + '-' + n2.id; // PENDING

	  if (edgesMap[key]) {
	    return;
	  }

	  var edge = new Edge(n1, n2, dataIndex);
	  edge.hostGraph = this;

	  if (this._directed) {
	    n1.outEdges.push(edge);
	    n2.inEdges.push(edge);
	  }

	  n1.edges.push(edge);

	  if (n1 !== n2) {
	    n2.edges.push(edge);
	  }

	  this.edges.push(edge);
	  edgesMap[key] = edge;
	  return edge;
	};
	/**
	 * Get edge by data index
	 * @param  {number} dataIndex
	 * @return {module:echarts/data/Graph~Node}
	 */


	graphProto.getEdgeByIndex = function (dataIndex) {
	  var rawIdx = this.edgeData.getRawIndex(dataIndex);
	  return this.edges[rawIdx];
	};
	/**
	 * Get edge by two linked nodes
	 * @param  {module:echarts/data/Graph.Node|string} n1
	 * @param  {module:echarts/data/Graph.Node|string} n2
	 * @return {module:echarts/data/Graph.Edge}
	 */


	graphProto.getEdge = function (n1, n2) {
	  if (n1 instanceof Node) {
	    n1 = n1.id;
	  }

	  if (n2 instanceof Node) {
	    n2 = n2.id;
	  }

	  var edgesMap = this._edgesMap;

	  if (this._directed) {
	    return edgesMap[n1 + '-' + n2];
	  } else {
	    return edgesMap[n1 + '-' + n2] || edgesMap[n2 + '-' + n1];
	  }
	};
	/**
	 * Iterate all nodes
	 * @param  {Function} cb
	 * @param  {*} [context]
	 */


	graphProto.eachNode = function (cb, context) {
	  var nodes = this.nodes;
	  var len = nodes.length;

	  for (var i = 0; i < len; i++) {
	    if (nodes[i].dataIndex >= 0) {
	      cb.call(context, nodes[i], i);
	    }
	  }
	};
	/**
	 * Iterate all edges
	 * @param  {Function} cb
	 * @param  {*} [context]
	 */


	graphProto.eachEdge = function (cb, context) {
	  var edges = this.edges;
	  var len = edges.length;

	  for (var i = 0; i < len; i++) {
	    if (edges[i].dataIndex >= 0 && edges[i].node1.dataIndex >= 0 && edges[i].node2.dataIndex >= 0) {
	      cb.call(context, edges[i], i);
	    }
	  }
	};
	/**
	 * Breadth first traverse
	 * @param {Function} cb
	 * @param {module:echarts/data/Graph.Node} startNode
	 * @param {string} [direction='none'] 'none'|'in'|'out'
	 * @param {*} [context]
	 */


	graphProto.breadthFirstTraverse = function (cb, startNode, direction, context) {
	  if (!(startNode instanceof Node)) {
	    startNode = this._nodesMap[generateNodeKey(startNode)];
	  }

	  if (!startNode) {
	    return;
	  }

	  var edgeType = direction === 'out' ? 'outEdges' : direction === 'in' ? 'inEdges' : 'edges';

	  for (var i = 0; i < this.nodes.length; i++) {
	    this.nodes[i].__visited = false;
	  }

	  if (cb.call(context, startNode, null)) {
	    return;
	  }

	  var queue = [startNode];

	  while (queue.length) {
	    var currentNode = queue.shift();
	    var edges = currentNode[edgeType];

	    for (var i = 0; i < edges.length; i++) {
	      var e = edges[i];
	      var otherNode = e.node1 === currentNode ? e.node2 : e.node1;

	      if (!otherNode.__visited) {
	        if (cb.call(context, otherNode, currentNode)) {
	          // Stop traversing
	          return;
	        }

	        queue.push(otherNode);
	        otherNode.__visited = true;
	      }
	    }
	  }
	}; // TODO
	// graphProto.depthFirstTraverse = function (
	//     cb, startNode, direction, context
	// ) {
	// };
	// Filter update


	graphProto.update = function () {
	  var data = this.data;
	  var edgeData = this.edgeData;
	  var nodes = this.nodes;
	  var edges = this.edges;

	  for (var i = 0, len = nodes.length; i < len; i++) {
	    nodes[i].dataIndex = -1;
	  }

	  for (var i = 0, len = data.count(); i < len; i++) {
	    nodes[data.getRawIndex(i)].dataIndex = i;
	  }

	  edgeData.filterSelf(function (idx) {
	    var edge = edges[edgeData.getRawIndex(idx)];
	    return edge.node1.dataIndex >= 0 && edge.node2.dataIndex >= 0;
	  }); // Update edge

	  for (var i = 0, len = edges.length; i < len; i++) {
	    edges[i].dataIndex = -1;
	  }

	  for (var i = 0, len = edgeData.count(); i < len; i++) {
	    edges[edgeData.getRawIndex(i)].dataIndex = i;
	  }
	};
	/**
	 * @return {module:echarts/data/Graph}
	 */


	graphProto.clone = function () {
	  var graph = new Graph(this._directed);
	  var nodes = this.nodes;
	  var edges = this.edges;

	  for (var i = 0; i < nodes.length; i++) {
	    graph.addNode(nodes[i].id, nodes[i].dataIndex);
	  }

	  for (var i = 0; i < edges.length; i++) {
	    var e = edges[i];
	    graph.addEdge(e.node1.id, e.node2.id, e.dataIndex);
	  }

	  return graph;
	};
	/**
	 * @alias module:echarts/data/Graph.Node
	 */


	function Node(id, dataIndex) {
	  /**
	  * @type {string}
	  */
	  this.id = id == null ? '' : id;
	  /**
	  * @type {Array.<module:echarts/data/Graph.Edge>}
	  */

	  this.inEdges = [];
	  /**
	  * @type {Array.<module:echarts/data/Graph.Edge>}
	  */

	  this.outEdges = [];
	  /**
	  * @type {Array.<module:echarts/data/Graph.Edge>}
	  */

	  this.edges = [];
	  /**
	   * @type {module:echarts/data/Graph}
	   */

	  this.hostGraph;
	  /**
	   * @type {number}
	   */

	  this.dataIndex = dataIndex == null ? -1 : dataIndex;
	}

	Node.prototype = {
	  constructor: Node,

	  /**
	   * @return {number}
	   */
	  degree: function () {
	    return this.edges.length;
	  },

	  /**
	   * @return {number}
	   */
	  inDegree: function () {
	    return this.inEdges.length;
	  },

	  /**
	  * @return {number}
	  */
	  outDegree: function () {
	    return this.outEdges.length;
	  },

	  /**
	   * @param {string} [path]
	   * @return {module:echarts/model/Model}
	   */
	  getModel: function (path) {
	    if (this.dataIndex < 0) {
	      return;
	    }

	    var graph = this.hostGraph;
	    var itemModel = graph.data.getItemModel(this.dataIndex);
	    return itemModel.getModel(path);
	  }
	};
	/**
	 * 图边
	 * @alias module:echarts/data/Graph.Edge
	 * @param {module:echarts/data/Graph.Node} n1
	 * @param {module:echarts/data/Graph.Node} n2
	 * @param {number} [dataIndex=-1]
	 */

	function Edge(n1, n2, dataIndex) {
	  /**
	   * 节点1，如果是有向图则为源节点
	   * @type {module:echarts/data/Graph.Node}
	   */
	  this.node1 = n1;
	  /**
	   * 节点2，如果是有向图则为目标节点
	   * @type {module:echarts/data/Graph.Node}
	   */

	  this.node2 = n2;
	  this.dataIndex = dataIndex == null ? -1 : dataIndex;
	}
	/**
	 * @param {string} [path]
	 * @return {module:echarts/model/Model}
	 */


	Edge.prototype.getModel = function (path) {
	  if (this.dataIndex < 0) {
	    return;
	  }

	  var graph = this.hostGraph;
	  var itemModel = graph.edgeData.getItemModel(this.dataIndex);
	  return itemModel.getModel(path);
	};

	var createGraphDataProxyMixin = function (hostName, dataName) {
	  return {
	    /**
	     * @param {string=} [dimension='value'] Default 'value'. can be 'a', 'b', 'c', 'd', 'e'.
	     * @return {number}
	     */
	    getValue: function (dimension) {
	      var data = this[hostName][dataName];
	      return data.get(data.getDimension(dimension || 'value'), this.dataIndex);
	    },

	    /**
	     * @param {Object|string} key
	     * @param {*} [value]
	     */
	    setVisual: function (key, value) {
	      this.dataIndex >= 0 && this[hostName][dataName].setItemVisual(this.dataIndex, key, value);
	    },

	    /**
	     * @param {string} key
	     * @return {boolean}
	     */
	    getVisual: function (key, ignoreParent) {
	      return this[hostName][dataName].getItemVisual(this.dataIndex, key, ignoreParent);
	    },

	    /**
	     * @param {Object} layout
	     * @return {boolean} [merge=false]
	     */
	    setLayout: function (layout, merge) {
	      this.dataIndex >= 0 && this[hostName][dataName].setItemLayout(this.dataIndex, layout, merge);
	    },

	    /**
	     * @return {Object}
	     */
	    getLayout: function () {
	      return this[hostName][dataName].getItemLayout(this.dataIndex);
	    },

	    /**
	     * @return {module:zrender/Element}
	     */
	    getGraphicEl: function () {
	      return this[hostName][dataName].getItemGraphicEl(this.dataIndex);
	    },

	    /**
	     * @return {number}
	     */
	    getRawIndex: function () {
	      return this[hostName][dataName].getRawIndex(this.dataIndex);
	    }
	  };
	};

	zrUtil.mixin(Node, createGraphDataProxyMixin('hostGraph', 'data'));
	zrUtil.mixin(Edge, createGraphDataProxyMixin('hostGraph', 'edgeData'));
	Graph.Node = Node;
	Graph.Edge = Edge;
	var _default = Graph;
	module.exports = _default;

/***/ },
/* 383 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var zrUtil = __webpack_require__(166);

	var SymbolDraw = __webpack_require__(284);

	var LineDraw = __webpack_require__(384);

	var RoamController = __webpack_require__(348);

	var roamHelper = __webpack_require__(350);

	var _cursorHelper = __webpack_require__(351);

	var onIrrelevantElement = _cursorHelper.onIrrelevantElement;

	var graphic = __webpack_require__(212);

	var adjustEdge = __webpack_require__(387);

	var nodeOpacityPath = ['itemStyle', 'normal', 'opacity'];
	var lineOpacityPath = ['lineStyle', 'normal', 'opacity'];

	function getItemOpacity(item, opacityPath) {
	  return item.getVisual('opacity') || item.getModel().get(opacityPath);
	}

	function fadeOutItem(item, opacityPath, opacityRatio) {
	  var el = item.getGraphicEl();
	  var opacity = getItemOpacity(item, opacityPath);

	  if (opacityRatio != null) {
	    opacity == null && (opacity = 1);
	    opacity *= opacityRatio;
	  }

	  el.downplay && el.downplay();
	  el.traverse(function (child) {
	    if (child.type !== 'group') {
	      child.setStyle('opacity', opacity);
	    }
	  });
	}

	function fadeInItem(item, opacityPath) {
	  var opacity = getItemOpacity(item, opacityPath);
	  var el = item.getGraphicEl();
	  el.highlight && el.highlight();
	  el.traverse(function (child) {
	    if (child.type !== 'group') {
	      child.setStyle('opacity', opacity);
	    }
	  });
	}

	var _default = echarts.extendChartView({
	  type: 'graph',
	  init: function (ecModel, api) {
	    var symbolDraw = new SymbolDraw();
	    var lineDraw = new LineDraw();
	    var group = this.group;
	    this._controller = new RoamController(api.getZr());
	    this._controllerHost = {
	      target: group
	    };
	    group.add(symbolDraw.group);
	    group.add(lineDraw.group);
	    this._symbolDraw = symbolDraw;
	    this._lineDraw = lineDraw;
	    this._firstRender = true;
	  },
	  render: function (seriesModel, ecModel, api) {
	    var coordSys = seriesModel.coordinateSystem;
	    this._model = seriesModel;
	    this._nodeScaleRatio = seriesModel.get('nodeScaleRatio');
	    var symbolDraw = this._symbolDraw;
	    var lineDraw = this._lineDraw;
	    var group = this.group;

	    if (coordSys.type === 'view') {
	      var groupNewProp = {
	        position: coordSys.position,
	        scale: coordSys.scale
	      };

	      if (this._firstRender) {
	        group.attr(groupNewProp);
	      } else {
	        graphic.updateProps(group, groupNewProp, seriesModel);
	      }
	    } // Fix edge contact point with node


	    adjustEdge(seriesModel.getGraph(), this._getNodeGlobalScale(seriesModel));
	    var data = seriesModel.getData();
	    symbolDraw.updateData(data);
	    var edgeData = seriesModel.getEdgeData();
	    lineDraw.updateData(edgeData);

	    this._updateNodeAndLinkScale();

	    this._updateController(seriesModel, ecModel, api);

	    clearTimeout(this._layoutTimeout);
	    var forceLayout = seriesModel.forceLayout;
	    var layoutAnimation = seriesModel.get('force.layoutAnimation');

	    if (forceLayout) {
	      this._startForceLayoutIteration(forceLayout, layoutAnimation);
	    }

	    data.eachItemGraphicEl(function (el, idx) {
	      var itemModel = data.getItemModel(idx); // Update draggable

	      el.off('drag').off('dragend');
	      var draggable = data.getItemModel(idx).get('draggable');

	      if (draggable) {
	        el.on('drag', function () {
	          if (forceLayout) {
	            forceLayout.warmUp();
	            !this._layouting && this._startForceLayoutIteration(forceLayout, layoutAnimation);
	            forceLayout.setFixed(idx); // Write position back to layout

	            data.setItemLayout(idx, el.position);
	          }
	        }, this).on('dragend', function () {
	          if (forceLayout) {
	            forceLayout.setUnfixed(idx);
	          }
	        }, this);
	      }

	      el.setDraggable(draggable && forceLayout);
	      el.off('mouseover', el.__focusNodeAdjacency);
	      el.off('mouseout', el.__unfocusNodeAdjacency);

	      if (itemModel.get('focusNodeAdjacency')) {
	        el.on('mouseover', el.__focusNodeAdjacency = function () {
	          api.dispatchAction({
	            type: 'focusNodeAdjacency',
	            seriesId: seriesModel.id,
	            dataIndex: el.dataIndex
	          });
	        });
	        el.on('mouseout', el.__unfocusNodeAdjacency = function () {
	          api.dispatchAction({
	            type: 'unfocusNodeAdjacency',
	            seriesId: seriesModel.id
	          });
	        });
	      }
	    }, this);
	    data.graph.eachEdge(function (edge) {
	      var el = edge.getGraphicEl();
	      el.off('mouseover', el.__focusNodeAdjacency);
	      el.off('mouseout', el.__unfocusNodeAdjacency);

	      if (edge.getModel().get('focusNodeAdjacency')) {
	        el.on('mouseover', el.__focusNodeAdjacency = function () {
	          api.dispatchAction({
	            type: 'focusNodeAdjacency',
	            seriesId: seriesModel.id,
	            edgeDataIndex: edge.dataIndex
	          });
	        });
	        el.on('mouseout', el.__unfocusNodeAdjacency = function () {
	          api.dispatchAction({
	            type: 'unfocusNodeAdjacency',
	            seriesId: seriesModel.id
	          });
	        });
	      }
	    });
	    var circularRotateLabel = seriesModel.get('layout') === 'circular' && seriesModel.get('circular.rotateLabel');
	    var cx = data.getLayout('cx');
	    var cy = data.getLayout('cy');
	    data.eachItemGraphicEl(function (el, idx) {
	      var symbolPath = el.getSymbolPath();

	      if (circularRotateLabel) {
	        var pos = data.getItemLayout(idx);
	        var rad = Math.atan2(pos[1] - cy, pos[0] - cx);

	        if (rad < 0) {
	          rad = Math.PI * 2 + rad;
	        }

	        var isLeft = pos[0] < cx;

	        if (isLeft) {
	          rad = rad - Math.PI;
	        }

	        var textPosition = isLeft ? 'left' : 'right';
	        symbolPath.setStyle({
	          textRotation: -rad,
	          textPosition: textPosition,
	          textOrigin: 'center'
	        });
	        symbolPath.hoverStyle && (symbolPath.hoverStyle.textPosition = textPosition);
	      } else {
	        symbolPath.setStyle({
	          textRotation: 0
	        });
	      }
	    });
	    this._firstRender = false;
	  },
	  dispose: function () {
	    this._controller && this._controller.dispose();
	    this._controllerHost = {};
	  },
	  focusNodeAdjacency: function (seriesModel, ecModel, api, payload) {
	    var data = this._model.getData();

	    var graph = data.graph;
	    var dataIndex = payload.dataIndex;
	    var edgeDataIndex = payload.edgeDataIndex;
	    var node = graph.getNodeByIndex(dataIndex);
	    var edge = graph.getEdgeByIndex(edgeDataIndex);

	    if (!node && !edge) {
	      return;
	    }

	    graph.eachNode(function (node) {
	      fadeOutItem(node, nodeOpacityPath, 0.1);
	    });
	    graph.eachEdge(function (edge) {
	      fadeOutItem(edge, lineOpacityPath, 0.1);
	    });

	    if (node) {
	      fadeInItem(node, nodeOpacityPath);
	      zrUtil.each(node.edges, function (adjacentEdge) {
	        if (adjacentEdge.dataIndex < 0) {
	          return;
	        }

	        fadeInItem(adjacentEdge, lineOpacityPath);
	        fadeInItem(adjacentEdge.node1, nodeOpacityPath);
	        fadeInItem(adjacentEdge.node2, nodeOpacityPath);
	      });
	    }

	    if (edge) {
	      fadeInItem(edge, lineOpacityPath);
	      fadeInItem(edge.node1, nodeOpacityPath);
	      fadeInItem(edge.node2, nodeOpacityPath);
	    }
	  },
	  unfocusNodeAdjacency: function (seriesModel, ecModel, api, payload) {
	    var graph = this._model.getData().graph;

	    graph.eachNode(function (node) {
	      fadeOutItem(node, nodeOpacityPath);
	    });
	    graph.eachEdge(function (edge) {
	      fadeOutItem(edge, lineOpacityPath);
	    });
	  },
	  _startForceLayoutIteration: function (forceLayout, layoutAnimation) {
	    var self = this;

	    (function step() {
	      forceLayout.step(function (stopped) {
	        self.updateLayout(self._model);
	        (self._layouting = !stopped) && (layoutAnimation ? self._layoutTimeout = setTimeout(step, 16) : step());
	      });
	    })();
	  },
	  _updateController: function (seriesModel, ecModel, api) {
	    var controller = this._controller;
	    var controllerHost = this._controllerHost;
	    var group = this.group;
	    controller.setPointerChecker(function (e, x, y) {
	      var rect = group.getBoundingRect();
	      rect.applyTransform(group.transform);
	      return rect.contain(x, y) && !onIrrelevantElement(e, api, seriesModel);
	    });

	    if (seriesModel.coordinateSystem.type !== 'view') {
	      controller.disable();
	      return;
	    }

	    controller.enable(seriesModel.get('roam'));
	    controllerHost.zoomLimit = seriesModel.get('scaleLimit');
	    controllerHost.zoom = seriesModel.coordinateSystem.getZoom();
	    controller.off('pan').off('zoom').on('pan', function (dx, dy) {
	      roamHelper.updateViewOnPan(controllerHost, dx, dy);
	      api.dispatchAction({
	        seriesId: seriesModel.id,
	        type: 'graphRoam',
	        dx: dx,
	        dy: dy
	      });
	    }).on('zoom', function (zoom, mouseX, mouseY) {
	      roamHelper.updateViewOnZoom(controllerHost, zoom, mouseX, mouseY);
	      api.dispatchAction({
	        seriesId: seriesModel.id,
	        type: 'graphRoam',
	        zoom: zoom,
	        originX: mouseX,
	        originY: mouseY
	      });

	      this._updateNodeAndLinkScale();

	      adjustEdge(seriesModel.getGraph(), this._getNodeGlobalScale(seriesModel));

	      this._lineDraw.updateLayout();
	    }, this);
	  },
	  _updateNodeAndLinkScale: function () {
	    var seriesModel = this._model;
	    var data = seriesModel.getData();

	    var nodeScale = this._getNodeGlobalScale(seriesModel);

	    var invScale = [nodeScale, nodeScale];
	    data.eachItemGraphicEl(function (el, idx) {
	      el.attr('scale', invScale);
	    });
	  },
	  _getNodeGlobalScale: function (seriesModel) {
	    var coordSys = seriesModel.coordinateSystem;

	    if (coordSys.type !== 'view') {
	      return 1;
	    }

	    var nodeScaleRatio = this._nodeScaleRatio;
	    var groupScale = coordSys.scale;
	    var groupZoom = groupScale && groupScale[0] || 1; // Scale node when zoom changes

	    var roamZoom = coordSys.getZoom();
	    var nodeScale = (roamZoom - 1) * nodeScaleRatio + 1;
	    return nodeScale / groupZoom;
	  },
	  updateLayout: function (seriesModel) {
	    adjustEdge(seriesModel.getGraph(), this._getNodeGlobalScale(seriesModel));

	    this._symbolDraw.updateLayout();

	    this._lineDraw.updateLayout();
	  },
	  remove: function (ecModel, api) {
	    this._symbolDraw && this._symbolDraw.remove();
	    this._lineDraw && this._lineDraw.remove();
	  }
	});

	module.exports = _default;

/***/ },
/* 384 */
/***/ function(module, exports, __webpack_require__) {

	var graphic = __webpack_require__(212);

	var LineGroup = __webpack_require__(385);

	/**
	 * @module echarts/chart/helper/LineDraw
	 */
	function isPointNaN(pt) {
	  return isNaN(pt[0]) || isNaN(pt[1]);
	}

	function lineNeedsDraw(pts) {
	  return !isPointNaN(pts[0]) && !isPointNaN(pts[1]);
	}
	/**
	 * @alias module:echarts/component/marker/LineDraw
	 * @constructor
	 */


	function LineDraw(ctor) {
	  this._ctor = ctor || LineGroup;
	  this.group = new graphic.Group();
	}

	var lineDrawProto = LineDraw.prototype;
	/**
	 * @param {module:echarts/data/List} lineData
	 */

	lineDrawProto.updateData = function (lineData) {
	  var oldLineData = this._lineData;
	  var group = this.group;
	  var LineCtor = this._ctor;
	  var hostModel = lineData.hostModel;
	  var seriesScope = {
	    lineStyle: hostModel.getModel('lineStyle.normal').getLineStyle(),
	    hoverLineStyle: hostModel.getModel('lineStyle.emphasis').getLineStyle(),
	    labelModel: hostModel.getModel('label.normal'),
	    hoverLabelModel: hostModel.getModel('label.emphasis')
	  };
	  lineData.diff(oldLineData).add(function (idx) {
	    if (!lineNeedsDraw(lineData.getItemLayout(idx))) {
	      return;
	    }

	    var lineGroup = new LineCtor(lineData, idx, seriesScope);
	    lineData.setItemGraphicEl(idx, lineGroup);
	    group.add(lineGroup);
	  }).update(function (newIdx, oldIdx) {
	    var lineGroup = oldLineData.getItemGraphicEl(oldIdx);

	    if (!lineNeedsDraw(lineData.getItemLayout(newIdx))) {
	      group.remove(lineGroup);
	      return;
	    }

	    if (!lineGroup) {
	      lineGroup = new LineCtor(lineData, newIdx, seriesScope);
	    } else {
	      lineGroup.updateData(lineData, newIdx, seriesScope);
	    }

	    lineData.setItemGraphicEl(newIdx, lineGroup);
	    group.add(lineGroup);
	  }).remove(function (idx) {
	    group.remove(oldLineData.getItemGraphicEl(idx));
	  }).execute();
	  this._lineData = lineData;
	};

	lineDrawProto.updateLayout = function () {
	  var lineData = this._lineData;
	  lineData.eachItemGraphicEl(function (el, idx) {
	    el.updateLayout(lineData, idx);
	  }, this);
	};

	lineDrawProto.remove = function () {
	  this.group.removeAll();
	};

	var _default = LineDraw;
	module.exports = _default;

/***/ },
/* 385 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var vector = __webpack_require__(168);

	var symbolUtil = __webpack_require__(276);

	var LinePath = __webpack_require__(386);

	var graphic = __webpack_require__(212);

	var _number = __webpack_require__(205);

	var round = _number.round;

	/**
	 * @module echarts/chart/helper/Line
	 */
	var SYMBOL_CATEGORIES = ['fromSymbol', 'toSymbol'];

	function makeSymbolTypeKey(symbolCategory) {
	  return '_' + symbolCategory + 'Type';
	}
	/**
	 * @inner
	 */


	function createSymbol(name, lineData, idx) {
	  var color = lineData.getItemVisual(idx, 'color');
	  var symbolType = lineData.getItemVisual(idx, name);
	  var symbolSize = lineData.getItemVisual(idx, name + 'Size');

	  if (!symbolType || symbolType === 'none') {
	    return;
	  }

	  if (!zrUtil.isArray(symbolSize)) {
	    symbolSize = [symbolSize, symbolSize];
	  }

	  var symbolPath = symbolUtil.createSymbol(symbolType, -symbolSize[0] / 2, -symbolSize[1] / 2, symbolSize[0], symbolSize[1], color);
	  symbolPath.name = name;
	  return symbolPath;
	}

	function createLine(points) {
	  var line = new LinePath({
	    name: 'line'
	  });
	  setLinePoints(line.shape, points);
	  return line;
	}

	function setLinePoints(targetShape, points) {
	  var p1 = points[0];
	  var p2 = points[1];
	  var cp1 = points[2];
	  targetShape.x1 = p1[0];
	  targetShape.y1 = p1[1];
	  targetShape.x2 = p2[0];
	  targetShape.y2 = p2[1];
	  targetShape.percent = 1;

	  if (cp1) {
	    targetShape.cpx1 = cp1[0];
	    targetShape.cpy1 = cp1[1];
	  } else {
	    targetShape.cpx1 = NaN;
	    targetShape.cpy1 = NaN;
	  }
	}

	function updateSymbolAndLabelBeforeLineUpdate() {
	  var lineGroup = this;
	  var symbolFrom = lineGroup.childOfName('fromSymbol');
	  var symbolTo = lineGroup.childOfName('toSymbol');
	  var label = lineGroup.childOfName('label'); // Quick reject

	  if (!symbolFrom && !symbolTo && label.ignore) {
	    return;
	  }

	  var invScale = 1;
	  var parentNode = this.parent;

	  while (parentNode) {
	    if (parentNode.scale) {
	      invScale /= parentNode.scale[0];
	    }

	    parentNode = parentNode.parent;
	  }

	  var line = lineGroup.childOfName('line'); // If line not changed
	  // FIXME Parent scale changed

	  if (!this.__dirty && !line.__dirty) {
	    return;
	  }

	  var percent = line.shape.percent;
	  var fromPos = line.pointAt(0);
	  var toPos = line.pointAt(percent);
	  var d = vector.sub([], toPos, fromPos);
	  vector.normalize(d, d);

	  if (symbolFrom) {
	    symbolFrom.attr('position', fromPos);
	    var tangent = line.tangentAt(0);
	    symbolFrom.attr('rotation', Math.PI / 2 - Math.atan2(tangent[1], tangent[0]));
	    symbolFrom.attr('scale', [invScale * percent, invScale * percent]);
	  }

	  if (symbolTo) {
	    symbolTo.attr('position', toPos);
	    var tangent = line.tangentAt(1);
	    symbolTo.attr('rotation', -Math.PI / 2 - Math.atan2(tangent[1], tangent[0]));
	    symbolTo.attr('scale', [invScale * percent, invScale * percent]);
	  }

	  if (!label.ignore) {
	    label.attr('position', toPos);
	    var textPosition;
	    var textAlign;
	    var textVerticalAlign;
	    var distance = 5 * invScale; // End

	    if (label.__position === 'end') {
	      textPosition = [d[0] * distance + toPos[0], d[1] * distance + toPos[1]];
	      textAlign = d[0] > 0.8 ? 'left' : d[0] < -0.8 ? 'right' : 'center';
	      textVerticalAlign = d[1] > 0.8 ? 'top' : d[1] < -0.8 ? 'bottom' : 'middle';
	    } // Middle
	    else if (label.__position === 'middle') {
	        var halfPercent = percent / 2;
	        var tangent = line.tangentAt(halfPercent);
	        var n = [tangent[1], -tangent[0]];
	        var cp = line.pointAt(halfPercent);

	        if (n[1] > 0) {
	          n[0] = -n[0];
	          n[1] = -n[1];
	        }

	        textPosition = [cp[0] + n[0] * distance, cp[1] + n[1] * distance];
	        textAlign = 'center';
	        textVerticalAlign = 'bottom';
	        var rotation = -Math.atan2(tangent[1], tangent[0]);

	        if (toPos[0] < fromPos[0]) {
	          rotation = Math.PI + rotation;
	        }

	        label.attr('rotation', rotation);
	      } // Start
	      else {
	          textPosition = [-d[0] * distance + fromPos[0], -d[1] * distance + fromPos[1]];
	          textAlign = d[0] > 0.8 ? 'right' : d[0] < -0.8 ? 'left' : 'center';
	          textVerticalAlign = d[1] > 0.8 ? 'bottom' : d[1] < -0.8 ? 'top' : 'middle';
	        }

	    label.attr({
	      style: {
	        // Use the user specified text align and baseline first
	        textVerticalAlign: label.__verticalAlign || textVerticalAlign,
	        textAlign: label.__textAlign || textAlign
	      },
	      position: textPosition,
	      scale: [invScale, invScale]
	    });
	  }
	}
	/**
	 * @constructor
	 * @extends {module:zrender/graphic/Group}
	 * @alias {module:echarts/chart/helper/Line}
	 */


	function Line(lineData, idx, seriesScope) {
	  graphic.Group.call(this);

	  this._createLine(lineData, idx, seriesScope);
	}

	var lineProto = Line.prototype; // Update symbol position and rotation

	lineProto.beforeUpdate = updateSymbolAndLabelBeforeLineUpdate;

	lineProto._createLine = function (lineData, idx, seriesScope) {
	  var seriesModel = lineData.hostModel;
	  var linePoints = lineData.getItemLayout(idx);
	  var line = createLine(linePoints);
	  line.shape.percent = 0;
	  graphic.initProps(line, {
	    shape: {
	      percent: 1
	    }
	  }, seriesModel, idx);
	  this.add(line);
	  var label = new graphic.Text({
	    name: 'label'
	  });
	  this.add(label);
	  zrUtil.each(SYMBOL_CATEGORIES, function (symbolCategory) {
	    var symbol = createSymbol(symbolCategory, lineData, idx); // symbols must added after line to make sure
	    // it will be updated after line#update.
	    // Or symbol position and rotation update in line#beforeUpdate will be one frame slow

	    this.add(symbol);
	    this[makeSymbolTypeKey(symbolCategory)] = lineData.getItemVisual(idx, symbolCategory);
	  }, this);

	  this._updateCommonStl(lineData, idx, seriesScope);
	};

	lineProto.updateData = function (lineData, idx, seriesScope) {
	  var seriesModel = lineData.hostModel;
	  var line = this.childOfName('line');
	  var linePoints = lineData.getItemLayout(idx);
	  var target = {
	    shape: {}
	  };
	  setLinePoints(target.shape, linePoints);
	  graphic.updateProps(line, target, seriesModel, idx);
	  zrUtil.each(SYMBOL_CATEGORIES, function (symbolCategory) {
	    var symbolType = lineData.getItemVisual(idx, symbolCategory);
	    var key = makeSymbolTypeKey(symbolCategory); // Symbol changed

	    if (this[key] !== symbolType) {
	      this.remove(this.childOfName(symbolCategory));
	      var symbol = createSymbol(symbolCategory, lineData, idx);
	      this.add(symbol);
	    }

	    this[key] = symbolType;
	  }, this);

	  this._updateCommonStl(lineData, idx, seriesScope);
	};

	lineProto._updateCommonStl = function (lineData, idx, seriesScope) {
	  var seriesModel = lineData.hostModel;
	  var line = this.childOfName('line');
	  var lineStyle = seriesScope && seriesScope.lineStyle;
	  var hoverLineStyle = seriesScope && seriesScope.hoverLineStyle;
	  var labelModel = seriesScope && seriesScope.labelModel;
	  var hoverLabelModel = seriesScope && seriesScope.hoverLabelModel; // Optimization for large dataset

	  if (!seriesScope || lineData.hasItemOption) {
	    var itemModel = lineData.getItemModel(idx);
	    lineStyle = itemModel.getModel('lineStyle.normal').getLineStyle();
	    hoverLineStyle = itemModel.getModel('lineStyle.emphasis').getLineStyle();
	    labelModel = itemModel.getModel('label.normal');
	    hoverLabelModel = itemModel.getModel('label.emphasis');
	  }

	  var visualColor = lineData.getItemVisual(idx, 'color');
	  var visualOpacity = zrUtil.retrieve3(lineData.getItemVisual(idx, 'opacity'), lineStyle.opacity, 1);
	  line.useStyle(zrUtil.defaults({
	    strokeNoScale: true,
	    fill: 'none',
	    stroke: visualColor,
	    opacity: visualOpacity
	  }, lineStyle));
	  line.hoverStyle = hoverLineStyle; // Update symbol

	  zrUtil.each(SYMBOL_CATEGORIES, function (symbolCategory) {
	    var symbol = this.childOfName(symbolCategory);

	    if (symbol) {
	      symbol.setColor(visualColor);
	      symbol.setStyle({
	        opacity: visualOpacity
	      });
	    }
	  }, this);
	  var showLabel = labelModel.getShallow('show');
	  var hoverShowLabel = hoverLabelModel.getShallow('show');
	  var label = this.childOfName('label');
	  var defaultLabelColor;
	  var defaultText;
	  var normalText;
	  var emphasisText;

	  if (showLabel || hoverShowLabel) {
	    var rawVal = seriesModel.getRawValue(idx);
	    defaultText = rawVal == null ? defaultText = lineData.getName(idx) : isFinite(rawVal) ? round(rawVal) : rawVal;
	    defaultLabelColor = visualColor || '#000';
	    normalText = zrUtil.retrieve2(seriesModel.getFormattedLabel(idx, 'normal', lineData.dataType), defaultText);
	    emphasisText = zrUtil.retrieve2(seriesModel.getFormattedLabel(idx, 'emphasis', lineData.dataType), normalText);
	  } // label.afterUpdate = lineAfterUpdate;


	  if (showLabel) {
	    var labelStyle = graphic.setTextStyle(label.style, labelModel, {
	      text: normalText
	    }, {
	      autoColor: defaultLabelColor
	    });
	    label.__textAlign = labelStyle.textAlign;
	    label.__verticalAlign = labelStyle.textVerticalAlign; // 'start', 'middle', 'end'

	    label.__position = labelModel.get('position') || 'middle';
	  } else {
	    label.setStyle('text', null);
	  }

	  if (hoverShowLabel) {
	    // Only these properties supported in this emphasis style here.
	    label.hoverStyle = {
	      text: emphasisText,
	      textFill: hoverLabelModel.getTextColor(true),
	      // For merging hover style to normal style, do not use
	      // `hoverLabelModel.getFont()` here.
	      fontStyle: hoverLabelModel.getShallow('fontStyle'),
	      fontWeight: hoverLabelModel.getShallow('fontWeight'),
	      fontSize: hoverLabelModel.getShallow('fontSize'),
	      fontFamily: hoverLabelModel.getShallow('fontFamily')
	    };
	  } else {
	    label.hoverStyle = {
	      text: null
	    };
	  }

	  label.ignore = !showLabel && !hoverShowLabel;
	  graphic.setHoverStyle(this);
	};

	lineProto.highlight = function () {
	  this.trigger('emphasis');
	};

	lineProto.downplay = function () {
	  this.trigger('normal');
	};

	lineProto.updateLayout = function (lineData, idx) {
	  this.setLinePoints(lineData.getItemLayout(idx));
	};

	lineProto.setLinePoints = function (points) {
	  var linePath = this.childOfName('line');
	  setLinePoints(linePath.shape, points);
	  linePath.dirty();
	};

	zrUtil.inherits(Line, graphic.Group);
	var _default = Line;
	module.exports = _default;

/***/ },
/* 386 */
/***/ function(module, exports, __webpack_require__) {

	var graphic = __webpack_require__(212);

	var vec2 = __webpack_require__(168);

	/**
	 * Line path for bezier and straight line draw
	 */
	var straightLineProto = graphic.Line.prototype;
	var bezierCurveProto = graphic.BezierCurve.prototype;

	function isLine(shape) {
	  return isNaN(+shape.cpx1) || isNaN(+shape.cpy1);
	}

	var _default = graphic.extendShape({
	  type: 'ec-line',
	  style: {
	    stroke: '#000',
	    fill: null
	  },
	  shape: {
	    x1: 0,
	    y1: 0,
	    x2: 0,
	    y2: 0,
	    percent: 1,
	    cpx1: null,
	    cpy1: null
	  },
	  buildPath: function (ctx, shape) {
	    (isLine(shape) ? straightLineProto : bezierCurveProto).buildPath(ctx, shape);
	  },
	  pointAt: function (t) {
	    return isLine(this.shape) ? straightLineProto.pointAt.call(this, t) : bezierCurveProto.pointAt.call(this, t);
	  },
	  tangentAt: function (t) {
	    var shape = this.shape;
	    var p = isLine(shape) ? [shape.x2 - shape.x1, shape.y2 - shape.y1] : bezierCurveProto.tangentAt.call(this, t);
	    return vec2.normalize(p, p);
	  }
	});

	module.exports = _default;

/***/ },
/* 387 */
/***/ function(module, exports, __webpack_require__) {

	var curveTool = __webpack_require__(216);

	var vec2 = __webpack_require__(168);

	var v1 = [];
	var v2 = [];
	var v3 = [];
	var quadraticAt = curveTool.quadraticAt;
	var v2DistSquare = vec2.distSquare;
	var mathAbs = Math.abs;

	function intersectCurveCircle(curvePoints, center, radius) {
	  var p0 = curvePoints[0];
	  var p1 = curvePoints[1];
	  var p2 = curvePoints[2];
	  var d = Infinity;
	  var t;
	  var radiusSquare = radius * radius;
	  var interval = 0.1;

	  for (var _t = 0.1; _t <= 0.9; _t += 0.1) {
	    v1[0] = quadraticAt(p0[0], p1[0], p2[0], _t);
	    v1[1] = quadraticAt(p0[1], p1[1], p2[1], _t);
	    var diff = mathAbs(v2DistSquare(v1, center) - radiusSquare);

	    if (diff < d) {
	      d = diff;
	      t = _t;
	    }
	  } // Assume the segment is monotone，Find root through Bisection method
	  // At most 32 iteration


	  for (var i = 0; i < 32; i++) {
	    // var prev = t - interval;
	    var next = t + interval; // v1[0] = quadraticAt(p0[0], p1[0], p2[0], prev);
	    // v1[1] = quadraticAt(p0[1], p1[1], p2[1], prev);

	    v2[0] = quadraticAt(p0[0], p1[0], p2[0], t);
	    v2[1] = quadraticAt(p0[1], p1[1], p2[1], t);
	    v3[0] = quadraticAt(p0[0], p1[0], p2[0], next);
	    v3[1] = quadraticAt(p0[1], p1[1], p2[1], next);
	    var diff = v2DistSquare(v2, center) - radiusSquare;

	    if (mathAbs(diff) < 1e-2) {
	      break;
	    } // var prevDiff = v2DistSquare(v1, center) - radiusSquare;


	    var nextDiff = v2DistSquare(v3, center) - radiusSquare;
	    interval /= 2;

	    if (diff < 0) {
	      if (nextDiff >= 0) {
	        t = t + interval;
	      } else {
	        t = t - interval;
	      }
	    } else {
	      if (nextDiff >= 0) {
	        t = t - interval;
	      } else {
	        t = t + interval;
	      }
	    }
	  }

	  return t;
	} // Adjust edge to avoid


	function _default(graph, scale) {
	  var tmp0 = [];
	  var quadraticSubdivide = curveTool.quadraticSubdivide;
	  var pts = [[], [], []];
	  var pts2 = [[], []];
	  var v = [];
	  scale /= 2;

	  function getSymbolSize(node) {
	    var symbolSize = node.getVisual('symbolSize');

	    if (symbolSize instanceof Array) {
	      symbolSize = (symbolSize[0] + symbolSize[1]) / 2;
	    }

	    return symbolSize;
	  }

	  graph.eachEdge(function (edge, idx) {
	    var linePoints = edge.getLayout();
	    var fromSymbol = edge.getVisual('fromSymbol');
	    var toSymbol = edge.getVisual('toSymbol');

	    if (!linePoints.__original) {
	      linePoints.__original = [vec2.clone(linePoints[0]), vec2.clone(linePoints[1])];

	      if (linePoints[2]) {
	        linePoints.__original.push(vec2.clone(linePoints[2]));
	      }
	    }

	    var originalPoints = linePoints.__original; // Quadratic curve

	    if (linePoints[2] != null) {
	      vec2.copy(pts[0], originalPoints[0]);
	      vec2.copy(pts[1], originalPoints[2]);
	      vec2.copy(pts[2], originalPoints[1]);

	      if (fromSymbol && fromSymbol != 'none') {
	        var symbolSize = getSymbolSize(edge.node1);
	        var t = intersectCurveCircle(pts, originalPoints[0], symbolSize * scale); // Subdivide and get the second

	        quadraticSubdivide(pts[0][0], pts[1][0], pts[2][0], t, tmp0);
	        pts[0][0] = tmp0[3];
	        pts[1][0] = tmp0[4];
	        quadraticSubdivide(pts[0][1], pts[1][1], pts[2][1], t, tmp0);
	        pts[0][1] = tmp0[3];
	        pts[1][1] = tmp0[4];
	      }

	      if (toSymbol && toSymbol != 'none') {
	        var symbolSize = getSymbolSize(edge.node2);
	        var t = intersectCurveCircle(pts, originalPoints[1], symbolSize * scale); // Subdivide and get the first

	        quadraticSubdivide(pts[0][0], pts[1][0], pts[2][0], t, tmp0);
	        pts[1][0] = tmp0[1];
	        pts[2][0] = tmp0[2];
	        quadraticSubdivide(pts[0][1], pts[1][1], pts[2][1], t, tmp0);
	        pts[1][1] = tmp0[1];
	        pts[2][1] = tmp0[2];
	      } // Copy back to layout


	      vec2.copy(linePoints[0], pts[0]);
	      vec2.copy(linePoints[1], pts[2]);
	      vec2.copy(linePoints[2], pts[1]);
	    } // Line
	    else {
	        vec2.copy(pts2[0], originalPoints[0]);
	        vec2.copy(pts2[1], originalPoints[1]);
	        vec2.sub(v, pts2[1], pts2[0]);
	        vec2.normalize(v, v);

	        if (fromSymbol && fromSymbol != 'none') {
	          var symbolSize = getSymbolSize(edge.node1);
	          vec2.scaleAndAdd(pts2[0], pts2[0], v, symbolSize * scale);
	        }

	        if (toSymbol && toSymbol != 'none') {
	          var symbolSize = getSymbolSize(edge.node2);
	          vec2.scaleAndAdd(pts2[1], pts2[1], v, -symbolSize * scale);
	        }

	        vec2.copy(linePoints[0], pts2[0]);
	        vec2.copy(linePoints[1], pts2[1]);
	      }
	  });
	}

	module.exports = _default;

/***/ },
/* 388 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var _roamHelper = __webpack_require__(353);

	var updateCenterAndZoom = _roamHelper.updateCenterAndZoom;
	var actionInfo = {
	  type: 'graphRoam',
	  event: 'graphRoam',
	  update: 'none'
	};
	/**
	 * @payload
	 * @property {string} name Series name
	 * @property {number} [dx]
	 * @property {number} [dy]
	 * @property {number} [zoom]
	 * @property {number} [originX]
	 * @property {number} [originY]
	 */

	echarts.registerAction(actionInfo, function (payload, ecModel) {
	  ecModel.eachComponent({
	    mainType: 'series',
	    query: payload
	  }, function (seriesModel) {
	    var coordSys = seriesModel.coordinateSystem;
	    var res = updateCenterAndZoom(coordSys, payload);
	    seriesModel.setCenter && seriesModel.setCenter(res.center);
	    seriesModel.setZoom && seriesModel.setZoom(res.zoom);
	  });
	});
	/**
	 * @payload
	 * @property {number} [seriesIndex]
	 * @property {string} [seriesId]
	 * @property {string} [seriesName]
	 * @property {number} [dataIndex]
	 */

	echarts.registerAction({
	  type: 'focusNodeAdjacency',
	  event: 'focusNodeAdjacency',
	  update: 'series.graph:focusNodeAdjacency'
	}, function () {});
	/**
	 * @payload
	 * @property {number} [seriesIndex]
	 * @property {string} [seriesId]
	 * @property {string} [seriesName]
	 */

	echarts.registerAction({
	  type: 'unfocusNodeAdjacency',
	  event: 'unfocusNodeAdjacency',
	  update: 'series.graph:unfocusNodeAdjacency'
	}, function () {});

/***/ },
/* 389 */
/***/ function(module, exports) {

	function _default(ecModel) {
	  var legendModels = ecModel.findComponents({
	    mainType: 'legend'
	  });

	  if (!legendModels || !legendModels.length) {
	    return;
	  }

	  ecModel.eachSeriesByType('graph', function (graphSeries) {
	    var categoriesData = graphSeries.getCategoriesData();
	    var graph = graphSeries.getGraph();
	    var data = graph.data;
	    var categoryNames = categoriesData.mapArray(categoriesData.getName);
	    data.filterSelf(function (idx) {
	      var model = data.getItemModel(idx);
	      var category = model.getShallow('category');

	      if (category != null) {
	        if (typeof category === 'number') {
	          category = categoryNames[category];
	        } // If in any legend component the status is not selected.


	        for (var i = 0; i < legendModels.length; i++) {
	          if (!legendModels[i].isSelected(category)) {
	            return false;
	          }
	        }
	      }

	      return true;
	    });
	  }, this);
	}

	module.exports = _default;

/***/ },
/* 390 */
/***/ function(module, exports) {

	function _default(ecModel) {
	  var paletteScope = {};
	  ecModel.eachSeriesByType('graph', function (seriesModel) {
	    var categoriesData = seriesModel.getCategoriesData();
	    var data = seriesModel.getData();
	    var categoryNameIdxMap = {};
	    categoriesData.each(function (idx) {
	      var name = categoriesData.getName(idx); // Add prefix to avoid conflict with Object.prototype.

	      categoryNameIdxMap['ec-' + name] = idx;
	      var itemModel = categoriesData.getItemModel(idx);
	      var color = itemModel.get('itemStyle.normal.color') || seriesModel.getColorFromPalette(name, paletteScope);
	      categoriesData.setItemVisual(idx, 'color', color);
	    }); // Assign category color to visual

	    if (categoriesData.count()) {
	      data.each(function (idx) {
	        var model = data.getItemModel(idx);
	        var category = model.getShallow('category');

	        if (category != null) {
	          if (typeof category === 'string') {
	            category = categoryNameIdxMap['ec-' + category];
	          }

	          if (!data.getItemVisual(idx, 'color', true)) {
	            data.setItemVisual(idx, 'color', categoriesData.getItemVisual(category, 'color'));
	          }
	        }
	      });
	    }
	  });
	}

	module.exports = _default;

/***/ },
/* 391 */
/***/ function(module, exports) {

	function normalize(a) {
	  if (!(a instanceof Array)) {
	    a = [a, a];
	  }

	  return a;
	}

	function _default(ecModel) {
	  ecModel.eachSeriesByType('graph', function (seriesModel) {
	    var graph = seriesModel.getGraph();
	    var edgeData = seriesModel.getEdgeData();
	    var symbolType = normalize(seriesModel.get('edgeSymbol'));
	    var symbolSize = normalize(seriesModel.get('edgeSymbolSize'));
	    var colorQuery = 'lineStyle.normal.color'.split('.');
	    var opacityQuery = 'lineStyle.normal.opacity'.split('.');
	    edgeData.setVisual('fromSymbol', symbolType && symbolType[0]);
	    edgeData.setVisual('toSymbol', symbolType && symbolType[1]);
	    edgeData.setVisual('fromSymbolSize', symbolSize && symbolSize[0]);
	    edgeData.setVisual('toSymbolSize', symbolSize && symbolSize[1]);
	    edgeData.setVisual('color', seriesModel.get(colorQuery));
	    edgeData.setVisual('opacity', seriesModel.get(opacityQuery));
	    edgeData.each(function (idx) {
	      var itemModel = edgeData.getItemModel(idx);
	      var edge = graph.getEdgeByIndex(idx);
	      var symbolType = normalize(itemModel.getShallow('symbol', true));
	      var symbolSize = normalize(itemModel.getShallow('symbolSize', true)); // Edge visual must after node visual

	      var color = itemModel.get(colorQuery);
	      var opacity = itemModel.get(opacityQuery);

	      switch (color) {
	        case 'source':
	          color = edge.node1.getVisual('color');
	          break;

	        case 'target':
	          color = edge.node2.getVisual('color');
	          break;
	      }

	      symbolType[0] && edge.setVisual('fromSymbol', symbolType[0]);
	      symbolType[1] && edge.setVisual('toSymbol', symbolType[1]);
	      symbolSize[0] && edge.setVisual('fromSymbolSize', symbolSize[0]);
	      symbolSize[1] && edge.setVisual('toSymbolSize', symbolSize[1]);
	      edge.setVisual('color', color);
	      edge.setVisual('opacity', opacity);
	    });
	  });
	}

	module.exports = _default;

/***/ },
/* 392 */
/***/ function(module, exports, __webpack_require__) {

	var _simpleLayoutHelper = __webpack_require__(393);

	var simpleLayout = _simpleLayoutHelper.simpleLayout;
	var simpleLayoutEdge = _simpleLayoutHelper.simpleLayoutEdge;

	function _default(ecModel, api) {
	  ecModel.eachSeriesByType('graph', function (seriesModel) {
	    var layout = seriesModel.get('layout');
	    var coordSys = seriesModel.coordinateSystem;

	    if (coordSys && coordSys.type !== 'view') {
	      var data = seriesModel.getData();
	      var dimensions = coordSys.dimensions;
	      data.each(dimensions, function () {
	        var hasValue;
	        var args = arguments;
	        var value = [];

	        for (var i = 0; i < dimensions.length; i++) {
	          if (!isNaN(args[i])) {
	            hasValue = true;
	          }

	          value.push(args[i]);
	        }

	        var idx = args[args.length - 1];

	        if (hasValue) {
	          data.setItemLayout(idx, coordSys.dataToPoint(value));
	        } else {
	          // Also {Array.<number>}, not undefined to avoid if...else... statement
	          data.setItemLayout(idx, [NaN, NaN]);
	        }
	      });
	      simpleLayoutEdge(data.graph);
	    } else if (!layout || layout === 'none') {
	      simpleLayout(seriesModel);
	    }
	  });
	}

	module.exports = _default;

/***/ },
/* 393 */
/***/ function(module, exports, __webpack_require__) {

	var vec2 = __webpack_require__(168);

	function simpleLayout(seriesModel) {
	  var coordSys = seriesModel.coordinateSystem;

	  if (coordSys && coordSys.type !== 'view') {
	    return;
	  }

	  var graph = seriesModel.getGraph();
	  graph.eachNode(function (node) {
	    var model = node.getModel();
	    node.setLayout([+model.get('x'), +model.get('y')]);
	  });
	  simpleLayoutEdge(graph);
	}

	function simpleLayoutEdge(graph) {
	  graph.eachEdge(function (edge) {
	    var curveness = edge.getModel().get('lineStyle.normal.curveness') || 0;
	    var p1 = vec2.clone(edge.node1.getLayout());
	    var p2 = vec2.clone(edge.node2.getLayout());
	    var points = [p1, p2];

	    if (+curveness) {
	      points.push([(p1[0] + p2[0]) / 2 - (p1[1] - p2[1]) * curveness, (p1[1] + p2[1]) / 2 - (p2[0] - p1[0]) * curveness]);
	    }

	    edge.setLayout(points);
	  });
	}

	exports.simpleLayout = simpleLayout;
	exports.simpleLayoutEdge = simpleLayoutEdge;

/***/ },
/* 394 */
/***/ function(module, exports, __webpack_require__) {

	var _circularLayoutHelper = __webpack_require__(395);

	var circularLayout = _circularLayoutHelper.circularLayout;

	function _default(ecModel) {
	  ecModel.eachSeriesByType('graph', function (seriesModel) {
	    if (seriesModel.get('layout') === 'circular') {
	      circularLayout(seriesModel);
	    }
	  });
	}

	module.exports = _default;

/***/ },
/* 395 */
/***/ function(module, exports, __webpack_require__) {

	var vec2 = __webpack_require__(168);

	function circularLayout(seriesModel) {
	  var coordSys = seriesModel.coordinateSystem;

	  if (coordSys && coordSys.type !== 'view') {
	    return;
	  }

	  var rect = coordSys.getBoundingRect();
	  var nodeData = seriesModel.getData();
	  var graph = nodeData.graph;
	  var angle = 0;
	  var sum = nodeData.getSum('value');
	  var unitAngle = Math.PI * 2 / (sum || nodeData.count());
	  var cx = rect.width / 2 + rect.x;
	  var cy = rect.height / 2 + rect.y;
	  var r = Math.min(rect.width, rect.height) / 2;
	  graph.eachNode(function (node) {
	    var value = node.getValue('value');
	    angle += unitAngle * (sum ? value : 1) / 2;
	    node.setLayout([r * Math.cos(angle) + cx, r * Math.sin(angle) + cy]);
	    angle += unitAngle * (sum ? value : 1) / 2;
	  });
	  nodeData.setLayout({
	    cx: cx,
	    cy: cy
	  });
	  graph.eachEdge(function (edge) {
	    var curveness = edge.getModel().get('lineStyle.normal.curveness') || 0;
	    var p1 = vec2.clone(edge.node1.getLayout());
	    var p2 = vec2.clone(edge.node2.getLayout());
	    var cp1;
	    var x12 = (p1[0] + p2[0]) / 2;
	    var y12 = (p1[1] + p2[1]) / 2;

	    if (+curveness) {
	      curveness *= 3;
	      cp1 = [cx * curveness + x12 * (1 - curveness), cy * curveness + y12 * (1 - curveness)];
	    }

	    edge.setLayout([p1, p2, cp1]);
	  });
	}

	exports.circularLayout = circularLayout;

/***/ },
/* 396 */
/***/ function(module, exports, __webpack_require__) {

	var _forceHelper = __webpack_require__(397);

	var forceLayout = _forceHelper.forceLayout;

	var _simpleLayoutHelper = __webpack_require__(393);

	var simpleLayout = _simpleLayoutHelper.simpleLayout;

	var _circularLayoutHelper = __webpack_require__(395);

	var circularLayout = _circularLayoutHelper.circularLayout;

	var _number = __webpack_require__(205);

	var linearMap = _number.linearMap;

	var vec2 = __webpack_require__(168);

	var zrUtil = __webpack_require__(166);

	function _default(ecModel) {
	  ecModel.eachSeriesByType('graph', function (graphSeries) {
	    var coordSys = graphSeries.coordinateSystem;

	    if (coordSys && coordSys.type !== 'view') {
	      return;
	    }

	    if (graphSeries.get('layout') === 'force') {
	      var preservedPoints = graphSeries.preservedPoints || {};
	      var graph = graphSeries.getGraph();
	      var nodeData = graph.data;
	      var edgeData = graph.edgeData;
	      var forceModel = graphSeries.getModel('force');
	      var initLayout = forceModel.get('initLayout');

	      if (graphSeries.preservedPoints) {
	        nodeData.each(function (idx) {
	          var id = nodeData.getId(idx);
	          nodeData.setItemLayout(idx, preservedPoints[id] || [NaN, NaN]);
	        });
	      } else if (!initLayout || initLayout === 'none') {
	        simpleLayout(graphSeries);
	      } else if (initLayout === 'circular') {
	        circularLayout(graphSeries);
	      }

	      var nodeDataExtent = nodeData.getDataExtent('value');
	      var edgeDataExtent = edgeData.getDataExtent('value'); // var edgeDataExtent = edgeData.getDataExtent('value');

	      var repulsion = forceModel.get('repulsion');
	      var edgeLength = forceModel.get('edgeLength');

	      if (!zrUtil.isArray(repulsion)) {
	        repulsion = [repulsion, repulsion];
	      }

	      if (!zrUtil.isArray(edgeLength)) {
	        edgeLength = [edgeLength, edgeLength];
	      } // Larger value has smaller length


	      edgeLength = [edgeLength[1], edgeLength[0]];
	      var nodes = nodeData.mapArray('value', function (value, idx) {
	        var point = nodeData.getItemLayout(idx);
	        var rep = linearMap(value, nodeDataExtent, repulsion);

	        if (isNaN(rep)) {
	          rep = (repulsion[0] + repulsion[1]) / 2;
	        }

	        return {
	          w: rep,
	          rep: rep,
	          fixed: nodeData.getItemModel(idx).get('fixed'),
	          p: !point || isNaN(point[0]) || isNaN(point[1]) ? null : point
	        };
	      });
	      var edges = edgeData.mapArray('value', function (value, idx) {
	        var edge = graph.getEdgeByIndex(idx);
	        var d = linearMap(value, edgeDataExtent, edgeLength);

	        if (isNaN(d)) {
	          d = (edgeLength[0] + edgeLength[1]) / 2;
	        }

	        return {
	          n1: nodes[edge.node1.dataIndex],
	          n2: nodes[edge.node2.dataIndex],
	          d: d,
	          curveness: edge.getModel().get('lineStyle.normal.curveness') || 0
	        };
	      });
	      var coordSys = graphSeries.coordinateSystem;
	      var rect = coordSys.getBoundingRect();
	      var forceInstance = forceLayout(nodes, edges, {
	        rect: rect,
	        gravity: forceModel.get('gravity')
	      });
	      var oldStep = forceInstance.step;

	      forceInstance.step = function (cb) {
	        for (var i = 0, l = nodes.length; i < l; i++) {
	          if (nodes[i].fixed) {
	            // Write back to layout instance
	            vec2.copy(nodes[i].p, graph.getNodeByIndex(i).getLayout());
	          }
	        }

	        oldStep(function (nodes, edges, stopped) {
	          for (var i = 0, l = nodes.length; i < l; i++) {
	            if (!nodes[i].fixed) {
	              graph.getNodeByIndex(i).setLayout(nodes[i].p);
	            }

	            preservedPoints[nodeData.getId(i)] = nodes[i].p;
	          }

	          for (var i = 0, l = edges.length; i < l; i++) {
	            var e = edges[i];
	            var edge = graph.getEdgeByIndex(i);
	            var p1 = e.n1.p;
	            var p2 = e.n2.p;
	            var points = edge.getLayout();
	            points = points ? points.slice() : [];
	            points[0] = points[0] || [];
	            points[1] = points[1] || [];
	            vec2.copy(points[0], p1);
	            vec2.copy(points[1], p2);

	            if (+e.curveness) {
	              points[2] = [(p1[0] + p2[0]) / 2 - (p1[1] - p2[1]) * e.curveness, (p1[1] + p2[1]) / 2 - (p2[0] - p1[0]) * e.curveness];
	            }

	            edge.setLayout(points);
	          } // Update layout


	          cb && cb(stopped);
	        });
	      };

	      graphSeries.forceLayout = forceInstance;
	      graphSeries.preservedPoints = preservedPoints; // Step to get the layout

	      forceInstance.step();
	    } else {
	      // Remove prev injected forceLayout instance
	      graphSeries.forceLayout = null;
	    }
	  });
	}

	module.exports = _default;

/***/ },
/* 397 */
/***/ function(module, exports, __webpack_require__) {

	var vec2 = __webpack_require__(168);

	var scaleAndAdd = vec2.scaleAndAdd; // function adjacentNode(n, e) {
	//     return e.n1 === n ? e.n2 : e.n1;
	// }

	function forceLayout(nodes, edges, opts) {
	  var rect = opts.rect;
	  var width = rect.width;
	  var height = rect.height;
	  var center = [rect.x + width / 2, rect.y + height / 2]; // var scale = opts.scale || 1;

	  var gravity = opts.gravity == null ? 0.1 : opts.gravity; // for (var i = 0; i < edges.length; i++) {
	  //     var e = edges[i];
	  //     var n1 = e.n1;
	  //     var n2 = e.n2;
	  //     n1.edges = n1.edges || [];
	  //     n2.edges = n2.edges || [];
	  //     n1.edges.push(e);
	  //     n2.edges.push(e);
	  // }
	  // Init position

	  for (var i = 0; i < nodes.length; i++) {
	    var n = nodes[i];

	    if (!n.p) {
	      // Use the position from first adjecent node with defined position
	      // Or use a random position
	      // From d3
	      // if (n.edges) {
	      //     var j = -1;
	      //     while (++j < n.edges.length) {
	      //         var e = n.edges[j];
	      //         var other = adjacentNode(n, e);
	      //         if (other.p) {
	      //             n.p = vec2.clone(other.p);
	      //             break;
	      //         }
	      //     }
	      // }
	      // if (!n.p) {
	      n.p = vec2.create(width * (Math.random() - 0.5) + center[0], height * (Math.random() - 0.5) + center[1]); // }
	    }

	    n.pp = vec2.clone(n.p);
	    n.edges = null;
	  } // Formula in 'Graph Drawing by Force-directed Placement'
	  // var k = scale * Math.sqrt(width * height / nodes.length);
	  // var k2 = k * k;


	  var friction = 0.6;
	  return {
	    warmUp: function () {
	      friction = 0.5;
	    },
	    setFixed: function (idx) {
	      nodes[idx].fixed = true;
	    },
	    setUnfixed: function (idx) {
	      nodes[idx].fixed = false;
	    },
	    step: function (cb) {
	      var v12 = [];
	      var nLen = nodes.length;

	      for (var i = 0; i < edges.length; i++) {
	        var e = edges[i];
	        var n1 = e.n1;
	        var n2 = e.n2;
	        vec2.sub(v12, n2.p, n1.p);
	        var d = vec2.len(v12) - e.d;
	        var w = n2.w / (n1.w + n2.w);

	        if (isNaN(w)) {
	          w = 0;
	        }

	        vec2.normalize(v12, v12);
	        !n1.fixed && scaleAndAdd(n1.p, n1.p, v12, w * d * friction);
	        !n2.fixed && scaleAndAdd(n2.p, n2.p, v12, -(1 - w) * d * friction);
	      } // Gravity


	      for (var i = 0; i < nLen; i++) {
	        var n = nodes[i];

	        if (!n.fixed) {
	          vec2.sub(v12, center, n.p); // var d = vec2.len(v12);
	          // vec2.scale(v12, v12, 1 / d);
	          // var gravityFactor = gravity;

	          scaleAndAdd(n.p, n.p, v12, gravity * friction);
	        }
	      } // Repulsive
	      // PENDING


	      for (var i = 0; i < nLen; i++) {
	        var n1 = nodes[i];

	        for (var j = i + 1; j < nLen; j++) {
	          var n2 = nodes[j];
	          vec2.sub(v12, n2.p, n1.p);
	          var d = vec2.len(v12);

	          if (d === 0) {
	            // Random repulse
	            vec2.set(v12, Math.random() - 0.5, Math.random() - 0.5);
	            d = 1;
	          }

	          var repFact = (n1.rep + n2.rep) / d / d;
	          !n1.fixed && scaleAndAdd(n1.pp, n1.pp, v12, repFact);
	          !n2.fixed && scaleAndAdd(n2.pp, n2.pp, v12, -repFact);
	        }
	      }

	      var v = [];

	      for (var i = 0; i < nLen; i++) {
	        var n = nodes[i];

	        if (!n.fixed) {
	          vec2.sub(v, n.p, n.pp);
	          scaleAndAdd(n.p, n.p, v, friction);
	          vec2.copy(n.pp, n.p);
	        }
	      }

	      friction = friction * 0.992;
	      cb && cb(nodes, edges, friction < 0.01);
	    }
	  };
	}

	exports.forceLayout = forceLayout;

/***/ },
/* 398 */
/***/ function(module, exports, __webpack_require__) {

	var View = __webpack_require__(341);

	var _layout = __webpack_require__(247);

	var getLayoutRect = _layout.getLayoutRect;

	var bbox = __webpack_require__(217);

	// FIXME Where to create the simple view coordinate system
	function getViewRect(seriesModel, api, aspect) {
	  var option = seriesModel.getBoxLayoutParams();
	  option.aspect = aspect;
	  return getLayoutRect(option, {
	    width: api.getWidth(),
	    height: api.getHeight()
	  });
	}

	function _default(ecModel, api) {
	  var viewList = [];
	  ecModel.eachSeriesByType('graph', function (seriesModel) {
	    var coordSysType = seriesModel.get('coordinateSystem');

	    if (!coordSysType || coordSysType === 'view') {
	      var data = seriesModel.getData();
	      var positions = data.mapArray(function (idx) {
	        var itemModel = data.getItemModel(idx);
	        return [+itemModel.get('x'), +itemModel.get('y')];
	      });
	      var min = [];
	      var max = [];
	      bbox.fromPoints(positions, min, max); // If width or height is 0

	      if (max[0] - min[0] === 0) {
	        max[0] += 1;
	        min[0] -= 1;
	      }

	      if (max[1] - min[1] === 0) {
	        max[1] += 1;
	        min[1] -= 1;
	      }

	      var aspect = (max[0] - min[0]) / (max[1] - min[1]); // FIXME If get view rect after data processed?

	      var viewRect = getViewRect(seriesModel, api, aspect); // Position may be NaN, use view rect instead

	      if (isNaN(aspect)) {
	        min = [viewRect.x, viewRect.y];
	        max = [viewRect.x + viewRect.width, viewRect.y + viewRect.height];
	      }

	      var bbWidth = max[0] - min[0];
	      var bbHeight = max[1] - min[1];
	      var viewWidth = viewRect.width;
	      var viewHeight = viewRect.height;
	      var viewCoordSys = seriesModel.coordinateSystem = new View();
	      viewCoordSys.zoomLimit = seriesModel.get('scaleLimit');
	      viewCoordSys.setBoundingRect(min[0], min[1], bbWidth, bbHeight);
	      viewCoordSys.setViewRect(viewRect.x, viewRect.y, viewWidth, viewHeight); // Update roam info

	      viewCoordSys.setCenter(seriesModel.get('center'));
	      viewCoordSys.setZoom(seriesModel.get('zoom'));
	      viewList.push(viewCoordSys);
	    }
	  });
	  return viewList;
	}

	module.exports = _default;

/***/ },
/* 399 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(400);

	__webpack_require__(401);

/***/ },
/* 400 */
/***/ function(module, exports, __webpack_require__) {

	var List = __webpack_require__(265);

	var SeriesModel = __webpack_require__(256);

	var zrUtil = __webpack_require__(166);

	var GaugeSeries = SeriesModel.extend({
	  type: 'series.gauge',
	  getInitialData: function (option, ecModel) {
	    var list = new List(['value'], this);
	    var dataOpt = option.data || [];

	    if (!zrUtil.isArray(dataOpt)) {
	      dataOpt = [dataOpt];
	    } // Only use the first data item


	    list.initData(dataOpt);
	    return list;
	  },
	  defaultOption: {
	    zlevel: 0,
	    z: 2,
	    // 默认全局居中
	    center: ['50%', '50%'],
	    legendHoverLink: true,
	    radius: '75%',
	    startAngle: 225,
	    endAngle: -45,
	    clockwise: true,
	    // 最小值
	    min: 0,
	    // 最大值
	    max: 100,
	    // 分割段数，默认为10
	    splitNumber: 10,
	    // 坐标轴线
	    axisLine: {
	      // 默认显示，属性show控制显示与否
	      show: true,
	      lineStyle: {
	        // 属性lineStyle控制线条样式
	        color: [[0.2, '#91c7ae'], [0.8, '#63869e'], [1, '#c23531']],
	        width: 30
	      }
	    },
	    // 分隔线
	    splitLine: {
	      // 默认显示，属性show控制显示与否
	      show: true,
	      // 属性length控制线长
	      length: 30,
	      // 属性lineStyle（详见lineStyle）控制线条样式
	      lineStyle: {
	        color: '#eee',
	        width: 2,
	        type: 'solid'
	      }
	    },
	    // 坐标轴小标记
	    axisTick: {
	      // 属性show控制显示与否，默认不显示
	      show: true,
	      // 每份split细分多少段
	      splitNumber: 5,
	      // 属性length控制线长
	      length: 8,
	      // 属性lineStyle控制线条样式
	      lineStyle: {
	        color: '#eee',
	        width: 1,
	        type: 'solid'
	      }
	    },
	    axisLabel: {
	      show: true,
	      distance: 5,
	      // formatter: null,
	      color: 'auto'
	    },
	    pointer: {
	      show: true,
	      length: '80%',
	      width: 8
	    },
	    itemStyle: {
	      normal: {
	        color: 'auto'
	      }
	    },
	    title: {
	      show: true,
	      // x, y，单位px
	      offsetCenter: [0, '-40%'],
	      // 其余属性默认使用全局文本样式，详见TEXTSTYLE
	      color: '#333',
	      fontSize: 15
	    },
	    detail: {
	      show: true,
	      backgroundColor: 'rgba(0,0,0,0)',
	      borderWidth: 0,
	      borderColor: '#ccc',
	      width: 100,
	      height: null,
	      // self-adaption
	      padding: [5, 10],
	      // x, y，单位px
	      offsetCenter: [0, '40%'],
	      // formatter: null,
	      // 其余属性默认使用全局文本样式，详见TEXTSTYLE
	      color: 'auto',
	      fontSize: 30
	    }
	  }
	});
	var _default = GaugeSeries;
	module.exports = _default;

/***/ },
/* 401 */
/***/ function(module, exports, __webpack_require__) {

	var PointerPath = __webpack_require__(402);

	var graphic = __webpack_require__(212);

	var ChartView = __webpack_require__(258);

	var _number = __webpack_require__(205);

	var parsePercent = _number.parsePercent;
	var round = _number.round;
	var linearMap = _number.linearMap;

	function parsePosition(seriesModel, api) {
	  var center = seriesModel.get('center');
	  var width = api.getWidth();
	  var height = api.getHeight();
	  var size = Math.min(width, height);
	  var cx = parsePercent(center[0], api.getWidth());
	  var cy = parsePercent(center[1], api.getHeight());
	  var r = parsePercent(seriesModel.get('radius'), size / 2);
	  return {
	    cx: cx,
	    cy: cy,
	    r: r
	  };
	}

	function formatLabel(label, labelFormatter) {
	  if (labelFormatter) {
	    if (typeof labelFormatter === 'string') {
	      label = labelFormatter.replace('{value}', label != null ? label : '');
	    } else if (typeof labelFormatter === 'function') {
	      label = labelFormatter(label);
	    }
	  }

	  return label;
	}

	var PI2 = Math.PI * 2;
	var GaugeView = ChartView.extend({
	  type: 'gauge',
	  render: function (seriesModel, ecModel, api) {
	    this.group.removeAll();
	    var colorList = seriesModel.get('axisLine.lineStyle.color');
	    var posInfo = parsePosition(seriesModel, api);

	    this._renderMain(seriesModel, ecModel, api, colorList, posInfo);
	  },
	  dispose: function () {},
	  _renderMain: function (seriesModel, ecModel, api, colorList, posInfo) {
	    var group = this.group;
	    var axisLineModel = seriesModel.getModel('axisLine');
	    var lineStyleModel = axisLineModel.getModel('lineStyle');
	    var clockwise = seriesModel.get('clockwise');
	    var startAngle = -seriesModel.get('startAngle') / 180 * Math.PI;
	    var endAngle = -seriesModel.get('endAngle') / 180 * Math.PI;
	    var angleRangeSpan = (endAngle - startAngle) % PI2;
	    var prevEndAngle = startAngle;
	    var axisLineWidth = lineStyleModel.get('width');

	    for (var i = 0; i < colorList.length; i++) {
	      // Clamp
	      var percent = Math.min(Math.max(colorList[i][0], 0), 1);
	      var endAngle = startAngle + angleRangeSpan * percent;
	      var sector = new graphic.Sector({
	        shape: {
	          startAngle: prevEndAngle,
	          endAngle: endAngle,
	          cx: posInfo.cx,
	          cy: posInfo.cy,
	          clockwise: clockwise,
	          r0: posInfo.r - axisLineWidth,
	          r: posInfo.r
	        },
	        silent: true
	      });
	      sector.setStyle({
	        fill: colorList[i][1]
	      });
	      sector.setStyle(lineStyleModel.getLineStyle( // Because we use sector to simulate arc
	      // so the properties for stroking are useless
	      ['color', 'borderWidth', 'borderColor']));
	      group.add(sector);
	      prevEndAngle = endAngle;
	    }

	    var getColor = function (percent) {
	      // Less than 0
	      if (percent <= 0) {
	        return colorList[0][1];
	      }

	      for (var i = 0; i < colorList.length; i++) {
	        if (colorList[i][0] >= percent && (i === 0 ? 0 : colorList[i - 1][0]) < percent) {
	          return colorList[i][1];
	        }
	      } // More than 1


	      return colorList[i - 1][1];
	    };

	    if (!clockwise) {
	      var tmp = startAngle;
	      startAngle = endAngle;
	      endAngle = tmp;
	    }

	    this._renderTicks(seriesModel, ecModel, api, getColor, posInfo, startAngle, endAngle, clockwise);

	    this._renderPointer(seriesModel, ecModel, api, getColor, posInfo, startAngle, endAngle, clockwise);

	    this._renderTitle(seriesModel, ecModel, api, getColor, posInfo);

	    this._renderDetail(seriesModel, ecModel, api, getColor, posInfo);
	  },
	  _renderTicks: function (seriesModel, ecModel, api, getColor, posInfo, startAngle, endAngle, clockwise) {
	    var group = this.group;
	    var cx = posInfo.cx;
	    var cy = posInfo.cy;
	    var r = posInfo.r;
	    var minVal = +seriesModel.get('min');
	    var maxVal = +seriesModel.get('max');
	    var splitLineModel = seriesModel.getModel('splitLine');
	    var tickModel = seriesModel.getModel('axisTick');
	    var labelModel = seriesModel.getModel('axisLabel');
	    var splitNumber = seriesModel.get('splitNumber');
	    var subSplitNumber = tickModel.get('splitNumber');
	    var splitLineLen = parsePercent(splitLineModel.get('length'), r);
	    var tickLen = parsePercent(tickModel.get('length'), r);
	    var angle = startAngle;
	    var step = (endAngle - startAngle) / splitNumber;
	    var subStep = step / subSplitNumber;
	    var splitLineStyle = splitLineModel.getModel('lineStyle').getLineStyle();
	    var tickLineStyle = tickModel.getModel('lineStyle').getLineStyle();

	    for (var i = 0; i <= splitNumber; i++) {
	      var unitX = Math.cos(angle);
	      var unitY = Math.sin(angle); // Split line

	      if (splitLineModel.get('show')) {
	        var splitLine = new graphic.Line({
	          shape: {
	            x1: unitX * r + cx,
	            y1: unitY * r + cy,
	            x2: unitX * (r - splitLineLen) + cx,
	            y2: unitY * (r - splitLineLen) + cy
	          },
	          style: splitLineStyle,
	          silent: true
	        });

	        if (splitLineStyle.stroke === 'auto') {
	          splitLine.setStyle({
	            stroke: getColor(i / splitNumber)
	          });
	        }

	        group.add(splitLine);
	      } // Label


	      if (labelModel.get('show')) {
	        var label = formatLabel(round(i / splitNumber * (maxVal - minVal) + minVal), labelModel.get('formatter'));
	        var distance = labelModel.get('distance');
	        var autoColor = getColor(i / splitNumber);
	        group.add(new graphic.Text({
	          style: graphic.setTextStyle({}, labelModel, {
	            text: label,
	            x: unitX * (r - splitLineLen - distance) + cx,
	            y: unitY * (r - splitLineLen - distance) + cy,
	            textVerticalAlign: unitY < -0.4 ? 'top' : unitY > 0.4 ? 'bottom' : 'middle',
	            textAlign: unitX < -0.4 ? 'left' : unitX > 0.4 ? 'right' : 'center'
	          }, {
	            autoColor: autoColor
	          }),
	          silent: true
	        }));
	      } // Axis tick


	      if (tickModel.get('show') && i !== splitNumber) {
	        for (var j = 0; j <= subSplitNumber; j++) {
	          var unitX = Math.cos(angle);
	          var unitY = Math.sin(angle);
	          var tickLine = new graphic.Line({
	            shape: {
	              x1: unitX * r + cx,
	              y1: unitY * r + cy,
	              x2: unitX * (r - tickLen) + cx,
	              y2: unitY * (r - tickLen) + cy
	            },
	            silent: true,
	            style: tickLineStyle
	          });

	          if (tickLineStyle.stroke === 'auto') {
	            tickLine.setStyle({
	              stroke: getColor((i + j / subSplitNumber) / splitNumber)
	            });
	          }

	          group.add(tickLine);
	          angle += subStep;
	        }

	        angle -= subStep;
	      } else {
	        angle += step;
	      }
	    }
	  },
	  _renderPointer: function (seriesModel, ecModel, api, getColor, posInfo, startAngle, endAngle, clockwise) {
	    var group = this.group;
	    var oldData = this._data;

	    if (!seriesModel.get('pointer.show')) {
	      // Remove old element
	      oldData && oldData.eachItemGraphicEl(function (el) {
	        group.remove(el);
	      });
	      return;
	    }

	    var valueExtent = [+seriesModel.get('min'), +seriesModel.get('max')];
	    var angleExtent = [startAngle, endAngle];
	    var data = seriesModel.getData();
	    data.diff(oldData).add(function (idx) {
	      var pointer = new PointerPath({
	        shape: {
	          angle: startAngle
	        }
	      });
	      graphic.initProps(pointer, {
	        shape: {
	          angle: linearMap(data.get('value', idx), valueExtent, angleExtent, true)
	        }
	      }, seriesModel);
	      group.add(pointer);
	      data.setItemGraphicEl(idx, pointer);
	    }).update(function (newIdx, oldIdx) {
	      var pointer = oldData.getItemGraphicEl(oldIdx);
	      graphic.updateProps(pointer, {
	        shape: {
	          angle: linearMap(data.get('value', newIdx), valueExtent, angleExtent, true)
	        }
	      }, seriesModel);
	      group.add(pointer);
	      data.setItemGraphicEl(newIdx, pointer);
	    }).remove(function (idx) {
	      var pointer = oldData.getItemGraphicEl(idx);
	      group.remove(pointer);
	    }).execute();
	    data.eachItemGraphicEl(function (pointer, idx) {
	      var itemModel = data.getItemModel(idx);
	      var pointerModel = itemModel.getModel('pointer');
	      pointer.setShape({
	        x: posInfo.cx,
	        y: posInfo.cy,
	        width: parsePercent(pointerModel.get('width'), posInfo.r),
	        r: parsePercent(pointerModel.get('length'), posInfo.r)
	      });
	      pointer.useStyle(itemModel.getModel('itemStyle.normal').getItemStyle());

	      if (pointer.style.fill === 'auto') {
	        pointer.setStyle('fill', getColor(linearMap(data.get('value', idx), valueExtent, [0, 1], true)));
	      }

	      graphic.setHoverStyle(pointer, itemModel.getModel('itemStyle.emphasis').getItemStyle());
	    });
	    this._data = data;
	  },
	  _renderTitle: function (seriesModel, ecModel, api, getColor, posInfo) {
	    var titleModel = seriesModel.getModel('title');

	    if (titleModel.get('show')) {
	      var offsetCenter = titleModel.get('offsetCenter');
	      var x = posInfo.cx + parsePercent(offsetCenter[0], posInfo.r);
	      var y = posInfo.cy + parsePercent(offsetCenter[1], posInfo.r);
	      var minVal = +seriesModel.get('min');
	      var maxVal = +seriesModel.get('max');
	      var value = seriesModel.getData().get('value', 0);
	      var autoColor = getColor(linearMap(value, [minVal, maxVal], [0, 1], true));
	      this.group.add(new graphic.Text({
	        silent: true,
	        style: graphic.setTextStyle({}, titleModel, {
	          x: x,
	          y: y,
	          // FIXME First data name ?
	          text: seriesModel.getData().getName(0),
	          textAlign: 'center',
	          textVerticalAlign: 'middle'
	        }, {
	          autoColor: autoColor,
	          forceRich: true
	        })
	      }));
	    }
	  },
	  _renderDetail: function (seriesModel, ecModel, api, getColor, posInfo) {
	    var detailModel = seriesModel.getModel('detail');
	    var minVal = +seriesModel.get('min');
	    var maxVal = +seriesModel.get('max');

	    if (detailModel.get('show')) {
	      var offsetCenter = detailModel.get('offsetCenter');
	      var x = posInfo.cx + parsePercent(offsetCenter[0], posInfo.r);
	      var y = posInfo.cy + parsePercent(offsetCenter[1], posInfo.r);
	      var width = parsePercent(detailModel.get('width'), posInfo.r);
	      var height = parsePercent(detailModel.get('height'), posInfo.r);
	      var value = seriesModel.getData().get('value', 0);
	      var autoColor = getColor(linearMap(value, [minVal, maxVal], [0, 1], true));
	      this.group.add(new graphic.Text({
	        silent: true,
	        style: graphic.setTextStyle({}, detailModel, {
	          x: x,
	          y: y,
	          text: formatLabel( // FIXME First data name ?
	          value, detailModel.get('formatter')),
	          textWidth: isNaN(width) ? null : width,
	          textHeight: isNaN(height) ? null : height,
	          textAlign: 'center',
	          textVerticalAlign: 'middle'
	        }, {
	          autoColor: autoColor,
	          forceRich: true
	        })
	      }));
	    }
	  }
	});
	var _default = GaugeView;
	module.exports = _default;

/***/ },
/* 402 */
/***/ function(module, exports, __webpack_require__) {

	var Path = __webpack_require__(214);

	var _default = Path.extend({
	  type: 'echartsGaugePointer',
	  shape: {
	    angle: 0,
	    width: 10,
	    r: 10,
	    x: 0,
	    y: 0
	  },
	  buildPath: function (ctx, shape) {
	    var mathCos = Math.cos;
	    var mathSin = Math.sin;
	    var r = shape.r;
	    var width = shape.width;
	    var angle = shape.angle;
	    var x = shape.x - mathCos(angle) * width * (width >= r / 3 ? 1 : 2);
	    var y = shape.y - mathSin(angle) * width * (width >= r / 3 ? 1 : 2);
	    angle = shape.angle - Math.PI / 2;
	    ctx.moveTo(x, y);
	    ctx.lineTo(shape.x + mathCos(angle) * width, shape.y + mathSin(angle) * width);
	    ctx.lineTo(shape.x + mathCos(shape.angle) * r, shape.y + mathSin(shape.angle) * r);
	    ctx.lineTo(shape.x - mathCos(angle) * width, shape.y - mathSin(angle) * width);
	    ctx.lineTo(x, y);
	    return;
	  }
	});

	module.exports = _default;

/***/ },
/* 403 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var zrUtil = __webpack_require__(166);

	__webpack_require__(404);

	__webpack_require__(405);

	var dataColor = __webpack_require__(319);

	var funnelLayout = __webpack_require__(406);

	var dataFilter = __webpack_require__(322);

	echarts.registerVisual(zrUtil.curry(dataColor, 'funnel'));
	echarts.registerLayout(funnelLayout);
	echarts.registerProcessor(zrUtil.curry(dataFilter, 'funnel'));

/***/ },
/* 404 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var List = __webpack_require__(265);

	var _model = __webpack_require__(203);

	var defaultEmphasis = _model.defaultEmphasis;

	var completeDimensions = __webpack_require__(267);

	var FunnelSeries = echarts.extendSeriesModel({
	  type: 'series.funnel',
	  init: function (option) {
	    FunnelSeries.superApply(this, 'init', arguments); // Enable legend selection for each data item
	    // Use a function instead of direct access because data reference may changed

	    this.legendDataProvider = function () {
	      return this.getRawData();
	    }; // Extend labelLine emphasis


	    this._defaultLabelLine(option);
	  },
	  getInitialData: function (option, ecModel) {
	    var dimensions = completeDimensions(['value'], option.data);
	    var list = new List(dimensions, this);
	    list.initData(option.data);
	    return list;
	  },
	  _defaultLabelLine: function (option) {
	    // Extend labelLine emphasis
	    defaultEmphasis(option.labelLine, ['show']);
	    var labelLineNormalOpt = option.labelLine.normal;
	    var labelLineEmphasisOpt = option.labelLine.emphasis; // Not show label line if `label.normal.show = false`

	    labelLineNormalOpt.show = labelLineNormalOpt.show && option.label.normal.show;
	    labelLineEmphasisOpt.show = labelLineEmphasisOpt.show && option.label.emphasis.show;
	  },
	  // Overwrite
	  getDataParams: function (dataIndex) {
	    var data = this.getData();
	    var params = FunnelSeries.superCall(this, 'getDataParams', dataIndex);
	    var sum = data.getSum('value'); // Percent is 0 if sum is 0

	    params.percent = !sum ? 0 : +(data.get('value', dataIndex) / sum * 100).toFixed(2);
	    params.$vars.push('percent');
	    return params;
	  },
	  defaultOption: {
	    zlevel: 0,
	    // 一级层叠
	    z: 2,
	    // 二级层叠
	    legendHoverLink: true,
	    left: 80,
	    top: 60,
	    right: 80,
	    bottom: 60,
	    // width: {totalWidth} - left - right,
	    // height: {totalHeight} - top - bottom,
	    // 默认取数据最小最大值
	    // min: 0,
	    // max: 100,
	    minSize: '0%',
	    maxSize: '100%',
	    sort: 'descending',
	    // 'ascending', 'descending'
	    gap: 0,
	    funnelAlign: 'center',
	    label: {
	      normal: {
	        show: true,
	        position: 'outer' // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调

	      },
	      emphasis: {
	        show: true
	      }
	    },
	    labelLine: {
	      normal: {
	        show: true,
	        length: 20,
	        lineStyle: {
	          // color: 各异,
	          width: 1,
	          type: 'solid'
	        }
	      },
	      emphasis: {}
	    },
	    itemStyle: {
	      normal: {
	        // color: 各异,
	        borderColor: '#fff',
	        borderWidth: 1
	      },
	      emphasis: {// color: 各异,
	      }
	    }
	  }
	});
	var _default = FunnelSeries;
	module.exports = _default;

/***/ },
/* 405 */
/***/ function(module, exports, __webpack_require__) {

	var graphic = __webpack_require__(212);

	var zrUtil = __webpack_require__(166);

	var ChartView = __webpack_require__(258);

	/**
	 * Piece of pie including Sector, Label, LabelLine
	 * @constructor
	 * @extends {module:zrender/graphic/Group}
	 */
	function FunnelPiece(data, idx) {
	  graphic.Group.call(this);
	  var polygon = new graphic.Polygon();
	  var labelLine = new graphic.Polyline();
	  var text = new graphic.Text();
	  this.add(polygon);
	  this.add(labelLine);
	  this.add(text);
	  this.updateData(data, idx, true); // Hover to change label and labelLine

	  function onEmphasis() {
	    labelLine.ignore = labelLine.hoverIgnore;
	    text.ignore = text.hoverIgnore;
	  }

	  function onNormal() {
	    labelLine.ignore = labelLine.normalIgnore;
	    text.ignore = text.normalIgnore;
	  }

	  this.on('emphasis', onEmphasis).on('normal', onNormal).on('mouseover', onEmphasis).on('mouseout', onNormal);
	}

	var funnelPieceProto = FunnelPiece.prototype;
	var opacityAccessPath = ['itemStyle', 'normal', 'opacity'];

	funnelPieceProto.updateData = function (data, idx, firstCreate) {
	  var polygon = this.childAt(0);
	  var seriesModel = data.hostModel;
	  var itemModel = data.getItemModel(idx);
	  var layout = data.getItemLayout(idx);
	  var opacity = data.getItemModel(idx).get(opacityAccessPath);
	  opacity = opacity == null ? 1 : opacity; // Reset style

	  polygon.useStyle({});

	  if (firstCreate) {
	    polygon.setShape({
	      points: layout.points
	    });
	    polygon.setStyle({
	      opacity: 0
	    });
	    graphic.initProps(polygon, {
	      style: {
	        opacity: opacity
	      }
	    }, seriesModel, idx);
	  } else {
	    graphic.updateProps(polygon, {
	      style: {
	        opacity: opacity
	      },
	      shape: {
	        points: layout.points
	      }
	    }, seriesModel, idx);
	  } // Update common style


	  var itemStyleModel = itemModel.getModel('itemStyle');
	  var visualColor = data.getItemVisual(idx, 'color');
	  polygon.setStyle(zrUtil.defaults({
	    lineJoin: 'round',
	    fill: visualColor
	  }, itemStyleModel.getModel('normal').getItemStyle(['opacity'])));
	  polygon.hoverStyle = itemStyleModel.getModel('emphasis').getItemStyle();

	  this._updateLabel(data, idx);

	  graphic.setHoverStyle(this);
	};

	funnelPieceProto._updateLabel = function (data, idx) {
	  var labelLine = this.childAt(1);
	  var labelText = this.childAt(2);
	  var seriesModel = data.hostModel;
	  var itemModel = data.getItemModel(idx);
	  var layout = data.getItemLayout(idx);
	  var labelLayout = layout.label;
	  var visualColor = data.getItemVisual(idx, 'color');
	  graphic.updateProps(labelLine, {
	    shape: {
	      points: labelLayout.linePoints || labelLayout.linePoints
	    }
	  }, seriesModel, idx);
	  graphic.updateProps(labelText, {
	    style: {
	      x: labelLayout.x,
	      y: labelLayout.y
	    }
	  }, seriesModel, idx);
	  labelText.attr({
	    rotation: labelLayout.rotation,
	    origin: [labelLayout.x, labelLayout.y],
	    z2: 10
	  });
	  var labelModel = itemModel.getModel('label.normal');
	  var labelHoverModel = itemModel.getModel('label.emphasis');
	  var labelLineModel = itemModel.getModel('labelLine.normal');
	  var labelLineHoverModel = itemModel.getModel('labelLine.emphasis');
	  var visualColor = data.getItemVisual(idx, 'color');
	  graphic.setLabelStyle(labelText.style, labelText.hoverStyle = {}, labelModel, labelHoverModel, {
	    labelFetcher: data.hostModel,
	    labelDataIndex: idx,
	    defaultText: data.getName(idx),
	    autoColor: visualColor,
	    useInsideStyle: !!labelLayout.inside
	  }, {
	    textAlign: labelLayout.textAlign,
	    textVerticalAlign: labelLayout.verticalAlign
	  });
	  labelText.ignore = labelText.normalIgnore = !labelModel.get('show');
	  labelText.hoverIgnore = !labelHoverModel.get('show');
	  labelLine.ignore = labelLine.normalIgnore = !labelLineModel.get('show');
	  labelLine.hoverIgnore = !labelLineHoverModel.get('show'); // Default use item visual color

	  labelLine.setStyle({
	    stroke: visualColor
	  });
	  labelLine.setStyle(labelLineModel.getModel('lineStyle').getLineStyle());
	  labelLine.hoverStyle = labelLineHoverModel.getModel('lineStyle').getLineStyle();
	};

	zrUtil.inherits(FunnelPiece, graphic.Group);
	var FunnelView = ChartView.extend({
	  type: 'funnel',
	  render: function (seriesModel, ecModel, api) {
	    var data = seriesModel.getData();
	    var oldData = this._data;
	    var group = this.group;
	    data.diff(oldData).add(function (idx) {
	      var funnelPiece = new FunnelPiece(data, idx);
	      data.setItemGraphicEl(idx, funnelPiece);
	      group.add(funnelPiece);
	    }).update(function (newIdx, oldIdx) {
	      var piePiece = oldData.getItemGraphicEl(oldIdx);
	      piePiece.updateData(data, newIdx);
	      group.add(piePiece);
	      data.setItemGraphicEl(newIdx, piePiece);
	    }).remove(function (idx) {
	      var piePiece = oldData.getItemGraphicEl(idx);
	      group.remove(piePiece);
	    }).execute();
	    this._data = data;
	  },
	  remove: function () {
	    this.group.removeAll();
	    this._data = null;
	  },
	  dispose: function () {}
	});
	var _default = FunnelView;
	module.exports = _default;

/***/ },
/* 406 */
/***/ function(module, exports, __webpack_require__) {

	var layout = __webpack_require__(247);

	var _number = __webpack_require__(205);

	var parsePercent = _number.parsePercent;
	var linearMap = _number.linearMap;

	function getViewRect(seriesModel, api) {
	  return layout.getLayoutRect(seriesModel.getBoxLayoutParams(), {
	    width: api.getWidth(),
	    height: api.getHeight()
	  });
	}

	function getSortedIndices(data, sort) {
	  var valueArr = data.mapArray('value', function (val) {
	    return val;
	  });
	  var indices = [];
	  var isAscending = sort === 'ascending';

	  for (var i = 0, len = data.count(); i < len; i++) {
	    indices[i] = i;
	  } // Add custom sortable function & none sortable opetion by "options.sort"


	  if (typeof sort === 'function') {
	    indices.sort(sort);
	  } else if (sort !== 'none') {
	    indices.sort(function (a, b) {
	      return isAscending ? valueArr[a] - valueArr[b] : valueArr[b] - valueArr[a];
	    });
	  }

	  return indices;
	}

	function labelLayout(data) {
	  data.each(function (idx) {
	    var itemModel = data.getItemModel(idx);
	    var labelModel = itemModel.getModel('label.normal');
	    var labelPosition = labelModel.get('position');
	    var labelLineModel = itemModel.getModel('labelLine.normal');
	    var layout = data.getItemLayout(idx);
	    var points = layout.points;
	    var isLabelInside = labelPosition === 'inner' || labelPosition === 'inside' || labelPosition === 'center';
	    var textAlign;
	    var textX;
	    var textY;
	    var linePoints;

	    if (isLabelInside) {
	      textX = (points[0][0] + points[1][0] + points[2][0] + points[3][0]) / 4;
	      textY = (points[0][1] + points[1][1] + points[2][1] + points[3][1]) / 4;
	      textAlign = 'center';
	      linePoints = [[textX, textY], [textX, textY]];
	    } else {
	      var x1;
	      var y1;
	      var x2;
	      var labelLineLen = labelLineModel.get('length');

	      if (labelPosition === 'left') {
	        // Left side
	        x1 = (points[3][0] + points[0][0]) / 2;
	        y1 = (points[3][1] + points[0][1]) / 2;
	        x2 = x1 - labelLineLen;
	        textX = x2 - 5;
	        textAlign = 'right';
	      } else {
	        // Right side
	        x1 = (points[1][0] + points[2][0]) / 2;
	        y1 = (points[1][1] + points[2][1]) / 2;
	        x2 = x1 + labelLineLen;
	        textX = x2 + 5;
	        textAlign = 'left';
	      }

	      var y2 = y1;
	      linePoints = [[x1, y1], [x2, y2]];
	      textY = y2;
	    }

	    layout.label = {
	      linePoints: linePoints,
	      x: textX,
	      y: textY,
	      verticalAlign: 'middle',
	      textAlign: textAlign,
	      inside: isLabelInside
	    };
	  });
	}

	function _default(ecModel, api, payload) {
	  ecModel.eachSeriesByType('funnel', function (seriesModel) {
	    var data = seriesModel.getData();
	    var sort = seriesModel.get('sort');
	    var viewRect = getViewRect(seriesModel, api);
	    var indices = getSortedIndices(data, sort);
	    var sizeExtent = [parsePercent(seriesModel.get('minSize'), viewRect.width), parsePercent(seriesModel.get('maxSize'), viewRect.width)];
	    var dataExtent = data.getDataExtent('value');
	    var min = seriesModel.get('min');
	    var max = seriesModel.get('max');

	    if (min == null) {
	      min = Math.min(dataExtent[0], 0);
	    }

	    if (max == null) {
	      max = dataExtent[1];
	    }

	    var funnelAlign = seriesModel.get('funnelAlign');
	    var gap = seriesModel.get('gap');
	    var itemHeight = (viewRect.height - gap * (data.count() - 1)) / data.count();
	    var y = viewRect.y;

	    var getLinePoints = function (idx, offY) {
	      // End point index is data.count() and we assign it 0
	      var val = data.get('value', idx) || 0;
	      var itemWidth = linearMap(val, [min, max], sizeExtent, true);
	      var x0;

	      switch (funnelAlign) {
	        case 'left':
	          x0 = viewRect.x;
	          break;

	        case 'center':
	          x0 = viewRect.x + (viewRect.width - itemWidth) / 2;
	          break;

	        case 'right':
	          x0 = viewRect.x + viewRect.width - itemWidth;
	          break;
	      }

	      return [[x0, offY], [x0 + itemWidth, offY]];
	    };

	    if (sort === 'ascending') {
	      // From bottom to top
	      itemHeight = -itemHeight;
	      gap = -gap;
	      y += viewRect.height;
	      indices = indices.reverse();
	    }

	    for (var i = 0; i < indices.length; i++) {
	      var idx = indices[i];
	      var nextIdx = indices[i + 1];
	      var start = getLinePoints(idx, y);
	      var end = getLinePoints(nextIdx, y + itemHeight);
	      y += itemHeight + gap;
	      data.setItemLayout(idx, {
	        points: start.concat(end.slice().reverse())
	      });
	    }

	    labelLayout(data);
	  });
	}

	module.exports = _default;

/***/ },
/* 407 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	__webpack_require__(408);

	__webpack_require__(421);

	__webpack_require__(422);

	var parallelVisual = __webpack_require__(423);

	echarts.registerVisual(parallelVisual);

/***/ },
/* 408 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var zrUtil = __webpack_require__(166);

	var throttleUtil = __webpack_require__(259);

	var parallelPreprocessor = __webpack_require__(409);

	__webpack_require__(410);

	__webpack_require__(414);

	__webpack_require__(416);

	var CLICK_THRESHOLD = 5; // > 4
	// Parallel view

	echarts.extendComponentView({
	  type: 'parallel',
	  render: function (parallelModel, ecModel, api) {
	    this._model = parallelModel;
	    this._api = api;

	    if (!this._handlers) {
	      this._handlers = {};
	      zrUtil.each(handlers, function (handler, eventName) {
	        api.getZr().on(eventName, this._handlers[eventName] = zrUtil.bind(handler, this));
	      }, this);
	    }

	    throttleUtil.createOrUpdate(this, '_throttledDispatchExpand', parallelModel.get('axisExpandRate'), 'fixRate');
	  },
	  dispose: function (ecModel, api) {
	    zrUtil.each(this._handlers, function (handler, eventName) {
	      api.getZr().off(eventName, handler);
	    });
	    this._handlers = null;
	  },

	  /**
	   * @param {Object} [opt] If null, cancle the last action triggering for debounce.
	   */
	  _throttledDispatchExpand: function (opt) {
	    this._dispatchExpand(opt);
	  },
	  _dispatchExpand: function (opt) {
	    opt && this._api.dispatchAction(zrUtil.extend({
	      type: 'parallelAxisExpand'
	    }, opt));
	  }
	});
	var handlers = {
	  mousedown: function (e) {
	    if (checkTrigger(this, 'click')) {
	      this._mouseDownPoint = [e.offsetX, e.offsetY];
	    }
	  },
	  mouseup: function (e) {
	    var mouseDownPoint = this._mouseDownPoint;

	    if (checkTrigger(this, 'click') && mouseDownPoint) {
	      var point = [e.offsetX, e.offsetY];
	      var dist = Math.pow(mouseDownPoint[0] - point[0], 2) + Math.pow(mouseDownPoint[1] - point[1], 2);

	      if (dist > CLICK_THRESHOLD) {
	        return;
	      }

	      var result = this._model.coordinateSystem.getSlidedAxisExpandWindow([e.offsetX, e.offsetY]);

	      result.behavior !== 'none' && this._dispatchExpand({
	        axisExpandWindow: result.axisExpandWindow
	      });
	    }

	    this._mouseDownPoint = null;
	  },
	  mousemove: function (e) {
	    // Should do nothing when brushing.
	    if (this._mouseDownPoint || !checkTrigger(this, 'mousemove')) {
	      return;
	    }

	    var model = this._model;
	    var result = model.coordinateSystem.getSlidedAxisExpandWindow([e.offsetX, e.offsetY]);
	    var behavior = result.behavior;
	    behavior === 'jump' && this._throttledDispatchExpand.debounceNextCall(model.get('axisExpandDebounce'));

	    this._throttledDispatchExpand(behavior === 'none' ? null // Cancle the last trigger, in case that mouse slide out of the area quickly.
	    : {
	      axisExpandWindow: result.axisExpandWindow,
	      // Jumping uses animation, and sliding suppresses animation.
	      animation: behavior === 'jump' ? null : false
	    });
	  }
	};

	function checkTrigger(view, triggerOn) {
	  var model = view._model;
	  return model.get('axisExpandable') && model.get('axisExpandTriggerOn') === triggerOn;
	}

	echarts.registerPreprocessor(parallelPreprocessor);

/***/ },
/* 409 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var modelUtil = __webpack_require__(203);

	function _default(option) {
	  createParallelIfNeeded(option);
	  mergeAxisOptionFromParallel(option);
	}
	/**
	 * Create a parallel coordinate if not exists.
	 * @inner
	 */


	function createParallelIfNeeded(option) {
	  if (option.parallel) {
	    return;
	  }

	  var hasParallelSeries = false;
	  zrUtil.each(option.series, function (seriesOpt) {
	    if (seriesOpt && seriesOpt.type === 'parallel') {
	      hasParallelSeries = true;
	    }
	  });

	  if (hasParallelSeries) {
	    option.parallel = [{}];
	  }
	}
	/**
	 * Merge aixs definition from parallel option (if exists) to axis option.
	 * @inner
	 */


	function mergeAxisOptionFromParallel(option) {
	  var axes = modelUtil.normalizeToArray(option.parallelAxis);
	  zrUtil.each(axes, function (axisOption) {
	    if (!zrUtil.isObject(axisOption)) {
	      return;
	    }

	    var parallelIndex = axisOption.parallelIndex || 0;
	    var parallelOption = modelUtil.normalizeToArray(option.parallel)[parallelIndex];

	    if (parallelOption && parallelOption.parallelAxisDefault) {
	      zrUtil.merge(axisOption, parallelOption.parallelAxisDefault, false);
	    }
	  });
	}

	module.exports = _default;

/***/ },
/* 410 */
/***/ function(module, exports, __webpack_require__) {

	var Parallel = __webpack_require__(411);

	var CoordinateSystem = __webpack_require__(252);

	/**
	 * Parallel coordinate system creater.
	 */
	function create(ecModel, api) {
	  var coordSysList = [];
	  ecModel.eachComponent('parallel', function (parallelModel, idx) {
	    var coordSys = new Parallel(parallelModel, ecModel, api);
	    coordSys.name = 'parallel_' + idx;
	    coordSys.resize(parallelModel, api);
	    parallelModel.coordinateSystem = coordSys;
	    coordSys.model = parallelModel;
	    coordSysList.push(coordSys);
	  }); // Inject the coordinateSystems into seriesModel

	  ecModel.eachSeries(function (seriesModel) {
	    if (seriesModel.get('coordinateSystem') === 'parallel') {
	      var parallelModel = ecModel.queryComponents({
	        mainType: 'parallel',
	        index: seriesModel.get('parallelIndex'),
	        id: seriesModel.get('parallelId')
	      })[0];
	      seriesModel.coordinateSystem = parallelModel.coordinateSystem;
	    }
	  });
	  return coordSysList;
	}

	CoordinateSystem.register('parallel', {
	  create: create
	});

/***/ },
/* 411 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var matrix = __webpack_require__(175);

	var layoutUtil = __webpack_require__(247);

	var axisHelper = __webpack_require__(268);

	var ParallelAxis = __webpack_require__(412);

	var graphic = __webpack_require__(212);

	var numberUtil = __webpack_require__(205);

	var sliderMove = __webpack_require__(413);

	/**
	 * Parallel Coordinates
	 * <https://en.wikipedia.org/wiki/Parallel_coordinates>
	 */
	var each = zrUtil.each;
	var mathMin = Math.min;
	var mathMax = Math.max;
	var mathFloor = Math.floor;
	var mathCeil = Math.ceil;
	var round = numberUtil.round;
	var PI = Math.PI;

	function Parallel(parallelModel, ecModel, api) {
	  /**
	   * key: dimension
	   * @type {Object.<string, module:echarts/coord/parallel/Axis>}
	   * @private
	   */
	  this._axesMap = zrUtil.createHashMap();
	  /**
	   * key: dimension
	   * value: {position: [], rotation, }
	   * @type {Object.<string, Object>}
	   * @private
	   */

	  this._axesLayout = {};
	  /**
	   * Always follow axis order.
	   * @type {Array.<string>}
	   * @readOnly
	   */

	  this.dimensions = parallelModel.dimensions;
	  /**
	   * @type {module:zrender/core/BoundingRect}
	   */

	  this._rect;
	  /**
	   * @type {module:echarts/coord/parallel/ParallelModel}
	   */

	  this._model = parallelModel;

	  this._init(parallelModel, ecModel, api);
	}

	Parallel.prototype = {
	  type: 'parallel',
	  constructor: Parallel,

	  /**
	   * Initialize cartesian coordinate systems
	   * @private
	   */
	  _init: function (parallelModel, ecModel, api) {
	    var dimensions = parallelModel.dimensions;
	    var parallelAxisIndex = parallelModel.parallelAxisIndex;
	    each(dimensions, function (dim, idx) {
	      var axisIndex = parallelAxisIndex[idx];
	      var axisModel = ecModel.getComponent('parallelAxis', axisIndex);

	      var axis = this._axesMap.set(dim, new ParallelAxis(dim, axisHelper.createScaleByModel(axisModel), [0, 0], axisModel.get('type'), axisIndex));

	      var isCategory = axis.type === 'category';
	      axis.onBand = isCategory && axisModel.get('boundaryGap');
	      axis.inverse = axisModel.get('inverse'); // Injection

	      axisModel.axis = axis;
	      axis.model = axisModel;
	      axis.coordinateSystem = axisModel.coordinateSystem = this;
	    }, this);
	  },

	  /**
	   * Update axis scale after data processed
	   * @param  {module:echarts/model/Global} ecModel
	   * @param  {module:echarts/ExtensionAPI} api
	   */
	  update: function (ecModel, api) {
	    this._updateAxesFromSeries(this._model, ecModel);
	  },

	  /**
	   * @override
	   */
	  containPoint: function (point) {
	    var layoutInfo = this._makeLayoutInfo();

	    var axisBase = layoutInfo.axisBase;
	    var layoutBase = layoutInfo.layoutBase;
	    var pixelDimIndex = layoutInfo.pixelDimIndex;
	    var pAxis = point[1 - pixelDimIndex];
	    var pLayout = point[pixelDimIndex];
	    return pAxis >= axisBase && pAxis <= axisBase + layoutInfo.axisLength && pLayout >= layoutBase && pLayout <= layoutBase + layoutInfo.layoutLength;
	  },
	  getModel: function () {
	    return this._model;
	  },

	  /**
	   * Update properties from series
	   * @private
	   */
	  _updateAxesFromSeries: function (parallelModel, ecModel) {
	    ecModel.eachSeries(function (seriesModel) {
	      if (!parallelModel.contains(seriesModel, ecModel)) {
	        return;
	      }

	      var data = seriesModel.getData();
	      each(this.dimensions, function (dim) {
	        var axis = this._axesMap.get(dim);

	        axis.scale.unionExtentFromData(data, dim);
	        axisHelper.niceScaleExtent(axis.scale, axis.model);
	      }, this);
	    }, this);
	  },

	  /**
	   * Resize the parallel coordinate system.
	   * @param {module:echarts/coord/parallel/ParallelModel} parallelModel
	   * @param {module:echarts/ExtensionAPI} api
	   */
	  resize: function (parallelModel, api) {
	    this._rect = layoutUtil.getLayoutRect(parallelModel.getBoxLayoutParams(), {
	      width: api.getWidth(),
	      height: api.getHeight()
	    });

	    this._layoutAxes();
	  },

	  /**
	   * @return {module:zrender/core/BoundingRect}
	   */
	  getRect: function () {
	    return this._rect;
	  },

	  /**
	   * @private
	   */
	  _makeLayoutInfo: function () {
	    var parallelModel = this._model;
	    var rect = this._rect;
	    var xy = ['x', 'y'];
	    var wh = ['width', 'height'];
	    var layout = parallelModel.get('layout');
	    var pixelDimIndex = layout === 'horizontal' ? 0 : 1;
	    var layoutLength = rect[wh[pixelDimIndex]];
	    var layoutExtent = [0, layoutLength];
	    var axisCount = this.dimensions.length;
	    var axisExpandWidth = restrict(parallelModel.get('axisExpandWidth'), layoutExtent);
	    var axisExpandCount = restrict(parallelModel.get('axisExpandCount') || 0, [0, axisCount]);
	    var axisExpandable = parallelModel.get('axisExpandable') && axisCount > 3 && axisCount > axisExpandCount && axisExpandCount > 1 && axisExpandWidth > 0 && layoutLength > 0; // `axisExpandWindow` is According to the coordinates of [0, axisExpandLength],
	    // for sake of consider the case that axisCollapseWidth is 0 (when screen is narrow),
	    // where collapsed axes should be overlapped.

	    var axisExpandWindow = parallelModel.get('axisExpandWindow');
	    var winSize;

	    if (!axisExpandWindow) {
	      winSize = restrict(axisExpandWidth * (axisExpandCount - 1), layoutExtent);
	      var axisExpandCenter = parallelModel.get('axisExpandCenter') || mathFloor(axisCount / 2);
	      axisExpandWindow = [axisExpandWidth * axisExpandCenter - winSize / 2];
	      axisExpandWindow[1] = axisExpandWindow[0] + winSize;
	    } else {
	      winSize = restrict(axisExpandWindow[1] - axisExpandWindow[0], layoutExtent);
	      axisExpandWindow[1] = axisExpandWindow[0] + winSize;
	    }

	    var axisCollapseWidth = (layoutLength - winSize) / (axisCount - axisExpandCount); // Avoid axisCollapseWidth is too small.

	    axisCollapseWidth < 3 && (axisCollapseWidth = 0); // Find the first and last indices > ewin[0] and < ewin[1].

	    var winInnerIndices = [mathFloor(round(axisExpandWindow[0] / axisExpandWidth, 1)) + 1, mathCeil(round(axisExpandWindow[1] / axisExpandWidth, 1)) - 1]; // Pos in ec coordinates.

	    var axisExpandWindow0Pos = axisCollapseWidth / axisExpandWidth * axisExpandWindow[0];
	    return {
	      layout: layout,
	      pixelDimIndex: pixelDimIndex,
	      layoutBase: rect[xy[pixelDimIndex]],
	      layoutLength: layoutLength,
	      axisBase: rect[xy[1 - pixelDimIndex]],
	      axisLength: rect[wh[1 - pixelDimIndex]],
	      axisExpandable: axisExpandable,
	      axisExpandWidth: axisExpandWidth,
	      axisCollapseWidth: axisCollapseWidth,
	      axisExpandWindow: axisExpandWindow,
	      axisCount: axisCount,
	      winInnerIndices: winInnerIndices,
	      axisExpandWindow0Pos: axisExpandWindow0Pos
	    };
	  },

	  /**
	   * @private
	   */
	  _layoutAxes: function () {
	    var rect = this._rect;
	    var axes = this._axesMap;
	    var dimensions = this.dimensions;

	    var layoutInfo = this._makeLayoutInfo();

	    var layout = layoutInfo.layout;
	    axes.each(function (axis) {
	      var axisExtent = [0, layoutInfo.axisLength];
	      var idx = axis.inverse ? 1 : 0;
	      axis.setExtent(axisExtent[idx], axisExtent[1 - idx]);
	    });
	    each(dimensions, function (dim, idx) {
	      var posInfo = (layoutInfo.axisExpandable ? layoutAxisWithExpand : layoutAxisWithoutExpand)(idx, layoutInfo);
	      var positionTable = {
	        horizontal: {
	          x: posInfo.position,
	          y: layoutInfo.axisLength
	        },
	        vertical: {
	          x: 0,
	          y: posInfo.position
	        }
	      };
	      var rotationTable = {
	        horizontal: PI / 2,
	        vertical: 0
	      };
	      var position = [positionTable[layout].x + rect.x, positionTable[layout].y + rect.y];
	      var rotation = rotationTable[layout];
	      var transform = matrix.create();
	      matrix.rotate(transform, transform, rotation);
	      matrix.translate(transform, transform, position); // TODO
	      // tick等排布信息。
	      // TODO
	      // 根据axis order 更新 dimensions顺序。

	      this._axesLayout[dim] = {
	        position: position,
	        rotation: rotation,
	        transform: transform,
	        axisNameAvailableWidth: posInfo.axisNameAvailableWidth,
	        axisLabelShow: posInfo.axisLabelShow,
	        nameTruncateMaxWidth: posInfo.nameTruncateMaxWidth,
	        tickDirection: 1,
	        labelDirection: 1,
	        labelInterval: axes.get(dim).getLabelInterval()
	      };
	    }, this);
	  },

	  /**
	   * Get axis by dim.
	   * @param {string} dim
	   * @return {module:echarts/coord/parallel/ParallelAxis} [description]
	   */
	  getAxis: function (dim) {
	    return this._axesMap.get(dim);
	  },

	  /**
	   * Convert a dim value of a single item of series data to Point.
	   * @param {*} value
	   * @param {string} dim
	   * @return {Array}
	   */
	  dataToPoint: function (value, dim) {
	    return this.axisCoordToPoint(this._axesMap.get(dim).dataToCoord(value), dim);
	  },

	  /**
	   * Travel data for one time, get activeState of each data item.
	   * @param {module:echarts/data/List} data
	   * @param {Functio} cb param: {string} activeState 'active' or 'inactive' or 'normal'
	   *                            {number} dataIndex
	   * @param {Object} context
	   */
	  eachActiveState: function (data, callback, context) {
	    var dimensions = this.dimensions;
	    var axesMap = this._axesMap;
	    var hasActiveSet = this.hasAxisBrushed();

	    for (var i = 0, len = data.count(); i < len; i++) {
	      var values = data.getValues(dimensions, i);
	      var activeState;

	      if (!hasActiveSet) {
	        activeState = 'normal';
	      } else {
	        activeState = 'active';

	        for (var j = 0, lenj = dimensions.length; j < lenj; j++) {
	          var dimName = dimensions[j];
	          var state = axesMap.get(dimName).model.getActiveState(values[j], j);

	          if (state === 'inactive') {
	            activeState = 'inactive';
	            break;
	          }
	        }
	      }

	      callback.call(context, activeState, i);
	    }
	  },

	  /**
	   * Whether has any activeSet.
	   * @return {boolean}
	   */
	  hasAxisBrushed: function () {
	    var dimensions = this.dimensions;
	    var axesMap = this._axesMap;
	    var hasActiveSet = false;

	    for (var j = 0, lenj = dimensions.length; j < lenj; j++) {
	      if (axesMap.get(dimensions[j]).model.getActiveState() !== 'normal') {
	        hasActiveSet = true;
	      }
	    }

	    return hasActiveSet;
	  },

	  /**
	   * Convert coords of each axis to Point.
	   *  Return point. For example: [10, 20]
	   * @param {Array.<number>} coords
	   * @param {string} dim
	   * @return {Array.<number>}
	   */
	  axisCoordToPoint: function (coord, dim) {
	    var axisLayout = this._axesLayout[dim];
	    return graphic.applyTransform([coord, 0], axisLayout.transform);
	  },

	  /**
	   * Get axis layout.
	   */
	  getAxisLayout: function (dim) {
	    return zrUtil.clone(this._axesLayout[dim]);
	  },

	  /**
	   * @param {Array.<number>} point
	   * @return {Object} {axisExpandWindow, delta, behavior: 'jump' | 'slide' | 'none'}.
	   */
	  getSlidedAxisExpandWindow: function (point) {
	    var layoutInfo = this._makeLayoutInfo();

	    var pixelDimIndex = layoutInfo.pixelDimIndex;
	    var axisExpandWindow = layoutInfo.axisExpandWindow.slice();
	    var winSize = axisExpandWindow[1] - axisExpandWindow[0];
	    var extent = [0, layoutInfo.axisExpandWidth * (layoutInfo.axisCount - 1)]; // Out of the area of coordinate system.

	    if (!this.containPoint(point)) {
	      return {
	        behavior: 'none',
	        axisExpandWindow: axisExpandWindow
	      };
	    } // Conver the point from global to expand coordinates.


	    var pointCoord = point[pixelDimIndex] - layoutInfo.layoutBase - layoutInfo.axisExpandWindow0Pos; // For dragging operation convenience, the window should not be
	    // slided when mouse is the center area of the window.

	    var delta;
	    var behavior = 'slide';
	    var axisCollapseWidth = layoutInfo.axisCollapseWidth;

	    var triggerArea = this._model.get('axisExpandSlideTriggerArea'); // But consider touch device, jump is necessary.


	    var useJump = triggerArea[0] != null;

	    if (axisCollapseWidth) {
	      if (useJump && axisCollapseWidth && pointCoord < winSize * triggerArea[0]) {
	        behavior = 'jump';
	        delta = pointCoord - winSize * triggerArea[2];
	      } else if (useJump && axisCollapseWidth && pointCoord > winSize * (1 - triggerArea[0])) {
	        behavior = 'jump';
	        delta = pointCoord - winSize * (1 - triggerArea[2]);
	      } else {
	        (delta = pointCoord - winSize * triggerArea[1]) >= 0 && (delta = pointCoord - winSize * (1 - triggerArea[1])) <= 0 && (delta = 0);
	      }

	      delta *= layoutInfo.axisExpandWidth / axisCollapseWidth;
	      delta ? sliderMove(delta, axisExpandWindow, extent, 'all') // Avoid nonsense triger on mousemove.
	      : behavior = 'none';
	    } // When screen is too narrow, make it visible and slidable, although it is hard to interact.
	    else {
	        var winSize = axisExpandWindow[1] - axisExpandWindow[0];
	        var pos = extent[1] * pointCoord / winSize;
	        axisExpandWindow = [mathMax(0, pos - winSize / 2)];
	        axisExpandWindow[1] = mathMin(extent[1], axisExpandWindow[0] + winSize);
	        axisExpandWindow[0] = axisExpandWindow[1] - winSize;
	      }

	    return {
	      axisExpandWindow: axisExpandWindow,
	      behavior: behavior
	    };
	  }
	};

	function restrict(len, extent) {
	  return mathMin(mathMax(len, extent[0]), extent[1]);
	}

	function layoutAxisWithoutExpand(axisIndex, layoutInfo) {
	  var step = layoutInfo.layoutLength / (layoutInfo.axisCount - 1);
	  return {
	    position: step * axisIndex,
	    axisNameAvailableWidth: step,
	    axisLabelShow: true
	  };
	}

	function layoutAxisWithExpand(axisIndex, layoutInfo) {
	  var layoutLength = layoutInfo.layoutLength;
	  var axisExpandWidth = layoutInfo.axisExpandWidth;
	  var axisCount = layoutInfo.axisCount;
	  var axisCollapseWidth = layoutInfo.axisCollapseWidth;
	  var winInnerIndices = layoutInfo.winInnerIndices;
	  var position;
	  var axisNameAvailableWidth = axisCollapseWidth;
	  var axisLabelShow = false;
	  var nameTruncateMaxWidth;

	  if (axisIndex < winInnerIndices[0]) {
	    position = axisIndex * axisCollapseWidth;
	    nameTruncateMaxWidth = axisCollapseWidth;
	  } else if (axisIndex <= winInnerIndices[1]) {
	    position = layoutInfo.axisExpandWindow0Pos + axisIndex * axisExpandWidth - layoutInfo.axisExpandWindow[0];
	    axisNameAvailableWidth = axisExpandWidth;
	    axisLabelShow = true;
	  } else {
	    position = layoutLength - (axisCount - 1 - axisIndex) * axisCollapseWidth;
	    nameTruncateMaxWidth = axisCollapseWidth;
	  }

	  return {
	    position: position,
	    axisNameAvailableWidth: axisNameAvailableWidth,
	    axisLabelShow: axisLabelShow,
	    nameTruncateMaxWidth: nameTruncateMaxWidth
	  };
	}

	var _default = Parallel;
	module.exports = _default;

/***/ },
/* 412 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var Axis = __webpack_require__(277);

	/**
	 * @constructor module:echarts/coord/parallel/ParallelAxis
	 * @extends {module:echarts/coord/Axis}
	 * @param {string} dim
	 * @param {*} scale
	 * @param {Array.<number>} coordExtent
	 * @param {string} axisType
	 */
	var ParallelAxis = function (dim, scale, coordExtent, axisType, axisIndex) {
	  Axis.call(this, dim, scale, coordExtent);
	  /**
	   * Axis type
	   *  - 'category'
	   *  - 'value'
	   *  - 'time'
	   *  - 'log'
	   * @type {string}
	   */

	  this.type = axisType || 'value';
	  /**
	   * @type {number}
	   * @readOnly
	   */

	  this.axisIndex = axisIndex;
	};

	ParallelAxis.prototype = {
	  constructor: ParallelAxis,

	  /**
	   * Axis model
	   * @param {module:echarts/coord/parallel/AxisModel}
	   */
	  model: null,

	  /**
	   * @override
	   */
	  isHorizontal: function () {
	    return this.coordinateSystem.getModel().get('layout') !== 'horizontal';
	  }
	};
	zrUtil.inherits(ParallelAxis, Axis);
	var _default = ParallelAxis;
	module.exports = _default;

/***/ },
/* 413 */
/***/ function(module, exports) {

	/**
	 * Calculate slider move result.
	 * Usage:
	 * (1) If both handle0 and handle1 are needed to be moved, set minSpan the same as
	 * maxSpan and the same as `Math.abs(handleEnd[1] - handleEnds[0])`.
	 * (2) If handle0 is forbidden to cross handle1, set minSpan as `0`.
	 *
	 * @param {number} delta Move length.
	 * @param {Array.<number>} handleEnds handleEnds[0] can be bigger then handleEnds[1].
	 *              handleEnds will be modified in this method.
	 * @param {Array.<number>} extent handleEnds is restricted by extent.
	 *              extent[0] should less or equals than extent[1].
	 * @param {number|string} handleIndex Can be 'all', means that both move the two handleEnds,
	 *              where the input minSpan and maxSpan will not work.
	 * @param {number} [minSpan] The range of dataZoom can not be smaller than that.
	 *              If not set, handle0 and cross handle1. If set as a non-negative
	 *              number (including `0`), handles will push each other when reaching
	 *              the minSpan.
	 * @param {number} [maxSpan] The range of dataZoom can not be larger than that.
	 * @return {Array.<number>} The input handleEnds.
	 */
	function _default(delta, handleEnds, extent, handleIndex, minSpan, maxSpan) {
	  // Normalize firstly.
	  handleEnds[0] = restrict(handleEnds[0], extent);
	  handleEnds[1] = restrict(handleEnds[1], extent);
	  delta = delta || 0;
	  var extentSpan = extent[1] - extent[0]; // Notice maxSpan and minSpan can be null/undefined.

	  if (minSpan != null) {
	    minSpan = restrict(minSpan, [0, extentSpan]);
	  }

	  if (maxSpan != null) {
	    maxSpan = Math.max(maxSpan, minSpan != null ? minSpan : 0);
	  }

	  if (handleIndex === 'all') {
	    minSpan = maxSpan = Math.abs(handleEnds[1] - handleEnds[0]);
	    handleIndex = 0;
	  }

	  var originalDistSign = getSpanSign(handleEnds, handleIndex);
	  handleEnds[handleIndex] += delta; // Restrict in extent.

	  var extentMinSpan = minSpan || 0;
	  var realExtent = extent.slice();
	  originalDistSign.sign < 0 ? realExtent[0] += extentMinSpan : realExtent[1] -= extentMinSpan;
	  handleEnds[handleIndex] = restrict(handleEnds[handleIndex], realExtent); // Expand span.

	  var currDistSign = getSpanSign(handleEnds, handleIndex);

	  if (minSpan != null && (currDistSign.sign !== originalDistSign.sign || currDistSign.span < minSpan)) {
	    // If minSpan exists, 'cross' is forbinden.
	    handleEnds[1 - handleIndex] = handleEnds[handleIndex] + originalDistSign.sign * minSpan;
	  } // Shrink span.


	  var currDistSign = getSpanSign(handleEnds, handleIndex);

	  if (maxSpan != null && currDistSign.span > maxSpan) {
	    handleEnds[1 - handleIndex] = handleEnds[handleIndex] + currDistSign.sign * maxSpan;
	  }

	  return handleEnds;
	}

	function getSpanSign(handleEnds, handleIndex) {
	  var dist = handleEnds[handleIndex] - handleEnds[1 - handleIndex]; // If `handleEnds[0] === handleEnds[1]`, always believe that handleEnd[0]
	  // is at left of handleEnds[1] for non-cross case.

	  return {
	    span: Math.abs(dist),
	    sign: dist > 0 ? -1 : dist < 0 ? 1 : handleIndex ? -1 : 1
	  };
	}

	function restrict(value, extend) {
	  return Math.min(extend[1], Math.max(extend[0], value));
	}

	module.exports = _default;

/***/ },
/* 414 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var Component = __webpack_require__(245);

	__webpack_require__(415);

	var _default = Component.extend({
	  type: 'parallel',
	  dependencies: ['parallelAxis'],

	  /**
	   * @type {module:echarts/coord/parallel/Parallel}
	   */
	  coordinateSystem: null,

	  /**
	   * Each item like: 'dim0', 'dim1', 'dim2', ...
	   * @type {Array.<string>}
	   * @readOnly
	   */
	  dimensions: null,

	  /**
	   * Coresponding to dimensions.
	   * @type {Array.<number>}
	   * @readOnly
	   */
	  parallelAxisIndex: null,
	  layoutMode: 'box',
	  defaultOption: {
	    zlevel: 0,
	    z: 0,
	    left: 80,
	    top: 60,
	    right: 80,
	    bottom: 60,
	    // width: {totalWidth} - left - right,
	    // height: {totalHeight} - top - bottom,
	    layout: 'horizontal',
	    // 'horizontal' or 'vertical'
	    // FIXME
	    // naming?
	    axisExpandable: false,
	    axisExpandCenter: null,
	    axisExpandCount: 0,
	    axisExpandWidth: 50,
	    // FIXME '10%' ?
	    axisExpandRate: 17,
	    axisExpandDebounce: 50,
	    // [out, in, jumpTarget]. In percentage. If use [null, 0.05], null means full.
	    // Do not doc to user until necessary.
	    axisExpandSlideTriggerArea: [-0.15, 0.05, 0.4],
	    axisExpandTriggerOn: 'click',
	    // 'mousemove' or 'click'
	    parallelAxisDefault: null
	  },

	  /**
	   * @override
	   */
	  init: function () {
	    Component.prototype.init.apply(this, arguments);
	    this.mergeOption({});
	  },

	  /**
	   * @override
	   */
	  mergeOption: function (newOption) {
	    var thisOption = this.option;
	    newOption && zrUtil.merge(thisOption, newOption, true);

	    this._initDimensions();
	  },

	  /**
	   * Whether series or axis is in this coordinate system.
	   * @param {module:echarts/model/Series|module:echarts/coord/parallel/AxisModel} model
	   * @param {module:echarts/model/Global} ecModel
	   */
	  contains: function (model, ecModel) {
	    var parallelIndex = model.get('parallelIndex');
	    return parallelIndex != null && ecModel.getComponent('parallel', parallelIndex) === this;
	  },
	  setAxisExpand: function (opt) {
	    zrUtil.each(['axisExpandable', 'axisExpandCenter', 'axisExpandCount', 'axisExpandWidth', 'axisExpandWindow'], function (name) {
	      if (opt.hasOwnProperty(name)) {
	        this.option[name] = opt[name];
	      }
	    }, this);
	  },

	  /**
	   * @private
	   */
	  _initDimensions: function () {
	    var dimensions = this.dimensions = [];
	    var parallelAxisIndex = this.parallelAxisIndex = [];
	    var axisModels = zrUtil.filter(this.dependentModels.parallelAxis, function (axisModel) {
	      // Can not use this.contains here, because
	      // initialization has not been completed yet.
	      return (axisModel.get('parallelIndex') || 0) === this.componentIndex;
	    }, this);
	    zrUtil.each(axisModels, function (axisModel) {
	      dimensions.push('dim' + axisModel.get('dim'));
	      parallelAxisIndex.push(axisModel.componentIndex);
	    });
	  }
	});

	module.exports = _default;

/***/ },
/* 415 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var ComponentModel = __webpack_require__(245);

	var makeStyleMapper = __webpack_require__(209);

	var axisModelCreator = __webpack_require__(299);

	var numberUtil = __webpack_require__(205);

	var axisModelCommonMixin = __webpack_require__(275);

	var AxisModel = ComponentModel.extend({
	  type: 'baseParallelAxis',

	  /**
	   * @type {module:echarts/coord/parallel/Axis}
	   */
	  axis: null,

	  /**
	   * @type {Array.<Array.<number>}
	   * @readOnly
	   */
	  activeIntervals: [],

	  /**
	   * @return {Object}
	   */
	  getAreaSelectStyle: function () {
	    return makeStyleMapper([['fill', 'color'], ['lineWidth', 'borderWidth'], ['stroke', 'borderColor'], ['width', 'width'], ['opacity', 'opacity']])(this.getModel('areaSelectStyle'));
	  },

	  /**
	   * The code of this feature is put on AxisModel but not ParallelAxis,
	   * because axisModel can be alive after echarts updating but instance of
	   * ParallelAxis having been disposed. this._activeInterval should be kept
	   * when action dispatched (i.e. legend click).
	   *
	   * @param {Array.<Array<number>>} intervals interval.length === 0
	   *                                          means set all active.
	   * @public
	   */
	  setActiveIntervals: function (intervals) {
	    var activeIntervals = this.activeIntervals = zrUtil.clone(intervals); // Normalize

	    if (activeIntervals) {
	      for (var i = activeIntervals.length - 1; i >= 0; i--) {
	        numberUtil.asc(activeIntervals[i]);
	      }
	    }
	  },

	  /**
	   * @param {number|string} [value] When attempting to detect 'no activeIntervals set',
	   *                         value can not be input.
	   * @return {string} 'normal': no activeIntervals set,
	   *                  'active',
	   *                  'inactive'.
	   * @public
	   */
	  getActiveState: function (value) {
	    var activeIntervals = this.activeIntervals;

	    if (!activeIntervals.length) {
	      return 'normal';
	    }

	    if (value == null) {
	      return 'inactive';
	    }

	    for (var i = 0, len = activeIntervals.length; i < len; i++) {
	      if (activeIntervals[i][0] <= value && value <= activeIntervals[i][1]) {
	        return 'active';
	      }
	    }

	    return 'inactive';
	  }
	});
	var defaultOption = {
	  type: 'value',

	  /**
	   * @type {Array.<number>}
	   */
	  dim: null,
	  // 0, 1, 2, ...
	  // parallelIndex: null,
	  areaSelectStyle: {
	    width: 20,
	    borderWidth: 1,
	    borderColor: 'rgba(160,197,232)',
	    color: 'rgba(160,197,232)',
	    opacity: 0.3
	  },
	  realtime: true,
	  // Whether realtime update view when select.
	  z: 10
	};
	zrUtil.merge(AxisModel.prototype, axisModelCommonMixin);

	function getAxisType(axisName, option) {
	  return option.type || (option.data ? 'category' : 'value');
	}

	axisModelCreator('parallel', AxisModel, getAxisType, defaultOption);
	var _default = AxisModel;
	module.exports = _default;

/***/ },
/* 416 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(410);

	__webpack_require__(417);

	__webpack_require__(418);

/***/ },
/* 417 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	/**
	 * @payload
	 * @property {string} parallelAxisId
	 * @property {Array.<Array.<number>>} intervals
	 */
	var actionInfo = {
	  type: 'axisAreaSelect',
	  event: 'axisAreaSelected',
	  update: 'updateVisual'
	};
	echarts.registerAction(actionInfo, function (payload, ecModel) {
	  ecModel.eachComponent({
	    mainType: 'parallelAxis',
	    query: payload
	  }, function (parallelAxisModel) {
	    parallelAxisModel.axis.model.setActiveIntervals(payload.intervals);
	  });
	});
	/**
	 * @payload
	 */

	echarts.registerAction('parallelAxisExpand', function (payload, ecModel) {
	  ecModel.eachComponent({
	    mainType: 'parallel',
	    query: payload
	  }, function (parallelModel) {
	    parallelModel.setAxisExpand(payload);
	  });
	});

/***/ },
/* 418 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var zrUtil = __webpack_require__(166);

	var AxisBuilder = __webpack_require__(303);

	var BrushController = __webpack_require__(419);

	var brushHelper = __webpack_require__(420);

	var graphic = __webpack_require__(212);

	var elementList = ['axisLine', 'axisTickLabel', 'axisName'];
	var AxisView = echarts.extendComponentView({
	  type: 'parallelAxis',

	  /**
	   * @override
	   */
	  init: function (ecModel, api) {
	    AxisView.superApply(this, 'init', arguments);
	    /**
	     * @type {module:echarts/component/helper/BrushController}
	     */

	    (this._brushController = new BrushController(api.getZr())).on('brush', zrUtil.bind(this._onBrush, this));
	  },

	  /**
	   * @override
	   */
	  render: function (axisModel, ecModel, api, payload) {
	    if (fromAxisAreaSelect(axisModel, ecModel, payload)) {
	      return;
	    }

	    this.axisModel = axisModel;
	    this.api = api;
	    this.group.removeAll();
	    var oldAxisGroup = this._axisGroup;
	    this._axisGroup = new graphic.Group();
	    this.group.add(this._axisGroup);

	    if (!axisModel.get('show')) {
	      return;
	    }

	    var coordSysModel = getCoordSysModel(axisModel, ecModel);
	    var coordSys = coordSysModel.coordinateSystem;
	    var areaSelectStyle = axisModel.getAreaSelectStyle();
	    var areaWidth = areaSelectStyle.width;
	    var dim = axisModel.axis.dim;
	    var axisLayout = coordSys.getAxisLayout(dim);
	    var builderOpt = zrUtil.extend({
	      strokeContainThreshold: areaWidth
	    }, axisLayout);
	    var axisBuilder = new AxisBuilder(axisModel, builderOpt);
	    zrUtil.each(elementList, axisBuilder.add, axisBuilder);

	    this._axisGroup.add(axisBuilder.getGroup());

	    this._refreshBrushController(builderOpt, areaSelectStyle, axisModel, coordSysModel, areaWidth, api);

	    var animationModel = payload && payload.animation === false ? null : axisModel;
	    graphic.groupTransition(oldAxisGroup, this._axisGroup, animationModel);
	  },

	  /**
	   * @override
	   */
	  updateVisual: function (axisModel, ecModel, api, payload) {
	    this._brushController && this._brushController.updateCovers(getCoverInfoList(axisModel));
	  },
	  _refreshBrushController: function (builderOpt, areaSelectStyle, axisModel, coordSysModel, areaWidth, api) {
	    // After filtering, axis may change, select area needs to be update.
	    var extent = axisModel.axis.getExtent();
	    var extentLen = extent[1] - extent[0];
	    var extra = Math.min(30, Math.abs(extentLen) * 0.1); // Arbitrary value.
	    // width/height might be negative, which will be
	    // normalized in BoundingRect.

	    var rect = graphic.BoundingRect.create({
	      x: extent[0],
	      y: -areaWidth / 2,
	      width: extentLen,
	      height: areaWidth
	    });
	    rect.x -= extra;
	    rect.width += 2 * extra;

	    this._brushController.mount({
	      enableGlobalPan: true,
	      rotation: builderOpt.rotation,
	      position: builderOpt.position
	    }).setPanels([{
	      panelId: 'pl',
	      clipPath: brushHelper.makeRectPanelClipPath(rect),
	      isTargetByCursor: brushHelper.makeRectIsTargetByCursor(rect, api, coordSysModel),
	      getLinearBrushOtherExtent: brushHelper.makeLinearBrushOtherExtent(rect, 0)
	    }]).enableBrush({
	      brushType: 'lineX',
	      brushStyle: areaSelectStyle,
	      removeOnClick: true
	    }).updateCovers(getCoverInfoList(axisModel));
	  },
	  _onBrush: function (coverInfoList, opt) {
	    // Do not cache these object, because the mey be changed.
	    var axisModel = this.axisModel;
	    var axis = axisModel.axis;
	    var intervals = zrUtil.map(coverInfoList, function (coverInfo) {
	      return [axis.coordToData(coverInfo.range[0], true), axis.coordToData(coverInfo.range[1], true)];
	    }); // If realtime is true, action is not dispatched on drag end, because
	    // the drag end emits the same params with the last drag move event,
	    // and may have some delay when using touch pad.

	    if (!axisModel.option.realtime === opt.isEnd || opt.removeOnClick) {
	      // jshint ignore:line
	      this.api.dispatchAction({
	        type: 'axisAreaSelect',
	        parallelAxisId: axisModel.id,
	        intervals: intervals
	      });
	    }
	  },

	  /**
	   * @override
	   */
	  dispose: function () {
	    this._brushController.dispose();
	  }
	});

	function fromAxisAreaSelect(axisModel, ecModel, payload) {
	  return payload && payload.type === 'axisAreaSelect' && ecModel.findComponents({
	    mainType: 'parallelAxis',
	    query: payload
	  })[0] === axisModel;
	}

	function getCoverInfoList(axisModel) {
	  var axis = axisModel.axis;
	  return zrUtil.map(axisModel.activeIntervals, function (interval) {
	    return {
	      brushType: 'lineX',
	      panelId: 'pl',
	      range: [axis.dataToCoord(interval[0], true), axis.dataToCoord(interval[1], true)]
	    };
	  });
	}

	function getCoordSysModel(axisModel, ecModel) {
	  return ecModel.getComponent('parallel', axisModel.get('parallelIndex'));
	}

	var _default = AxisView;
	module.exports = _default;

/***/ },
/* 419 */
/***/ function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(162);

	var __DEV__ = _config.__DEV__;

	var zrUtil = __webpack_require__(166);

	var Eventful = __webpack_require__(170);

	var graphic = __webpack_require__(212);

	var interactionMutex = __webpack_require__(349);

	var DataDiffer = __webpack_require__(266);

	var curry = zrUtil.curry;
	var each = zrUtil.each;
	var map = zrUtil.map;
	var mathMin = Math.min;
	var mathMax = Math.max;
	var mathPow = Math.pow;
	var COVER_Z = 10000;
	var UNSELECT_THRESHOLD = 6;
	var MIN_RESIZE_LINE_WIDTH = 6;
	var MUTEX_RESOURCE_KEY = 'globalPan';
	var DIRECTION_MAP = {
	  w: [0, 0],
	  e: [0, 1],
	  n: [1, 0],
	  s: [1, 1]
	};
	var CURSOR_MAP = {
	  w: 'ew',
	  e: 'ew',
	  n: 'ns',
	  s: 'ns',
	  ne: 'nesw',
	  sw: 'nesw',
	  nw: 'nwse',
	  se: 'nwse'
	};
	var DEFAULT_BRUSH_OPT = {
	  brushStyle: {
	    lineWidth: 2,
	    stroke: 'rgba(0,0,0,0.3)',
	    fill: 'rgba(0,0,0,0.1)'
	  },
	  transformable: true,
	  brushMode: 'single',
	  removeOnClick: false
	};
	var baseUID = 0;
	/**
	 * @alias module:echarts/component/helper/BrushController
	 * @constructor
	 * @mixin {module:zrender/mixin/Eventful}
	 * @event module:echarts/component/helper/BrushController#brush
	 *        params:
	 *            areas: Array.<Array>, coord relates to container group,
	 *                                    If no container specified, to global.
	 *            opt {
	 *                isEnd: boolean,
	 *                removeOnClick: boolean
	 *            }
	 *
	 * @param {module:zrender/zrender~ZRender} zr
	 */

	function BrushController(zr) {
	  Eventful.call(this);
	  /**
	   * @type {module:zrender/zrender~ZRender}
	   * @private
	   */

	  this._zr = zr;
	  /**
	   * @type {module:zrender/container/Group}
	   * @readOnly
	   */

	  this.group = new graphic.Group();
	  /**
	   * Only for drawing (after enabledBrush).
	   *     'line', 'rect', 'polygon' or false
	   *     If passing false/null/undefined, disable brush.
	   *     If passing 'auto', determined by panel.defaultBrushType
	   * @private
	   * @type {string}
	   */

	  this._brushType;
	  /**
	   * Only for drawing (after enabledBrush).
	   *
	   * @private
	   * @type {Object}
	   */

	  this._brushOption;
	  /**
	   * @private
	   * @type {Object}
	   */

	  this._panels;
	  /**
	   * @private
	   * @type {Array.<nubmer>}
	   */

	  this._track = [];
	  /**
	   * @private
	   * @type {boolean}
	   */

	  this._dragging;
	  /**
	   * @private
	   * @type {Array}
	   */

	  this._covers = [];
	  /**
	   * @private
	   * @type {moudule:zrender/container/Group}
	   */

	  this._creatingCover;
	  /**
	   * `true` means global panel
	   * @private
	   * @type {module:zrender/container/Group|boolean}
	   */

	  this._creatingPanel;
	  /**
	   * @private
	   * @type {boolean}
	   */

	  this._enableGlobalPan;
	  /**
	   * @private
	   * @type {boolean}
	   */

	  /**
	   * @private
	   * @type {string}
	   */
	  this._uid = 'brushController_' + baseUID++;
	  /**
	   * @private
	   * @type {Object}
	   */

	  this._handlers = {};
	  each(mouseHandlers, function (handler, eventName) {
	    this._handlers[eventName] = zrUtil.bind(handler, this);
	  }, this);
	}

	BrushController.prototype = {
	  constructor: BrushController,

	  /**
	   * If set to null/undefined/false, select disabled.
	   * @param {Object} brushOption
	   * @param {string|boolean} brushOption.brushType 'line', 'rect', 'polygon' or false
	   *                          If passing false/null/undefined, disable brush.
	   *                          If passing 'auto', determined by panel.defaultBrushType.
	   *                              ('auto' can not be used in global panel)
	   * @param {number} [brushOption.brushMode='single'] 'single' or 'multiple'
	   * @param {boolean} [brushOption.transformable=true]
	   * @param {boolean} [brushOption.removeOnClick=false]
	   * @param {Object} [brushOption.brushStyle]
	   * @param {number} [brushOption.brushStyle.width]
	   * @param {number} [brushOption.brushStyle.lineWidth]
	   * @param {string} [brushOption.brushStyle.stroke]
	   * @param {string} [brushOption.brushStyle.fill]
	   * @param {number} [brushOption.z]
	   */
	  enableBrush: function (brushOption) {
	    this._brushType && doDisableBrush(this);
	    brushOption.brushType && doEnableBrush(this, brushOption);
	    return this;
	  },

	  /**
	   * @param {Array.<Object>} panelOpts If not pass, it is global brush.
	   *        Each items: {
	   *            panelId, // mandatory.
	   *            clipPath, // mandatory. function.
	   *            isTargetByCursor, // mandatory. function.
	   *            defaultBrushType, // optional, only used when brushType is 'auto'.
	   *            getLinearBrushOtherExtent, // optional. function.
	   *        }
	   */
	  setPanels: function (panelOpts) {
	    if (panelOpts && panelOpts.length) {
	      var panels = this._panels = {};
	      zrUtil.each(panelOpts, function (panelOpts) {
	        panels[panelOpts.panelId] = zrUtil.clone(panelOpts);
	      });
	    } else {
	      this._panels = null;
	    }

	    return this;
	  },

	  /**
	   * @param {Object} [opt]
	   * @return {boolean} [opt.enableGlobalPan=false]
	   */
	  mount: function (opt) {
	    opt = opt || {};
	    this._enableGlobalPan = opt.enableGlobalPan;
	    var thisGroup = this.group;

	    this._zr.add(thisGroup);

	    thisGroup.attr({
	      position: opt.position || [0, 0],
	      rotation: opt.rotation || 0,
	      scale: opt.scale || [1, 1]
	    });
	    this._transform = thisGroup.getLocalTransform();
	    return this;
	  },
	  eachCover: function (cb, context) {
	    each(this._covers, cb, context);
	  },

	  /**
	   * Update covers.
	   * @param {Array.<Object>} brushOptionList Like:
	   *        [
	   *            {id: 'xx', brushType: 'line', range: [23, 44], brushStyle, transformable},
	   *            {id: 'yy', brushType: 'rect', range: [[23, 44], [23, 54]]},
	   *            ...
	   *        ]
	   *        `brushType` is required in each cover info. (can not be 'auto')
	   *        `id` is not mandatory.
	   *        `brushStyle`, `transformable` is not mandatory, use DEFAULT_BRUSH_OPT by default.
	   *        If brushOptionList is null/undefined, all covers removed.
	   */
	  updateCovers: function (brushOptionList) {
	    brushOptionList = zrUtil.map(brushOptionList, function (brushOption) {
	      return zrUtil.merge(zrUtil.clone(DEFAULT_BRUSH_OPT), brushOption, true);
	    });
	    var tmpIdPrefix = '\0-brush-index-';
	    var oldCovers = this._covers;
	    var newCovers = this._covers = [];
	    var controller = this;
	    var creatingCover = this._creatingCover;
	    new DataDiffer(oldCovers, brushOptionList, oldGetKey, getKey).add(addOrUpdate).update(addOrUpdate).remove(remove).execute();
	    return this;

	    function getKey(brushOption, index) {
	      return (brushOption.id != null ? brushOption.id : tmpIdPrefix + index) + '-' + brushOption.brushType;
	    }

	    function oldGetKey(cover, index) {
	      return getKey(cover.__brushOption, index);
	    }

	    function addOrUpdate(newIndex, oldIndex) {
	      var newBrushOption = brushOptionList[newIndex]; // Consider setOption in event listener of brushSelect,
	      // where updating cover when creating should be forbiden.

	      if (oldIndex != null && oldCovers[oldIndex] === creatingCover) {
	        newCovers[newIndex] = oldCovers[oldIndex];
	      } else {
	        var cover = newCovers[newIndex] = oldIndex != null ? (oldCovers[oldIndex].__brushOption = newBrushOption, oldCovers[oldIndex]) : endCreating(controller, createCover(controller, newBrushOption));
	        updateCoverAfterCreation(controller, cover);
	      }
	    }

	    function remove(oldIndex) {
	      if (oldCovers[oldIndex] !== creatingCover) {
	        controller.group.remove(oldCovers[oldIndex]);
	      }
	    }
	  },
	  unmount: function () {
	    this.enableBrush(false); // container may 'removeAll' outside.

	    clearCovers(this);

	    this._zr.remove(this.group);

	    return this;
	  },
	  dispose: function () {
	    this.unmount();
	    this.off();
	  }
	};
	zrUtil.mixin(BrushController, Eventful);

	function doEnableBrush(controller, brushOption) {
	  var zr = controller._zr; // Consider roam, which takes globalPan too.

	  if (!controller._enableGlobalPan) {
	    interactionMutex.take(zr, MUTEX_RESOURCE_KEY, controller._uid);
	  }

	  each(controller._handlers, function (handler, eventName) {
	    zr.on(eventName, handler);
	  });
	  controller._brushType = brushOption.brushType;
	  controller._brushOption = zrUtil.merge(zrUtil.clone(DEFAULT_BRUSH_OPT), brushOption, true);
	}

	function doDisableBrush(controller) {
	  var zr = controller._zr;
	  interactionMutex.release(zr, MUTEX_RESOURCE_KEY, controller._uid);
	  each(controller._handlers, function (handler, eventName) {
	    zr.off(eventName, handler);
	  });
	  controller._brushType = controller._brushOption = null;
	}

	function createCover(controller, brushOption) {
	  var cover = coverRenderers[brushOption.brushType].createCover(controller, brushOption);
	  cover.__brushOption = brushOption;
	  updateZ(cover, brushOption);
	  controller.group.add(cover);
	  return cover;
	}

	function endCreating(controller, creatingCover) {
	  var coverRenderer = getCoverRenderer(creatingCover);

	  if (coverRenderer.endCreating) {
	    coverRenderer.endCreating(controller, creatingCover);
	    updateZ(creatingCover, creatingCover.__brushOption);
	  }

	  return creatingCover;
	}

	function updateCoverShape(controller, cover) {
	  var brushOption = cover.__brushOption;
	  getCoverRenderer(cover).updateCoverShape(controller, cover, brushOption.range, brushOption);
	}

	function updateZ(cover, brushOption) {
	  var z = brushOption.z;
	  z == null && (z = COVER_Z);
	  cover.traverse(function (el) {
	    el.z = z;
	    el.z2 = z; // Consider in given container.
	  });
	}

	function updateCoverAfterCreation(controller, cover) {
	  getCoverRenderer(cover).updateCommon(controller, cover);
	  updateCoverShape(controller, cover);
	}

	function getCoverRenderer(cover) {
	  return coverRenderers[cover.__brushOption.brushType];
	} // return target panel or `true` (means global panel)


	function getPanelByPoint(controller, e, localCursorPoint) {
	  var panels = controller._panels;

	  if (!panels) {
	    return true; // Global panel
	  }

	  var panel;
	  var transform = controller._transform;
	  each(panels, function (pn) {
	    pn.isTargetByCursor(e, localCursorPoint, transform) && (panel = pn);
	  });
	  return panel;
	} // Return a panel or true


	function getPanelByCover(controller, cover) {
	  var panels = controller._panels;

	  if (!panels) {
	    return true; // Global panel
	  }

	  var panelId = cover.__brushOption.panelId; // User may give cover without coord sys info,
	  // which is then treated as global panel.

	  return panelId != null ? panels[panelId] : true;
	}

	function clearCovers(controller) {
	  var covers = controller._covers;
	  var originalLength = covers.length;
	  each(covers, function (cover) {
	    controller.group.remove(cover);
	  }, controller);
	  covers.length = 0;
	  return !!originalLength;
	}

	function trigger(controller, opt) {
	  var areas = map(controller._covers, function (cover) {
	    var brushOption = cover.__brushOption;
	    var range = zrUtil.clone(brushOption.range);
	    return {
	      brushType: brushOption.brushType,
	      panelId: brushOption.panelId,
	      range: range
	    };
	  });
	  controller.trigger('brush', areas, {
	    isEnd: !!opt.isEnd,
	    removeOnClick: !!opt.removeOnClick
	  });
	}

	function shouldShowCover(controller) {
	  var track = controller._track;

	  if (!track.length) {
	    return false;
	  }

	  var p2 = track[track.length - 1];
	  var p1 = track[0];
	  var dx = p2[0] - p1[0];
	  var dy = p2[1] - p1[1];
	  var dist = mathPow(dx * dx + dy * dy, 0.5);
	  return dist > UNSELECT_THRESHOLD;
	}

	function getTrackEnds(track) {
	  var tail = track.length - 1;
	  tail < 0 && (tail = 0);
	  return [track[0], track[tail]];
	}

	function createBaseRectCover(doDrift, controller, brushOption, edgeNames) {
	  var cover = new graphic.Group();
	  cover.add(new graphic.Rect({
	    name: 'main',
	    style: makeStyle(brushOption),
	    silent: true,
	    draggable: true,
	    cursor: 'move',
	    drift: curry(doDrift, controller, cover, 'nswe'),
	    ondragend: curry(trigger, controller, {
	      isEnd: true
	    })
	  }));
	  each(edgeNames, function (name) {
	    cover.add(new graphic.Rect({
	      name: name,
	      style: {
	        opacity: 0
	      },
	      draggable: true,
	      silent: true,
	      invisible: true,
	      drift: curry(doDrift, controller, cover, name),
	      ondragend: curry(trigger, controller, {
	        isEnd: true
	      })
	    }));
	  });
	  return cover;
	}

	function updateBaseRect(controller, cover, localRange, brushOption) {
	  var lineWidth = brushOption.brushStyle.lineWidth || 0;
	  var handleSize = mathMax(lineWidth, MIN_RESIZE_LINE_WIDTH);
	  var x = localRange[0][0];
	  var y = localRange[1][0];
	  var xa = x - lineWidth / 2;
	  var ya = y - lineWidth / 2;
	  var x2 = localRange[0][1];
	  var y2 = localRange[1][1];
	  var x2a = x2 - handleSize + lineWidth / 2;
	  var y2a = y2 - handleSize + lineWidth / 2;
	  var width = x2 - x;
	  var height = y2 - y;
	  var widtha = width + lineWidth;
	  var heighta = height + lineWidth;
	  updateRectShape(controller, cover, 'main', x, y, width, height);

	  if (brushOption.transformable) {
	    updateRectShape(controller, cover, 'w', xa, ya, handleSize, heighta);
	    updateRectShape(controller, cover, 'e', x2a, ya, handleSize, heighta);
	    updateRectShape(controller, cover, 'n', xa, ya, widtha, handleSize);
	    updateRectShape(controller, cover, 's', xa, y2a, widtha, handleSize);
	    updateRectShape(controller, cover, 'nw', xa, ya, handleSize, handleSize);
	    updateRectShape(controller, cover, 'ne', x2a, ya, handleSize, handleSize);
	    updateRectShape(controller, cover, 'sw', xa, y2a, handleSize, handleSize);
	    updateRectShape(controller, cover, 'se', x2a, y2a, handleSize, handleSize);
	  }
	}

	function updateCommon(controller, cover) {
	  var brushOption = cover.__brushOption;
	  var transformable = brushOption.transformable;
	  var mainEl = cover.childAt(0);
	  mainEl.useStyle(makeStyle(brushOption));
	  mainEl.attr({
	    silent: !transformable,
	    cursor: transformable ? 'move' : 'default'
	  });
	  each(['w', 'e', 'n', 's', 'se', 'sw', 'ne', 'nw'], function (name) {
	    var el = cover.childOfName(name);
	    var globalDir = getGlobalDirection(controller, name);
	    el && el.attr({
	      silent: !transformable,
	      invisible: !transformable,
	      cursor: transformable ? CURSOR_MAP[globalDir] + '-resize' : null
	    });
	  });
	}

	function updateRectShape(controller, cover, name, x, y, w, h) {
	  var el = cover.childOfName(name);
	  el && el.setShape(pointsToRect(clipByPanel(controller, cover, [[x, y], [x + w, y + h]])));
	}

	function makeStyle(brushOption) {
	  return zrUtil.defaults({
	    strokeNoScale: true
	  }, brushOption.brushStyle);
	}

	function formatRectRange(x, y, x2, y2) {
	  var min = [mathMin(x, x2), mathMin(y, y2)];
	  var max = [mathMax(x, x2), mathMax(y, y2)];
	  return [[min[0], max[0]], // x range
	  [min[1], max[1]] // y range
	  ];
	}

	function getTransform(controller) {
	  return graphic.getTransform(controller.group);
	}

	function getGlobalDirection(controller, localDirection) {
	  if (localDirection.length > 1) {
	    localDirection = localDirection.split('');
	    var globalDir = [getGlobalDirection(controller, localDirection[0]), getGlobalDirection(controller, localDirection[1])];
	    (globalDir[0] === 'e' || globalDir[0] === 'w') && globalDir.reverse();
	    return globalDir.join('');
	  } else {
	    var map = {
	      w: 'left',
	      e: 'right',
	      n: 'top',
	      s: 'bottom'
	    };
	    var inverseMap = {
	      left: 'w',
	      right: 'e',
	      top: 'n',
	      bottom: 's'
	    };
	    var globalDir = graphic.transformDirection(map[localDirection], getTransform(controller));
	    return inverseMap[globalDir];
	  }
	}

	function driftRect(toRectRange, fromRectRange, controller, cover, name, dx, dy, e) {
	  var brushOption = cover.__brushOption;
	  var rectRange = toRectRange(brushOption.range);
	  var localDelta = toLocalDelta(controller, dx, dy);
	  each(name.split(''), function (namePart) {
	    var ind = DIRECTION_MAP[namePart];
	    rectRange[ind[0]][ind[1]] += localDelta[ind[0]];
	  });
	  brushOption.range = fromRectRange(formatRectRange(rectRange[0][0], rectRange[1][0], rectRange[0][1], rectRange[1][1]));
	  updateCoverAfterCreation(controller, cover);
	  trigger(controller, {
	    isEnd: false
	  });
	}

	function driftPolygon(controller, cover, dx, dy, e) {
	  var range = cover.__brushOption.range;
	  var localDelta = toLocalDelta(controller, dx, dy);
	  each(range, function (point) {
	    point[0] += localDelta[0];
	    point[1] += localDelta[1];
	  });
	  updateCoverAfterCreation(controller, cover);
	  trigger(controller, {
	    isEnd: false
	  });
	}

	function toLocalDelta(controller, dx, dy) {
	  var thisGroup = controller.group;
	  var localD = thisGroup.transformCoordToLocal(dx, dy);
	  var localZero = thisGroup.transformCoordToLocal(0, 0);
	  return [localD[0] - localZero[0], localD[1] - localZero[1]];
	}

	function clipByPanel(controller, cover, data) {
	  var panel = getPanelByCover(controller, cover);
	  return panel && panel !== true ? panel.clipPath(data, controller._transform) : zrUtil.clone(data);
	}

	function pointsToRect(points) {
	  var xmin = mathMin(points[0][0], points[1][0]);
	  var ymin = mathMin(points[0][1], points[1][1]);
	  var xmax = mathMax(points[0][0], points[1][0]);
	  var ymax = mathMax(points[0][1], points[1][1]);
	  return {
	    x: xmin,
	    y: ymin,
	    width: xmax - xmin,
	    height: ymax - ymin
	  };
	}

	function resetCursor(controller, e, localCursorPoint) {
	  // Check active
	  if (!controller._brushType) {
	    return;
	  }

	  var zr = controller._zr;
	  var covers = controller._covers;
	  var currPanel = getPanelByPoint(controller, e, localCursorPoint); // Check whether in covers.

	  if (!controller._dragging) {
	    for (var i = 0; i < covers.length; i++) {
	      var brushOption = covers[i].__brushOption;

	      if (currPanel && (currPanel === true || brushOption.panelId === currPanel.panelId) && coverRenderers[brushOption.brushType].contain(covers[i], localCursorPoint[0], localCursorPoint[1])) {
	        // Use cursor style set on cover.
	        return;
	      }
	    }
	  }

	  currPanel && zr.setCursorStyle('crosshair');
	}

	function preventDefault(e) {
	  var rawE = e.event;
	  rawE.preventDefault && rawE.preventDefault();
	}

	function mainShapeContain(cover, x, y) {
	  return cover.childOfName('main').contain(x, y);
	}

	function updateCoverByMouse(controller, e, localCursorPoint, isEnd) {
	  var creatingCover = controller._creatingCover;
	  var panel = controller._creatingPanel;
	  var thisBrushOption = controller._brushOption;
	  var eventParams;

	  controller._track.push(localCursorPoint.slice());

	  if (shouldShowCover(controller) || creatingCover) {
	    if (panel && !creatingCover) {
	      thisBrushOption.brushMode === 'single' && clearCovers(controller);
	      var brushOption = zrUtil.clone(thisBrushOption);
	      brushOption.brushType = determineBrushType(brushOption.brushType, panel);
	      brushOption.panelId = panel === true ? null : panel.panelId;
	      creatingCover = controller._creatingCover = createCover(controller, brushOption);

	      controller._covers.push(creatingCover);
	    }

	    if (creatingCover) {
	      var coverRenderer = coverRenderers[determineBrushType(controller._brushType, panel)];
	      var coverBrushOption = creatingCover.__brushOption;
	      coverBrushOption.range = coverRenderer.getCreatingRange(clipByPanel(controller, creatingCover, controller._track));

	      if (isEnd) {
	        endCreating(controller, creatingCover);
	        coverRenderer.updateCommon(controller, creatingCover);
	      }

	      updateCoverShape(controller, creatingCover);
	      eventParams = {
	        isEnd: isEnd
	      };
	    }
	  } else if (isEnd && thisBrushOption.brushMode === 'single' && thisBrushOption.removeOnClick) {
	    // Help user to remove covers easily, only by a tiny drag, in 'single' mode.
	    // But a single click do not clear covers, because user may have casual
	    // clicks (for example, click on other component and do not expect covers
	    // disappear).
	    // Only some cover removed, trigger action, but not every click trigger action.
	    if (getPanelByPoint(controller, e, localCursorPoint) && clearCovers(controller)) {
	      eventParams = {
	        isEnd: isEnd,
	        removeOnClick: true
	      };
	    }
	  }

	  return eventParams;
	}

	function determineBrushType(brushType, panel) {
	  if (brushType === 'auto') {
	    return panel.defaultBrushType;
	  }

	  return brushType;
	}

	var mouseHandlers = {
	  mousedown: function (e) {
	    if (this._dragging) {
	      // In case some browser do not support globalOut,
	      // and release mose out side the browser.
	      handleDragEnd.call(this, e);
	    } else if (!e.target || !e.target.draggable) {
	      preventDefault(e);
	      var localCursorPoint = this.group.transformCoordToLocal(e.offsetX, e.offsetY);
	      this._creatingCover = null;
	      var panel = this._creatingPanel = getPanelByPoint(this, e, localCursorPoint);

	      if (panel) {
	        this._dragging = true;
	        this._track = [localCursorPoint.slice()];
	      }
	    }
	  },
	  mousemove: function (e) {
	    var localCursorPoint = this.group.transformCoordToLocal(e.offsetX, e.offsetY);
	    resetCursor(this, e, localCursorPoint);

	    if (this._dragging) {
	      preventDefault(e);
	      var eventParams = updateCoverByMouse(this, e, localCursorPoint, false);
	      eventParams && trigger(this, eventParams);
	    }
	  },
	  mouseup: handleDragEnd //,
	  // FIXME
	  // in tooltip, globalout should not be triggered.
	  // globalout: handleDragEnd

	};

	function handleDragEnd(e) {
	  if (this._dragging) {
	    preventDefault(e);
	    var localCursorPoint = this.group.transformCoordToLocal(e.offsetX, e.offsetY);
	    var eventParams = updateCoverByMouse(this, e, localCursorPoint, true);
	    this._dragging = false;
	    this._track = [];
	    this._creatingCover = null; // trigger event shoule be at final, after procedure will be nested.

	    eventParams && trigger(this, eventParams);
	  }
	}
	/**
	 * key: brushType
	 * @type {Object}
	 */


	var coverRenderers = {
	  lineX: getLineRenderer(0),
	  lineY: getLineRenderer(1),
	  rect: {
	    createCover: function (controller, brushOption) {
	      return createBaseRectCover(curry(driftRect, function (range) {
	        return range;
	      }, function (range) {
	        return range;
	      }), controller, brushOption, ['w', 'e', 'n', 's', 'se', 'sw', 'ne', 'nw']);
	    },
	    getCreatingRange: function (localTrack) {
	      var ends = getTrackEnds(localTrack);
	      return formatRectRange(ends[1][0], ends[1][1], ends[0][0], ends[0][1]);
	    },
	    updateCoverShape: function (controller, cover, localRange, brushOption) {
	      updateBaseRect(controller, cover, localRange, brushOption);
	    },
	    updateCommon: updateCommon,
	    contain: mainShapeContain
	  },
	  polygon: {
	    createCover: function (controller, brushOption) {
	      var cover = new graphic.Group(); // Do not use graphic.Polygon because graphic.Polyline do not close the
	      // border of the shape when drawing, which is a better experience for user.

	      cover.add(new graphic.Polyline({
	        name: 'main',
	        style: makeStyle(brushOption),
	        silent: true
	      }));
	      return cover;
	    },
	    getCreatingRange: function (localTrack) {
	      return localTrack;
	    },
	    endCreating: function (controller, cover) {
	      cover.remove(cover.childAt(0)); // Use graphic.Polygon close the shape.

	      cover.add(new graphic.Polygon({
	        name: 'main',
	        draggable: true,
	        drift: curry(driftPolygon, controller, cover),
	        ondragend: curry(trigger, controller, {
	          isEnd: true
	        })
	      }));
	    },
	    updateCoverShape: function (controller, cover, localRange, brushOption) {
	      cover.childAt(0).setShape({
	        points: clipByPanel(controller, cover, localRange)
	      });
	    },
	    updateCommon: updateCommon,
	    contain: mainShapeContain
	  }
	};

	function getLineRenderer(xyIndex) {
	  return {
	    createCover: function (controller, brushOption) {
	      return createBaseRectCover(curry(driftRect, function (range) {
	        var rectRange = [range, [0, 100]];
	        xyIndex && rectRange.reverse();
	        return rectRange;
	      }, function (rectRange) {
	        return rectRange[xyIndex];
	      }), controller, brushOption, [['w', 'e'], ['n', 's']][xyIndex]);
	    },
	    getCreatingRange: function (localTrack) {
	      var ends = getTrackEnds(localTrack);
	      var min = mathMin(ends[0][xyIndex], ends[1][xyIndex]);
	      var max = mathMax(ends[0][xyIndex], ends[1][xyIndex]);
	      return [min, max];
	    },
	    updateCoverShape: function (controller, cover, localRange, brushOption) {
	      var otherExtent; // If brushWidth not specified, fit the panel.

	      var panel = getPanelByCover(controller, cover);

	      if (panel !== true && panel.getLinearBrushOtherExtent) {
	        otherExtent = panel.getLinearBrushOtherExtent(xyIndex, controller._transform);
	      } else {
	        var zr = controller._zr;
	        otherExtent = [0, [zr.getWidth(), zr.getHeight()][1 - xyIndex]];
	      }

	      var rectRange = [localRange, otherExtent];
	      xyIndex && rectRange.reverse();
	      updateBaseRect(controller, cover, rectRange, brushOption);
	    },
	    updateCommon: updateCommon,
	    contain: mainShapeContain
	  };
	}

	var _default = BrushController;
	module.exports = _default;

/***/ },
/* 420 */
/***/ function(module, exports, __webpack_require__) {

	var BoundingRect = __webpack_require__(184);

	var _cursorHelper = __webpack_require__(351);

	var onIrrelevantElement = _cursorHelper.onIrrelevantElement;

	var graphicUtil = __webpack_require__(212);

	function makeRectPanelClipPath(rect) {
	  rect = normalizeRect(rect);
	  return function (localPoints, transform) {
	    return graphicUtil.clipPointsByRect(localPoints, rect);
	  };
	}

	function makeLinearBrushOtherExtent(rect, specifiedXYIndex) {
	  rect = normalizeRect(rect);
	  return function (xyIndex) {
	    var idx = specifiedXYIndex != null ? specifiedXYIndex : xyIndex;
	    var brushWidth = idx ? rect.width : rect.height;
	    var base = idx ? rect.x : rect.y;
	    return [base, base + (brushWidth || 0)];
	  };
	}

	function makeRectIsTargetByCursor(rect, api, targetModel) {
	  rect = normalizeRect(rect);
	  return function (e, localCursorPoint, transform) {
	    return rect.contain(localCursorPoint[0], localCursorPoint[1]) && !onIrrelevantElement(e, api, targetModel);
	  };
	} // Consider width/height is negative.


	function normalizeRect(rect) {
	  return BoundingRect.create(rect);
	}

	exports.makeRectPanelClipPath = makeRectPanelClipPath;
	exports.makeLinearBrushOtherExtent = makeLinearBrushOtherExtent;
	exports.makeRectIsTargetByCursor = makeRectIsTargetByCursor;

/***/ },
/* 421 */
/***/ function(module, exports, __webpack_require__) {

	var List = __webpack_require__(265);

	var zrUtil = __webpack_require__(166);

	var SeriesModel = __webpack_require__(256);

	var completeDimensions = __webpack_require__(267);

	var _default = SeriesModel.extend({
	  type: 'series.parallel',
	  dependencies: ['parallel'],
	  visualColorAccessPath: 'lineStyle.normal.color',
	  getInitialData: function (option, ecModel) {
	    var parallelModel = ecModel.getComponent('parallel', this.get('parallelIndex'));
	    var parallelAxisIndices = parallelModel.parallelAxisIndex;
	    var rawData = option.data;
	    var modelDims = parallelModel.dimensions;
	    var dataDims = generateDataDims(modelDims, rawData);
	    var dataDimsInfo = zrUtil.map(dataDims, function (dim, dimIndex) {
	      var modelDimsIndex = zrUtil.indexOf(modelDims, dim);
	      var axisModel = modelDimsIndex >= 0 && ecModel.getComponent('parallelAxis', parallelAxisIndices[modelDimsIndex]);

	      if (axisModel && axisModel.get('type') === 'category') {
	        translateCategoryValue(axisModel, dim, rawData);
	        return {
	          name: dim,
	          type: 'ordinal'
	        };
	      } else if (modelDimsIndex < 0) {
	        return completeDimensions.guessOrdinal(rawData, dimIndex) ? {
	          name: dim,
	          type: 'ordinal'
	        } : dim;
	      } else {
	        return dim;
	      }
	    });
	    var list = new List(dataDimsInfo, this);
	    list.initData(rawData); // Anication is forbiden in progressive data mode.

	    if (this.option.progressive) {
	      this.option.animation = false;
	    }

	    return list;
	  },

	  /**
	   * User can get data raw indices on 'axisAreaSelected' event received.
	   *
	   * @public
	   * @param {string} activeState 'active' or 'inactive' or 'normal'
	   * @return {Array.<number>} Raw indices
	   */
	  getRawIndicesByActiveState: function (activeState) {
	    var coordSys = this.coordinateSystem;
	    var data = this.getData();
	    var indices = [];
	    coordSys.eachActiveState(data, function (theActiveState, dataIndex) {
	      if (activeState === theActiveState) {
	        indices.push(data.getRawIndex(dataIndex));
	      }
	    });
	    return indices;
	  },
	  defaultOption: {
	    zlevel: 0,
	    // 一级层叠
	    z: 2,
	    // 二级层叠
	    coordinateSystem: 'parallel',
	    parallelIndex: 0,
	    label: {
	      normal: {
	        show: false
	      },
	      emphasis: {
	        show: false
	      }
	    },
	    inactiveOpacity: 0.05,
	    activeOpacity: 1,
	    lineStyle: {
	      normal: {
	        width: 1,
	        opacity: 0.45,
	        type: 'solid'
	      }
	    },
	    progressive: false,
	    // 100
	    smooth: false,
	    animationEasing: 'linear'
	  }
	});

	function translateCategoryValue(axisModel, dim, rawData) {
	  var axisData = axisModel.get('data');
	  var numberDim = convertDimNameToNumber(dim);

	  if (axisData && axisData.length) {
	    zrUtil.each(rawData, function (dataItem) {
	      if (!dataItem) {
	        return;
	      } // FIXME
	      // time consuming, should use hash?


	      var index = zrUtil.indexOf(axisData, dataItem[numberDim]);
	      dataItem[numberDim] = index >= 0 ? index : NaN;
	    });
	  } // FIXME
	  // 如果没有设置axis data, 应自动算出，或者提示。

	}

	function convertDimNameToNumber(dimName) {
	  return +dimName.replace('dim', '');
	}

	function generateDataDims(modelDims, rawData) {
	  // parallelModel.dimension should not be regarded as data
	  // dimensions. Consider dimensions = ['dim4', 'dim2', 'dim6'];
	  // We detect max dim by parallelModel.dimensions and fist
	  // item in rawData arbitrarily.
	  var maxDimNum = 0;
	  zrUtil.each(modelDims, function (dimName) {
	    var numberDim = convertDimNameToNumber(dimName);
	    numberDim > maxDimNum && (maxDimNum = numberDim);
	  });
	  var firstItem = rawData[0];

	  if (firstItem && firstItem.length - 1 > maxDimNum) {
	    maxDimNum = firstItem.length - 1;
	  }

	  var dataDims = [];

	  for (var i = 0; i <= maxDimNum; i++) {
	    dataDims.push('dim' + i);
	  }

	  return dataDims;
	}

	module.exports = _default;

/***/ },
/* 422 */
/***/ function(module, exports, __webpack_require__) {

	var graphic = __webpack_require__(212);

	var zrUtil = __webpack_require__(166);

	var ChartView = __webpack_require__(258);

	var SMOOTH = 0.3;
	var ParallelView = ChartView.extend({
	  type: 'parallel',
	  init: function () {
	    /**
	     * @type {module:zrender/container/Group}
	     * @private
	     */
	    this._dataGroup = new graphic.Group();
	    this.group.add(this._dataGroup);
	    /**
	     * @type {module:echarts/data/List}
	     */

	    this._data;
	  },

	  /**
	   * @override
	   */
	  render: function (seriesModel, ecModel, api, payload) {
	    this._renderForNormal(seriesModel, payload); // this[
	    //     seriesModel.option.progressive
	    //         ? '_renderForProgressive'
	    //         : '_renderForNormal'
	    // ](seriesModel);

	  },
	  dispose: function () {},

	  /**
	   * @private
	   */
	  _renderForNormal: function (seriesModel, payload) {
	    var dataGroup = this._dataGroup;
	    var data = seriesModel.getData();
	    var oldData = this._data;
	    var coordSys = seriesModel.coordinateSystem;
	    var dimensions = coordSys.dimensions;
	    var option = seriesModel.option;
	    var smooth = option.smooth ? SMOOTH : null; // Consider switch between progressive and not.
	    // oldData && oldData.__plProgressive && dataGroup.removeAll();

	    data.diff(oldData).add(add).update(update).remove(remove).execute(); // Update style

	    updateElCommon(data, smooth); // First create

	    if (!this._data) {
	      var clipPath = createGridClipShape(coordSys, seriesModel, function () {
	        // Callback will be invoked immediately if there is no animation
	        setTimeout(function () {
	          dataGroup.removeClipPath();
	        });
	      });
	      dataGroup.setClipPath(clipPath);
	    }

	    this._data = data;

	    function add(newDataIndex) {
	      addEl(data, dataGroup, newDataIndex, dimensions, coordSys, null, smooth);
	    }

	    function update(newDataIndex, oldDataIndex) {
	      var line = oldData.getItemGraphicEl(oldDataIndex);
	      var points = createLinePoints(data, newDataIndex, dimensions, coordSys);
	      data.setItemGraphicEl(newDataIndex, line);
	      var animationModel = payload && payload.animation === false ? null : seriesModel;
	      graphic.updateProps(line, {
	        shape: {
	          points: points
	        }
	      }, animationModel, newDataIndex);
	    }

	    function remove(oldDataIndex) {
	      var line = oldData.getItemGraphicEl(oldDataIndex);
	      dataGroup.remove(line);
	    }
	  },

	  /**
	   * @private
	   */
	  // _renderForProgressive: function (seriesModel) {
	  //     var dataGroup = this._dataGroup;
	  //     var data = seriesModel.getData();
	  //     var oldData = this._data;
	  //     var coordSys = seriesModel.coordinateSystem;
	  //     var dimensions = coordSys.dimensions;
	  //     var option = seriesModel.option;
	  //     var progressive = option.progressive;
	  //     var smooth = option.smooth ? SMOOTH : null;
	  //     // In progressive animation is disabled, so use simple data diff,
	  //     // which effects performance less.
	  //     // (Typically performance for data with length 7000+ like:
	  //     // simpleDiff: 60ms, addEl: 184ms,
	  //     // in RMBP 2.4GHz intel i7, OSX 10.9 chrome 50.0.2661.102 (64-bit))
	  //     if (simpleDiff(oldData, data, dimensions)) {
	  //         dataGroup.removeAll();
	  //         data.each(function (dataIndex) {
	  //             addEl(data, dataGroup, dataIndex, dimensions, coordSys);
	  //         });
	  //     }
	  //     updateElCommon(data, progressive, smooth);
	  //     // Consider switch between progressive and not.
	  //     data.__plProgressive = true;
	  //     this._data = data;
	  // },

	  /**
	   * @override
	   */
	  remove: function () {
	    this._dataGroup && this._dataGroup.removeAll();
	    this._data = null;
	  }
	});

	function createGridClipShape(coordSys, seriesModel, cb) {
	  var parallelModel = coordSys.model;
	  var rect = coordSys.getRect();
	  var rectEl = new graphic.Rect({
	    shape: {
	      x: rect.x,
	      y: rect.y,
	      width: rect.width,
	      height: rect.height
	    }
	  });
	  var dim = parallelModel.get('layout') === 'horizontal' ? 'width' : 'height';
	  rectEl.setShape(dim, 0);
	  graphic.initProps(rectEl, {
	    shape: {
	      width: rect.width,
	      height: rect.height
	    }
	  }, seriesModel, cb);
	  return rectEl;
	}

	function createLinePoints(data, dataIndex, dimensions, coordSys) {
	  var points = [];

	  for (var i = 0; i < dimensions.length; i++) {
	    var dimName = dimensions[i];
	    var value = data.get(dimName, dataIndex);

	    if (!isEmptyValue(value, coordSys.getAxis(dimName).type)) {
	      points.push(coordSys.dataToPoint(value, dimName));
	    }
	  }

	  return points;
	}

	function addEl(data, dataGroup, dataIndex, dimensions, coordSys) {
	  var points = createLinePoints(data, dataIndex, dimensions, coordSys);
	  var line = new graphic.Polyline({
	    shape: {
	      points: points
	    },
	    silent: true,
	    z2: 10
	  });
	  dataGroup.add(line);
	  data.setItemGraphicEl(dataIndex, line);
	}

	function updateElCommon(data, smooth) {
	  var seriesStyleModel = data.hostModel.getModel('lineStyle.normal');
	  var lineStyle = seriesStyleModel.getLineStyle();
	  data.eachItemGraphicEl(function (line, dataIndex) {
	    if (data.hasItemOption) {
	      var itemModel = data.getItemModel(dataIndex);
	      var lineStyleModel = itemModel.getModel('lineStyle.normal', seriesStyleModel);
	      lineStyle = lineStyleModel.getLineStyle(['color', 'stroke']);
	    }

	    line.useStyle(zrUtil.extend(lineStyle, {
	      fill: null,
	      // lineStyle.color have been set to itemVisual in module:echarts/visual/seriesColor.
	      stroke: data.getItemVisual(dataIndex, 'color'),
	      // lineStyle.opacity have been set to itemVisual in parallelVisual.
	      opacity: data.getItemVisual(dataIndex, 'opacity')
	    }));
	    line.shape.smooth = smooth;
	  });
	} // function simpleDiff(oldData, newData, dimensions) {
	//     var oldLen;
	//     if (!oldData
	//         || !oldData.__plProgressive
	//         || (oldLen = oldData.count()) !== newData.count()
	//     ) {
	//         return true;
	//     }
	//     var dimLen = dimensions.length;
	//     for (var i = 0; i < oldLen; i++) {
	//         for (var j = 0; j < dimLen; j++) {
	//             if (oldData.get(dimensions[j], i) !== newData.get(dimensions[j], i)) {
	//                 return true;
	//             }
	//         }
	//     }
	//     return false;
	// }
	// FIXME
	// 公用方法?


	function isEmptyValue(val, axisType) {
	  return axisType === 'category' ? val == null : val == null || isNaN(val); // axisType === 'value'
	}

	var _default = ParallelView;
	module.exports = _default;

/***/ },
/* 423 */
/***/ function(module, exports) {

	var opacityAccessPath = ['lineStyle', 'normal', 'opacity'];

	function _default(ecModel) {
	  ecModel.eachSeriesByType('parallel', function (seriesModel) {
	    var itemStyleModel = seriesModel.getModel('itemStyle.normal');
	    var lineStyleModel = seriesModel.getModel('lineStyle.normal');
	    var globalColors = ecModel.get('color');
	    var color = lineStyleModel.get('color') || itemStyleModel.get('color') || globalColors[seriesModel.seriesIndex % globalColors.length];
	    var inactiveOpacity = seriesModel.get('inactiveOpacity');
	    var activeOpacity = seriesModel.get('activeOpacity');
	    var lineStyle = seriesModel.getModel('lineStyle.normal').getLineStyle();
	    var coordSys = seriesModel.coordinateSystem;
	    var data = seriesModel.getData();
	    var opacityMap = {
	      normal: lineStyle.opacity,
	      active: activeOpacity,
	      inactive: inactiveOpacity
	    };
	    coordSys.eachActiveState(data, function (activeState, dataIndex) {
	      var itemModel = data.getItemModel(dataIndex);
	      var opacity = opacityMap[activeState];

	      if (activeState === 'normal') {
	        var itemOpacity = itemModel.get(opacityAccessPath, true);
	        itemOpacity != null && (opacity = itemOpacity);
	      }

	      data.setItemVisual(dataIndex, 'opacity', opacity);
	    });
	    data.setVisual('color', color);
	  });
	}

	module.exports = _default;

/***/ },
/* 424 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	__webpack_require__(425);

	__webpack_require__(426);

	var sankeyLayout = __webpack_require__(427);

	var sankeyVisual = __webpack_require__(429);

	echarts.registerLayout(sankeyLayout);
	echarts.registerVisual(sankeyVisual);

/***/ },
/* 425 */
/***/ function(module, exports, __webpack_require__) {

	var SeriesModel = __webpack_require__(256);

	var createGraphFromNodeEdge = __webpack_require__(381);

	var _format = __webpack_require__(204);

	var encodeHTML = _format.encodeHTML;

	/**
	 * @file Get initial data and define sankey view's series model
	 * @author Deqing Li(annong035@gmail.com)
	 */
	var SankeySeries = SeriesModel.extend({
	  type: 'series.sankey',
	  layoutInfo: null,

	  /**
	   * Init a graph data structure from data in option series
	   *
	   * @param  {Object} option  the object used to config echarts view
	   * @return {module:echarts/data/List} storage initial data
	   */
	  getInitialData: function (option) {
	    var links = option.edges || option.links;
	    var nodes = option.data || option.nodes;

	    if (nodes && links) {
	      var graph = createGraphFromNodeEdge(nodes, links, this, true);
	      return graph.data;
	    }
	  },

	  /**
	   * Return the graphic data structure
	   *
	   * @return {module:echarts/data/Graph} graphic data structure
	   */
	  getGraph: function () {
	    return this.getData().graph;
	  },

	  /**
	   * Get edge data of graphic data structure
	   *
	   * @return {module:echarts/data/List} data structure of list
	   */
	  getEdgeData: function () {
	    return this.getGraph().edgeData;
	  },

	  /**
	   * @override
	   */
	  formatTooltip: function (dataIndex, multipleSeries, dataType) {
	    // dataType === 'node' or empty do not show tooltip by default
	    if (dataType === 'edge') {
	      var params = this.getDataParams(dataIndex, dataType);
	      var rawDataOpt = params.data;
	      var html = rawDataOpt.source + ' -- ' + rawDataOpt.target;

	      if (params.value) {
	        html += ' : ' + params.value;
	      }

	      return encodeHTML(html);
	    }

	    return SankeySeries.superCall(this, 'formatTooltip', dataIndex, multipleSeries);
	  },
	  defaultOption: {
	    zlevel: 0,
	    z: 2,
	    coordinateSystem: 'view',
	    layout: null,
	    // the position of the whole view
	    left: '5%',
	    top: '5%',
	    right: '20%',
	    bottom: '5%',
	    // the dx of the node
	    nodeWidth: 20,
	    // the vertical distance between two nodes
	    nodeGap: 8,
	    // the number of iterations to change the position of the node
	    layoutIterations: 32,
	    label: {
	      normal: {
	        show: true,
	        position: 'right',
	        color: '#000',
	        fontSize: 12
	      },
	      emphasis: {
	        show: true
	      }
	    },
	    itemStyle: {
	      normal: {
	        borderWidth: 1,
	        borderColor: '#333'
	      }
	    },
	    lineStyle: {
	      normal: {
	        color: '#314656',
	        opacity: 0.2,
	        curveness: 0.5
	      },
	      emphasis: {
	        opacity: 0.6
	      }
	    },
	    animationEasing: 'linear',
	    animationDuration: 1000
	  }
	});
	var _default = SankeySeries;
	module.exports = _default;

/***/ },
/* 426 */
/***/ function(module, exports, __webpack_require__) {

	var graphic = __webpack_require__(212);

	var echarts = __webpack_require__(161);

	/**
	 * @file  The file used to draw sankey view
	 * @author  Deqing Li(annong035@gmail.com)
	 */
	var SankeyShape = graphic.extendShape({
	  shape: {
	    x1: 0,
	    y1: 0,
	    x2: 0,
	    y2: 0,
	    cpx1: 0,
	    cpy1: 0,
	    cpx2: 0,
	    cpy2: 0,
	    extent: 0
	  },
	  buildPath: function (ctx, shape) {
	    var halfExtent = shape.extent / 2;
	    ctx.moveTo(shape.x1, shape.y1 - halfExtent);
	    ctx.bezierCurveTo(shape.cpx1, shape.cpy1 - halfExtent, shape.cpx2, shape.cpy2 - halfExtent, shape.x2, shape.y2 - halfExtent);
	    ctx.lineTo(shape.x2, shape.y2 + halfExtent);
	    ctx.bezierCurveTo(shape.cpx2, shape.cpy2 + halfExtent, shape.cpx1, shape.cpy1 + halfExtent, shape.x1, shape.y1 + halfExtent);
	    ctx.closePath();
	  }
	});

	var _default = echarts.extendChartView({
	  type: 'sankey',

	  /**
	   * @private
	   * @type {module:echarts/chart/sankey/SankeySeries}
	   */
	  _model: null,
	  render: function (seriesModel, ecModel, api) {
	    var graph = seriesModel.getGraph();
	    var group = this.group;
	    var layoutInfo = seriesModel.layoutInfo;
	    var nodeData = seriesModel.getData();
	    var edgeData = seriesModel.getData('edge');
	    this._model = seriesModel;
	    group.removeAll();
	    group.attr('position', [layoutInfo.x, layoutInfo.y]); // generate a bezire Curve for each edge

	    graph.eachEdge(function (edge) {
	      var curve = new SankeyShape();
	      curve.dataIndex = edge.dataIndex;
	      curve.seriesIndex = seriesModel.seriesIndex;
	      curve.dataType = 'edge';
	      var lineStyleModel = edge.getModel('lineStyle.normal');
	      var curvature = lineStyleModel.get('curveness');
	      var n1Layout = edge.node1.getLayout();
	      var n2Layout = edge.node2.getLayout();
	      var edgeLayout = edge.getLayout();
	      curve.shape.extent = Math.max(1, edgeLayout.dy);
	      var x1 = n1Layout.x + n1Layout.dx;
	      var y1 = n1Layout.y + edgeLayout.sy + edgeLayout.dy / 2;
	      var x2 = n2Layout.x;
	      var y2 = n2Layout.y + edgeLayout.ty + edgeLayout.dy / 2;
	      var cpx1 = x1 * (1 - curvature) + x2 * curvature;
	      var cpy1 = y1;
	      var cpx2 = x1 * curvature + x2 * (1 - curvature);
	      var cpy2 = y2;
	      curve.setShape({
	        x1: x1,
	        y1: y1,
	        x2: x2,
	        y2: y2,
	        cpx1: cpx1,
	        cpy1: cpy1,
	        cpx2: cpx2,
	        cpy2: cpy2
	      });
	      curve.setStyle(lineStyleModel.getItemStyle()); // Special color, use source node color or target node color

	      switch (curve.style.fill) {
	        case 'source':
	          curve.style.fill = edge.node1.getVisual('color');
	          break;

	        case 'target':
	          curve.style.fill = edge.node2.getVisual('color');
	          break;
	      }

	      graphic.setHoverStyle(curve, edge.getModel('lineStyle.emphasis').getItemStyle());
	      group.add(curve);
	      edgeData.setItemGraphicEl(edge.dataIndex, curve);
	    }); // generate a rect  for each node

	    graph.eachNode(function (node) {
	      var layout = node.getLayout();
	      var itemModel = node.getModel();
	      var labelModel = itemModel.getModel('label.normal');
	      var labelHoverModel = itemModel.getModel('label.emphasis');
	      var rect = new graphic.Rect({
	        shape: {
	          x: layout.x,
	          y: layout.y,
	          width: node.getLayout().dx,
	          height: node.getLayout().dy
	        },
	        style: itemModel.getModel('itemStyle.normal').getItemStyle()
	      });
	      var hoverStyle = node.getModel('itemStyle.emphasis').getItemStyle();
	      graphic.setLabelStyle(rect.style, hoverStyle, labelModel, labelHoverModel, {
	        labelFetcher: seriesModel,
	        labelDataIndex: node.dataIndex,
	        defaultText: node.id,
	        isRectText: true
	      });
	      rect.setStyle('fill', node.getVisual('color'));
	      graphic.setHoverStyle(rect, hoverStyle);
	      group.add(rect);
	      nodeData.setItemGraphicEl(node.dataIndex, rect);
	      rect.dataType = 'node';
	    });

	    if (!this._data && seriesModel.get('animation')) {
	      group.setClipPath(createGridClipShape(group.getBoundingRect(), seriesModel, function () {
	        group.removeClipPath();
	      }));
	    }

	    this._data = seriesModel.getData();
	  },
	  dispose: function () {}
	}); // add animation to the view


	function createGridClipShape(rect, seriesModel, cb) {
	  var rectEl = new graphic.Rect({
	    shape: {
	      x: rect.x - 10,
	      y: rect.y - 10,
	      width: 0,
	      height: rect.height + 20
	    }
	  });
	  graphic.initProps(rectEl, {
	    shape: {
	      width: rect.width + 20,
	      height: rect.height + 20
	    }
	  }, seriesModel, cb);
	  return rectEl;
	}

	module.exports = _default;

/***/ },
/* 427 */
/***/ function(module, exports, __webpack_require__) {

	var layout = __webpack_require__(247);

	var nest = __webpack_require__(428);

	var zrUtil = __webpack_require__(166);

	/**
	 * @file The layout algorithm of sankey view
	 * @author  Deqing Li(annong035@gmail.com)
	 */
	function _default(ecModel, api, payload) {
	  ecModel.eachSeriesByType('sankey', function (seriesModel) {
	    var nodeWidth = seriesModel.get('nodeWidth');
	    var nodeGap = seriesModel.get('nodeGap');
	    var layoutInfo = getViewRect(seriesModel, api);
	    seriesModel.layoutInfo = layoutInfo;
	    var width = layoutInfo.width;
	    var height = layoutInfo.height;
	    var graph = seriesModel.getGraph();
	    var nodes = graph.nodes;
	    var edges = graph.edges;
	    computeNodeValues(nodes);
	    var filteredNodes = zrUtil.filter(nodes, function (node) {
	      return node.getLayout().value === 0;
	    });
	    var iterations = filteredNodes.length !== 0 ? 0 : seriesModel.get('layoutIterations');
	    layoutSankey(nodes, edges, nodeWidth, nodeGap, width, height, iterations);
	  });
	}
	/**
	 * Get the layout position of the whole view
	 *
	 * @param {module:echarts/model/Series} seriesModel  the model object of sankey series
	 * @param {module:echarts/ExtensionAPI} api  provide the API list that the developer can call
	 * @return {module:zrender/core/BoundingRect}  size of rect to draw the sankey view
	 */


	function getViewRect(seriesModel, api) {
	  return layout.getLayoutRect(seriesModel.getBoxLayoutParams(), {
	    width: api.getWidth(),
	    height: api.getHeight()
	  });
	}

	function layoutSankey(nodes, edges, nodeWidth, nodeGap, width, height, iterations) {
	  computeNodeBreadths(nodes, nodeWidth, width);
	  computeNodeDepths(nodes, edges, height, nodeGap, iterations);
	  computeEdgeDepths(nodes);
	}
	/**
	 * Compute the value of each node by summing the associated edge's value
	 *
	 * @param {module:echarts/data/Graph~Node} nodes  node of sankey view
	 */


	function computeNodeValues(nodes) {
	  zrUtil.each(nodes, function (node) {
	    var value1 = sum(node.outEdges, getEdgeValue);
	    var value2 = sum(node.inEdges, getEdgeValue);
	    var value = Math.max(value1, value2);
	    node.setLayout({
	      value: value
	    }, true);
	  });
	}
	/**
	 * Compute the x-position for each node
	 *
	 * @param {module:echarts/data/Graph~Node} nodes  node of sankey view
	 * @param  {number} nodeWidth  the dx of the node
	 * @param  {number} width  the whole width of the area to draw the view
	 */


	function computeNodeBreadths(nodes, nodeWidth, width) {
	  var remainNodes = nodes;
	  var nextNode = null;
	  var x = 0;
	  var kx = 0;

	  while (remainNodes.length) {
	    nextNode = [];

	    for (var i = 0, len = remainNodes.length; i < len; i++) {
	      var node = remainNodes[i];
	      node.setLayout({
	        x: x
	      }, true);
	      node.setLayout({
	        dx: nodeWidth
	      }, true);

	      for (var j = 0, lenj = node.outEdges.length; j < lenj; j++) {
	        nextNode.push(node.outEdges[j].node2);
	      }
	    }

	    remainNodes = nextNode;
	    ++x;
	  }

	  moveSinksRight(nodes, x);
	  kx = (width - nodeWidth) / (x - 1);
	  scaleNodeBreadths(nodes, kx);
	}
	/**
	 * All the node without outEgdes are assigned maximum x-position and
	 *     be aligned in the last column.
	 *
	 * @param {module:echarts/data/Graph~Node} nodes  node of sankey view
	 * @param {number} x  value (x-1) use to assign to node without outEdges
	 *     as x-position
	 */


	function moveSinksRight(nodes, x) {
	  zrUtil.each(nodes, function (node) {
	    if (!node.outEdges.length) {
	      node.setLayout({
	        x: x - 1
	      }, true);
	    }
	  });
	}
	/**
	 * Scale node x-position to the width
	 *
	 * @param {module:echarts/data/Graph~Node} nodes  node of sankey view
	 * @param {number} kx   multiple used to scale nodes
	 */


	function scaleNodeBreadths(nodes, kx) {
	  zrUtil.each(nodes, function (node) {
	    var nodeX = node.getLayout().x * kx;
	    node.setLayout({
	      x: nodeX
	    }, true);
	  });
	}
	/**
	 * Using Gauss-Seidel iterations method to compute the node depth(y-position)
	 *
	 * @param {module:echarts/data/Graph~Node} nodes  node of sankey view
	 * @param {module:echarts/data/Graph~Edge} edges  edge of sankey view
	 * @param {number} height  the whole height of the area to draw the view
	 * @param {number} nodeGap  the vertical distance between two nodes
	 *     in the same column.
	 * @param {number} iterations  the number of iterations for the algorithm
	 */


	function computeNodeDepths(nodes, edges, height, nodeGap, iterations) {
	  var nodesByBreadth = nest().key(function (d) {
	    return d.getLayout().x;
	  }).sortKeys(ascending).entries(nodes).map(function (d) {
	    return d.values;
	  });
	  initializeNodeDepth(nodes, nodesByBreadth, edges, height, nodeGap);
	  resolveCollisions(nodesByBreadth, nodeGap, height);

	  for (var alpha = 1; iterations > 0; iterations--) {
	    // 0.99 is a experience parameter, ensure that each iterations of
	    // changes as small as possible.
	    alpha *= 0.99;
	    relaxRightToLeft(nodesByBreadth, alpha);
	    resolveCollisions(nodesByBreadth, nodeGap, height);
	    relaxLeftToRight(nodesByBreadth, alpha);
	    resolveCollisions(nodesByBreadth, nodeGap, height);
	  }
	}
	/**
	 * Compute the original y-position for each node
	 *
	 * @param {module:echarts/data/Graph~Node} nodes  node of sankey view
	 * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth
	 *     group by the array of all sankey nodes based on the nodes x-position.
	 * @param {module:echarts/data/Graph~Edge} edges  edge of sankey view
	 * @param {number} height  the whole height of the area to draw the view
	 * @param {number} nodeGap  the vertical distance between two nodes
	 */


	function initializeNodeDepth(nodes, nodesByBreadth, edges, height, nodeGap) {
	  var kyArray = [];
	  zrUtil.each(nodesByBreadth, function (nodes) {
	    var n = nodes.length;
	    var sum = 0;
	    zrUtil.each(nodes, function (node) {
	      sum += node.getLayout().value;
	    });
	    var ky = (height - (n - 1) * nodeGap) / sum;
	    kyArray.push(ky);
	  });
	  kyArray.sort(function (a, b) {
	    return a - b;
	  });
	  var ky0 = kyArray[0];
	  zrUtil.each(nodesByBreadth, function (nodes) {
	    zrUtil.each(nodes, function (node, i) {
	      node.setLayout({
	        y: i
	      }, true);
	      var nodeDy = node.getLayout().value * ky0;
	      node.setLayout({
	        dy: nodeDy
	      }, true);
	    });
	  });
	  zrUtil.each(edges, function (edge) {
	    var edgeDy = +edge.getValue() * ky0;
	    edge.setLayout({
	      dy: edgeDy
	    }, true);
	  });
	}
	/**
	 * Resolve the collision of initialized depth (y-position)
	 *
	 * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth
	 *     group by the array of all sankey nodes based on the nodes x-position.
	 * @param {number} nodeGap  the vertical distance between two nodes
	 * @param {number} height  the whole height of the area to draw the view
	 */


	function resolveCollisions(nodesByBreadth, nodeGap, height) {
	  zrUtil.each(nodesByBreadth, function (nodes) {
	    var node;
	    var dy;
	    var y0 = 0;
	    var n = nodes.length;
	    var i;
	    nodes.sort(ascendingDepth);

	    for (i = 0; i < n; i++) {
	      node = nodes[i];
	      dy = y0 - node.getLayout().y;

	      if (dy > 0) {
	        var nodeY = node.getLayout().y + dy;
	        node.setLayout({
	          y: nodeY
	        }, true);
	      }

	      y0 = node.getLayout().y + node.getLayout().dy + nodeGap;
	    } // if the bottommost node goes outside the bounds, push it back up


	    dy = y0 - nodeGap - height;

	    if (dy > 0) {
	      var nodeY = node.getLayout().y - dy;
	      node.setLayout({
	        y: nodeY
	      }, true);
	      y0 = node.getLayout().y;

	      for (i = n - 2; i >= 0; --i) {
	        node = nodes[i];
	        dy = node.getLayout().y + node.getLayout().dy + nodeGap - y0;

	        if (dy > 0) {
	          nodeY = node.getLayout().y - dy;
	          node.setLayout({
	            y: nodeY
	          }, true);
	        }

	        y0 = node.getLayout().y;
	      }
	    }
	  });
	}
	/**
	 * Change the y-position of the nodes, except most the right side nodes
	 *
	 * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth
	 *     group by the array of all sankey nodes based on the node x-position.
	 * @param {number} alpha  parameter used to adjust the nodes y-position
	 */


	function relaxRightToLeft(nodesByBreadth, alpha) {
	  zrUtil.each(nodesByBreadth.slice().reverse(), function (nodes) {
	    zrUtil.each(nodes, function (node) {
	      if (node.outEdges.length) {
	        var y = sum(node.outEdges, weightedTarget) / sum(node.outEdges, getEdgeValue);
	        var nodeY = node.getLayout().y + (y - center(node)) * alpha;
	        node.setLayout({
	          y: nodeY
	        }, true);
	      }
	    });
	  });
	}

	function weightedTarget(edge) {
	  return center(edge.node2) * edge.getValue();
	}
	/**
	 * Change the y-position of the nodes, except most the left side nodes
	 *
	 * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth
	 *     group by the array of all sankey nodes based on the node x-position.
	 * @param {number} alpha  parameter used to adjust the nodes y-position
	 */


	function relaxLeftToRight(nodesByBreadth, alpha) {
	  zrUtil.each(nodesByBreadth, function (nodes) {
	    zrUtil.each(nodes, function (node) {
	      if (node.inEdges.length) {
	        var y = sum(node.inEdges, weightedSource) / sum(node.inEdges, getEdgeValue);
	        var nodeY = node.getLayout().y + (y - center(node)) * alpha;
	        node.setLayout({
	          y: nodeY
	        }, true);
	      }
	    });
	  });
	}

	function weightedSource(edge) {
	  return center(edge.node1) * edge.getValue();
	}
	/**
	 * Compute the depth(y-position) of each edge
	 *
	 * @param {module:echarts/data/Graph~Node} nodes  node of sankey view
	 */


	function computeEdgeDepths(nodes) {
	  zrUtil.each(nodes, function (node) {
	    node.outEdges.sort(ascendingTargetDepth);
	    node.inEdges.sort(ascendingSourceDepth);
	  });
	  zrUtil.each(nodes, function (node) {
	    var sy = 0;
	    var ty = 0;
	    zrUtil.each(node.outEdges, function (edge) {
	      edge.setLayout({
	        sy: sy
	      }, true);
	      sy += edge.getLayout().dy;
	    });
	    zrUtil.each(node.inEdges, function (edge) {
	      edge.setLayout({
	        ty: ty
	      }, true);
	      ty += edge.getLayout().dy;
	    });
	  });
	}

	function ascendingTargetDepth(a, b) {
	  return a.node2.getLayout().y - b.node2.getLayout().y;
	}

	function ascendingSourceDepth(a, b) {
	  return a.node1.getLayout().y - b.node1.getLayout().y;
	}

	function sum(array, f) {
	  var sum = 0;
	  var len = array.length;
	  var i = -1;

	  while (++i < len) {
	    var value = +f.call(array, array[i], i);

	    if (!isNaN(value)) {
	      sum += value;
	    }
	  }

	  return sum;
	}

	function center(node) {
	  return node.getLayout().y + node.getLayout().dy / 2;
	}

	function ascendingDepth(a, b) {
	  return a.getLayout().y - b.getLayout().y;
	}

	function ascending(a, b) {
	  return a < b ? -1 : a > b ? 1 : a === b ? 0 : NaN;
	}

	function getEdgeValue(edge) {
	  return edge.getValue();
	}

	module.exports = _default;

/***/ },
/* 428 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	/**
	 * nest helper used to group by the array.
	 * can specified the keys and sort the keys.
	 */
	function nest() {
	  var keysFunction = [];
	  var sortKeysFunction = [];
	  /**
	   * map an Array into the mapObject.
	   * @param {Array} array
	   * @param {number} depth
	   */

	  function map(array, depth) {
	    if (depth >= keysFunction.length) {
	      return array;
	    }

	    var i = -1;
	    var n = array.length;
	    var keyFunction = keysFunction[depth++];
	    var mapObject = {};
	    var valuesByKey = {};

	    while (++i < n) {
	      var keyValue = keyFunction(array[i]);
	      var values = valuesByKey[keyValue];

	      if (values) {
	        values.push(array[i]);
	      } else {
	        valuesByKey[keyValue] = [array[i]];
	      }
	    }

	    zrUtil.each(valuesByKey, function (value, key) {
	      mapObject[key] = map(value, depth);
	    });
	    return mapObject;
	  }
	  /**
	   * transform the Map Object to multidimensional Array
	   * @param {Object} map
	   * @param {number} depth
	   */


	  function entriesMap(mapObject, depth) {
	    if (depth >= keysFunction.length) {
	      return mapObject;
	    }

	    var array = [];
	    var sortKeyFunction = sortKeysFunction[depth++];
	    zrUtil.each(mapObject, function (value, key) {
	      array.push({
	        key: key,
	        values: entriesMap(value, depth)
	      });
	    });

	    if (sortKeyFunction) {
	      return array.sort(function (a, b) {
	        return sortKeyFunction(a.key, b.key);
	      });
	    } else {
	      return array;
	    }
	  }

	  return {
	    /**
	     * specified the key to groupby the arrays.
	     * users can specified one more keys.
	     * @param {Function} d
	     */
	    key: function (d) {
	      keysFunction.push(d);
	      return this;
	    },

	    /**
	     * specified the comparator to sort the keys
	     * @param {Function} order
	     */
	    sortKeys: function (order) {
	      sortKeysFunction[keysFunction.length - 1] = order;
	      return this;
	    },

	    /**
	     * the array to be grouped by.
	     * @param {Array} array
	     */
	    entries: function (array) {
	      return entriesMap(map(array, 0), 0);
	    }
	  };
	}

	module.exports = nest;

/***/ },
/* 429 */
/***/ function(module, exports, __webpack_require__) {

	var VisualMapping = __webpack_require__(377);

	var zrUtil = __webpack_require__(166);

	/**
	 * @file Visual encoding for sankey view
	 * @author  Deqing Li(annong035@gmail.com)
	 */
	function _default(ecModel, payload) {
	  ecModel.eachSeriesByType('sankey', function (seriesModel) {
	    var graph = seriesModel.getGraph();
	    var nodes = graph.nodes;
	    nodes.sort(function (a, b) {
	      return a.getLayout().value - b.getLayout().value;
	    });
	    var minValue = nodes[0].getLayout().value;
	    var maxValue = nodes[nodes.length - 1].getLayout().value;
	    zrUtil.each(nodes, function (node) {
	      var mapping = new VisualMapping({
	        type: 'color',
	        mappingMethod: 'linear',
	        dataExtent: [minValue, maxValue],
	        visual: seriesModel.get('color')
	      });
	      var mapValueToColor = mapping.mapValueToVisual(node.getLayout().value);
	      node.setVisual('color', mapValueToColor); // If set itemStyle.normal.color

	      var itemModel = node.getModel();
	      var customColor = itemModel.get('itemStyle.normal.color');

	      if (customColor != null) {
	        node.setVisual('color', customColor);
	      }
	    });
	  });
	}

	module.exports = _default;

/***/ },
/* 430 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	__webpack_require__(431);

	__webpack_require__(434);

	var boxplotVisual = __webpack_require__(435);

	var boxplotLayout = __webpack_require__(436);

	echarts.registerVisual(boxplotVisual);
	echarts.registerLayout(boxplotLayout);

/***/ },
/* 431 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var SeriesModel = __webpack_require__(256);

	var _whiskerBoxCommon = __webpack_require__(432);

	var seriesModelMixin = _whiskerBoxCommon.seriesModelMixin;
	var BoxplotSeries = SeriesModel.extend({
	  type: 'series.boxplot',
	  dependencies: ['xAxis', 'yAxis', 'grid'],
	  // TODO
	  // box width represents group size, so dimension should have 'size'.

	  /**
	   * @see <https://en.wikipedia.org/wiki/Box_plot>
	   * The meanings of 'min' and 'max' depend on user,
	   * and echarts do not need to know it.
	   * @readOnly
	   */
	  defaultValueDimensions: ['min', 'Q1', 'median', 'Q3', 'max'],

	  /**
	   * @type {Array.<string>}
	   * @readOnly
	   */
	  dimensions: null,

	  /**
	   * @override
	   */
	  defaultOption: {
	    zlevel: 0,
	    // 一级层叠
	    z: 2,
	    // 二级层叠
	    coordinateSystem: 'cartesian2d',
	    legendHoverLink: true,
	    hoverAnimation: true,
	    // xAxisIndex: 0,
	    // yAxisIndex: 0,
	    layout: null,
	    // 'horizontal' or 'vertical'
	    boxWidth: [7, 50],
	    // [min, max] can be percent of band width.
	    itemStyle: {
	      normal: {
	        color: '#fff',
	        borderWidth: 1
	      },
	      emphasis: {
	        borderWidth: 2,
	        shadowBlur: 5,
	        shadowOffsetX: 2,
	        shadowOffsetY: 2,
	        shadowColor: 'rgba(0,0,0,0.4)'
	      }
	    },
	    animationEasing: 'elasticOut',
	    animationDuration: 800
	  }
	});
	zrUtil.mixin(BoxplotSeries, seriesModelMixin, true);
	var _default = BoxplotSeries;
	module.exports = _default;

/***/ },
/* 432 */
/***/ function(module, exports, __webpack_require__) {

	var List = __webpack_require__(265);

	var completeDimensions = __webpack_require__(267);

	var WhiskerBoxDraw = __webpack_require__(433);

	var zrUtil = __webpack_require__(166);

	var seriesModelMixin = {
	  /**
	   * @private
	   * @type {string}
	   */
	  _baseAxisDim: null,

	  /**
	   * @override
	   */
	  getInitialData: function (option, ecModel) {
	    // When both types of xAxis and yAxis are 'value', layout is
	    // needed to be specified by user. Otherwise, layout can be
	    // judged by which axis is category.
	    var categories;
	    var xAxisModel = ecModel.getComponent('xAxis', this.get('xAxisIndex'));
	    var yAxisModel = ecModel.getComponent('yAxis', this.get('yAxisIndex'));
	    var xAxisType = xAxisModel.get('type');
	    var yAxisType = yAxisModel.get('type');
	    var addOrdinal; // FIXME
	    // 考虑时间轴

	    if (xAxisType === 'category') {
	      option.layout = 'horizontal';
	      categories = xAxisModel.getCategories();
	      addOrdinal = true;
	    } else if (yAxisType === 'category') {
	      option.layout = 'vertical';
	      categories = yAxisModel.getCategories();
	      addOrdinal = true;
	    } else {
	      option.layout = option.layout || 'horizontal';
	    }

	    var coordDims = ['x', 'y'];
	    var baseAxisDimIndex = option.layout === 'horizontal' ? 0 : 1;
	    var baseAxisDim = this._baseAxisDim = coordDims[baseAxisDimIndex];
	    var otherAxisDim = coordDims[1 - baseAxisDimIndex];
	    var data = option.data;
	    addOrdinal && zrUtil.each(data, function (item, index) {
	      if (item.value && zrUtil.isArray(item.value)) {
	        item.value.unshift(index);
	      } else {
	        zrUtil.isArray(item) && item.unshift(index);
	      }
	    });
	    var defaultValueDimensions = this.defaultValueDimensions;
	    var dimensions = [{
	      name: baseAxisDim,
	      otherDims: {
	        tooltip: false
	      },
	      dimsDef: ['base']
	    }, {
	      name: otherAxisDim,
	      dimsDef: defaultValueDimensions.slice()
	    }];
	    dimensions = completeDimensions(dimensions, data, {
	      encodeDef: this.get('encode'),
	      dimsDef: this.get('dimensions'),
	      // Consider empty data entry.
	      dimCount: defaultValueDimensions.length + 1
	    });
	    var list = new List(dimensions, this);
	    list.initData(data, categories ? categories.slice() : null);
	    return list;
	  },

	  /**
	   * If horizontal, base axis is x, otherwise y.
	   * @override
	   */
	  getBaseAxis: function () {
	    var dim = this._baseAxisDim;
	    return this.ecModel.getComponent(dim + 'Axis', this.get(dim + 'AxisIndex')).axis;
	  }
	};
	var viewMixin = {
	  init: function () {
	    /**
	     * Old data.
	     * @private
	     * @type {module:echarts/chart/helper/WhiskerBoxDraw}
	     */
	    var whiskerBoxDraw = this._whiskerBoxDraw = new WhiskerBoxDraw(this.getStyleUpdater());
	    this.group.add(whiskerBoxDraw.group);
	  },
	  render: function (seriesModel, ecModel, api) {
	    this._whiskerBoxDraw.updateData(seriesModel.getData());
	  },
	  remove: function (ecModel) {
	    this._whiskerBoxDraw.remove();
	  }
	};
	exports.seriesModelMixin = seriesModelMixin;
	exports.viewMixin = viewMixin;

/***/ },
/* 433 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var graphic = __webpack_require__(212);

	var Path = __webpack_require__(214);

	/**
	 * @module echarts/chart/helper/Symbol
	 */
	var WhiskerPath = Path.extend({
	  type: 'whiskerInBox',
	  shape: {},
	  buildPath: function (ctx, shape) {
	    for (var i in shape) {
	      if (shape.hasOwnProperty(i) && i.indexOf('ends') === 0) {
	        var pts = shape[i];
	        ctx.moveTo(pts[0][0], pts[0][1]);
	        ctx.lineTo(pts[1][0], pts[1][1]);
	      }
	    }
	  }
	});
	/**
	 * @constructor
	 * @alias {module:echarts/chart/helper/WhiskerBox}
	 * @param {module:echarts/data/List} data
	 * @param {number} idx
	 * @param {Function} styleUpdater
	 * @param {boolean} isInit
	 * @extends {module:zrender/graphic/Group}
	 */

	function WhiskerBox(data, idx, styleUpdater, isInit) {
	  graphic.Group.call(this);
	  /**
	   * @type {number}
	   * @readOnly
	   */

	  this.bodyIndex;
	  /**
	   * @type {number}
	   * @readOnly
	   */

	  this.whiskerIndex;
	  /**
	   * @type {Function}
	   */

	  this.styleUpdater = styleUpdater;

	  this._createContent(data, idx, isInit);

	  this.updateData(data, idx, isInit);
	  /**
	   * Last series model.
	   * @type {module:echarts/model/Series}
	   */

	  this._seriesModel;
	}

	var whiskerBoxProto = WhiskerBox.prototype;

	whiskerBoxProto._createContent = function (data, idx, isInit) {
	  var itemLayout = data.getItemLayout(idx);
	  var constDim = itemLayout.chartLayout === 'horizontal' ? 1 : 0;
	  var count = 0; // Whisker element.

	  this.add(new graphic.Polygon({
	    shape: {
	      points: isInit ? transInit(itemLayout.bodyEnds, constDim, itemLayout) : itemLayout.bodyEnds
	    },
	    style: {
	      strokeNoScale: true
	    },
	    z2: 100
	  }));
	  this.bodyIndex = count++; // Box element.

	  var whiskerEnds = zrUtil.map(itemLayout.whiskerEnds, function (ends) {
	    return isInit ? transInit(ends, constDim, itemLayout) : ends;
	  });
	  this.add(new WhiskerPath({
	    shape: makeWhiskerEndsShape(whiskerEnds),
	    style: {
	      strokeNoScale: true
	    },
	    z2: 100
	  }));
	  this.whiskerIndex = count++;
	};

	function transInit(points, dim, itemLayout) {
	  return zrUtil.map(points, function (point) {
	    point = point.slice();
	    point[dim] = itemLayout.initBaseline;
	    return point;
	  });
	}

	function makeWhiskerEndsShape(whiskerEnds) {
	  // zr animation only support 2-dim array.
	  var shape = {};
	  zrUtil.each(whiskerEnds, function (ends, i) {
	    shape['ends' + i] = ends;
	  });
	  return shape;
	}
	/**
	 * Update symbol properties
	 * @param  {module:echarts/data/List} data
	 * @param  {number} idx
	 */


	whiskerBoxProto.updateData = function (data, idx, isInit) {
	  var seriesModel = this._seriesModel = data.hostModel;
	  var itemLayout = data.getItemLayout(idx);
	  var updateMethod = graphic[isInit ? 'initProps' : 'updateProps']; // this.childAt(this.bodyIndex).stopAnimation(true);
	  // this.childAt(this.whiskerIndex).stopAnimation(true);

	  updateMethod(this.childAt(this.bodyIndex), {
	    shape: {
	      points: itemLayout.bodyEnds
	    }
	  }, seriesModel, idx);
	  updateMethod(this.childAt(this.whiskerIndex), {
	    shape: makeWhiskerEndsShape(itemLayout.whiskerEnds)
	  }, seriesModel, idx);
	  this.styleUpdater.call(null, this, data, idx);
	};

	zrUtil.inherits(WhiskerBox, graphic.Group);
	/**
	 * @constructor
	 * @alias module:echarts/chart/helper/WhiskerBoxDraw
	 */

	function WhiskerBoxDraw(styleUpdater) {
	  this.group = new graphic.Group();
	  this.styleUpdater = styleUpdater;
	}

	var whiskerBoxDrawProto = WhiskerBoxDraw.prototype;
	/**
	 * Update symbols draw by new data
	 * @param {module:echarts/data/List} data
	 */

	whiskerBoxDrawProto.updateData = function (data) {
	  var group = this.group;
	  var oldData = this._data;
	  var styleUpdater = this.styleUpdater;
	  data.diff(oldData).add(function (newIdx) {
	    if (data.hasValue(newIdx)) {
	      var symbolEl = new WhiskerBox(data, newIdx, styleUpdater, true);
	      data.setItemGraphicEl(newIdx, symbolEl);
	      group.add(symbolEl);
	    }
	  }).update(function (newIdx, oldIdx) {
	    var symbolEl = oldData.getItemGraphicEl(oldIdx); // Empty data

	    if (!data.hasValue(newIdx)) {
	      group.remove(symbolEl);
	      return;
	    }

	    if (!symbolEl) {
	      symbolEl = new WhiskerBox(data, newIdx, styleUpdater);
	    } else {
	      symbolEl.updateData(data, newIdx);
	    } // Add back


	    group.add(symbolEl);
	    data.setItemGraphicEl(newIdx, symbolEl);
	  }).remove(function (oldIdx) {
	    var el = oldData.getItemGraphicEl(oldIdx);
	    el && group.remove(el);
	  }).execute();
	  this._data = data;
	};
	/**
	 * Remove symbols.
	 * @param {module:echarts/data/List} data
	 */


	whiskerBoxDrawProto.remove = function () {
	  var group = this.group;
	  var data = this._data;
	  this._data = null;
	  data && data.eachItemGraphicEl(function (el) {
	    el && group.remove(el);
	  });
	};

	var _default = WhiskerBoxDraw;
	module.exports = _default;

/***/ },
/* 434 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var ChartView = __webpack_require__(258);

	var graphic = __webpack_require__(212);

	var _whiskerBoxCommon = __webpack_require__(432);

	var viewMixin = _whiskerBoxCommon.viewMixin;
	var BoxplotView = ChartView.extend({
	  type: 'boxplot',
	  getStyleUpdater: function () {
	    return updateStyle;
	  },
	  dispose: zrUtil.noop
	});
	zrUtil.mixin(BoxplotView, viewMixin, true); // Update common properties

	var normalStyleAccessPath = ['itemStyle', 'normal'];
	var emphasisStyleAccessPath = ['itemStyle', 'emphasis'];

	function updateStyle(itemGroup, data, idx) {
	  var itemModel = data.getItemModel(idx);
	  var normalItemStyleModel = itemModel.getModel(normalStyleAccessPath);
	  var borderColor = data.getItemVisual(idx, 'color'); // Exclude borderColor.

	  var itemStyle = normalItemStyleModel.getItemStyle(['borderColor']);
	  var whiskerEl = itemGroup.childAt(itemGroup.whiskerIndex);
	  whiskerEl.style.set(itemStyle);
	  whiskerEl.style.stroke = borderColor;
	  whiskerEl.dirty();
	  var bodyEl = itemGroup.childAt(itemGroup.bodyIndex);
	  bodyEl.style.set(itemStyle);
	  bodyEl.style.stroke = borderColor;
	  bodyEl.dirty();
	  var hoverStyle = itemModel.getModel(emphasisStyleAccessPath).getItemStyle();
	  graphic.setHoverStyle(itemGroup, hoverStyle);
	}

	var _default = BoxplotView;
	module.exports = _default;

/***/ },
/* 435 */
/***/ function(module, exports) {

	var borderColorQuery = ['itemStyle', 'normal', 'borderColor'];

	function _default(ecModel, api) {
	  var globalColors = ecModel.get('color');
	  ecModel.eachRawSeriesByType('boxplot', function (seriesModel) {
	    var defaulColor = globalColors[seriesModel.seriesIndex % globalColors.length];
	    var data = seriesModel.getData();
	    data.setVisual({
	      legendSymbol: 'roundRect',
	      // Use name 'color' but not 'borderColor' for legend usage and
	      // visual coding from other component like dataRange.
	      color: seriesModel.get(borderColorQuery) || defaulColor
	    }); // Only visible series has each data be visual encoded

	    if (!ecModel.isSeriesFiltered(seriesModel)) {
	      data.each(function (idx) {
	        var itemModel = data.getItemModel(idx);
	        data.setItemVisual(idx, {
	          color: itemModel.get(borderColorQuery, true)
	        });
	      });
	    }
	  });
	}

	module.exports = _default;

/***/ },
/* 436 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var _number = __webpack_require__(205);

	var parsePercent = _number.parsePercent;
	var each = zrUtil.each;

	function _default(ecModel) {
	  var groupResult = groupSeriesByAxis(ecModel);
	  each(groupResult, function (groupItem) {
	    var seriesModels = groupItem.seriesModels;

	    if (!seriesModels.length) {
	      return;
	    }

	    calculateBase(groupItem);
	    each(seriesModels, function (seriesModel, idx) {
	      layoutSingleSeries(seriesModel, groupItem.boxOffsetList[idx], groupItem.boxWidthList[idx]);
	    });
	  });
	}
	/**
	 * Group series by axis.
	 */


	function groupSeriesByAxis(ecModel) {
	  var result = [];
	  var axisList = [];
	  ecModel.eachSeriesByType('boxplot', function (seriesModel) {
	    var baseAxis = seriesModel.getBaseAxis();
	    var idx = zrUtil.indexOf(axisList, baseAxis);

	    if (idx < 0) {
	      idx = axisList.length;
	      axisList[idx] = baseAxis;
	      result[idx] = {
	        axis: baseAxis,
	        seriesModels: []
	      };
	    }

	    result[idx].seriesModels.push(seriesModel);
	  });
	  return result;
	}
	/**
	 * Calculate offset and box width for each series.
	 */


	function calculateBase(groupItem) {
	  var extent;
	  var baseAxis = groupItem.axis;
	  var seriesModels = groupItem.seriesModels;
	  var seriesCount = seriesModels.length;
	  var boxWidthList = groupItem.boxWidthList = [];
	  var boxOffsetList = groupItem.boxOffsetList = [];
	  var boundList = [];
	  var bandWidth;

	  if (baseAxis.type === 'category') {
	    bandWidth = baseAxis.getBandWidth();
	  } else {
	    var maxDataCount = 0;
	    each(seriesModels, function (seriesModel) {
	      maxDataCount = Math.max(maxDataCount, seriesModel.getData().count());
	    });
	    extent = baseAxis.getExtent(), Math.abs(extent[1] - extent[0]) / maxDataCount;
	  }

	  each(seriesModels, function (seriesModel) {
	    var boxWidthBound = seriesModel.get('boxWidth');

	    if (!zrUtil.isArray(boxWidthBound)) {
	      boxWidthBound = [boxWidthBound, boxWidthBound];
	    }

	    boundList.push([parsePercent(boxWidthBound[0], bandWidth) || 0, parsePercent(boxWidthBound[1], bandWidth) || 0]);
	  });
	  var availableWidth = bandWidth * 0.8 - 2;
	  var boxGap = availableWidth / seriesCount * 0.3;
	  var boxWidth = (availableWidth - boxGap * (seriesCount - 1)) / seriesCount;
	  var base = boxWidth / 2 - availableWidth / 2;
	  each(seriesModels, function (seriesModel, idx) {
	    boxOffsetList.push(base);
	    base += boxGap + boxWidth;
	    boxWidthList.push(Math.min(Math.max(boxWidth, boundList[idx][0]), boundList[idx][1]));
	  });
	}
	/**
	 * Calculate points location for each series.
	 */


	function layoutSingleSeries(seriesModel, offset, boxWidth) {
	  var coordSys = seriesModel.coordinateSystem;
	  var data = seriesModel.getData();
	  var halfWidth = boxWidth / 2;
	  var chartLayout = seriesModel.get('layout');
	  var variableDim = chartLayout === 'horizontal' ? 0 : 1;
	  var constDim = 1 - variableDim;
	  var coordDims = ['x', 'y'];
	  var vDims = [];
	  var cDim;
	  zrUtil.each(data.dimensions, function (dimName) {
	    var dimInfo = data.getDimensionInfo(dimName);
	    var coordDim = dimInfo.coordDim;

	    if (coordDim === coordDims[constDim]) {
	      vDims.push(dimName);
	    } else if (coordDim === coordDims[variableDim]) {
	      cDim = dimName;
	    }
	  });

	  if (cDim == null || vDims.length < 5) {
	    return;
	  }

	  data.each([cDim].concat(vDims), function () {
	    var args = arguments;
	    var axisDimVal = args[0];
	    var idx = args[vDims.length + 1];
	    var median = getPoint(args[3]);
	    var end1 = getPoint(args[1]);
	    var end5 = getPoint(args[5]);
	    var whiskerEnds = [[end1, getPoint(args[2])], [end5, getPoint(args[4])]];
	    layEndLine(end1);
	    layEndLine(end5);
	    layEndLine(median);
	    var bodyEnds = [];
	    addBodyEnd(whiskerEnds[0][1], 0);
	    addBodyEnd(whiskerEnds[1][1], 1);
	    data.setItemLayout(idx, {
	      chartLayout: chartLayout,
	      initBaseline: median[constDim],
	      median: median,
	      bodyEnds: bodyEnds,
	      whiskerEnds: whiskerEnds
	    });

	    function getPoint(val) {
	      var p = [];
	      p[variableDim] = axisDimVal;
	      p[constDim] = val;
	      var point;

	      if (isNaN(axisDimVal) || isNaN(val)) {
	        point = [NaN, NaN];
	      } else {
	        point = coordSys.dataToPoint(p);
	        point[variableDim] += offset;
	      }

	      return point;
	    }

	    function addBodyEnd(point, start) {
	      var point1 = point.slice();
	      var point2 = point.slice();
	      point1[variableDim] += halfWidth;
	      point2[variableDim] -= halfWidth;
	      start ? bodyEnds.push(point1, point2) : bodyEnds.push(point2, point1);
	    }

	    function layEndLine(endCenter) {
	      var line = [endCenter.slice(), endCenter.slice()];
	      line[0][variableDim] -= halfWidth;
	      line[1][variableDim] += halfWidth;
	      whiskerEnds.push(line);
	    }
	  });
	}

	module.exports = _default;

/***/ },
/* 437 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	__webpack_require__(438);

	__webpack_require__(439);

	var preprocessor = __webpack_require__(440);

	var candlestickVisual = __webpack_require__(441);

	var candlestickLayout = __webpack_require__(442);

	echarts.registerPreprocessor(preprocessor);
	echarts.registerVisual(candlestickVisual);
	echarts.registerLayout(candlestickLayout);

/***/ },
/* 438 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var SeriesModel = __webpack_require__(256);

	var _whiskerBoxCommon = __webpack_require__(432);

	var seriesModelMixin = _whiskerBoxCommon.seriesModelMixin;
	var CandlestickSeries = SeriesModel.extend({
	  type: 'series.candlestick',
	  dependencies: ['xAxis', 'yAxis', 'grid'],

	  /**
	   * @readOnly
	   */
	  defaultValueDimensions: ['open', 'close', 'lowest', 'highest'],

	  /**
	   * @type {Array.<string>}
	   * @readOnly
	   */
	  dimensions: null,

	  /**
	   * @override
	   */
	  defaultOption: {
	    zlevel: 0,
	    // 一级层叠
	    z: 2,
	    // 二级层叠
	    coordinateSystem: 'cartesian2d',
	    legendHoverLink: true,
	    hoverAnimation: true,
	    // xAxisIndex: 0,
	    // yAxisIndex: 0,
	    layout: null,
	    // 'horizontal' or 'vertical'
	    itemStyle: {
	      normal: {
	        color: '#c23531',
	        // 阳线 positive
	        color0: '#314656',
	        // 阴线 negative     '#c23531', '#314656'
	        borderWidth: 1,
	        // FIXME
	        // ec2中使用的是lineStyle.color 和 lineStyle.color0
	        borderColor: '#c23531',
	        borderColor0: '#314656'
	      },
	      emphasis: {
	        borderWidth: 2
	      }
	    },
	    barMaxWidth: null,
	    barMinWidth: null,
	    barWidth: null,
	    animationUpdate: false,
	    animationEasing: 'linear',
	    animationDuration: 300
	  },

	  /**
	   * Get dimension for shadow in dataZoom
	   * @return {string} dimension name
	   */
	  getShadowDim: function () {
	    return 'open';
	  },
	  brushSelector: function (dataIndex, data, selectors) {
	    var itemLayout = data.getItemLayout(dataIndex);
	    return selectors.rect(itemLayout.brushRect);
	  }
	});
	zrUtil.mixin(CandlestickSeries, seriesModelMixin, true);
	var _default = CandlestickSeries;
	module.exports = _default;

/***/ },
/* 439 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var ChartView = __webpack_require__(258);

	var graphic = __webpack_require__(212);

	var _whiskerBoxCommon = __webpack_require__(432);

	var viewMixin = _whiskerBoxCommon.viewMixin;
	var CandlestickView = ChartView.extend({
	  type: 'candlestick',
	  getStyleUpdater: function () {
	    return updateStyle;
	  },
	  dispose: zrUtil.noop
	});
	zrUtil.mixin(CandlestickView, viewMixin, true); // Update common properties

	var normalStyleAccessPath = ['itemStyle', 'normal'];
	var emphasisStyleAccessPath = ['itemStyle', 'emphasis'];

	function updateStyle(itemGroup, data, idx) {
	  var itemModel = data.getItemModel(idx);
	  var normalItemStyleModel = itemModel.getModel(normalStyleAccessPath);
	  var color = data.getItemVisual(idx, 'color');
	  var borderColor = data.getItemVisual(idx, 'borderColor') || color; // Color must be excluded.
	  // Because symbol provide setColor individually to set fill and stroke

	  var itemStyle = normalItemStyleModel.getItemStyle(['color', 'color0', 'borderColor', 'borderColor0']);
	  var whiskerEl = itemGroup.childAt(itemGroup.whiskerIndex);
	  whiskerEl.useStyle(itemStyle);
	  whiskerEl.style.stroke = borderColor;
	  var bodyEl = itemGroup.childAt(itemGroup.bodyIndex);
	  bodyEl.useStyle(itemStyle);
	  bodyEl.style.fill = color;
	  bodyEl.style.stroke = borderColor;
	  var hoverStyle = itemModel.getModel(emphasisStyleAccessPath).getItemStyle();
	  graphic.setHoverStyle(itemGroup, hoverStyle);
	}

	var _default = CandlestickView;
	module.exports = _default;

/***/ },
/* 440 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	function _default(option) {
	  if (!option || !zrUtil.isArray(option.series)) {
	    return;
	  } // Translate 'k' to 'candlestick'.


	  zrUtil.each(option.series, function (seriesItem) {
	    if (zrUtil.isObject(seriesItem) && seriesItem.type === 'k') {
	      seriesItem.type = 'candlestick';
	    }
	  });
	}

	module.exports = _default;

/***/ },
/* 441 */
/***/ function(module, exports) {

	var positiveBorderColorQuery = ['itemStyle', 'normal', 'borderColor'];
	var negativeBorderColorQuery = ['itemStyle', 'normal', 'borderColor0'];
	var positiveColorQuery = ['itemStyle', 'normal', 'color'];
	var negativeColorQuery = ['itemStyle', 'normal', 'color0'];

	function _default(ecModel, api) {
	  ecModel.eachRawSeriesByType('candlestick', function (seriesModel) {
	    var data = seriesModel.getData();
	    data.setVisual({
	      legendSymbol: 'roundRect'
	    }); // Only visible series has each data be visual encoded

	    if (!ecModel.isSeriesFiltered(seriesModel)) {
	      data.each(function (idx) {
	        var itemModel = data.getItemModel(idx);
	        var sign = data.getItemLayout(idx).sign;
	        data.setItemVisual(idx, {
	          color: itemModel.get(sign > 0 ? positiveColorQuery : negativeColorQuery),
	          borderColor: itemModel.get(sign > 0 ? positiveBorderColorQuery : negativeBorderColorQuery)
	        });
	      });
	    }
	  });
	}

	module.exports = _default;

/***/ },
/* 442 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var _number = __webpack_require__(205);

	var parsePercent = _number.parsePercent;

	var _graphic = __webpack_require__(212);

	var subPixelOptimize = _graphic.subPixelOptimize;
	var retrieve2 = zrUtil.retrieve2;

	function _default(ecModel) {
	  ecModel.eachSeriesByType('candlestick', function (seriesModel) {
	    var coordSys = seriesModel.coordinateSystem;
	    var data = seriesModel.getData();
	    var candleWidth = calculateCandleWidth(seriesModel, data);
	    var chartLayout = seriesModel.get('layout');
	    var variableDim = chartLayout === 'horizontal' ? 0 : 1;
	    var constDim = 1 - variableDim;
	    var coordDims = ['x', 'y'];
	    var vDims = [];
	    var cDim;
	    zrUtil.each(data.dimensions, function (dimName) {
	      var dimInfo = data.getDimensionInfo(dimName);
	      var coordDim = dimInfo.coordDim;

	      if (coordDim === coordDims[constDim]) {
	        vDims.push(dimName);
	      } else if (coordDim === coordDims[variableDim]) {
	        cDim = dimName;
	      }
	    });

	    if (cDim == null || vDims.length < 4) {
	      return;
	    }

	    var dataIndex = 0;
	    data.each([cDim].concat(vDims), function () {
	      var args = arguments;
	      var axisDimVal = args[0];
	      var idx = args[vDims.length + 1];
	      var openVal = args[1];
	      var closeVal = args[2];
	      var lowestVal = args[3];
	      var highestVal = args[4];
	      var ocLow = Math.min(openVal, closeVal);
	      var ocHigh = Math.max(openVal, closeVal);
	      var ocLowPoint = getPoint(ocLow);
	      var ocHighPoint = getPoint(ocHigh);
	      var lowestPoint = getPoint(lowestVal);
	      var highestPoint = getPoint(highestVal);
	      var whiskerEnds = [[subPixelOptimizePoint(highestPoint), subPixelOptimizePoint(ocHighPoint)], [subPixelOptimizePoint(lowestPoint), subPixelOptimizePoint(ocLowPoint)]];
	      var bodyEnds = [];
	      addBodyEnd(ocHighPoint, 0);
	      addBodyEnd(ocLowPoint, 1);
	      var sign;

	      if (openVal > closeVal) {
	        sign = -1;
	      } else if (openVal < closeVal) {
	        sign = 1;
	      } else {
	        // If close === open, compare with close of last record
	        if (dataIndex > 0) {
	          sign = data.getItemModel(dataIndex - 1).get()[2] <= closeVal ? 1 : -1;
	        } else {
	          // No record of previous, set to be positive
	          sign = 1;
	        }
	      }

	      data.setItemLayout(idx, {
	        chartLayout: chartLayout,
	        sign: sign,
	        initBaseline: openVal > closeVal ? ocHighPoint[constDim] : ocLowPoint[constDim],
	        // open point.
	        bodyEnds: bodyEnds,
	        whiskerEnds: whiskerEnds,
	        brushRect: makeBrushRect()
	      });
	      ++dataIndex;

	      function getPoint(val) {
	        var p = [];
	        p[variableDim] = axisDimVal;
	        p[constDim] = val;
	        return isNaN(axisDimVal) || isNaN(val) ? [NaN, NaN] : coordSys.dataToPoint(p);
	      }

	      function addBodyEnd(point, start) {
	        var point1 = point.slice();
	        var point2 = point.slice();
	        point1[variableDim] = subPixelOptimize(point1[variableDim] + candleWidth / 2, 1, false);
	        point2[variableDim] = subPixelOptimize(point2[variableDim] - candleWidth / 2, 1, true);
	        start ? bodyEnds.push(point1, point2) : bodyEnds.push(point2, point1);
	      }

	      function makeBrushRect() {
	        var pmin = getPoint(Math.min(openVal, closeVal, lowestVal, highestVal));
	        var pmax = getPoint(Math.max(openVal, closeVal, lowestVal, highestVal));
	        pmin[variableDim] -= candleWidth / 2;
	        pmax[variableDim] -= candleWidth / 2;
	        return {
	          x: pmin[0],
	          y: pmin[1],
	          width: constDim ? candleWidth : pmax[0] - pmin[0],
	          height: constDim ? pmax[1] - pmin[1] : candleWidth
	        };
	      }

	      function subPixelOptimizePoint(point) {
	        point[variableDim] = subPixelOptimize(point[variableDim], 1);
	        return point;
	      }
	    }, true);
	  });
	}

	function calculateCandleWidth(seriesModel, data) {
	  var baseAxis = seriesModel.getBaseAxis();
	  var extent;
	  var bandWidth = baseAxis.type === 'category' ? baseAxis.getBandWidth() : (extent = baseAxis.getExtent(), Math.abs(extent[1] - extent[0]) / data.count());
	  var barMaxWidth = parsePercent(retrieve2(seriesModel.get('barMaxWidth'), bandWidth), bandWidth);
	  var barMinWidth = parsePercent(retrieve2(seriesModel.get('barMinWidth'), 1), bandWidth);
	  var barWidth = seriesModel.get('barWidth');
	  return barWidth != null ? parsePercent(barWidth, bandWidth) // Put max outer to ensure bar visible in spite of overlap.
	  : Math.max(Math.min(bandWidth / 2, barMaxWidth), barMinWidth);
	}

	module.exports = _default;

/***/ },
/* 443 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var zrUtil = __webpack_require__(166);

	__webpack_require__(444);

	__webpack_require__(445);

	var visualSymbol = __webpack_require__(289);

	var layoutPoints = __webpack_require__(290);

	echarts.registerVisual(zrUtil.curry(visualSymbol, 'effectScatter', 'circle', null));
	echarts.registerLayout(zrUtil.curry(layoutPoints, 'effectScatter'));

/***/ },
/* 444 */
/***/ function(module, exports, __webpack_require__) {

	var createListFromArray = __webpack_require__(264);

	var SeriesModel = __webpack_require__(256);

	var _default = SeriesModel.extend({
	  type: 'series.effectScatter',
	  dependencies: ['grid', 'polar'],
	  getInitialData: function (option, ecModel) {
	    var list = createListFromArray(option.data, this, ecModel);
	    return list;
	  },
	  brushSelector: 'point',
	  defaultOption: {
	    coordinateSystem: 'cartesian2d',
	    zlevel: 0,
	    z: 2,
	    legendHoverLink: true,
	    effectType: 'ripple',
	    progressive: 0,
	    // When to show the effect, option: 'render'|'emphasis'
	    showEffectOn: 'render',
	    // Ripple effect config
	    rippleEffect: {
	      period: 4,
	      // Scale of ripple
	      scale: 2.5,
	      // Brush type can be fill or stroke
	      brushType: 'fill'
	    },
	    // Cartesian coordinate system
	    // xAxisIndex: 0,
	    // yAxisIndex: 0,
	    // Polar coordinate system
	    // polarIndex: 0,
	    // Geo coordinate system
	    // geoIndex: 0,
	    // symbol: null,        // 图形类型
	    symbolSize: 10 // 图形大小，半宽（半径）参数，当图形为方向或菱形则总宽度为symbolSize * 2
	    // symbolRotate: null,  // 图形旋转控制
	    // large: false,
	    // Available when large is true
	    // largeThreshold: 2000,
	    // itemStyle: {
	    //     normal: {
	    //         opacity: 1
	    //     }
	    // }

	  }
	});

	module.exports = _default;

/***/ },
/* 445 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var SymbolDraw = __webpack_require__(284);

	var EffectSymbol = __webpack_require__(446);

	var _default = echarts.extendChartView({
	  type: 'effectScatter',
	  init: function () {
	    this._symbolDraw = new SymbolDraw(EffectSymbol);
	  },
	  render: function (seriesModel, ecModel, api) {
	    var data = seriesModel.getData();
	    var effectSymbolDraw = this._symbolDraw;
	    effectSymbolDraw.updateData(data);
	    this.group.add(effectSymbolDraw.group);
	  },
	  updateLayout: function () {
	    this._symbolDraw.updateLayout();
	  },
	  remove: function (ecModel, api) {
	    this._symbolDraw && this._symbolDraw.remove(api);
	  },
	  dispose: function () {}
	});

	module.exports = _default;

/***/ },
/* 446 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var _symbol = __webpack_require__(276);

	var createSymbol = _symbol.createSymbol;

	var _graphic = __webpack_require__(212);

	var Group = _graphic.Group;

	var _number = __webpack_require__(205);

	var parsePercent = _number.parsePercent;

	var SymbolClz = __webpack_require__(285);

	/**
	 * Symbol with ripple effect
	 * @module echarts/chart/helper/EffectSymbol
	 */
	var EFFECT_RIPPLE_NUMBER = 3;

	function normalizeSymbolSize(symbolSize) {
	  if (!zrUtil.isArray(symbolSize)) {
	    symbolSize = [+symbolSize, +symbolSize];
	  }

	  return symbolSize;
	}

	function updateRipplePath(rippleGroup, effectCfg) {
	  rippleGroup.eachChild(function (ripplePath) {
	    ripplePath.attr({
	      z: effectCfg.z,
	      zlevel: effectCfg.zlevel,
	      style: {
	        stroke: effectCfg.brushType === 'stroke' ? effectCfg.color : null,
	        fill: effectCfg.brushType === 'fill' ? effectCfg.color : null
	      }
	    });
	  });
	}
	/**
	 * @constructor
	 * @param {module:echarts/data/List} data
	 * @param {number} idx
	 * @extends {module:zrender/graphic/Group}
	 */


	function EffectSymbol(data, idx) {
	  Group.call(this);
	  var symbol = new SymbolClz(data, idx);
	  var rippleGroup = new Group();
	  this.add(symbol);
	  this.add(rippleGroup);

	  rippleGroup.beforeUpdate = function () {
	    this.attr(symbol.getScale());
	  };

	  this.updateData(data, idx);
	}

	var effectSymbolProto = EffectSymbol.prototype;

	effectSymbolProto.stopEffectAnimation = function () {
	  this.childAt(1).removeAll();
	};

	effectSymbolProto.startEffectAnimation = function (effectCfg) {
	  var symbolType = effectCfg.symbolType;
	  var color = effectCfg.color;
	  var rippleGroup = this.childAt(1);

	  for (var i = 0; i < EFFECT_RIPPLE_NUMBER; i++) {
	    // var ripplePath = createSymbol(
	    //     symbolType, -0.5, -0.5, 1, 1, color
	    // );
	    // If width/height are set too small (e.g., set to 1) on ios10
	    // and macOS Sierra, a circle stroke become a rect, no matter what
	    // the scale is set. So we set width/height as 2. See #4136.
	    var ripplePath = createSymbol(symbolType, -1, -1, 2, 2, color);
	    ripplePath.attr({
	      style: {
	        strokeNoScale: true
	      },
	      z2: 99,
	      silent: true,
	      scale: [0.5, 0.5]
	    });
	    var delay = -i / EFFECT_RIPPLE_NUMBER * effectCfg.period + effectCfg.effectOffset; // TODO Configurable effectCfg.period

	    ripplePath.animate('', true).when(effectCfg.period, {
	      scale: [effectCfg.rippleScale / 2, effectCfg.rippleScale / 2]
	    }).delay(delay).start();
	    ripplePath.animateStyle(true).when(effectCfg.period, {
	      opacity: 0
	    }).delay(delay).start();
	    rippleGroup.add(ripplePath);
	  }

	  updateRipplePath(rippleGroup, effectCfg);
	};
	/**
	 * Update effect symbol
	 */


	effectSymbolProto.updateEffectAnimation = function (effectCfg) {
	  var oldEffectCfg = this._effectCfg;
	  var rippleGroup = this.childAt(1); // Must reinitialize effect if following configuration changed

	  var DIFFICULT_PROPS = ['symbolType', 'period', 'rippleScale'];

	  for (var i = 0; i < DIFFICULT_PROPS.length; i++) {
	    var propName = DIFFICULT_PROPS[i];

	    if (oldEffectCfg[propName] !== effectCfg[propName]) {
	      this.stopEffectAnimation();
	      this.startEffectAnimation(effectCfg);
	      return;
	    }
	  }

	  updateRipplePath(rippleGroup, effectCfg);
	};
	/**
	 * Highlight symbol
	 */


	effectSymbolProto.highlight = function () {
	  this.trigger('emphasis');
	};
	/**
	 * Downplay symbol
	 */


	effectSymbolProto.downplay = function () {
	  this.trigger('normal');
	};
	/**
	 * Update symbol properties
	 * @param  {module:echarts/data/List} data
	 * @param  {number} idx
	 */


	effectSymbolProto.updateData = function (data, idx) {
	  var seriesModel = data.hostModel;
	  this.childAt(0).updateData(data, idx);
	  var rippleGroup = this.childAt(1);
	  var itemModel = data.getItemModel(idx);
	  var symbolType = data.getItemVisual(idx, 'symbol');
	  var symbolSize = normalizeSymbolSize(data.getItemVisual(idx, 'symbolSize'));
	  var color = data.getItemVisual(idx, 'color');
	  rippleGroup.attr('scale', symbolSize);
	  rippleGroup.traverse(function (ripplePath) {
	    ripplePath.attr({
	      fill: color
	    });
	  });
	  var symbolOffset = itemModel.getShallow('symbolOffset');

	  if (symbolOffset) {
	    var pos = rippleGroup.position;
	    pos[0] = parsePercent(symbolOffset[0], symbolSize[0]);
	    pos[1] = parsePercent(symbolOffset[1], symbolSize[1]);
	  }

	  rippleGroup.rotation = (itemModel.getShallow('symbolRotate') || 0) * Math.PI / 180 || 0;
	  var effectCfg = {};
	  effectCfg.showEffectOn = seriesModel.get('showEffectOn');
	  effectCfg.rippleScale = itemModel.get('rippleEffect.scale');
	  effectCfg.brushType = itemModel.get('rippleEffect.brushType');
	  effectCfg.period = itemModel.get('rippleEffect.period') * 1000;
	  effectCfg.effectOffset = idx / data.count();
	  effectCfg.z = itemModel.getShallow('z') || 0;
	  effectCfg.zlevel = itemModel.getShallow('zlevel') || 0;
	  effectCfg.symbolType = symbolType;
	  effectCfg.color = color;
	  this.off('mouseover').off('mouseout').off('emphasis').off('normal');

	  if (effectCfg.showEffectOn === 'render') {
	    this._effectCfg ? this.updateEffectAnimation(effectCfg) : this.startEffectAnimation(effectCfg);
	    this._effectCfg = effectCfg;
	  } else {
	    // Not keep old effect config
	    this._effectCfg = null;
	    this.stopEffectAnimation();
	    var symbol = this.childAt(0);

	    var onEmphasis = function () {
	      symbol.highlight();

	      if (effectCfg.showEffectOn !== 'render') {
	        this.startEffectAnimation(effectCfg);
	      }
	    };

	    var onNormal = function () {
	      symbol.downplay();

	      if (effectCfg.showEffectOn !== 'render') {
	        this.stopEffectAnimation();
	      }
	    };

	    this.on('mouseover', onEmphasis, this).on('mouseout', onNormal, this).on('emphasis', onEmphasis, this).on('normal', onNormal, this);
	  }

	  this._effectCfg = effectCfg;
	};

	effectSymbolProto.fadeOut = function (cb) {
	  this.off('mouseover').off('mouseout').off('emphasis').off('normal');
	  cb && cb();
	};

	zrUtil.inherits(EffectSymbol, Group);
	var _default = EffectSymbol;
	module.exports = _default;

/***/ },
/* 447 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	__webpack_require__(448);

	__webpack_require__(449);

	var linesLayout = __webpack_require__(454);

	var linesVisual = __webpack_require__(455);

	echarts.registerLayout(linesLayout);
	echarts.registerVisual(linesVisual);

/***/ },
/* 448 */
/***/ function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(162);

	var __DEV__ = _config.__DEV__;

	var SeriesModel = __webpack_require__(256);

	var List = __webpack_require__(265);

	var zrUtil = __webpack_require__(166);

	var _format = __webpack_require__(204);

	var encodeHTML = _format.encodeHTML;

	var CoordinateSystem = __webpack_require__(252);

	// Convert [ [{coord: []}, {coord: []}] ]
	// to [ { coords: [[]] } ]
	function preprocessOption(seriesOpt) {
	  var data = seriesOpt.data;

	  if (data && data[0] && data[0][0] && data[0][0].coord) {
	    seriesOpt.data = zrUtil.map(data, function (itemOpt) {
	      var coords = [itemOpt[0].coord, itemOpt[1].coord];
	      var target = {
	        coords: coords
	      };

	      if (itemOpt[0].name) {
	        target.fromName = itemOpt[0].name;
	      }

	      if (itemOpt[1].name) {
	        target.toName = itemOpt[1].name;
	      }

	      return zrUtil.mergeAll([target, itemOpt[0], itemOpt[1]]);
	    });
	  }
	}

	var LinesSeries = SeriesModel.extend({
	  type: 'series.lines',
	  dependencies: ['grid', 'polar'],
	  visualColorAccessPath: 'lineStyle.normal.color',
	  init: function (option) {
	    // Not using preprocessor because mergeOption may not have series.type
	    preprocessOption(option);
	    LinesSeries.superApply(this, 'init', arguments);
	  },
	  mergeOption: function (option) {
	    preprocessOption(option);
	    LinesSeries.superApply(this, 'mergeOption', arguments);
	  },
	  getInitialData: function (option, ecModel) {
	    var lineData = new List(['value'], this);
	    lineData.hasItemOption = false;
	    lineData.initData(option.data, [], function (dataItem, dimName, dataIndex, dimIndex) {
	      // dataItem is simply coords
	      if (dataItem instanceof Array) {
	        return NaN;
	      } else {
	        lineData.hasItemOption = true;
	        var value = dataItem.value;

	        if (value != null) {
	          return value instanceof Array ? value[dimIndex] : value;
	        }
	      }
	    });
	    return lineData;
	  },
	  formatTooltip: function (dataIndex) {
	    var data = this.getData();
	    var itemModel = data.getItemModel(dataIndex);
	    var name = itemModel.get('name');

	    if (name) {
	      return name;
	    }

	    var fromName = itemModel.get('fromName');
	    var toName = itemModel.get('toName');
	    var html = [];
	    fromName != null && html.push(fromName);
	    toName != null && html.push(toName);
	    return encodeHTML(html.join(' > '));
	  },
	  defaultOption: {
	    coordinateSystem: 'geo',
	    zlevel: 0,
	    z: 2,
	    legendHoverLink: true,
	    hoverAnimation: true,
	    // Cartesian coordinate system
	    xAxisIndex: 0,
	    yAxisIndex: 0,
	    symbol: ['none', 'none'],
	    symbolSize: [10, 10],
	    // Geo coordinate system
	    geoIndex: 0,
	    effect: {
	      show: false,
	      period: 4,
	      // Animation delay. support callback
	      // delay: 0,
	      // If move with constant speed px/sec
	      // period will be ignored if this property is > 0,
	      constantSpeed: 0,
	      symbol: 'circle',
	      symbolSize: 3,
	      loop: true,
	      // Length of trail, 0 - 1
	      trailLength: 0.2 // Same with lineStyle.normal.color
	      // color

	    },
	    large: false,
	    // Available when large is true
	    largeThreshold: 2000,
	    // If lines are polyline
	    // polyline not support curveness, label, animation
	    polyline: false,
	    label: {
	      normal: {
	        show: false,
	        position: 'end' // distance: 5,
	        // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调

	      }
	    },
	    lineStyle: {
	      normal: {
	        opacity: 0.5
	      }
	    }
	  }
	});
	var _default = LinesSeries;
	module.exports = _default;

/***/ },
/* 449 */
/***/ function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(162);

	var __DEV__ = _config.__DEV__;

	var echarts = __webpack_require__(161);

	var LineDraw = __webpack_require__(384);

	var EffectLine = __webpack_require__(450);

	var Line = __webpack_require__(385);

	var Polyline = __webpack_require__(451);

	var EffectPolyline = __webpack_require__(452);

	var LargeLineDraw = __webpack_require__(453);

	var _default = echarts.extendChartView({
	  type: 'lines',
	  init: function () {},
	  render: function (seriesModel, ecModel, api) {
	    var data = seriesModel.getData();
	    var lineDraw = this._lineDraw;
	    var hasEffect = seriesModel.get('effect.show');
	    var isPolyline = seriesModel.get('polyline');
	    var isLarge = seriesModel.get('large') && data.count() >= seriesModel.get('largeThreshold');

	    if (hasEffect !== this._hasEffet || isPolyline !== this._isPolyline || isLarge !== this._isLarge) {
	      if (lineDraw) {
	        lineDraw.remove();
	      }

	      lineDraw = this._lineDraw = isLarge ? new LargeLineDraw() : new LineDraw(isPolyline ? hasEffect ? EffectPolyline : Polyline : hasEffect ? EffectLine : Line);
	      this._hasEffet = hasEffect;
	      this._isPolyline = isPolyline;
	      this._isLarge = isLarge;
	    }

	    var zlevel = seriesModel.get('zlevel');
	    var trailLength = seriesModel.get('effect.trailLength');
	    var zr = api.getZr(); // Avoid the drag cause ghost shadow
	    // FIXME Better way ?
	    // SVG doesn't support

	    var isSvg = zr.painter.getType() === 'svg';

	    if (!isSvg) {
	      zr.painter.getLayer(zlevel).clear(true);
	    } // Config layer with motion blur


	    if (this._lastZlevel != null && !isSvg) {
	      zr.configLayer(this._lastZlevel, {
	        motionBlur: false
	      });
	    }

	    if (hasEffect && trailLength) {
	      if (!isSvg) {
	        zr.configLayer(zlevel, {
	          motionBlur: true,
	          lastFrameAlpha: Math.max(Math.min(trailLength / 10 + 0.9, 1), 0)
	        });
	      }
	    }

	    this.group.add(lineDraw.group);
	    lineDraw.updateData(data);
	    this._lastZlevel = zlevel;
	  },
	  updateLayout: function (seriesModel, ecModel, api) {
	    this._lineDraw.updateLayout(seriesModel); // Not use motion when dragging or zooming


	    var zr = api.getZr();
	    var isSvg = zr.painter.getType() === 'svg';

	    if (!isSvg) {
	      zr.painter.getLayer(this._lastZlevel).clear(true);
	    }
	  },
	  remove: function (ecModel, api) {
	    this._lineDraw && this._lineDraw.remove(api, true); // Clear motion when lineDraw is removed

	    var zr = api.getZr();
	    var isSvg = zr.painter.getType() === 'svg';

	    if (!isSvg) {
	      zr.painter.getLayer(this._lastZlevel).clear(true);
	    }
	  },
	  dispose: function () {}
	});

	module.exports = _default;

/***/ },
/* 450 */
/***/ function(module, exports, __webpack_require__) {

	var graphic = __webpack_require__(212);

	var Line = __webpack_require__(385);

	var zrUtil = __webpack_require__(166);

	var _symbol = __webpack_require__(276);

	var createSymbol = _symbol.createSymbol;

	var vec2 = __webpack_require__(168);

	var curveUtil = __webpack_require__(216);

	/**
	 * Provide effect for line
	 * @module echarts/chart/helper/EffectLine
	 */

	/**
	 * @constructor
	 * @extends {module:zrender/graphic/Group}
	 * @alias {module:echarts/chart/helper/Line}
	 */
	function EffectLine(lineData, idx, seriesScope) {
	  graphic.Group.call(this);
	  this.add(this.createLine(lineData, idx, seriesScope));

	  this._updateEffectSymbol(lineData, idx);
	}

	var effectLineProto = EffectLine.prototype;

	effectLineProto.createLine = function (lineData, idx, seriesScope) {
	  return new Line(lineData, idx, seriesScope);
	};

	effectLineProto._updateEffectSymbol = function (lineData, idx) {
	  var itemModel = lineData.getItemModel(idx);
	  var effectModel = itemModel.getModel('effect');
	  var size = effectModel.get('symbolSize');
	  var symbolType = effectModel.get('symbol');

	  if (!zrUtil.isArray(size)) {
	    size = [size, size];
	  }

	  var color = effectModel.get('color') || lineData.getItemVisual(idx, 'color');
	  var symbol = this.childAt(1);

	  if (this._symbolType !== symbolType) {
	    // Remove previous
	    this.remove(symbol);
	    symbol = createSymbol(symbolType, -0.5, -0.5, 1, 1, color);
	    symbol.z2 = 100;
	    symbol.culling = true;
	    this.add(symbol);
	  } // Symbol may be removed if loop is false


	  if (!symbol) {
	    return;
	  } // Shadow color is same with color in default


	  symbol.setStyle('shadowColor', color);
	  symbol.setStyle(effectModel.getItemStyle(['color']));
	  symbol.attr('scale', size);
	  symbol.setColor(color);
	  symbol.attr('scale', size);
	  this._symbolType = symbolType;

	  this._updateEffectAnimation(lineData, effectModel, idx);
	};

	effectLineProto._updateEffectAnimation = function (lineData, effectModel, idx) {
	  var symbol = this.childAt(1);

	  if (!symbol) {
	    return;
	  }

	  var self = this;
	  var points = lineData.getItemLayout(idx);
	  var period = effectModel.get('period') * 1000;
	  var loop = effectModel.get('loop');
	  var constantSpeed = effectModel.get('constantSpeed');
	  var delayExpr = zrUtil.retrieve(effectModel.get('delay'), function (idx) {
	    return idx / lineData.count() * period / 3;
	  });
	  var isDelayFunc = typeof delayExpr === 'function'; // Ignore when updating

	  symbol.ignore = true;
	  this.updateAnimationPoints(symbol, points);

	  if (constantSpeed > 0) {
	    period = this.getLineLength(symbol) / constantSpeed * 1000;
	  }

	  if (period !== this._period || loop !== this._loop) {
	    symbol.stopAnimation();
	    var delay = delayExpr;

	    if (isDelayFunc) {
	      delay = delayExpr(idx);
	    }

	    if (symbol.__t > 0) {
	      delay = -period * symbol.__t;
	    }

	    symbol.__t = 0;
	    var animator = symbol.animate('', loop).when(period, {
	      __t: 1
	    }).delay(delay).during(function () {
	      self.updateSymbolPosition(symbol);
	    });

	    if (!loop) {
	      animator.done(function () {
	        self.remove(symbol);
	      });
	    }

	    animator.start();
	  }

	  this._period = period;
	  this._loop = loop;
	};

	effectLineProto.getLineLength = function (symbol) {
	  // Not so accurate
	  return vec2.dist(symbol.__p1, symbol.__cp1) + vec2.dist(symbol.__cp1, symbol.__p2);
	};

	effectLineProto.updateAnimationPoints = function (symbol, points) {
	  symbol.__p1 = points[0];
	  symbol.__p2 = points[1];
	  symbol.__cp1 = points[2] || [(points[0][0] + points[1][0]) / 2, (points[0][1] + points[1][1]) / 2];
	};

	effectLineProto.updateData = function (lineData, idx, seriesScope) {
	  this.childAt(0).updateData(lineData, idx, seriesScope);

	  this._updateEffectSymbol(lineData, idx);
	};

	effectLineProto.updateSymbolPosition = function (symbol) {
	  var p1 = symbol.__p1;
	  var p2 = symbol.__p2;
	  var cp1 = symbol.__cp1;
	  var t = symbol.__t;
	  var pos = symbol.position;
	  var quadraticAt = curveUtil.quadraticAt;
	  var quadraticDerivativeAt = curveUtil.quadraticDerivativeAt;
	  pos[0] = quadraticAt(p1[0], cp1[0], p2[0], t);
	  pos[1] = quadraticAt(p1[1], cp1[1], p2[1], t); // Tangent

	  var tx = quadraticDerivativeAt(p1[0], cp1[0], p2[0], t);
	  var ty = quadraticDerivativeAt(p1[1], cp1[1], p2[1], t);
	  symbol.rotation = -Math.atan2(ty, tx) - Math.PI / 2;
	  symbol.ignore = false;
	};

	effectLineProto.updateLayout = function (lineData, idx) {
	  this.childAt(0).updateLayout(lineData, idx);
	  var effectModel = lineData.getItemModel(idx).getModel('effect');

	  this._updateEffectAnimation(lineData, effectModel, idx);
	};

	zrUtil.inherits(EffectLine, graphic.Group);
	var _default = EffectLine;
	module.exports = _default;

/***/ },
/* 451 */
/***/ function(module, exports, __webpack_require__) {

	var graphic = __webpack_require__(212);

	var zrUtil = __webpack_require__(166);

	/**
	 * @module echarts/chart/helper/Line
	 */

	/**
	 * @constructor
	 * @extends {module:zrender/graphic/Group}
	 * @alias {module:echarts/chart/helper/Polyline}
	 */
	function Polyline(lineData, idx, seriesScope) {
	  graphic.Group.call(this);

	  this._createPolyline(lineData, idx, seriesScope);
	}

	var polylineProto = Polyline.prototype;

	polylineProto._createPolyline = function (lineData, idx, seriesScope) {
	  // var seriesModel = lineData.hostModel;
	  var points = lineData.getItemLayout(idx);
	  var line = new graphic.Polyline({
	    shape: {
	      points: points
	    }
	  });
	  this.add(line);

	  this._updateCommonStl(lineData, idx, seriesScope);
	};

	polylineProto.updateData = function (lineData, idx, seriesScope) {
	  var seriesModel = lineData.hostModel;
	  var line = this.childAt(0);
	  var target = {
	    shape: {
	      points: lineData.getItemLayout(idx)
	    }
	  };
	  graphic.updateProps(line, target, seriesModel, idx);

	  this._updateCommonStl(lineData, idx, seriesScope);
	};

	polylineProto._updateCommonStl = function (lineData, idx, seriesScope) {
	  var line = this.childAt(0);
	  var itemModel = lineData.getItemModel(idx);
	  var visualColor = lineData.getItemVisual(idx, 'color');
	  var lineStyle = seriesScope && seriesScope.lineStyle;
	  var hoverLineStyle = seriesScope && seriesScope.hoverLineStyle;

	  if (!seriesScope || lineData.hasItemOption) {
	    lineStyle = itemModel.getModel('lineStyle.normal').getLineStyle();
	    hoverLineStyle = itemModel.getModel('lineStyle.emphasis').getLineStyle();
	  }

	  line.useStyle(zrUtil.defaults({
	    strokeNoScale: true,
	    fill: 'none',
	    stroke: visualColor
	  }, lineStyle));
	  line.hoverStyle = hoverLineStyle;
	  graphic.setHoverStyle(this);
	};

	polylineProto.updateLayout = function (lineData, idx) {
	  var polyline = this.childAt(0);
	  polyline.setShape('points', lineData.getItemLayout(idx));
	};

	zrUtil.inherits(Polyline, graphic.Group);
	var _default = Polyline;
	module.exports = _default;

/***/ },
/* 452 */
/***/ function(module, exports, __webpack_require__) {

	var Polyline = __webpack_require__(451);

	var zrUtil = __webpack_require__(166);

	var EffectLine = __webpack_require__(450);

	var vec2 = __webpack_require__(168);

	/**
	 * Provide effect for line
	 * @module echarts/chart/helper/EffectLine
	 */

	/**
	 * @constructor
	 * @extends {module:echarts/chart/helper/EffectLine}
	 * @alias {module:echarts/chart/helper/Polyline}
	 */
	function EffectPolyline(lineData, idx, seriesScope) {
	  EffectLine.call(this, lineData, idx, seriesScope);
	  this._lastFrame = 0;
	  this._lastFramePercent = 0;
	}

	var effectPolylineProto = EffectPolyline.prototype; // Overwrite

	effectPolylineProto.createLine = function (lineData, idx, seriesScope) {
	  return new Polyline(lineData, idx, seriesScope);
	}; // Overwrite


	effectPolylineProto.updateAnimationPoints = function (symbol, points) {
	  this._points = points;
	  var accLenArr = [0];
	  var len = 0;

	  for (var i = 1; i < points.length; i++) {
	    var p1 = points[i - 1];
	    var p2 = points[i];
	    len += vec2.dist(p1, p2);
	    accLenArr.push(len);
	  }

	  if (len === 0) {
	    return;
	  }

	  for (var i = 0; i < accLenArr.length; i++) {
	    accLenArr[i] /= len;
	  }

	  this._offsets = accLenArr;
	  this._length = len;
	}; // Overwrite


	effectPolylineProto.getLineLength = function (symbol) {
	  return this._length;
	}; // Overwrite


	effectPolylineProto.updateSymbolPosition = function (symbol) {
	  var t = symbol.__t;
	  var points = this._points;
	  var offsets = this._offsets;
	  var len = points.length;

	  if (!offsets) {
	    // Has length 0
	    return;
	  }

	  var lastFrame = this._lastFrame;
	  var frame;

	  if (t < this._lastFramePercent) {
	    // Start from the next frame
	    // PENDING start from lastFrame ?
	    var start = Math.min(lastFrame + 1, len - 1);

	    for (frame = start; frame >= 0; frame--) {
	      if (offsets[frame] <= t) {
	        break;
	      }
	    } // PENDING really need to do this ?


	    frame = Math.min(frame, len - 2);
	  } else {
	    for (var frame = lastFrame; frame < len; frame++) {
	      if (offsets[frame] > t) {
	        break;
	      }
	    }

	    frame = Math.min(frame - 1, len - 2);
	  }

	  vec2.lerp(symbol.position, points[frame], points[frame + 1], (t - offsets[frame]) / (offsets[frame + 1] - offsets[frame]));
	  var tx = points[frame + 1][0] - points[frame][0];
	  var ty = points[frame + 1][1] - points[frame][1];
	  symbol.rotation = -Math.atan2(ty, tx) - Math.PI / 2;
	  this._lastFrame = frame;
	  this._lastFramePercent = t;
	  symbol.ignore = false;
	};

	zrUtil.inherits(EffectPolyline, EffectLine);
	var _default = EffectPolyline;
	module.exports = _default;

/***/ },
/* 453 */
/***/ function(module, exports, __webpack_require__) {

	var graphic = __webpack_require__(212);

	var lineContain = __webpack_require__(219);

	var quadraticContain = __webpack_require__(221);

	// TODO Batch by color
	var LargeLineShape = graphic.extendShape({
	  shape: {
	    polyline: false,
	    segs: []
	  },
	  buildPath: function (path, shape) {
	    var segs = shape.segs;
	    var isPolyline = shape.polyline;

	    for (var i = 0; i < segs.length; i++) {
	      var seg = segs[i];

	      if (isPolyline) {
	        path.moveTo(seg[0][0], seg[0][1]);

	        for (var j = 1; j < seg.length; j++) {
	          path.lineTo(seg[j][0], seg[j][1]);
	        }
	      } else {
	        path.moveTo(seg[0][0], seg[0][1]);

	        if (seg.length > 2) {
	          path.quadraticCurveTo(seg[2][0], seg[2][1], seg[1][0], seg[1][1]);
	        } else {
	          path.lineTo(seg[1][0], seg[1][1]);
	        }
	      }
	    }
	  },
	  findDataIndex: function (x, y) {
	    var shape = this.shape;
	    var segs = shape.segs;
	    var isPolyline = shape.polyline;
	    var lineWidth = Math.max(this.style.lineWidth, 1); // Not consider transform

	    for (var i = 0; i < segs.length; i++) {
	      var seg = segs[i];

	      if (isPolyline) {
	        for (var j = 1; j < seg.length; j++) {
	          if (lineContain.containStroke(seg[j - 1][0], seg[j - 1][1], seg[j][0], seg[j][1], lineWidth, x, y)) {
	            return i;
	          }
	        }
	      } else {
	        if (seg.length > 2) {
	          if (quadraticContain.containStroke(seg[0][0], seg[0][1], seg[2][0], seg[2][1], seg[1][0], seg[1][1], lineWidth, x, y)) {
	            return i;
	          }
	        } else {
	          if (lineContain.containStroke(seg[0][0], seg[0][1], seg[1][0], seg[1][1], lineWidth, x, y)) {
	            return i;
	          }
	        }
	      }
	    }

	    return -1;
	  }
	});

	function LargeLineDraw() {
	  this.group = new graphic.Group();
	  this._lineEl = new LargeLineShape();
	}

	var largeLineProto = LargeLineDraw.prototype;
	/**
	 * Update symbols draw by new data
	 * @param {module:echarts/data/List} data
	 */

	largeLineProto.updateData = function (data) {
	  this.group.removeAll();
	  var lineEl = this._lineEl;
	  var seriesModel = data.hostModel;
	  lineEl.setShape({
	    segs: data.mapArray(data.getItemLayout),
	    polyline: seriesModel.get('polyline')
	  });
	  lineEl.useStyle(seriesModel.getModel('lineStyle.normal').getLineStyle());
	  var visualColor = data.getVisual('color');

	  if (visualColor) {
	    lineEl.setStyle('stroke', visualColor);
	  }

	  lineEl.setStyle('fill'); // Enable tooltip
	  // PENDING May have performance issue when path is extremely large

	  lineEl.seriesIndex = seriesModel.seriesIndex;
	  lineEl.on('mousemove', function (e) {
	    lineEl.dataIndex = null;
	    var dataIndex = lineEl.findDataIndex(e.offsetX, e.offsetY);

	    if (dataIndex > 0) {
	      // Provide dataIndex for tooltip
	      lineEl.dataIndex = dataIndex;
	    }
	  }); // Add back

	  this.group.add(lineEl);
	};

	largeLineProto.updateLayout = function (seriesModel) {
	  var data = seriesModel.getData();

	  this._lineEl.setShape({
	    segs: data.mapArray(data.getItemLayout)
	  });
	};

	largeLineProto.remove = function () {
	  this.group.removeAll();
	};

	var _default = LargeLineDraw;
	module.exports = _default;

/***/ },
/* 454 */
/***/ function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(162);

	var __DEV__ = _config.__DEV__;

	function _default(ecModel) {
	  ecModel.eachSeriesByType('lines', function (seriesModel) {
	    var coordSys = seriesModel.coordinateSystem;
	    var lineData = seriesModel.getData(); // FIXME Use data dimensions ?

	    lineData.each(function (idx) {
	      var itemModel = lineData.getItemModel(idx);
	      var coords = itemModel.option instanceof Array ? itemModel.option : itemModel.get('coords');
	      var pts = [];

	      if (seriesModel.get('polyline')) {
	        for (var i = 0; i < coords.length; i++) {
	          pts.push(coordSys.dataToPoint(coords[i]));
	        }
	      } else {
	        pts[0] = coordSys.dataToPoint(coords[0]);
	        pts[1] = coordSys.dataToPoint(coords[1]);
	        var curveness = itemModel.get('lineStyle.normal.curveness');

	        if (+curveness) {
	          pts[2] = [(pts[0][0] + pts[1][0]) / 2 - (pts[0][1] - pts[1][1]) * curveness, (pts[0][1] + pts[1][1]) / 2 - (pts[1][0] - pts[0][0]) * curveness];
	        }
	      }

	      lineData.setItemLayout(idx, pts);
	    });
	  });
	}

	module.exports = _default;

/***/ },
/* 455 */
/***/ function(module, exports) {

	function normalize(a) {
	  if (!(a instanceof Array)) {
	    a = [a, a];
	  }

	  return a;
	}

	function _default(ecModel) {
	  ecModel.eachSeriesByType('lines', function (seriesModel) {
	    var data = seriesModel.getData();
	    var symbolType = normalize(seriesModel.get('symbol'));
	    var symbolSize = normalize(seriesModel.get('symbolSize'));
	    var opacityQuery = 'lineStyle.normal.opacity'.split('.');
	    data.setVisual('fromSymbol', symbolType && symbolType[0]);
	    data.setVisual('toSymbol', symbolType && symbolType[1]);
	    data.setVisual('fromSymbolSize', symbolSize && symbolSize[0]);
	    data.setVisual('toSymbolSize', symbolSize && symbolSize[1]);
	    data.setVisual('opacity', seriesModel.get(opacityQuery));
	    data.each(function (idx) {
	      var itemModel = data.getItemModel(idx);
	      var symbolType = normalize(itemModel.getShallow('symbol', true));
	      var symbolSize = normalize(itemModel.getShallow('symbolSize', true));
	      var opacity = itemModel.get(opacityQuery);
	      symbolType[0] && data.setItemVisual(idx, 'fromSymbol', symbolType[0]);
	      symbolType[1] && data.setItemVisual(idx, 'toSymbol', symbolType[1]);
	      symbolSize[0] && data.setItemVisual(idx, 'fromSymbolSize', symbolSize[0]);
	      symbolSize[1] && data.setItemVisual(idx, 'toSymbolSize', symbolSize[1]);
	      data.setItemVisual(idx, 'opacity', opacity);
	    });
	  });
	}

	module.exports = _default;

/***/ },
/* 456 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(457);

	__webpack_require__(458);

/***/ },
/* 457 */
/***/ function(module, exports, __webpack_require__) {

	var SeriesModel = __webpack_require__(256);

	var createListFromArray = __webpack_require__(264);

	var _default = SeriesModel.extend({
	  type: 'series.heatmap',
	  getInitialData: function (option, ecModel) {
	    return createListFromArray(option.data, this, ecModel);
	  },
	  defaultOption: {
	    // Cartesian2D or geo
	    coordinateSystem: 'cartesian2d',
	    zlevel: 0,
	    z: 2,
	    // Cartesian coordinate system
	    // xAxisIndex: 0,
	    // yAxisIndex: 0,
	    // Geo coordinate system
	    geoIndex: 0,
	    blurSize: 30,
	    pointSize: 20,
	    maxOpacity: 1,
	    minOpacity: 0
	  }
	});

	module.exports = _default;

/***/ },
/* 458 */
/***/ function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(162);

	var __DEV__ = _config.__DEV__;

	var echarts = __webpack_require__(161);

	var graphic = __webpack_require__(212);

	var HeatmapLayer = __webpack_require__(459);

	var zrUtil = __webpack_require__(166);

	function getIsInPiecewiseRange(dataExtent, pieceList, selected) {
	  var dataSpan = dataExtent[1] - dataExtent[0];
	  pieceList = zrUtil.map(pieceList, function (piece) {
	    return {
	      interval: [(piece.interval[0] - dataExtent[0]) / dataSpan, (piece.interval[1] - dataExtent[0]) / dataSpan]
	    };
	  });
	  var len = pieceList.length;
	  var lastIndex = 0;
	  return function (val) {
	    // Try to find in the location of the last found
	    for (var i = lastIndex; i < len; i++) {
	      var interval = pieceList[i].interval;

	      if (interval[0] <= val && val <= interval[1]) {
	        lastIndex = i;
	        break;
	      }
	    }

	    if (i === len) {
	      // Not found, back interation
	      for (var i = lastIndex - 1; i >= 0; i--) {
	        var interval = pieceList[i].interval;

	        if (interval[0] <= val && val <= interval[1]) {
	          lastIndex = i;
	          break;
	        }
	      }
	    }

	    return i >= 0 && i < len && selected[i];
	  };
	}

	function getIsInContinuousRange(dataExtent, range) {
	  var dataSpan = dataExtent[1] - dataExtent[0];
	  range = [(range[0] - dataExtent[0]) / dataSpan, (range[1] - dataExtent[0]) / dataSpan];
	  return function (val) {
	    return val >= range[0] && val <= range[1];
	  };
	}

	function isGeoCoordSys(coordSys) {
	  var dimensions = coordSys.dimensions; // Not use coorSys.type === 'geo' because coordSys maybe extended

	  return dimensions[0] === 'lng' && dimensions[1] === 'lat';
	}

	var _default = echarts.extendChartView({
	  type: 'heatmap',
	  render: function (seriesModel, ecModel, api) {
	    var visualMapOfThisSeries;
	    ecModel.eachComponent('visualMap', function (visualMap) {
	      visualMap.eachTargetSeries(function (targetSeries) {
	        if (targetSeries === seriesModel) {
	          visualMapOfThisSeries = visualMap;
	        }
	      });
	    });
	    this.group.removeAll();
	    var coordSys = seriesModel.coordinateSystem;

	    if (coordSys.type === 'cartesian2d' || coordSys.type === 'calendar') {
	      this._renderOnCartesianAndCalendar(coordSys, seriesModel, api);
	    } else if (isGeoCoordSys(coordSys)) {
	      this._renderOnGeo(coordSys, seriesModel, visualMapOfThisSeries, api);
	    }
	  },
	  dispose: function () {},
	  _renderOnCartesianAndCalendar: function (coordSys, seriesModel, api) {
	    if (coordSys.type === 'cartesian2d') {
	      var xAxis = coordSys.getAxis('x');
	      var yAxis = coordSys.getAxis('y');
	      var width = xAxis.getBandWidth();
	      var height = yAxis.getBandWidth();
	    }

	    var group = this.group;
	    var data = seriesModel.getData();
	    var itemStyleQuery = 'itemStyle.normal';
	    var hoverItemStyleQuery = 'itemStyle.emphasis';
	    var labelQuery = 'label.normal';
	    var hoverLabelQuery = 'label.emphasis';
	    var style = seriesModel.getModel(itemStyleQuery).getItemStyle(['color']);
	    var hoverStl = seriesModel.getModel(hoverItemStyleQuery).getItemStyle();
	    var labelModel = seriesModel.getModel('label.normal');
	    var hoverLabelModel = seriesModel.getModel('label.emphasis');
	    var coordSysType = coordSys.type;
	    var dataDims = coordSysType === 'cartesian2d' ? [seriesModel.coordDimToDataDim('x')[0], seriesModel.coordDimToDataDim('y')[0], seriesModel.coordDimToDataDim('value')[0]] : [seriesModel.coordDimToDataDim('time')[0], seriesModel.coordDimToDataDim('value')[0]];
	    data.each(function (idx) {
	      var rect;

	      if (coordSysType === 'cartesian2d') {
	        // Ignore empty data
	        if (isNaN(data.get(dataDims[2], idx))) {
	          return;
	        }

	        var point = coordSys.dataToPoint([data.get(dataDims[0], idx), data.get(dataDims[1], idx)]);
	        rect = new graphic.Rect({
	          shape: {
	            x: point[0] - width / 2,
	            y: point[1] - height / 2,
	            width: width,
	            height: height
	          },
	          style: {
	            fill: data.getItemVisual(idx, 'color'),
	            opacity: data.getItemVisual(idx, 'opacity')
	          }
	        });
	      } else {
	        // Ignore empty data
	        if (isNaN(data.get(dataDims[1], idx))) {
	          return;
	        }

	        rect = new graphic.Rect({
	          z2: 1,
	          shape: coordSys.dataToRect([data.get(dataDims[0], idx)]).contentShape,
	          style: {
	            fill: data.getItemVisual(idx, 'color'),
	            opacity: data.getItemVisual(idx, 'opacity')
	          }
	        });
	      }

	      var itemModel = data.getItemModel(idx); // Optimization for large datset

	      if (data.hasItemOption) {
	        style = itemModel.getModel(itemStyleQuery).getItemStyle(['color']);
	        hoverStl = itemModel.getModel(hoverItemStyleQuery).getItemStyle();
	        labelModel = itemModel.getModel(labelQuery);
	        hoverLabelModel = itemModel.getModel(hoverLabelQuery);
	      }

	      var rawValue = seriesModel.getRawValue(idx);
	      var defaultText = '-';

	      if (rawValue && rawValue[2] != null) {
	        defaultText = rawValue[2];
	      }

	      graphic.setLabelStyle(style, hoverStl, labelModel, hoverLabelModel, {
	        labelFetcher: seriesModel,
	        labelDataIndex: idx,
	        defaultText: defaultText,
	        isRectText: true
	      });
	      rect.setStyle(style);
	      graphic.setHoverStyle(rect, data.hasItemOption ? hoverStl : zrUtil.extend({}, hoverStl));
	      group.add(rect);
	      data.setItemGraphicEl(idx, rect);
	    });
	  },
	  _renderOnGeo: function (geo, seriesModel, visualMapModel, api) {
	    var inRangeVisuals = visualMapModel.targetVisuals.inRange;
	    var outOfRangeVisuals = visualMapModel.targetVisuals.outOfRange; // if (!visualMapping) {
	    //     throw new Error('Data range must have color visuals');
	    // }

	    var data = seriesModel.getData();
	    var hmLayer = this._hmLayer || this._hmLayer || new HeatmapLayer();
	    hmLayer.blurSize = seriesModel.get('blurSize');
	    hmLayer.pointSize = seriesModel.get('pointSize');
	    hmLayer.minOpacity = seriesModel.get('minOpacity');
	    hmLayer.maxOpacity = seriesModel.get('maxOpacity');
	    var rect = geo.getViewRect().clone();
	    var roamTransform = geo.getRoamTransform().transform;
	    rect.applyTransform(roamTransform); // Clamp on viewport

	    var x = Math.max(rect.x, 0);
	    var y = Math.max(rect.y, 0);
	    var x2 = Math.min(rect.width + rect.x, api.getWidth());
	    var y2 = Math.min(rect.height + rect.y, api.getHeight());
	    var width = x2 - x;
	    var height = y2 - y;
	    var points = data.mapArray(['lng', 'lat', 'value'], function (lng, lat, value) {
	      var pt = geo.dataToPoint([lng, lat]);
	      pt[0] -= x;
	      pt[1] -= y;
	      pt.push(value);
	      return pt;
	    });
	    var dataExtent = visualMapModel.getExtent();
	    var isInRange = visualMapModel.type === 'visualMap.continuous' ? getIsInContinuousRange(dataExtent, visualMapModel.option.range) : getIsInPiecewiseRange(dataExtent, visualMapModel.getPieceList(), visualMapModel.option.selected);
	    hmLayer.update(points, width, height, inRangeVisuals.color.getNormalizer(), {
	      inRange: inRangeVisuals.color.getColorMapper(),
	      outOfRange: outOfRangeVisuals.color.getColorMapper()
	    }, isInRange);
	    var img = new graphic.Image({
	      style: {
	        width: width,
	        height: height,
	        x: x,
	        y: y,
	        image: hmLayer.canvas
	      },
	      silent: true
	    });
	    this.group.add(img);
	  }
	});

	module.exports = _default;

/***/ },
/* 459 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	/**
	 * @file defines echarts Heatmap Chart
	 * @author Ovilia (me@zhangwenli.com)
	 * Inspired by https://github.com/mourner/simpleheat
	 *
	 * @module
	 */
	var GRADIENT_LEVELS = 256;
	/**
	 * Heatmap Chart
	 *
	 * @class
	 */

	function Heatmap() {
	  var canvas = zrUtil.createCanvas();
	  this.canvas = canvas;
	  this.blurSize = 30;
	  this.pointSize = 20;
	  this.maxOpacity = 1;
	  this.minOpacity = 0;
	  this._gradientPixels = {};
	}

	Heatmap.prototype = {
	  /**
	   * Renders Heatmap and returns the rendered canvas
	   * @param {Array} data array of data, each has x, y, value
	   * @param {number} width canvas width
	   * @param {number} height canvas height
	   */
	  update: function (data, width, height, normalize, colorFunc, isInRange) {
	    var brush = this._getBrush();

	    var gradientInRange = this._getGradient(data, colorFunc, 'inRange');

	    var gradientOutOfRange = this._getGradient(data, colorFunc, 'outOfRange');

	    var r = this.pointSize + this.blurSize;
	    var canvas = this.canvas;
	    var ctx = canvas.getContext('2d');
	    var len = data.length;
	    canvas.width = width;
	    canvas.height = height;

	    for (var i = 0; i < len; ++i) {
	      var p = data[i];
	      var x = p[0];
	      var y = p[1];
	      var value = p[2]; // calculate alpha using value

	      var alpha = normalize(value); // draw with the circle brush with alpha

	      ctx.globalAlpha = alpha;
	      ctx.drawImage(brush, x - r, y - r);
	    }

	    if (!canvas.width || !canvas.height) {
	      // Avoid "Uncaught DOMException: Failed to execute 'getImageData' on
	      // 'CanvasRenderingContext2D': The source height is 0."
	      return canvas;
	    } // colorize the canvas using alpha value and set with gradient


	    var imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
	    var pixels = imageData.data;
	    var offset = 0;
	    var pixelLen = pixels.length;
	    var minOpacity = this.minOpacity;
	    var maxOpacity = this.maxOpacity;
	    var diffOpacity = maxOpacity - minOpacity;

	    while (offset < pixelLen) {
	      var alpha = pixels[offset + 3] / 256;
	      var gradientOffset = Math.floor(alpha * (GRADIENT_LEVELS - 1)) * 4; // Simple optimize to ignore the empty data

	      if (alpha > 0) {
	        var gradient = isInRange(alpha) ? gradientInRange : gradientOutOfRange; // Any alpha > 0 will be mapped to [minOpacity, maxOpacity]

	        alpha > 0 && (alpha = alpha * diffOpacity + minOpacity);
	        pixels[offset++] = gradient[gradientOffset];
	        pixels[offset++] = gradient[gradientOffset + 1];
	        pixels[offset++] = gradient[gradientOffset + 2];
	        pixels[offset++] = gradient[gradientOffset + 3] * alpha * 256;
	      } else {
	        offset += 4;
	      }
	    }

	    ctx.putImageData(imageData, 0, 0);
	    return canvas;
	  },

	  /**
	   * get canvas of a black circle brush used for canvas to draw later
	   * @private
	   * @returns {Object} circle brush canvas
	   */
	  _getBrush: function () {
	    var brushCanvas = this._brushCanvas || (this._brushCanvas = zrUtil.createCanvas()); // set brush size

	    var r = this.pointSize + this.blurSize;
	    var d = r * 2;
	    brushCanvas.width = d;
	    brushCanvas.height = d;
	    var ctx = brushCanvas.getContext('2d');
	    ctx.clearRect(0, 0, d, d); // in order to render shadow without the distinct circle,
	    // draw the distinct circle in an invisible place,
	    // and use shadowOffset to draw shadow in the center of the canvas

	    ctx.shadowOffsetX = d;
	    ctx.shadowBlur = this.blurSize; // draw the shadow in black, and use alpha and shadow blur to generate
	    // color in color map

	    ctx.shadowColor = '#000'; // draw circle in the left to the canvas

	    ctx.beginPath();
	    ctx.arc(-r, r, this.pointSize, 0, Math.PI * 2, true);
	    ctx.closePath();
	    ctx.fill();
	    return brushCanvas;
	  },

	  /**
	   * get gradient color map
	   * @private
	   */
	  _getGradient: function (data, colorFunc, state) {
	    var gradientPixels = this._gradientPixels;
	    var pixelsSingleState = gradientPixels[state] || (gradientPixels[state] = new Uint8ClampedArray(256 * 4));
	    var color = [0, 0, 0, 0];
	    var off = 0;

	    for (var i = 0; i < 256; i++) {
	      colorFunc[state](i / 255, true, color);
	      pixelsSingleState[off++] = color[0];
	      pixelsSingleState[off++] = color[1];
	      pixelsSingleState[off++] = color[2];
	      pixelsSingleState[off++] = color[3];
	    }

	    return pixelsSingleState;
	  }
	};
	var _default = Heatmap;
	module.exports = _default;

/***/ },
/* 460 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var zrUtil = __webpack_require__(166);

	__webpack_require__(293);

	__webpack_require__(461);

	__webpack_require__(462);

	var barLayoutGrid = __webpack_require__(308);

	var visualSymbol = __webpack_require__(289);

	__webpack_require__(292);

	// In case developer forget to include grid component
	echarts.registerLayout(zrUtil.curry(barLayoutGrid, 'pictorialBar'));
	echarts.registerVisual(zrUtil.curry(visualSymbol, 'pictorialBar', 'roundRect', null));

/***/ },
/* 461 */
/***/ function(module, exports, __webpack_require__) {

	var BaseBarSeries = __webpack_require__(310);

	var PictorialBarSeries = BaseBarSeries.extend({
	  type: 'series.pictorialBar',
	  dependencies: ['grid'],
	  defaultOption: {
	    symbol: 'circle',
	    // Customized bar shape
	    symbolSize: null,
	    // Can be ['100%', '100%'], null means auto.
	    symbolRotate: null,
	    symbolPosition: null,
	    // 'start' or 'end' or 'center', null means auto.
	    symbolOffset: null,
	    symbolMargin: null,
	    // start margin and end margin. Can be a number or a percent string.
	    // Auto margin by defualt.
	    symbolRepeat: false,
	    // false/null/undefined, means no repeat.
	    // Can be true, means auto calculate repeat times and cut by data.
	    // Can be a number, specifies repeat times, and do not cut by data.
	    // Can be 'fixed', means auto calculate repeat times but do not cut by data.
	    symbolRepeatDirection: 'end',
	    // 'end' means from 'start' to 'end'.
	    symbolClip: false,
	    symbolBoundingData: null,
	    // Can be 60 or -40 or [-40, 60]
	    symbolPatternSize: 400,
	    // 400 * 400 px
	    barGap: '-100%',
	    // In most case, overlap is needed.
	    // z can be set in data item, which is z2 actually.
	    // Disable progressive
	    progressive: 0,
	    hoverAnimation: false // Open only when needed.

	  },
	  getInitialData: function (option) {
	    // Disable stack.
	    option.stack = null;
	    return PictorialBarSeries.superApply(this, 'getInitialData', arguments);
	  }
	});
	var _default = PictorialBarSeries;
	module.exports = _default;

/***/ },
/* 462 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var zrUtil = __webpack_require__(166);

	var graphic = __webpack_require__(212);

	var _symbol = __webpack_require__(276);

	var createSymbol = _symbol.createSymbol;

	var _number = __webpack_require__(205);

	var parsePercent = _number.parsePercent;
	var isNumeric = _number.isNumeric;

	var _helper = __webpack_require__(312);

	var setLabel = _helper.setLabel;
	var BAR_BORDER_WIDTH_QUERY = ['itemStyle', 'normal', 'borderWidth']; // index: +isHorizontal

	var LAYOUT_ATTRS = [{
	  xy: 'x',
	  wh: 'width',
	  index: 0,
	  posDesc: ['left', 'right']
	}, {
	  xy: 'y',
	  wh: 'height',
	  index: 1,
	  posDesc: ['top', 'bottom']
	}];
	var pathForLineWidth = new graphic.Circle();
	var BarView = echarts.extendChartView({
	  type: 'pictorialBar',
	  render: function (seriesModel, ecModel, api) {
	    var group = this.group;
	    var data = seriesModel.getData();
	    var oldData = this._data;
	    var cartesian = seriesModel.coordinateSystem;
	    var baseAxis = cartesian.getBaseAxis();
	    var isHorizontal = !!baseAxis.isHorizontal();
	    var coordSysRect = cartesian.grid.getRect();
	    var opt = {
	      ecSize: {
	        width: api.getWidth(),
	        height: api.getHeight()
	      },
	      seriesModel: seriesModel,
	      coordSys: cartesian,
	      coordSysExtent: [[coordSysRect.x, coordSysRect.x + coordSysRect.width], [coordSysRect.y, coordSysRect.y + coordSysRect.height]],
	      isHorizontal: isHorizontal,
	      valueDim: LAYOUT_ATTRS[+isHorizontal],
	      categoryDim: LAYOUT_ATTRS[1 - isHorizontal]
	    };
	    data.diff(oldData).add(function (dataIndex) {
	      if (!data.hasValue(dataIndex)) {
	        return;
	      }

	      var itemModel = getItemModel(data, dataIndex);
	      var symbolMeta = getSymbolMeta(data, dataIndex, itemModel, opt);
	      var bar = createBar(data, opt, symbolMeta);
	      data.setItemGraphicEl(dataIndex, bar);
	      group.add(bar);
	      updateCommon(bar, opt, symbolMeta);
	    }).update(function (newIndex, oldIndex) {
	      var bar = oldData.getItemGraphicEl(oldIndex);

	      if (!data.hasValue(newIndex)) {
	        group.remove(bar);
	        return;
	      }

	      var itemModel = getItemModel(data, newIndex);
	      var symbolMeta = getSymbolMeta(data, newIndex, itemModel, opt);
	      var pictorialShapeStr = getShapeStr(data, symbolMeta);

	      if (bar && pictorialShapeStr !== bar.__pictorialShapeStr) {
	        group.remove(bar);
	        data.setItemGraphicEl(newIndex, null);
	        bar = null;
	      }

	      if (bar) {
	        updateBar(bar, opt, symbolMeta);
	      } else {
	        bar = createBar(data, opt, symbolMeta, true);
	      }

	      data.setItemGraphicEl(newIndex, bar);
	      bar.__pictorialSymbolMeta = symbolMeta; // Add back

	      group.add(bar);
	      updateCommon(bar, opt, symbolMeta);
	    }).remove(function (dataIndex) {
	      var bar = oldData.getItemGraphicEl(dataIndex);
	      bar && removeBar(oldData, dataIndex, bar.__pictorialSymbolMeta.animationModel, bar);
	    }).execute();
	    this._data = data;
	    return this.group;
	  },
	  dispose: zrUtil.noop,
	  remove: function (ecModel, api) {
	    var group = this.group;
	    var data = this._data;

	    if (ecModel.get('animation')) {
	      if (data) {
	        data.eachItemGraphicEl(function (bar) {
	          removeBar(data, bar.dataIndex, ecModel, bar);
	        });
	      }
	    } else {
	      group.removeAll();
	    }
	  }
	}); // Set or calculate default value about symbol, and calculate layout info.

	function getSymbolMeta(data, dataIndex, itemModel, opt) {
	  var layout = data.getItemLayout(dataIndex);
	  var symbolRepeat = itemModel.get('symbolRepeat');
	  var symbolClip = itemModel.get('symbolClip');
	  var symbolPosition = itemModel.get('symbolPosition') || 'start';
	  var symbolRotate = itemModel.get('symbolRotate');
	  var rotation = (symbolRotate || 0) * Math.PI / 180 || 0;
	  var symbolPatternSize = itemModel.get('symbolPatternSize') || 2;
	  var isAnimationEnabled = itemModel.isAnimationEnabled();
	  var symbolMeta = {
	    dataIndex: dataIndex,
	    layout: layout,
	    itemModel: itemModel,
	    symbolType: data.getItemVisual(dataIndex, 'symbol') || 'circle',
	    color: data.getItemVisual(dataIndex, 'color'),
	    symbolClip: symbolClip,
	    symbolRepeat: symbolRepeat,
	    symbolRepeatDirection: itemModel.get('symbolRepeatDirection'),
	    symbolPatternSize: symbolPatternSize,
	    rotation: rotation,
	    animationModel: isAnimationEnabled ? itemModel : null,
	    hoverAnimation: isAnimationEnabled && itemModel.get('hoverAnimation'),
	    z2: itemModel.getShallow('z', true) || 0
	  };
	  prepareBarLength(itemModel, symbolRepeat, layout, opt, symbolMeta);
	  prepareSymbolSize(data, dataIndex, layout, symbolRepeat, symbolClip, symbolMeta.boundingLength, symbolMeta.pxSign, symbolPatternSize, opt, symbolMeta);
	  prepareLineWidth(itemModel, symbolMeta.symbolScale, rotation, opt, symbolMeta);
	  var symbolSize = symbolMeta.symbolSize;
	  var symbolOffset = itemModel.get('symbolOffset');

	  if (zrUtil.isArray(symbolOffset)) {
	    symbolOffset = [parsePercent(symbolOffset[0], symbolSize[0]), parsePercent(symbolOffset[1], symbolSize[1])];
	  }

	  prepareLayoutInfo(itemModel, symbolSize, layout, symbolRepeat, symbolClip, symbolOffset, symbolPosition, symbolMeta.valueLineWidth, symbolMeta.boundingLength, symbolMeta.repeatCutLength, opt, symbolMeta);
	  return symbolMeta;
	} // bar length can be negative.


	function prepareBarLength(itemModel, symbolRepeat, layout, opt, output) {
	  var valueDim = opt.valueDim;
	  var symbolBoundingData = itemModel.get('symbolBoundingData');
	  var valueAxis = opt.coordSys.getOtherAxis(opt.coordSys.getBaseAxis());
	  var zeroPx = valueAxis.toGlobalCoord(valueAxis.dataToCoord(0));
	  var pxSignIdx = 1 - +(layout[valueDim.wh] <= 0);
	  var boundingLength;

	  if (zrUtil.isArray(symbolBoundingData)) {
	    var symbolBoundingExtent = [convertToCoordOnAxis(valueAxis, symbolBoundingData[0]) - zeroPx, convertToCoordOnAxis(valueAxis, symbolBoundingData[1]) - zeroPx];
	    symbolBoundingExtent[1] < symbolBoundingExtent[0] && symbolBoundingExtent.reverse();
	    boundingLength = symbolBoundingExtent[pxSignIdx];
	  } else if (symbolBoundingData != null) {
	    boundingLength = convertToCoordOnAxis(valueAxis, symbolBoundingData) - zeroPx;
	  } else if (symbolRepeat) {
	    boundingLength = opt.coordSysExtent[valueDim.index][pxSignIdx] - zeroPx;
	  } else {
	    boundingLength = layout[valueDim.wh];
	  }

	  output.boundingLength = boundingLength;

	  if (symbolRepeat) {
	    output.repeatCutLength = layout[valueDim.wh];
	  }

	  output.pxSign = boundingLength > 0 ? 1 : boundingLength < 0 ? -1 : 0;
	}

	function convertToCoordOnAxis(axis, value) {
	  return axis.toGlobalCoord(axis.dataToCoord(axis.scale.parse(value)));
	} // Support ['100%', '100%']


	function prepareSymbolSize(data, dataIndex, layout, symbolRepeat, symbolClip, boundingLength, pxSign, symbolPatternSize, opt, output) {
	  var valueDim = opt.valueDim;
	  var categoryDim = opt.categoryDim;
	  var categorySize = Math.abs(layout[categoryDim.wh]);
	  var symbolSize = data.getItemVisual(dataIndex, 'symbolSize');

	  if (zrUtil.isArray(symbolSize)) {
	    symbolSize = symbolSize.slice();
	  } else {
	    if (symbolSize == null) {
	      symbolSize = '100%';
	    }

	    symbolSize = [symbolSize, symbolSize];
	  } // Note: percentage symbolSize (like '100%') do not consider lineWidth, because it is
	  // to complicated to calculate real percent value if considering scaled lineWidth.
	  // So the actual size will bigger than layout size if lineWidth is bigger than zero,
	  // which can be tolerated in pictorial chart.


	  symbolSize[categoryDim.index] = parsePercent(symbolSize[categoryDim.index], categorySize);
	  symbolSize[valueDim.index] = parsePercent(symbolSize[valueDim.index], symbolRepeat ? categorySize : Math.abs(boundingLength));
	  output.symbolSize = symbolSize; // If x or y is less than zero, show reversed shape.

	  var symbolScale = output.symbolScale = [symbolSize[0] / symbolPatternSize, symbolSize[1] / symbolPatternSize]; // Follow convention, 'right' and 'top' is the normal scale.

	  symbolScale[valueDim.index] *= (opt.isHorizontal ? -1 : 1) * pxSign;
	}

	function prepareLineWidth(itemModel, symbolScale, rotation, opt, output) {
	  // In symbols are drawn with scale, so do not need to care about the case that width
	  // or height are too small. But symbol use strokeNoScale, where acture lineWidth should
	  // be calculated.
	  var valueLineWidth = itemModel.get(BAR_BORDER_WIDTH_QUERY) || 0;

	  if (valueLineWidth) {
	    pathForLineWidth.attr({
	      scale: symbolScale.slice(),
	      rotation: rotation
	    });
	    pathForLineWidth.updateTransform();
	    valueLineWidth /= pathForLineWidth.getLineScale();
	    valueLineWidth *= symbolScale[opt.valueDim.index];
	  }

	  output.valueLineWidth = valueLineWidth;
	}

	function prepareLayoutInfo(itemModel, symbolSize, layout, symbolRepeat, symbolClip, symbolOffset, symbolPosition, valueLineWidth, boundingLength, repeatCutLength, opt, output) {
	  var categoryDim = opt.categoryDim;
	  var valueDim = opt.valueDim;
	  var pxSign = output.pxSign;
	  var unitLength = Math.max(symbolSize[valueDim.index] + valueLineWidth, 0);
	  var pathLen = unitLength; // Note: rotation will not effect the layout of symbols, because user may
	  // want symbols to rotate on its center, which should not be translated
	  // when rotating.

	  if (symbolRepeat) {
	    var absBoundingLength = Math.abs(boundingLength);
	    var symbolMargin = zrUtil.retrieve(itemModel.get('symbolMargin'), '15%') + '';
	    var hasEndGap = false;

	    if (symbolMargin.lastIndexOf('!') === symbolMargin.length - 1) {
	      hasEndGap = true;
	      symbolMargin = symbolMargin.slice(0, symbolMargin.length - 1);
	    }

	    symbolMargin = parsePercent(symbolMargin, symbolSize[valueDim.index]);
	    var uLenWithMargin = Math.max(unitLength + symbolMargin * 2, 0); // When symbol margin is less than 0, margin at both ends will be subtracted
	    // to ensure that all of the symbols will not be overflow the given area.

	    var endFix = hasEndGap ? 0 : symbolMargin * 2; // Both final repeatTimes and final symbolMargin area calculated based on
	    // boundingLength.

	    var repeatSpecified = isNumeric(symbolRepeat);
	    var repeatTimes = repeatSpecified ? symbolRepeat : toIntTimes((absBoundingLength + endFix) / uLenWithMargin); // Adjust calculate margin, to ensure each symbol is displayed
	    // entirely in the given layout area.

	    var mDiff = absBoundingLength - repeatTimes * unitLength;
	    symbolMargin = mDiff / 2 / (hasEndGap ? repeatTimes : repeatTimes - 1);
	    uLenWithMargin = unitLength + symbolMargin * 2;
	    endFix = hasEndGap ? 0 : symbolMargin * 2; // Update repeatTimes when not all symbol will be shown.

	    if (!repeatSpecified && symbolRepeat !== 'fixed') {
	      repeatTimes = repeatCutLength ? toIntTimes((Math.abs(repeatCutLength) + endFix) / uLenWithMargin) : 0;
	    }

	    pathLen = repeatTimes * uLenWithMargin - endFix;
	    output.repeatTimes = repeatTimes;
	    output.symbolMargin = symbolMargin;
	  }

	  var sizeFix = pxSign * (pathLen / 2);
	  var pathPosition = output.pathPosition = [];
	  pathPosition[categoryDim.index] = layout[categoryDim.wh] / 2;
	  pathPosition[valueDim.index] = symbolPosition === 'start' ? sizeFix : symbolPosition === 'end' ? boundingLength - sizeFix : boundingLength / 2; // 'center'

	  if (symbolOffset) {
	    pathPosition[0] += symbolOffset[0];
	    pathPosition[1] += symbolOffset[1];
	  }

	  var bundlePosition = output.bundlePosition = [];
	  bundlePosition[categoryDim.index] = layout[categoryDim.xy];
	  bundlePosition[valueDim.index] = layout[valueDim.xy];
	  var barRectShape = output.barRectShape = zrUtil.extend({}, layout);
	  barRectShape[valueDim.wh] = pxSign * Math.max(Math.abs(layout[valueDim.wh]), Math.abs(pathPosition[valueDim.index] + sizeFix));
	  barRectShape[categoryDim.wh] = layout[categoryDim.wh];
	  var clipShape = output.clipShape = {}; // Consider that symbol may be overflow layout rect.

	  clipShape[categoryDim.xy] = -layout[categoryDim.xy];
	  clipShape[categoryDim.wh] = opt.ecSize[categoryDim.wh];
	  clipShape[valueDim.xy] = 0;
	  clipShape[valueDim.wh] = layout[valueDim.wh];
	}

	function createPath(symbolMeta) {
	  var symbolPatternSize = symbolMeta.symbolPatternSize;
	  var path = createSymbol( // Consider texture img, make a big size.
	  symbolMeta.symbolType, -symbolPatternSize / 2, -symbolPatternSize / 2, symbolPatternSize, symbolPatternSize, symbolMeta.color);
	  path.attr({
	    culling: true
	  });
	  path.type !== 'image' && path.setStyle({
	    strokeNoScale: true
	  });
	  return path;
	}

	function createOrUpdateRepeatSymbols(bar, opt, symbolMeta, isUpdate) {
	  var bundle = bar.__pictorialBundle;
	  var symbolSize = symbolMeta.symbolSize;
	  var valueLineWidth = symbolMeta.valueLineWidth;
	  var pathPosition = symbolMeta.pathPosition;
	  var valueDim = opt.valueDim;
	  var repeatTimes = symbolMeta.repeatTimes || 0;
	  var index = 0;
	  var unit = symbolSize[opt.valueDim.index] + valueLineWidth + symbolMeta.symbolMargin * 2;
	  eachPath(bar, function (path) {
	    path.__pictorialAnimationIndex = index;
	    path.__pictorialRepeatTimes = repeatTimes;

	    if (index < repeatTimes) {
	      updateAttr(path, null, makeTarget(index), symbolMeta, isUpdate);
	    } else {
	      updateAttr(path, null, {
	        scale: [0, 0]
	      }, symbolMeta, isUpdate, function () {
	        bundle.remove(path);
	      });
	    }

	    updateHoverAnimation(path, symbolMeta);
	    index++;
	  });

	  for (; index < repeatTimes; index++) {
	    var path = createPath(symbolMeta);
	    path.__pictorialAnimationIndex = index;
	    path.__pictorialRepeatTimes = repeatTimes;
	    bundle.add(path);
	    var target = makeTarget(index);
	    updateAttr(path, {
	      position: target.position,
	      scale: [0, 0]
	    }, {
	      scale: target.scale,
	      rotation: target.rotation
	    }, symbolMeta, isUpdate); // FIXME
	    // If all emphasis/normal through action.

	    path.on('mouseover', onMouseOver).on('mouseout', onMouseOut);
	    updateHoverAnimation(path, symbolMeta);
	  }

	  function makeTarget(index) {
	    var position = pathPosition.slice(); // (start && pxSign > 0) || (end && pxSign < 0): i = repeatTimes - index
	    // Otherwise: i = index;

	    var pxSign = symbolMeta.pxSign;
	    var i = index;

	    if (symbolMeta.symbolRepeatDirection === 'start' ? pxSign > 0 : pxSign < 0) {
	      i = repeatTimes - 1 - index;
	    }

	    position[valueDim.index] = unit * (i - repeatTimes / 2 + 0.5) + pathPosition[valueDim.index];
	    return {
	      position: position,
	      scale: symbolMeta.symbolScale.slice(),
	      rotation: symbolMeta.rotation
	    };
	  }

	  function onMouseOver() {
	    eachPath(bar, function (path) {
	      path.trigger('emphasis');
	    });
	  }

	  function onMouseOut() {
	    eachPath(bar, function (path) {
	      path.trigger('normal');
	    });
	  }
	}

	function createOrUpdateSingleSymbol(bar, opt, symbolMeta, isUpdate) {
	  var bundle = bar.__pictorialBundle;
	  var mainPath = bar.__pictorialMainPath;

	  if (!mainPath) {
	    mainPath = bar.__pictorialMainPath = createPath(symbolMeta);
	    bundle.add(mainPath);
	    updateAttr(mainPath, {
	      position: symbolMeta.pathPosition.slice(),
	      scale: [0, 0],
	      rotation: symbolMeta.rotation
	    }, {
	      scale: symbolMeta.symbolScale.slice()
	    }, symbolMeta, isUpdate);
	    mainPath.on('mouseover', onMouseOver).on('mouseout', onMouseOut);
	  } else {
	    updateAttr(mainPath, null, {
	      position: symbolMeta.pathPosition.slice(),
	      scale: symbolMeta.symbolScale.slice(),
	      rotation: symbolMeta.rotation
	    }, symbolMeta, isUpdate);
	  }

	  updateHoverAnimation(mainPath, symbolMeta);

	  function onMouseOver() {
	    this.trigger('emphasis');
	  }

	  function onMouseOut() {
	    this.trigger('normal');
	  }
	} // bar rect is used for label.


	function createOrUpdateBarRect(bar, symbolMeta, isUpdate) {
	  var rectShape = zrUtil.extend({}, symbolMeta.barRectShape);
	  var barRect = bar.__pictorialBarRect;

	  if (!barRect) {
	    barRect = bar.__pictorialBarRect = new graphic.Rect({
	      z2: 2,
	      shape: rectShape,
	      silent: true,
	      style: {
	        stroke: 'transparent',
	        fill: 'transparent',
	        lineWidth: 0
	      }
	    });
	    bar.add(barRect);
	  } else {
	    updateAttr(barRect, null, {
	      shape: rectShape
	    }, symbolMeta, isUpdate);
	  }
	}

	function createOrUpdateClip(bar, opt, symbolMeta, isUpdate) {
	  // If not clip, symbol will be remove and rebuilt.
	  if (symbolMeta.symbolClip) {
	    var clipPath = bar.__pictorialClipPath;
	    var clipShape = zrUtil.extend({}, symbolMeta.clipShape);
	    var valueDim = opt.valueDim;
	    var animationModel = symbolMeta.animationModel;
	    var dataIndex = symbolMeta.dataIndex;

	    if (clipPath) {
	      graphic.updateProps(clipPath, {
	        shape: clipShape
	      }, animationModel, dataIndex);
	    } else {
	      clipShape[valueDim.wh] = 0;
	      clipPath = new graphic.Rect({
	        shape: clipShape
	      });

	      bar.__pictorialBundle.setClipPath(clipPath);

	      bar.__pictorialClipPath = clipPath;
	      var target = {};
	      target[valueDim.wh] = symbolMeta.clipShape[valueDim.wh];
	      graphic[isUpdate ? 'updateProps' : 'initProps'](clipPath, {
	        shape: target
	      }, animationModel, dataIndex);
	    }
	  }
	}

	function getItemModel(data, dataIndex) {
	  var itemModel = data.getItemModel(dataIndex);
	  itemModel.getAnimationDelayParams = getAnimationDelayParams;
	  itemModel.isAnimationEnabled = isAnimationEnabled;
	  return itemModel;
	}

	function getAnimationDelayParams(path) {
	  // The order is the same as the z-order, see `symbolRepeatDiretion`.
	  return {
	    index: path.__pictorialAnimationIndex,
	    count: path.__pictorialRepeatTimes
	  };
	}

	function isAnimationEnabled() {
	  // `animation` prop can be set on itemModel in pictorial bar chart.
	  return this.parentModel.isAnimationEnabled() && !!this.getShallow('animation');
	}

	function updateHoverAnimation(path, symbolMeta) {
	  path.off('emphasis').off('normal');
	  var scale = symbolMeta.symbolScale.slice();
	  symbolMeta.hoverAnimation && path.on('emphasis', function () {
	    this.animateTo({
	      scale: [scale[0] * 1.1, scale[1] * 1.1]
	    }, 400, 'elasticOut');
	  }).on('normal', function () {
	    this.animateTo({
	      scale: scale.slice()
	    }, 400, 'elasticOut');
	  });
	}

	function createBar(data, opt, symbolMeta, isUpdate) {
	  // bar is the main element for each data.
	  var bar = new graphic.Group(); // bundle is used for location and clip.

	  var bundle = new graphic.Group();
	  bar.add(bundle);
	  bar.__pictorialBundle = bundle;
	  bundle.attr('position', symbolMeta.bundlePosition.slice());

	  if (symbolMeta.symbolRepeat) {
	    createOrUpdateRepeatSymbols(bar, opt, symbolMeta);
	  } else {
	    createOrUpdateSingleSymbol(bar, opt, symbolMeta);
	  }

	  createOrUpdateBarRect(bar, symbolMeta, isUpdate);
	  createOrUpdateClip(bar, opt, symbolMeta, isUpdate);
	  bar.__pictorialShapeStr = getShapeStr(data, symbolMeta);
	  bar.__pictorialSymbolMeta = symbolMeta;
	  return bar;
	}

	function updateBar(bar, opt, symbolMeta) {
	  var animationModel = symbolMeta.animationModel;
	  var dataIndex = symbolMeta.dataIndex;
	  var bundle = bar.__pictorialBundle;
	  graphic.updateProps(bundle, {
	    position: symbolMeta.bundlePosition.slice()
	  }, animationModel, dataIndex);

	  if (symbolMeta.symbolRepeat) {
	    createOrUpdateRepeatSymbols(bar, opt, symbolMeta, true);
	  } else {
	    createOrUpdateSingleSymbol(bar, opt, symbolMeta, true);
	  }

	  createOrUpdateBarRect(bar, symbolMeta, true);
	  createOrUpdateClip(bar, opt, symbolMeta, true);
	}

	function removeBar(data, dataIndex, animationModel, bar) {
	  // Not show text when animating
	  var labelRect = bar.__pictorialBarRect;
	  labelRect && (labelRect.style.text = null);
	  var pathes = [];
	  eachPath(bar, function (path) {
	    pathes.push(path);
	  });
	  bar.__pictorialMainPath && pathes.push(bar.__pictorialMainPath); // I do not find proper remove animation for clip yet.

	  bar.__pictorialClipPath && (animationModel = null);
	  zrUtil.each(pathes, function (path) {
	    graphic.updateProps(path, {
	      scale: [0, 0]
	    }, animationModel, dataIndex, function () {
	      bar.parent && bar.parent.remove(bar);
	    });
	  });
	  data.setItemGraphicEl(dataIndex, null);
	}

	function getShapeStr(data, symbolMeta) {
	  return [data.getItemVisual(symbolMeta.dataIndex, 'symbol') || 'none', !!symbolMeta.symbolRepeat, !!symbolMeta.symbolClip].join(':');
	}

	function eachPath(bar, cb, context) {
	  // Do not use Group#eachChild, because it do not support remove.
	  zrUtil.each(bar.__pictorialBundle.children(), function (el) {
	    el !== bar.__pictorialBarRect && cb.call(context, el);
	  });
	}

	function updateAttr(el, immediateAttrs, animationAttrs, symbolMeta, isUpdate, cb) {
	  immediateAttrs && el.attr(immediateAttrs); // when symbolCip used, only clip path has init animation, otherwise it would be weird effect.

	  if (symbolMeta.symbolClip && !isUpdate) {
	    animationAttrs && el.attr(animationAttrs);
	  } else {
	    animationAttrs && graphic[isUpdate ? 'updateProps' : 'initProps'](el, animationAttrs, symbolMeta.animationModel, symbolMeta.dataIndex, cb);
	  }
	}

	function updateCommon(bar, opt, symbolMeta) {
	  var color = symbolMeta.color;
	  var dataIndex = symbolMeta.dataIndex;
	  var itemModel = symbolMeta.itemModel; // Color must be excluded.
	  // Because symbol provide setColor individually to set fill and stroke

	  var normalStyle = itemModel.getModel('itemStyle.normal').getItemStyle(['color']);
	  var hoverStyle = itemModel.getModel('itemStyle.emphasis').getItemStyle();
	  var cursorStyle = itemModel.getShallow('cursor');
	  eachPath(bar, function (path) {
	    // PENDING setColor should be before setStyle!!!
	    path.setColor(color);
	    path.setStyle(zrUtil.defaults({
	      fill: color,
	      opacity: symbolMeta.opacity
	    }, normalStyle));
	    graphic.setHoverStyle(path, hoverStyle);
	    cursorStyle && (path.cursor = cursorStyle);
	    path.z2 = symbolMeta.z2;
	  });
	  var barRectHoverStyle = {};
	  var barPositionOutside = opt.valueDim.posDesc[+(symbolMeta.boundingLength > 0)];
	  var barRect = bar.__pictorialBarRect;
	  setLabel(barRect.style, barRectHoverStyle, itemModel, color, opt.seriesModel, dataIndex, barPositionOutside);
	  graphic.setHoverStyle(barRect, barRectHoverStyle);
	}

	function toIntTimes(times) {
	  var roundedTimes = Math.round(times); // Escapse accurate error

	  return Math.abs(times - roundedTimes) < 1e-4 ? roundedTimes : Math.ceil(times);
	}

	var _default = BarView;
	module.exports = _default;

/***/ },
/* 463 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var zrUtil = __webpack_require__(166);

	__webpack_require__(464);

	__webpack_require__(481);

	__webpack_require__(482);

	var themeRiverLayout = __webpack_require__(483);

	var themeRiverVisual = __webpack_require__(484);

	var dataFilter = __webpack_require__(322);

	echarts.registerLayout(themeRiverLayout);
	echarts.registerVisual(themeRiverVisual);
	echarts.registerProcessor(zrUtil.curry(dataFilter, 'themeRiver'));

/***/ },
/* 464 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	__webpack_require__(465);

	__webpack_require__(468);

	__webpack_require__(470);

	__webpack_require__(471);

	__webpack_require__(480);

	echarts.extendComponentView({
	  type: 'single'
	});

/***/ },
/* 465 */
/***/ function(module, exports, __webpack_require__) {

	var Single = __webpack_require__(466);

	var CoordinateSystem = __webpack_require__(252);

	/**
	 * Single coordinate system creator.
	 */

	/**
	 * Create single coordinate system and inject it into seriesModel.
	 *
	 * @param {module:echarts/model/Global} ecModel
	 * @param {module:echarts/ExtensionAPI} api
	 * @return {Array.<module:echarts/coord/single/Single>}
	 */
	function create(ecModel, api) {
	  var singles = [];
	  ecModel.eachComponent('singleAxis', function (axisModel, idx) {
	    var single = new Single(axisModel, ecModel, api);
	    single.name = 'single_' + idx;
	    single.resize(axisModel, api);
	    axisModel.coordinateSystem = single;
	    singles.push(single);
	  });
	  ecModel.eachSeries(function (seriesModel) {
	    if (seriesModel.get('coordinateSystem') === 'singleAxis') {
	      var singleAxisModel = ecModel.queryComponents({
	        mainType: 'singleAxis',
	        index: seriesModel.get('singleAxisIndex'),
	        id: seriesModel.get('singleAxisId')
	      })[0];
	      seriesModel.coordinateSystem = singleAxisModel && singleAxisModel.coordinateSystem;
	    }
	  });
	  return singles;
	}

	CoordinateSystem.register('single', {
	  create: create,
	  dimensions: Single.prototype.dimensions
	});

/***/ },
/* 466 */
/***/ function(module, exports, __webpack_require__) {

	var SingleAxis = __webpack_require__(467);

	var axisHelper = __webpack_require__(268);

	var _layout = __webpack_require__(247);

	var getLayoutRect = _layout.getLayoutRect;

	/**
	 * Single coordinates system.
	 */

	/**
	 * Create a single coordinates system.
	 *
	 * @param {module:echarts/coord/single/AxisModel} axisModel
	 * @param {module:echarts/model/Global} ecModel
	 * @param {module:echarts/ExtensionAPI} api
	 */
	function Single(axisModel, ecModel, api) {
	  /**
	   * @type {string}
	   * @readOnly
	   */
	  this.dimension = 'single';
	  /**
	   * Add it just for draw tooltip.
	   *
	   * @type {Array.<string>}
	   * @readOnly
	   */

	  this.dimensions = ['single'];
	  /**
	   * @private
	   * @type {module:echarts/coord/single/SingleAxis}.
	   */

	  this._axis = null;
	  /**
	   * @private
	   * @type {module:zrender/core/BoundingRect}
	   */

	  this._rect;

	  this._init(axisModel, ecModel, api);
	  /**
	   * @type {module:echarts/coord/single/AxisModel}
	   */


	  this.model = axisModel;
	}

	Single.prototype = {
	  type: 'singleAxis',
	  axisPointerEnabled: true,
	  constructor: Single,

	  /**
	   * Initialize single coordinate system.
	   *
	   * @param  {module:echarts/coord/single/AxisModel} axisModel
	   * @param  {module:echarts/model/Global} ecModel
	   * @param  {module:echarts/ExtensionAPI} api
	   * @private
	   */
	  _init: function (axisModel, ecModel, api) {
	    var dim = this.dimension;
	    var axis = new SingleAxis(dim, axisHelper.createScaleByModel(axisModel), [0, 0], axisModel.get('type'), axisModel.get('position'));
	    var isCategory = axis.type === 'category';
	    axis.onBand = isCategory && axisModel.get('boundaryGap');
	    axis.inverse = axisModel.get('inverse');
	    axis.orient = axisModel.get('orient');
	    axisModel.axis = axis;
	    axis.model = axisModel;
	    axis.coordinateSystem = this;
	    this._axis = axis;
	  },

	  /**
	   * Update axis scale after data processed
	   * @param  {module:echarts/model/Global} ecModel
	   * @param  {module:echarts/ExtensionAPI} api
	   */
	  update: function (ecModel, api) {
	    ecModel.eachSeries(function (seriesModel) {
	      if (seriesModel.coordinateSystem === this) {
	        var data = seriesModel.getData();
	        var dim = this.dimension;

	        this._axis.scale.unionExtentFromData(data, seriesModel.coordDimToDataDim(dim));

	        axisHelper.niceScaleExtent(this._axis.scale, this._axis.model);
	      }
	    }, this);
	  },

	  /**
	   * Resize the single coordinate system.
	   *
	   * @param  {module:echarts/coord/single/AxisModel} axisModel
	   * @param  {module:echarts/ExtensionAPI} api
	   */
	  resize: function (axisModel, api) {
	    this._rect = getLayoutRect({
	      left: axisModel.get('left'),
	      top: axisModel.get('top'),
	      right: axisModel.get('right'),
	      bottom: axisModel.get('bottom'),
	      width: axisModel.get('width'),
	      height: axisModel.get('height')
	    }, {
	      width: api.getWidth(),
	      height: api.getHeight()
	    });

	    this._adjustAxis();
	  },

	  /**
	   * @return {module:zrender/core/BoundingRect}
	   */
	  getRect: function () {
	    return this._rect;
	  },

	  /**
	   * @private
	   */
	  _adjustAxis: function () {
	    var rect = this._rect;
	    var axis = this._axis;
	    var isHorizontal = axis.isHorizontal();
	    var extent = isHorizontal ? [0, rect.width] : [0, rect.height];
	    var idx = axis.reverse ? 1 : 0;
	    axis.setExtent(extent[idx], extent[1 - idx]);

	    this._updateAxisTransform(axis, isHorizontal ? rect.x : rect.y);
	  },

	  /**
	   * @param  {module:echarts/coord/single/SingleAxis} axis
	   * @param  {number} coordBase
	   */
	  _updateAxisTransform: function (axis, coordBase) {
	    var axisExtent = axis.getExtent();
	    var extentSum = axisExtent[0] + axisExtent[1];
	    var isHorizontal = axis.isHorizontal();
	    axis.toGlobalCoord = isHorizontal ? function (coord) {
	      return coord + coordBase;
	    } : function (coord) {
	      return extentSum - coord + coordBase;
	    };
	    axis.toLocalCoord = isHorizontal ? function (coord) {
	      return coord - coordBase;
	    } : function (coord) {
	      return extentSum - coord + coordBase;
	    };
	  },

	  /**
	   * Get axis.
	   *
	   * @return {module:echarts/coord/single/SingleAxis}
	   */
	  getAxis: function () {
	    return this._axis;
	  },

	  /**
	   * Get axis, add it just for draw tooltip.
	   *
	   * @return {[type]} [description]
	   */
	  getBaseAxis: function () {
	    return this._axis;
	  },

	  /**
	   * @return {Array.<module:echarts/coord/Axis>}
	   */
	  getAxes: function () {
	    return [this._axis];
	  },

	  /**
	   * @return {Object} {baseAxes: [], otherAxes: []}
	   */
	  getTooltipAxes: function () {
	    return {
	      baseAxes: [this.getAxis()]
	    };
	  },

	  /**
	   * If contain point.
	   *
	   * @param  {Array.<number>} point
	   * @return {boolean}
	   */
	  containPoint: function (point) {
	    var rect = this.getRect();
	    var axis = this.getAxis();
	    var orient = axis.orient;

	    if (orient === 'horizontal') {
	      return axis.contain(axis.toLocalCoord(point[0])) && point[1] >= rect.y && point[1] <= rect.y + rect.height;
	    } else {
	      return axis.contain(axis.toLocalCoord(point[1])) && point[0] >= rect.y && point[0] <= rect.y + rect.height;
	    }
	  },

	  /**
	   * @param {Array.<number>} point
	   * @return {Array.<number>}
	   */
	  pointToData: function (point) {
	    var axis = this.getAxis();
	    return [axis.coordToData(axis.toLocalCoord(point[axis.orient === 'horizontal' ? 0 : 1]))];
	  },

	  /**
	   * Convert the series data to concrete point.
	   *
	   * @param  {number|Array.<number>} val
	   * @return {Array.<number>}
	   */
	  dataToPoint: function (val) {
	    var axis = this.getAxis();
	    var rect = this.getRect();
	    var pt = [];
	    var idx = axis.orient === 'horizontal' ? 0 : 1;

	    if (val instanceof Array) {
	      val = val[0];
	    }

	    pt[idx] = axis.toGlobalCoord(axis.dataToCoord(+val));
	    pt[1 - idx] = idx === 0 ? rect.y + rect.height / 2 : rect.x + rect.width / 2;
	    return pt;
	  }
	};
	var _default = Single;
	module.exports = _default;

/***/ },
/* 467 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var Axis = __webpack_require__(277);

	/**
	 * @constructor  module:echarts/coord/single/SingleAxis
	 * @extends {module:echarts/coord/Axis}
	 * @param {string} dim
	 * @param {*} scale
	 * @param {Array.<number>} coordExtent
	 * @param {string} axisType
	 * @param {string} position
	 */
	var SingleAxis = function (dim, scale, coordExtent, axisType, position) {
	  Axis.call(this, dim, scale, coordExtent);
	  /**
	   * Axis type
	   * - 'category'
	   * - 'value'
	   * - 'time'
	   * - 'log'
	   * @type {string}
	   */

	  this.type = axisType || 'value';
	  /**
	   * Axis position
	   *  - 'top'
	   *  - 'bottom'
	   *  - 'left'
	   *  - 'right'
	   *  @type {string}
	   */

	  this.position = position || 'bottom';
	  /**
	   * Axis orient
	   *  - 'horizontal'
	   *  - 'vertical'
	   * @type {[type]}
	   */

	  this.orient = null;
	  /**
	   * @type {number}
	   */

	  this._labelInterval = null;
	};

	SingleAxis.prototype = {
	  constructor: SingleAxis,

	  /**
	   * Axis model
	   * @type {module:echarts/coord/single/AxisModel}
	   */
	  model: null,

	  /**
	   * Judge the orient of the axis.
	   * @return {boolean}
	   */
	  isHorizontal: function () {
	    var position = this.position;
	    return position === 'top' || position === 'bottom';
	  },

	  /**
	   * @override
	   */
	  pointToData: function (point, clamp) {
	    return this.coordinateSystem.pointToData(point, clamp)[0];
	  },

	  /**
	   * Convert the local coord(processed by dataToCoord())
	   * to global coord(concrete pixel coord).
	   * designated by module:echarts/coord/single/Single.
	   * @type {Function}
	   */
	  toGlobalCoord: null,

	  /**
	   * Convert the global coord to local coord.
	   * designated by module:echarts/coord/single/Single.
	   * @type {Function}
	   */
	  toLocalCoord: null
	};
	zrUtil.inherits(SingleAxis, Axis);
	var _default = SingleAxis;
	module.exports = _default;

/***/ },
/* 468 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var AxisBuilder = __webpack_require__(303);

	var graphic = __webpack_require__(212);

	var singleAxisHelper = __webpack_require__(469);

	var AxisView = __webpack_require__(304);

	var getInterval = AxisBuilder.getInterval;
	var ifIgnoreOnTick = AxisBuilder.ifIgnoreOnTick;
	var axisBuilderAttrs = ['axisLine', 'axisTickLabel', 'axisName'];
	var selfBuilderAttr = 'splitLine';
	var SingleAxisView = AxisView.extend({
	  type: 'singleAxis',
	  axisPointerClass: 'SingleAxisPointer',
	  render: function (axisModel, ecModel, api, payload) {
	    var group = this.group;
	    group.removeAll();
	    var layout = singleAxisHelper.layout(axisModel);
	    var axisBuilder = new AxisBuilder(axisModel, layout);
	    zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);
	    group.add(axisBuilder.getGroup());

	    if (axisModel.get(selfBuilderAttr + '.show')) {
	      this['_' + selfBuilderAttr](axisModel, layout.labelInterval);
	    }

	    SingleAxisView.superCall(this, 'render', axisModel, ecModel, api, payload);
	  },
	  _splitLine: function (axisModel, labelInterval) {
	    var axis = axisModel.axis;

	    if (axis.scale.isBlank()) {
	      return;
	    }

	    var splitLineModel = axisModel.getModel('splitLine');
	    var lineStyleModel = splitLineModel.getModel('lineStyle');
	    var lineWidth = lineStyleModel.get('width');
	    var lineColors = lineStyleModel.get('color');
	    var lineInterval = getInterval(splitLineModel, labelInterval);
	    lineColors = lineColors instanceof Array ? lineColors : [lineColors];
	    var gridRect = axisModel.coordinateSystem.getRect();
	    var isHorizontal = axis.isHorizontal();
	    var splitLines = [];
	    var lineCount = 0;
	    var ticksCoords = axis.getTicksCoords();
	    var p1 = [];
	    var p2 = [];
	    var showMinLabel = axisModel.get('axisLabel.showMinLabel');
	    var showMaxLabel = axisModel.get('axisLabel.showMaxLabel');

	    for (var i = 0; i < ticksCoords.length; ++i) {
	      if (ifIgnoreOnTick(axis, i, lineInterval, ticksCoords.length, showMinLabel, showMaxLabel)) {
	        continue;
	      }

	      var tickCoord = axis.toGlobalCoord(ticksCoords[i]);

	      if (isHorizontal) {
	        p1[0] = tickCoord;
	        p1[1] = gridRect.y;
	        p2[0] = tickCoord;
	        p2[1] = gridRect.y + gridRect.height;
	      } else {
	        p1[0] = gridRect.x;
	        p1[1] = tickCoord;
	        p2[0] = gridRect.x + gridRect.width;
	        p2[1] = tickCoord;
	      }

	      var colorIndex = lineCount++ % lineColors.length;
	      splitLines[colorIndex] = splitLines[colorIndex] || [];
	      splitLines[colorIndex].push(new graphic.Line(graphic.subPixelOptimizeLine({
	        shape: {
	          x1: p1[0],
	          y1: p1[1],
	          x2: p2[0],
	          y2: p2[1]
	        },
	        style: {
	          lineWidth: lineWidth
	        },
	        silent: true
	      })));
	    }

	    for (var i = 0; i < splitLines.length; ++i) {
	      this.group.add(graphic.mergePath(splitLines[i], {
	        style: {
	          stroke: lineColors[i % lineColors.length],
	          lineDash: lineStyleModel.getLineDash(lineWidth),
	          lineWidth: lineWidth
	        },
	        silent: true
	      }));
	    }
	  }
	});
	var _default = SingleAxisView;
	module.exports = _default;

/***/ },
/* 469 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	/**
	 * @param {Object} opt {labelInside}
	 * @return {Object} {
	 *  position, rotation, labelDirection, labelOffset,
	 *  tickDirection, labelRotate, labelInterval, z2
	 * }
	 */
	function layout(axisModel, opt) {
	  opt = opt || {};
	  var single = axisModel.coordinateSystem;
	  var axis = axisModel.axis;
	  var layout = {};
	  var axisPosition = axis.position;
	  var orient = axis.orient;
	  var rect = single.getRect();
	  var rectBound = [rect.x, rect.x + rect.width, rect.y, rect.y + rect.height];
	  var positionMap = {
	    horizontal: {
	      top: rectBound[2],
	      bottom: rectBound[3]
	    },
	    vertical: {
	      left: rectBound[0],
	      right: rectBound[1]
	    }
	  };
	  layout.position = [orient === 'vertical' ? positionMap.vertical[axisPosition] : rectBound[0], orient === 'horizontal' ? positionMap.horizontal[axisPosition] : rectBound[3]];
	  var r = {
	    horizontal: 0,
	    vertical: 1
	  };
	  layout.rotation = Math.PI / 2 * r[orient];
	  var directionMap = {
	    top: -1,
	    bottom: 1,
	    right: 1,
	    left: -1
	  };
	  layout.labelDirection = layout.tickDirection = layout.nameDirection = directionMap[axisPosition];

	  if (axisModel.get('axisTick.inside')) {
	    layout.tickDirection = -layout.tickDirection;
	  }

	  if (zrUtil.retrieve(opt.labelInside, axisModel.get('axisLabel.inside'))) {
	    layout.labelDirection = -layout.labelDirection;
	  }

	  var labelRotation = opt.rotate;
	  labelRotation == null && (labelRotation = axisModel.get('axisLabel.rotate'));
	  layout.labelRotation = axisPosition === 'top' ? -labelRotation : labelRotation;
	  layout.labelInterval = axis.getLabelInterval();
	  layout.z2 = 1;
	  return layout;
	}

	exports.layout = layout;

/***/ },
/* 470 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var ComponentModel = __webpack_require__(245);

	var axisModelCreator = __webpack_require__(299);

	var axisModelCommonMixin = __webpack_require__(275);

	var AxisModel = ComponentModel.extend({
	  type: 'singleAxis',
	  layoutMode: 'box',

	  /**
	   * @type {module:echarts/coord/single/SingleAxis}
	   */
	  axis: null,

	  /**
	   * @type {module:echarts/coord/single/Single}
	   */
	  coordinateSystem: null,

	  /**
	   * @override
	   */
	  getCoordSysModel: function () {
	    return this;
	  }
	});
	var defaultOption = {
	  left: '5%',
	  top: '5%',
	  right: '5%',
	  bottom: '5%',
	  type: 'value',
	  position: 'bottom',
	  orient: 'horizontal',
	  axisLine: {
	    show: true,
	    lineStyle: {
	      width: 2,
	      type: 'solid'
	    }
	  },
	  // Single coordinate system and single axis is the,
	  // which is used as the parent tooltip model.
	  // same model, so we set default tooltip show as true.
	  tooltip: {
	    show: true
	  },
	  axisTick: {
	    show: true,
	    length: 6,
	    lineStyle: {
	      width: 2
	    }
	  },
	  axisLabel: {
	    show: true,
	    interval: 'auto'
	  },
	  splitLine: {
	    show: true,
	    lineStyle: {
	      type: 'dashed',
	      opacity: 0.2
	    }
	  }
	};

	function getAxisType(axisName, option) {
	  return option.type || (option.data ? 'category' : 'value');
	}

	zrUtil.merge(AxisModel.prototype, axisModelCommonMixin);
	axisModelCreator('single', AxisModel, getAxisType, defaultOption);
	var _default = AxisModel;
	module.exports = _default;

/***/ },
/* 471 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var zrUtil = __webpack_require__(166);

	var axisPointerModelHelper = __webpack_require__(305);

	var axisTrigger = __webpack_require__(472);

	__webpack_require__(474);

	__webpack_require__(475);

	__webpack_require__(477);

	// CartesianAxisPointer is not supposed to be required here. But consider
	// echarts.simple.js and online build tooltip, which only require gridSimple,
	// CartesianAxisPointer should be able to required somewhere.
	echarts.registerPreprocessor(function (option) {
	  // Always has a global axisPointerModel for default setting.
	  if (option) {
	    (!option.axisPointer || option.axisPointer.length === 0) && (option.axisPointer = {});
	    var link = option.axisPointer.link; // Normalize to array to avoid object mergin. But if link
	    // is not set, remain null/undefined, otherwise it will
	    // override existent link setting.

	    if (link && !zrUtil.isArray(link)) {
	      option.axisPointer.link = [link];
	    }
	  }
	}); // This process should proformed after coordinate systems created
	// and series data processed. So put it on statistic processing stage.

	echarts.registerProcessor(echarts.PRIORITY.PROCESSOR.STATISTIC, function (ecModel, api) {
	  // Build axisPointerModel, mergin tooltip.axisPointer model for each axis.
	  // allAxesInfo should be updated when setOption performed.
	  ecModel.getComponent('axisPointer').coordSysAxesInfo = axisPointerModelHelper.collect(ecModel, api);
	}); // Broadcast to all views.

	echarts.registerAction({
	  type: 'updateAxisPointer',
	  event: 'updateAxisPointer',
	  update: ':updateAxisPointer'
	}, axisTrigger);

/***/ },
/* 472 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var modelUtil = __webpack_require__(203);

	var modelHelper = __webpack_require__(305);

	var findPointFromSeries = __webpack_require__(473);

	var each = zrUtil.each;
	var curry = zrUtil.curry;
	var get = modelUtil.makeGetter();
	/**
	 * Basic logic: check all axis, if they do not demand show/highlight,
	 * then hide/downplay them.
	 *
	 * @param {Object} coordSysAxesInfo
	 * @param {Object} payload
	 * @param {string} [payload.currTrigger] 'click' | 'mousemove' | 'leave'
	 * @param {Array.<number>} [payload.x] x and y, which are mandatory, specify a point to
	 *              trigger axisPointer and tooltip.
	 * @param {Array.<number>} [payload.y] x and y, which are mandatory, specify a point to
	 *              trigger axisPointer and tooltip.
	 * @param {Object} [payload.seriesIndex] finder, optional, restrict target axes.
	 * @param {Object} [payload.dataIndex] finder, restrict target axes.
	 * @param {Object} [payload.axesInfo] finder, restrict target axes.
	 *        [{
	 *          axisDim: 'x'|'y'|'angle'|...,
	 *          axisIndex: ...,
	 *          value: ...
	 *        }, ...]
	 * @param {Function} [payload.dispatchAction]
	 * @param {Object} [payload.tooltipOption]
	 * @param {Object|Array.<number>|Function} [payload.position] Tooltip position,
	 *        which can be specified in dispatchAction
	 * @param {module:echarts/model/Global} ecModel
	 * @param {module:echarts/ExtensionAPI} api
	 * @return {Object} content of event obj for echarts.connect.
	 */

	function _default(payload, ecModel, api) {
	  var currTrigger = payload.currTrigger;
	  var point = [payload.x, payload.y];
	  var finder = payload;
	  var dispatchAction = payload.dispatchAction || zrUtil.bind(api.dispatchAction, api);
	  var coordSysAxesInfo = ecModel.getComponent('axisPointer').coordSysAxesInfo; // Pending
	  // See #6121. But we are not able to reproduce it yet.

	  if (!coordSysAxesInfo) {
	    return;
	  }

	  if (illegalPoint(point)) {
	    // Used in the default behavior of `connection`: use the sample seriesIndex
	    // and dataIndex. And also used in the tooltipView trigger.
	    point = findPointFromSeries({
	      seriesIndex: finder.seriesIndex,
	      // Do not use dataIndexInside from other ec instance.
	      // FIXME: auto detect it?
	      dataIndex: finder.dataIndex
	    }, ecModel).point;
	  }

	  var isIllegalPoint = illegalPoint(point); // Axis and value can be specified when calling dispatchAction({type: 'updateAxisPointer'}).
	  // Notice: In this case, it is difficult to get the `point` (which is necessary to show
	  // tooltip, so if point is not given, we just use the point found by sample seriesIndex
	  // and dataIndex.

	  var inputAxesInfo = finder.axesInfo;
	  var axesInfo = coordSysAxesInfo.axesInfo;
	  var shouldHide = currTrigger === 'leave' || illegalPoint(point);
	  var outputFinder = {};
	  var showValueMap = {};
	  var dataByCoordSys = {
	    list: [],
	    map: {}
	  };
	  var updaters = {
	    showPointer: curry(showPointer, showValueMap),
	    showTooltip: curry(showTooltip, dataByCoordSys)
	  }; // Process for triggered axes.

	  each(coordSysAxesInfo.coordSysMap, function (coordSys, coordSysKey) {
	    // If a point given, it must be contained by the coordinate system.
	    var coordSysContainsPoint = isIllegalPoint || coordSys.containPoint(point);
	    each(coordSysAxesInfo.coordSysAxesInfo[coordSysKey], function (axisInfo, key) {
	      var axis = axisInfo.axis;
	      var inputAxisInfo = findInputAxisInfo(inputAxesInfo, axisInfo); // If no inputAxesInfo, no axis is restricted.

	      if (!shouldHide && coordSysContainsPoint && (!inputAxesInfo || inputAxisInfo)) {
	        var val = inputAxisInfo && inputAxisInfo.value;

	        if (val == null && !isIllegalPoint) {
	          val = axis.pointToData(point);
	        }

	        val != null && processOnAxis(axisInfo, val, updaters, false, outputFinder);
	      }
	    });
	  }); // Process for linked axes.

	  var linkTriggers = {};
	  each(axesInfo, function (tarAxisInfo, tarKey) {
	    var linkGroup = tarAxisInfo.linkGroup; // If axis has been triggered in the previous stage, it should not be triggered by link.

	    if (linkGroup && !showValueMap[tarKey]) {
	      each(linkGroup.axesInfo, function (srcAxisInfo, srcKey) {
	        var srcValItem = showValueMap[srcKey]; // If srcValItem exist, source axis is triggered, so link to target axis.

	        if (srcAxisInfo !== tarAxisInfo && srcValItem) {
	          var val = srcValItem.value;
	          linkGroup.mapper && (val = tarAxisInfo.axis.scale.parse(linkGroup.mapper(val, makeMapperParam(srcAxisInfo), makeMapperParam(tarAxisInfo))));
	          linkTriggers[tarAxisInfo.key] = val;
	        }
	      });
	    }
	  });
	  each(linkTriggers, function (val, tarKey) {
	    processOnAxis(axesInfo[tarKey], val, updaters, true, outputFinder);
	  });
	  updateModelActually(showValueMap, axesInfo, outputFinder);
	  dispatchTooltipActually(dataByCoordSys, point, payload, dispatchAction);
	  dispatchHighDownActually(axesInfo, dispatchAction, api);
	  return outputFinder;
	}

	function processOnAxis(axisInfo, newValue, updaters, dontSnap, outputFinder) {
	  var axis = axisInfo.axis;

	  if (axis.scale.isBlank() || !axis.containData(newValue)) {
	    return;
	  }

	  if (!axisInfo.involveSeries) {
	    updaters.showPointer(axisInfo, newValue);
	    return;
	  } // Heavy calculation. So put it after axis.containData checking.


	  var payloadInfo = buildPayloadsBySeries(newValue, axisInfo);
	  var payloadBatch = payloadInfo.payloadBatch;
	  var snapToValue = payloadInfo.snapToValue; // Fill content of event obj for echarts.connect.
	  // By defualt use the first involved series data as a sample to connect.

	  if (payloadBatch[0] && outputFinder.seriesIndex == null) {
	    zrUtil.extend(outputFinder, payloadBatch[0]);
	  } // If no linkSource input, this process is for collecting link
	  // target, where snap should not be accepted.


	  if (!dontSnap && axisInfo.snap) {
	    if (axis.containData(snapToValue) && snapToValue != null) {
	      newValue = snapToValue;
	    }
	  }

	  updaters.showPointer(axisInfo, newValue, payloadBatch, outputFinder); // Tooltip should always be snapToValue, otherwise there will be
	  // incorrect "axis value ~ series value" mapping displayed in tooltip.

	  updaters.showTooltip(axisInfo, payloadInfo, snapToValue);
	}

	function buildPayloadsBySeries(value, axisInfo) {
	  var axis = axisInfo.axis;
	  var dim = axis.dim;
	  var snapToValue = value;
	  var payloadBatch = [];
	  var minDist = Number.MAX_VALUE;
	  var minDiff = -1;
	  each(axisInfo.seriesModels, function (series, idx) {
	    var dataDim = series.coordDimToDataDim(dim);
	    var seriesNestestValue;
	    var dataIndices;

	    if (series.getAxisTooltipData) {
	      var result = series.getAxisTooltipData(dataDim, value, axis);
	      dataIndices = result.dataIndices;
	      seriesNestestValue = result.nestestValue;
	    } else {
	      dataIndices = series.getData().indicesOfNearest(dataDim[0], value, // Add a threshold to avoid find the wrong dataIndex
	      // when data length is not same.
	      false, axis.type === 'category' ? 0.5 : null);

	      if (!dataIndices.length) {
	        return;
	      }

	      seriesNestestValue = series.getData().get(dataDim[0], dataIndices[0]);
	    }

	    if (seriesNestestValue == null || !isFinite(seriesNestestValue)) {
	      return;
	    }

	    var diff = value - seriesNestestValue;
	    var dist = Math.abs(diff); // Consider category case

	    if (dist <= minDist) {
	      if (dist < minDist || diff >= 0 && minDiff < 0) {
	        minDist = dist;
	        minDiff = diff;
	        snapToValue = seriesNestestValue;
	        payloadBatch.length = 0;
	      }

	      each(dataIndices, function (dataIndex) {
	        payloadBatch.push({
	          seriesIndex: series.seriesIndex,
	          dataIndexInside: dataIndex,
	          dataIndex: series.getData().getRawIndex(dataIndex)
	        });
	      });
	    }
	  });
	  return {
	    payloadBatch: payloadBatch,
	    snapToValue: snapToValue
	  };
	}

	function showPointer(showValueMap, axisInfo, value, payloadBatch) {
	  showValueMap[axisInfo.key] = {
	    value: value,
	    payloadBatch: payloadBatch
	  };
	}

	function showTooltip(dataByCoordSys, axisInfo, payloadInfo, value) {
	  var payloadBatch = payloadInfo.payloadBatch;
	  var axis = axisInfo.axis;
	  var axisModel = axis.model;
	  var axisPointerModel = axisInfo.axisPointerModel; // If no data, do not create anything in dataByCoordSys,
	  // whose length will be used to judge whether dispatch action.

	  if (!axisInfo.triggerTooltip || !payloadBatch.length) {
	    return;
	  }

	  var coordSysModel = axisInfo.coordSys.model;
	  var coordSysKey = modelHelper.makeKey(coordSysModel);
	  var coordSysItem = dataByCoordSys.map[coordSysKey];

	  if (!coordSysItem) {
	    coordSysItem = dataByCoordSys.map[coordSysKey] = {
	      coordSysId: coordSysModel.id,
	      coordSysIndex: coordSysModel.componentIndex,
	      coordSysType: coordSysModel.type,
	      coordSysMainType: coordSysModel.mainType,
	      dataByAxis: []
	    };
	    dataByCoordSys.list.push(coordSysItem);
	  }

	  coordSysItem.dataByAxis.push({
	    axisDim: axis.dim,
	    axisIndex: axisModel.componentIndex,
	    axisType: axisModel.type,
	    axisId: axisModel.id,
	    value: value,
	    // Caustion: viewHelper.getValueLabel is actually on "view stage", which
	    // depends that all models have been updated. So it should not be performed
	    // here. Considering axisPointerModel used here is volatile, which is hard
	    // to be retrieve in TooltipView, we prepare parameters here.
	    valueLabelOpt: {
	      precision: axisPointerModel.get('label.precision'),
	      formatter: axisPointerModel.get('label.formatter')
	    },
	    seriesDataIndices: payloadBatch.slice()
	  });
	}

	function updateModelActually(showValueMap, axesInfo, outputFinder) {
	  var outputAxesInfo = outputFinder.axesInfo = []; // Basic logic: If no 'show' required, 'hide' this axisPointer.

	  each(axesInfo, function (axisInfo, key) {
	    var option = axisInfo.axisPointerModel.option;
	    var valItem = showValueMap[key];

	    if (valItem) {
	      !axisInfo.useHandle && (option.status = 'show');
	      option.value = valItem.value; // For label formatter param and highlight.

	      option.seriesDataIndices = (valItem.payloadBatch || []).slice();
	    } // When always show (e.g., handle used), remain
	    // original value and status.
	    else {
	        // If hide, value still need to be set, consider
	        // click legend to toggle axis blank.
	        !axisInfo.useHandle && (option.status = 'hide');
	      } // If status is 'hide', should be no info in payload.


	    option.status === 'show' && outputAxesInfo.push({
	      axisDim: axisInfo.axis.dim,
	      axisIndex: axisInfo.axis.model.componentIndex,
	      value: option.value
	    });
	  });
	}

	function dispatchTooltipActually(dataByCoordSys, point, payload, dispatchAction) {
	  // Basic logic: If no showTip required, hideTip will be dispatched.
	  if (illegalPoint(point) || !dataByCoordSys.list.length) {
	    dispatchAction({
	      type: 'hideTip'
	    });
	    return;
	  } // In most case only one axis (or event one series is used). It is
	  // convinient to fetch payload.seriesIndex and payload.dataIndex
	  // dirtectly. So put the first seriesIndex and dataIndex of the first
	  // axis on the payload.


	  var sampleItem = ((dataByCoordSys.list[0].dataByAxis[0] || {}).seriesDataIndices || [])[0] || {};
	  dispatchAction({
	    type: 'showTip',
	    escapeConnect: true,
	    x: point[0],
	    y: point[1],
	    tooltipOption: payload.tooltipOption,
	    position: payload.position,
	    dataIndexInside: sampleItem.dataIndexInside,
	    dataIndex: sampleItem.dataIndex,
	    seriesIndex: sampleItem.seriesIndex,
	    dataByCoordSys: dataByCoordSys.list
	  });
	}

	function dispatchHighDownActually(axesInfo, dispatchAction, api) {
	  // FIXME
	  // highlight status modification shoule be a stage of main process?
	  // (Consider confilct (e.g., legend and axisPointer) and setOption)
	  var zr = api.getZr();
	  var highDownKey = 'axisPointerLastHighlights';
	  var lastHighlights = get(zr)[highDownKey] || {};
	  var newHighlights = get(zr)[highDownKey] = {}; // Update highlight/downplay status according to axisPointer model.
	  // Build hash map and remove duplicate incidentally.

	  each(axesInfo, function (axisInfo, key) {
	    var option = axisInfo.axisPointerModel.option;
	    option.status === 'show' && each(option.seriesDataIndices, function (batchItem) {
	      var key = batchItem.seriesIndex + ' | ' + batchItem.dataIndex;
	      newHighlights[key] = batchItem;
	    });
	  }); // Diff.

	  var toHighlight = [];
	  var toDownplay = [];
	  zrUtil.each(lastHighlights, function (batchItem, key) {
	    !newHighlights[key] && toDownplay.push(batchItem);
	  });
	  zrUtil.each(newHighlights, function (batchItem, key) {
	    !lastHighlights[key] && toHighlight.push(batchItem);
	  });
	  toDownplay.length && api.dispatchAction({
	    type: 'downplay',
	    escapeConnect: true,
	    batch: toDownplay
	  });
	  toHighlight.length && api.dispatchAction({
	    type: 'highlight',
	    escapeConnect: true,
	    batch: toHighlight
	  });
	}

	function findInputAxisInfo(inputAxesInfo, axisInfo) {
	  for (var i = 0; i < (inputAxesInfo || []).length; i++) {
	    var inputAxisInfo = inputAxesInfo[i];

	    if (axisInfo.axis.dim === inputAxisInfo.axisDim && axisInfo.axis.model.componentIndex === inputAxisInfo.axisIndex) {
	      return inputAxisInfo;
	    }
	  }
	}

	function makeMapperParam(axisInfo) {
	  var axisModel = axisInfo.axis.model;
	  var item = {};
	  var dim = item.axisDim = axisInfo.axis.dim;
	  item.axisIndex = item[dim + 'AxisIndex'] = axisModel.componentIndex;
	  item.axisName = item[dim + 'AxisName'] = axisModel.name;
	  item.axisId = item[dim + 'AxisId'] = axisModel.id;
	  return item;
	}

	function illegalPoint(point) {
	  return !point || point[0] == null || isNaN(point[0]) || point[1] == null || isNaN(point[1]);
	}

	module.exports = _default;

/***/ },
/* 473 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var modelUtil = __webpack_require__(203);

	/**
	 * @param {Object} finder contains {seriesIndex, dataIndex, dataIndexInside}
	 * @param {module:echarts/model/Global} ecModel
	 * @return {Object} {point: [x, y], el: ...} point Will not be null.
	 */
	function _default(finder, ecModel) {
	  var point = [];
	  var seriesIndex = finder.seriesIndex;
	  var seriesModel;

	  if (seriesIndex == null || !(seriesModel = ecModel.getSeriesByIndex(seriesIndex))) {
	    return {
	      point: []
	    };
	  }

	  var data = seriesModel.getData();
	  var dataIndex = modelUtil.queryDataIndex(data, finder);

	  if (dataIndex == null || zrUtil.isArray(dataIndex)) {
	    return {
	      point: []
	    };
	  }

	  var el = data.getItemGraphicEl(dataIndex);
	  var coordSys = seriesModel.coordinateSystem;

	  if (seriesModel.getTooltipPosition) {
	    point = seriesModel.getTooltipPosition(dataIndex) || [];
	  } else if (coordSys && coordSys.dataToPoint) {
	    point = coordSys.dataToPoint(data.getValues(zrUtil.map(coordSys.dimensions, function (dim) {
	      return seriesModel.coordDimToDataDim(dim)[0];
	    }), dataIndex, true)) || [];
	  } else if (el) {
	    // Use graphic bounding rect
	    var rect = el.getBoundingRect().clone();
	    rect.applyTransform(el.transform);
	    point = [rect.x + rect.width / 2, rect.y + rect.height / 2];
	  }

	  return {
	    point: point,
	    el: el
	  };
	}

	module.exports = _default;

/***/ },
/* 474 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var AxisPointerModel = echarts.extendComponentModel({
	  type: 'axisPointer',
	  coordSysAxesInfo: null,
	  defaultOption: {
	    // 'auto' means that show when triggered by tooltip or handle.
	    show: 'auto',
	    // 'click' | 'mousemove' | 'none'
	    triggerOn: null,
	    // set default in AxisPonterView.js
	    zlevel: 0,
	    z: 50,
	    type: 'line',
	    // axispointer triggered by tootip determine snap automatically,
	    // see `modelHelper`.
	    snap: false,
	    triggerTooltip: true,
	    value: null,
	    status: null,
	    // Init value depends on whether handle is used.
	    // [group0, group1, ...]
	    // Each group can be: {
	    //      mapper: function () {},
	    //      singleTooltip: 'multiple',  // 'multiple' or 'single'
	    //      xAxisId: ...,
	    //      yAxisName: ...,
	    //      angleAxisIndex: ...
	    // }
	    // mapper: can be ignored.
	    //      input: {axisInfo, value}
	    //      output: {axisInfo, value}
	    link: [],
	    // Do not set 'auto' here, otherwise global animation: false
	    // will not effect at this axispointer.
	    animation: null,
	    animationDurationUpdate: 200,
	    lineStyle: {
	      color: '#aaa',
	      width: 1,
	      type: 'solid'
	    },
	    shadowStyle: {
	      color: 'rgba(150,150,150,0.3)'
	    },
	    label: {
	      show: true,
	      formatter: null,
	      // string | Function
	      precision: 'auto',
	      // Or a number like 0, 1, 2 ...
	      margin: 3,
	      color: '#fff',
	      padding: [5, 7, 5, 7],
	      backgroundColor: 'auto',
	      // default: axis line color
	      borderColor: null,
	      borderWidth: 0,
	      shadowBlur: 3,
	      shadowColor: '#aaa' // Considering applicability, common style should
	      // better not have shadowOffset.
	      // shadowOffsetX: 0,
	      // shadowOffsetY: 2

	    },
	    handle: {
	      show: false,
	      icon: 'M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4h1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7v-1.2h6.6z M13.3,22H6.7v-1.2h6.6z M13.3,19.6H6.7v-1.2h6.6z',
	      // jshint ignore:line
	      size: 45,
	      // handle margin is from symbol center to axis, which is stable when circular move.
	      margin: 50,
	      // color: '#1b8bbd'
	      // color: '#2f4554'
	      color: '#333',
	      shadowBlur: 3,
	      shadowColor: '#aaa',
	      shadowOffsetX: 0,
	      shadowOffsetY: 2,
	      // For mobile performance
	      throttle: 40
	    }
	  }
	});
	var _default = AxisPointerModel;
	module.exports = _default;

/***/ },
/* 475 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var globalListener = __webpack_require__(476);

	var AxisPointerView = echarts.extendComponentView({
	  type: 'axisPointer',
	  render: function (globalAxisPointerModel, ecModel, api) {
	    var globalTooltipModel = ecModel.getComponent('tooltip');
	    var triggerOn = globalAxisPointerModel.get('triggerOn') || globalTooltipModel && globalTooltipModel.get('triggerOn') || 'mousemove|click'; // Register global listener in AxisPointerView to enable
	    // AxisPointerView to be independent to Tooltip.

	    globalListener.register('axisPointer', api, function (currTrigger, e, dispatchAction) {
	      // If 'none', it is not controlled by mouse totally.
	      if (triggerOn !== 'none' && (currTrigger === 'leave' || triggerOn.indexOf(currTrigger) >= 0)) {
	        dispatchAction({
	          type: 'updateAxisPointer',
	          currTrigger: currTrigger,
	          x: e && e.offsetX,
	          y: e && e.offsetY
	        });
	      }
	    });
	  },

	  /**
	   * @override
	   */
	  remove: function (ecModel, api) {
	    globalListener.unregister(api.getZr(), 'axisPointer');
	    AxisPointerView.superApply(this._model, 'remove', arguments);
	  },

	  /**
	   * @override
	   */
	  dispose: function (ecModel, api) {
	    globalListener.unregister('axisPointer', api);
	    AxisPointerView.superApply(this._model, 'dispose', arguments);
	  }
	});
	var _default = AxisPointerView;
	module.exports = _default;

/***/ },
/* 476 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var env = __webpack_require__(165);

	var modelUtil = __webpack_require__(203);

	var get = modelUtil.makeGetter();
	var each = zrUtil.each;
	/**
	 * @param {string} key
	 * @param {module:echarts/ExtensionAPI} api
	 * @param {Function} handler
	 *      param: {string} currTrigger
	 *      param: {Array.<number>} point
	 */

	function register(key, api, handler) {
	  if (env.node) {
	    return;
	  }

	  var zr = api.getZr();
	  get(zr).records || (get(zr).records = {});
	  initGlobalListeners(zr, api);
	  var record = get(zr).records[key] || (get(zr).records[key] = {});
	  record.handler = handler;
	}

	function initGlobalListeners(zr, api) {
	  if (get(zr).initialized) {
	    return;
	  }

	  get(zr).initialized = true;
	  useHandler('click', zrUtil.curry(doEnter, 'click'));
	  useHandler('mousemove', zrUtil.curry(doEnter, 'mousemove')); // useHandler('mouseout', onLeave);

	  useHandler('globalout', onLeave);

	  function useHandler(eventType, cb) {
	    zr.on(eventType, function (e) {
	      var dis = makeDispatchAction(api);
	      each(get(zr).records, function (record) {
	        record && cb(record, e, dis.dispatchAction);
	      });
	      dispatchTooltipFinally(dis.pendings, api);
	    });
	  }
	}

	function dispatchTooltipFinally(pendings, api) {
	  var showLen = pendings.showTip.length;
	  var hideLen = pendings.hideTip.length;
	  var actuallyPayload;

	  if (showLen) {
	    actuallyPayload = pendings.showTip[showLen - 1];
	  } else if (hideLen) {
	    actuallyPayload = pendings.hideTip[hideLen - 1];
	  }

	  if (actuallyPayload) {
	    actuallyPayload.dispatchAction = null;
	    api.dispatchAction(actuallyPayload);
	  }
	}

	function onLeave(record, e, dispatchAction) {
	  record.handler('leave', null, dispatchAction);
	}

	function doEnter(currTrigger, record, e, dispatchAction) {
	  record.handler(currTrigger, e, dispatchAction);
	}

	function makeDispatchAction(api) {
	  var pendings = {
	    showTip: [],
	    hideTip: []
	  }; // FIXME
	  // better approach?
	  // 'showTip' and 'hideTip' can be triggered by axisPointer and tooltip,
	  // which may be conflict, (axisPointer call showTip but tooltip call hideTip);
	  // So we have to add "final stage" to merge those dispatched actions.

	  var dispatchAction = function (payload) {
	    var pendingList = pendings[payload.type];

	    if (pendingList) {
	      pendingList.push(payload);
	    } else {
	      payload.dispatchAction = dispatchAction;
	      api.dispatchAction(payload);
	    }
	  };

	  return {
	    dispatchAction: dispatchAction,
	    pendings: pendings
	  };
	}
	/**
	 * @param {string} key
	 * @param {module:echarts/ExtensionAPI} api
	 */


	function unregister(key, api) {
	  if (env.node) {
	    return;
	  }

	  var zr = api.getZr();
	  var record = (get(zr).records || {})[key];

	  if (record) {
	    get(zr).records[key] = null;
	  }
	}

	exports.register = register;
	exports.unregister = unregister;

/***/ },
/* 477 */
/***/ function(module, exports, __webpack_require__) {

	var graphic = __webpack_require__(212);

	var BaseAxisPointer = __webpack_require__(478);

	var viewHelper = __webpack_require__(479);

	var cartesianAxisHelper = __webpack_require__(306);

	var AxisView = __webpack_require__(304);

	var CartesianAxisPointer = BaseAxisPointer.extend({
	  /**
	   * @override
	   */
	  makeElOption: function (elOption, value, axisModel, axisPointerModel, api) {
	    var axis = axisModel.axis;
	    var grid = axis.grid;
	    var axisPointerType = axisPointerModel.get('type');
	    var otherExtent = getCartesian(grid, axis).getOtherAxis(axis).getGlobalExtent();
	    var pixelValue = axis.toGlobalCoord(axis.dataToCoord(value, true));

	    if (axisPointerType && axisPointerType !== 'none') {
	      var elStyle = viewHelper.buildElStyle(axisPointerModel);
	      var pointerOption = pointerShapeBuilder[axisPointerType](axis, pixelValue, otherExtent, elStyle);
	      pointerOption.style = elStyle;
	      elOption.graphicKey = pointerOption.type;
	      elOption.pointer = pointerOption;
	    }

	    var layoutInfo = cartesianAxisHelper.layout(grid.model, axisModel);
	    viewHelper.buildCartesianSingleLabelElOption(value, elOption, layoutInfo, axisModel, axisPointerModel, api);
	  },

	  /**
	   * @override
	   */
	  getHandleTransform: function (value, axisModel, axisPointerModel) {
	    var layoutInfo = cartesianAxisHelper.layout(axisModel.axis.grid.model, axisModel, {
	      labelInside: false
	    });
	    layoutInfo.labelMargin = axisPointerModel.get('handle.margin');
	    return {
	      position: viewHelper.getTransformedPosition(axisModel.axis, value, layoutInfo),
	      rotation: layoutInfo.rotation + (layoutInfo.labelDirection < 0 ? Math.PI : 0)
	    };
	  },

	  /**
	   * @override
	   */
	  updateHandleTransform: function (transform, delta, axisModel, axisPointerModel) {
	    var axis = axisModel.axis;
	    var grid = axis.grid;
	    var axisExtent = axis.getGlobalExtent(true);
	    var otherExtent = getCartesian(grid, axis).getOtherAxis(axis).getGlobalExtent();
	    var dimIndex = axis.dim === 'x' ? 0 : 1;
	    var currPosition = transform.position;
	    currPosition[dimIndex] += delta[dimIndex];
	    currPosition[dimIndex] = Math.min(axisExtent[1], currPosition[dimIndex]);
	    currPosition[dimIndex] = Math.max(axisExtent[0], currPosition[dimIndex]);
	    var cursorOtherValue = (otherExtent[1] + otherExtent[0]) / 2;
	    var cursorPoint = [cursorOtherValue, cursorOtherValue];
	    cursorPoint[dimIndex] = currPosition[dimIndex]; // Make tooltip do not overlap axisPointer and in the middle of the grid.

	    var tooltipOptions = [{
	      verticalAlign: 'middle'
	    }, {
	      align: 'center'
	    }];
	    return {
	      position: currPosition,
	      rotation: transform.rotation,
	      cursorPoint: cursorPoint,
	      tooltipOption: tooltipOptions[dimIndex]
	    };
	  }
	});

	function getCartesian(grid, axis) {
	  var opt = {};
	  opt[axis.dim + 'AxisIndex'] = axis.index;
	  return grid.getCartesian(opt);
	}

	var pointerShapeBuilder = {
	  line: function (axis, pixelValue, otherExtent, elStyle) {
	    var targetShape = viewHelper.makeLineShape([pixelValue, otherExtent[0]], [pixelValue, otherExtent[1]], getAxisDimIndex(axis));
	    graphic.subPixelOptimizeLine({
	      shape: targetShape,
	      style: elStyle
	    });
	    return {
	      type: 'Line',
	      shape: targetShape
	    };
	  },
	  shadow: function (axis, pixelValue, otherExtent, elStyle) {
	    var bandWidth = axis.getBandWidth();
	    var span = otherExtent[1] - otherExtent[0];
	    return {
	      type: 'Rect',
	      shape: viewHelper.makeRectShape([pixelValue - bandWidth / 2, otherExtent[0]], [bandWidth, span], getAxisDimIndex(axis))
	    };
	  }
	};

	function getAxisDimIndex(axis) {
	  return axis.dim === 'x' ? 0 : 1;
	}

	AxisView.registerAxisPointerClass('CartesianAxisPointer', CartesianAxisPointer);
	var _default = CartesianAxisPointer;
	module.exports = _default;

/***/ },
/* 478 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var clazzUtil = __webpack_require__(207);

	var graphic = __webpack_require__(212);

	var axisPointerModelHelper = __webpack_require__(305);

	var eventTool = __webpack_require__(199);

	var throttleUtil = __webpack_require__(259);

	var modelUtil = __webpack_require__(203);

	var get = modelUtil.makeGetter();
	var clone = zrUtil.clone;
	var bind = zrUtil.bind;
	/**
	 * Base axis pointer class in 2D.
	 * Implemenents {module:echarts/component/axis/IAxisPointer}.
	 */

	function BaseAxisPointer() {}

	BaseAxisPointer.prototype = {
	  /**
	   * @private
	   */
	  _group: null,

	  /**
	   * @private
	   */
	  _lastGraphicKey: null,

	  /**
	   * @private
	   */
	  _handle: null,

	  /**
	   * @private
	   */
	  _dragging: false,

	  /**
	   * @private
	   */
	  _lastValue: null,

	  /**
	   * @private
	   */
	  _lastStatus: null,

	  /**
	   * @private
	   */
	  _payloadInfo: null,

	  /**
	   * In px, arbitrary value. Do not set too small,
	   * no animation is ok for most cases.
	   * @protected
	   */
	  animationThreshold: 15,

	  /**
	   * @implement
	   */
	  render: function (axisModel, axisPointerModel, api, forceRender) {
	    var value = axisPointerModel.get('value');
	    var status = axisPointerModel.get('status'); // Bind them to `this`, not in closure, otherwise they will not
	    // be replaced when user calling setOption in not merge mode.

	    this._axisModel = axisModel;
	    this._axisPointerModel = axisPointerModel;
	    this._api = api; // Optimize: `render` will be called repeatly during mouse move.
	    // So it is power consuming if performing `render` each time,
	    // especially on mobile device.

	    if (!forceRender && this._lastValue === value && this._lastStatus === status) {
	      return;
	    }

	    this._lastValue = value;
	    this._lastStatus = status;
	    var group = this._group;
	    var handle = this._handle;

	    if (!status || status === 'hide') {
	      // Do not clear here, for animation better.
	      group && group.hide();
	      handle && handle.hide();
	      return;
	    }

	    group && group.show();
	    handle && handle.show(); // Otherwise status is 'show'

	    var elOption = {};
	    this.makeElOption(elOption, value, axisModel, axisPointerModel, api); // Enable change axis pointer type.

	    var graphicKey = elOption.graphicKey;

	    if (graphicKey !== this._lastGraphicKey) {
	      this.clear(api);
	    }

	    this._lastGraphicKey = graphicKey;
	    var moveAnimation = this._moveAnimation = this.determineAnimation(axisModel, axisPointerModel);

	    if (!group) {
	      group = this._group = new graphic.Group();
	      this.createPointerEl(group, elOption, axisModel, axisPointerModel);
	      this.createLabelEl(group, elOption, axisModel, axisPointerModel);
	      api.getZr().add(group);
	    } else {
	      var doUpdateProps = zrUtil.curry(updateProps, axisPointerModel, moveAnimation);
	      this.updatePointerEl(group, elOption, doUpdateProps, axisPointerModel);
	      this.updateLabelEl(group, elOption, doUpdateProps, axisPointerModel);
	    }

	    updateMandatoryProps(group, axisPointerModel, true);

	    this._renderHandle(value);
	  },

	  /**
	   * @implement
	   */
	  remove: function (api) {
	    this.clear(api);
	  },

	  /**
	   * @implement
	   */
	  dispose: function (api) {
	    this.clear(api);
	  },

	  /**
	   * @protected
	   */
	  determineAnimation: function (axisModel, axisPointerModel) {
	    var animation = axisPointerModel.get('animation');
	    var axis = axisModel.axis;
	    var isCategoryAxis = axis.type === 'category';
	    var useSnap = axisPointerModel.get('snap'); // Value axis without snap always do not snap.

	    if (!useSnap && !isCategoryAxis) {
	      return false;
	    }

	    if (animation === 'auto' || animation == null) {
	      var animationThreshold = this.animationThreshold;

	      if (isCategoryAxis && axis.getBandWidth() > animationThreshold) {
	        return true;
	      } // It is important to auto animation when snap used. Consider if there is
	      // a dataZoom, animation will be disabled when too many points exist, while
	      // it will be enabled for better visual effect when little points exist.


	      if (useSnap) {
	        var seriesDataCount = axisPointerModelHelper.getAxisInfo(axisModel).seriesDataCount;
	        var axisExtent = axis.getExtent(); // Approximate band width

	        return Math.abs(axisExtent[0] - axisExtent[1]) / seriesDataCount > animationThreshold;
	      }

	      return false;
	    }

	    return animation === true;
	  },

	  /**
	   * add {pointer, label, graphicKey} to elOption
	   * @protected
	   */
	  makeElOption: function (elOption, value, axisModel, axisPointerModel, api) {// Shoule be implemenented by sub-class.
	  },

	  /**
	   * @protected
	   */
	  createPointerEl: function (group, elOption, axisModel, axisPointerModel) {
	    var pointerOption = elOption.pointer;

	    if (pointerOption) {
	      var pointerEl = get(group).pointerEl = new graphic[pointerOption.type](clone(elOption.pointer));
	      group.add(pointerEl);
	    }
	  },

	  /**
	   * @protected
	   */
	  createLabelEl: function (group, elOption, axisModel, axisPointerModel) {
	    if (elOption.label) {
	      var labelEl = get(group).labelEl = new graphic.Rect(clone(elOption.label));
	      group.add(labelEl);
	      updateLabelShowHide(labelEl, axisPointerModel);
	    }
	  },

	  /**
	   * @protected
	   */
	  updatePointerEl: function (group, elOption, updateProps) {
	    var pointerEl = get(group).pointerEl;

	    if (pointerEl) {
	      pointerEl.setStyle(elOption.pointer.style);
	      updateProps(pointerEl, {
	        shape: elOption.pointer.shape
	      });
	    }
	  },

	  /**
	   * @protected
	   */
	  updateLabelEl: function (group, elOption, updateProps, axisPointerModel) {
	    var labelEl = get(group).labelEl;

	    if (labelEl) {
	      labelEl.setStyle(elOption.label.style);
	      updateProps(labelEl, {
	        // Consider text length change in vertical axis, animation should
	        // be used on shape, otherwise the effect will be weird.
	        shape: elOption.label.shape,
	        position: elOption.label.position
	      });
	      updateLabelShowHide(labelEl, axisPointerModel);
	    }
	  },

	  /**
	   * @private
	   */
	  _renderHandle: function (value) {
	    if (this._dragging || !this.updateHandleTransform) {
	      return;
	    }

	    var axisPointerModel = this._axisPointerModel;

	    var zr = this._api.getZr();

	    var handle = this._handle;
	    var handleModel = axisPointerModel.getModel('handle');
	    var status = axisPointerModel.get('status');

	    if (!handleModel.get('show') || !status || status === 'hide') {
	      handle && zr.remove(handle);
	      this._handle = null;
	      return;
	    }

	    var isInit;

	    if (!this._handle) {
	      isInit = true;
	      handle = this._handle = graphic.createIcon(handleModel.get('icon'), {
	        cursor: 'move',
	        draggable: true,
	        onmousemove: function (e) {
	          // Fot mobile devicem, prevent screen slider on the button.
	          eventTool.stop(e.event);
	        },
	        onmousedown: bind(this._onHandleDragMove, this, 0, 0),
	        drift: bind(this._onHandleDragMove, this),
	        ondragend: bind(this._onHandleDragEnd, this)
	      });
	      zr.add(handle);
	    }

	    updateMandatoryProps(handle, axisPointerModel, false); // update style

	    var includeStyles = ['color', 'borderColor', 'borderWidth', 'opacity', 'shadowColor', 'shadowBlur', 'shadowOffsetX', 'shadowOffsetY'];
	    handle.setStyle(handleModel.getItemStyle(null, includeStyles)); // update position

	    var handleSize = handleModel.get('size');

	    if (!zrUtil.isArray(handleSize)) {
	      handleSize = [handleSize, handleSize];
	    }

	    handle.attr('scale', [handleSize[0] / 2, handleSize[1] / 2]);
	    throttleUtil.createOrUpdate(this, '_doDispatchAxisPointer', handleModel.get('throttle') || 0, 'fixRate');

	    this._moveHandleToValue(value, isInit);
	  },

	  /**
	   * @private
	   */
	  _moveHandleToValue: function (value, isInit) {
	    updateProps(this._axisPointerModel, !isInit && this._moveAnimation, this._handle, getHandleTransProps(this.getHandleTransform(value, this._axisModel, this._axisPointerModel)));
	  },

	  /**
	   * @private
	   */
	  _onHandleDragMove: function (dx, dy) {
	    var handle = this._handle;

	    if (!handle) {
	      return;
	    }

	    this._dragging = true; // Persistent for throttle.

	    var trans = this.updateHandleTransform(getHandleTransProps(handle), [dx, dy], this._axisModel, this._axisPointerModel);
	    this._payloadInfo = trans;
	    handle.stopAnimation();
	    handle.attr(getHandleTransProps(trans));
	    get(handle).lastProp = null;

	    this._doDispatchAxisPointer();
	  },

	  /**
	   * Throttled method.
	   * @private
	   */
	  _doDispatchAxisPointer: function () {
	    var handle = this._handle;

	    if (!handle) {
	      return;
	    }

	    var payloadInfo = this._payloadInfo;
	    var axisModel = this._axisModel;

	    this._api.dispatchAction({
	      type: 'updateAxisPointer',
	      x: payloadInfo.cursorPoint[0],
	      y: payloadInfo.cursorPoint[1],
	      tooltipOption: payloadInfo.tooltipOption,
	      axesInfo: [{
	        axisDim: axisModel.axis.dim,
	        axisIndex: axisModel.componentIndex
	      }]
	    });
	  },

	  /**
	   * @private
	   */
	  _onHandleDragEnd: function (moveAnimation) {
	    this._dragging = false;
	    var handle = this._handle;

	    if (!handle) {
	      return;
	    }

	    var value = this._axisPointerModel.get('value'); // Consider snap or categroy axis, handle may be not consistent with
	    // axisPointer. So move handle to align the exact value position when
	    // drag ended.


	    this._moveHandleToValue(value); // For the effect: tooltip will be shown when finger holding on handle
	    // button, and will be hidden after finger left handle button.


	    this._api.dispatchAction({
	      type: 'hideTip'
	    });
	  },

	  /**
	   * Should be implemenented by sub-class if support `handle`.
	   * @protected
	   * @param {number} value
	   * @param {module:echarts/model/Model} axisModel
	   * @param {module:echarts/model/Model} axisPointerModel
	   * @return {Object} {position: [x, y], rotation: 0}
	   */
	  getHandleTransform: null,

	  /**
	   * * Should be implemenented by sub-class if support `handle`.
	   * @protected
	   * @param {Object} transform {position, rotation}
	   * @param {Array.<number>} delta [dx, dy]
	   * @param {module:echarts/model/Model} axisModel
	   * @param {module:echarts/model/Model} axisPointerModel
	   * @return {Object} {position: [x, y], rotation: 0, cursorPoint: [x, y]}
	   */
	  updateHandleTransform: null,

	  /**
	   * @private
	   */
	  clear: function (api) {
	    this._lastValue = null;
	    this._lastStatus = null;
	    var zr = api.getZr();
	    var group = this._group;
	    var handle = this._handle;

	    if (zr && group) {
	      this._lastGraphicKey = null;
	      group && zr.remove(group);
	      handle && zr.remove(handle);
	      this._group = null;
	      this._handle = null;
	      this._payloadInfo = null;
	    }
	  },

	  /**
	   * @protected
	   */
	  doClear: function () {// Implemented by sub-class if necessary.
	  },

	  /**
	   * @protected
	   * @param {Array.<number>} xy
	   * @param {Array.<number>} wh
	   * @param {number} [xDimIndex=0] or 1
	   */
	  buildLabel: function (xy, wh, xDimIndex) {
	    xDimIndex = xDimIndex || 0;
	    return {
	      x: xy[xDimIndex],
	      y: xy[1 - xDimIndex],
	      width: wh[xDimIndex],
	      height: wh[1 - xDimIndex]
	    };
	  }
	};
	BaseAxisPointer.prototype.constructor = BaseAxisPointer;

	function updateProps(animationModel, moveAnimation, el, props) {
	  // Animation optimize.
	  if (!propsEqual(get(el).lastProp, props)) {
	    get(el).lastProp = props;
	    moveAnimation ? graphic.updateProps(el, props, animationModel) : (el.stopAnimation(), el.attr(props));
	  }
	}

	function propsEqual(lastProps, newProps) {
	  if (zrUtil.isObject(lastProps) && zrUtil.isObject(newProps)) {
	    var equals = true;
	    zrUtil.each(newProps, function (item, key) {
	      equals = equals && propsEqual(lastProps[key], item);
	    });
	    return !!equals;
	  } else {
	    return lastProps === newProps;
	  }
	}

	function updateLabelShowHide(labelEl, axisPointerModel) {
	  labelEl[axisPointerModel.get('label.show') ? 'show' : 'hide']();
	}

	function getHandleTransProps(trans) {
	  return {
	    position: trans.position.slice(),
	    rotation: trans.rotation || 0
	  };
	}

	function updateMandatoryProps(group, axisPointerModel, silent) {
	  var z = axisPointerModel.get('z');
	  var zlevel = axisPointerModel.get('zlevel');
	  group && group.traverse(function (el) {
	    if (el.type !== 'group') {
	      z != null && (el.z = z);
	      zlevel != null && (el.zlevel = zlevel);
	      el.silent = silent;
	    }
	  });
	}

	clazzUtil.enableClassExtend(BaseAxisPointer);
	var _default = BaseAxisPointer;
	module.exports = _default;

/***/ },
/* 479 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var graphic = __webpack_require__(212);

	var textContain = __webpack_require__(195);

	var formatUtil = __webpack_require__(204);

	var matrix = __webpack_require__(175);

	var axisHelper = __webpack_require__(268);

	var AxisBuilder = __webpack_require__(303);

	/**
	 * @param {module:echarts/model/Model} axisPointerModel
	 */
	function buildElStyle(axisPointerModel) {
	  var axisPointerType = axisPointerModel.get('type');
	  var styleModel = axisPointerModel.getModel(axisPointerType + 'Style');
	  var style;

	  if (axisPointerType === 'line') {
	    style = styleModel.getLineStyle();
	    style.fill = null;
	  } else if (axisPointerType === 'shadow') {
	    style = styleModel.getAreaStyle();
	    style.stroke = null;
	  }

	  return style;
	}
	/**
	 * @param {Function} labelPos {align, verticalAlign, position}
	 */


	function buildLabelElOption(elOption, axisModel, axisPointerModel, api, labelPos) {
	  var value = axisPointerModel.get('value');
	  var text = getValueLabel(value, axisModel.axis, axisModel.ecModel, axisPointerModel.get('seriesDataIndices'), {
	    precision: axisPointerModel.get('label.precision'),
	    formatter: axisPointerModel.get('label.formatter')
	  });
	  var labelModel = axisPointerModel.getModel('label');
	  var paddings = formatUtil.normalizeCssArray(labelModel.get('padding') || 0);
	  var font = labelModel.getFont();
	  var textRect = textContain.getBoundingRect(text, font);
	  var position = labelPos.position;
	  var width = textRect.width + paddings[1] + paddings[3];
	  var height = textRect.height + paddings[0] + paddings[2]; // Adjust by align.

	  var align = labelPos.align;
	  align === 'right' && (position[0] -= width);
	  align === 'center' && (position[0] -= width / 2);
	  var verticalAlign = labelPos.verticalAlign;
	  verticalAlign === 'bottom' && (position[1] -= height);
	  verticalAlign === 'middle' && (position[1] -= height / 2); // Not overflow ec container

	  confineInContainer(position, width, height, api);
	  var bgColor = labelModel.get('backgroundColor');

	  if (!bgColor || bgColor === 'auto') {
	    bgColor = axisModel.get('axisLine.lineStyle.color');
	  }

	  elOption.label = {
	    shape: {
	      x: 0,
	      y: 0,
	      width: width,
	      height: height,
	      r: labelModel.get('borderRadius')
	    },
	    position: position.slice(),
	    // TODO: rich
	    style: {
	      text: text,
	      textFont: font,
	      textFill: labelModel.getTextColor(),
	      textPosition: 'inside',
	      fill: bgColor,
	      stroke: labelModel.get('borderColor') || 'transparent',
	      lineWidth: labelModel.get('borderWidth') || 0,
	      shadowBlur: labelModel.get('shadowBlur'),
	      shadowColor: labelModel.get('shadowColor'),
	      shadowOffsetX: labelModel.get('shadowOffsetX'),
	      shadowOffsetY: labelModel.get('shadowOffsetY')
	    },
	    // Lable should be over axisPointer.
	    z2: 10
	  };
	} // Do not overflow ec container


	function confineInContainer(position, width, height, api) {
	  var viewWidth = api.getWidth();
	  var viewHeight = api.getHeight();
	  position[0] = Math.min(position[0] + width, viewWidth) - width;
	  position[1] = Math.min(position[1] + height, viewHeight) - height;
	  position[0] = Math.max(position[0], 0);
	  position[1] = Math.max(position[1], 0);
	}
	/**
	 * @param {number} value
	 * @param {module:echarts/coord/Axis} axis
	 * @param {module:echarts/model/Global} ecModel
	 * @param {Object} opt
	 * @param {Array.<Object>} seriesDataIndices
	 * @param {number|string} opt.precision 'auto' or a number
	 * @param {string|Function} opt.formatter label formatter
	 */


	function getValueLabel(value, axis, ecModel, seriesDataIndices, opt) {
	  var text = axis.scale.getLabel( // If `precision` is set, width can be fixed (like '12.00500'), which
	  // helps to debounce when when moving label.
	  value, {
	    precision: opt.precision
	  });
	  var formatter = opt.formatter;

	  if (formatter) {
	    var params = {
	      value: axisHelper.getAxisRawValue(axis, value),
	      seriesData: []
	    };
	    zrUtil.each(seriesDataIndices, function (idxItem) {
	      var series = ecModel.getSeriesByIndex(idxItem.seriesIndex);
	      var dataIndex = idxItem.dataIndexInside;
	      var dataParams = series && series.getDataParams(dataIndex);
	      dataParams && params.seriesData.push(dataParams);
	    });

	    if (zrUtil.isString(formatter)) {
	      text = formatter.replace('{value}', text);
	    } else if (zrUtil.isFunction(formatter)) {
	      text = formatter(params);
	    }
	  }

	  return text;
	}
	/**
	 * @param {module:echarts/coord/Axis} axis
	 * @param {number} value
	 * @param {Object} layoutInfo {
	 *  rotation, position, labelOffset, labelDirection, labelMargin
	 * }
	 */


	function getTransformedPosition(axis, value, layoutInfo) {
	  var transform = matrix.create();
	  matrix.rotate(transform, transform, layoutInfo.rotation);
	  matrix.translate(transform, transform, layoutInfo.position);
	  return graphic.applyTransform([axis.dataToCoord(value), (layoutInfo.labelOffset || 0) + (layoutInfo.labelDirection || 1) * (layoutInfo.labelMargin || 0)], transform);
	}

	function buildCartesianSingleLabelElOption(value, elOption, layoutInfo, axisModel, axisPointerModel, api) {
	  var textLayout = AxisBuilder.innerTextLayout(layoutInfo.rotation, 0, layoutInfo.labelDirection);
	  layoutInfo.labelMargin = axisPointerModel.get('label.margin');
	  buildLabelElOption(elOption, axisModel, axisPointerModel, api, {
	    position: getTransformedPosition(axisModel.axis, value, layoutInfo),
	    align: textLayout.textAlign,
	    verticalAlign: textLayout.textVerticalAlign
	  });
	}
	/**
	 * @param {Array.<number>} p1
	 * @param {Array.<number>} p2
	 * @param {number} [xDimIndex=0] or 1
	 */


	function makeLineShape(p1, p2, xDimIndex) {
	  xDimIndex = xDimIndex || 0;
	  return {
	    x1: p1[xDimIndex],
	    y1: p1[1 - xDimIndex],
	    x2: p2[xDimIndex],
	    y2: p2[1 - xDimIndex]
	  };
	}
	/**
	 * @param {Array.<number>} xy
	 * @param {Array.<number>} wh
	 * @param {number} [xDimIndex=0] or 1
	 */


	function makeRectShape(xy, wh, xDimIndex) {
	  xDimIndex = xDimIndex || 0;
	  return {
	    x: xy[xDimIndex],
	    y: xy[1 - xDimIndex],
	    width: wh[xDimIndex],
	    height: wh[1 - xDimIndex]
	  };
	}

	function makeSectorShape(cx, cy, r0, r, startAngle, endAngle) {
	  return {
	    cx: cx,
	    cy: cy,
	    r0: r0,
	    r: r,
	    startAngle: startAngle,
	    endAngle: endAngle,
	    clockwise: true
	  };
	}

	exports.buildElStyle = buildElStyle;
	exports.buildLabelElOption = buildLabelElOption;
	exports.getValueLabel = getValueLabel;
	exports.getTransformedPosition = getTransformedPosition;
	exports.buildCartesianSingleLabelElOption = buildCartesianSingleLabelElOption;
	exports.makeLineShape = makeLineShape;
	exports.makeRectShape = makeRectShape;
	exports.makeSectorShape = makeSectorShape;

/***/ },
/* 480 */
/***/ function(module, exports, __webpack_require__) {

	var graphic = __webpack_require__(212);

	var BaseAxisPointer = __webpack_require__(478);

	var viewHelper = __webpack_require__(479);

	var singleAxisHelper = __webpack_require__(469);

	var AxisView = __webpack_require__(304);

	var XY = ['x', 'y'];
	var WH = ['width', 'height'];
	var SingleAxisPointer = BaseAxisPointer.extend({
	  /**
	   * @override
	   */
	  makeElOption: function (elOption, value, axisModel, axisPointerModel, api) {
	    var axis = axisModel.axis;
	    var coordSys = axis.coordinateSystem;
	    var otherExtent = getGlobalExtent(coordSys, 1 - getPointDimIndex(axis));
	    var pixelValue = coordSys.dataToPoint(value)[0];
	    var axisPointerType = axisPointerModel.get('type');

	    if (axisPointerType && axisPointerType !== 'none') {
	      var elStyle = viewHelper.buildElStyle(axisPointerModel);
	      var pointerOption = pointerShapeBuilder[axisPointerType](axis, pixelValue, otherExtent, elStyle);
	      pointerOption.style = elStyle;
	      elOption.graphicKey = pointerOption.type;
	      elOption.pointer = pointerOption;
	    }

	    var layoutInfo = singleAxisHelper.layout(axisModel);
	    viewHelper.buildCartesianSingleLabelElOption(value, elOption, layoutInfo, axisModel, axisPointerModel, api);
	  },

	  /**
	   * @override
	   */
	  getHandleTransform: function (value, axisModel, axisPointerModel) {
	    var layoutInfo = singleAxisHelper.layout(axisModel, {
	      labelInside: false
	    });
	    layoutInfo.labelMargin = axisPointerModel.get('handle.margin');
	    return {
	      position: viewHelper.getTransformedPosition(axisModel.axis, value, layoutInfo),
	      rotation: layoutInfo.rotation + (layoutInfo.labelDirection < 0 ? Math.PI : 0)
	    };
	  },

	  /**
	   * @override
	   */
	  updateHandleTransform: function (transform, delta, axisModel, axisPointerModel) {
	    var axis = axisModel.axis;
	    var coordSys = axis.coordinateSystem;
	    var dimIndex = getPointDimIndex(axis);
	    var axisExtent = getGlobalExtent(coordSys, dimIndex);
	    var currPosition = transform.position;
	    currPosition[dimIndex] += delta[dimIndex];
	    currPosition[dimIndex] = Math.min(axisExtent[1], currPosition[dimIndex]);
	    currPosition[dimIndex] = Math.max(axisExtent[0], currPosition[dimIndex]);
	    var otherExtent = getGlobalExtent(coordSys, 1 - dimIndex);
	    var cursorOtherValue = (otherExtent[1] + otherExtent[0]) / 2;
	    var cursorPoint = [cursorOtherValue, cursorOtherValue];
	    cursorPoint[dimIndex] = currPosition[dimIndex];
	    return {
	      position: currPosition,
	      rotation: transform.rotation,
	      cursorPoint: cursorPoint,
	      tooltipOption: {
	        verticalAlign: 'middle'
	      }
	    };
	  }
	});
	var pointerShapeBuilder = {
	  line: function (axis, pixelValue, otherExtent, elStyle) {
	    var targetShape = viewHelper.makeLineShape([pixelValue, otherExtent[0]], [pixelValue, otherExtent[1]], getPointDimIndex(axis));
	    graphic.subPixelOptimizeLine({
	      shape: targetShape,
	      style: elStyle
	    });
	    return {
	      type: 'Line',
	      shape: targetShape
	    };
	  },
	  shadow: function (axis, pixelValue, otherExtent, elStyle) {
	    var bandWidth = axis.getBandWidth();
	    var span = otherExtent[1] - otherExtent[0];
	    return {
	      type: 'Rect',
	      shape: viewHelper.makeRectShape([pixelValue - bandWidth / 2, otherExtent[0]], [bandWidth, span], getPointDimIndex(axis))
	    };
	  }
	};

	function getPointDimIndex(axis) {
	  return axis.isHorizontal() ? 0 : 1;
	}

	function getGlobalExtent(coordSys, dimIndex) {
	  var rect = coordSys.getRect();
	  return [rect[XY[dimIndex]], rect[XY[dimIndex]] + rect[WH[dimIndex]]];
	}

	AxisView.registerAxisPointerClass('SingleAxisPointer', SingleAxisPointer);
	var _default = SingleAxisPointer;
	module.exports = _default;

/***/ },
/* 481 */
/***/ function(module, exports, __webpack_require__) {

	var completeDimensions = __webpack_require__(267);

	var SeriesModel = __webpack_require__(256);

	var List = __webpack_require__(265);

	var zrUtil = __webpack_require__(166);

	var _format = __webpack_require__(204);

	var encodeHTML = _format.encodeHTML;

	var nest = __webpack_require__(428);

	/**
	 * @file  Define the themeRiver view's series model
	 * @author Deqing Li(annong035@gmail.com)
	 */
	var DATA_NAME_INDEX = 2;
	var ThemeRiverSeries = SeriesModel.extend({
	  type: 'series.themeRiver',
	  dependencies: ['singleAxis'],

	  /**
	   * @readOnly
	   * @type {module:zrender/core/util#HashMap}
	   */
	  nameMap: null,

	  /**
	   * @override
	   */
	  init: function (option) {
	    ThemeRiverSeries.superApply(this, 'init', arguments); // Put this function here is for the sake of consistency of code style.
	    // Enable legend selection for each data item
	    // Use a function instead of direct access because data reference may changed

	    this.legendDataProvider = function () {
	      return this.getRawData();
	    };
	  },

	  /**
	   * If there is no value of a certain point in the time for some event,set it value to 0.
	   *
	   * @param {Array} data  initial data in the option
	   * @return {Array}
	   */
	  fixData: function (data) {
	    var rawDataLength = data.length; // grouped data by name

	    var dataByName = nest().key(function (dataItem) {
	      return dataItem[2];
	    }).entries(data); // data group in each layer

	    var layData = zrUtil.map(dataByName, function (d) {
	      return {
	        name: d.key,
	        dataList: d.values
	      };
	    });
	    var layerNum = layData.length;
	    var largestLayer = -1;
	    var index = -1;

	    for (var i = 0; i < layerNum; ++i) {
	      var len = layData[i].dataList.length;

	      if (len > largestLayer) {
	        largestLayer = len;
	        index = i;
	      }
	    }

	    for (var k = 0; k < layerNum; ++k) {
	      if (k === index) {
	        continue;
	      }

	      var name = layData[k].name;

	      for (var j = 0; j < largestLayer; ++j) {
	        var timeValue = layData[index].dataList[j][0];
	        var length = layData[k].dataList.length;
	        var keyIndex = -1;

	        for (var l = 0; l < length; ++l) {
	          var value = layData[k].dataList[l][0];

	          if (value === timeValue) {
	            keyIndex = l;
	            break;
	          }
	        }

	        if (keyIndex === -1) {
	          data[rawDataLength] = [];
	          data[rawDataLength][0] = timeValue;
	          data[rawDataLength][1] = 0;
	          data[rawDataLength][2] = name;
	          rawDataLength++;
	        }
	      }
	    }

	    return data;
	  },

	  /**
	   * @override
	   * @param  {Object} option  the initial option that user gived
	   * @param  {module:echarts/model/Model} ecModel  the model object for themeRiver option
	   * @return {module:echarts/data/List}
	   */
	  getInitialData: function (option, ecModel) {
	    var dimensions = [];
	    var singleAxisModel = ecModel.queryComponents({
	      mainType: 'singleAxis',
	      index: this.get('singleAxisIndex'),
	      id: this.get('singleAxisId')
	    })[0];
	    var axisType = singleAxisModel.get('type');
	    dimensions = [{
	      name: 'time',
	      // FIXME common?
	      type: axisType === 'category' ? 'ordinal' : axisType === 'time' ? 'time' : 'float'
	    }, {
	      name: 'value',
	      type: 'float'
	    }, {
	      name: 'name',
	      type: 'ordinal'
	    }]; // filter the data item with the value of label is undefined

	    var filterData = zrUtil.filter(option.data, function (dataItem) {
	      return dataItem[2] !== undefined;
	    });
	    var data = this.fixData(filterData || []);
	    var nameList = [];
	    var nameMap = this.nameMap = zrUtil.createHashMap();
	    var count = 0;

	    for (var i = 0; i < data.length; ++i) {
	      nameList.push(data[i][DATA_NAME_INDEX]);

	      if (!nameMap.get(data[i][DATA_NAME_INDEX])) {
	        nameMap.set(data[i][DATA_NAME_INDEX], count);
	        count++;
	      }
	    }

	    dimensions = completeDimensions(dimensions, data);
	    var list = new List(dimensions, this);
	    list.initData(data, nameList);
	    return list;
	  },

	  /**
	   * Used by single coordinate
	   *
	   * @param {string} axisDim  the dimension for single coordinate
	   * @return {Array.<string> } specified dimensions on the axis.
	   */
	  coordDimToDataDim: function (axisDim) {
	    return ['time'];
	  },

	  /**
	   * The raw data is divided into multiple layers and each layer
	   *     has same name.
	   *
	   * @return {Array.<Array.<number>>}
	   */
	  getLayerSeries: function () {
	    var data = this.getData();
	    var lenCount = data.count();
	    var indexArr = [];

	    for (var i = 0; i < lenCount; ++i) {
	      indexArr[i] = i;
	    } // data group by name


	    var dataByName = nest().key(function (index) {
	      return data.get('name', index);
	    }).entries(indexArr);
	    var layerSeries = zrUtil.map(dataByName, function (d) {
	      return {
	        name: d.key,
	        indices: d.values
	      };
	    });

	    for (var j = 0; j < layerSeries.length; ++j) {
	      layerSeries[j].indices.sort(comparer);
	    }

	    function comparer(index1, index2) {
	      return data.get('time', index1) - data.get('time', index2);
	    }

	    return layerSeries;
	  },

	  /**
	   * Get data indices for show tooltip content
	   *
	   * @param {Array.<string>|string} dim  single coordinate dimension
	   * @param {number} value axis value
	   * @param {module:echarts/coord/single/SingleAxis} baseAxis  single Axis used
	   *     the themeRiver.
	   * @return {Object} {dataIndices, nestestValue}
	   */
	  getAxisTooltipData: function (dim, value, baseAxis) {
	    if (!zrUtil.isArray(dim)) {
	      dim = dim ? [dim] : [];
	    }

	    var data = this.getData();
	    var layerSeries = this.getLayerSeries();
	    var indices = [];
	    var layerNum = layerSeries.length;
	    var nestestValue;

	    for (var i = 0; i < layerNum; ++i) {
	      var minDist = Number.MAX_VALUE;
	      var nearestIdx = -1;
	      var pointNum = layerSeries[i].indices.length;

	      for (var j = 0; j < pointNum; ++j) {
	        var theValue = data.get(dim[0], layerSeries[i].indices[j]);
	        var dist = Math.abs(theValue - value);

	        if (dist <= minDist) {
	          nestestValue = theValue;
	          minDist = dist;
	          nearestIdx = layerSeries[i].indices[j];
	        }
	      }

	      indices.push(nearestIdx);
	    }

	    return {
	      dataIndices: indices,
	      nestestValue: nestestValue
	    };
	  },

	  /**
	   * @override
	   * @param {number} dataIndex  index of data
	   */
	  formatTooltip: function (dataIndex) {
	    var data = this.getData();
	    var htmlName = data.get('name', dataIndex);
	    var htmlValue = data.get('value', dataIndex);

	    if (isNaN(htmlValue) || htmlValue == null) {
	      htmlValue = '-';
	    }

	    return encodeHTML(htmlName + ' : ' + htmlValue);
	  },
	  defaultOption: {
	    zlevel: 0,
	    z: 2,
	    coordinateSystem: 'singleAxis',
	    // gap in axis's orthogonal orientation
	    boundaryGap: ['10%', '10%'],
	    // legendHoverLink: true,
	    singleAxisIndex: 0,
	    animationEasing: 'linear',
	    label: {
	      normal: {
	        margin: 4,
	        textAlign: 'right',
	        show: true,
	        position: 'left',
	        color: '#000',
	        fontSize: 11
	      },
	      emphasis: {
	        show: true
	      }
	    }
	  }
	});
	var _default = ThemeRiverSeries;
	module.exports = _default;

/***/ },
/* 482 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var echarts = __webpack_require__(161);

	var _poly = __webpack_require__(288);

	var Polygon = _poly.Polygon;

	var graphic = __webpack_require__(212);

	var _util = __webpack_require__(166);

	var bind = _util.bind;
	var extend = _util.extend;

	var DataDiffer = __webpack_require__(266);

	/**
	 * @file  The file used to draw themeRiver view
	 * @author  Deqing Li(annong035@gmail.com)
	 */
	var _default = echarts.extendChartView({
	  type: 'themeRiver',
	  init: function () {
	    this._layers = [];
	  },
	  render: function (seriesModel, ecModel, api) {
	    var data = seriesModel.getData();
	    var group = this.group;
	    var layerSeries = seriesModel.getLayerSeries();
	    var layoutInfo = data.getLayout('layoutInfo');
	    var rect = layoutInfo.rect;
	    var boundaryGap = layoutInfo.boundaryGap;
	    group.attr('position', [0, rect.y + boundaryGap[0]]);

	    function keyGetter(item) {
	      return item.name;
	    }

	    var dataDiffer = new DataDiffer(this._layersSeries || [], layerSeries, keyGetter, keyGetter);
	    var newLayersGroups = {};
	    dataDiffer.add(bind(process, this, 'add')).update(bind(process, this, 'update')).remove(bind(process, this, 'remove')).execute();

	    function process(status, idx, oldIdx) {
	      var oldLayersGroups = this._layers;

	      if (status === 'remove') {
	        group.remove(oldLayersGroups[idx]);
	        return;
	      }

	      var points0 = [];
	      var points1 = [];
	      var color;
	      var indices = layerSeries[idx].indices;

	      for (var j = 0; j < indices.length; j++) {
	        var layout = data.getItemLayout(indices[j]);
	        var x = layout.x;
	        var y0 = layout.y0;
	        var y = layout.y;
	        points0.push([x, y0]);
	        points1.push([x, y0 + y]);
	        color = data.getItemVisual(indices[j], 'color');
	      }

	      var polygon;
	      var text;
	      var textLayout = data.getItemLayout(indices[0]);
	      var itemModel = data.getItemModel(indices[j - 1]);
	      var labelModel = itemModel.getModel('label.normal');
	      var margin = labelModel.get('margin');

	      if (status === 'add') {
	        var layerGroup = newLayersGroups[idx] = new graphic.Group();
	        polygon = new Polygon({
	          shape: {
	            points: points0,
	            stackedOnPoints: points1,
	            smooth: 0.4,
	            stackedOnSmooth: 0.4,
	            smoothConstraint: false
	          },
	          z2: 0
	        });
	        text = new graphic.Text({
	          style: {
	            x: textLayout.x - margin,
	            y: textLayout.y0 + textLayout.y / 2
	          }
	        });
	        layerGroup.add(polygon);
	        layerGroup.add(text);
	        group.add(layerGroup);
	        polygon.setClipPath(createGridClipShape(polygon.getBoundingRect(), seriesModel, function () {
	          polygon.removeClipPath();
	        }));
	      } else {
	        var layerGroup = oldLayersGroups[oldIdx];
	        polygon = layerGroup.childAt(0);
	        text = layerGroup.childAt(1);
	        group.add(layerGroup);
	        newLayersGroups[idx] = layerGroup;
	        graphic.updateProps(polygon, {
	          shape: {
	            points: points0,
	            stackedOnPoints: points1
	          }
	        }, seriesModel);
	        graphic.updateProps(text, {
	          style: {
	            x: textLayout.x - margin,
	            y: textLayout.y0 + textLayout.y / 2
	          }
	        }, seriesModel);
	      }

	      var hoverItemStyleModel = itemModel.getModel('itemStyle.emphasis');
	      var itemStyleModel = itemModel.getModel('itemStyle.normal');
	      graphic.setTextStyle(text.style, labelModel, {
	        text: labelModel.get('show') ? seriesModel.getFormattedLabel(indices[j - 1], 'normal') || data.getName(indices[j - 1]) : null,
	        textVerticalAlign: 'middle'
	      });
	      polygon.setStyle(extend({
	        fill: color
	      }, itemStyleModel.getItemStyle(['color'])));
	      graphic.setHoverStyle(polygon, hoverItemStyleModel.getItemStyle());
	    }

	    this._layersSeries = layerSeries;
	    this._layers = newLayersGroups;
	  },
	  dispose: function () {}
	}); // add animation to the view


	function createGridClipShape(rect, seriesModel, cb) {
	  var rectEl = new graphic.Rect({
	    shape: {
	      x: rect.x - 10,
	      y: rect.y - 10,
	      width: 0,
	      height: rect.height + 20
	    }
	  });
	  graphic.initProps(rectEl, {
	    shape: {
	      width: rect.width + 20,
	      height: rect.height + 20
	    }
	  }, seriesModel, cb);
	  return rectEl;
	}

	module.exports = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 483 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var numberUtil = __webpack_require__(205);

	/**
	 * @file  Using layout algorithm transform the raw data to layout information.
	 * @author Deqing Li(annong035@gmail.com)
	 */
	function _default(ecModel, api) {
	  ecModel.eachSeriesByType('themeRiver', function (seriesModel) {
	    var data = seriesModel.getData();
	    var single = seriesModel.coordinateSystem;
	    var layoutInfo = {}; // use the axis boundingRect for view

	    var rect = single.getRect();
	    layoutInfo.rect = rect;
	    var boundaryGap = seriesModel.get('boundaryGap');
	    var axis = single.getAxis();
	    layoutInfo.boundaryGap = boundaryGap;

	    if (axis.orient === 'horizontal') {
	      boundaryGap[0] = numberUtil.parsePercent(boundaryGap[0], rect.height);
	      boundaryGap[1] = numberUtil.parsePercent(boundaryGap[1], rect.height);
	      var height = rect.height - boundaryGap[0] - boundaryGap[1];
	      themeRiverLayout(data, seriesModel, height);
	    } else {
	      boundaryGap[0] = numberUtil.parsePercent(boundaryGap[0], rect.width);
	      boundaryGap[1] = numberUtil.parsePercent(boundaryGap[1], rect.width);
	      var width = rect.width - boundaryGap[0] - boundaryGap[1];
	      themeRiverLayout(data, seriesModel, width);
	    }

	    data.setLayout('layoutInfo', layoutInfo);
	  });
	}
	/**
	 * The layout information about themeriver
	 *
	 * @param {module:echarts/data/List} data  data in the series
	 * @param {module:echarts/model/Series} seriesModel  the model object of themeRiver series
	 * @param {number} height  value used to compute every series height
	 */


	function themeRiverLayout(data, seriesModel, height) {
	  if (!data.count()) {
	    return;
	  }

	  var coordSys = seriesModel.coordinateSystem; // the data in each layer are organized into a series.

	  var layerSeries = seriesModel.getLayerSeries(); // the points in each layer.

	  var layerPoints = zrUtil.map(layerSeries, function (singleLayer) {
	    return zrUtil.map(singleLayer.indices, function (idx) {
	      var pt = coordSys.dataToPoint(data.get('time', idx));
	      pt[1] = data.get('value', idx);
	      return pt;
	    });
	  });
	  var base = computeBaseline(layerPoints);
	  var baseLine = base.y0;
	  var ky = height / base.max; // set layout information for each item.

	  var n = layerSeries.length;
	  var m = layerSeries[0].indices.length;
	  var baseY0;

	  for (var j = 0; j < m; ++j) {
	    baseY0 = baseLine[j] * ky;
	    data.setItemLayout(layerSeries[0].indices[j], {
	      layerIndex: 0,
	      x: layerPoints[0][j][0],
	      y0: baseY0,
	      y: layerPoints[0][j][1] * ky
	    });

	    for (var i = 1; i < n; ++i) {
	      baseY0 += layerPoints[i - 1][j][1] * ky;
	      data.setItemLayout(layerSeries[i].indices[j], {
	        layerIndex: i,
	        x: layerPoints[i][j][0],
	        y0: baseY0,
	        y: layerPoints[i][j][1] * ky
	      });
	    }
	  }
	}
	/**
	 * Compute the baseLine of the rawdata
	 * Inspired by Lee Byron's paper Stacked Graphs - Geometry & Aesthetics
	 *
	 * @param  {Array.<Array>} data  the points in each layer
	 * @return {Object}
	 */


	function computeBaseline(data) {
	  var layerNum = data.length;
	  var pointNum = data[0].length;
	  var sums = [];
	  var y0 = [];
	  var max = 0;
	  var temp;
	  var base = {};

	  for (var i = 0; i < pointNum; ++i) {
	    for (var j = 0, temp = 0; j < layerNum; ++j) {
	      temp += data[j][i][1];
	    }

	    if (temp > max) {
	      max = temp;
	    }

	    sums.push(temp);
	  }

	  for (var k = 0; k < pointNum; ++k) {
	    y0[k] = (max - sums[k]) / 2;
	  }

	  max = 0;

	  for (var l = 0; l < pointNum; ++l) {
	    var sum = sums[l] + y0[l];

	    if (sum > max) {
	      max = sum;
	    }
	  }

	  base.y0 = y0;
	  base.max = max;
	  return base;
	}

	module.exports = _default;

/***/ },
/* 484 */
/***/ function(module, exports, __webpack_require__) {

	var _util = __webpack_require__(166);

	var createHashMap = _util.createHashMap;

	/**
	 * @file Visual encoding for themeRiver view
	 * @author  Deqing Li(annong035@gmail.com)
	 */
	function _default(ecModel) {
	  ecModel.eachSeriesByType('themeRiver', function (seriesModel) {
	    var data = seriesModel.getData();
	    var rawData = seriesModel.getRawData();
	    var colorList = seriesModel.get('color');
	    var idxMap = createHashMap();
	    data.each(function (idx) {
	      idxMap.set(data.getRawIndex(idx), idx);
	    });
	    rawData.each(function (rawIndex) {
	      var name = rawData.getName(rawIndex);
	      var color = colorList[(seriesModel.nameMap.get(name) - 1) % colorList.length];
	      rawData.setItemVisual(rawIndex, 'color', color);
	      var idx = idxMap.get(rawIndex);

	      if (idx != null) {
	        data.setItemVisual(idx, 'color', color);
	      }
	    });
	  });
	}

	module.exports = _default;

/***/ },
/* 485 */
/***/ function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(162);

	var __DEV__ = _config.__DEV__;

	var echarts = __webpack_require__(161);

	var zrUtil = __webpack_require__(166);

	var graphicUtil = __webpack_require__(212);

	var _labelHelper = __webpack_require__(286);

	var findLabelValueDim = _labelHelper.findLabelValueDim;

	var createListFromArray = __webpack_require__(264);

	var barGrid = __webpack_require__(308);

	var DataDiffer = __webpack_require__(266);

	var prepareCartesian2d = __webpack_require__(486);

	var prepareGeo = __webpack_require__(487);

	var prepareSingleAxis = __webpack_require__(488);

	var preparePolar = __webpack_require__(489);

	var prepareCalendar = __webpack_require__(490);

	var ITEM_STYLE_NORMAL_PATH = ['itemStyle', 'normal'];
	var ITEM_STYLE_EMPHASIS_PATH = ['itemStyle', 'emphasis'];
	var LABEL_NORMAL = ['label', 'normal'];
	var LABEL_EMPHASIS = ['label', 'emphasis']; // Use prefix to avoid index to be the same as el.name,
	// which will cause weird udpate animation.

	var GROUP_DIFF_PREFIX = 'e\0\0';
	/**
	 * To reduce total package size of each coordinate systems, the modules `prepareCustom`
	 * of each coordinate systems are not required by each coordinate systems directly, but
	 * required by the module `custom`.
	 *
	 * prepareInfoForCustomSeries {Function}: optional
	 *     @return {Object} {coordSys: {...}, api: {
	 *         coord: function (data, clamp) {}, // return point in global.
	 *         size: function (dataSize, dataItem) {} // return size of each axis in coordSys.
	 *     }}
	 */

	var prepareCustoms = {
	  cartesian2d: prepareCartesian2d,
	  geo: prepareGeo,
	  singleAxis: prepareSingleAxis,
	  polar: preparePolar,
	  calendar: prepareCalendar
	}; // ------
	// Model
	// ------

	echarts.extendSeriesModel({
	  type: 'series.custom',
	  dependencies: ['grid', 'polar', 'geo', 'singleAxis', 'calendar'],
	  defaultOption: {
	    coordinateSystem: 'cartesian2d',
	    // Can be set as 'none'
	    zlevel: 0,
	    z: 2,
	    legendHoverLink: true // Cartesian coordinate system
	    // xAxisIndex: 0,
	    // yAxisIndex: 0,
	    // Polar coordinate system
	    // polarIndex: 0,
	    // Geo coordinate system
	    // geoIndex: 0,
	    // label: {}
	    // itemStyle: {}

	  },
	  getInitialData: function (option, ecModel) {
	    return createListFromArray(option.data, this, ecModel);
	  }
	}); // -----
	// View
	// -----

	echarts.extendChartView({
	  type: 'custom',

	  /**
	   * @private
	   * @type {module:echarts/data/List}
	   */
	  _data: null,

	  /**
	   * @override
	   */
	  render: function (customSeries, ecModel, api) {
	    var oldData = this._data;
	    var data = customSeries.getData();
	    var group = this.group;
	    var renderItem = makeRenderItem(customSeries, data, ecModel, api);
	    data.diff(oldData).add(function (newIdx) {
	      data.hasValue(newIdx) && createOrUpdate(null, newIdx, renderItem(newIdx), customSeries, group, data);
	    }).update(function (newIdx, oldIdx) {
	      var el = oldData.getItemGraphicEl(oldIdx);
	      data.hasValue(newIdx) ? createOrUpdate(el, newIdx, renderItem(newIdx), customSeries, group, data) : el && group.remove(el);
	    }).remove(function (oldIdx) {
	      var el = oldData.getItemGraphicEl(oldIdx);
	      el && group.remove(el);
	    }).execute();
	    this._data = data;
	  },

	  /**
	   * @override
	   */
	  dispose: zrUtil.noop
	});

	function createEl(elOption) {
	  var graphicType = elOption.type;
	  var el;

	  if (graphicType === 'path') {
	    var shape = elOption.shape;
	    el = graphicUtil.makePath(shape.pathData, null, {
	      x: shape.x || 0,
	      y: shape.y || 0,
	      width: shape.width || 0,
	      height: shape.height || 0
	    }, 'center');
	    el.__customPathData = elOption.pathData;
	  } else if (graphicType === 'image') {
	    el = new graphicUtil.Image({});
	    el.__customImagePath = elOption.style.image;
	  } else if (graphicType === 'text') {
	    el = new graphicUtil.Text({});
	    el.__customText = elOption.style.text;
	  } else {
	    var Clz = graphicUtil[graphicType.charAt(0).toUpperCase() + graphicType.slice(1)];
	    el = new Clz();
	  }

	  el.__customGraphicType = graphicType;
	  el.name = elOption.name;
	  return el;
	}

	function updateEl(el, dataIndex, elOption, animatableModel, data, isInit) {
	  var targetProps = {};
	  var elOptionStyle = elOption.style || {};
	  elOption.shape && (targetProps.shape = zrUtil.clone(elOption.shape));
	  elOption.position && (targetProps.position = elOption.position.slice());
	  elOption.scale && (targetProps.scale = elOption.scale.slice());
	  elOption.origin && (targetProps.origin = elOption.origin.slice());
	  elOption.rotation && (targetProps.rotation = elOption.rotation);

	  if (el.type === 'image' && elOption.style) {
	    var targetStyle = targetProps.style = {};
	    zrUtil.each(['x', 'y', 'width', 'height'], function (prop) {
	      prepareStyleTransition(prop, targetStyle, elOptionStyle, el.style, isInit);
	    });
	  }

	  if (el.type === 'text' && elOption.style) {
	    var targetStyle = targetProps.style = {};
	    zrUtil.each(['x', 'y'], function (prop) {
	      prepareStyleTransition(prop, targetStyle, elOptionStyle, el.style, isInit);
	    }); // Compatible with previous: both support
	    // textFill and fill, textStroke and stroke in 'text' element.

	    !elOptionStyle.hasOwnProperty('textFill') && elOptionStyle.fill && (elOptionStyle.textFill = elOptionStyle.fill);
	    !elOptionStyle.hasOwnProperty('textStroke') && elOptionStyle.stroke && (elOptionStyle.textStroke = elOptionStyle.stroke);
	  }

	  if (el.type !== 'group') {
	    el.useStyle(elOptionStyle); // Init animation.

	    if (isInit) {
	      el.style.opacity = 0;
	      var targetOpacity = elOptionStyle.opacity;
	      targetOpacity == null && (targetOpacity = 1);
	      graphicUtil.initProps(el, {
	        style: {
	          opacity: targetOpacity
	        }
	      }, animatableModel, dataIndex);
	    }
	  }

	  if (isInit) {
	    el.attr(targetProps);
	  } else {
	    graphicUtil.updateProps(el, targetProps, animatableModel, dataIndex);
	  } // z2 must not be null/undefined, otherwise sort error may occur.


	  el.attr({
	    z2: elOption.z2 || 0,
	    silent: elOption.silent
	  });
	  elOption.styleEmphasis !== false && graphicUtil.setHoverStyle(el, elOption.styleEmphasis);
	}

	function prepareStyleTransition(prop, targetStyle, elOptionStyle, oldElStyle, isInit) {
	  if (elOptionStyle[prop] != null && !isInit) {
	    targetStyle[prop] = elOptionStyle[prop];
	    elOptionStyle[prop] = oldElStyle[prop];
	  }
	}

	function makeRenderItem(customSeries, data, ecModel, api) {
	  var renderItem = customSeries.get('renderItem');
	  var coordSys = customSeries.coordinateSystem;
	  var prepareResult = {};

	  if (coordSys) {
	    prepareResult = coordSys.prepareCustoms ? coordSys.prepareCustoms() : prepareCustoms[coordSys.type](coordSys);
	  }

	  var userAPI = zrUtil.defaults({
	    getWidth: api.getWidth,
	    getHeight: api.getHeight,
	    getZr: api.getZr,
	    getDevicePixelRatio: api.getDevicePixelRatio,
	    value: value,
	    style: style,
	    styleEmphasis: styleEmphasis,
	    visual: visual,
	    barLayout: barLayout,
	    currentSeriesIndices: currentSeriesIndices,
	    font: font
	  }, prepareResult.api || {});
	  var userParams = {
	    context: {},
	    seriesId: customSeries.id,
	    seriesName: customSeries.name,
	    seriesIndex: customSeries.seriesIndex,
	    coordSys: prepareResult.coordSys,
	    dataInsideLength: data.count(),
	    encode: wrapEncodeDef(customSeries.getData())
	  }; // Do not support call `api` asynchronously without dataIndexInside input.

	  var currDataIndexInside;
	  var currDirty = true;
	  var currItemModel;
	  var currLabelNormalModel;
	  var currLabelEmphasisModel;
	  var currLabelValueDim;
	  var currVisualColor;
	  return function (dataIndexInside) {
	    currDataIndexInside = dataIndexInside;
	    currDirty = true;
	    return renderItem && renderItem(zrUtil.defaults({
	      dataIndexInside: dataIndexInside,
	      dataIndex: data.getRawIndex(dataIndexInside)
	    }, userParams), userAPI) || {};
	  }; // Do not update cache until api called.

	  function updateCache(dataIndexInside) {
	    dataIndexInside == null && (dataIndexInside = currDataIndexInside);

	    if (currDirty) {
	      currItemModel = data.getItemModel(dataIndexInside);
	      currLabelNormalModel = currItemModel.getModel(LABEL_NORMAL);
	      currLabelEmphasisModel = currItemModel.getModel(LABEL_EMPHASIS);
	      currLabelValueDim = findLabelValueDim(data);
	      currVisualColor = data.getItemVisual(dataIndexInside, 'color');
	      currDirty = false;
	    }
	  }
	  /**
	   * @public
	   * @param {number|string} dim
	   * @param {number} [dataIndexInside=currDataIndexInside]
	   * @return {number|string} value
	   */


	  function value(dim, dataIndexInside) {
	    dataIndexInside == null && (dataIndexInside = currDataIndexInside);
	    return data.get(data.getDimension(dim || 0), dataIndexInside);
	  }
	  /**
	   * By default, `visual` is applied to style (to support visualMap).
	   * `visual.color` is applied at `fill`. If user want apply visual.color on `stroke`,
	   * it can be implemented as:
	   * `api.style({stroke: api.visual('color'), fill: null})`;
	   * @public
	   * @param {Object} [extra]
	   * @param {number} [dataIndexInside=currDataIndexInside]
	   */


	  function style(extra, dataIndexInside) {
	    dataIndexInside == null && (dataIndexInside = currDataIndexInside);
	    updateCache(dataIndexInside);
	    var itemStyle = currItemModel.getModel(ITEM_STYLE_NORMAL_PATH).getItemStyle();
	    currVisualColor != null && (itemStyle.fill = currVisualColor);
	    var opacity = data.getItemVisual(dataIndexInside, 'opacity');
	    opacity != null && (itemStyle.opacity = opacity);

	    if (currLabelValueDim != null) {
	      graphicUtil.setTextStyle(itemStyle, currLabelNormalModel, null, {
	        autoColor: currVisualColor,
	        isRectText: true
	      });
	      itemStyle.text = currLabelNormalModel.getShallow('show') ? zrUtil.retrieve2(customSeries.getFormattedLabel(dataIndexInside, 'normal'), data.get(currLabelValueDim, dataIndexInside)) : null;
	    }

	    extra && zrUtil.extend(itemStyle, extra);
	    return itemStyle;
	  }
	  /**
	   * @public
	   * @param {Object} [extra]
	   * @param {number} [dataIndexInside=currDataIndexInside]
	   */


	  function styleEmphasis(extra, dataIndexInside) {
	    dataIndexInside == null && (dataIndexInside = currDataIndexInside);
	    updateCache(dataIndexInside);
	    var itemStyle = currItemModel.getModel(ITEM_STYLE_EMPHASIS_PATH).getItemStyle();

	    if (currLabelValueDim != null) {
	      graphicUtil.setTextStyle(itemStyle, currLabelEmphasisModel, null, {
	        isRectText: true
	      }, true);
	      itemStyle.text = currLabelEmphasisModel.getShallow('show') ? zrUtil.retrieve3(customSeries.getFormattedLabel(dataIndexInside, 'emphasis'), customSeries.getFormattedLabel(dataIndexInside, 'normal'), data.get(currLabelValueDim, dataIndexInside)) : null;
	    }

	    extra && zrUtil.extend(itemStyle, extra);
	    return itemStyle;
	  }
	  /**
	   * @public
	   * @param {string} visualType
	   * @param {number} [dataIndexInside=currDataIndexInside]
	   */


	  function visual(visualType, dataIndexInside) {
	    dataIndexInside == null && (dataIndexInside = currDataIndexInside);
	    return data.getItemVisual(dataIndexInside, visualType);
	  }
	  /**
	   * @public
	   * @param {number} opt.count Positive interger.
	   * @param {number} [opt.barWidth]
	   * @param {number} [opt.barMaxWidth]
	   * @param {number} [opt.barGap]
	   * @param {number} [opt.barCategoryGap]
	   * @return {Object} {width, offset, offsetCenter} is not support, return undefined.
	   */


	  function barLayout(opt) {
	    if (coordSys.getBaseAxis) {
	      var baseAxis = coordSys.getBaseAxis();
	      return barGrid.getLayoutOnAxis(zrUtil.defaults({
	        axis: baseAxis
	      }, opt), api);
	    }
	  }
	  /**
	   * @public
	   * @return {Array.<number>}
	   */


	  function currentSeriesIndices() {
	    return ecModel.getCurrentSeriesIndices();
	  }
	  /**
	   * @public
	   * @param {Object} opt
	   * @param {string} [opt.fontStyle]
	   * @param {number} [opt.fontWeight]
	   * @param {number} [opt.fontSize]
	   * @param {string} [opt.fontFamily]
	   * @return {string} font string
	   */


	  function font(opt) {
	    return graphicUtil.getFont(opt, ecModel);
	  }
	}

	function wrapEncodeDef(data) {
	  var encodeDef = {};
	  zrUtil.each(data.dimensions, function (dimName, dataDimIndex) {
	    var dimInfo = data.getDimensionInfo(dimName);

	    if (!dimInfo.isExtraCoord) {
	      var coordDim = dimInfo.coordDim;
	      var dataDims = encodeDef[coordDim] = encodeDef[coordDim] || [];
	      dataDims[dimInfo.coordDimIndex] = dataDimIndex;
	    }
	  });
	  return encodeDef;
	}

	function createOrUpdate(el, dataIndex, elOption, animatableModel, group, data) {
	  el = doCreateOrUpdate(el, dataIndex, elOption, animatableModel, group, data);
	  el && data.setItemGraphicEl(dataIndex, el);
	}

	function doCreateOrUpdate(el, dataIndex, elOption, animatableModel, group, data) {
	  var elOptionType = elOption.type;

	  if (el && elOptionType !== el.__customGraphicType && (elOptionType !== 'path' || elOption.pathData !== el.__customPathData) && (elOptionType !== 'image' || elOption.style.image !== el.__customImagePath) && (elOptionType !== 'text' || elOption.style.text !== el.__customText)) {
	    group.remove(el);
	    el = null;
	  } // `elOption.type` is undefined when `renderItem` returns nothing.


	  if (elOptionType == null) {
	    return;
	  }

	  var isInit = !el;
	  !el && (el = createEl(elOption));
	  updateEl(el, dataIndex, elOption, animatableModel, data, isInit);

	  if (elOptionType === 'group') {
	    var oldChildren = el.children() || [];
	    var newChildren = elOption.children || [];

	    if (elOption.diffChildrenByName) {
	      // lower performance.
	      diffGroupChildren({
	        oldChildren: oldChildren,
	        newChildren: newChildren,
	        dataIndex: dataIndex,
	        animatableModel: animatableModel,
	        group: el,
	        data: data
	      });
	    } else {
	      // better performance.
	      var index = 0;

	      for (; index < newChildren.length; index++) {
	        doCreateOrUpdate(el.childAt(index), dataIndex, newChildren[index], animatableModel, el, data);
	      }

	      for (; index < oldChildren.length; index++) {
	        oldChildren[index] && el.remove(oldChildren[index]);
	      }
	    }
	  }

	  group.add(el);
	  return el;
	}

	function diffGroupChildren(context) {
	  new DataDiffer(context.oldChildren, context.newChildren, getKey, getKey, context).add(processAddUpdate).update(processAddUpdate).remove(processRemove).execute();
	}

	function getKey(item, idx) {
	  var name = item && item.name;
	  return name != null ? name : GROUP_DIFF_PREFIX + idx;
	}

	function processAddUpdate(newIndex, oldIndex) {
	  var context = this.context;
	  var childOption = newIndex != null ? context.newChildren[newIndex] : null;
	  var child = oldIndex != null ? context.oldChildren[oldIndex] : null;
	  doCreateOrUpdate(child, context.dataIndex, childOption, context.animatableModel, context.group, context.data);
	}

	function processRemove(oldIndex) {
	  var context = this.context;
	  var child = context.oldChildren[oldIndex];
	  child && context.group.remove(child);
	}

/***/ },
/* 486 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	function dataToCoordSize(dataSize, dataItem) {
	  // dataItem is necessary in log axis.
	  dataItem = dataItem || [0, 0];
	  return zrUtil.map(['x', 'y'], function (dim, dimIdx) {
	    var axis = this.getAxis(dim);
	    var val = dataItem[dimIdx];
	    var halfSize = dataSize[dimIdx] / 2;
	    return axis.type === 'category' ? axis.getBandWidth() : Math.abs(axis.dataToCoord(val - halfSize) - axis.dataToCoord(val + halfSize));
	  }, this);
	}

	function _default(coordSys) {
	  var rect = coordSys.grid.getRect();
	  return {
	    coordSys: {
	      // The name exposed to user is always 'cartesian2d' but not 'grid'.
	      type: 'cartesian2d',
	      x: rect.x,
	      y: rect.y,
	      width: rect.width,
	      height: rect.height
	    },
	    api: {
	      coord: zrUtil.bind(coordSys.dataToPoint, coordSys),
	      size: zrUtil.bind(dataToCoordSize, coordSys)
	    }
	  };
	}

	module.exports = _default;

/***/ },
/* 487 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	function dataToCoordSize(dataSize, dataItem) {
	  dataItem = dataItem || [0, 0];
	  return zrUtil.map([0, 1], function (dimIdx) {
	    var val = dataItem[dimIdx];
	    var halfSize = dataSize[dimIdx] / 2;
	    var p1 = [];
	    var p2 = [];
	    p1[dimIdx] = val - halfSize;
	    p2[dimIdx] = val + halfSize;
	    p1[1 - dimIdx] = p2[1 - dimIdx] = dataItem[1 - dimIdx];
	    return Math.abs(this.dataToPoint(p1)[dimIdx] - this.dataToPoint(p2)[dimIdx]);
	  }, this);
	}

	function _default(coordSys) {
	  var rect = coordSys.getBoundingRect();
	  return {
	    coordSys: {
	      type: 'geo',
	      x: rect.x,
	      y: rect.y,
	      width: rect.width,
	      height: rect.height
	    },
	    api: {
	      coord: zrUtil.bind(coordSys.dataToPoint, coordSys),
	      size: zrUtil.bind(dataToCoordSize, coordSys)
	    }
	  };
	}

	module.exports = _default;

/***/ },
/* 488 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	function dataToCoordSize(dataSize, dataItem) {
	  // dataItem is necessary in log axis.
	  var axis = this.getAxis();
	  var val = dataItem instanceof Array ? dataItem[0] : dataItem;
	  var halfSize = (dataSize instanceof Array ? dataSize[0] : dataSize) / 2;
	  return axis.type === 'category' ? axis.getBandWidth() : Math.abs(axis.dataToCoord(val - halfSize) - axis.dataToCoord(val + halfSize));
	}

	function _default(coordSys) {
	  var rect = coordSys.getRect();
	  return {
	    coordSys: {
	      type: 'singleAxis',
	      x: rect.x,
	      y: rect.y,
	      width: rect.width,
	      height: rect.height
	    },
	    api: {
	      coord: zrUtil.bind(coordSys.dataToPoint, coordSys),
	      size: zrUtil.bind(dataToCoordSize, coordSys)
	    }
	  };
	}

	module.exports = _default;

/***/ },
/* 489 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	function dataToCoordSize(dataSize, dataItem) {
	  // dataItem is necessary in log axis.
	  return zrUtil.map(['Radius', 'Angle'], function (dim, dimIdx) {
	    var axis = this['get' + dim + 'Axis']();
	    var val = dataItem[dimIdx];
	    var halfSize = dataSize[dimIdx] / 2;
	    var method = 'dataTo' + dim;
	    var result = axis.type === 'category' ? axis.getBandWidth() : Math.abs(axis[method](val - halfSize) - axis[method](val + halfSize));

	    if (dim === 'Angle') {
	      result = result * Math.PI / 180;
	    }

	    return result;
	  }, this);
	}

	function _default(coordSys) {
	  var radiusAxis = coordSys.getRadiusAxis();
	  var angleAxis = coordSys.getAngleAxis();
	  var radius = radiusAxis.getExtent();
	  radius[0] > radius[1] && radius.reverse();
	  return {
	    coordSys: {
	      type: 'polar',
	      cx: coordSys.cx,
	      cy: coordSys.cy,
	      r: radius[1],
	      r0: radius[0]
	    },
	    api: {
	      coord: zrUtil.bind(function (data) {
	        var radius = radiusAxis.dataToRadius(data[0]);
	        var angle = angleAxis.dataToAngle(data[1]);
	        var coord = coordSys.coordToPoint([radius, angle]);
	        coord.push(radius, angle * Math.PI / 180);
	        return coord;
	      }),
	      size: zrUtil.bind(dataToCoordSize, coordSys)
	    }
	  };
	}

	module.exports = _default;

/***/ },
/* 490 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	function _default(coordSys) {
	  var rect = coordSys.getRect();
	  var rangeInfo = coordSys.getRangeInfo();
	  return {
	    coordSys: {
	      type: 'calendar',
	      x: rect.x,
	      y: rect.y,
	      width: rect.width,
	      height: rect.height,
	      cellWidth: coordSys.getCellWidth(),
	      cellHeight: coordSys.getCellHeight(),
	      rangeInfo: {
	        start: rangeInfo.start,
	        end: rangeInfo.end,
	        weeks: rangeInfo.weeks,
	        dayCount: rangeInfo.allDay
	      }
	    },
	    api: {
	      coord: zrUtil.bind(coordSys.dataToPoint, coordSys)
	    }
	  };
	}

	module.exports = _default;

/***/ },
/* 491 */
/***/ function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(162);

	var __DEV__ = _config.__DEV__;

	var echarts = __webpack_require__(161);

	var zrUtil = __webpack_require__(166);

	var modelUtil = __webpack_require__(203);

	var graphicUtil = __webpack_require__(212);

	var layoutUtil = __webpack_require__(247);

	// -------------
	// Preprocessor
	// -------------
	echarts.registerPreprocessor(function (option) {
	  var graphicOption = option.graphic; // Convert
	  // {graphic: [{left: 10, type: 'circle'}, ...]}
	  // or
	  // {graphic: {left: 10, type: 'circle'}}
	  // to
	  // {graphic: [{elements: [{left: 10, type: 'circle'}, ...]}]}

	  if (zrUtil.isArray(graphicOption)) {
	    if (!graphicOption[0] || !graphicOption[0].elements) {
	      option.graphic = [{
	        elements: graphicOption
	      }];
	    } else {
	      // Only one graphic instance can be instantiated. (We dont
	      // want that too many views are created in echarts._viewMap)
	      option.graphic = [option.graphic[0]];
	    }
	  } else if (graphicOption && !graphicOption.elements) {
	    option.graphic = [{
	      elements: [graphicOption]
	    }];
	  }
	}); // ------
	// Model
	// ------

	var GraphicModel = echarts.extendComponentModel({
	  type: 'graphic',
	  defaultOption: {
	    // Extra properties for each elements:
	    //
	    // left/right/top/bottom: (like 12, '22%', 'center', default undefined)
	    //      If left/rigth is set, shape.x/shape.cx/position will not be used.
	    //      If top/bottom is set, shape.y/shape.cy/position will not be used.
	    //      This mechanism is useful when you want to position a group/element
	    //      against the right side or the center of this container.
	    //
	    // width/height: (can only be pixel value, default 0)
	    //      Only be used to specify contianer(group) size, if needed. And
	    //      can not be percentage value (like '33%'). See the reason in the
	    //      layout algorithm below.
	    //
	    // bounding: (enum: 'all' (default) | 'raw')
	    //      Specify how to calculate boundingRect when locating.
	    //      'all': Get uioned and transformed boundingRect
	    //          from both itself and its descendants.
	    //          This mode simplies confining a group of elements in the bounding
	    //          of their ancester container (e.g., using 'right: 0').
	    //      'raw': Only use the boundingRect of itself and before transformed.
	    //          This mode is similar to css behavior, which is useful when you
	    //          want an element to be able to overflow its container. (Consider
	    //          a rotated circle needs to be located in a corner.)
	    // Note: elements is always behind its ancestors in this elements array.
	    elements: [],
	    parentId: null
	  },

	  /**
	   * Save el options for the sake of the performance (only update modified graphics).
	   * The order is the same as those in option. (ancesters -> descendants)
	   *
	   * @private
	   * @type {Array.<Object>}
	   */
	  _elOptionsToUpdate: null,

	  /**
	   * @override
	   */
	  mergeOption: function (option) {
	    // Prevent default merge to elements
	    var elements = this.option.elements;
	    this.option.elements = null;
	    GraphicModel.superApply(this, 'mergeOption', arguments);
	    this.option.elements = elements;
	  },

	  /**
	   * @override
	   */
	  optionUpdated: function (newOption, isInit) {
	    var thisOption = this.option;
	    var newList = (isInit ? thisOption : newOption).elements;
	    var existList = thisOption.elements = isInit ? [] : thisOption.elements;
	    var flattenedList = [];

	    this._flatten(newList, flattenedList);

	    var mappingResult = modelUtil.mappingToExists(existList, flattenedList);
	    modelUtil.makeIdAndName(mappingResult); // Clear elOptionsToUpdate

	    var elOptionsToUpdate = this._elOptionsToUpdate = [];
	    zrUtil.each(mappingResult, function (resultItem, index) {
	      var newElOption = resultItem.option;

	      if (!newElOption) {
	        return;
	      }

	      elOptionsToUpdate.push(newElOption);
	      setKeyInfoToNewElOption(resultItem, newElOption);
	      mergeNewElOptionToExist(existList, index, newElOption);
	      setLayoutInfoToExist(existList[index], newElOption);
	    }, this); // Clean

	    for (var i = existList.length - 1; i >= 0; i--) {
	      if (existList[i] == null) {
	        existList.splice(i, 1);
	      } else {
	        // $action should be volatile, otherwise option gotten from
	        // `getOption` will contain unexpected $action.
	        delete existList[i].$action;
	      }
	    }
	  },

	  /**
	   * Convert
	   * [{
	   *  type: 'group',
	   *  id: 'xx',
	   *  children: [{type: 'circle'}, {type: 'polygon'}]
	   * }]
	   * to
	   * [
	   *  {type: 'group', id: 'xx'},
	   *  {type: 'circle', parentId: 'xx'},
	   *  {type: 'polygon', parentId: 'xx'}
	   * ]
	   *
	   * @private
	   * @param {Array.<Object>} optionList option list
	   * @param {Array.<Object>} result result of flatten
	   * @param {Object} parentOption parent option
	   */
	  _flatten: function (optionList, result, parentOption) {
	    zrUtil.each(optionList, function (option) {
	      if (!option) {
	        return;
	      }

	      if (parentOption) {
	        option.parentOption = parentOption;
	      }

	      result.push(option);
	      var children = option.children;

	      if (option.type === 'group' && children) {
	        this._flatten(children, result, option);
	      } // Deleting for JSON output, and for not affecting group creation.


	      delete option.children;
	    }, this);
	  },
	  // FIXME
	  // Pass to view using payload? setOption has a payload?
	  useElOptionsToUpdate: function () {
	    var els = this._elOptionsToUpdate; // Clear to avoid render duplicately when zooming.

	    this._elOptionsToUpdate = null;
	    return els;
	  }
	}); // -----
	// View
	// -----

	echarts.extendComponentView({
	  type: 'graphic',

	  /**
	   * @override
	   */
	  init: function (ecModel, api) {
	    /**
	     * @private
	     * @type {module:zrender/core/util.HashMap}
	     */
	    this._elMap = zrUtil.createHashMap();
	    /**
	     * @private
	     * @type {module:echarts/graphic/GraphicModel}
	     */

	    this._lastGraphicModel;
	  },

	  /**
	   * @override
	   */
	  render: function (graphicModel, ecModel, api) {
	    // Having leveraged between use cases and algorithm complexity, a very
	    // simple layout mechanism is used:
	    // The size(width/height) can be determined by itself or its parent (not
	    // implemented yet), but can not by its children. (Top-down travel)
	    // The location(x/y) can be determined by the bounding rect of itself
	    // (can including its descendants or not) and the size of its parent.
	    // (Bottom-up travel)
	    // When `chart.clear()` or `chart.setOption({...}, true)` with the same id,
	    // view will be reused.
	    if (graphicModel !== this._lastGraphicModel) {
	      this._clear();
	    }

	    this._lastGraphicModel = graphicModel;

	    this._updateElements(graphicModel, api);

	    this._relocate(graphicModel, api);
	  },

	  /**
	   * Update graphic elements.
	   *
	   * @private
	   * @param {Object} graphicModel graphic model
	   * @param {module:echarts/ExtensionAPI} api extension API
	   */
	  _updateElements: function (graphicModel, api) {
	    var elOptionsToUpdate = graphicModel.useElOptionsToUpdate();

	    if (!elOptionsToUpdate) {
	      return;
	    }

	    var elMap = this._elMap;
	    var rootGroup = this.group; // Top-down tranverse to assign graphic settings to each elements.

	    zrUtil.each(elOptionsToUpdate, function (elOption) {
	      var $action = elOption.$action;
	      var id = elOption.id;
	      var existEl = elMap.get(id);
	      var parentId = elOption.parentId;
	      var targetElParent = parentId != null ? elMap.get(parentId) : rootGroup;

	      if (elOption.type === 'text') {
	        var elOptionStyle = elOption.style; // In top/bottom mode, textVerticalAlign should not be used, which cause
	        // inaccurately locating.

	        if (elOption.hv && elOption.hv[1]) {
	          elOptionStyle.textVerticalAlign = elOptionStyle.textBaseline = null;
	        } // Compatible with previous setting: both support fill and textFill,
	        // stroke and textStroke.


	        !elOptionStyle.hasOwnProperty('textFill') && elOptionStyle.fill && (elOptionStyle.textFill = elOptionStyle.fill);
	        !elOptionStyle.hasOwnProperty('textStroke') && elOptionStyle.stroke && (elOptionStyle.textStroke = elOptionStyle.stroke);
	      } // Remove unnecessary props to avoid potential problems.


	      var elOptionCleaned = getCleanedElOption(elOption); // For simple, do not support parent change, otherwise reorder is needed.

	      if (!$action || $action === 'merge') {
	        existEl ? existEl.attr(elOptionCleaned) : createEl(id, targetElParent, elOptionCleaned, elMap);
	      } else if ($action === 'replace') {
	        removeEl(existEl, elMap);
	        createEl(id, targetElParent, elOptionCleaned, elMap);
	      } else if ($action === 'remove') {
	        removeEl(existEl, elMap);
	      }

	      var el = elMap.get(id);

	      if (el) {
	        el.__ecGraphicWidth = elOption.width;
	        el.__ecGraphicHeight = elOption.height;
	      }
	    });
	  },

	  /**
	   * Locate graphic elements.
	   *
	   * @private
	   * @param {Object} graphicModel graphic model
	   * @param {module:echarts/ExtensionAPI} api extension API
	   */
	  _relocate: function (graphicModel, api) {
	    var elOptions = graphicModel.option.elements;
	    var rootGroup = this.group;
	    var elMap = this._elMap; // Bottom-up tranvese all elements (consider ec resize) to locate elements.

	    for (var i = elOptions.length - 1; i >= 0; i--) {
	      var elOption = elOptions[i];
	      var el = elMap.get(elOption.id);

	      if (!el) {
	        continue;
	      }

	      var parentEl = el.parent;
	      var containerInfo = parentEl === rootGroup ? {
	        width: api.getWidth(),
	        height: api.getHeight()
	      } : {
	        // Like 'position:absolut' in css, default 0.
	        width: parentEl.__ecGraphicWidth || 0,
	        height: parentEl.__ecGraphicHeight || 0
	      };
	      layoutUtil.positionElement(el, elOption, containerInfo, null, {
	        hv: elOption.hv,
	        boundingMode: elOption.bounding
	      });
	    }
	  },

	  /**
	   * Clear all elements.
	   *
	   * @private
	   */
	  _clear: function () {
	    var elMap = this._elMap;
	    elMap.each(function (el) {
	      removeEl(el, elMap);
	    });
	    this._elMap = zrUtil.createHashMap();
	  },

	  /**
	   * @override
	   */
	  dispose: function () {
	    this._clear();
	  }
	});

	function createEl(id, targetElParent, elOption, elMap) {
	  var graphicType = elOption.type;
	  var Clz = graphicUtil[graphicType.charAt(0).toUpperCase() + graphicType.slice(1)];
	  var el = new Clz(elOption);
	  targetElParent.add(el);
	  elMap.set(id, el);
	  el.__ecGraphicId = id;
	}

	function removeEl(existEl, elMap) {
	  var existElParent = existEl && existEl.parent;

	  if (existElParent) {
	    existEl.type === 'group' && existEl.traverse(function (el) {
	      removeEl(el, elMap);
	    });
	    elMap.removeKey(existEl.__ecGraphicId);
	    existElParent.remove(existEl);
	  }
	} // Remove unnecessary props to avoid potential problems.


	function getCleanedElOption(elOption) {
	  elOption = zrUtil.extend({}, elOption);
	  zrUtil.each(['id', 'parentId', '$action', 'hv', 'bounding'].concat(layoutUtil.LOCATION_PARAMS), function (name) {
	    delete elOption[name];
	  });
	  return elOption;
	}

	function isSetLoc(obj, props) {
	  var isSet;
	  zrUtil.each(props, function (prop) {
	    obj[prop] != null && obj[prop] !== 'auto' && (isSet = true);
	  });
	  return isSet;
	}

	function setKeyInfoToNewElOption(resultItem, newElOption) {
	  var existElOption = resultItem.exist; // Set id and type after id assigned.

	  newElOption.id = resultItem.keyInfo.id;
	  !newElOption.type && existElOption && (newElOption.type = existElOption.type); // Set parent id if not specified

	  if (newElOption.parentId == null) {
	    var newElParentOption = newElOption.parentOption;

	    if (newElParentOption) {
	      newElOption.parentId = newElParentOption.id;
	    } else if (existElOption) {
	      newElOption.parentId = existElOption.parentId;
	    }
	  } // Clear


	  newElOption.parentOption = null;
	}

	function mergeNewElOptionToExist(existList, index, newElOption) {
	  // Update existing options, for `getOption` feature.
	  var newElOptCopy = zrUtil.extend({}, newElOption);
	  var existElOption = existList[index];
	  var $action = newElOption.$action || 'merge';

	  if ($action === 'merge') {
	    if (existElOption) {
	      // We can ensure that newElOptCopy and existElOption are not
	      // the same object, so `merge` will not change newElOptCopy.
	      zrUtil.merge(existElOption, newElOptCopy, true); // Rigid body, use ignoreSize.

	      layoutUtil.mergeLayoutParam(existElOption, newElOptCopy, {
	        ignoreSize: true
	      }); // Will be used in render.

	      layoutUtil.copyLayoutParams(newElOption, existElOption);
	    } else {
	      existList[index] = newElOptCopy;
	    }
	  } else if ($action === 'replace') {
	    existList[index] = newElOptCopy;
	  } else if ($action === 'remove') {
	    // null will be cleaned later.
	    existElOption && (existList[index] = null);
	  }
	}

	function setLayoutInfoToExist(existItem, newElOption) {
	  if (!existItem) {
	    return;
	  }

	  existItem.hv = newElOption.hv = [// Rigid body, dont care `width`.
	  isSetLoc(newElOption, ['left', 'right']), // Rigid body, dont care `height`.
	  isSetLoc(newElOption, ['top', 'bottom'])]; // Give default group size. Otherwise layout error may occur.

	  if (existItem.type === 'group') {
	    existItem.width == null && (existItem.width = newElOption.width = 0);
	    existItem.height == null && (existItem.height = newElOption.height = 0);
	  }
	}

/***/ },
/* 492 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(292);

	__webpack_require__(477);

	__webpack_require__(471);

/***/ },
/* 493 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(494);

	__webpack_require__(500);

	__webpack_require__(501);

	__webpack_require__(502);

/***/ },
/* 494 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	__webpack_require__(495);

	__webpack_require__(496);

	__webpack_require__(497);

	var legendFilter = __webpack_require__(499);

	var Component = __webpack_require__(245);

	// Do not contain scrollable legend, for sake of file size.
	// Series Filter
	echarts.registerProcessor(legendFilter);
	Component.registerSubTypeDefaulter('legend', function () {
	  // Default 'plain' when no type specified.
	  return 'plain';
	});

/***/ },
/* 495 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var zrUtil = __webpack_require__(166);

	var Model = __webpack_require__(206);

	var LegendModel = echarts.extendComponentModel({
	  type: 'legend.plain',
	  dependencies: ['series'],
	  layoutMode: {
	    type: 'box',
	    // legend.width/height are maxWidth/maxHeight actually,
	    // whereas realy width/height is calculated by its content.
	    // (Setting {left: 10, right: 10} does not make sense).
	    // So consider the case:
	    // `setOption({legend: {left: 10});`
	    // then `setOption({legend: {right: 10});`
	    // The previous `left` should be cleared by setting `ignoreSize`.
	    ignoreSize: true
	  },
	  init: function (option, parentModel, ecModel) {
	    this.mergeDefaultAndTheme(option, ecModel);
	    option.selected = option.selected || {};
	  },
	  mergeOption: function (option) {
	    LegendModel.superCall(this, 'mergeOption', option);
	  },
	  optionUpdated: function () {
	    this._updateData(this.ecModel);

	    var legendData = this._data; // If selectedMode is single, try to select one

	    if (legendData[0] && this.get('selectedMode') === 'single') {
	      var hasSelected = false; // If has any selected in option.selected

	      for (var i = 0; i < legendData.length; i++) {
	        var name = legendData[i].get('name');

	        if (this.isSelected(name)) {
	          // Force to unselect others
	          this.select(name);
	          hasSelected = true;
	          break;
	        }
	      } // Try select the first if selectedMode is single


	      !hasSelected && this.select(legendData[0].get('name'));
	    }
	  },
	  _updateData: function (ecModel) {
	    var legendData = zrUtil.map(this.get('data') || [], function (dataItem) {
	      // Can be string or number
	      if (typeof dataItem === 'string' || typeof dataItem === 'number') {
	        dataItem = {
	          name: dataItem
	        };
	      }

	      return new Model(dataItem, this, this.ecModel);
	    }, this);
	    this._data = legendData;
	    var availableNames = zrUtil.map(ecModel.getSeries(), function (series) {
	      return series.name;
	    });
	    ecModel.eachSeries(function (seriesModel) {
	      if (seriesModel.legendDataProvider) {
	        var data = seriesModel.legendDataProvider();
	        availableNames = availableNames.concat(data.mapArray(data.getName));
	      }
	    });
	    /**
	     * @type {Array.<string>}
	     * @private
	     */

	    this._availableNames = availableNames;
	  },

	  /**
	   * @return {Array.<module:echarts/model/Model>}
	   */
	  getData: function () {
	    return this._data;
	  },

	  /**
	   * @param {string} name
	   */
	  select: function (name) {
	    var selected = this.option.selected;
	    var selectedMode = this.get('selectedMode');

	    if (selectedMode === 'single') {
	      var data = this._data;
	      zrUtil.each(data, function (dataItem) {
	        selected[dataItem.get('name')] = false;
	      });
	    }

	    selected[name] = true;
	  },

	  /**
	   * @param {string} name
	   */
	  unSelect: function (name) {
	    if (this.get('selectedMode') !== 'single') {
	      this.option.selected[name] = false;
	    }
	  },

	  /**
	   * @param {string} name
	   */
	  toggleSelected: function (name) {
	    var selected = this.option.selected; // Default is true

	    if (!selected.hasOwnProperty(name)) {
	      selected[name] = true;
	    }

	    this[selected[name] ? 'unSelect' : 'select'](name);
	  },

	  /**
	   * @param {string} name
	   */
	  isSelected: function (name) {
	    var selected = this.option.selected;
	    return !(selected.hasOwnProperty(name) && !selected[name]) && zrUtil.indexOf(this._availableNames, name) >= 0;
	  },
	  defaultOption: {
	    // 一级层叠
	    zlevel: 0,
	    // 二级层叠
	    z: 4,
	    show: true,
	    // 布局方式，默认为水平布局，可选为：
	    // 'horizontal' | 'vertical'
	    orient: 'horizontal',
	    left: 'center',
	    // right: 'center',
	    top: 0,
	    // bottom: null,
	    // 水平对齐
	    // 'auto' | 'left' | 'right'
	    // 默认为 'auto', 根据 x 的位置判断是左对齐还是右对齐
	    align: 'auto',
	    backgroundColor: 'rgba(0,0,0,0)',
	    // 图例边框颜色
	    borderColor: '#ccc',
	    borderRadius: 0,
	    // 图例边框线宽，单位px，默认为0（无边框）
	    borderWidth: 0,
	    // 图例内边距，单位px，默认各方向内边距为5，
	    // 接受数组分别设定上右下左边距，同css
	    padding: 5,
	    // 各个item之间的间隔，单位px，默认为10，
	    // 横向布局时为水平间隔，纵向布局时为纵向间隔
	    itemGap: 10,
	    // 图例图形宽度
	    itemWidth: 25,
	    // 图例图形高度
	    itemHeight: 14,
	    // 图例关闭时候的颜色
	    inactiveColor: '#ccc',
	    textStyle: {
	      // 图例文字颜色
	      color: '#333'
	    },
	    // formatter: '',
	    // 选择模式，默认开启图例开关
	    selectedMode: true,
	    // 配置默认选中状态，可配合LEGEND.SELECTED事件做动态数据载入
	    // selected: null,
	    // 图例内容（详见legend.data，数组中每一项代表一个item
	    // data: [],
	    // Tooltip 相关配置
	    tooltip: {
	      show: false
	    }
	  }
	});
	var _default = LegendModel;
	module.exports = _default;

/***/ },
/* 496 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var zrUtil = __webpack_require__(166);

	function legendSelectActionHandler(methodName, payload, ecModel) {
	  var selectedMap = {};
	  var isToggleSelect = methodName === 'toggleSelected';
	  var isSelected; // Update all legend components

	  ecModel.eachComponent('legend', function (legendModel) {
	    if (isToggleSelect && isSelected != null) {
	      // Force other legend has same selected status
	      // Or the first is toggled to true and other are toggled to false
	      // In the case one legend has some item unSelected in option. And if other legend
	      // doesn't has the item, they will assume it is selected.
	      legendModel[isSelected ? 'select' : 'unSelect'](payload.name);
	    } else {
	      legendModel[methodName](payload.name);
	      isSelected = legendModel.isSelected(payload.name);
	    }

	    var legendData = legendModel.getData();
	    zrUtil.each(legendData, function (model) {
	      var name = model.get('name'); // Wrap element

	      if (name === '\n' || name === '') {
	        return;
	      }

	      var isItemSelected = legendModel.isSelected(name);

	      if (selectedMap.hasOwnProperty(name)) {
	        // Unselected if any legend is unselected
	        selectedMap[name] = selectedMap[name] && isItemSelected;
	      } else {
	        selectedMap[name] = isItemSelected;
	      }
	    });
	  }); // Return the event explicitly

	  return {
	    name: payload.name,
	    selected: selectedMap
	  };
	}
	/**
	 * @event legendToggleSelect
	 * @type {Object}
	 * @property {string} type 'legendToggleSelect'
	 * @property {string} [from]
	 * @property {string} name Series name or data item name
	 */


	echarts.registerAction('legendToggleSelect', 'legendselectchanged', zrUtil.curry(legendSelectActionHandler, 'toggleSelected'));
	/**
	 * @event legendSelect
	 * @type {Object}
	 * @property {string} type 'legendSelect'
	 * @property {string} name Series name or data item name
	 */

	echarts.registerAction('legendSelect', 'legendselected', zrUtil.curry(legendSelectActionHandler, 'select'));
	/**
	 * @event legendUnSelect
	 * @type {Object}
	 * @property {string} type 'legendUnSelect'
	 * @property {string} name Series name or data item name
	 */

	echarts.registerAction('legendUnSelect', 'legendunselected', zrUtil.curry(legendSelectActionHandler, 'unSelect'));

/***/ },
/* 497 */
/***/ function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(162);

	var __DEV__ = _config.__DEV__;

	var echarts = __webpack_require__(161);

	var zrUtil = __webpack_require__(166);

	var _symbol = __webpack_require__(276);

	var createSymbol = _symbol.createSymbol;

	var graphic = __webpack_require__(212);

	var _listComponent = __webpack_require__(498);

	var makeBackground = _listComponent.makeBackground;

	var layoutUtil = __webpack_require__(247);

	var curry = zrUtil.curry;
	var each = zrUtil.each;
	var Group = graphic.Group;

	var _default = echarts.extendComponentView({
	  type: 'legend.plain',
	  newlineDisabled: false,

	  /**
	   * @override
	   */
	  init: function () {
	    /**
	     * @private
	     * @type {module:zrender/container/Group}
	     */
	    this.group.add(this._contentGroup = new Group());
	    /**
	     * @private
	     * @type {module:zrender/Element}
	     */

	    this._backgroundEl;
	  },

	  /**
	   * @protected
	   */
	  getContentGroup: function () {
	    return this._contentGroup;
	  },

	  /**
	   * @override
	   */
	  render: function (legendModel, ecModel, api) {
	    this.resetInner();

	    if (!legendModel.get('show', true)) {
	      return;
	    }

	    var itemAlign = legendModel.get('align');

	    if (!itemAlign || itemAlign === 'auto') {
	      itemAlign = legendModel.get('left') === 'right' && legendModel.get('orient') === 'vertical' ? 'right' : 'left';
	    }

	    this.renderInner(itemAlign, legendModel, ecModel, api); // Perform layout.

	    var positionInfo = legendModel.getBoxLayoutParams();
	    var viewportSize = {
	      width: api.getWidth(),
	      height: api.getHeight()
	    };
	    var padding = legendModel.get('padding');
	    var maxSize = layoutUtil.getLayoutRect(positionInfo, viewportSize, padding);
	    var mainRect = this.layoutInner(legendModel, itemAlign, maxSize); // Place mainGroup, based on the calculated `mainRect`.

	    var layoutRect = layoutUtil.getLayoutRect(zrUtil.defaults({
	      width: mainRect.width,
	      height: mainRect.height
	    }, positionInfo), viewportSize, padding);
	    this.group.attr('position', [layoutRect.x - mainRect.x, layoutRect.y - mainRect.y]); // Render background after group is layout.

	    this.group.add(this._backgroundEl = makeBackground(mainRect, legendModel));
	  },

	  /**
	   * @protected
	   */
	  resetInner: function () {
	    this.getContentGroup().removeAll();
	    this._backgroundEl && this.group.remove(this._backgroundEl);
	  },

	  /**
	   * @protected
	   */
	  renderInner: function (itemAlign, legendModel, ecModel, api) {
	    var contentGroup = this.getContentGroup();
	    var legendDrawnMap = zrUtil.createHashMap();
	    var selectMode = legendModel.get('selectedMode');
	    each(legendModel.getData(), function (itemModel, dataIndex) {
	      var name = itemModel.get('name'); // Use empty string or \n as a newline string

	      if (!this.newlineDisabled && (name === '' || name === '\n')) {
	        contentGroup.add(new Group({
	          newline: true
	        }));
	        return;
	      }

	      var seriesModel = ecModel.getSeriesByName(name)[0];

	      if (legendDrawnMap.get(name)) {
	        // Have been drawed
	        return;
	      } // Series legend


	      if (seriesModel) {
	        var data = seriesModel.getData();
	        var color = data.getVisual('color'); // If color is a callback function

	        if (typeof color === 'function') {
	          // Use the first data
	          color = color(seriesModel.getDataParams(0));
	        } // Using rect symbol defaultly


	        var legendSymbolType = data.getVisual('legendSymbol') || 'roundRect';
	        var symbolType = data.getVisual('symbol');

	        var itemGroup = this._createItem(name, dataIndex, itemModel, legendModel, legendSymbolType, symbolType, itemAlign, color, selectMode);

	        itemGroup.on('click', curry(dispatchSelectAction, name, api)).on('mouseover', curry(dispatchHighlightAction, seriesModel, null, api)).on('mouseout', curry(dispatchDownplayAction, seriesModel, null, api));
	        legendDrawnMap.set(name, true);
	      } else {
	        // Data legend of pie, funnel
	        ecModel.eachRawSeries(function (seriesModel) {
	          // In case multiple series has same data name
	          if (legendDrawnMap.get(name)) {
	            return;
	          }

	          if (seriesModel.legendDataProvider) {
	            var data = seriesModel.legendDataProvider();
	            var idx = data.indexOfName(name);

	            if (idx < 0) {
	              return;
	            }

	            var color = data.getItemVisual(idx, 'color');
	            var legendSymbolType = 'roundRect';

	            var itemGroup = this._createItem(name, dataIndex, itemModel, legendModel, legendSymbolType, null, itemAlign, color, selectMode);

	            itemGroup.on('click', curry(dispatchSelectAction, name, api)) // FIXME Should not specify the series name
	            .on('mouseover', curry(dispatchHighlightAction, seriesModel, name, api)).on('mouseout', curry(dispatchDownplayAction, seriesModel, name, api));
	            legendDrawnMap.set(name, true);
	          }
	        }, this);
	      }
	    }, this);
	  },
	  _createItem: function (name, dataIndex, itemModel, legendModel, legendSymbolType, symbolType, itemAlign, color, selectMode) {
	    var itemWidth = legendModel.get('itemWidth');
	    var itemHeight = legendModel.get('itemHeight');
	    var inactiveColor = legendModel.get('inactiveColor');
	    var isSelected = legendModel.isSelected(name);
	    var itemGroup = new Group();
	    var textStyleModel = itemModel.getModel('textStyle');
	    var itemIcon = itemModel.get('icon');
	    var tooltipModel = itemModel.getModel('tooltip');
	    var legendGlobalTooltipModel = tooltipModel.parentModel; // Use user given icon first

	    legendSymbolType = itemIcon || legendSymbolType;
	    itemGroup.add(createSymbol(legendSymbolType, 0, 0, itemWidth, itemHeight, isSelected ? color : inactiveColor, true)); // Compose symbols
	    // PENDING

	    if (!itemIcon && symbolType // At least show one symbol, can't be all none
	    && (symbolType !== legendSymbolType || symbolType == 'none')) {
	      var size = itemHeight * 0.8;

	      if (symbolType === 'none') {
	        symbolType = 'circle';
	      } // Put symbol in the center


	      itemGroup.add(createSymbol(symbolType, (itemWidth - size) / 2, (itemHeight - size) / 2, size, size, isSelected ? color : inactiveColor));
	    }

	    var textX = itemAlign === 'left' ? itemWidth + 5 : -5;
	    var textAlign = itemAlign;
	    var formatter = legendModel.get('formatter');
	    var content = name;

	    if (typeof formatter === 'string' && formatter) {
	      content = formatter.replace('{name}', name != null ? name : '');
	    } else if (typeof formatter === 'function') {
	      content = formatter(name);
	    }

	    itemGroup.add(new graphic.Text({
	      style: graphic.setTextStyle({}, textStyleModel, {
	        text: content,
	        x: textX,
	        y: itemHeight / 2,
	        textFill: isSelected ? textStyleModel.getTextColor() : inactiveColor,
	        textAlign: textAlign,
	        textVerticalAlign: 'middle'
	      })
	    })); // Add a invisible rect to increase the area of mouse hover

	    var hitRect = new graphic.Rect({
	      shape: itemGroup.getBoundingRect(),
	      invisible: true,
	      tooltip: tooltipModel.get('show') ? zrUtil.extend({
	        content: name,
	        // Defaul formatter
	        formatter: legendGlobalTooltipModel.get('formatter', true) || function () {
	          return name;
	        },
	        formatterParams: {
	          componentType: 'legend',
	          legendIndex: legendModel.componentIndex,
	          name: name,
	          $vars: ['name']
	        }
	      }, tooltipModel.option) : null
	    });
	    itemGroup.add(hitRect);
	    itemGroup.eachChild(function (child) {
	      child.silent = true;
	    });
	    hitRect.silent = !selectMode;
	    this.getContentGroup().add(itemGroup);
	    graphic.setHoverStyle(itemGroup);
	    itemGroup.__legendDataIndex = dataIndex;
	    return itemGroup;
	  },

	  /**
	   * @protected
	   */
	  layoutInner: function (legendModel, itemAlign, maxSize) {
	    var contentGroup = this.getContentGroup(); // Place items in contentGroup.

	    layoutUtil.box(legendModel.get('orient'), contentGroup, legendModel.get('itemGap'), maxSize.width, maxSize.height);
	    var contentRect = contentGroup.getBoundingRect();
	    contentGroup.attr('position', [-contentRect.x, -contentRect.y]);
	    return this.group.getBoundingRect();
	  }
	});

	function dispatchSelectAction(name, api) {
	  api.dispatchAction({
	    type: 'legendToggleSelect',
	    name: name
	  });
	}

	function dispatchHighlightAction(seriesModel, dataName, api) {
	  // If element hover will move to a hoverLayer.
	  var el = api.getZr().storage.getDisplayList()[0];

	  if (!(el && el.useHoverLayer)) {
	    seriesModel.get('legendHoverLink') && api.dispatchAction({
	      type: 'highlight',
	      seriesName: seriesModel.name,
	      name: dataName
	    });
	  }
	}

	function dispatchDownplayAction(seriesModel, dataName, api) {
	  // If element hover will move to a hoverLayer.
	  var el = api.getZr().storage.getDisplayList()[0];

	  if (!(el && el.useHoverLayer)) {
	    seriesModel.get('legendHoverLink') && api.dispatchAction({
	      type: 'downplay',
	      seriesName: seriesModel.name,
	      name: dataName
	    });
	  }
	}

	module.exports = _default;

/***/ },
/* 498 */
/***/ function(module, exports, __webpack_require__) {

	var _layout = __webpack_require__(247);

	var getLayoutRect = _layout.getLayoutRect;
	var layoutBox = _layout.box;
	var positionElement = _layout.positionElement;

	var formatUtil = __webpack_require__(204);

	var graphic = __webpack_require__(212);

	/**
	 * Layout list like component.
	 * It will box layout each items in group of component and then position the whole group in the viewport
	 * @param {module:zrender/group/Group} group
	 * @param {module:echarts/model/Component} componentModel
	 * @param {module:echarts/ExtensionAPI}
	 */
	function layout(group, componentModel, api) {
	  var boxLayoutParams = componentModel.getBoxLayoutParams();
	  var padding = componentModel.get('padding');
	  var viewportSize = {
	    width: api.getWidth(),
	    height: api.getHeight()
	  };
	  var rect = getLayoutRect(boxLayoutParams, viewportSize, padding);
	  layoutBox(componentModel.get('orient'), group, componentModel.get('itemGap'), rect.width, rect.height);
	  positionElement(group, boxLayoutParams, viewportSize, padding);
	}

	function makeBackground(rect, componentModel) {
	  var padding = formatUtil.normalizeCssArray(componentModel.get('padding'));
	  var style = componentModel.getItemStyle(['color', 'opacity']);
	  style.fill = componentModel.get('backgroundColor');
	  var rect = new graphic.Rect({
	    shape: {
	      x: rect.x - padding[3],
	      y: rect.y - padding[0],
	      width: rect.width + padding[1] + padding[3],
	      height: rect.height + padding[0] + padding[2],
	      r: componentModel.get('borderRadius')
	    },
	    style: style,
	    silent: true,
	    z2: -1
	  }); // FIXME
	  // `subPixelOptimizeRect` may bring some gap between edge of viewpart
	  // and background rect when setting like `left: 0`, `top: 0`.
	  // graphic.subPixelOptimizeRect(rect);

	  return rect;
	}

	exports.layout = layout;
	exports.makeBackground = makeBackground;

/***/ },
/* 499 */
/***/ function(module, exports) {

	function _default(ecModel) {
	  var legendModels = ecModel.findComponents({
	    mainType: 'legend'
	  });

	  if (legendModels && legendModels.length) {
	    ecModel.filterSeries(function (series) {
	      // If in any legend component the status is not selected.
	      // Because in legend series is assumed selected when it is not in the legend data.
	      for (var i = 0; i < legendModels.length; i++) {
	        if (!legendModels[i].isSelected(series.name)) {
	          return false;
	        }
	      }

	      return true;
	    });
	  }
	}

	module.exports = _default;

/***/ },
/* 500 */
/***/ function(module, exports, __webpack_require__) {

	var LegendModel = __webpack_require__(495);

	var _layout = __webpack_require__(247);

	var mergeLayoutParam = _layout.mergeLayoutParam;
	var getLayoutParams = _layout.getLayoutParams;
	var ScrollableLegendModel = LegendModel.extend({
	  type: 'legend.scroll',

	  /**
	   * @param {number} scrollDataIndex
	   */
	  setScrollDataIndex: function (scrollDataIndex) {
	    this.option.scrollDataIndex = scrollDataIndex;
	  },
	  defaultOption: {
	    scrollDataIndex: 0,
	    pageButtonItemGap: 5,
	    pageButtonGap: null,
	    pageButtonPosition: 'end',
	    // 'start' or 'end'
	    pageFormatter: '{current}/{total}',
	    // If null/undefined, do not show page.
	    pageIcons: {
	      horizontal: ['M0,0L12,-10L12,10z', 'M0,0L-12,-10L-12,10z'],
	      vertical: ['M0,0L20,0L10,-20z', 'M0,0L20,0L10,20z']
	    },
	    pageIconColor: '#2f4554',
	    pageIconInactiveColor: '#aaa',
	    pageIconSize: 15,
	    // Can be [10, 3], which represents [width, height]
	    pageTextStyle: {
	      color: '#333'
	    },
	    animationDurationUpdate: 800
	  },

	  /**
	   * @override
	   */
	  init: function (option, parentModel, ecModel, extraOpt) {
	    var inputPositionParams = getLayoutParams(option);
	    ScrollableLegendModel.superCall(this, 'init', option, parentModel, ecModel, extraOpt);
	    mergeAndNormalizeLayoutParams(this, option, inputPositionParams);
	  },

	  /**
	   * @override
	   */
	  mergeOption: function (option, extraOpt) {
	    ScrollableLegendModel.superCall(this, 'mergeOption', option, extraOpt);
	    mergeAndNormalizeLayoutParams(this, this.option, option);
	  },
	  getOrient: function () {
	    return this.get('orient') === 'vertical' ? {
	      index: 1,
	      name: 'vertical'
	    } : {
	      index: 0,
	      name: 'horizontal'
	    };
	  }
	}); // Do not `ignoreSize` to enable setting {left: 10, right: 10}.

	function mergeAndNormalizeLayoutParams(legendModel, target, raw) {
	  var orient = legendModel.getOrient();
	  var ignoreSize = [1, 1];
	  ignoreSize[orient.index] = 0;
	  mergeLayoutParam(target, raw, {
	    type: 'box',
	    ignoreSize: ignoreSize
	  });
	}

	var _default = ScrollableLegendModel;
	module.exports = _default;

/***/ },
/* 501 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var graphic = __webpack_require__(212);

	var layoutUtil = __webpack_require__(247);

	var LegendView = __webpack_require__(497);

	/**
	 * Separate legend and scrollable legend to reduce package size.
	 */
	var Group = graphic.Group;
	var WH = ['width', 'height'];
	var XY = ['x', 'y'];
	var ScrollableLegendView = LegendView.extend({
	  type: 'legend.scroll',
	  newlineDisabled: true,
	  init: function () {
	    ScrollableLegendView.superCall(this, 'init');
	    /**
	     * @private
	     * @type {number} For `scroll`.
	     */

	    this._currentIndex = 0;
	    /**
	     * @private
	     * @type {module:zrender/container/Group}
	     */

	    this.group.add(this._containerGroup = new Group());

	    this._containerGroup.add(this.getContentGroup());
	    /**
	     * @private
	     * @type {module:zrender/container/Group}
	     */


	    this.group.add(this._controllerGroup = new Group());
	    /**
	     *
	     * @private
	     */

	    this._showController;
	  },

	  /**
	   * @override
	   */
	  resetInner: function () {
	    ScrollableLegendView.superCall(this, 'resetInner');

	    this._controllerGroup.removeAll();

	    this._containerGroup.removeClipPath();

	    this._containerGroup.__rectSize = null;
	  },

	  /**
	   * @override
	   */
	  renderInner: function (itemAlign, legendModel, ecModel, api) {
	    var me = this; // Render content items.

	    ScrollableLegendView.superCall(this, 'renderInner', itemAlign, legendModel, ecModel, api);
	    var controllerGroup = this._controllerGroup;
	    var pageIconSize = legendModel.get('pageIconSize', true);

	    if (!zrUtil.isArray(pageIconSize)) {
	      pageIconSize = [pageIconSize, pageIconSize];
	    }

	    createPageButton('pagePrev', 0);
	    var pageTextStyleModel = legendModel.getModel('pageTextStyle');
	    controllerGroup.add(new graphic.Text({
	      name: 'pageText',
	      style: {
	        textFill: pageTextStyleModel.getTextColor(),
	        font: pageTextStyleModel.getFont(),
	        textVerticalAlign: 'middle',
	        textAlign: 'center'
	      },
	      silent: true
	    }));
	    createPageButton('pageNext', 1);

	    function createPageButton(name, iconIdx) {
	      var pageDataIndexName = name + 'DataIndex';
	      var icon = graphic.createIcon(legendModel.get('pageIcons', true)[legendModel.getOrient().name][iconIdx], {
	        // Buttons will be created in each render, so we do not need
	        // to worry about avoiding using legendModel kept in scope.
	        onclick: zrUtil.bind(me._pageGo, me, pageDataIndexName, legendModel, api)
	      }, {
	        x: -pageIconSize[0] / 2,
	        y: -pageIconSize[1] / 2,
	        width: pageIconSize[0],
	        height: pageIconSize[1]
	      });
	      icon.name = name;
	      controllerGroup.add(icon);
	    }
	  },

	  /**
	   * @override
	   */
	  layoutInner: function (legendModel, itemAlign, maxSize) {
	    var contentGroup = this.getContentGroup();
	    var containerGroup = this._containerGroup;
	    var controllerGroup = this._controllerGroup;
	    var orientIdx = legendModel.getOrient().index;
	    var wh = WH[orientIdx];
	    var hw = WH[1 - orientIdx];
	    var yx = XY[1 - orientIdx]; // Place items in contentGroup.

	    layoutUtil.box(legendModel.get('orient'), contentGroup, legendModel.get('itemGap'), !orientIdx ? null : maxSize.width, orientIdx ? null : maxSize.height);
	    layoutUtil.box( // Buttons in controller are layout always horizontally.
	    'horizontal', controllerGroup, legendModel.get('pageButtonItemGap', true));
	    var contentRect = contentGroup.getBoundingRect();
	    var controllerRect = controllerGroup.getBoundingRect();
	    var showController = this._showController = contentRect[wh] > maxSize[wh];
	    var contentPos = [-contentRect.x, -contentRect.y]; // Remain contentPos when scroll animation perfroming.

	    contentPos[orientIdx] = contentGroup.position[orientIdx]; // Layout container group based on 0.

	    var containerPos = [0, 0];
	    var controllerPos = [-controllerRect.x, -controllerRect.y];
	    var pageButtonGap = zrUtil.retrieve2(legendModel.get('pageButtonGap', true), legendModel.get('itemGap', true)); // Place containerGroup and controllerGroup and contentGroup.

	    if (showController) {
	      var pageButtonPosition = legendModel.get('pageButtonPosition', true); // controller is on the right / bottom.

	      if (pageButtonPosition === 'end') {
	        controllerPos[orientIdx] += maxSize[wh] - controllerRect[wh];
	      } // controller is on the left / top.
	      else {
	          containerPos[orientIdx] += controllerRect[wh] + pageButtonGap;
	        }
	    } // Always align controller to content as 'middle'.


	    controllerPos[1 - orientIdx] += contentRect[hw] / 2 - controllerRect[hw] / 2;
	    contentGroup.attr('position', contentPos);
	    containerGroup.attr('position', containerPos);
	    controllerGroup.attr('position', controllerPos); // Calculate `mainRect` and set `clipPath`.
	    // mainRect should not be calculated by `this.group.getBoundingRect()`
	    // for sake of the overflow.

	    var mainRect = this.group.getBoundingRect();
	    var mainRect = {
	      x: 0,
	      y: 0
	    }; // Consider content may be overflow (should be clipped).

	    mainRect[wh] = showController ? maxSize[wh] : contentRect[wh];
	    mainRect[hw] = Math.max(contentRect[hw], controllerRect[hw]); // `containerRect[yx] + containerPos[1 - orientIdx]` is 0.

	    mainRect[yx] = Math.min(0, controllerRect[yx] + controllerPos[1 - orientIdx]);
	    containerGroup.__rectSize = maxSize[wh];

	    if (showController) {
	      var clipShape = {
	        x: 0,
	        y: 0
	      };
	      clipShape[wh] = Math.max(maxSize[wh] - controllerRect[wh] - pageButtonGap, 0);
	      clipShape[hw] = mainRect[hw];
	      containerGroup.setClipPath(new graphic.Rect({
	        shape: clipShape
	      })); // Consider content may be larger than container, container rect
	      // can not be obtained from `containerGroup.getBoundingRect()`.

	      containerGroup.__rectSize = clipShape[wh];
	    } else {
	      // Do not remove or ignore controller. Keep them set as place holders.
	      controllerGroup.eachChild(function (child) {
	        child.attr({
	          invisible: true,
	          silent: true
	        });
	      });
	    } // Content translate animation.


	    var pageInfo = this._getPageInfo(legendModel);

	    pageInfo.pageIndex != null && graphic.updateProps(contentGroup, {
	      position: pageInfo.contentPosition
	    }, // When switch from "show controller" to "not show controller", view should be
	    // updated immediately without animation, otherwise causes weird efffect.
	    showController ? legendModel : false);

	    this._updatePageInfoView(legendModel, pageInfo);

	    return mainRect;
	  },
	  _pageGo: function (to, legendModel, api) {
	    var scrollDataIndex = this._getPageInfo(legendModel)[to];

	    scrollDataIndex != null && api.dispatchAction({
	      type: 'legendScroll',
	      scrollDataIndex: scrollDataIndex,
	      legendId: legendModel.id
	    });
	  },
	  _updatePageInfoView: function (legendModel, pageInfo) {
	    var controllerGroup = this._controllerGroup;
	    zrUtil.each(['pagePrev', 'pageNext'], function (name) {
	      var canJump = pageInfo[name + 'DataIndex'] != null;
	      var icon = controllerGroup.childOfName(name);

	      if (icon) {
	        icon.setStyle('fill', canJump ? legendModel.get('pageIconColor', true) : legendModel.get('pageIconInactiveColor', true));
	        icon.cursor = canJump ? 'pointer' : 'default';
	      }
	    });
	    var pageText = controllerGroup.childOfName('pageText');
	    var pageFormatter = legendModel.get('pageFormatter');
	    var pageIndex = pageInfo.pageIndex;
	    var current = pageIndex != null ? pageIndex + 1 : 0;
	    var total = pageInfo.pageCount;
	    pageText && pageFormatter && pageText.setStyle('text', zrUtil.isString(pageFormatter) ? pageFormatter.replace('{current}', current).replace('{total}', total) : pageFormatter({
	      current: current,
	      total: total
	    }));
	  },

	  /**
	   * @param {module:echarts/model/Model} legendModel
	   * @return {Object} {
	   *  contentPosition: Array.<number>, null when data item not found.
	   *  pageIndex: number, null when data item not found.
	   *  pageCount: number, always be a number, can be 0.
	   *  pagePrevDataIndex: number, null when no next page.
	   *  pageNextDataIndex: number, null when no previous page.
	   * }
	   */
	  _getPageInfo: function (legendModel) {
	    // Align left or top by the current dataIndex.
	    var currDataIndex = legendModel.get('scrollDataIndex', true);
	    var contentGroup = this.getContentGroup();
	    var contentRect = contentGroup.getBoundingRect();
	    var containerRectSize = this._containerGroup.__rectSize;
	    var orientIdx = legendModel.getOrient().index;
	    var wh = WH[orientIdx];
	    var hw = WH[1 - orientIdx];
	    var xy = XY[orientIdx];
	    var contentPos = contentGroup.position.slice();
	    var pageIndex;
	    var pagePrevDataIndex;
	    var pageNextDataIndex;
	    var targetItemGroup;

	    if (this._showController) {
	      contentGroup.eachChild(function (child) {
	        if (child.__legendDataIndex === currDataIndex) {
	          targetItemGroup = child;
	        }
	      });
	    } else {
	      targetItemGroup = contentGroup.childAt(0);
	    }

	    var pageCount = containerRectSize ? Math.ceil(contentRect[wh] / containerRectSize) : 0;

	    if (targetItemGroup) {
	      var itemRect = targetItemGroup.getBoundingRect();
	      var itemLoc = targetItemGroup.position[orientIdx] + itemRect[xy];
	      contentPos[orientIdx] = -itemLoc - contentRect[xy];
	      pageIndex = Math.floor(pageCount * (itemLoc + itemRect[xy] + containerRectSize / 2) / contentRect[wh]);
	      pageIndex = contentRect[wh] && pageCount ? Math.max(0, Math.min(pageCount - 1, pageIndex)) : -1;
	      var winRect = {
	        x: 0,
	        y: 0
	      };
	      winRect[wh] = containerRectSize;
	      winRect[hw] = contentRect[hw];
	      winRect[xy] = -contentPos[orientIdx] - contentRect[xy];
	      var startIdx;
	      var children = contentGroup.children();
	      contentGroup.eachChild(function (child, index) {
	        var itemRect = getItemRect(child);

	        if (itemRect.intersect(winRect)) {
	          startIdx == null && (startIdx = index); // It is user-friendly that the last item shown in the
	          // current window is shown at the begining of next window.

	          pageNextDataIndex = child.__legendDataIndex;
	        } // If the last item is shown entirely, no next page.


	        if (index === children.length - 1 && itemRect[xy] + itemRect[wh] <= winRect[xy] + winRect[wh]) {
	          pageNextDataIndex = null;
	        }
	      }); // Always align based on the left/top most item, so the left/top most
	      // item in the previous window is needed to be found here.

	      if (startIdx != null) {
	        var startItem = children[startIdx];
	        var startRect = getItemRect(startItem);
	        winRect[xy] = startRect[xy] + startRect[wh] - winRect[wh]; // If the first item is shown entirely, no previous page.

	        if (startIdx <= 0 && startRect[xy] >= winRect[xy]) {
	          pagePrevDataIndex = null;
	        } else {
	          while (startIdx > 0 && getItemRect(children[startIdx - 1]).intersect(winRect)) {
	            startIdx--;
	          }

	          pagePrevDataIndex = children[startIdx].__legendDataIndex;
	        }
	      }
	    }

	    return {
	      contentPosition: contentPos,
	      pageIndex: pageIndex,
	      pageCount: pageCount,
	      pagePrevDataIndex: pagePrevDataIndex,
	      pageNextDataIndex: pageNextDataIndex
	    };

	    function getItemRect(el) {
	      var itemRect = el.getBoundingRect().clone();
	      itemRect[xy] += el.position[orientIdx];
	      return itemRect;
	    }
	  }
	});
	var _default = ScrollableLegendView;
	module.exports = _default;

/***/ },
/* 502 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	/**
	 * @event legendScroll
	 * @type {Object}
	 * @property {string} type 'legendScroll'
	 * @property {string} scrollDataIndex
	 */
	echarts.registerAction('legendScroll', 'legendscroll', function (payload, ecModel) {
	  var scrollDataIndex = payload.scrollDataIndex;
	  scrollDataIndex != null && ecModel.eachComponent({
	    mainType: 'legend',
	    subType: 'scroll',
	    query: payload
	  }, function (legendModel) {
	    legendModel.setScrollDataIndex(scrollDataIndex);
	  });
	});

/***/ },
/* 503 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	__webpack_require__(471);

	__webpack_require__(504);

	__webpack_require__(505);

	// FIXME Better way to pack data in graphic element

	/**
	 * @action
	 * @property {string} type
	 * @property {number} seriesIndex
	 * @property {number} dataIndex
	 * @property {number} [x]
	 * @property {number} [y]
	 */
	echarts.registerAction({
	  type: 'showTip',
	  event: 'showTip',
	  update: 'tooltip:manuallyShowTip'
	}, // noop
	function () {});
	echarts.registerAction({
	  type: 'hideTip',
	  event: 'hideTip',
	  update: 'tooltip:manuallyHideTip'
	}, // noop
	function () {});

/***/ },
/* 504 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var _default = echarts.extendComponentModel({
	  type: 'tooltip',
	  dependencies: ['axisPointer'],
	  defaultOption: {
	    zlevel: 0,
	    z: 8,
	    show: true,
	    // tooltip主体内容
	    showContent: true,
	    // 'trigger' only works on coordinate system.
	    // 'item' | 'axis' | 'none'
	    trigger: 'item',
	    // 'click' | 'mousemove' | 'none'
	    triggerOn: 'mousemove|click',
	    alwaysShowContent: false,
	    displayMode: 'single',
	    // 'single' | 'multipleByCoordSys'
	    // 位置 {Array} | {Function}
	    // position: null
	    // Consider triggered from axisPointer handle, verticalAlign should be 'middle'
	    // align: null,
	    // verticalAlign: null,
	    // 是否约束 content 在 viewRect 中。默认 false 是为了兼容以前版本。
	    confine: false,
	    // 内容格式器：{string}（Template） ¦ {Function}
	    // formatter: null
	    showDelay: 0,
	    // 隐藏延迟，单位ms
	    hideDelay: 100,
	    // 动画变换时间，单位s
	    transitionDuration: 0.4,
	    enterable: false,
	    // 提示背景颜色，默认为透明度为0.7的黑色
	    backgroundColor: 'rgba(50,50,50,0.7)',
	    // 提示边框颜色
	    borderColor: '#333',
	    // 提示边框圆角，单位px，默认为4
	    borderRadius: 4,
	    // 提示边框线宽，单位px，默认为0（无边框）
	    borderWidth: 0,
	    // 提示内边距，单位px，默认各方向内边距为5，
	    // 接受数组分别设定上右下左边距，同css
	    padding: 5,
	    // Extra css text
	    extraCssText: '',
	    // 坐标轴指示器，坐标轴触发有效
	    axisPointer: {
	      // 默认为直线
	      // 可选为：'line' | 'shadow' | 'cross'
	      type: 'line',
	      // type 为 line 的时候有效，指定 tooltip line 所在的轴，可选
	      // 可选 'x' | 'y' | 'angle' | 'radius' | 'auto'
	      // 默认 'auto'，会选择类型为 cateogry 的轴，对于双数值轴，笛卡尔坐标系会默认选择 x 轴
	      // 极坐标系会默认选择 angle 轴
	      axis: 'auto',
	      animation: 'auto',
	      animationDurationUpdate: 200,
	      animationEasingUpdate: 'exponentialOut',
	      crossStyle: {
	        color: '#999',
	        width: 1,
	        type: 'dashed',
	        // TODO formatter
	        textStyle: {} // lineStyle and shadowStyle should not be specified here,
	        // otherwise it will always override those styles on option.axisPointer.

	      }
	    },
	    textStyle: {
	      color: '#fff',
	      fontSize: 14
	    }
	  }
	});

	module.exports = _default;

/***/ },
/* 505 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var zrUtil = __webpack_require__(166);

	var env = __webpack_require__(165);

	var TooltipContent = __webpack_require__(506);

	var formatUtil = __webpack_require__(204);

	var numberUtil = __webpack_require__(205);

	var graphic = __webpack_require__(212);

	var findPointFromSeries = __webpack_require__(473);

	var layoutUtil = __webpack_require__(247);

	var Model = __webpack_require__(206);

	var globalListener = __webpack_require__(476);

	var axisHelper = __webpack_require__(268);

	var axisPointerViewHelper = __webpack_require__(479);

	var bind = zrUtil.bind;
	var each = zrUtil.each;
	var parsePercent = numberUtil.parsePercent;
	var proxyRect = new graphic.Rect({
	  shape: {
	    x: -1,
	    y: -1,
	    width: 2,
	    height: 2
	  }
	});

	var _default = echarts.extendComponentView({
	  type: 'tooltip',
	  init: function (ecModel, api) {
	    if (env.node) {
	      return;
	    }

	    var tooltipContent = new TooltipContent(api.getDom(), api);
	    this._tooltipContent = tooltipContent;
	  },
	  render: function (tooltipModel, ecModel, api) {
	    if (env.node) {
	      return;
	    } // Reset


	    this.group.removeAll();
	    /**
	     * @private
	     * @type {module:echarts/component/tooltip/TooltipModel}
	     */

	    this._tooltipModel = tooltipModel;
	    /**
	     * @private
	     * @type {module:echarts/model/Global}
	     */

	    this._ecModel = ecModel;
	    /**
	     * @private
	     * @type {module:echarts/ExtensionAPI}
	     */

	    this._api = api;
	    /**
	     * Should be cleaned when render.
	     * @private
	     * @type {Array.<Array.<Object>>}
	     */

	    this._lastDataByCoordSys = null;
	    /**
	     * @private
	     * @type {boolean}
	     */

	    this._alwaysShowContent = tooltipModel.get('alwaysShowContent');
	    var tooltipContent = this._tooltipContent;
	    tooltipContent.update();
	    tooltipContent.setEnterable(tooltipModel.get('enterable'));

	    this._initGlobalListener();

	    this._keepShow();
	  },
	  _initGlobalListener: function () {
	    var tooltipModel = this._tooltipModel;
	    var triggerOn = tooltipModel.get('triggerOn');
	    globalListener.register('itemTooltip', this._api, bind(function (currTrigger, e, dispatchAction) {
	      // If 'none', it is not controlled by mouse totally.
	      if (triggerOn !== 'none') {
	        if (triggerOn.indexOf(currTrigger) >= 0) {
	          this._tryShow(e, dispatchAction);
	        } else if (currTrigger === 'leave') {
	          this._hide(dispatchAction);
	        }
	      }
	    }, this));
	  },
	  _keepShow: function () {
	    var tooltipModel = this._tooltipModel;
	    var ecModel = this._ecModel;
	    var api = this._api; // Try to keep the tooltip show when refreshing

	    if (this._lastX != null && this._lastY != null // When user is willing to control tooltip totally using API,
	    // self.manuallyShowTip({x, y}) might cause tooltip hide,
	    // which is not expected.
	    && tooltipModel.get('triggerOn') !== 'none') {
	      var self = this;
	      clearTimeout(this._refreshUpdateTimeout);
	      this._refreshUpdateTimeout = setTimeout(function () {
	        // Show tip next tick after other charts are rendered
	        // In case highlight action has wrong result
	        // FIXME
	        self.manuallyShowTip(tooltipModel, ecModel, api, {
	          x: self._lastX,
	          y: self._lastY
	        });
	      });
	    }
	  },

	  /**
	   * Show tip manually by
	   * dispatchAction({
	   *     type: 'showTip',
	   *     x: 10,
	   *     y: 10
	   * });
	   * Or
	   * dispatchAction({
	   *      type: 'showTip',
	   *      seriesIndex: 0,
	   *      dataIndex or dataIndexInside or name
	   * });
	   *
	   *  TODO Batch
	   */
	  manuallyShowTip: function (tooltipModel, ecModel, api, payload) {
	    if (payload.from === this.uid || env.node) {
	      return;
	    }

	    var dispatchAction = makeDispatchAction(payload, api); // Reset ticket

	    this._ticket = ''; // When triggered from axisPointer.

	    var dataByCoordSys = payload.dataByCoordSys;

	    if (payload.tooltip && payload.x != null && payload.y != null) {
	      var el = proxyRect;
	      el.position = [payload.x, payload.y];
	      el.update();
	      el.tooltip = payload.tooltip; // Manually show tooltip while view is not using zrender elements.

	      this._tryShow({
	        offsetX: payload.x,
	        offsetY: payload.y,
	        target: el
	      }, dispatchAction);
	    } else if (dataByCoordSys) {
	      this._tryShow({
	        offsetX: payload.x,
	        offsetY: payload.y,
	        position: payload.position,
	        event: {},
	        dataByCoordSys: payload.dataByCoordSys,
	        tooltipOption: payload.tooltipOption
	      }, dispatchAction);
	    } else if (payload.seriesIndex != null) {
	      if (this._manuallyAxisShowTip(tooltipModel, ecModel, api, payload)) {
	        return;
	      }

	      var pointInfo = findPointFromSeries(payload, ecModel);
	      var cx = pointInfo.point[0];
	      var cy = pointInfo.point[1];

	      if (cx != null && cy != null) {
	        this._tryShow({
	          offsetX: cx,
	          offsetY: cy,
	          position: payload.position,
	          target: pointInfo.el,
	          event: {}
	        }, dispatchAction);
	      }
	    } else if (payload.x != null && payload.y != null) {
	      // FIXME
	      // should wrap dispatchAction like `axisPointer/globalListener` ?
	      api.dispatchAction({
	        type: 'updateAxisPointer',
	        x: payload.x,
	        y: payload.y
	      });

	      this._tryShow({
	        offsetX: payload.x,
	        offsetY: payload.y,
	        position: payload.position,
	        target: api.getZr().findHover(payload.x, payload.y).target,
	        event: {}
	      }, dispatchAction);
	    }
	  },
	  manuallyHideTip: function (tooltipModel, ecModel, api, payload) {
	    var tooltipContent = this._tooltipContent;

	    if (!this._alwaysShowContent) {
	      tooltipContent.hideLater(this._tooltipModel.get('hideDelay'));
	    }

	    this._lastX = this._lastY = null;

	    if (payload.from !== this.uid) {
	      this._hide(makeDispatchAction(payload, api));
	    }
	  },
	  // Be compatible with previous design, that is, when tooltip.type is 'axis' and
	  // dispatchAction 'showTip' with seriesIndex and dataIndex will trigger axis pointer
	  // and tooltip.
	  _manuallyAxisShowTip: function (tooltipModel, ecModel, api, payload) {
	    var seriesIndex = payload.seriesIndex;
	    var dataIndex = payload.dataIndex;
	    var coordSysAxesInfo = ecModel.getComponent('axisPointer').coordSysAxesInfo;

	    if (seriesIndex == null || dataIndex == null || coordSysAxesInfo == null) {
	      return;
	    }

	    var seriesModel = ecModel.getSeriesByIndex(seriesIndex);

	    if (!seriesModel) {
	      return;
	    }

	    var data = seriesModel.getData();
	    var tooltipModel = buildTooltipModel([data.getItemModel(dataIndex), seriesModel, (seriesModel.coordinateSystem || {}).model, tooltipModel]);

	    if (tooltipModel.get('trigger') !== 'axis') {
	      return;
	    }

	    api.dispatchAction({
	      type: 'updateAxisPointer',
	      seriesIndex: seriesIndex,
	      dataIndex: dataIndex,
	      position: payload.position
	    });
	    return true;
	  },
	  _tryShow: function (e, dispatchAction) {
	    var el = e.target;
	    var tooltipModel = this._tooltipModel;

	    if (!tooltipModel) {
	      return;
	    } // Save mouse x, mouse y. So we can try to keep showing the tip if chart is refreshed


	    this._lastX = e.offsetX;
	    this._lastY = e.offsetY;
	    var dataByCoordSys = e.dataByCoordSys;

	    if (dataByCoordSys && dataByCoordSys.length) {
	      this._showAxisTooltip(dataByCoordSys, e);
	    } // Always show item tooltip if mouse is on the element with dataIndex
	    else if (el && el.dataIndex != null) {
	        this._lastDataByCoordSys = null;

	        this._showSeriesItemTooltip(e, el, dispatchAction);
	      } // Tooltip provided directly. Like legend.
	      else if (el && el.tooltip) {
	          this._lastDataByCoordSys = null;

	          this._showComponentItemTooltip(e, el, dispatchAction);
	        } else {
	          this._lastDataByCoordSys = null;

	          this._hide(dispatchAction);
	        }
	  },
	  _showOrMove: function (tooltipModel, cb) {
	    // showDelay is used in this case: tooltip.enterable is set
	    // as true. User intent to move mouse into tooltip and click
	    // something. `showDelay` makes it easyer to enter the content
	    // but tooltip do not move immediately.
	    var delay = tooltipModel.get('showDelay');
	    cb = zrUtil.bind(cb, this);
	    clearTimeout(this._showTimout);
	    delay > 0 ? this._showTimout = setTimeout(cb, delay) : cb();
	  },
	  _showAxisTooltip: function (dataByCoordSys, e) {
	    var ecModel = this._ecModel;
	    var globalTooltipModel = this._tooltipModel;
	    var point = [e.offsetX, e.offsetY];
	    var singleDefaultHTML = [];
	    var singleParamsList = [];
	    var singleTooltipModel = buildTooltipModel([e.tooltipOption, globalTooltipModel]);
	    each(dataByCoordSys, function (itemCoordSys) {
	      // var coordParamList = [];
	      // var coordDefaultHTML = [];
	      // var coordTooltipModel = buildTooltipModel([
	      //     e.tooltipOption,
	      //     itemCoordSys.tooltipOption,
	      //     ecModel.getComponent(itemCoordSys.coordSysMainType, itemCoordSys.coordSysIndex),
	      //     globalTooltipModel
	      // ]);
	      // var displayMode = coordTooltipModel.get('displayMode');
	      // var paramsList = displayMode === 'single' ? singleParamsList : [];
	      each(itemCoordSys.dataByAxis, function (item) {
	        var axisModel = ecModel.getComponent(item.axisDim + 'Axis', item.axisIndex);
	        var axisValue = item.value;
	        var seriesDefaultHTML = [];

	        if (!axisModel || axisValue == null) {
	          return;
	        }

	        var valueLabel = axisPointerViewHelper.getValueLabel(axisValue, axisModel.axis, ecModel, item.seriesDataIndices, item.valueLabelOpt);
	        zrUtil.each(item.seriesDataIndices, function (idxItem) {
	          var series = ecModel.getSeriesByIndex(idxItem.seriesIndex);
	          var dataIndex = idxItem.dataIndexInside;
	          var dataParams = series && series.getDataParams(dataIndex);
	          dataParams.axisDim = item.axisDim;
	          dataParams.axisIndex = item.axisIndex;
	          dataParams.axisType = item.axisType;
	          dataParams.axisId = item.axisId;
	          dataParams.axisValue = axisHelper.getAxisRawValue(axisModel.axis, axisValue);
	          dataParams.axisValueLabel = valueLabel;

	          if (dataParams) {
	            singleParamsList.push(dataParams);
	            seriesDefaultHTML.push(series.formatTooltip(dataIndex, true));
	          }
	        }); // Default tooltip content
	        // FIXME
	        // (1) shold be the first data which has name?
	        // (2) themeRiver, firstDataIndex is array, and first line is unnecessary.

	        var firstLine = valueLabel;
	        singleDefaultHTML.push((firstLine ? formatUtil.encodeHTML(firstLine) + '<br />' : '') + seriesDefaultHTML.join('<br />'));
	      });
	    }, this); // In most case, the second axis is shown upper than the first one.

	    singleDefaultHTML.reverse();
	    singleDefaultHTML = singleDefaultHTML.join('<br /><br />');
	    var positionExpr = e.position;

	    this._showOrMove(singleTooltipModel, function () {
	      if (this._updateContentNotChangedOnAxis(dataByCoordSys)) {
	        this._updatePosition(singleTooltipModel, positionExpr, point[0], point[1], this._tooltipContent, singleParamsList);
	      } else {
	        this._showTooltipContent(singleTooltipModel, singleDefaultHTML, singleParamsList, Math.random(), point[0], point[1], positionExpr);
	      }
	    }); // Do not trigger events here, because this branch only be entered
	    // from dispatchAction.

	  },
	  _showSeriesItemTooltip: function (e, el, dispatchAction) {
	    var ecModel = this._ecModel; // Use dataModel in element if possible
	    // Used when mouseover on a element like markPoint or edge
	    // In which case, the data is not main data in series.

	    var seriesIndex = el.seriesIndex;
	    var seriesModel = ecModel.getSeriesByIndex(seriesIndex); // For example, graph link.

	    var dataModel = el.dataModel || seriesModel;
	    var dataIndex = el.dataIndex;
	    var dataType = el.dataType;
	    var data = dataModel.getData();
	    var tooltipModel = buildTooltipModel([data.getItemModel(dataIndex), dataModel, seriesModel && (seriesModel.coordinateSystem || {}).model, this._tooltipModel]);
	    var tooltipTrigger = tooltipModel.get('trigger');

	    if (tooltipTrigger != null && tooltipTrigger !== 'item') {
	      return;
	    }

	    var params = dataModel.getDataParams(dataIndex, dataType);
	    var defaultHtml = dataModel.formatTooltip(dataIndex, false, dataType);
	    var asyncTicket = 'item_' + dataModel.name + '_' + dataIndex;

	    this._showOrMove(tooltipModel, function () {
	      this._showTooltipContent(tooltipModel, defaultHtml, params, asyncTicket, e.offsetX, e.offsetY, e.position, e.target);
	    }); // FIXME
	    // duplicated showtip if manuallyShowTip is called from dispatchAction.


	    dispatchAction({
	      type: 'showTip',
	      dataIndexInside: dataIndex,
	      dataIndex: data.getRawIndex(dataIndex),
	      seriesIndex: seriesIndex,
	      from: this.uid
	    });
	  },
	  _showComponentItemTooltip: function (e, el, dispatchAction) {
	    var tooltipOpt = el.tooltip;

	    if (typeof tooltipOpt === 'string') {
	      var content = tooltipOpt;
	      tooltipOpt = {
	        content: content,
	        // Fixed formatter
	        formatter: content
	      };
	    }

	    var subTooltipModel = new Model(tooltipOpt, this._tooltipModel, this._ecModel);
	    var defaultHtml = subTooltipModel.get('content');
	    var asyncTicket = Math.random(); // Do not check whether `trigger` is 'none' here, because `trigger`
	    // only works on cooridinate system. In fact, we have not found case
	    // that requires setting `trigger` nothing on component yet.

	    this._showOrMove(subTooltipModel, function () {
	      this._showTooltipContent(subTooltipModel, defaultHtml, subTooltipModel.get('formatterParams') || {}, asyncTicket, e.offsetX, e.offsetY, e.position, el);
	    }); // If not dispatch showTip, tip may be hide triggered by axis.


	    dispatchAction({
	      type: 'showTip',
	      from: this.uid
	    });
	  },
	  _showTooltipContent: function (tooltipModel, defaultHtml, params, asyncTicket, x, y, positionExpr, el) {
	    // Reset ticket
	    this._ticket = '';

	    if (!tooltipModel.get('showContent') || !tooltipModel.get('show')) {
	      return;
	    }

	    var tooltipContent = this._tooltipContent;
	    var formatter = tooltipModel.get('formatter');
	    positionExpr = positionExpr || tooltipModel.get('position');
	    var html = defaultHtml;

	    if (formatter && typeof formatter === 'string') {
	      html = formatUtil.formatTpl(formatter, params, true);
	    } else if (typeof formatter === 'function') {
	      var callback = bind(function (cbTicket, html) {
	        if (cbTicket === this._ticket) {
	          tooltipContent.setContent(html);

	          this._updatePosition(tooltipModel, positionExpr, x, y, tooltipContent, params, el);
	        }
	      }, this);
	      this._ticket = asyncTicket;
	      html = formatter(params, asyncTicket, callback);
	    }

	    tooltipContent.setContent(html);
	    tooltipContent.show(tooltipModel);

	    this._updatePosition(tooltipModel, positionExpr, x, y, tooltipContent, params, el);
	  },

	  /**
	   * @param  {string|Function|Array.<number>|Object} positionExpr
	   * @param  {number} x Mouse x
	   * @param  {number} y Mouse y
	   * @param  {boolean} confine Whether confine tooltip content in view rect.
	   * @param  {Object|<Array.<Object>} params
	   * @param  {module:zrender/Element} el target element
	   * @param  {module:echarts/ExtensionAPI} api
	   * @return {Array.<number>}
	   */
	  _updatePosition: function (tooltipModel, positionExpr, x, y, content, params, el) {
	    var viewWidth = this._api.getWidth();

	    var viewHeight = this._api.getHeight();

	    positionExpr = positionExpr || tooltipModel.get('position');
	    var contentSize = content.getSize();
	    var align = tooltipModel.get('align');
	    var vAlign = tooltipModel.get('verticalAlign');
	    var rect = el && el.getBoundingRect().clone();
	    el && rect.applyTransform(el.transform);

	    if (typeof positionExpr === 'function') {
	      // Callback of position can be an array or a string specify the position
	      positionExpr = positionExpr([x, y], params, content.el, rect, {
	        viewSize: [viewWidth, viewHeight],
	        contentSize: contentSize.slice()
	      });
	    }

	    if (zrUtil.isArray(positionExpr)) {
	      x = parsePercent(positionExpr[0], viewWidth);
	      y = parsePercent(positionExpr[1], viewHeight);
	    } else if (zrUtil.isObject(positionExpr)) {
	      positionExpr.width = contentSize[0];
	      positionExpr.height = contentSize[1];
	      var layoutRect = layoutUtil.getLayoutRect(positionExpr, {
	        width: viewWidth,
	        height: viewHeight
	      });
	      x = layoutRect.x;
	      y = layoutRect.y;
	      align = null; // When positionExpr is left/top/right/bottom,
	      // align and verticalAlign will not work.

	      vAlign = null;
	    } // Specify tooltip position by string 'top' 'bottom' 'left' 'right' around graphic element
	    else if (typeof positionExpr === 'string' && el) {
	        var pos = calcTooltipPosition(positionExpr, rect, contentSize);
	        x = pos[0];
	        y = pos[1];
	      } else {
	        var pos = refixTooltipPosition(x, y, content.el, viewWidth, viewHeight, align ? null : 20, vAlign ? null : 20);
	        x = pos[0];
	        y = pos[1];
	      }

	    align && (x -= isCenterAlign(align) ? contentSize[0] / 2 : align === 'right' ? contentSize[0] : 0);
	    vAlign && (y -= isCenterAlign(vAlign) ? contentSize[1] / 2 : vAlign === 'bottom' ? contentSize[1] : 0);

	    if (tooltipModel.get('confine')) {
	      var pos = confineTooltipPosition(x, y, content.el, viewWidth, viewHeight);
	      x = pos[0];
	      y = pos[1];
	    }

	    content.moveTo(x, y);
	  },
	  // FIXME
	  // Should we remove this but leave this to user?
	  _updateContentNotChangedOnAxis: function (dataByCoordSys) {
	    var lastCoordSys = this._lastDataByCoordSys;
	    var contentNotChanged = !!lastCoordSys && lastCoordSys.length === dataByCoordSys.length;
	    contentNotChanged && each(lastCoordSys, function (lastItemCoordSys, indexCoordSys) {
	      var lastDataByAxis = lastItemCoordSys.dataByAxis || {};
	      var thisItemCoordSys = dataByCoordSys[indexCoordSys] || {};
	      var thisDataByAxis = thisItemCoordSys.dataByAxis || [];
	      contentNotChanged &= lastDataByAxis.length === thisDataByAxis.length;
	      contentNotChanged && each(lastDataByAxis, function (lastItem, indexAxis) {
	        var thisItem = thisDataByAxis[indexAxis] || {};
	        var lastIndices = lastItem.seriesDataIndices || [];
	        var newIndices = thisItem.seriesDataIndices || [];
	        contentNotChanged &= lastItem.value === thisItem.value && lastItem.axisType === thisItem.axisType && lastItem.axisId === thisItem.axisId && lastIndices.length === newIndices.length;
	        contentNotChanged && each(lastIndices, function (lastIdxItem, j) {
	          var newIdxItem = newIndices[j];
	          contentNotChanged &= lastIdxItem.seriesIndex === newIdxItem.seriesIndex && lastIdxItem.dataIndex === newIdxItem.dataIndex;
	        });
	      });
	    });
	    this._lastDataByCoordSys = dataByCoordSys;
	    return !!contentNotChanged;
	  },
	  _hide: function (dispatchAction) {
	    // Do not directly hideLater here, because this behavior may be prevented
	    // in dispatchAction when showTip is dispatched.
	    // FIXME
	    // duplicated hideTip if manuallyHideTip is called from dispatchAction.
	    this._lastDataByCoordSys = null;
	    dispatchAction({
	      type: 'hideTip',
	      from: this.uid
	    });
	  },
	  dispose: function (ecModel, api) {
	    if (env.node) {
	      return;
	    }

	    this._tooltipContent.hide();

	    globalListener.unregister('itemTooltip', api);
	  }
	});
	/**
	 * @param {Array.<Object|module:echarts/model/Model>} modelCascade
	 * From top to bottom. (the last one should be globalTooltipModel);
	 */


	function buildTooltipModel(modelCascade) {
	  var resultModel = modelCascade.pop();

	  while (modelCascade.length) {
	    var tooltipOpt = modelCascade.pop();

	    if (tooltipOpt) {
	      if (tooltipOpt instanceof Model) {
	        tooltipOpt = tooltipOpt.get('tooltip', true);
	      } // In each data item tooltip can be simply write:
	      // {
	      //  value: 10,
	      //  tooltip: 'Something you need to know'
	      // }


	      if (typeof tooltipOpt === 'string') {
	        tooltipOpt = {
	          formatter: tooltipOpt
	        };
	      }

	      resultModel = new Model(tooltipOpt, resultModel, resultModel.ecModel);
	    }
	  }

	  return resultModel;
	}

	function makeDispatchAction(payload, api) {
	  return payload.dispatchAction || zrUtil.bind(api.dispatchAction, api);
	}

	function refixTooltipPosition(x, y, el, viewWidth, viewHeight, gapH, gapV) {
	  var size = getOuterSize(el);
	  var width = size.width;
	  var height = size.height;

	  if (gapH != null) {
	    if (x + width + gapH > viewWidth) {
	      x -= width + gapH;
	    } else {
	      x += gapH;
	    }
	  }

	  if (gapV != null) {
	    if (y + height + gapV > viewHeight) {
	      y -= height + gapV;
	    } else {
	      y += gapV;
	    }
	  }

	  return [x, y];
	}

	function confineTooltipPosition(x, y, el, viewWidth, viewHeight) {
	  var size = getOuterSize(el);
	  var width = size.width;
	  var height = size.height;
	  x = Math.min(x + width, viewWidth) - width;
	  y = Math.min(y + height, viewHeight) - height;
	  x = Math.max(x, 0);
	  y = Math.max(y, 0);
	  return [x, y];
	}

	function getOuterSize(el) {
	  var width = el.clientWidth;
	  var height = el.clientHeight; // Consider browser compatibility.
	  // IE8 does not support getComputedStyle.

	  if (document.defaultView && document.defaultView.getComputedStyle) {
	    var stl = document.defaultView.getComputedStyle(el);

	    if (stl) {
	      width += parseInt(stl.paddingLeft, 10) + parseInt(stl.paddingRight, 10) + parseInt(stl.borderLeftWidth, 10) + parseInt(stl.borderRightWidth, 10);
	      height += parseInt(stl.paddingTop, 10) + parseInt(stl.paddingBottom, 10) + parseInt(stl.borderTopWidth, 10) + parseInt(stl.borderBottomWidth, 10);
	    }
	  }

	  return {
	    width: width,
	    height: height
	  };
	}

	function calcTooltipPosition(position, rect, contentSize) {
	  var domWidth = contentSize[0];
	  var domHeight = contentSize[1];
	  var gap = 5;
	  var x = 0;
	  var y = 0;
	  var rectWidth = rect.width;
	  var rectHeight = rect.height;

	  switch (position) {
	    case 'inside':
	      x = rect.x + rectWidth / 2 - domWidth / 2;
	      y = rect.y + rectHeight / 2 - domHeight / 2;
	      break;

	    case 'top':
	      x = rect.x + rectWidth / 2 - domWidth / 2;
	      y = rect.y - domHeight - gap;
	      break;

	    case 'bottom':
	      x = rect.x + rectWidth / 2 - domWidth / 2;
	      y = rect.y + rectHeight + gap;
	      break;

	    case 'left':
	      x = rect.x - domWidth - gap;
	      y = rect.y + rectHeight / 2 - domHeight / 2;
	      break;

	    case 'right':
	      x = rect.x + rectWidth + gap;
	      y = rect.y + rectHeight / 2 - domHeight / 2;
	  }

	  return [x, y];
	}

	function isCenterAlign(align) {
	  return align === 'center' || align === 'middle';
	}

	module.exports = _default;

/***/ },
/* 506 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var zrColor = __webpack_require__(180);

	var eventUtil = __webpack_require__(199);

	var env = __webpack_require__(165);

	var formatUtil = __webpack_require__(204);

	var each = zrUtil.each;
	var toCamelCase = formatUtil.toCamelCase;
	var vendors = ['', '-webkit-', '-moz-', '-o-'];
	var gCssText = 'position:absolute;display:block;border-style:solid;white-space:nowrap;z-index:9999999;';
	/**
	 * @param {number} duration
	 * @return {string}
	 * @inner
	 */

	function assembleTransition(duration) {
	  var transitionCurve = 'cubic-bezier(0.23, 1, 0.32, 1)';
	  var transitionText = 'left ' + duration + 's ' + transitionCurve + ',' + 'top ' + duration + 's ' + transitionCurve;
	  return zrUtil.map(vendors, function (vendorPrefix) {
	    return vendorPrefix + 'transition:' + transitionText;
	  }).join(';');
	}
	/**
	 * @param {Object} textStyle
	 * @return {string}
	 * @inner
	 */


	function assembleFont(textStyleModel) {
	  var cssText = [];
	  var fontSize = textStyleModel.get('fontSize');
	  var color = textStyleModel.getTextColor();
	  color && cssText.push('color:' + color);
	  cssText.push('font:' + textStyleModel.getFont());
	  fontSize && cssText.push('line-height:' + Math.round(fontSize * 3 / 2) + 'px');
	  each(['decoration', 'align'], function (name) {
	    var val = textStyleModel.get(name);
	    val && cssText.push('text-' + name + ':' + val);
	  });
	  return cssText.join(';');
	}
	/**
	 * @param {Object} tooltipModel
	 * @return {string}
	 * @inner
	 */


	function assembleCssText(tooltipModel) {
	  var cssText = [];
	  var transitionDuration = tooltipModel.get('transitionDuration');
	  var backgroundColor = tooltipModel.get('backgroundColor');
	  var textStyleModel = tooltipModel.getModel('textStyle');
	  var padding = tooltipModel.get('padding'); // Animation transition. Do not animate when transitionDuration is 0.

	  transitionDuration && cssText.push(assembleTransition(transitionDuration));

	  if (backgroundColor) {
	    if (env.canvasSupported) {
	      cssText.push('background-Color:' + backgroundColor);
	    } else {
	      // for ie
	      cssText.push('background-Color:#' + zrColor.toHex(backgroundColor));
	      cssText.push('filter:alpha(opacity=70)');
	    }
	  } // Border style


	  each(['width', 'color', 'radius'], function (name) {
	    var borderName = 'border-' + name;
	    var camelCase = toCamelCase(borderName);
	    var val = tooltipModel.get(camelCase);
	    val != null && cssText.push(borderName + ':' + val + (name === 'color' ? '' : 'px'));
	  }); // Text style

	  cssText.push(assembleFont(textStyleModel)); // Padding

	  if (padding != null) {
	    cssText.push('padding:' + formatUtil.normalizeCssArray(padding).join('px ') + 'px');
	  }

	  return cssText.join(';') + ';';
	}
	/**
	 * @alias module:echarts/component/tooltip/TooltipContent
	 * @constructor
	 */


	function TooltipContent(container, api) {
	  var el = document.createElement('div');
	  var zr = this._zr = api.getZr();
	  this.el = el;
	  this._x = api.getWidth() / 2;
	  this._y = api.getHeight() / 2;
	  container.appendChild(el);
	  this._container = container;
	  this._show = false;
	  /**
	   * @private
	   */

	  this._hideTimeout;
	  var self = this;

	  el.onmouseenter = function () {
	    // clear the timeout in hideLater and keep showing tooltip
	    if (self._enterable) {
	      clearTimeout(self._hideTimeout);
	      self._show = true;
	    }

	    self._inContent = true;
	  };

	  el.onmousemove = function (e) {
	    e = e || window.event;

	    if (!self._enterable) {
	      // Try trigger zrender event to avoid mouse
	      // in and out shape too frequently
	      var handler = zr.handler;
	      eventUtil.normalizeEvent(container, e, true);
	      handler.dispatch('mousemove', e);
	    }
	  };

	  el.onmouseleave = function () {
	    if (self._enterable) {
	      if (self._show) {
	        self.hideLater(self._hideDelay);
	      }
	    }

	    self._inContent = false;
	  };
	}

	TooltipContent.prototype = {
	  constructor: TooltipContent,

	  /**
	   * @private
	   * @type {boolean}
	   */
	  _enterable: true,

	  /**
	   * Update when tooltip is rendered
	   */
	  update: function () {
	    // FIXME
	    // Move this logic to ec main?
	    var container = this._container;
	    var stl = container.currentStyle || document.defaultView.getComputedStyle(container);
	    var domStyle = container.style;

	    if (domStyle.position !== 'absolute' && stl.position !== 'absolute') {
	      domStyle.position = 'relative';
	    } // Hide the tooltip
	    // PENDING
	    // this.hide();

	  },
	  show: function (tooltipModel) {
	    clearTimeout(this._hideTimeout);
	    var el = this.el;
	    el.style.cssText = gCssText + assembleCssText(tooltipModel) // http://stackoverflow.com/questions/21125587/css3-transition-not-working-in-chrome-anymore
	    + ';left:' + this._x + 'px;top:' + this._y + 'px;' + (tooltipModel.get('extraCssText') || '');
	    el.style.display = el.innerHTML ? 'block' : 'none';
	    this._show = true;
	  },
	  setContent: function (content) {
	    this.el.innerHTML = content == null ? '' : content;
	  },
	  setEnterable: function (enterable) {
	    this._enterable = enterable;
	  },
	  getSize: function () {
	    var el = this.el;
	    return [el.clientWidth, el.clientHeight];
	  },
	  moveTo: function (x, y) {
	    // xy should be based on canvas root. But tooltipContent is
	    // the sibling of canvas root. So padding of ec container
	    // should be considered here.
	    var zr = this._zr;
	    var viewportRootOffset;

	    if (zr && zr.painter && (viewportRootOffset = zr.painter.getViewportRootOffset())) {
	      x += viewportRootOffset.offsetLeft;
	      y += viewportRootOffset.offsetTop;
	    }

	    var style = this.el.style;
	    style.left = x + 'px';
	    style.top = y + 'px';
	    this._x = x;
	    this._y = y;
	  },
	  hide: function () {
	    this.el.style.display = 'none';
	    this._show = false;
	  },
	  hideLater: function (time) {
	    if (this._show && !(this._inContent && this._enterable)) {
	      if (time) {
	        this._hideDelay = time; // Set show false to avoid invoke hideLater mutiple times

	        this._show = false;
	        this._hideTimeout = setTimeout(zrUtil.bind(this.hide, this), time);
	      } else {
	        this.hide();
	      }
	    }
	  },
	  isShow: function () {
	    return this._show;
	  }
	};
	var _default = TooltipContent;
	module.exports = _default;

/***/ },
/* 507 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var zrUtil = __webpack_require__(166);

	var barPolar = __webpack_require__(508);

	__webpack_require__(509);

	__webpack_require__(515);

	__webpack_require__(517);

	__webpack_require__(471);

	__webpack_require__(519);

	// For reducing size of echarts.min, barLayoutPolar is required by polar.
	echarts.registerLayout(zrUtil.curry(barPolar, 'bar')); // Polar view

	echarts.extendComponentView({
	  type: 'polar'
	});

/***/ },
/* 508 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var _number = __webpack_require__(205);

	var parsePercent = _number.parsePercent;

	function getSeriesStackId(seriesModel) {
	  return seriesModel.get('stack') || '__ec_stack_' + seriesModel.seriesIndex;
	}

	function getAxisKey(axis) {
	  return axis.dim;
	}
	/**
	 * @param {string} seriesType
	 * @param {module:echarts/model/Global} ecModel
	 * @param {module:echarts/ExtensionAPI} api
	 */


	function barLayoutPolar(seriesType, ecModel, api) {
	  var width = api.getWidth();
	  var height = api.getHeight();
	  var lastStackCoords = {};
	  var lastStackCoordsOrigin = {};
	  var barWidthAndOffset = calRadialBar(zrUtil.filter(ecModel.getSeriesByType(seriesType), function (seriesModel) {
	    return !ecModel.isSeriesFiltered(seriesModel) && seriesModel.coordinateSystem && seriesModel.coordinateSystem.type === 'polar';
	  }));
	  ecModel.eachSeriesByType(seriesType, function (seriesModel) {
	    // Check series coordinate, do layout for polar only
	    if (seriesModel.coordinateSystem.type !== 'polar') {
	      return;
	    }

	    var data = seriesModel.getData();
	    var polar = seriesModel.coordinateSystem;
	    var angleAxis = polar.getAngleAxis();
	    var baseAxis = polar.getBaseAxis();
	    var stackId = getSeriesStackId(seriesModel);
	    var columnLayoutInfo = barWidthAndOffset[getAxisKey(baseAxis)][stackId];
	    var columnOffset = columnLayoutInfo.offset;
	    var columnWidth = columnLayoutInfo.width;
	    var valueAxis = polar.getOtherAxis(baseAxis);
	    var center = seriesModel.get('center') || ['50%', '50%'];
	    var cx = parsePercent(center[0], width);
	    var cy = parsePercent(center[1], height);
	    var barMinHeight = seriesModel.get('barMinHeight') || 0;
	    var barMinAngle = seriesModel.get('barMinAngle') || 0;
	    var valueAxisStart = valueAxis.getExtent()[0];
	    var valueMax = valueAxis.model.get('max');
	    var valueMin = valueAxis.model.get('min');
	    var coordDims = [seriesModel.coordDimToDataDim('radius')[0], seriesModel.coordDimToDataDim('angle')[0]];
	    var coords = data.mapArray(coordDims, function (radius, angle) {
	      return polar.dataToPoint([radius, angle]);
	    }, true);
	    lastStackCoords[stackId] = lastStackCoords[stackId] || [];
	    lastStackCoordsOrigin[stackId] = lastStackCoordsOrigin[stackId] || []; // Fix #4243

	    data.each(seriesModel.coordDimToDataDim(valueAxis.dim)[0], function (value, idx) {
	      if (isNaN(value)) {
	        return;
	      }

	      if (!lastStackCoords[stackId][idx]) {
	        lastStackCoords[stackId][idx] = {
	          p: valueAxisStart,
	          // Positive stack
	          n: valueAxisStart // Negative stack

	        };
	        lastStackCoordsOrigin[stackId][idx] = {
	          p: valueAxisStart,
	          // Positive stack
	          n: valueAxisStart // Negative stack

	        };
	      }

	      var sign = value >= 0 ? 'p' : 'n';
	      var coord = polar.pointToCoord(coords[idx]);
	      var lastCoordOrigin = lastStackCoordsOrigin[stackId][idx][sign];
	      var r0;
	      var r;
	      var startAngle;
	      var endAngle;

	      if (valueAxis.dim === 'radius') {
	        // radial sector
	        r0 = lastCoordOrigin;
	        r = coord[0];
	        startAngle = (-coord[1] + columnOffset) * Math.PI / 180;
	        endAngle = startAngle + columnWidth * Math.PI / 180;

	        if (Math.abs(r) < barMinHeight) {
	          r = r0 + (r < 0 ? -1 : 1) * barMinHeight;
	        }

	        lastStackCoordsOrigin[stackId][idx][sign] = r;
	      } else {
	        // tangential sector
	        r0 = coord[0] + columnOffset;
	        r = r0 + columnWidth; // clamp data if min or max is defined for valueAxis

	        if (valueMax != null) {
	          value = Math.min(value, valueMax);
	        }

	        if (valueMin != null) {
	          value = Math.max(value, valueMin);
	        }

	        var angle = angleAxis.dataToAngle(value);

	        if (Math.abs(angle - lastCoordOrigin) < barMinAngle) {
	          angle = lastCoordOrigin - (value < 0 ? -1 : 1) * barMinAngle;
	        }

	        startAngle = -lastCoordOrigin * Math.PI / 180;
	        endAngle = -angle * Math.PI / 180; // if the previous stack is at the end of the ring,
	        // add a round to differentiate it from origin

	        var extent = angleAxis.getExtent();
	        var stackCoord = angle;

	        if (stackCoord === extent[0] && value > 0) {
	          stackCoord = extent[1];
	        } else if (stackCoord === extent[1] && value < 0) {
	          stackCoord = extent[0];
	        }

	        lastStackCoordsOrigin[stackId][idx][sign] = stackCoord;
	      }

	      data.setItemLayout(idx, {
	        cx: cx,
	        cy: cy,
	        r0: r0,
	        r: r,
	        startAngle: startAngle,
	        endAngle: endAngle
	      });
	    }, true);
	  }, this);
	}
	/**
	 * Calculate bar width and offset for radial bar charts
	 */


	function calRadialBar(barSeries, api) {
	  // Columns info on each category axis. Key is polar name
	  var columnsMap = {};
	  zrUtil.each(barSeries, function (seriesModel, idx) {
	    var data = seriesModel.getData();
	    var polar = seriesModel.coordinateSystem;
	    var baseAxis = polar.getBaseAxis();
	    var axisExtent = baseAxis.getExtent();
	    var bandWidth = baseAxis.type === 'category' ? baseAxis.getBandWidth() : Math.abs(axisExtent[1] - axisExtent[0]) / data.count();
	    var columnsOnAxis = columnsMap[getAxisKey(baseAxis)] || {
	      bandWidth: bandWidth,
	      remainedWidth: bandWidth,
	      autoWidthCount: 0,
	      categoryGap: '20%',
	      gap: '30%',
	      stacks: {}
	    };
	    var stacks = columnsOnAxis.stacks;
	    columnsMap[getAxisKey(baseAxis)] = columnsOnAxis;
	    var stackId = getSeriesStackId(seriesModel);

	    if (!stacks[stackId]) {
	      columnsOnAxis.autoWidthCount++;
	    }

	    stacks[stackId] = stacks[stackId] || {
	      width: 0,
	      maxWidth: 0
	    };
	    var barWidth = parsePercent(seriesModel.get('barWidth'), bandWidth);
	    var barMaxWidth = parsePercent(seriesModel.get('barMaxWidth'), bandWidth);
	    var barGap = seriesModel.get('barGap');
	    var barCategoryGap = seriesModel.get('barCategoryGap');

	    if (barWidth && !stacks[stackId].width) {
	      barWidth = Math.min(columnsOnAxis.remainedWidth, barWidth);
	      stacks[stackId].width = barWidth;
	      columnsOnAxis.remainedWidth -= barWidth;
	    }

	    barMaxWidth && (stacks[stackId].maxWidth = barMaxWidth);
	    barGap != null && (columnsOnAxis.gap = barGap);
	    barCategoryGap != null && (columnsOnAxis.categoryGap = barCategoryGap);
	  });
	  var result = {};
	  zrUtil.each(columnsMap, function (columnsOnAxis, coordSysName) {
	    result[coordSysName] = {};
	    var stacks = columnsOnAxis.stacks;
	    var bandWidth = columnsOnAxis.bandWidth;
	    var categoryGap = parsePercent(columnsOnAxis.categoryGap, bandWidth);
	    var barGapPercent = parsePercent(columnsOnAxis.gap, 1);
	    var remainedWidth = columnsOnAxis.remainedWidth;
	    var autoWidthCount = columnsOnAxis.autoWidthCount;
	    var autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);
	    autoWidth = Math.max(autoWidth, 0); // Find if any auto calculated bar exceeded maxBarWidth

	    zrUtil.each(stacks, function (column, stack) {
	      var maxWidth = column.maxWidth;

	      if (maxWidth && maxWidth < autoWidth) {
	        maxWidth = Math.min(maxWidth, remainedWidth);

	        if (column.width) {
	          maxWidth = Math.min(maxWidth, column.width);
	        }

	        remainedWidth -= maxWidth;
	        column.width = maxWidth;
	        autoWidthCount--;
	      }
	    }); // Recalculate width again

	    autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);
	    autoWidth = Math.max(autoWidth, 0);
	    var widthSum = 0;
	    var lastColumn;
	    zrUtil.each(stacks, function (column, idx) {
	      if (!column.width) {
	        column.width = autoWidth;
	      }

	      lastColumn = column;
	      widthSum += column.width * (1 + barGapPercent);
	    });

	    if (lastColumn) {
	      widthSum -= lastColumn.width * barGapPercent;
	    }

	    var offset = -widthSum / 2;
	    zrUtil.each(stacks, function (column, stackId) {
	      result[coordSysName][stackId] = result[coordSysName][stackId] || {
	        offset: offset,
	        width: column.width
	      };
	      offset += column.width * (1 + barGapPercent);
	    });
	  });
	  return result;
	}

	var _default = barLayoutPolar;
	module.exports = _default;

/***/ },
/* 509 */
/***/ function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(162);

	var __DEV__ = _config.__DEV__;

	var zrUtil = __webpack_require__(166);

	var Polar = __webpack_require__(510);

	var _number = __webpack_require__(205);

	var parsePercent = _number.parsePercent;

	var _axisHelper = __webpack_require__(268);

	var createScaleByModel = _axisHelper.createScaleByModel;
	var niceScaleExtent = _axisHelper.niceScaleExtent;

	var CoordinateSystem = __webpack_require__(252);

	__webpack_require__(513);

	// TODO Axis scale
	// 依赖 PolarModel 做预处理

	/**
	 * Resize method bound to the polar
	 * @param {module:echarts/coord/polar/PolarModel} polarModel
	 * @param {module:echarts/ExtensionAPI} api
	 */
	function resizePolar(polar, polarModel, api) {
	  var center = polarModel.get('center');
	  var width = api.getWidth();
	  var height = api.getHeight();
	  polar.cx = parsePercent(center[0], width);
	  polar.cy = parsePercent(center[1], height);
	  var radiusAxis = polar.getRadiusAxis();
	  var size = Math.min(width, height) / 2;
	  var radius = parsePercent(polarModel.get('radius'), size);
	  radiusAxis.inverse ? radiusAxis.setExtent(radius, 0) : radiusAxis.setExtent(0, radius);
	}
	/**
	 * Update polar
	 */


	function updatePolarScale(ecModel, api) {
	  var polar = this;
	  var angleAxis = polar.getAngleAxis();
	  var radiusAxis = polar.getRadiusAxis(); // Reset scale

	  angleAxis.scale.setExtent(Infinity, -Infinity);
	  radiusAxis.scale.setExtent(Infinity, -Infinity);
	  ecModel.eachSeries(function (seriesModel) {
	    if (seriesModel.coordinateSystem === polar) {
	      var data = seriesModel.getData();
	      radiusAxis.scale.unionExtentFromData(data, 'radius');
	      angleAxis.scale.unionExtentFromData(data, 'angle');
	    }
	  });
	  niceScaleExtent(angleAxis.scale, angleAxis.model);
	  niceScaleExtent(radiusAxis.scale, radiusAxis.model); // Fix extent of category angle axis

	  if (angleAxis.type === 'category' && !angleAxis.onBand) {
	    var extent = angleAxis.getExtent();
	    var diff = 360 / angleAxis.scale.count();
	    angleAxis.inverse ? extent[1] += diff : extent[1] -= diff;
	    angleAxis.setExtent(extent[0], extent[1]);
	  }
	}
	/**
	 * Set common axis properties
	 * @param {module:echarts/coord/polar/AngleAxis|module:echarts/coord/polar/RadiusAxis}
	 * @param {module:echarts/coord/polar/AxisModel}
	 * @inner
	 */


	function setAxis(axis, axisModel) {
	  axis.type = axisModel.get('type');
	  axis.scale = createScaleByModel(axisModel);
	  axis.onBand = axisModel.get('boundaryGap') && axis.type === 'category';
	  axis.inverse = axisModel.get('inverse');

	  if (axisModel.mainType === 'angleAxis') {
	    axis.inverse ^= axisModel.get('clockwise');
	    var startAngle = axisModel.get('startAngle');
	    axis.setExtent(startAngle, startAngle + (axis.inverse ? -360 : 360));
	  } // Inject axis instance


	  axisModel.axis = axis;
	  axis.model = axisModel;
	}

	var polarCreator = {
	  dimensions: Polar.prototype.dimensions,
	  create: function (ecModel, api) {
	    var polarList = [];
	    ecModel.eachComponent('polar', function (polarModel, idx) {
	      var polar = new Polar(idx); // Inject resize and update method

	      polar.update = updatePolarScale;
	      var radiusAxis = polar.getRadiusAxis();
	      var angleAxis = polar.getAngleAxis();
	      var radiusAxisModel = polarModel.findAxisModel('radiusAxis');
	      var angleAxisModel = polarModel.findAxisModel('angleAxis');
	      setAxis(radiusAxis, radiusAxisModel);
	      setAxis(angleAxis, angleAxisModel);
	      resizePolar(polar, polarModel, api);
	      polarList.push(polar);
	      polarModel.coordinateSystem = polar;
	      polar.model = polarModel;
	    }); // Inject coordinateSystem to series

	    ecModel.eachSeries(function (seriesModel) {
	      if (seriesModel.get('coordinateSystem') === 'polar') {
	        var polarModel = ecModel.queryComponents({
	          mainType: 'polar',
	          index: seriesModel.get('polarIndex'),
	          id: seriesModel.get('polarId')
	        })[0];
	        seriesModel.coordinateSystem = polarModel.coordinateSystem;
	      }
	    });
	    return polarList;
	  }
	};
	CoordinateSystem.register('polar', polarCreator);

/***/ },
/* 510 */
/***/ function(module, exports, __webpack_require__) {

	var RadiusAxis = __webpack_require__(511);

	var AngleAxis = __webpack_require__(512);

	/**
	 * @module echarts/coord/polar/Polar
	 */

	/**
	 * @alias {module:echarts/coord/polar/Polar}
	 * @constructor
	 * @param {string} name
	 */
	var Polar = function (name) {
	  /**
	   * @type {string}
	   */
	  this.name = name || '';
	  /**
	   * x of polar center
	   * @type {number}
	   */

	  this.cx = 0;
	  /**
	   * y of polar center
	   * @type {number}
	   */

	  this.cy = 0;
	  /**
	   * @type {module:echarts/coord/polar/RadiusAxis}
	   * @private
	   */

	  this._radiusAxis = new RadiusAxis();
	  /**
	   * @type {module:echarts/coord/polar/AngleAxis}
	   * @private
	   */

	  this._angleAxis = new AngleAxis();
	  this._radiusAxis.polar = this._angleAxis.polar = this;
	};

	Polar.prototype = {
	  type: 'polar',
	  axisPointerEnabled: true,
	  constructor: Polar,

	  /**
	   * @param {Array.<string>}
	   * @readOnly
	   */
	  dimensions: ['radius', 'angle'],

	  /**
	   * @type {module:echarts/coord/PolarModel}
	   */
	  model: null,

	  /**
	   * If contain coord
	   * @param {Array.<number>} point
	   * @return {boolean}
	   */
	  containPoint: function (point) {
	    var coord = this.pointToCoord(point);
	    return this._radiusAxis.contain(coord[0]) && this._angleAxis.contain(coord[1]);
	  },

	  /**
	   * If contain data
	   * @param {Array.<number>} data
	   * @return {boolean}
	   */
	  containData: function (data) {
	    return this._radiusAxis.containData(data[0]) && this._angleAxis.containData(data[1]);
	  },

	  /**
	   * @param {string} dim
	   * @return {module:echarts/coord/polar/AngleAxis|module:echarts/coord/polar/RadiusAxis}
	   */
	  getAxis: function (dim) {
	    return this['_' + dim + 'Axis'];
	  },

	  /**
	   * @return {Array.<module:echarts/coord/Axis>}
	   */
	  getAxes: function () {
	    return [this._radiusAxis, this._angleAxis];
	  },

	  /**
	   * Get axes by type of scale
	   * @param {string} scaleType
	   * @return {module:echarts/coord/polar/AngleAxis|module:echarts/coord/polar/RadiusAxis}
	   */
	  getAxesByScale: function (scaleType) {
	    var axes = [];
	    var angleAxis = this._angleAxis;
	    var radiusAxis = this._radiusAxis;
	    angleAxis.scale.type === scaleType && axes.push(angleAxis);
	    radiusAxis.scale.type === scaleType && axes.push(radiusAxis);
	    return axes;
	  },

	  /**
	   * @return {module:echarts/coord/polar/AngleAxis}
	   */
	  getAngleAxis: function () {
	    return this._angleAxis;
	  },

	  /**
	   * @return {module:echarts/coord/polar/RadiusAxis}
	   */
	  getRadiusAxis: function () {
	    return this._radiusAxis;
	  },

	  /**
	   * @param {module:echarts/coord/polar/Axis}
	   * @return {module:echarts/coord/polar/Axis}
	   */
	  getOtherAxis: function (axis) {
	    var angleAxis = this._angleAxis;
	    return axis === angleAxis ? this._radiusAxis : angleAxis;
	  },

	  /**
	   * Base axis will be used on stacking.
	   *
	   * @return {module:echarts/coord/polar/Axis}
	   */
	  getBaseAxis: function () {
	    return this.getAxesByScale('ordinal')[0] || this.getAxesByScale('time')[0] || this.getAngleAxis();
	  },

	  /**
	   * @param {string} [dim] 'radius' or 'angle' or 'auto' or null/undefined
	   * @return {Object} {baseAxes: [], otherAxes: []}
	   */
	  getTooltipAxes: function (dim) {
	    var baseAxis = dim != null && dim !== 'auto' ? this.getAxis(dim) : this.getBaseAxis();
	    return {
	      baseAxes: [baseAxis],
	      otherAxes: [this.getOtherAxis(baseAxis)]
	    };
	  },

	  /**
	   * Convert a single data item to (x, y) point.
	   * Parameter data is an array which the first element is radius and the second is angle
	   * @param {Array.<number>} data
	   * @param {boolean} [clamp=false]
	   * @return {Array.<number>}
	   */
	  dataToPoint: function (data, clamp) {
	    return this.coordToPoint([this._radiusAxis.dataToRadius(data[0], clamp), this._angleAxis.dataToAngle(data[1], clamp)]);
	  },

	  /**
	   * Convert a (x, y) point to data
	   * @param {Array.<number>} point
	   * @param {boolean} [clamp=false]
	   * @return {Array.<number>}
	   */
	  pointToData: function (point, clamp) {
	    var coord = this.pointToCoord(point);
	    return [this._radiusAxis.radiusToData(coord[0], clamp), this._angleAxis.angleToData(coord[1], clamp)];
	  },

	  /**
	   * Convert a (x, y) point to (radius, angle) coord
	   * @param {Array.<number>} point
	   * @return {Array.<number>}
	   */
	  pointToCoord: function (point) {
	    var dx = point[0] - this.cx;
	    var dy = point[1] - this.cy;
	    var angleAxis = this.getAngleAxis();
	    var extent = angleAxis.getExtent();
	    var minAngle = Math.min(extent[0], extent[1]);
	    var maxAngle = Math.max(extent[0], extent[1]); // Fix fixed extent in polarCreator
	    // FIXME

	    angleAxis.inverse ? minAngle = maxAngle - 360 : maxAngle = minAngle + 360;
	    var radius = Math.sqrt(dx * dx + dy * dy);
	    dx /= radius;
	    dy /= radius;
	    var radian = Math.atan2(-dy, dx) / Math.PI * 180; // move to angleExtent

	    var dir = radian < minAngle ? 1 : -1;

	    while (radian < minAngle || radian > maxAngle) {
	      radian += dir * 360;
	    }

	    return [radius, radian];
	  },

	  /**
	   * Convert a (radius, angle) coord to (x, y) point
	   * @param {Array.<number>} coord
	   * @return {Array.<number>}
	   */
	  coordToPoint: function (coord) {
	    var radius = coord[0];
	    var radian = coord[1] / 180 * Math.PI;
	    var x = Math.cos(radian) * radius + this.cx; // Inverse the y

	    var y = -Math.sin(radian) * radius + this.cy;
	    return [x, y];
	  }
	};
	var _default = Polar;
	module.exports = _default;

/***/ },
/* 511 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var Axis = __webpack_require__(277);

	function RadiusAxis(scale, radiusExtent) {
	  Axis.call(this, 'radius', scale, radiusExtent);
	  /**
	   * Axis type
	   *  - 'category'
	   *  - 'value'
	   *  - 'time'
	   *  - 'log'
	   * @type {string}
	   */

	  this.type = 'category';
	}

	RadiusAxis.prototype = {
	  constructor: RadiusAxis,

	  /**
	   * @override
	   */
	  pointToData: function (point, clamp) {
	    return this.polar.pointToData(point, clamp)[this.dim === 'radius' ? 0 : 1];
	  },
	  dataToRadius: Axis.prototype.dataToCoord,
	  radiusToData: Axis.prototype.coordToData
	};
	zrUtil.inherits(RadiusAxis, Axis);
	var _default = RadiusAxis;
	module.exports = _default;

/***/ },
/* 512 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var Axis = __webpack_require__(277);

	function AngleAxis(scale, angleExtent) {
	  angleExtent = angleExtent || [0, 360];
	  Axis.call(this, 'angle', scale, angleExtent);
	  /**
	   * Axis type
	   *  - 'category'
	   *  - 'value'
	   *  - 'time'
	   *  - 'log'
	   * @type {string}
	   */

	  this.type = 'category';
	}

	AngleAxis.prototype = {
	  constructor: AngleAxis,

	  /**
	   * @override
	   */
	  pointToData: function (point, clamp) {
	    return this.polar.pointToData(point, clamp)[this.dim === 'radius' ? 0 : 1];
	  },
	  dataToAngle: Axis.prototype.dataToCoord,
	  angleToData: Axis.prototype.coordToData
	};
	zrUtil.inherits(AngleAxis, Axis);
	var _default = AngleAxis;
	module.exports = _default;

/***/ },
/* 513 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	__webpack_require__(514);

	var _default = echarts.extendComponentModel({
	  type: 'polar',
	  dependencies: ['polarAxis', 'angleAxis'],

	  /**
	   * @type {module:echarts/coord/polar/Polar}
	   */
	  coordinateSystem: null,

	  /**
	   * @param {string} axisType
	   * @return {module:echarts/coord/polar/AxisModel}
	   */
	  findAxisModel: function (axisType) {
	    var foundAxisModel;
	    var ecModel = this.ecModel;
	    ecModel.eachComponent(axisType, function (axisModel) {
	      if (axisModel.getCoordSysModel() === this) {
	        foundAxisModel = axisModel;
	      }
	    }, this);
	    return foundAxisModel;
	  },
	  defaultOption: {
	    zlevel: 0,
	    z: 0,
	    center: ['50%', '50%'],
	    radius: '80%'
	  }
	});

	module.exports = _default;

/***/ },
/* 514 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var ComponentModel = __webpack_require__(245);

	var axisModelCreator = __webpack_require__(299);

	var axisModelCommonMixin = __webpack_require__(275);

	var PolarAxisModel = ComponentModel.extend({
	  type: 'polarAxis',

	  /**
	   * @type {module:echarts/coord/polar/AngleAxis|module:echarts/coord/polar/RadiusAxis}
	   */
	  axis: null,

	  /**
	   * @override
	   */
	  getCoordSysModel: function () {
	    return this.ecModel.queryComponents({
	      mainType: 'polar',
	      index: this.option.polarIndex,
	      id: this.option.polarId
	    })[0];
	  }
	});
	zrUtil.merge(PolarAxisModel.prototype, axisModelCommonMixin);
	var polarAxisDefaultExtendedOption = {
	  angle: {
	    // polarIndex: 0,
	    // polarId: '',
	    startAngle: 90,
	    clockwise: true,
	    splitNumber: 12,
	    axisLabel: {
	      rotate: false
	    }
	  },
	  radius: {
	    // polarIndex: 0,
	    // polarId: '',
	    splitNumber: 5
	  }
	};

	function getAxisType(axisDim, option) {
	  // Default axis with data is category axis
	  return option.type || (option.data ? 'category' : 'value');
	}

	axisModelCreator('angle', PolarAxisModel, getAxisType, polarAxisDefaultExtendedOption.angle);
	axisModelCreator('radius', PolarAxisModel, getAxisType, polarAxisDefaultExtendedOption.radius);

/***/ },
/* 515 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(509);

	__webpack_require__(516);

/***/ },
/* 516 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var graphic = __webpack_require__(212);

	var Model = __webpack_require__(206);

	var AxisView = __webpack_require__(304);

	var elementList = ['axisLine', 'axisLabel', 'axisTick', 'splitLine', 'splitArea'];

	function getAxisLineShape(polar, rExtent, angle) {
	  rExtent[1] > rExtent[0] && (rExtent = rExtent.slice().reverse());
	  var start = polar.coordToPoint([rExtent[0], angle]);
	  var end = polar.coordToPoint([rExtent[1], angle]);
	  return {
	    x1: start[0],
	    y1: start[1],
	    x2: end[0],
	    y2: end[1]
	  };
	}

	function getRadiusIdx(polar) {
	  var radiusAxis = polar.getRadiusAxis();
	  return radiusAxis.inverse ? 0 : 1;
	}

	var _default = AxisView.extend({
	  type: 'angleAxis',
	  axisPointerClass: 'PolarAxisPointer',
	  render: function (angleAxisModel, ecModel) {
	    this.group.removeAll();

	    if (!angleAxisModel.get('show')) {
	      return;
	    }

	    var angleAxis = angleAxisModel.axis;
	    var polar = angleAxis.polar;
	    var radiusExtent = polar.getRadiusAxis().getExtent();
	    var ticksAngles = angleAxis.getTicksCoords();

	    if (angleAxis.type !== 'category') {
	      // Remove the last tick which will overlap the first tick
	      ticksAngles.pop();
	    }

	    zrUtil.each(elementList, function (name) {
	      if (angleAxisModel.get(name + '.show') && (!angleAxis.scale.isBlank() || name === 'axisLine')) {
	        this['_' + name](angleAxisModel, polar, ticksAngles, radiusExtent);
	      }
	    }, this);
	  },

	  /**
	   * @private
	   */
	  _axisLine: function (angleAxisModel, polar, ticksAngles, radiusExtent) {
	    var lineStyleModel = angleAxisModel.getModel('axisLine.lineStyle');
	    var circle = new graphic.Circle({
	      shape: {
	        cx: polar.cx,
	        cy: polar.cy,
	        r: radiusExtent[getRadiusIdx(polar)]
	      },
	      style: lineStyleModel.getLineStyle(),
	      z2: 1,
	      silent: true
	    });
	    circle.style.fill = null;
	    this.group.add(circle);
	  },

	  /**
	   * @private
	   */
	  _axisTick: function (angleAxisModel, polar, ticksAngles, radiusExtent) {
	    var tickModel = angleAxisModel.getModel('axisTick');
	    var tickLen = (tickModel.get('inside') ? -1 : 1) * tickModel.get('length');
	    var radius = radiusExtent[getRadiusIdx(polar)];
	    var lines = zrUtil.map(ticksAngles, function (tickAngle) {
	      return new graphic.Line({
	        shape: getAxisLineShape(polar, [radius, radius + tickLen], tickAngle)
	      });
	    });
	    this.group.add(graphic.mergePath(lines, {
	      style: zrUtil.defaults(tickModel.getModel('lineStyle').getLineStyle(), {
	        stroke: angleAxisModel.get('axisLine.lineStyle.color')
	      })
	    }));
	  },

	  /**
	   * @private
	   */
	  _axisLabel: function (angleAxisModel, polar, ticksAngles, radiusExtent) {
	    var axis = angleAxisModel.axis;
	    var categoryData = angleAxisModel.get('data');
	    var labelModel = angleAxisModel.getModel('axisLabel');
	    var labels = angleAxisModel.getFormattedLabels();
	    var labelMargin = labelModel.get('margin');
	    var labelsAngles = axis.getLabelsCoords(); // Use length of ticksAngles because it may remove the last tick to avoid overlapping

	    for (var i = 0; i < ticksAngles.length; i++) {
	      var r = radiusExtent[getRadiusIdx(polar)];
	      var p = polar.coordToPoint([r + labelMargin, labelsAngles[i]]);
	      var cx = polar.cx;
	      var cy = polar.cy;
	      var labelTextAlign = Math.abs(p[0] - cx) / r < 0.3 ? 'center' : p[0] > cx ? 'left' : 'right';
	      var labelTextVerticalAlign = Math.abs(p[1] - cy) / r < 0.3 ? 'middle' : p[1] > cy ? 'top' : 'bottom';

	      if (categoryData && categoryData[i] && categoryData[i].textStyle) {
	        labelModel = new Model(categoryData[i].textStyle, labelModel, labelModel.ecModel);
	      }

	      var textEl = new graphic.Text({
	        silent: true
	      });
	      this.group.add(textEl);
	      graphic.setTextStyle(textEl.style, labelModel, {
	        x: p[0],
	        y: p[1],
	        textFill: labelModel.getTextColor() || angleAxisModel.get('axisLine.lineStyle.color'),
	        text: labels[i],
	        textAlign: labelTextAlign,
	        textVerticalAlign: labelTextVerticalAlign
	      });
	    }
	  },

	  /**
	   * @private
	   */
	  _splitLine: function (angleAxisModel, polar, ticksAngles, radiusExtent) {
	    var splitLineModel = angleAxisModel.getModel('splitLine');
	    var lineStyleModel = splitLineModel.getModel('lineStyle');
	    var lineColors = lineStyleModel.get('color');
	    var lineCount = 0;
	    lineColors = lineColors instanceof Array ? lineColors : [lineColors];
	    var splitLines = [];

	    for (var i = 0; i < ticksAngles.length; i++) {
	      var colorIndex = lineCount++ % lineColors.length;
	      splitLines[colorIndex] = splitLines[colorIndex] || [];
	      splitLines[colorIndex].push(new graphic.Line({
	        shape: getAxisLineShape(polar, radiusExtent, ticksAngles[i])
	      }));
	    } // Simple optimization
	    // Batching the lines if color are the same


	    for (var i = 0; i < splitLines.length; i++) {
	      this.group.add(graphic.mergePath(splitLines[i], {
	        style: zrUtil.defaults({
	          stroke: lineColors[i % lineColors.length]
	        }, lineStyleModel.getLineStyle()),
	        silent: true,
	        z: angleAxisModel.get('z')
	      }));
	    }
	  },

	  /**
	   * @private
	   */
	  _splitArea: function (angleAxisModel, polar, ticksAngles, radiusExtent) {
	    var splitAreaModel = angleAxisModel.getModel('splitArea');
	    var areaStyleModel = splitAreaModel.getModel('areaStyle');
	    var areaColors = areaStyleModel.get('color');
	    var lineCount = 0;
	    areaColors = areaColors instanceof Array ? areaColors : [areaColors];
	    var splitAreas = [];
	    var RADIAN = Math.PI / 180;
	    var prevAngle = -ticksAngles[0] * RADIAN;
	    var r0 = Math.min(radiusExtent[0], radiusExtent[1]);
	    var r1 = Math.max(radiusExtent[0], radiusExtent[1]);
	    var clockwise = angleAxisModel.get('clockwise');

	    for (var i = 1; i < ticksAngles.length; i++) {
	      var colorIndex = lineCount++ % areaColors.length;
	      splitAreas[colorIndex] = splitAreas[colorIndex] || [];
	      splitAreas[colorIndex].push(new graphic.Sector({
	        shape: {
	          cx: polar.cx,
	          cy: polar.cy,
	          r0: r0,
	          r: r1,
	          startAngle: prevAngle,
	          endAngle: -ticksAngles[i] * RADIAN,
	          clockwise: clockwise
	        },
	        silent: true
	      }));
	      prevAngle = -ticksAngles[i] * RADIAN;
	    } // Simple optimization
	    // Batching the lines if color are the same


	    for (var i = 0; i < splitAreas.length; i++) {
	      this.group.add(graphic.mergePath(splitAreas[i], {
	        style: zrUtil.defaults({
	          fill: areaColors[i % areaColors.length]
	        }, areaStyleModel.getAreaStyle()),
	        silent: true
	      }));
	    }
	  }
	});

	module.exports = _default;

/***/ },
/* 517 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(509);

	__webpack_require__(518);

/***/ },
/* 518 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var graphic = __webpack_require__(212);

	var AxisBuilder = __webpack_require__(303);

	var AxisView = __webpack_require__(304);

	var axisBuilderAttrs = ['axisLine', 'axisTickLabel', 'axisName'];
	var selfBuilderAttrs = ['splitLine', 'splitArea'];

	var _default = AxisView.extend({
	  type: 'radiusAxis',
	  axisPointerClass: 'PolarAxisPointer',
	  render: function (radiusAxisModel, ecModel) {
	    this.group.removeAll();

	    if (!radiusAxisModel.get('show')) {
	      return;
	    }

	    var radiusAxis = radiusAxisModel.axis;
	    var polar = radiusAxis.polar;
	    var angleAxis = polar.getAngleAxis();
	    var ticksCoords = radiusAxis.getTicksCoords();
	    var axisAngle = angleAxis.getExtent()[0];
	    var radiusExtent = radiusAxis.getExtent();
	    var layout = layoutAxis(polar, radiusAxisModel, axisAngle);
	    var axisBuilder = new AxisBuilder(radiusAxisModel, layout);
	    zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);
	    this.group.add(axisBuilder.getGroup());
	    zrUtil.each(selfBuilderAttrs, function (name) {
	      if (radiusAxisModel.get(name + '.show') && !radiusAxis.scale.isBlank()) {
	        this['_' + name](radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords);
	      }
	    }, this);
	  },

	  /**
	   * @private
	   */
	  _splitLine: function (radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords) {
	    var splitLineModel = radiusAxisModel.getModel('splitLine');
	    var lineStyleModel = splitLineModel.getModel('lineStyle');
	    var lineColors = lineStyleModel.get('color');
	    var lineCount = 0;
	    lineColors = lineColors instanceof Array ? lineColors : [lineColors];
	    var splitLines = [];

	    for (var i = 0; i < ticksCoords.length; i++) {
	      var colorIndex = lineCount++ % lineColors.length;
	      splitLines[colorIndex] = splitLines[colorIndex] || [];
	      splitLines[colorIndex].push(new graphic.Circle({
	        shape: {
	          cx: polar.cx,
	          cy: polar.cy,
	          r: ticksCoords[i]
	        },
	        silent: true
	      }));
	    } // Simple optimization
	    // Batching the lines if color are the same


	    for (var i = 0; i < splitLines.length; i++) {
	      this.group.add(graphic.mergePath(splitLines[i], {
	        style: zrUtil.defaults({
	          stroke: lineColors[i % lineColors.length],
	          fill: null
	        }, lineStyleModel.getLineStyle()),
	        silent: true
	      }));
	    }
	  },

	  /**
	   * @private
	   */
	  _splitArea: function (radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords) {
	    var splitAreaModel = radiusAxisModel.getModel('splitArea');
	    var areaStyleModel = splitAreaModel.getModel('areaStyle');
	    var areaColors = areaStyleModel.get('color');
	    var lineCount = 0;
	    areaColors = areaColors instanceof Array ? areaColors : [areaColors];
	    var splitAreas = [];
	    var prevRadius = ticksCoords[0];

	    for (var i = 1; i < ticksCoords.length; i++) {
	      var colorIndex = lineCount++ % areaColors.length;
	      splitAreas[colorIndex] = splitAreas[colorIndex] || [];
	      splitAreas[colorIndex].push(new graphic.Sector({
	        shape: {
	          cx: polar.cx,
	          cy: polar.cy,
	          r0: prevRadius,
	          r: ticksCoords[i],
	          startAngle: 0,
	          endAngle: Math.PI * 2
	        },
	        silent: true
	      }));
	      prevRadius = ticksCoords[i];
	    } // Simple optimization
	    // Batching the lines if color are the same


	    for (var i = 0; i < splitAreas.length; i++) {
	      this.group.add(graphic.mergePath(splitAreas[i], {
	        style: zrUtil.defaults({
	          fill: areaColors[i % areaColors.length]
	        }, areaStyleModel.getAreaStyle()),
	        silent: true
	      }));
	    }
	  }
	});
	/**
	 * @inner
	 */


	function layoutAxis(polar, radiusAxisModel, axisAngle) {
	  return {
	    position: [polar.cx, polar.cy],
	    rotation: axisAngle / 180 * Math.PI,
	    labelDirection: -1,
	    tickDirection: -1,
	    nameDirection: 1,
	    labelRotate: radiusAxisModel.getModel('axisLabel').get('rotate'),
	    // Over splitLine and splitArea
	    z2: 1
	  };
	}

	module.exports = _default;

/***/ },
/* 519 */
/***/ function(module, exports, __webpack_require__) {

	var formatUtil = __webpack_require__(204);

	var BaseAxisPointer = __webpack_require__(478);

	var graphic = __webpack_require__(212);

	var viewHelper = __webpack_require__(479);

	var matrix = __webpack_require__(175);

	var AxisBuilder = __webpack_require__(303);

	var AxisView = __webpack_require__(304);

	var PolarAxisPointer = BaseAxisPointer.extend({
	  /**
	   * @override
	   */
	  makeElOption: function (elOption, value, axisModel, axisPointerModel, api) {
	    var axis = axisModel.axis;

	    if (axis.dim === 'angle') {
	      this.animationThreshold = Math.PI / 18;
	    }

	    var polar = axis.polar;
	    var otherAxis = polar.getOtherAxis(axis);
	    var otherExtent = otherAxis.getExtent();
	    var coordValue;
	    coordValue = axis['dataTo' + formatUtil.capitalFirst(axis.dim)](value);
	    var axisPointerType = axisPointerModel.get('type');

	    if (axisPointerType && axisPointerType !== 'none') {
	      var elStyle = viewHelper.buildElStyle(axisPointerModel);
	      var pointerOption = pointerShapeBuilder[axisPointerType](axis, polar, coordValue, otherExtent, elStyle);
	      pointerOption.style = elStyle;
	      elOption.graphicKey = pointerOption.type;
	      elOption.pointer = pointerOption;
	    }

	    var labelMargin = axisPointerModel.get('label.margin');
	    var labelPos = getLabelPosition(value, axisModel, axisPointerModel, polar, labelMargin);
	    viewHelper.buildLabelElOption(elOption, axisModel, axisPointerModel, api, labelPos);
	  } // Do not support handle, utill any user requires it.

	});

	function getLabelPosition(value, axisModel, axisPointerModel, polar, labelMargin) {
	  var axis = axisModel.axis;
	  var coord = axis.dataToCoord(value);
	  var axisAngle = polar.getAngleAxis().getExtent()[0];
	  axisAngle = axisAngle / 180 * Math.PI;
	  var radiusExtent = polar.getRadiusAxis().getExtent();
	  var position;
	  var align;
	  var verticalAlign;

	  if (axis.dim === 'radius') {
	    var transform = matrix.create();
	    matrix.rotate(transform, transform, axisAngle);
	    matrix.translate(transform, transform, [polar.cx, polar.cy]);
	    position = graphic.applyTransform([coord, -labelMargin], transform);
	    var labelRotation = axisModel.getModel('axisLabel').get('rotate') || 0;
	    var labelLayout = AxisBuilder.innerTextLayout(axisAngle, labelRotation * Math.PI / 180, -1);
	    align = labelLayout.textAlign;
	    verticalAlign = labelLayout.textVerticalAlign;
	  } else {
	    // angle axis
	    var r = radiusExtent[1];
	    position = polar.coordToPoint([r + labelMargin, coord]);
	    var cx = polar.cx;
	    var cy = polar.cy;
	    align = Math.abs(position[0] - cx) / r < 0.3 ? 'center' : position[0] > cx ? 'left' : 'right';
	    verticalAlign = Math.abs(position[1] - cy) / r < 0.3 ? 'middle' : position[1] > cy ? 'top' : 'bottom';
	  }

	  return {
	    position: position,
	    align: align,
	    verticalAlign: verticalAlign
	  };
	}

	var pointerShapeBuilder = {
	  line: function (axis, polar, coordValue, otherExtent, elStyle) {
	    return axis.dim === 'angle' ? {
	      type: 'Line',
	      shape: viewHelper.makeLineShape(polar.coordToPoint([otherExtent[0], coordValue]), polar.coordToPoint([otherExtent[1], coordValue]))
	    } : {
	      type: 'Circle',
	      shape: {
	        cx: polar.cx,
	        cy: polar.cy,
	        r: coordValue
	      }
	    };
	  },
	  shadow: function (axis, polar, coordValue, otherExtent, elStyle) {
	    var bandWidth = axis.getBandWidth();
	    var radian = Math.PI / 180;
	    return axis.dim === 'angle' ? {
	      type: 'Sector',
	      shape: viewHelper.makeSectorShape(polar.cx, polar.cy, otherExtent[0], otherExtent[1], // In ECharts y is negative if angle is positive
	      (-coordValue - bandWidth / 2) * radian, (-coordValue + bandWidth / 2) * radian)
	    } : {
	      type: 'Sector',
	      shape: viewHelper.makeSectorShape(polar.cx, polar.cy, coordValue - bandWidth / 2, coordValue + bandWidth / 2, 0, Math.PI * 2)
	    };
	  }
	};
	AxisView.registerAxisPointerClass('PolarAxisPointer', PolarAxisPointer);
	var _default = PolarAxisPointer;
	module.exports = _default;

/***/ },
/* 520 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var zrUtil = __webpack_require__(166);

	__webpack_require__(521);

	__webpack_require__(339);

	__webpack_require__(522);

	__webpack_require__(352);

	function makeAction(method, actionInfo) {
	  actionInfo.update = 'updateView';
	  echarts.registerAction(actionInfo, function (payload, ecModel) {
	    var selected = {};
	    ecModel.eachComponent({
	      mainType: 'geo',
	      query: payload
	    }, function (geoModel) {
	      geoModel[method](payload.name);
	      var geo = geoModel.coordinateSystem;
	      zrUtil.each(geo.regions, function (region) {
	        selected[region.name] = geoModel.isSelected(region.name) || false;
	      });
	    });
	    return {
	      selected: selected,
	      name: payload.name
	    };
	  });
	}

	makeAction('toggleSelected', {
	  type: 'geoToggleSelect',
	  event: 'geoselectchanged'
	});
	makeAction('select', {
	  type: 'geoSelect',
	  event: 'geoselected'
	});
	makeAction('unSelect', {
	  type: 'geoUnSelect',
	  event: 'geounselected'
	});

/***/ },
/* 521 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var modelUtil = __webpack_require__(203);

	var ComponentModel = __webpack_require__(245);

	var Model = __webpack_require__(206);

	var selectableMixin = __webpack_require__(316);

	var geoCreator = __webpack_require__(339);

	var GeoModel = ComponentModel.extend({
	  type: 'geo',

	  /**
	   * @type {module:echarts/coord/geo/Geo}
	   */
	  coordinateSystem: null,
	  layoutMode: 'box',
	  init: function (option) {
	    ComponentModel.prototype.init.apply(this, arguments); // Default label emphasis `show`

	    modelUtil.defaultEmphasis(option.label, ['show']);
	  },
	  optionUpdated: function () {
	    var option = this.option;
	    var self = this;
	    option.regions = geoCreator.getFilledRegions(option.regions, option.map, option.nameMap);
	    this._optionModelMap = zrUtil.reduce(option.regions || [], function (optionModelMap, regionOpt) {
	      if (regionOpt.name) {
	        optionModelMap.set(regionOpt.name, new Model(regionOpt, self));
	      }

	      return optionModelMap;
	    }, zrUtil.createHashMap());
	    this.updateSelectedMap(option.regions);
	  },
	  defaultOption: {
	    zlevel: 0,
	    z: 0,
	    show: true,
	    left: 'center',
	    top: 'center',
	    // width:,
	    // height:,
	    // right
	    // bottom
	    // Aspect is width / height. Inited to be geoJson bbox aspect
	    // This parameter is used for scale this aspect
	    aspectScale: 0.75,
	    ///// Layout with center and size
	    // If you wan't to put map in a fixed size box with right aspect ratio
	    // This two properties may more conveninet
	    // layoutCenter: [50%, 50%]
	    // layoutSize: 100
	    silent: false,
	    // Map type
	    map: '',
	    // Define left-top, right-bottom coords to control view
	    // For example, [ [180, 90], [-180, -90] ]
	    boundingCoords: null,
	    // Default on center of map
	    center: null,
	    zoom: 1,
	    scaleLimit: null,
	    // selectedMode: false
	    label: {
	      normal: {
	        show: false,
	        color: '#000'
	      },
	      emphasis: {
	        show: true,
	        color: 'rgb(100,0,0)'
	      }
	    },
	    itemStyle: {
	      normal: {
	        // color: 各异,
	        borderWidth: 0.5,
	        borderColor: '#444',
	        color: '#eee'
	      },
	      emphasis: {
	        // 也是选中样式
	        color: 'rgba(255,215,0,0.8)'
	      }
	    },
	    regions: []
	  },

	  /**
	   * Get model of region
	   * @param  {string} name
	   * @return {module:echarts/model/Model}
	   */
	  getRegionModel: function (name) {
	    return this._optionModelMap.get(name) || new Model(null, this, this.ecModel);
	  },

	  /**
	   * Format label
	   * @param {string} name Region name
	   * @param {string} [status='normal'] 'normal' or 'emphasis'
	   * @return {string}
	   */
	  getFormattedLabel: function (name, status) {
	    var regionModel = this.getRegionModel(name);
	    var formatter = regionModel.get('label.' + status + '.formatter');
	    var params = {
	      name: name
	    };

	    if (typeof formatter === 'function') {
	      params.status = status;
	      return formatter(params);
	    } else if (typeof formatter === 'string') {
	      return formatter.replace('{a}', name != null ? name : '');
	    }
	  },
	  setZoom: function (zoom) {
	    this.option.zoom = zoom;
	  },
	  setCenter: function (center) {
	    this.option.center = center;
	  }
	});
	zrUtil.mixin(GeoModel, selectableMixin);
	var _default = GeoModel;
	module.exports = _default;

/***/ },
/* 522 */
/***/ function(module, exports, __webpack_require__) {

	var MapDraw = __webpack_require__(347);

	var echarts = __webpack_require__(161);

	var _default = echarts.extendComponentView({
	  type: 'geo',
	  init: function (ecModel, api) {
	    var mapDraw = new MapDraw(api, true);
	    this._mapDraw = mapDraw;
	    this.group.add(mapDraw.group);
	  },
	  render: function (geoModel, ecModel, api, payload) {
	    // Not render if it is an toggleSelect action from self
	    if (payload && payload.type === 'geoToggleSelect' && payload.from === this.uid) {
	      return;
	    }

	    var mapDraw = this._mapDraw;

	    if (geoModel.get('show')) {
	      mapDraw.draw(geoModel, ecModel, api, this, payload);
	    } else {
	      this._mapDraw.group.removeAll();
	    }

	    this.group.silent = geoModel.get('silent');
	  },
	  dispose: function () {
	    this._mapDraw && this._mapDraw.remove();
	  }
	});

	module.exports = _default;

/***/ },
/* 523 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var preprocessor = __webpack_require__(524);

	__webpack_require__(525);

	__webpack_require__(529);

	__webpack_require__(530);

	__webpack_require__(531);

	__webpack_require__(532);

	/**
	 * Brush component entry
	 */
	echarts.registerPreprocessor(preprocessor);

/***/ },
/* 524 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var DEFAULT_TOOLBOX_BTNS = ['rect', 'polygon', 'keep', 'clear'];

	function _default(option, isNew) {
	  var brushComponents = option && option.brush;

	  if (!zrUtil.isArray(brushComponents)) {
	    brushComponents = brushComponents ? [brushComponents] : [];
	  }

	  if (!brushComponents.length) {
	    return;
	  }

	  var brushComponentSpecifiedBtns = [];
	  zrUtil.each(brushComponents, function (brushOpt) {
	    var tbs = brushOpt.hasOwnProperty('toolbox') ? brushOpt.toolbox : [];

	    if (tbs instanceof Array) {
	      brushComponentSpecifiedBtns = brushComponentSpecifiedBtns.concat(tbs);
	    }
	  });
	  var toolbox = option && option.toolbox;

	  if (zrUtil.isArray(toolbox)) {
	    toolbox = toolbox[0];
	  }

	  if (!toolbox) {
	    toolbox = {
	      feature: {}
	    };
	    option.toolbox = [toolbox];
	  }

	  var toolboxFeature = toolbox.feature || (toolbox.feature = {});
	  var toolboxBrush = toolboxFeature.brush || (toolboxFeature.brush = {});
	  var brushTypes = toolboxBrush.type || (toolboxBrush.type = []);
	  brushTypes.push.apply(brushTypes, brushComponentSpecifiedBtns);
	  removeDuplicate(brushTypes);

	  if (isNew && !brushTypes.length) {
	    brushTypes.push.apply(brushTypes, DEFAULT_TOOLBOX_BTNS);
	  }
	}

	function removeDuplicate(arr) {
	  var map = {};
	  zrUtil.each(arr, function (val) {
	    map[val] = 1;
	  });
	  arr.length = 0;
	  zrUtil.each(map, function (flag, val) {
	    arr.push(val);
	  });
	}

	module.exports = _default;

/***/ },
/* 525 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var zrUtil = __webpack_require__(166);

	var BoundingRect = __webpack_require__(184);

	var visualSolution = __webpack_require__(526);

	var selector = __webpack_require__(527);

	var throttleUtil = __webpack_require__(259);

	var BrushTargetManager = __webpack_require__(528);

	var STATE_LIST = ['inBrush', 'outOfBrush'];
	var DISPATCH_METHOD = '__ecBrushSelect';
	var DISPATCH_FLAG = '__ecInBrushSelectEvent';
	var PRIORITY_BRUSH = echarts.PRIORITY.VISUAL.BRUSH;
	/**
	 * Layout for visual, the priority higher than other layout, and before brush visual.
	 */

	echarts.registerLayout(PRIORITY_BRUSH, function (ecModel, api, payload) {
	  ecModel.eachComponent({
	    mainType: 'brush'
	  }, function (brushModel) {
	    payload && payload.type === 'takeGlobalCursor' && brushModel.setBrushOption(payload.key === 'brush' ? payload.brushOption : {
	      brushType: false
	    });
	    var brushTargetManager = brushModel.brushTargetManager = new BrushTargetManager(brushModel.option, ecModel);
	    brushTargetManager.setInputRanges(brushModel.areas, ecModel);
	  });
	});
	/**
	 * Register the visual encoding if this modules required.
	 */

	echarts.registerVisual(PRIORITY_BRUSH, function (ecModel, api, payload) {
	  var brushSelected = [];
	  var throttleType;
	  var throttleDelay;
	  ecModel.eachComponent({
	    mainType: 'brush'
	  }, function (brushModel, brushIndex) {
	    var thisBrushSelected = {
	      brushId: brushModel.id,
	      brushIndex: brushIndex,
	      brushName: brushModel.name,
	      areas: zrUtil.clone(brushModel.areas),
	      selected: []
	    }; // Every brush component exists in event params, convenient
	    // for user to find by index.

	    brushSelected.push(thisBrushSelected);
	    var brushOption = brushModel.option;
	    var brushLink = brushOption.brushLink;
	    var linkedSeriesMap = [];
	    var selectedDataIndexForLink = [];
	    var rangeInfoBySeries = [];
	    var hasBrushExists = 0;

	    if (!brushIndex) {
	      // Only the first throttle setting works.
	      throttleType = brushOption.throttleType;
	      throttleDelay = brushOption.throttleDelay;
	    } // Add boundingRect and selectors to range.


	    var areas = zrUtil.map(brushModel.areas, function (area) {
	      return bindSelector(zrUtil.defaults({
	        boundingRect: boundingRectBuilders[area.brushType](area)
	      }, area));
	    });
	    var visualMappings = visualSolution.createVisualMappings(brushModel.option, STATE_LIST, function (mappingOption) {
	      mappingOption.mappingMethod = 'fixed';
	    });
	    zrUtil.isArray(brushLink) && zrUtil.each(brushLink, function (seriesIndex) {
	      linkedSeriesMap[seriesIndex] = 1;
	    });

	    function linkOthers(seriesIndex) {
	      return brushLink === 'all' || linkedSeriesMap[seriesIndex];
	    } // If no supported brush or no brush on the series,
	    // all visuals should be in original state.


	    function brushed(rangeInfoList) {
	      return !!rangeInfoList.length;
	    }
	    /**
	     * Logic for each series: (If the logic has to be modified one day, do it carefully!)
	     *
	     * ( brushed ┬ && ┬hasBrushExist ┬ && linkOthers  ) => StepA: ┬record, ┬ StepB: ┬visualByRecord.
	     *   !brushed┘    ├hasBrushExist ┤                            └nothing,┘        ├visualByRecord.
	     *                └!hasBrushExist┘                                              └nothing.
	     * ( !brushed  && ┬hasBrushExist ┬ && linkOthers  ) => StepA:  nothing,  StepB: ┬visualByRecord.
	     *                └!hasBrushExist┘                                              └nothing.
	     * ( brushed ┬ &&                     !linkOthers ) => StepA:  nothing,  StepB: ┬visualByCheck.
	     *   !brushed┘                                                                  └nothing.
	     * ( !brushed  &&                     !linkOthers ) => StepA:  nothing,  StepB:  nothing.
	     */
	    // Step A


	    ecModel.eachSeries(function (seriesModel, seriesIndex) {
	      var rangeInfoList = rangeInfoBySeries[seriesIndex] = [];
	      seriesModel.subType === 'parallel' ? stepAParallel(seriesModel, seriesIndex, rangeInfoList) : stepAOthers(seriesModel, seriesIndex, rangeInfoList);
	    });

	    function stepAParallel(seriesModel, seriesIndex) {
	      var coordSys = seriesModel.coordinateSystem;
	      hasBrushExists |= coordSys.hasAxisBrushed();
	      linkOthers(seriesIndex) && coordSys.eachActiveState(seriesModel.getData(), function (activeState, dataIndex) {
	        activeState === 'active' && (selectedDataIndexForLink[dataIndex] = 1);
	      });
	    }

	    function stepAOthers(seriesModel, seriesIndex, rangeInfoList) {
	      var selectorsByBrushType = getSelectorsByBrushType(seriesModel);

	      if (!selectorsByBrushType || brushModelNotControll(brushModel, seriesIndex)) {
	        return;
	      }

	      zrUtil.each(areas, function (area) {
	        selectorsByBrushType[area.brushType] && brushModel.brushTargetManager.controlSeries(area, seriesModel, ecModel) && rangeInfoList.push(area);
	        hasBrushExists |= brushed(rangeInfoList);
	      });

	      if (linkOthers(seriesIndex) && brushed(rangeInfoList)) {
	        var data = seriesModel.getData();
	        data.each(function (dataIndex) {
	          if (checkInRange(selectorsByBrushType, rangeInfoList, data, dataIndex)) {
	            selectedDataIndexForLink[dataIndex] = 1;
	          }
	        });
	      }
	    } // Step B


	    ecModel.eachSeries(function (seriesModel, seriesIndex) {
	      var seriesBrushSelected = {
	        seriesId: seriesModel.id,
	        seriesIndex: seriesIndex,
	        seriesName: seriesModel.name,
	        dataIndex: []
	      }; // Every series exists in event params, convenient
	      // for user to find series by seriesIndex.

	      thisBrushSelected.selected.push(seriesBrushSelected);
	      var selectorsByBrushType = getSelectorsByBrushType(seriesModel);
	      var rangeInfoList = rangeInfoBySeries[seriesIndex];
	      var data = seriesModel.getData();
	      var getValueState = linkOthers(seriesIndex) ? function (dataIndex) {
	        return selectedDataIndexForLink[dataIndex] ? (seriesBrushSelected.dataIndex.push(data.getRawIndex(dataIndex)), 'inBrush') : 'outOfBrush';
	      } : function (dataIndex) {
	        return checkInRange(selectorsByBrushType, rangeInfoList, data, dataIndex) ? (seriesBrushSelected.dataIndex.push(data.getRawIndex(dataIndex)), 'inBrush') : 'outOfBrush';
	      }; // If no supported brush or no brush, all visuals are in original state.

	      (linkOthers(seriesIndex) ? hasBrushExists : brushed(rangeInfoList)) && visualSolution.applyVisual(STATE_LIST, visualMappings, data, getValueState);
	    });
	  });
	  dispatchAction(api, throttleType, throttleDelay, brushSelected, payload);
	});

	function dispatchAction(api, throttleType, throttleDelay, brushSelected, payload) {
	  // This event will not be triggered when `setOpion`, otherwise dead lock may
	  // triggered when do `setOption` in event listener, which we do not find
	  // satisfactory way to solve yet. Some considered resolutions:
	  // (a) Diff with prevoius selected data ant only trigger event when changed.
	  // But store previous data and diff precisely (i.e., not only by dataIndex, but
	  // also detect value changes in selected data) might bring complexity or fragility.
	  // (b) Use spectial param like `silent` to suppress event triggering.
	  // But such kind of volatile param may be weird in `setOption`.
	  if (!payload) {
	    return;
	  }

	  var zr = api.getZr();

	  if (zr[DISPATCH_FLAG]) {
	    return;
	  }

	  if (!zr[DISPATCH_METHOD]) {
	    zr[DISPATCH_METHOD] = doDispatch;
	  }

	  var fn = throttleUtil.createOrUpdate(zr, DISPATCH_METHOD, throttleDelay, throttleType);
	  fn(api, brushSelected);
	}

	function doDispatch(api, brushSelected) {
	  if (!api.isDisposed()) {
	    var zr = api.getZr();
	    zr[DISPATCH_FLAG] = true;
	    api.dispatchAction({
	      type: 'brushSelect',
	      batch: brushSelected
	    });
	    zr[DISPATCH_FLAG] = false;
	  }
	}

	function checkInRange(selectorsByBrushType, rangeInfoList, data, dataIndex) {
	  for (var i = 0, len = rangeInfoList.length; i < len; i++) {
	    var area = rangeInfoList[i];

	    if (selectorsByBrushType[area.brushType](dataIndex, data, area.selectors, area)) {
	      return true;
	    }
	  }
	}

	function getSelectorsByBrushType(seriesModel) {
	  var brushSelector = seriesModel.brushSelector;

	  if (zrUtil.isString(brushSelector)) {
	    var sels = [];
	    zrUtil.each(selector, function (selectorsByElementType, brushType) {
	      sels[brushType] = function (dataIndex, data, selectors, area) {
	        var itemLayout = data.getItemLayout(dataIndex);
	        return selectorsByElementType[brushSelector](itemLayout, selectors, area);
	      };
	    });
	    return sels;
	  } else if (zrUtil.isFunction(brushSelector)) {
	    var bSelector = {};
	    zrUtil.each(selector, function (sel, brushType) {
	      bSelector[brushType] = brushSelector;
	    });
	    return bSelector;
	  }

	  return brushSelector;
	}

	function brushModelNotControll(brushModel, seriesIndex) {
	  var seriesIndices = brushModel.option.seriesIndex;
	  return seriesIndices != null && seriesIndices !== 'all' && (zrUtil.isArray(seriesIndices) ? zrUtil.indexOf(seriesIndices, seriesIndex) < 0 : seriesIndex !== seriesIndices);
	}

	function bindSelector(area) {
	  var selectors = area.selectors = {};
	  zrUtil.each(selector[area.brushType], function (selFn, elType) {
	    // Do not use function binding or curry for performance.
	    selectors[elType] = function (itemLayout) {
	      return selFn(itemLayout, selectors, area);
	    };
	  });
	  return area;
	}

	var boundingRectBuilders = {
	  lineX: zrUtil.noop,
	  lineY: zrUtil.noop,
	  rect: function (area) {
	    return getBoundingRectFromMinMax(area.range);
	  },
	  polygon: function (area) {
	    var minMax;
	    var range = area.range;

	    for (var i = 0, len = range.length; i < len; i++) {
	      minMax = minMax || [[Infinity, -Infinity], [Infinity, -Infinity]];
	      var rg = range[i];
	      rg[0] < minMax[0][0] && (minMax[0][0] = rg[0]);
	      rg[0] > minMax[0][1] && (minMax[0][1] = rg[0]);
	      rg[1] < minMax[1][0] && (minMax[1][0] = rg[1]);
	      rg[1] > minMax[1][1] && (minMax[1][1] = rg[1]);
	    }

	    return minMax && getBoundingRectFromMinMax(minMax);
	  }
	};

	function getBoundingRectFromMinMax(minMax) {
	  return new BoundingRect(minMax[0][0], minMax[1][0], minMax[0][1] - minMax[0][0], minMax[1][1] - minMax[1][0]);
	}

/***/ },
/* 526 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var VisualMapping = __webpack_require__(377);

	/**
	 * @file Visual solution, for consistent option specification.
	 */
	var each = zrUtil.each;

	function hasKeys(obj) {
	  if (obj) {
	    for (var name in obj) {
	      if (obj.hasOwnProperty(name)) {
	        return true;
	      }
	    }
	  }
	}
	/**
	 * @param {Object} option
	 * @param {Array.<string>} stateList
	 * @param {Function} [supplementVisualOption]
	 * @return {Object} visualMappings <state, <visualType, module:echarts/visual/VisualMapping>>
	 */


	function createVisualMappings(option, stateList, supplementVisualOption) {
	  var visualMappings = {};
	  each(stateList, function (state) {
	    var mappings = visualMappings[state] = createMappings();
	    each(option[state], function (visualData, visualType) {
	      if (!VisualMapping.isValidType(visualType)) {
	        return;
	      }

	      var mappingOption = {
	        type: visualType,
	        visual: visualData
	      };
	      supplementVisualOption && supplementVisualOption(mappingOption, state);
	      mappings[visualType] = new VisualMapping(mappingOption); // Prepare a alpha for opacity, for some case that opacity
	      // is not supported, such as rendering using gradient color.

	      if (visualType === 'opacity') {
	        mappingOption = zrUtil.clone(mappingOption);
	        mappingOption.type = 'colorAlpha';
	        mappings.__hidden.__alphaForOpacity = new VisualMapping(mappingOption);
	      }
	    });
	  });
	  return visualMappings;

	  function createMappings() {
	    var Creater = function () {}; // Make sure hidden fields will not be visited by
	    // object iteration (with hasOwnProperty checking).


	    Creater.prototype.__hidden = Creater.prototype;
	    var obj = new Creater();
	    return obj;
	  }
	}
	/**
	 * @param {Object} thisOption
	 * @param {Object} newOption
	 * @param {Array.<string>} keys
	 */


	function replaceVisualOption(thisOption, newOption, keys) {
	  // Visual attributes merge is not supported, otherwise it
	  // brings overcomplicated merge logic. See #2853. So if
	  // newOption has anyone of these keys, all of these keys
	  // will be reset. Otherwise, all keys remain.
	  var has;
	  zrUtil.each(keys, function (key) {
	    if (newOption.hasOwnProperty(key) && hasKeys(newOption[key])) {
	      has = true;
	    }
	  });
	  has && zrUtil.each(keys, function (key) {
	    if (newOption.hasOwnProperty(key) && hasKeys(newOption[key])) {
	      thisOption[key] = zrUtil.clone(newOption[key]);
	    } else {
	      delete thisOption[key];
	    }
	  });
	}
	/**
	 * @param {Array.<string>} stateList
	 * @param {Object} visualMappings <state, Object.<visualType, module:echarts/visual/VisualMapping>>
	 * @param {module:echarts/data/List} list
	 * @param {Function} getValueState param: valueOrIndex, return: state.
	 * @param {object} [scope] Scope for getValueState
	 * @param {string} [dimension] Concrete dimension, if used.
	 */


	function applyVisual(stateList, visualMappings, data, getValueState, scope, dimension) {
	  var visualTypesMap = {};
	  zrUtil.each(stateList, function (state) {
	    var visualTypes = VisualMapping.prepareVisualTypes(visualMappings[state]);
	    visualTypesMap[state] = visualTypes;
	  });
	  var dataIndex;

	  function getVisual(key) {
	    return data.getItemVisual(dataIndex, key);
	  }

	  function setVisual(key, value) {
	    data.setItemVisual(dataIndex, key, value);
	  }

	  if (dimension == null) {
	    data.each(eachItem, true);
	  } else {
	    data.each([dimension], eachItem, true);
	  }

	  function eachItem(valueOrIndex, index) {
	    dataIndex = dimension == null ? valueOrIndex : index;
	    var rawDataItem = data.getRawDataItem(dataIndex); // Consider performance

	    if (rawDataItem && rawDataItem.visualMap === false) {
	      return;
	    }

	    var valueState = getValueState.call(scope, valueOrIndex);
	    var mappings = visualMappings[valueState];
	    var visualTypes = visualTypesMap[valueState];

	    for (var i = 0, len = visualTypes.length; i < len; i++) {
	      var type = visualTypes[i];
	      mappings[type] && mappings[type].applyVisual(valueOrIndex, getVisual, setVisual);
	    }
	  }
	}

	exports.createVisualMappings = createVisualMappings;
	exports.replaceVisualOption = replaceVisualOption;
	exports.applyVisual = applyVisual;

/***/ },
/* 527 */
/***/ function(module, exports, __webpack_require__) {

	var polygonContain = __webpack_require__(280);

	var BoundingRect = __webpack_require__(184);

	// Key of the first level is brushType: `line`, `rect`, `polygon`.
	// Key of the second level is chart element type: `point`, `rect`.
	// See moudule:echarts/component/helper/BrushController
	// function param:
	//      {Object} itemLayout fetch from data.getItemLayout(dataIndex)
	//      {Object} selectors {point: selector, rect: selector, ...}
	//      {Object} area {range: [[], [], ..], boudingRect}
	// function return:
	//      {boolean} Whether in the given brush.
	var selector = {
	  lineX: getLineSelectors(0),
	  lineY: getLineSelectors(1),
	  rect: {
	    point: function (itemLayout, selectors, area) {
	      return itemLayout && area.boundingRect.contain(itemLayout[0], itemLayout[1]);
	    },
	    rect: function (itemLayout, selectors, area) {
	      return itemLayout && area.boundingRect.intersect(itemLayout);
	    }
	  },
	  polygon: {
	    point: function (itemLayout, selectors, area) {
	      return itemLayout && area.boundingRect.contain(itemLayout[0], itemLayout[1]) && polygonContain.contain(area.range, itemLayout[0], itemLayout[1]);
	    },
	    rect: function (itemLayout, selectors, area) {
	      var points = area.range;

	      if (!itemLayout || points.length <= 1) {
	        return false;
	      }

	      var x = itemLayout.x;
	      var y = itemLayout.y;
	      var width = itemLayout.width;
	      var height = itemLayout.height;
	      var p = points[0];

	      if (polygonContain.contain(points, x, y) || polygonContain.contain(points, x + width, y) || polygonContain.contain(points, x, y + height) || polygonContain.contain(points, x + width, y + height) || BoundingRect.create(itemLayout).contain(p[0], p[1]) || lineIntersectPolygon(x, y, x + width, y, points) || lineIntersectPolygon(x, y, x, y + height, points) || lineIntersectPolygon(x + width, y, x + width, y + height, points) || lineIntersectPolygon(x, y + height, x + width, y + height, points)) {
	        return true;
	      }
	    }
	  }
	};

	function getLineSelectors(xyIndex) {
	  var xy = ['x', 'y'];
	  var wh = ['width', 'height'];
	  return {
	    point: function (itemLayout, selectors, area) {
	      if (itemLayout) {
	        var range = area.range;
	        var p = itemLayout[xyIndex];
	        return inLineRange(p, range);
	      }
	    },
	    rect: function (itemLayout, selectors, area) {
	      if (itemLayout) {
	        var range = area.range;
	        var layoutRange = [itemLayout[xy[xyIndex]], itemLayout[xy[xyIndex]] + itemLayout[wh[xyIndex]]];
	        layoutRange[1] < layoutRange[0] && layoutRange.reverse();
	        return inLineRange(layoutRange[0], range) || inLineRange(layoutRange[1], range) || inLineRange(range[0], layoutRange) || inLineRange(range[1], layoutRange);
	      }
	    }
	  };
	}

	function inLineRange(p, range) {
	  return range[0] <= p && p <= range[1];
	}

	function lineIntersectPolygon(lx, ly, l2x, l2y, points) {
	  for (var i = 0, p2 = points[points.length - 1]; i < points.length; i++) {
	    var p = points[i];

	    if (lineIntersect(lx, ly, l2x, l2y, p[0], p[1], p2[0], p2[1])) {
	      return true;
	    }

	    p2 = p;
	  }
	} // Code from <http://blog.csdn.net/rickliuxiao/article/details/6259322> with some fix.
	// See <https://en.wikipedia.org/wiki/Line%E2%80%93line_intersection>


	function lineIntersect(a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y) {
	  var delta = determinant(a2x - a1x, b1x - b2x, a2y - a1y, b1y - b2y);

	  if (nearZero(delta)) {
	    // parallel
	    return false;
	  }

	  var namenda = determinant(b1x - a1x, b1x - b2x, b1y - a1y, b1y - b2y) / delta;

	  if (namenda < 0 || namenda > 1) {
	    return false;
	  }

	  var miu = determinant(a2x - a1x, b1x - a1x, a2y - a1y, b1y - a1y) / delta;

	  if (miu < 0 || miu > 1) {
	    return false;
	  }

	  return true;
	}

	function nearZero(val) {
	  return val <= 1e-6 && val >= -1e-6;
	}

	function determinant(v1, v2, v3, v4) {
	  return v1 * v4 - v2 * v3;
	}

	var _default = selector;
	module.exports = _default;

/***/ },
/* 528 */
/***/ function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(162);

	var __DEV__ = _config.__DEV__;

	var zrUtil = __webpack_require__(166);

	var graphic = __webpack_require__(212);

	var modelUtil = __webpack_require__(203);

	var brushHelper = __webpack_require__(420);

	var each = zrUtil.each;
	var indexOf = zrUtil.indexOf;
	var curry = zrUtil.curry;
	var COORD_CONVERTS = ['dataToPoint', 'pointToData']; // FIXME
	// how to genarialize to more coordinate systems.

	var INCLUDE_FINDER_MAIN_TYPES = ['grid', 'xAxis', 'yAxis', 'geo', 'graph', 'polar', 'radiusAxis', 'angleAxis', 'bmap'];
	/**
	 * [option in constructor]:
	 * {
	 *     Index/Id/Name of geo, xAxis, yAxis, grid: See util/model#parseFinder.
	 * }
	 *
	 *
	 * [targetInfo]:
	 *
	 * There can be multiple axes in a single targetInfo. Consider the case
	 * of `grid` component, a targetInfo represents a grid which contains one or more
	 * cartesian and one or more axes. And consider the case of parallel system,
	 * which has multiple axes in a coordinate system.
	 * Can be {
	 *     panelId: ...,
	 *     coordSys: <a representitive cartesian in grid (first cartesian by default)>,
	 *     coordSyses: all cartesians.
	 *     gridModel: <grid component>
	 *     xAxes: correspond to coordSyses on index
	 *     yAxes: correspond to coordSyses on index
	 * }
	 * or {
	 *     panelId: ...,
	 *     coordSys: <geo coord sys>
	 *     coordSyses: [<geo coord sys>]
	 *     geoModel: <geo component>
	 * }
	 *
	 *
	 * [panelOpt]:
	 *
	 * Make from targetInfo. Input to BrushController.
	 * {
	 *     panelId: ...,
	 *     rect: ...
	 * }
	 *
	 *
	 * [area]:
	 *
	 * Generated by BrushController or user input.
	 * {
	 *     panelId: Used to locate coordInfo directly. If user inpput, no panelId.
	 *     brushType: determine how to convert to/from coord('rect' or 'polygon' or 'lineX/Y').
	 *     Index/Id/Name of geo, xAxis, yAxis, grid: See util/model#parseFinder.
	 *     range: pixel range.
	 *     coordRange: representitive coord range (the first one of coordRanges).
	 *     coordRanges: <Array> coord ranges, used in multiple cartesian in one grid.
	 * }
	 */

	/**
	 * @param {Object} option contains Index/Id/Name of xAxis/yAxis/geo/grid
	 *        Each can be {number|Array.<number>}. like: {xAxisIndex: [3, 4]}
	 * @param {module:echarts/model/Global} ecModel
	 * @param {Object} [opt]
	 * @param {Array.<string>} [opt.include] include coordinate system types.
	 */

	function BrushTargetManager(option, ecModel, opt) {
	  /**
	   * @private
	   * @type {Array.<Object>}
	   */
	  var targetInfoList = this._targetInfoList = [];
	  var info = {};
	  var foundCpts = parseFinder(ecModel, option);
	  each(targetInfoBuilders, function (builder, type) {
	    if (!opt || !opt.include || indexOf(opt.include, type) >= 0) {
	      builder(foundCpts, targetInfoList, info);
	    }
	  });
	}

	var proto = BrushTargetManager.prototype;

	proto.setOutputRanges = function (areas, ecModel) {
	  this.matchOutputRanges(areas, ecModel, function (area, coordRange, coordSys) {
	    (area.coordRanges || (area.coordRanges = [])).push(coordRange); // area.coordRange is the first of area.coordRanges

	    if (!area.coordRange) {
	      area.coordRange = coordRange; // In 'category' axis, coord to pixel is not reversible, so we can not
	      // rebuild range by coordRange accrately, which may bring trouble when
	      // brushing only one item. So we use __rangeOffset to rebuilding range
	      // by coordRange. And this it only used in brush component so it is no
	      // need to be adapted to coordRanges.

	      var result = coordConvert[area.brushType](0, coordSys, coordRange);
	      area.__rangeOffset = {
	        offset: diffProcessor[area.brushType](result.values, area.range, [1, 1]),
	        xyMinMax: result.xyMinMax
	      };
	    }
	  });
	};

	proto.matchOutputRanges = function (areas, ecModel, cb) {
	  each(areas, function (area) {
	    var targetInfo = this.findTargetInfo(area, ecModel);

	    if (targetInfo && targetInfo !== true) {
	      zrUtil.each(targetInfo.coordSyses, function (coordSys) {
	        var result = coordConvert[area.brushType](1, coordSys, area.range);
	        cb(area, result.values, coordSys, ecModel);
	      });
	    }
	  }, this);
	};

	proto.setInputRanges = function (areas, ecModel) {
	  each(areas, function (area) {
	    var targetInfo = this.findTargetInfo(area, ecModel);
	    area.range = area.range || []; // convert coordRange to global range and set panelId.

	    if (targetInfo && targetInfo !== true) {
	      area.panelId = targetInfo.panelId; // (1) area.range shoule always be calculate from coordRange but does
	      // not keep its original value, for the sake of the dataZoom scenario,
	      // where area.coordRange remains unchanged but area.range may be changed.
	      // (2) Only support converting one coordRange to pixel range in brush
	      // component. So do not consider `coordRanges`.
	      // (3) About __rangeOffset, see comment above.

	      var result = coordConvert[area.brushType](0, targetInfo.coordSys, area.coordRange);
	      var rangeOffset = area.__rangeOffset;
	      area.range = rangeOffset ? diffProcessor[area.brushType](result.values, rangeOffset.offset, getScales(result.xyMinMax, rangeOffset.xyMinMax)) : result.values;
	    }
	  }, this);
	};

	proto.makePanelOpts = function (api, getDefaultBrushType) {
	  return zrUtil.map(this._targetInfoList, function (targetInfo) {
	    var rect = targetInfo.getPanelRect();
	    return {
	      panelId: targetInfo.panelId,
	      defaultBrushType: getDefaultBrushType && getDefaultBrushType(targetInfo),
	      clipPath: brushHelper.makeRectPanelClipPath(rect),
	      isTargetByCursor: brushHelper.makeRectIsTargetByCursor(rect, api, targetInfo.coordSysModel),
	      getLinearBrushOtherExtent: brushHelper.makeLinearBrushOtherExtent(rect)
	    };
	  });
	};

	proto.controlSeries = function (area, seriesModel, ecModel) {
	  // Check whether area is bound in coord, and series do not belong to that coord.
	  // If do not do this check, some brush (like lineX) will controll all axes.
	  var targetInfo = this.findTargetInfo(area, ecModel);
	  return targetInfo === true || targetInfo && indexOf(targetInfo.coordSyses, seriesModel.coordinateSystem) >= 0;
	};
	/**
	 * If return Object, a coord found.
	 * If reutrn true, global found.
	 * Otherwise nothing found.
	 *
	 * @param {Object} area
	 * @param {Array} targetInfoList
	 * @return {Object|boolean}
	 */


	proto.findTargetInfo = function (area, ecModel) {
	  var targetInfoList = this._targetInfoList;
	  var foundCpts = parseFinder(ecModel, area);

	  for (var i = 0; i < targetInfoList.length; i++) {
	    var targetInfo = targetInfoList[i];
	    var areaPanelId = area.panelId;

	    if (areaPanelId) {
	      if (targetInfo.panelId === areaPanelId) {
	        return targetInfo;
	      }
	    } else {
	      for (var i = 0; i < targetInfoMatchers.length; i++) {
	        if (targetInfoMatchers[i](foundCpts, targetInfo)) {
	          return targetInfo;
	        }
	      }
	    }
	  }

	  return true;
	};

	function formatMinMax(minMax) {
	  minMax[0] > minMax[1] && minMax.reverse();
	  return minMax;
	}

	function parseFinder(ecModel, option) {
	  return modelUtil.parseFinder(ecModel, option, {
	    includeMainTypes: INCLUDE_FINDER_MAIN_TYPES
	  });
	}

	var targetInfoBuilders = {
	  grid: function (foundCpts, targetInfoList) {
	    var xAxisModels = foundCpts.xAxisModels;
	    var yAxisModels = foundCpts.yAxisModels;
	    var gridModels = foundCpts.gridModels; // Remove duplicated.

	    var gridModelMap = zrUtil.createHashMap();
	    var xAxesHas = {};
	    var yAxesHas = {};

	    if (!xAxisModels && !yAxisModels && !gridModels) {
	      return;
	    }

	    each(xAxisModels, function (axisModel) {
	      var gridModel = axisModel.axis.grid.model;
	      gridModelMap.set(gridModel.id, gridModel);
	      xAxesHas[gridModel.id] = true;
	    });
	    each(yAxisModels, function (axisModel) {
	      var gridModel = axisModel.axis.grid.model;
	      gridModelMap.set(gridModel.id, gridModel);
	      yAxesHas[gridModel.id] = true;
	    });
	    each(gridModels, function (gridModel) {
	      gridModelMap.set(gridModel.id, gridModel);
	      xAxesHas[gridModel.id] = true;
	      yAxesHas[gridModel.id] = true;
	    });
	    gridModelMap.each(function (gridModel) {
	      var grid = gridModel.coordinateSystem;
	      var cartesians = [];
	      each(grid.getCartesians(), function (cartesian, index) {
	        if (indexOf(xAxisModels, cartesian.getAxis('x').model) >= 0 || indexOf(yAxisModels, cartesian.getAxis('y').model) >= 0) {
	          cartesians.push(cartesian);
	        }
	      });
	      targetInfoList.push({
	        panelId: 'grid--' + gridModel.id,
	        gridModel: gridModel,
	        coordSysModel: gridModel,
	        // Use the first one as the representitive coordSys.
	        coordSys: cartesians[0],
	        coordSyses: cartesians,
	        getPanelRect: panelRectBuilder.grid,
	        xAxisDeclared: xAxesHas[gridModel.id],
	        yAxisDeclared: yAxesHas[gridModel.id]
	      });
	    });
	  },
	  geo: function (foundCpts, targetInfoList) {
	    each(foundCpts.geoModels, function (geoModel) {
	      var coordSys = geoModel.coordinateSystem;
	      targetInfoList.push({
	        panelId: 'geo--' + geoModel.id,
	        geoModel: geoModel,
	        coordSysModel: geoModel,
	        coordSys: coordSys,
	        coordSyses: [coordSys],
	        getPanelRect: panelRectBuilder.geo
	      });
	    });
	  }
	};
	var targetInfoMatchers = [// grid
	function (foundCpts, targetInfo) {
	  var xAxisModel = foundCpts.xAxisModel;
	  var yAxisModel = foundCpts.yAxisModel;
	  var gridModel = foundCpts.gridModel;
	  !gridModel && xAxisModel && (gridModel = xAxisModel.axis.grid.model);
	  !gridModel && yAxisModel && (gridModel = yAxisModel.axis.grid.model);
	  return gridModel && gridModel === targetInfo.gridModel;
	}, // geo
	function (foundCpts, targetInfo) {
	  var geoModel = foundCpts.geoModel;
	  return geoModel && geoModel === targetInfo.geoModel;
	}];
	var panelRectBuilder = {
	  grid: function () {
	    // grid is not Transformable.
	    return this.coordSys.grid.getRect().clone();
	  },
	  geo: function () {
	    var coordSys = this.coordSys;
	    var rect = coordSys.getBoundingRect().clone(); // geo roam and zoom transform

	    rect.applyTransform(graphic.getTransform(coordSys));
	    return rect;
	  }
	};
	var coordConvert = {
	  lineX: curry(axisConvert, 0),
	  lineY: curry(axisConvert, 1),
	  rect: function (to, coordSys, rangeOrCoordRange) {
	    var xminymin = coordSys[COORD_CONVERTS[to]]([rangeOrCoordRange[0][0], rangeOrCoordRange[1][0]]);
	    var xmaxymax = coordSys[COORD_CONVERTS[to]]([rangeOrCoordRange[0][1], rangeOrCoordRange[1][1]]);
	    var values = [formatMinMax([xminymin[0], xmaxymax[0]]), formatMinMax([xminymin[1], xmaxymax[1]])];
	    return {
	      values: values,
	      xyMinMax: values
	    };
	  },
	  polygon: function (to, coordSys, rangeOrCoordRange) {
	    var xyMinMax = [[Infinity, -Infinity], [Infinity, -Infinity]];
	    var values = zrUtil.map(rangeOrCoordRange, function (item) {
	      var p = coordSys[COORD_CONVERTS[to]](item);
	      xyMinMax[0][0] = Math.min(xyMinMax[0][0], p[0]);
	      xyMinMax[1][0] = Math.min(xyMinMax[1][0], p[1]);
	      xyMinMax[0][1] = Math.max(xyMinMax[0][1], p[0]);
	      xyMinMax[1][1] = Math.max(xyMinMax[1][1], p[1]);
	      return p;
	    });
	    return {
	      values: values,
	      xyMinMax: xyMinMax
	    };
	  }
	};

	function axisConvert(axisNameIndex, to, coordSys, rangeOrCoordRange) {
	  var axis = coordSys.getAxis(['x', 'y'][axisNameIndex]);
	  var values = formatMinMax(zrUtil.map([0, 1], function (i) {
	    return to ? axis.coordToData(axis.toLocalCoord(rangeOrCoordRange[i])) : axis.toGlobalCoord(axis.dataToCoord(rangeOrCoordRange[i]));
	  }));
	  var xyMinMax = [];
	  xyMinMax[axisNameIndex] = values;
	  xyMinMax[1 - axisNameIndex] = [NaN, NaN];
	  return {
	    values: values,
	    xyMinMax: xyMinMax
	  };
	}

	var diffProcessor = {
	  lineX: curry(axisDiffProcessor, 0),
	  lineY: curry(axisDiffProcessor, 1),
	  rect: function (values, refer, scales) {
	    return [[values[0][0] - scales[0] * refer[0][0], values[0][1] - scales[0] * refer[0][1]], [values[1][0] - scales[1] * refer[1][0], values[1][1] - scales[1] * refer[1][1]]];
	  },
	  polygon: function (values, refer, scales) {
	    return zrUtil.map(values, function (item, idx) {
	      return [item[0] - scales[0] * refer[idx][0], item[1] - scales[1] * refer[idx][1]];
	    });
	  }
	};

	function axisDiffProcessor(axisNameIndex, values, refer, scales) {
	  return [values[0] - scales[axisNameIndex] * refer[0], values[1] - scales[axisNameIndex] * refer[1]];
	} // We have to process scale caused by dataZoom manually,
	// although it might be not accurate.


	function getScales(xyMinMaxCurr, xyMinMaxOrigin) {
	  var sizeCurr = getSize(xyMinMaxCurr);
	  var sizeOrigin = getSize(xyMinMaxOrigin);
	  var scales = [sizeCurr[0] / sizeOrigin[0], sizeCurr[1] / sizeOrigin[1]];
	  isNaN(scales[0]) && (scales[0] = 1);
	  isNaN(scales[1]) && (scales[1] = 1);
	  return scales;
	}

	function getSize(xyMinMax) {
	  return xyMinMax ? [xyMinMax[0][1] - xyMinMax[0][0], xyMinMax[1][1] - xyMinMax[1][0]] : [NaN, NaN];
	}

	var _default = BrushTargetManager;
	module.exports = _default;

/***/ },
/* 529 */
/***/ function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(162);

	var __DEV__ = _config.__DEV__;

	var echarts = __webpack_require__(161);

	var zrUtil = __webpack_require__(166);

	var visualSolution = __webpack_require__(526);

	var Model = __webpack_require__(206);

	var DEFAULT_OUT_OF_BRUSH_COLOR = ['#ddd'];
	var BrushModel = echarts.extendComponentModel({
	  type: 'brush',
	  dependencies: ['geo', 'grid', 'xAxis', 'yAxis', 'parallel', 'series'],

	  /**
	   * @protected
	   */
	  defaultOption: {
	    // inBrush: null,
	    // outOfBrush: null,
	    toolbox: null,
	    // Default value see preprocessor.
	    brushLink: null,
	    // Series indices array, broadcast using dataIndex.
	    // or 'all', which means all series. 'none' or null means no series.
	    seriesIndex: 'all',
	    // seriesIndex array, specify series controlled by this brush component.
	    geoIndex: null,
	    //
	    xAxisIndex: null,
	    yAxisIndex: null,
	    brushType: 'rect',
	    // Default brushType, see BrushController.
	    brushMode: 'single',
	    // Default brushMode, 'single' or 'multiple'
	    transformable: true,
	    // Default transformable.
	    brushStyle: {
	      // Default brushStyle
	      borderWidth: 1,
	      color: 'rgba(120,140,180,0.3)',
	      borderColor: 'rgba(120,140,180,0.8)'
	    },
	    throttleType: 'fixRate',
	    // Throttle in brushSelected event. 'fixRate' or 'debounce'.
	    // If null, no throttle. Valid only in the first brush component
	    throttleDelay: 0,
	    // Unit: ms, 0 means every event will be triggered.
	    // FIXME
	    // 试验效果
	    removeOnClick: true,
	    z: 10000
	  },

	  /**
	   * @readOnly
	   * @type {Array.<Object>}
	   */
	  areas: [],

	  /**
	   * Current activated brush type.
	   * If null, brush is inactived.
	   * see module:echarts/component/helper/BrushController
	   * @readOnly
	   * @type {string}
	   */
	  brushType: null,

	  /**
	   * Current brush opt.
	   * see module:echarts/component/helper/BrushController
	   * @readOnly
	   * @type {Object}
	   */
	  brushOption: {},

	  /**
	   * @readOnly
	   * @type {Array.<Object>}
	   */
	  coordInfoList: [],
	  optionUpdated: function (newOption, isInit) {
	    var thisOption = this.option;
	    !isInit && visualSolution.replaceVisualOption(thisOption, newOption, ['inBrush', 'outOfBrush']);
	    thisOption.inBrush = thisOption.inBrush || {}; // Always give default visual, consider setOption at the second time.

	    thisOption.outOfBrush = thisOption.outOfBrush || {
	      color: DEFAULT_OUT_OF_BRUSH_COLOR
	    };
	  },

	  /**
	   * If ranges is null/undefined, range state remain.
	   *
	   * @param {Array.<Object>} [ranges]
	   */
	  setAreas: function (areas) {
	    // If ranges is null/undefined, range state remain.
	    // This helps user to dispatchAction({type: 'brush'}) with no areas
	    // set but just want to get the current brush select info from a `brush` event.
	    if (!areas) {
	      return;
	    }

	    this.areas = zrUtil.map(areas, function (area) {
	      return generateBrushOption(this.option, area);
	    }, this);
	  },

	  /**
	   * see module:echarts/component/helper/BrushController
	   * @param {Object} brushOption
	   */
	  setBrushOption: function (brushOption) {
	    this.brushOption = generateBrushOption(this.option, brushOption);
	    this.brushType = this.brushOption.brushType;
	  }
	});

	function generateBrushOption(option, brushOption) {
	  return zrUtil.merge({
	    brushType: option.brushType,
	    brushMode: option.brushMode,
	    transformable: option.transformable,
	    brushStyle: new Model(option.brushStyle).getItemStyle(),
	    removeOnClick: option.removeOnClick,
	    z: option.z
	  }, brushOption, true);
	}

	var _default = BrushModel;
	module.exports = _default;

/***/ },
/* 530 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var zrUtil = __webpack_require__(166);

	var BrushController = __webpack_require__(419);

	var _default = echarts.extendComponentView({
	  type: 'brush',
	  init: function (ecModel, api) {
	    /**
	     * @readOnly
	     * @type {module:echarts/model/Global}
	     */
	    this.ecModel = ecModel;
	    /**
	     * @readOnly
	     * @type {module:echarts/ExtensionAPI}
	     */

	    this.api = api;
	    /**
	     * @readOnly
	     * @type {module:echarts/component/brush/BrushModel}
	     */

	    this.model;
	    /**
	     * @private
	     * @type {module:echarts/component/helper/BrushController}
	     */

	    (this._brushController = new BrushController(api.getZr())).on('brush', zrUtil.bind(this._onBrush, this)).mount();
	  },

	  /**
	   * @override
	   */
	  render: function (brushModel) {
	    this.model = brushModel;
	    return updateController.apply(this, arguments);
	  },

	  /**
	   * @override
	   */
	  updateView: updateController,

	  /**
	   * @override
	   */
	  updateLayout: updateController,

	  /**
	   * @override
	   */
	  updateVisual: updateController,

	  /**
	   * @override
	   */
	  dispose: function () {
	    this._brushController.dispose();
	  },

	  /**
	   * @private
	   */
	  _onBrush: function (areas, opt) {
	    var modelId = this.model.id;
	    this.model.brushTargetManager.setOutputRanges(areas, this.ecModel); // Action is not dispatched on drag end, because the drag end
	    // emits the same params with the last drag move event, and
	    // may have some delay when using touch pad, which makes
	    // animation not smooth (when using debounce).

	    (!opt.isEnd || opt.removeOnClick) && this.api.dispatchAction({
	      type: 'brush',
	      brushId: modelId,
	      areas: zrUtil.clone(areas),
	      $from: modelId
	    });
	  }
	});

	function updateController(brushModel, ecModel, api, payload) {
	  // Do not update controller when drawing.
	  (!payload || payload.$from !== brushModel.id) && this._brushController.setPanels(brushModel.brushTargetManager.makePanelOpts(api)).enableBrush(brushModel.brushOption).updateCovers(brushModel.areas.slice());
	}

	module.exports = _default;

/***/ },
/* 531 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	/**
	 * payload: {
	 *      brushIndex: number, or,
	 *      brushId: string, or,
	 *      brushName: string,
	 *      globalRanges: Array
	 * }
	 */
	echarts.registerAction({
	  type: 'brush',
	  event: 'brush',
	  update: 'updateView'
	}, function (payload, ecModel) {
	  ecModel.eachComponent({
	    mainType: 'brush',
	    query: payload
	  }, function (brushModel) {
	    brushModel.setAreas(payload.areas);
	  });
	});
	/**
	 * payload: {
	 *      brushComponents: [
	 *          {
	 *              brushId,
	 *              brushIndex,
	 *              brushName,
	 *              series: [
	 *                  {
	 *                      seriesId,
	 *                      seriesIndex,
	 *                      seriesName,
	 *                      rawIndices: [21, 34, ...]
	 *                  },
	 *                  ...
	 *              ]
	 *          },
	 *          ...
	 *      ]
	 * }
	 */

	echarts.registerAction({
	  type: 'brushSelect',
	  event: 'brushSelected',
	  update: 'none'
	}, function () {});

/***/ },
/* 532 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var featureManager = __webpack_require__(533);

	var lang = __webpack_require__(534);

	var brushLang = lang.toolbox.brush;

	function Brush(model, ecModel, api) {
	  this.model = model;
	  this.ecModel = ecModel;
	  this.api = api;
	  /**
	   * @private
	   * @type {string}
	   */

	  this._brushType;
	  /**
	   * @private
	   * @type {string}
	   */

	  this._brushMode;
	}

	Brush.defaultOption = {
	  show: true,
	  type: ['rect', 'polygon', 'lineX', 'lineY', 'keep', 'clear'],
	  icon: {
	    rect: 'M7.3,34.7 M0.4,10V-0.2h9.8 M89.6,10V-0.2h-9.8 M0.4,60v10.2h9.8 M89.6,60v10.2h-9.8 M12.3,22.4V10.5h13.1 M33.6,10.5h7.8 M49.1,10.5h7.8 M77.5,22.4V10.5h-13 M12.3,31.1v8.2 M77.7,31.1v8.2 M12.3,47.6v11.9h13.1 M33.6,59.5h7.6 M49.1,59.5 h7.7 M77.5,47.6v11.9h-13',
	    // jshint ignore:line
	    polygon: 'M55.2,34.9c1.7,0,3.1,1.4,3.1,3.1s-1.4,3.1-3.1,3.1 s-3.1-1.4-3.1-3.1S53.5,34.9,55.2,34.9z M50.4,51c1.7,0,3.1,1.4,3.1,3.1c0,1.7-1.4,3.1-3.1,3.1c-1.7,0-3.1-1.4-3.1-3.1 C47.3,52.4,48.7,51,50.4,51z M55.6,37.1l1.5-7.8 M60.1,13.5l1.6-8.7l-7.8,4 M59,19l-1,5.3 M24,16.1l6.4,4.9l6.4-3.3 M48.5,11.6 l-5.9,3.1 M19.1,12.8L9.7,5.1l1.1,7.7 M13.4,29.8l1,7.3l6.6,1.6 M11.6,18.4l1,6.1 M32.8,41.9 M26.6,40.4 M27.3,40.2l6.1,1.6 M49.9,52.1l-5.6-7.6l-4.9-1.2',
	    // jshint ignore:line
	    lineX: 'M15.2,30 M19.7,15.6V1.9H29 M34.8,1.9H40.4 M55.3,15.6V1.9H45.9 M19.7,44.4V58.1H29 M34.8,58.1H40.4 M55.3,44.4 V58.1H45.9 M12.5,20.3l-9.4,9.6l9.6,9.8 M3.1,29.9h16.5 M62.5,20.3l9.4,9.6L62.3,39.7 M71.9,29.9H55.4',
	    // jshint ignore:line
	    lineY: 'M38.8,7.7 M52.7,12h13.2v9 M65.9,26.6V32 M52.7,46.3h13.2v-9 M24.9,12H11.8v9 M11.8,26.6V32 M24.9,46.3H11.8v-9 M48.2,5.1l-9.3-9l-9.4,9.2 M38.9-3.9V12 M48.2,53.3l-9.3,9l-9.4-9.2 M38.9,62.3V46.4',
	    // jshint ignore:line
	    keep: 'M4,10.5V1h10.3 M20.7,1h6.1 M33,1h6.1 M55.4,10.5V1H45.2 M4,17.3v6.6 M55.6,17.3v6.6 M4,30.5V40h10.3 M20.7,40 h6.1 M33,40h6.1 M55.4,30.5V40H45.2 M21,18.9h62.9v48.6H21V18.9z',
	    // jshint ignore:line
	    clear: 'M22,14.7l30.9,31 M52.9,14.7L22,45.7 M4.7,16.8V4.2h13.1 M26,4.2h7.8 M41.6,4.2h7.8 M70.3,16.8V4.2H57.2 M4.7,25.9v8.6 M70.3,25.9v8.6 M4.7,43.2v12.6h13.1 M26,55.8h7.8 M41.6,55.8h7.8 M70.3,43.2v12.6H57.2' // jshint ignore:line

	  },
	  // `rect`, `polygon`, `lineX`, `lineY`, `keep`, `clear`
	  title: zrUtil.clone(brushLang.title)
	};
	var proto = Brush.prototype;

	proto.render = proto.updateView = proto.updateLayout = function (featureModel, ecModel, api) {
	  var brushType;
	  var brushMode;
	  var isBrushed;
	  ecModel.eachComponent({
	    mainType: 'brush'
	  }, function (brushModel) {
	    brushType = brushModel.brushType;
	    brushMode = brushModel.brushOption.brushMode || 'single';
	    isBrushed |= brushModel.areas.length;
	  });
	  this._brushType = brushType;
	  this._brushMode = brushMode;
	  zrUtil.each(featureModel.get('type', true), function (type) {
	    featureModel.setIconStatus(type, (type === 'keep' ? brushMode === 'multiple' : type === 'clear' ? isBrushed : type === brushType) ? 'emphasis' : 'normal');
	  });
	};

	proto.getIcons = function () {
	  var model = this.model;
	  var availableIcons = model.get('icon', true);
	  var icons = {};
	  zrUtil.each(model.get('type', true), function (type) {
	    if (availableIcons[type]) {
	      icons[type] = availableIcons[type];
	    }
	  });
	  return icons;
	};

	proto.onclick = function (ecModel, api, type) {
	  var brushType = this._brushType;
	  var brushMode = this._brushMode;

	  if (type === 'clear') {
	    // Trigger parallel action firstly
	    api.dispatchAction({
	      type: 'axisAreaSelect',
	      intervals: []
	    });
	    api.dispatchAction({
	      type: 'brush',
	      command: 'clear',
	      // Clear all areas of all brush components.
	      areas: []
	    });
	  } else {
	    api.dispatchAction({
	      type: 'takeGlobalCursor',
	      key: 'brush',
	      brushOption: {
	        brushType: type === 'keep' ? brushType : brushType === type ? false : type,
	        brushMode: type === 'keep' ? brushMode === 'multiple' ? 'single' : 'multiple' : brushMode
	      }
	    });
	  }
	};

	featureManager.register('brush', Brush);
	var _default = Brush;
	module.exports = _default;

/***/ },
/* 533 */
/***/ function(module, exports) {

	var features = {};

	function register(name, ctor) {
	  features[name] = ctor;
	}

	function get(name) {
	  return features[name];
	}

	exports.register = register;
	exports.get = get;

/***/ },
/* 534 */
/***/ function(module, exports) {

	var _default = {
	  toolbox: {
	    brush: {
	      title: {
	        rect: '矩形选择',
	        polygon: '圈选',
	        lineX: '横向选择',
	        lineY: '纵向选择',
	        keep: '保持选择',
	        clear: '清除选择'
	      }
	    },
	    dataView: {
	      title: '数据视图',
	      lang: ['数据视图', '关闭', '刷新']
	    },
	    dataZoom: {
	      title: {
	        zoom: '区域缩放',
	        back: '区域缩放还原'
	      }
	    },
	    magicType: {
	      title: {
	        line: '切换为折线图',
	        bar: '切换为柱状图',
	        stack: '切换为堆叠',
	        tiled: '切换为平铺'
	      }
	    },
	    restore: {
	      title: '还原'
	    },
	    saveAsImage: {
	      title: '保存为图片',
	      lang: ['右键另存为图片']
	    }
	  }
	};
	module.exports = _default;

/***/ },
/* 535 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(536);

	__webpack_require__(537);

	__webpack_require__(538);

/***/ },
/* 536 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var layout = __webpack_require__(247);

	var numberUtil = __webpack_require__(205);

	var CoordinateSystem = __webpack_require__(252);

	// (24*60*60*1000)
	var PROXIMATE_ONE_DAY = 86400000;
	/**
	 * Calendar
	 *
	 * @constructor
	 *
	 * @param {Object} calendarModel calendarModel
	 * @param {Object} ecModel       ecModel
	 * @param {Object} api           api
	 */

	function Calendar(calendarModel, ecModel, api) {
	  this._model = calendarModel;
	}

	Calendar.prototype = {
	  constructor: Calendar,
	  type: 'calendar',
	  dimensions: ['time', 'value'],
	  // Required in createListFromData
	  getDimensionsInfo: function () {
	    return [{
	      name: 'time',
	      type: 'time'
	    }];
	  },
	  getRangeInfo: function () {
	    return this._rangeInfo;
	  },
	  getModel: function () {
	    return this._model;
	  },
	  getRect: function () {
	    return this._rect;
	  },
	  getCellWidth: function () {
	    return this._sw;
	  },
	  getCellHeight: function () {
	    return this._sh;
	  },
	  getOrient: function () {
	    return this._orient;
	  },

	  /**
	   * getFirstDayOfWeek
	   *
	   * @example
	   *     0 : start at Sunday
	   *     1 : start at Monday
	   *
	   * @return {number}
	   */
	  getFirstDayOfWeek: function () {
	    return this._firstDayOfWeek;
	  },

	  /**
	   * get date info
	   *
	   * @param  {string|number} date date
	   * @return {Object}
	   * {
	   *      y: string, local full year, eg., '1940',
	   *      m: string, local month, from '01' ot '12',
	   *      d: string, local date, from '01' to '31' (if exists),
	   *      day: It is not date.getDay(). It is the location of the cell in a week, from 0 to 6,
	   *      time: timestamp,
	   *      formatedDate: string, yyyy-MM-dd,
	   *      date: original date object.
	   * }
	   */
	  getDateInfo: function (date) {
	    date = numberUtil.parseDate(date);
	    var y = date.getFullYear();
	    var m = date.getMonth() + 1;
	    m = m < 10 ? '0' + m : m;
	    var d = date.getDate();
	    d = d < 10 ? '0' + d : d;
	    var day = date.getDay();
	    day = Math.abs((day + 7 - this.getFirstDayOfWeek()) % 7);
	    return {
	      y: y,
	      m: m,
	      d: d,
	      day: day,
	      time: date.getTime(),
	      formatedDate: y + '-' + m + '-' + d,
	      date: date
	    };
	  },
	  getNextNDay: function (date, n) {
	    n = n || 0;

	    if (n === 0) {
	      return this.getDateInfo(date);
	    }

	    date = new Date(this.getDateInfo(date).time);
	    date.setDate(date.getDate() + n);
	    return this.getDateInfo(date);
	  },
	  update: function (ecModel, api) {
	    this._firstDayOfWeek = +this._model.getModel('dayLabel').get('firstDay');
	    this._orient = this._model.get('orient');
	    this._lineWidth = this._model.getModel('itemStyle.normal').getItemStyle().lineWidth || 0;
	    this._rangeInfo = this._getRangeInfo(this._initRangeOption());
	    var weeks = this._rangeInfo.weeks || 1;
	    var whNames = ['width', 'height'];

	    var cellSize = this._model.get('cellSize').slice();

	    var layoutParams = this._model.getBoxLayoutParams();

	    var cellNumbers = this._orient === 'horizontal' ? [weeks, 7] : [7, weeks];
	    zrUtil.each([0, 1], function (idx) {
	      if (cellSizeSpecified(cellSize, idx)) {
	        layoutParams[whNames[idx]] = cellSize[idx] * cellNumbers[idx];
	      }
	    });
	    var whGlobal = {
	      width: api.getWidth(),
	      height: api.getHeight()
	    };
	    var calendarRect = this._rect = layout.getLayoutRect(layoutParams, whGlobal);
	    zrUtil.each([0, 1], function (idx) {
	      if (!cellSizeSpecified(cellSize, idx)) {
	        cellSize[idx] = calendarRect[whNames[idx]] / cellNumbers[idx];
	      }
	    });

	    function cellSizeSpecified(cellSize, idx) {
	      return cellSize[idx] != null && cellSize[idx] !== 'auto';
	    }

	    this._sw = cellSize[0];
	    this._sh = cellSize[1];
	  },

	  /**
	   * Convert a time data(time, value) item to (x, y) point.
	   *
	   * @override
	   * @param  {Array|number} data data
	   * @param  {boolean} [clamp=true] out of range
	   * @return {Array} point
	   */
	  dataToPoint: function (data, clamp) {
	    zrUtil.isArray(data) && (data = data[0]);
	    clamp == null && (clamp = true);
	    var dayInfo = this.getDateInfo(data);
	    var range = this._rangeInfo;
	    var date = dayInfo.formatedDate; // if not in range return [NaN, NaN]

	    if (clamp && !(dayInfo.time >= range.start.time && dayInfo.time <= range.end.time)) {
	      return [NaN, NaN];
	    }

	    var week = dayInfo.day;

	    var nthWeek = this._getRangeInfo([range.start.time, date]).nthWeek;

	    if (this._orient === 'vertical') {
	      return [this._rect.x + week * this._sw + this._sw / 2, this._rect.y + nthWeek * this._sh + this._sh / 2];
	    }

	    return [this._rect.x + nthWeek * this._sw + this._sw / 2, this._rect.y + week * this._sh + this._sh / 2];
	  },

	  /**
	   * Convert a (x, y) point to time data
	   *
	   * @override
	   * @param  {string} point point
	   * @return {string}       data
	   */
	  pointToData: function (point) {
	    var date = this.pointToDate(point);
	    return date && date.time;
	  },

	  /**
	   * Convert a time date item to (x, y) four point.
	   *
	   * @param  {Array} data  date[0] is date
	   * @param  {boolean} [clamp=true]  out of range
	   * @return {Object}       point
	   */
	  dataToRect: function (data, clamp) {
	    var point = this.dataToPoint(data, clamp);
	    return {
	      contentShape: {
	        x: point[0] - (this._sw - this._lineWidth) / 2,
	        y: point[1] - (this._sh - this._lineWidth) / 2,
	        width: this._sw - this._lineWidth,
	        height: this._sh - this._lineWidth
	      },
	      center: point,
	      tl: [point[0] - this._sw / 2, point[1] - this._sh / 2],
	      tr: [point[0] + this._sw / 2, point[1] - this._sh / 2],
	      br: [point[0] + this._sw / 2, point[1] + this._sh / 2],
	      bl: [point[0] - this._sw / 2, point[1] + this._sh / 2]
	    };
	  },

	  /**
	   * Convert a (x, y) point to time date
	   *
	   * @param  {Array} point point
	   * @return {Object}       date
	   */
	  pointToDate: function (point) {
	    var nthX = Math.floor((point[0] - this._rect.x) / this._sw) + 1;
	    var nthY = Math.floor((point[1] - this._rect.y) / this._sh) + 1;
	    var range = this._rangeInfo.range;

	    if (this._orient === 'vertical') {
	      return this._getDateByWeeksAndDay(nthY, nthX - 1, range);
	    }

	    return this._getDateByWeeksAndDay(nthX, nthY - 1, range);
	  },

	  /**
	   * @inheritDoc
	   */
	  convertToPixel: zrUtil.curry(doConvert, 'dataToPoint'),

	  /**
	   * @inheritDoc
	   */
	  convertFromPixel: zrUtil.curry(doConvert, 'pointToData'),

	  /**
	   * initRange
	   *
	   * @private
	   * @return {Array} [start, end]
	   */
	  _initRangeOption: function () {
	    var range = this._model.get('range');

	    var rg = range;

	    if (zrUtil.isArray(rg) && rg.length === 1) {
	      rg = rg[0];
	    }

	    if (/^\d{4}$/.test(rg)) {
	      range = [rg + '-01-01', rg + '-12-31'];
	    }

	    if (/^\d{4}[\/|-]\d{1,2}$/.test(rg)) {
	      var start = this.getDateInfo(rg);
	      var firstDay = start.date;
	      firstDay.setMonth(firstDay.getMonth() + 1);
	      var end = this.getNextNDay(firstDay, -1);
	      range = [start.formatedDate, end.formatedDate];
	    }

	    if (/^\d{4}[\/|-]\d{1,2}[\/|-]\d{1,2}$/.test(rg)) {
	      range = [rg, rg];
	    }

	    var tmp = this._getRangeInfo(range);

	    if (tmp.start.time > tmp.end.time) {
	      range.reverse();
	    }

	    return range;
	  },

	  /**
	   * range info
	   *
	   * @private
	   * @param  {Array} range range ['2017-01-01', '2017-07-08']
	   *  If range[0] > range[1], they will not be reversed.
	   * @return {Object}       obj
	   */
	  _getRangeInfo: function (range) {
	    range = [this.getDateInfo(range[0]), this.getDateInfo(range[1])];
	    var reversed;

	    if (range[0].time > range[1].time) {
	      reversed = true;
	      range.reverse();
	    }

	    var allDay = Math.floor(range[1].time / PROXIMATE_ONE_DAY) - Math.floor(range[0].time / PROXIMATE_ONE_DAY) + 1; // Consider case:
	    // Firstly set system timezone as "Time Zone: America/Toronto",
	    // ```
	    // var first = new Date(1478412000000 - 3600 * 1000 * 2.5);
	    // var second = new Date(1478412000000);
	    // var allDays = Math.floor(second / ONE_DAY) - Math.floor(first / ONE_DAY) + 1;
	    // ```
	    // will get wrong result because of DST. So we should fix it.

	    var date = new Date(range[0].time);
	    var startDateNum = date.getDate();
	    var endDateNum = range[1].date.getDate();
	    date.setDate(startDateNum + allDay - 1); // The bias can not over a month, so just compare date.

	    if (date.getDate() !== endDateNum) {
	      var sign = date.getTime() - range[1].time > 0 ? 1 : -1;

	      while (date.getDate() !== endDateNum && (date.getTime() - range[1].time) * sign > 0) {
	        allDay -= sign;
	        date.setDate(startDateNum + allDay - 1);
	      }
	    }

	    var weeks = Math.floor((allDay + range[0].day + 6) / 7);
	    var nthWeek = reversed ? -weeks + 1 : weeks - 1;
	    reversed && range.reverse();
	    return {
	      range: [range[0].formatedDate, range[1].formatedDate],
	      start: range[0],
	      end: range[1],
	      allDay: allDay,
	      weeks: weeks,
	      // From 0.
	      nthWeek: nthWeek,
	      fweek: range[0].day,
	      lweek: range[1].day
	    };
	  },

	  /**
	   * get date by nthWeeks and week day in range
	   *
	   * @private
	   * @param  {number} nthWeek the week
	   * @param  {number} day   the week day
	   * @param  {Array} range [d1, d2]
	   * @return {Object}
	   */
	  _getDateByWeeksAndDay: function (nthWeek, day, range) {
	    var rangeInfo = this._getRangeInfo(range);

	    if (nthWeek > rangeInfo.weeks || nthWeek === 0 && day < rangeInfo.fweek || nthWeek === rangeInfo.weeks && day > rangeInfo.lweek) {
	      return false;
	    }

	    var nthDay = (nthWeek - 1) * 7 - rangeInfo.fweek + day;
	    var date = new Date(rangeInfo.start.time);
	    date.setDate(rangeInfo.start.d + nthDay);
	    return this.getDateInfo(date);
	  }
	};
	Calendar.dimensions = Calendar.prototype.dimensions;
	Calendar.getDimensionsInfo = Calendar.prototype.getDimensionsInfo;

	Calendar.create = function (ecModel, api) {
	  var calendarList = [];
	  ecModel.eachComponent('calendar', function (calendarModel) {
	    var calendar = new Calendar(calendarModel, ecModel, api);
	    calendarList.push(calendar);
	    calendarModel.coordinateSystem = calendar;
	  });
	  ecModel.eachSeries(function (calendarSeries) {
	    if (calendarSeries.get('coordinateSystem') === 'calendar') {
	      // Inject coordinate system
	      calendarSeries.coordinateSystem = calendarList[calendarSeries.get('calendarIndex') || 0];
	    }
	  });
	  return calendarList;
	};

	function doConvert(methodName, ecModel, finder, value) {
	  var calendarModel = finder.calendarModel;
	  var seriesModel = finder.seriesModel;
	  var coordSys = calendarModel ? calendarModel.coordinateSystem : seriesModel ? seriesModel.coordinateSystem : null;
	  return coordSys === this ? coordSys[methodName](value) : null;
	}

	CoordinateSystem.register('calendar', Calendar);
	var _default = Calendar;
	module.exports = _default;

/***/ },
/* 537 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var ComponentModel = __webpack_require__(245);

	var _layout = __webpack_require__(247);

	var getLayoutParams = _layout.getLayoutParams;
	var sizeCalculable = _layout.sizeCalculable;
	var mergeLayoutParam = _layout.mergeLayoutParam;
	var CalendarModel = ComponentModel.extend({
	  type: 'calendar',

	  /**
	   * @type {module:echarts/coord/calendar/Calendar}
	   */
	  coordinateSystem: null,
	  defaultOption: {
	    zlevel: 0,
	    z: 2,
	    left: 80,
	    top: 60,
	    cellSize: 20,
	    // horizontal vertical
	    orient: 'horizontal',
	    // month separate line style
	    splitLine: {
	      show: true,
	      lineStyle: {
	        color: '#000',
	        width: 1,
	        type: 'solid'
	      }
	    },
	    // rect style  temporarily unused emphasis
	    itemStyle: {
	      normal: {
	        color: '#fff',
	        borderWidth: 1,
	        borderColor: '#ccc'
	      }
	    },
	    // week text style
	    dayLabel: {
	      show: true,
	      // a week first day
	      firstDay: 0,
	      // start end
	      position: 'start',
	      margin: '50%',
	      // 50% of cellSize
	      nameMap: 'en',
	      color: '#000'
	    },
	    // month text style
	    monthLabel: {
	      show: true,
	      // start end
	      position: 'start',
	      margin: 5,
	      // center or left
	      align: 'center',
	      // cn en []
	      nameMap: 'en',
	      formatter: null,
	      color: '#000'
	    },
	    // year text style
	    yearLabel: {
	      show: true,
	      // top bottom left right
	      position: null,
	      margin: 30,
	      formatter: null,
	      color: '#ccc',
	      fontFamily: 'sans-serif',
	      fontWeight: 'bolder',
	      fontSize: 20
	    }
	  },

	  /**
	   * @override
	   */
	  init: function (option, parentModel, ecModel, extraOpt) {
	    var inputPositionParams = getLayoutParams(option);
	    CalendarModel.superApply(this, 'init', arguments);
	    mergeAndNormalizeLayoutParams(option, inputPositionParams);
	  },

	  /**
	   * @override
	   */
	  mergeOption: function (option, extraOpt) {
	    CalendarModel.superApply(this, 'mergeOption', arguments);
	    mergeAndNormalizeLayoutParams(this.option, option);
	  }
	});

	function mergeAndNormalizeLayoutParams(target, raw) {
	  // Normalize cellSize
	  var cellSize = target.cellSize;

	  if (!zrUtil.isArray(cellSize)) {
	    cellSize = target.cellSize = [cellSize, cellSize];
	  } else if (cellSize.length === 1) {
	    cellSize[1] = cellSize[0];
	  }

	  var ignoreSize = zrUtil.map([0, 1], function (hvIdx) {
	    // If user have set `width` or both `left` and `right`, cellSize
	    // will be automatically set to 'auto', otherwise the default
	    // setting of cellSize will make `width` setting not work.
	    if (sizeCalculable(raw, hvIdx)) {
	      cellSize[hvIdx] = 'auto';
	    }

	    return cellSize[hvIdx] != null && cellSize[hvIdx] !== 'auto';
	  });
	  mergeLayoutParam(target, raw, {
	    type: 'box',
	    ignoreSize: ignoreSize
	  });
	}

	var _default = CalendarModel;
	module.exports = _default;

/***/ },
/* 538 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var zrUtil = __webpack_require__(166);

	var graphic = __webpack_require__(212);

	var formatUtil = __webpack_require__(204);

	var numberUtil = __webpack_require__(205);

	var MONTH_TEXT = {
	  EN: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
	  CN: ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月']
	};
	var WEEK_TEXT = {
	  EN: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
	  CN: ['日', '一', '二', '三', '四', '五', '六']
	};

	var _default = echarts.extendComponentView({
	  type: 'calendar',

	  /**
	   * top/left line points
	   *  @private
	   */
	  _tlpoints: null,

	  /**
	   * bottom/right line points
	   *  @private
	   */
	  _blpoints: null,

	  /**
	   * first day of month
	   *  @private
	   */
	  _firstDayOfMonth: null,

	  /**
	   * first day point of month
	   *  @private
	   */
	  _firstDayPoints: null,
	  render: function (calendarModel, ecModel, api) {
	    var group = this.group;
	    group.removeAll();
	    var coordSys = calendarModel.coordinateSystem; // range info

	    var rangeData = coordSys.getRangeInfo();
	    var orient = coordSys.getOrient();

	    this._renderDayRect(calendarModel, rangeData, group); // _renderLines must be called prior to following function


	    this._renderLines(calendarModel, rangeData, orient, group);

	    this._renderYearText(calendarModel, rangeData, orient, group);

	    this._renderMonthText(calendarModel, orient, group);

	    this._renderWeekText(calendarModel, rangeData, orient, group);
	  },
	  // render day rect
	  _renderDayRect: function (calendarModel, rangeData, group) {
	    var coordSys = calendarModel.coordinateSystem;
	    var itemRectStyleModel = calendarModel.getModel('itemStyle.normal').getItemStyle();
	    var sw = coordSys.getCellWidth();
	    var sh = coordSys.getCellHeight();

	    for (var i = rangeData.start.time; i <= rangeData.end.time; i = coordSys.getNextNDay(i, 1).time) {
	      var point = coordSys.dataToRect([i], false).tl; // every rect

	      var rect = new graphic.Rect({
	        shape: {
	          x: point[0],
	          y: point[1],
	          width: sw,
	          height: sh
	        },
	        cursor: 'default',
	        style: itemRectStyleModel
	      });
	      group.add(rect);
	    }
	  },
	  // render separate line
	  _renderLines: function (calendarModel, rangeData, orient, group) {
	    var self = this;
	    var coordSys = calendarModel.coordinateSystem;
	    var lineStyleModel = calendarModel.getModel('splitLine.lineStyle').getLineStyle();
	    var show = calendarModel.get('splitLine.show');
	    var lineWidth = lineStyleModel.lineWidth;
	    this._tlpoints = [];
	    this._blpoints = [];
	    this._firstDayOfMonth = [];
	    this._firstDayPoints = [];
	    var firstDay = rangeData.start;

	    for (var i = 0; firstDay.time <= rangeData.end.time; i++) {
	      addPoints(firstDay.formatedDate);

	      if (i === 0) {
	        firstDay = coordSys.getDateInfo(rangeData.start.y + '-' + rangeData.start.m);
	      }

	      var date = firstDay.date;
	      date.setMonth(date.getMonth() + 1);
	      firstDay = coordSys.getDateInfo(date);
	    }

	    addPoints(coordSys.getNextNDay(rangeData.end.time, 1).formatedDate);

	    function addPoints(date) {
	      self._firstDayOfMonth.push(coordSys.getDateInfo(date));

	      self._firstDayPoints.push(coordSys.dataToRect([date], false).tl);

	      var points = self._getLinePointsOfOneWeek(calendarModel, date, orient);

	      self._tlpoints.push(points[0]);

	      self._blpoints.push(points[points.length - 1]);

	      show && self._drawSplitline(points, lineStyleModel, group);
	    } // render top/left line


	    show && this._drawSplitline(self._getEdgesPoints(self._tlpoints, lineWidth, orient), lineStyleModel, group); // render bottom/right line

	    show && this._drawSplitline(self._getEdgesPoints(self._blpoints, lineWidth, orient), lineStyleModel, group);
	  },
	  // get points at both ends
	  _getEdgesPoints: function (points, lineWidth, orient) {
	    var rs = [points[0].slice(), points[points.length - 1].slice()];
	    var idx = orient === 'horizontal' ? 0 : 1; // both ends of the line are extend half lineWidth

	    rs[0][idx] = rs[0][idx] - lineWidth / 2;
	    rs[1][idx] = rs[1][idx] + lineWidth / 2;
	    return rs;
	  },
	  // render split line
	  _drawSplitline: function (points, lineStyleModel, group) {
	    var poyline = new graphic.Polyline({
	      z2: 20,
	      shape: {
	        points: points
	      },
	      style: lineStyleModel
	    });
	    group.add(poyline);
	  },
	  // render month line of one week points
	  _getLinePointsOfOneWeek: function (calendarModel, date, orient) {
	    var coordSys = calendarModel.coordinateSystem;
	    date = coordSys.getDateInfo(date);
	    var points = [];

	    for (var i = 0; i < 7; i++) {
	      var tmpD = coordSys.getNextNDay(date.time, i);
	      var point = coordSys.dataToRect([tmpD.time], false);
	      points[2 * tmpD.day] = point.tl;
	      points[2 * tmpD.day + 1] = point[orient === 'horizontal' ? 'bl' : 'tr'];
	    }

	    return points;
	  },
	  _formatterLabel: function (formatter, params) {
	    if (typeof formatter === 'string' && formatter) {
	      return formatUtil.formatTplSimple(formatter, params);
	    }

	    if (typeof formatter === 'function') {
	      return formatter(params);
	    }

	    return params.nameMap;
	  },
	  _yearTextPositionControl: function (textEl, point, orient, position, margin) {
	    point = point.slice();
	    var aligns = ['center', 'bottom'];

	    if (position === 'bottom') {
	      point[1] += margin;
	      aligns = ['center', 'top'];
	    } else if (position === 'left') {
	      point[0] -= margin;
	    } else if (position === 'right') {
	      point[0] += margin;
	      aligns = ['center', 'top'];
	    } else {
	      // top
	      point[1] -= margin;
	    }

	    var rotate = 0;

	    if (position === 'left' || position === 'right') {
	      rotate = Math.PI / 2;
	    }

	    return {
	      rotation: rotate,
	      position: point,
	      style: {
	        textAlign: aligns[0],
	        textVerticalAlign: aligns[1]
	      }
	    };
	  },
	  // render year
	  _renderYearText: function (calendarModel, rangeData, orient, group) {
	    var yearLabel = calendarModel.getModel('yearLabel');

	    if (!yearLabel.get('show')) {
	      return;
	    }

	    var margin = yearLabel.get('margin');
	    var pos = yearLabel.get('position');

	    if (!pos) {
	      pos = orient !== 'horizontal' ? 'top' : 'left';
	    }

	    var points = [this._tlpoints[this._tlpoints.length - 1], this._blpoints[0]];
	    var xc = (points[0][0] + points[1][0]) / 2;
	    var yc = (points[0][1] + points[1][1]) / 2;
	    var idx = orient === 'horizontal' ? 0 : 1;
	    var posPoints = {
	      top: [xc, points[idx][1]],
	      bottom: [xc, points[1 - idx][1]],
	      left: [points[1 - idx][0], yc],
	      right: [points[idx][0], yc]
	    };
	    var name = rangeData.start.y;

	    if (+rangeData.end.y > +rangeData.start.y) {
	      name = name + '-' + rangeData.end.y;
	    }

	    var formatter = yearLabel.get('formatter');
	    var params = {
	      start: rangeData.start.y,
	      end: rangeData.end.y,
	      nameMap: name
	    };

	    var content = this._formatterLabel(formatter, params);

	    var yearText = new graphic.Text({
	      z2: 30
	    });
	    graphic.setTextStyle(yearText.style, yearLabel, {
	      text: content
	    }), yearText.attr(this._yearTextPositionControl(yearText, posPoints[pos], orient, pos, margin));
	    group.add(yearText);
	  },
	  _monthTextPositionControl: function (point, isCenter, orient, position, margin) {
	    var align = 'left';
	    var vAlign = 'top';
	    var x = point[0];
	    var y = point[1];

	    if (orient === 'horizontal') {
	      y = y + margin;

	      if (isCenter) {
	        align = 'center';
	      }

	      if (position === 'start') {
	        vAlign = 'bottom';
	      }
	    } else {
	      x = x + margin;

	      if (isCenter) {
	        vAlign = 'middle';
	      }

	      if (position === 'start') {
	        align = 'right';
	      }
	    }

	    return {
	      x: x,
	      y: y,
	      textAlign: align,
	      textVerticalAlign: vAlign
	    };
	  },
	  // render month and year text
	  _renderMonthText: function (calendarModel, orient, group) {
	    var monthLabel = calendarModel.getModel('monthLabel');

	    if (!monthLabel.get('show')) {
	      return;
	    }

	    var nameMap = monthLabel.get('nameMap');
	    var margin = monthLabel.get('margin');
	    var pos = monthLabel.get('position');
	    var align = monthLabel.get('align');
	    var termPoints = [this._tlpoints, this._blpoints];

	    if (zrUtil.isString(nameMap)) {
	      nameMap = MONTH_TEXT[nameMap.toUpperCase()] || [];
	    }

	    var idx = pos === 'start' ? 0 : 1;
	    var axis = orient === 'horizontal' ? 0 : 1;
	    margin = pos === 'start' ? -margin : margin;
	    var isCenter = align === 'center';

	    for (var i = 0; i < termPoints[idx].length - 1; i++) {
	      var tmp = termPoints[idx][i].slice();
	      var firstDay = this._firstDayOfMonth[i];

	      if (isCenter) {
	        var firstDayPoints = this._firstDayPoints[i];
	        tmp[axis] = (firstDayPoints[axis] + termPoints[0][i + 1][axis]) / 2;
	      }

	      var formatter = monthLabel.get('formatter');
	      var name = nameMap[+firstDay.m - 1];
	      var params = {
	        yyyy: firstDay.y,
	        yy: (firstDay.y + '').slice(2),
	        MM: firstDay.m,
	        M: +firstDay.m,
	        nameMap: name
	      };

	      var content = this._formatterLabel(formatter, params);

	      var monthText = new graphic.Text({
	        z2: 30
	      });
	      zrUtil.extend(graphic.setTextStyle(monthText.style, monthLabel, {
	        text: content
	      }), this._monthTextPositionControl(tmp, isCenter, orient, pos, margin));
	      group.add(monthText);
	    }
	  },
	  _weekTextPositionControl: function (point, orient, position, margin, cellSize) {
	    var align = 'center';
	    var vAlign = 'middle';
	    var x = point[0];
	    var y = point[1];
	    var isStart = position === 'start';

	    if (orient === 'horizontal') {
	      x = x + margin + (isStart ? 1 : -1) * cellSize[0] / 2;
	      align = isStart ? 'right' : 'left';
	    } else {
	      y = y + margin + (isStart ? 1 : -1) * cellSize[1] / 2;
	      vAlign = isStart ? 'bottom' : 'top';
	    }

	    return {
	      x: x,
	      y: y,
	      textAlign: align,
	      textVerticalAlign: vAlign
	    };
	  },
	  // render weeks
	  _renderWeekText: function (calendarModel, rangeData, orient, group) {
	    var dayLabel = calendarModel.getModel('dayLabel');

	    if (!dayLabel.get('show')) {
	      return;
	    }

	    var coordSys = calendarModel.coordinateSystem;
	    var pos = dayLabel.get('position');
	    var nameMap = dayLabel.get('nameMap');
	    var margin = dayLabel.get('margin');
	    var firstDayOfWeek = coordSys.getFirstDayOfWeek();

	    if (zrUtil.isString(nameMap)) {
	      nameMap = WEEK_TEXT[nameMap.toUpperCase()] || [];
	    }

	    var start = coordSys.getNextNDay(rangeData.end.time, 7 - rangeData.lweek).time;
	    var cellSize = [coordSys.getCellWidth(), coordSys.getCellHeight()];
	    margin = numberUtil.parsePercent(margin, cellSize[orient === 'horizontal' ? 0 : 1]);

	    if (pos === 'start') {
	      start = coordSys.getNextNDay(rangeData.start.time, -(7 + rangeData.fweek)).time;
	      margin = -margin;
	    }

	    for (var i = 0; i < 7; i++) {
	      var tmpD = coordSys.getNextNDay(start, i);
	      var point = coordSys.dataToRect([tmpD.time], false).center;
	      var day = i;
	      day = Math.abs((i + firstDayOfWeek) % 7);
	      var weekText = new graphic.Text({
	        z2: 30
	      });
	      zrUtil.extend(graphic.setTextStyle(weekText.style, dayLabel, {
	        text: nameMap[day]
	      }), this._weekTextPositionControl(point, orient, pos, margin, cellSize));
	      group.add(weekText);
	    }
	  }
	});

	module.exports = _default;

/***/ },
/* 539 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var graphic = __webpack_require__(212);

	var _layout = __webpack_require__(247);

	var getLayoutRect = _layout.getLayoutRect;
	// Model
	echarts.extendComponentModel({
	  type: 'title',
	  layoutMode: {
	    type: 'box',
	    ignoreSize: true
	  },
	  defaultOption: {
	    // 一级层叠
	    zlevel: 0,
	    // 二级层叠
	    z: 6,
	    show: true,
	    text: '',
	    // 超链接跳转
	    // link: null,
	    // 仅支持self | blank
	    target: 'blank',
	    subtext: '',
	    // 超链接跳转
	    // sublink: null,
	    // 仅支持self | blank
	    subtarget: 'blank',
	    // 'center' ¦ 'left' ¦ 'right'
	    // ¦ {number}（x坐标，单位px）
	    left: 0,
	    // 'top' ¦ 'bottom' ¦ 'center'
	    // ¦ {number}（y坐标，单位px）
	    top: 0,
	    // 水平对齐
	    // 'auto' | 'left' | 'right' | 'center'
	    // 默认根据 left 的位置判断是左对齐还是右对齐
	    // textAlign: null
	    //
	    // 垂直对齐
	    // 'auto' | 'top' | 'bottom' | 'middle'
	    // 默认根据 top 位置判断是上对齐还是下对齐
	    // textBaseline: null
	    backgroundColor: 'rgba(0,0,0,0)',
	    // 标题边框颜色
	    borderColor: '#ccc',
	    // 标题边框线宽，单位px，默认为0（无边框）
	    borderWidth: 0,
	    // 标题内边距，单位px，默认各方向内边距为5，
	    // 接受数组分别设定上右下左边距，同css
	    padding: 5,
	    // 主副标题纵向间隔，单位px，默认为10，
	    itemGap: 10,
	    textStyle: {
	      fontSize: 18,
	      fontWeight: 'bolder',
	      color: '#333'
	    },
	    subtextStyle: {
	      color: '#aaa'
	    }
	  }
	}); // View

	echarts.extendComponentView({
	  type: 'title',
	  render: function (titleModel, ecModel, api) {
	    this.group.removeAll();

	    if (!titleModel.get('show')) {
	      return;
	    }

	    var group = this.group;
	    var textStyleModel = titleModel.getModel('textStyle');
	    var subtextStyleModel = titleModel.getModel('subtextStyle');
	    var textAlign = titleModel.get('textAlign');
	    var textBaseline = titleModel.get('textBaseline');
	    var textEl = new graphic.Text({
	      style: graphic.setTextStyle({}, textStyleModel, {
	        text: titleModel.get('text'),
	        textFill: textStyleModel.getTextColor()
	      }, {
	        disableBox: true
	      }),
	      z2: 10
	    });
	    var textRect = textEl.getBoundingRect();
	    var subText = titleModel.get('subtext');
	    var subTextEl = new graphic.Text({
	      style: graphic.setTextStyle({}, subtextStyleModel, {
	        text: subText,
	        textFill: subtextStyleModel.getTextColor(),
	        y: textRect.height + titleModel.get('itemGap'),
	        textVerticalAlign: 'top'
	      }, {
	        disableBox: true
	      }),
	      z2: 10
	    });
	    var link = titleModel.get('link');
	    var sublink = titleModel.get('sublink');
	    textEl.silent = !link;
	    subTextEl.silent = !sublink;

	    if (link) {
	      textEl.on('click', function () {
	        window.open(link, '_' + titleModel.get('target'));
	      });
	    }

	    if (sublink) {
	      subTextEl.on('click', function () {
	        window.open(sublink, '_' + titleModel.get('subtarget'));
	      });
	    }

	    group.add(textEl);
	    subText && group.add(subTextEl); // If no subText, but add subTextEl, there will be an empty line.

	    var groupRect = group.getBoundingRect();
	    var layoutOption = titleModel.getBoxLayoutParams();
	    layoutOption.width = groupRect.width;
	    layoutOption.height = groupRect.height;
	    var layoutRect = getLayoutRect(layoutOption, {
	      width: api.getWidth(),
	      height: api.getHeight()
	    }, titleModel.get('padding')); // Adjust text align based on position

	    if (!textAlign) {
	      // Align left if title is on the left. center and right is same
	      textAlign = titleModel.get('left') || titleModel.get('right');

	      if (textAlign === 'middle') {
	        textAlign = 'center';
	      } // Adjust layout by text align


	      if (textAlign === 'right') {
	        layoutRect.x += layoutRect.width;
	      } else if (textAlign === 'center') {
	        layoutRect.x += layoutRect.width / 2;
	      }
	    }

	    if (!textBaseline) {
	      textBaseline = titleModel.get('top') || titleModel.get('bottom');

	      if (textBaseline === 'center') {
	        textBaseline = 'middle';
	      }

	      if (textBaseline === 'bottom') {
	        layoutRect.y += layoutRect.height;
	      } else if (textBaseline === 'middle') {
	        layoutRect.y += layoutRect.height / 2;
	      }

	      textBaseline = textBaseline || 'top';
	    }

	    group.attr('position', [layoutRect.x, layoutRect.y]);
	    var alignStyle = {
	      textAlign: textAlign,
	      textVerticalAlign: textBaseline
	    };
	    textEl.setStyle(alignStyle);
	    subTextEl.setStyle(alignStyle); // Render background
	    // Get groupRect again because textAlign has been changed

	    groupRect = group.getBoundingRect();
	    var padding = layoutRect.margin;
	    var style = titleModel.getItemStyle(['color', 'opacity']);
	    style.fill = titleModel.get('backgroundColor');
	    var rect = new graphic.Rect({
	      shape: {
	        x: groupRect.x - padding[3],
	        y: groupRect.y - padding[0],
	        width: groupRect.width + padding[1] + padding[3],
	        height: groupRect.height + padding[0] + padding[2],
	        r: titleModel.get('borderRadius')
	      },
	      style: style,
	      silent: true
	    });
	    graphic.subPixelOptimizeRect(rect);
	    group.add(rect);
	  }
	});

/***/ },
/* 540 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(541);

	__webpack_require__(542);

	__webpack_require__(545);

	__webpack_require__(546);

	__webpack_require__(547);

	__webpack_require__(548);

	__webpack_require__(549);

	__webpack_require__(551);

	__webpack_require__(552);

/***/ },
/* 541 */
/***/ function(module, exports, __webpack_require__) {

	var Component = __webpack_require__(245);

	Component.registerSubTypeDefaulter('dataZoom', function () {
	  // Default 'slider' when no type specified.
	  return 'slider';
	});

/***/ },
/* 542 */
/***/ function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(162);

	var __DEV__ = _config.__DEV__;

	var echarts = __webpack_require__(161);

	var zrUtil = __webpack_require__(166);

	var env = __webpack_require__(165);

	var modelUtil = __webpack_require__(203);

	var helper = __webpack_require__(543);

	var AxisProxy = __webpack_require__(544);

	var each = zrUtil.each;
	var eachAxisDim = helper.eachAxisDim;
	var DataZoomModel = echarts.extendComponentModel({
	  type: 'dataZoom',
	  dependencies: ['xAxis', 'yAxis', 'zAxis', 'radiusAxis', 'angleAxis', 'singleAxis', 'series'],

	  /**
	   * @protected
	   */
	  defaultOption: {
	    zlevel: 0,
	    z: 4,
	    // Higher than normal component (z: 2).
	    orient: null,
	    // Default auto by axisIndex. Possible value: 'horizontal', 'vertical'.
	    xAxisIndex: null,
	    // Default the first horizontal category axis.
	    yAxisIndex: null,
	    // Default the first vertical category axis.
	    filterMode: 'filter',
	    // Possible values: 'filter' or 'empty' or 'weakFilter'.
	    // 'filter': data items which are out of window will be removed. This option is
	    //          applicable when filtering outliers. For each data item, it will be
	    //          filtered if one of the relevant dimensions is out of the window.
	    // 'weakFilter': data items which are out of window will be removed. This option
	    //          is applicable when filtering outliers. For each data item, it will be
	    //          filtered only if all  of the relevant dimensions are out of the same
	    //          side of the window.
	    // 'empty': data items which are out of window will be set to empty.
	    //          This option is applicable when user should not neglect
	    //          that there are some data items out of window.
	    // 'none': Do not filter.
	    // Taking line chart as an example, line will be broken in
	    // the filtered points when filterModel is set to 'empty', but
	    // be connected when set to 'filter'.
	    throttle: null,
	    // Dispatch action by the fixed rate, avoid frequency.
	    // default 100. Do not throttle when use null/undefined.
	    // If animation === true and animationDurationUpdate > 0,
	    // default value is 100, otherwise 20.
	    start: 0,
	    // Start percent. 0 ~ 100
	    end: 100,
	    // End percent. 0 ~ 100
	    startValue: null,
	    // Start value. If startValue specified, start is ignored.
	    endValue: null,
	    // End value. If endValue specified, end is ignored.
	    minSpan: null,
	    // 0 ~ 100
	    maxSpan: null,
	    // 0 ~ 100
	    minValueSpan: null,
	    // The range of dataZoom can not be smaller than that.
	    maxValueSpan: null,
	    // The range of dataZoom can not be larger than that.
	    rangeMode: null // Array, can be 'value' or 'percent'.

	  },

	  /**
	   * @override
	   */
	  init: function (option, parentModel, ecModel) {
	    /**
	     * key like x_0, y_1
	     * @private
	     * @type {Object}
	     */
	    this._dataIntervalByAxis = {};
	    /**
	     * @private
	     */

	    this._dataInfo = {};
	    /**
	     * key like x_0, y_1
	     * @private
	     */

	    this._axisProxies = {};
	    /**
	     * @readOnly
	     */

	    this.textStyleModel;
	    /**
	     * @private
	     */

	    this._autoThrottle = true;
	    /**
	     * 'percent' or 'value'
	     * @private
	     */

	    this._rangePropMode = ['percent', 'percent'];
	    var rawOption = retrieveRaw(option);
	    this.mergeDefaultAndTheme(option, ecModel);
	    this.doInit(rawOption);
	  },

	  /**
	   * @override
	   */
	  mergeOption: function (newOption) {
	    var rawOption = retrieveRaw(newOption); //FIX #2591

	    zrUtil.merge(this.option, newOption, true);
	    this.doInit(rawOption);
	  },

	  /**
	   * @protected
	   */
	  doInit: function (rawOption) {
	    var thisOption = this.option; // Disable realtime view update if canvas is not supported.

	    if (!env.canvasSupported) {
	      thisOption.realtime = false;
	    }

	    this._setDefaultThrottle(rawOption);

	    updateRangeUse(this, rawOption);
	    each([['start', 'startValue'], ['end', 'endValue']], function (names, index) {
	      // start/end has higher priority over startValue/endValue if they
	      // both set, but we should make chart.setOption({endValue: 1000})
	      // effective, rather than chart.setOption({endValue: 1000, end: null}).
	      if (this._rangePropMode[index] === 'value') {
	        thisOption[names[0]] = null;
	      } // Otherwise do nothing and use the merge result.

	    }, this);
	    this.textStyleModel = this.getModel('textStyle');

	    this._resetTarget();

	    this._giveAxisProxies();
	  },

	  /**
	   * @private
	   */
	  _giveAxisProxies: function () {
	    var axisProxies = this._axisProxies;
	    this.eachTargetAxis(function (dimNames, axisIndex, dataZoomModel, ecModel) {
	      var axisModel = this.dependentModels[dimNames.axis][axisIndex]; // If exists, share axisProxy with other dataZoomModels.

	      var axisProxy = axisModel.__dzAxisProxy || ( // Use the first dataZoomModel as the main model of axisProxy.
	      axisModel.__dzAxisProxy = new AxisProxy(dimNames.name, axisIndex, this, ecModel)); // FIXME
	      // dispose __dzAxisProxy

	      axisProxies[dimNames.name + '_' + axisIndex] = axisProxy;
	    }, this);
	  },

	  /**
	   * @private
	   */
	  _resetTarget: function () {
	    var thisOption = this.option;

	    var autoMode = this._judgeAutoMode();

	    eachAxisDim(function (dimNames) {
	      var axisIndexName = dimNames.axisIndex;
	      thisOption[axisIndexName] = modelUtil.normalizeToArray(thisOption[axisIndexName]);
	    }, this);

	    if (autoMode === 'axisIndex') {
	      this._autoSetAxisIndex();
	    } else if (autoMode === 'orient') {
	      this._autoSetOrient();
	    }
	  },

	  /**
	   * @private
	   */
	  _judgeAutoMode: function () {
	    // Auto set only works for setOption at the first time.
	    // The following is user's reponsibility. So using merged
	    // option is OK.
	    var thisOption = this.option;
	    var hasIndexSpecified = false;
	    eachAxisDim(function (dimNames) {
	      // When user set axisIndex as a empty array, we think that user specify axisIndex
	      // but do not want use auto mode. Because empty array may be encountered when
	      // some error occured.
	      if (thisOption[dimNames.axisIndex] != null) {
	        hasIndexSpecified = true;
	      }
	    }, this);
	    var orient = thisOption.orient;

	    if (orient == null && hasIndexSpecified) {
	      return 'orient';
	    } else if (!hasIndexSpecified) {
	      if (orient == null) {
	        thisOption.orient = 'horizontal';
	      }

	      return 'axisIndex';
	    }
	  },

	  /**
	   * @private
	   */
	  _autoSetAxisIndex: function () {
	    var autoAxisIndex = true;
	    var orient = this.get('orient', true);
	    var thisOption = this.option;
	    var dependentModels = this.dependentModels;

	    if (autoAxisIndex) {
	      // Find axis that parallel to dataZoom as default.
	      var dimName = orient === 'vertical' ? 'y' : 'x';

	      if (dependentModels[dimName + 'Axis'].length) {
	        thisOption[dimName + 'AxisIndex'] = [0];
	        autoAxisIndex = false;
	      } else {
	        each(dependentModels.singleAxis, function (singleAxisModel) {
	          if (autoAxisIndex && singleAxisModel.get('orient', true) === orient) {
	            thisOption.singleAxisIndex = [singleAxisModel.componentIndex];
	            autoAxisIndex = false;
	          }
	        });
	      }
	    }

	    if (autoAxisIndex) {
	      // Find the first category axis as default. (consider polar)
	      eachAxisDim(function (dimNames) {
	        if (!autoAxisIndex) {
	          return;
	        }

	        var axisIndices = [];
	        var axisModels = this.dependentModels[dimNames.axis];

	        if (axisModels.length && !axisIndices.length) {
	          for (var i = 0, len = axisModels.length; i < len; i++) {
	            if (axisModels[i].get('type') === 'category') {
	              axisIndices.push(i);
	            }
	          }
	        }

	        thisOption[dimNames.axisIndex] = axisIndices;

	        if (axisIndices.length) {
	          autoAxisIndex = false;
	        }
	      }, this);
	    }

	    if (autoAxisIndex) {
	      // FIXME
	      // 这里是兼容ec2的写法（没指定xAxisIndex和yAxisIndex时把scatter和双数值轴折柱纳入dataZoom控制），
	      // 但是实际是否需要Grid.js#getScaleByOption来判断（考虑time，log等axis type）？
	      // If both dataZoom.xAxisIndex and dataZoom.yAxisIndex is not specified,
	      // dataZoom component auto adopts series that reference to
	      // both xAxis and yAxis which type is 'value'.
	      this.ecModel.eachSeries(function (seriesModel) {
	        if (this._isSeriesHasAllAxesTypeOf(seriesModel, 'value')) {
	          eachAxisDim(function (dimNames) {
	            var axisIndices = thisOption[dimNames.axisIndex];
	            var axisIndex = seriesModel.get(dimNames.axisIndex);
	            var axisId = seriesModel.get(dimNames.axisId);
	            var axisModel = seriesModel.ecModel.queryComponents({
	              mainType: dimNames.axis,
	              index: axisIndex,
	              id: axisId
	            })[0];
	            axisIndex = axisModel.componentIndex;

	            if (zrUtil.indexOf(axisIndices, axisIndex) < 0) {
	              axisIndices.push(axisIndex);
	            }
	          });
	        }
	      }, this);
	    }
	  },

	  /**
	   * @private
	   */
	  _autoSetOrient: function () {
	    var dim; // Find the first axis

	    this.eachTargetAxis(function (dimNames) {
	      !dim && (dim = dimNames.name);
	    }, this);
	    this.option.orient = dim === 'y' ? 'vertical' : 'horizontal';
	  },

	  /**
	   * @private
	   */
	  _isSeriesHasAllAxesTypeOf: function (seriesModel, axisType) {
	    // FIXME
	    // 需要series的xAxisIndex和yAxisIndex都首先自动设置上。
	    // 例如series.type === scatter时。
	    var is = true;
	    eachAxisDim(function (dimNames) {
	      var seriesAxisIndex = seriesModel.get(dimNames.axisIndex);
	      var axisModel = this.dependentModels[dimNames.axis][seriesAxisIndex];

	      if (!axisModel || axisModel.get('type') !== axisType) {
	        is = false;
	      }
	    }, this);
	    return is;
	  },

	  /**
	   * @private
	   */
	  _setDefaultThrottle: function (rawOption) {
	    // When first time user set throttle, auto throttle ends.
	    if (rawOption.hasOwnProperty('throttle')) {
	      this._autoThrottle = false;
	    }

	    if (this._autoThrottle) {
	      var globalOption = this.ecModel.option;
	      this.option.throttle = globalOption.animation && globalOption.animationDurationUpdate > 0 ? 100 : 20;
	    }
	  },

	  /**
	   * @public
	   */
	  getFirstTargetAxisModel: function () {
	    var firstAxisModel;
	    eachAxisDim(function (dimNames) {
	      if (firstAxisModel == null) {
	        var indices = this.get(dimNames.axisIndex);

	        if (indices.length) {
	          firstAxisModel = this.dependentModels[dimNames.axis][indices[0]];
	        }
	      }
	    }, this);
	    return firstAxisModel;
	  },

	  /**
	   * @public
	   * @param {Function} callback param: axisModel, dimNames, axisIndex, dataZoomModel, ecModel
	   */
	  eachTargetAxis: function (callback, context) {
	    var ecModel = this.ecModel;
	    eachAxisDim(function (dimNames) {
	      each(this.get(dimNames.axisIndex), function (axisIndex) {
	        callback.call(context, dimNames, axisIndex, this, ecModel);
	      }, this);
	    }, this);
	  },

	  /**
	   * @param {string} dimName
	   * @param {number} axisIndex
	   * @return {module:echarts/component/dataZoom/AxisProxy} If not found, return null/undefined.
	   */
	  getAxisProxy: function (dimName, axisIndex) {
	    return this._axisProxies[dimName + '_' + axisIndex];
	  },

	  /**
	   * @param {string} dimName
	   * @param {number} axisIndex
	   * @return {module:echarts/model/Model} If not found, return null/undefined.
	   */
	  getAxisModel: function (dimName, axisIndex) {
	    var axisProxy = this.getAxisProxy(dimName, axisIndex);
	    return axisProxy && axisProxy.getAxisModel();
	  },

	  /**
	   * If not specified, set to undefined.
	   *
	   * @public
	   * @param {Object} opt
	   * @param {number} [opt.start]
	   * @param {number} [opt.end]
	   * @param {number} [opt.startValue]
	   * @param {number} [opt.endValue]
	   * @param {boolean} [ignoreUpdateRangeUsg=false]
	   */
	  setRawRange: function (opt, ignoreUpdateRangeUsg) {
	    var option = this.option;
	    each([['start', 'startValue'], ['end', 'endValue']], function (names) {
	      // If only one of 'start' and 'startValue' is not null/undefined, the other
	      // should be cleared, which enable clear the option.
	      // If both of them are not set, keep option with the original value, which
	      // enable use only set start but not set end when calling `dispatchAction`.
	      // The same as 'end' and 'endValue'.
	      if (opt[names[0]] != null || opt[names[1]] != null) {
	        option[names[0]] = opt[names[0]];
	        option[names[1]] = opt[names[1]];
	      }
	    }, this);
	    !ignoreUpdateRangeUsg && updateRangeUse(this, opt);
	  },

	  /**
	   * @public
	   * @return {Array.<number>} [startPercent, endPercent]
	   */
	  getPercentRange: function () {
	    var axisProxy = this.findRepresentativeAxisProxy();

	    if (axisProxy) {
	      return axisProxy.getDataPercentWindow();
	    }
	  },

	  /**
	   * @public
	   * For example, chart.getModel().getComponent('dataZoom').getValueRange('y', 0);
	   *
	   * @param {string} [axisDimName]
	   * @param {number} [axisIndex]
	   * @return {Array.<number>} [startValue, endValue] value can only be '-' or finite number.
	   */
	  getValueRange: function (axisDimName, axisIndex) {
	    if (axisDimName == null && axisIndex == null) {
	      var axisProxy = this.findRepresentativeAxisProxy();

	      if (axisProxy) {
	        return axisProxy.getDataValueWindow();
	      }
	    } else {
	      return this.getAxisProxy(axisDimName, axisIndex).getDataValueWindow();
	    }
	  },

	  /**
	   * @public
	   * @param {module:echarts/model/Model} [axisModel] If axisModel given, find axisProxy
	   *      corresponding to the axisModel
	   * @return {module:echarts/component/dataZoom/AxisProxy}
	   */
	  findRepresentativeAxisProxy: function (axisModel) {
	    if (axisModel) {
	      return axisModel.__dzAxisProxy;
	    } // Find the first hosted axisProxy


	    var axisProxies = this._axisProxies;

	    for (var key in axisProxies) {
	      if (axisProxies.hasOwnProperty(key) && axisProxies[key].hostedBy(this)) {
	        return axisProxies[key];
	      }
	    } // If no hosted axis find not hosted axisProxy.
	    // Consider this case: dataZoomModel1 and dataZoomModel2 control the same axis,
	    // and the option.start or option.end settings are different. The percentRange
	    // should follow axisProxy.
	    // (We encounter this problem in toolbox data zoom.)


	    for (var key in axisProxies) {
	      if (axisProxies.hasOwnProperty(key) && !axisProxies[key].hostedBy(this)) {
	        return axisProxies[key];
	      }
	    }
	  },

	  /**
	   * @return {Array.<string>}
	   */
	  getRangePropMode: function () {
	    return this._rangePropMode.slice();
	  }
	});

	function retrieveRaw(option) {
	  var ret = {};
	  each(['start', 'end', 'startValue', 'endValue', 'throttle'], function (name) {
	    option.hasOwnProperty(name) && (ret[name] = option[name]);
	  });
	  return ret;
	}

	function updateRangeUse(dataZoomModel, rawOption) {
	  var rangePropMode = dataZoomModel._rangePropMode;
	  var rangeModeInOption = dataZoomModel.get('rangeMode');
	  each([['start', 'startValue'], ['end', 'endValue']], function (names, index) {
	    var percentSpecified = rawOption[names[0]] != null;
	    var valueSpecified = rawOption[names[1]] != null;

	    if (percentSpecified && !valueSpecified) {
	      rangePropMode[index] = 'percent';
	    } else if (!percentSpecified && valueSpecified) {
	      rangePropMode[index] = 'value';
	    } else if (rangeModeInOption) {
	      rangePropMode[index] = rangeModeInOption[index];
	    } else if (percentSpecified) {
	      // percentSpecified && valueSpecified
	      rangePropMode[index] = 'percent';
	    } // else remain its original setting.

	  });
	}

	var _default = DataZoomModel;
	module.exports = _default;

/***/ },
/* 543 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var formatUtil = __webpack_require__(204);

	var AXIS_DIMS = ['x', 'y', 'z', 'radius', 'angle', 'single']; // Supported coords.

	var COORDS = ['cartesian2d', 'polar', 'singleAxis'];
	/**
	 * @param {string} coordType
	 * @return {boolean}
	 */

	function isCoordSupported(coordType) {
	  return zrUtil.indexOf(COORDS, coordType) >= 0;
	}
	/**
	 * Create "each" method to iterate names.
	 *
	 * @pubilc
	 * @param  {Array.<string>} names
	 * @param  {Array.<string>=} attrs
	 * @return {Function}
	 */


	function createNameEach(names, attrs) {
	  names = names.slice();
	  var capitalNames = zrUtil.map(names, formatUtil.capitalFirst);
	  attrs = (attrs || []).slice();
	  var capitalAttrs = zrUtil.map(attrs, formatUtil.capitalFirst);
	  return function (callback, context) {
	    zrUtil.each(names, function (name, index) {
	      var nameObj = {
	        name: name,
	        capital: capitalNames[index]
	      };

	      for (var j = 0; j < attrs.length; j++) {
	        nameObj[attrs[j]] = name + capitalAttrs[j];
	      }

	      callback.call(context, nameObj);
	    });
	  };
	}
	/**
	 * Iterate each dimension name.
	 *
	 * @public
	 * @param {Function} callback The parameter is like:
	 *                            {
	 *                                name: 'angle',
	 *                                capital: 'Angle',
	 *                                axis: 'angleAxis',
	 *                                axisIndex: 'angleAixs',
	 *                                index: 'angleIndex'
	 *                            }
	 * @param {Object} context
	 */


	var eachAxisDim = createNameEach(AXIS_DIMS, ['axisIndex', 'axis', 'index', 'id']);
	/**
	 * If tow dataZoomModels has the same axis controlled, we say that they are 'linked'.
	 * dataZoomModels and 'links' make up one or more graphics.
	 * This function finds the graphic where the source dataZoomModel is in.
	 *
	 * @public
	 * @param {Function} forEachNode Node iterator.
	 * @param {Function} forEachEdgeType edgeType iterator
	 * @param {Function} edgeIdGetter Giving node and edgeType, return an array of edge id.
	 * @return {Function} Input: sourceNode, Output: Like {nodes: [], dims: {}}
	 */

	function createLinkedNodesFinder(forEachNode, forEachEdgeType, edgeIdGetter) {
	  return function (sourceNode) {
	    var result = {
	      nodes: [],
	      records: {} // key: edgeType.name, value: Object (key: edge id, value: boolean).

	    };
	    forEachEdgeType(function (edgeType) {
	      result.records[edgeType.name] = {};
	    });

	    if (!sourceNode) {
	      return result;
	    }

	    absorb(sourceNode, result);
	    var existsLink;

	    do {
	      existsLink = false;
	      forEachNode(processSingleNode);
	    } while (existsLink);

	    function processSingleNode(node) {
	      if (!isNodeAbsorded(node, result) && isLinked(node, result)) {
	        absorb(node, result);
	        existsLink = true;
	      }
	    }

	    return result;
	  };

	  function isNodeAbsorded(node, result) {
	    return zrUtil.indexOf(result.nodes, node) >= 0;
	  }

	  function isLinked(node, result) {
	    var hasLink = false;
	    forEachEdgeType(function (edgeType) {
	      zrUtil.each(edgeIdGetter(node, edgeType) || [], function (edgeId) {
	        result.records[edgeType.name][edgeId] && (hasLink = true);
	      });
	    });
	    return hasLink;
	  }

	  function absorb(node, result) {
	    result.nodes.push(node);
	    forEachEdgeType(function (edgeType) {
	      zrUtil.each(edgeIdGetter(node, edgeType) || [], function (edgeId) {
	        result.records[edgeType.name][edgeId] = true;
	      });
	    });
	  }
	}

	exports.isCoordSupported = isCoordSupported;
	exports.createNameEach = createNameEach;
	exports.eachAxisDim = eachAxisDim;
	exports.createLinkedNodesFinder = createLinkedNodesFinder;

/***/ },
/* 544 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var numberUtil = __webpack_require__(205);

	var helper = __webpack_require__(543);

	var each = zrUtil.each;
	var asc = numberUtil.asc;
	/**
	 * Operate single axis.
	 * One axis can only operated by one axis operator.
	 * Different dataZoomModels may be defined to operate the same axis.
	 * (i.e. 'inside' data zoom and 'slider' data zoom components)
	 * So dataZoomModels share one axisProxy in that case.
	 *
	 * @class
	 */

	var AxisProxy = function (dimName, axisIndex, dataZoomModel, ecModel) {
	  /**
	   * @private
	   * @type {string}
	   */
	  this._dimName = dimName;
	  /**
	   * @private
	   */

	  this._axisIndex = axisIndex;
	  /**
	   * @private
	   * @type {Array.<number>}
	   */

	  this._valueWindow;
	  /**
	   * @private
	   * @type {Array.<number>}
	   */

	  this._percentWindow;
	  /**
	   * @private
	   * @type {Array.<number>}
	   */

	  this._dataExtent;
	  /**
	   * {minSpan, maxSpan, minValueSpan, maxValueSpan}
	   * @private
	   * @type {Object}
	   */

	  this._minMaxSpan;
	  /**
	   * @readOnly
	   * @type {module: echarts/model/Global}
	   */

	  this.ecModel = ecModel;
	  /**
	   * @private
	   * @type {module: echarts/component/dataZoom/DataZoomModel}
	   */

	  this._dataZoomModel = dataZoomModel;
	};

	AxisProxy.prototype = {
	  constructor: AxisProxy,

	  /**
	   * Whether the axisProxy is hosted by dataZoomModel.
	   *
	   * @public
	   * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel
	   * @return {boolean}
	   */
	  hostedBy: function (dataZoomModel) {
	    return this._dataZoomModel === dataZoomModel;
	  },

	  /**
	   * @return {Array.<number>} Value can only be NaN or finite value.
	   */
	  getDataValueWindow: function () {
	    return this._valueWindow.slice();
	  },

	  /**
	   * @return {Array.<number>}
	   */
	  getDataPercentWindow: function () {
	    return this._percentWindow.slice();
	  },

	  /**
	   * @public
	   * @param {number} axisIndex
	   * @return {Array} seriesModels
	   */
	  getTargetSeriesModels: function () {
	    var seriesModels = [];
	    var ecModel = this.ecModel;
	    ecModel.eachSeries(function (seriesModel) {
	      if (helper.isCoordSupported(seriesModel.get('coordinateSystem'))) {
	        var dimName = this._dimName;
	        var axisModel = ecModel.queryComponents({
	          mainType: dimName + 'Axis',
	          index: seriesModel.get(dimName + 'AxisIndex'),
	          id: seriesModel.get(dimName + 'AxisId')
	        })[0];

	        if (this._axisIndex === (axisModel && axisModel.componentIndex)) {
	          seriesModels.push(seriesModel);
	        }
	      }
	    }, this);
	    return seriesModels;
	  },
	  getAxisModel: function () {
	    return this.ecModel.getComponent(this._dimName + 'Axis', this._axisIndex);
	  },
	  getOtherAxisModel: function () {
	    var axisDim = this._dimName;
	    var ecModel = this.ecModel;
	    var axisModel = this.getAxisModel();
	    var isCartesian = axisDim === 'x' || axisDim === 'y';
	    var otherAxisDim;
	    var coordSysIndexName;

	    if (isCartesian) {
	      coordSysIndexName = 'gridIndex';
	      otherAxisDim = axisDim === 'x' ? 'y' : 'x';
	    } else {
	      coordSysIndexName = 'polarIndex';
	      otherAxisDim = axisDim === 'angle' ? 'radius' : 'angle';
	    }

	    var foundOtherAxisModel;
	    ecModel.eachComponent(otherAxisDim + 'Axis', function (otherAxisModel) {
	      if ((otherAxisModel.get(coordSysIndexName) || 0) === (axisModel.get(coordSysIndexName) || 0)) {
	        foundOtherAxisModel = otherAxisModel;
	      }
	    });
	    return foundOtherAxisModel;
	  },
	  getMinMaxSpan: function () {
	    return zrUtil.clone(this._minMaxSpan);
	  },

	  /**
	   * Only calculate by given range and this._dataExtent, do not change anything.
	   *
	   * @param {Object} opt
	   * @param {number} [opt.start]
	   * @param {number} [opt.end]
	   * @param {number} [opt.startValue]
	   * @param {number} [opt.endValue]
	   */
	  calculateDataWindow: function (opt) {
	    var dataExtent = this._dataExtent;
	    var axisModel = this.getAxisModel();
	    var scale = axisModel.axis.scale;

	    var rangePropMode = this._dataZoomModel.getRangePropMode();

	    var percentExtent = [0, 100];
	    var percentWindow = [opt.start, opt.end];
	    var valueWindow = [];
	    each(['startValue', 'endValue'], function (prop) {
	      valueWindow.push(opt[prop] != null ? scale.parse(opt[prop]) : null);
	    }); // Normalize bound.

	    each([0, 1], function (idx) {
	      var boundValue = valueWindow[idx];
	      var boundPercent = percentWindow[idx]; // Notice: dataZoom is based either on `percentProp` ('start', 'end') or
	      // on `valueProp` ('startValue', 'endValue'). The former one is suitable
	      // for cases that a dataZoom component controls multiple axes with different
	      // unit or extent, and the latter one is suitable for accurate zoom by pixel
	      // (e.g., in dataZoomSelect). `valueProp` can be calculated from `percentProp`,
	      // but it is awkward that `percentProp` can not be obtained from `valueProp`
	      // accurately (because all of values that are overflow the `dataExtent` will
	      // be calculated to percent '100%'). So we have to use
	      // `dataZoom.getRangePropMode()` to mark which prop is used.
	      // `rangePropMode` is updated only when setOption or dispatchAction, otherwise
	      // it remains its original value.

	      if (rangePropMode[idx] === 'percent') {
	        if (boundPercent == null) {
	          boundPercent = percentExtent[idx];
	        } // Use scale.parse to math round for category or time axis.


	        boundValue = scale.parse(numberUtil.linearMap(boundPercent, percentExtent, dataExtent, true));
	      } else {
	        // Calculating `percent` from `value` may be not accurate, because
	        // This calculation can not be inversed, because all of values that
	        // are overflow the `dataExtent` will be calculated to percent '100%'
	        boundPercent = numberUtil.linearMap(boundValue, dataExtent, percentExtent, true);
	      } // valueWindow[idx] = round(boundValue);
	      // percentWindow[idx] = round(boundPercent);


	      valueWindow[idx] = boundValue;
	      percentWindow[idx] = boundPercent;
	    });
	    return {
	      valueWindow: asc(valueWindow),
	      percentWindow: asc(percentWindow)
	    };
	  },

	  /**
	   * Notice: reset should not be called before series.restoreData() called,
	   * so it is recommanded to be called in "process stage" but not "model init
	   * stage".
	   *
	   * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel
	   */
	  reset: function (dataZoomModel) {
	    if (dataZoomModel !== this._dataZoomModel) {
	      return;
	    } // Culculate data window and data extent, and record them.


	    this._dataExtent = calculateDataExtent(this, this._dimName, this.getTargetSeriesModels());
	    var dataWindow = this.calculateDataWindow(dataZoomModel.option);
	    this._valueWindow = dataWindow.valueWindow;
	    this._percentWindow = dataWindow.percentWindow;
	    setMinMaxSpan(this); // Update axis setting then.

	    setAxisModel(this);
	  },

	  /**
	   * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel
	   */
	  restore: function (dataZoomModel) {
	    if (dataZoomModel !== this._dataZoomModel) {
	      return;
	    }

	    this._valueWindow = this._percentWindow = null;
	    setAxisModel(this, true);
	  },

	  /**
	   * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel
	   */
	  filterData: function (dataZoomModel) {
	    if (dataZoomModel !== this._dataZoomModel) {
	      return;
	    }

	    var axisDim = this._dimName;
	    var seriesModels = this.getTargetSeriesModels();
	    var filterMode = dataZoomModel.get('filterMode');
	    var valueWindow = this._valueWindow;

	    if (filterMode === 'none') {
	      return;
	    } // FIXME
	    // Toolbox may has dataZoom injected. And if there are stacked bar chart
	    // with NaN data, NaN will be filtered and stack will be wrong.
	    // So we need to force the mode to be set empty.
	    // In fect, it is not a big deal that do not support filterMode-'filter'
	    // when using toolbox#dataZoom, utill tooltip#dataZoom support "single axis
	    // selection" some day, which might need "adapt to data extent on the
	    // otherAxis", which is disabled by filterMode-'empty'.


	    var otherAxisModel = this.getOtherAxisModel();

	    if (dataZoomModel.get('$fromToolbox') && otherAxisModel && otherAxisModel.get('type') === 'category') {
	      filterMode = 'empty';
	    } // Process series data


	    each(seriesModels, function (seriesModel) {
	      var seriesData = seriesModel.getData();
	      var dataDims = seriesModel.coordDimToDataDim(axisDim);

	      if (filterMode === 'weakFilter') {
	        seriesData && seriesData.filterSelf(function (dataIndex) {
	          var leftOut;
	          var rightOut;
	          var hasValue;

	          for (var i = 0; i < dataDims.length; i++) {
	            var value = seriesData.get(dataDims[i], dataIndex);
	            var thisHasValue = !isNaN(value);
	            var thisLeftOut = value < valueWindow[0];
	            var thisRightOut = value > valueWindow[1];

	            if (thisHasValue && !thisLeftOut && !thisRightOut) {
	              return true;
	            }

	            thisHasValue && (hasValue = true);
	            thisLeftOut && (leftOut = true);
	            thisRightOut && (rightOut = true);
	          } // If both left out and right out, do not filter.


	          return hasValue && leftOut && rightOut;
	        });
	      } else {
	        seriesData && each(dataDims, function (dim) {
	          if (filterMode === 'empty') {
	            seriesModel.setData(seriesData.map(dim, function (value) {
	              return !isInWindow(value) ? NaN : value;
	            }));
	          } else {
	            seriesData.filterSelf(dim, isInWindow);
	          }
	        });
	      }
	    });

	    function isInWindow(value) {
	      return value >= valueWindow[0] && value <= valueWindow[1];
	    }
	  }
	};

	function calculateDataExtent(axisProxy, axisDim, seriesModels) {
	  var dataExtent = [Infinity, -Infinity];
	  each(seriesModels, function (seriesModel) {
	    var seriesData = seriesModel.getData();

	    if (seriesData) {
	      each(seriesModel.coordDimToDataDim(axisDim), function (dim) {
	        var seriesExtent = seriesData.getDataExtent(dim);
	        seriesExtent[0] < dataExtent[0] && (dataExtent[0] = seriesExtent[0]);
	        seriesExtent[1] > dataExtent[1] && (dataExtent[1] = seriesExtent[1]);
	      });
	    }
	  });

	  if (dataExtent[1] < dataExtent[0]) {
	    dataExtent = [NaN, NaN];
	  } // It is important to get "consistent" extent when more then one axes is
	  // controlled by a `dataZoom`, otherwise those axes will not be synchronized
	  // when zooming. But it is difficult to know what is "consistent", considering
	  // axes have different type or even different meanings (For example, two
	  // time axes are used to compare data of the same date in different years).
	  // So basically dataZoom just obtains extent by series.data (in category axis
	  // extent can be obtained from axis.data).
	  // Nevertheless, user can set min/max/scale on axes to make extent of axes
	  // consistent.


	  fixExtentByAxis(axisProxy, dataExtent);
	  return dataExtent;
	}

	function fixExtentByAxis(axisProxy, dataExtent) {
	  var axisModel = axisProxy.getAxisModel();
	  var min = axisModel.getMin(true); // For category axis, if min/max/scale are not set, extent is determined
	  // by axis.data by default.

	  var isCategoryAxis = axisModel.get('type') === 'category';
	  var axisDataLen = isCategoryAxis && (axisModel.get('data') || []).length;

	  if (min != null && min !== 'dataMin' && typeof min !== 'function') {
	    dataExtent[0] = min;
	  } else if (isCategoryAxis) {
	    dataExtent[0] = axisDataLen > 0 ? 0 : NaN;
	  }

	  var max = axisModel.getMax(true);

	  if (max != null && max !== 'dataMax' && typeof max !== 'function') {
	    dataExtent[1] = max;
	  } else if (isCategoryAxis) {
	    dataExtent[1] = axisDataLen > 0 ? axisDataLen - 1 : NaN;
	  }

	  if (!axisModel.get('scale', true)) {
	    dataExtent[0] > 0 && (dataExtent[0] = 0);
	    dataExtent[1] < 0 && (dataExtent[1] = 0);
	  } // For value axis, if min/max/scale are not set, we just use the extent obtained
	  // by series data, which may be a little different from the extent calculated by
	  // `axisHelper.getScaleExtent`. But the different just affects the experience a
	  // little when zooming. So it will not be fixed until some users require it strongly.


	  return dataExtent;
	}

	function setAxisModel(axisProxy, isRestore) {
	  var axisModel = axisProxy.getAxisModel();
	  var percentWindow = axisProxy._percentWindow;
	  var valueWindow = axisProxy._valueWindow;

	  if (!percentWindow) {
	    return;
	  } // [0, 500]: arbitrary value, guess axis extent.


	  var precision = numberUtil.getPixelPrecision(valueWindow, [0, 500]);
	  precision = Math.min(precision, 20); // isRestore or isFull

	  var useOrigin = isRestore || percentWindow[0] === 0 && percentWindow[1] === 100;
	  axisModel.setRange(useOrigin ? null : +valueWindow[0].toFixed(precision), useOrigin ? null : +valueWindow[1].toFixed(precision));
	}

	function setMinMaxSpan(axisProxy) {
	  var minMaxSpan = axisProxy._minMaxSpan = {};
	  var dataZoomModel = axisProxy._dataZoomModel;
	  each(['min', 'max'], function (minMax) {
	    minMaxSpan[minMax + 'Span'] = dataZoomModel.get(minMax + 'Span'); // minValueSpan and maxValueSpan has higher priority than minSpan and maxSpan

	    var valueSpan = dataZoomModel.get(minMax + 'ValueSpan');

	    if (valueSpan != null) {
	      minMaxSpan[minMax + 'ValueSpan'] = valueSpan;
	      valueSpan = axisProxy.getAxisModel().axis.scale.parse(valueSpan);

	      if (valueSpan != null) {
	        var dataExtent = axisProxy._dataExtent;
	        minMaxSpan[minMax + 'Span'] = numberUtil.linearMap(dataExtent[0] + valueSpan, dataExtent, [0, 100], true);
	      }
	    }
	  });
	}

	var _default = AxisProxy;
	module.exports = _default;

/***/ },
/* 545 */
/***/ function(module, exports, __webpack_require__) {

	var ComponentView = __webpack_require__(257);

	var _default = ComponentView.extend({
	  type: 'dataZoom',
	  render: function (dataZoomModel, ecModel, api, payload) {
	    this.dataZoomModel = dataZoomModel;
	    this.ecModel = ecModel;
	    this.api = api;
	  },

	  /**
	   * Find the first target coordinate system.
	   *
	   * @protected
	   * @return {Object} {
	   *                   grid: [
	   *                       {model: coord0, axisModels: [axis1, axis3], coordIndex: 1},
	   *                       {model: coord1, axisModels: [axis0, axis2], coordIndex: 0},
	   *                       ...
	   *                   ],  // cartesians must not be null/undefined.
	   *                   polar: [
	   *                       {model: coord0, axisModels: [axis4], coordIndex: 0},
	   *                       ...
	   *                   ],  // polars must not be null/undefined.
	   *                   singleAxis: [
	   *                       {model: coord0, axisModels: [], coordIndex: 0}
	   *                   ]
	   */
	  getTargetCoordInfo: function () {
	    var dataZoomModel = this.dataZoomModel;
	    var ecModel = this.ecModel;
	    var coordSysLists = {};
	    dataZoomModel.eachTargetAxis(function (dimNames, axisIndex) {
	      var axisModel = ecModel.getComponent(dimNames.axis, axisIndex);

	      if (axisModel) {
	        var coordModel = axisModel.getCoordSysModel();
	        coordModel && save(coordModel, axisModel, coordSysLists[coordModel.mainType] || (coordSysLists[coordModel.mainType] = []), coordModel.componentIndex);
	      }
	    }, this);

	    function save(coordModel, axisModel, store, coordIndex) {
	      var item;

	      for (var i = 0; i < store.length; i++) {
	        if (store[i].model === coordModel) {
	          item = store[i];
	          break;
	        }
	      }

	      if (!item) {
	        store.push(item = {
	          model: coordModel,
	          axisModels: [],
	          coordIndex: coordIndex
	        });
	      }

	      item.axisModels.push(axisModel);
	    }

	    return coordSysLists;
	  }
	});

	module.exports = _default;

/***/ },
/* 546 */
/***/ function(module, exports, __webpack_require__) {

	var DataZoomModel = __webpack_require__(542);

	var SliderZoomModel = DataZoomModel.extend({
	  type: 'dataZoom.slider',
	  layoutMode: 'box',

	  /**
	   * @protected
	   */
	  defaultOption: {
	    show: true,
	    // ph => placeholder. Using placehoder here because
	    // deault value can only be drived in view stage.
	    right: 'ph',
	    // Default align to grid rect.
	    top: 'ph',
	    // Default align to grid rect.
	    width: 'ph',
	    // Default align to grid rect.
	    height: 'ph',
	    // Default align to grid rect.
	    left: null,
	    // Default align to grid rect.
	    bottom: null,
	    // Default align to grid rect.
	    backgroundColor: 'rgba(47,69,84,0)',
	    // Background of slider zoom component.
	    // dataBackgroundColor: '#ddd',         // Background coor of data shadow and border of box,
	    // highest priority, remain for compatibility of
	    // previous version, but not recommended any more.
	    dataBackground: {
	      lineStyle: {
	        color: '#2f4554',
	        width: 0.5,
	        opacity: 0.3
	      },
	      areaStyle: {
	        color: 'rgba(47,69,84,0.3)',
	        opacity: 0.3
	      }
	    },
	    borderColor: '#ddd',
	    // border color of the box. For compatibility,
	    // if dataBackgroundColor is set, borderColor
	    // is ignored.
	    fillerColor: 'rgba(167,183,204,0.4)',
	    // Color of selected area.
	    // handleColor: 'rgba(89,170,216,0.95)',     // Color of handle.
	    // handleIcon: 'path://M4.9,17.8c0-1.4,4.5-10.5,5.5-12.4c0-0.1,0.6-1.1,0.9-1.1c0.4,0,0.9,1,0.9,1.1c1.1,2.2,5.4,11,5.4,12.4v17.8c0,1.5-0.6,2.1-1.3,2.1H6.1c-0.7,0-1.3-0.6-1.3-2.1V17.8z',
	    handleIcon: 'M8.2,13.6V3.9H6.3v9.7H3.1v14.9h3.3v9.7h1.8v-9.7h3.3V13.6H8.2z M9.7,24.4H4.8v-1.4h4.9V24.4z M9.7,19.1H4.8v-1.4h4.9V19.1z',
	    // Percent of the slider height
	    handleSize: '100%',
	    handleStyle: {
	      color: '#a7b7cc'
	    },
	    labelPrecision: null,
	    labelFormatter: null,
	    showDetail: true,
	    showDataShadow: 'auto',
	    // Default auto decision.
	    realtime: true,
	    zoomLock: false,
	    // Whether disable zoom.
	    textStyle: {
	      color: '#333'
	    }
	  }
	});
	var _default = SliderZoomModel;
	module.exports = _default;

/***/ },
/* 547 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var eventTool = __webpack_require__(199);

	var graphic = __webpack_require__(212);

	var throttle = __webpack_require__(259);

	var DataZoomView = __webpack_require__(545);

	var numberUtil = __webpack_require__(205);

	var layout = __webpack_require__(247);

	var sliderMove = __webpack_require__(413);

	var Rect = graphic.Rect;
	var linearMap = numberUtil.linearMap;
	var asc = numberUtil.asc;
	var bind = zrUtil.bind;
	var each = zrUtil.each; // Constants

	var DEFAULT_LOCATION_EDGE_GAP = 7;
	var DEFAULT_FRAME_BORDER_WIDTH = 1;
	var DEFAULT_FILLER_SIZE = 30;
	var HORIZONTAL = 'horizontal';
	var VERTICAL = 'vertical';
	var LABEL_GAP = 5;
	var SHOW_DATA_SHADOW_SERIES_TYPE = ['line', 'bar', 'candlestick', 'scatter'];
	var SliderZoomView = DataZoomView.extend({
	  type: 'dataZoom.slider',
	  init: function (ecModel, api) {
	    /**
	     * @private
	     * @type {Object}
	     */
	    this._displayables = {};
	    /**
	     * @private
	     * @type {string}
	     */

	    this._orient;
	    /**
	     * [0, 100]
	     * @private
	     */

	    this._range;
	    /**
	     * [coord of the first handle, coord of the second handle]
	     * @private
	     */

	    this._handleEnds;
	    /**
	     * [length, thick]
	     * @private
	     * @type {Array.<number>}
	     */

	    this._size;
	    /**
	     * @private
	     * @type {number}
	     */

	    this._handleWidth;
	    /**
	     * @private
	     * @type {number}
	     */

	    this._handleHeight;
	    /**
	     * @private
	     */

	    this._location;
	    /**
	     * @private
	     */

	    this._dragging;
	    /**
	     * @private
	     */

	    this._dataShadowInfo;
	    this.api = api;
	  },

	  /**
	   * @override
	   */
	  render: function (dataZoomModel, ecModel, api, payload) {
	    SliderZoomView.superApply(this, 'render', arguments);
	    throttle.createOrUpdate(this, '_dispatchZoomAction', this.dataZoomModel.get('throttle'), 'fixRate');
	    this._orient = dataZoomModel.get('orient');

	    if (this.dataZoomModel.get('show') === false) {
	      this.group.removeAll();
	      return;
	    } // Notice: this._resetInterval() should not be executed when payload.type
	    // is 'dataZoom', origin this._range should be maintained, otherwise 'pan'
	    // or 'zoom' info will be missed because of 'throttle' of this.dispatchAction,


	    if (!payload || payload.type !== 'dataZoom' || payload.from !== this.uid) {
	      this._buildView();
	    }

	    this._updateView();
	  },

	  /**
	   * @override
	   */
	  remove: function () {
	    SliderZoomView.superApply(this, 'remove', arguments);
	    throttle.clear(this, '_dispatchZoomAction');
	  },

	  /**
	   * @override
	   */
	  dispose: function () {
	    SliderZoomView.superApply(this, 'dispose', arguments);
	    throttle.clear(this, '_dispatchZoomAction');
	  },
	  _buildView: function () {
	    var thisGroup = this.group;
	    thisGroup.removeAll();

	    this._resetLocation();

	    this._resetInterval();

	    var barGroup = this._displayables.barGroup = new graphic.Group();

	    this._renderBackground();

	    this._renderHandle();

	    this._renderDataShadow();

	    thisGroup.add(barGroup);

	    this._positionGroup();
	  },

	  /**
	   * @private
	   */
	  _resetLocation: function () {
	    var dataZoomModel = this.dataZoomModel;
	    var api = this.api; // If some of x/y/width/height are not specified,
	    // auto-adapt according to target grid.

	    var coordRect = this._findCoordRect();

	    var ecSize = {
	      width: api.getWidth(),
	      height: api.getHeight()
	    }; // Default align by coordinate system rect.

	    var positionInfo = this._orient === HORIZONTAL ? {
	      // Why using 'right', because right should be used in vertical,
	      // and it is better to be consistent for dealing with position param merge.
	      right: ecSize.width - coordRect.x - coordRect.width,
	      top: ecSize.height - DEFAULT_FILLER_SIZE - DEFAULT_LOCATION_EDGE_GAP,
	      width: coordRect.width,
	      height: DEFAULT_FILLER_SIZE
	    } : {
	      // vertical
	      right: DEFAULT_LOCATION_EDGE_GAP,
	      top: coordRect.y,
	      width: DEFAULT_FILLER_SIZE,
	      height: coordRect.height
	    }; // Do not write back to option and replace value 'ph', because
	    // the 'ph' value should be recalculated when resize.

	    var layoutParams = layout.getLayoutParams(dataZoomModel.option); // Replace the placeholder value.

	    zrUtil.each(['right', 'top', 'width', 'height'], function (name) {
	      if (layoutParams[name] === 'ph') {
	        layoutParams[name] = positionInfo[name];
	      }
	    });
	    var layoutRect = layout.getLayoutRect(layoutParams, ecSize, dataZoomModel.padding);
	    this._location = {
	      x: layoutRect.x,
	      y: layoutRect.y
	    };
	    this._size = [layoutRect.width, layoutRect.height];
	    this._orient === VERTICAL && this._size.reverse();
	  },

	  /**
	   * @private
	   */
	  _positionGroup: function () {
	    var thisGroup = this.group;
	    var location = this._location;
	    var orient = this._orient; // Just use the first axis to determine mapping.

	    var targetAxisModel = this.dataZoomModel.getFirstTargetAxisModel();
	    var inverse = targetAxisModel && targetAxisModel.get('inverse');
	    var barGroup = this._displayables.barGroup;
	    var otherAxisInverse = (this._dataShadowInfo || {}).otherAxisInverse; // Transform barGroup.

	    barGroup.attr(orient === HORIZONTAL && !inverse ? {
	      scale: otherAxisInverse ? [1, 1] : [1, -1]
	    } : orient === HORIZONTAL && inverse ? {
	      scale: otherAxisInverse ? [-1, 1] : [-1, -1]
	    } : orient === VERTICAL && !inverse ? {
	      scale: otherAxisInverse ? [1, -1] : [1, 1],
	      rotation: Math.PI / 2 // Dont use Math.PI, considering shadow direction.

	    } : {
	      scale: otherAxisInverse ? [-1, -1] : [-1, 1],
	      rotation: Math.PI / 2
	    }); // Position barGroup

	    var rect = thisGroup.getBoundingRect([barGroup]);
	    thisGroup.attr('position', [location.x - rect.x, location.y - rect.y]);
	  },

	  /**
	   * @private
	   */
	  _getViewExtent: function () {
	    return [0, this._size[0]];
	  },
	  _renderBackground: function () {
	    var dataZoomModel = this.dataZoomModel;
	    var size = this._size;
	    var barGroup = this._displayables.barGroup;
	    barGroup.add(new Rect({
	      silent: true,
	      shape: {
	        x: 0,
	        y: 0,
	        width: size[0],
	        height: size[1]
	      },
	      style: {
	        fill: dataZoomModel.get('backgroundColor')
	      },
	      z2: -40
	    })); // Click panel, over shadow, below handles.

	    barGroup.add(new Rect({
	      shape: {
	        x: 0,
	        y: 0,
	        width: size[0],
	        height: size[1]
	      },
	      style: {
	        fill: 'transparent'
	      },
	      z2: 0,
	      onclick: zrUtil.bind(this._onClickPanelClick, this)
	    }));
	  },
	  _renderDataShadow: function () {
	    var info = this._dataShadowInfo = this._prepareDataShadowInfo();

	    if (!info) {
	      return;
	    }

	    var size = this._size;
	    var seriesModel = info.series;
	    var data = seriesModel.getRawData();
	    var otherDim = seriesModel.getShadowDim ? seriesModel.getShadowDim() // @see candlestick
	    : info.otherDim;

	    if (otherDim == null) {
	      return;
	    }

	    var otherDataExtent = data.getDataExtent(otherDim); // Nice extent.

	    var otherOffset = (otherDataExtent[1] - otherDataExtent[0]) * 0.3;
	    otherDataExtent = [otherDataExtent[0] - otherOffset, otherDataExtent[1] + otherOffset];
	    var otherShadowExtent = [0, size[1]];
	    var thisShadowExtent = [0, size[0]];
	    var areaPoints = [[size[0], 0], [0, 0]];
	    var linePoints = [];
	    var step = thisShadowExtent[1] / (data.count() - 1);
	    var thisCoord = 0; // Optimize for large data shadow

	    var stride = Math.round(data.count() / size[0]);
	    var lastIsEmpty;
	    data.each([otherDim], function (value, index) {
	      if (stride > 0 && index % stride) {
	        thisCoord += step;
	        return;
	      } // FIXME
	      // Should consider axis.min/axis.max when drawing dataShadow.
	      // FIXME
	      // 应该使用统一的空判断？还是在list里进行空判断？


	      var isEmpty = value == null || isNaN(value) || value === ''; // See #4235.

	      var otherCoord = isEmpty ? 0 : linearMap(value, otherDataExtent, otherShadowExtent, true); // Attempt to draw data shadow precisely when there are empty value.

	      if (isEmpty && !lastIsEmpty && index) {
	        areaPoints.push([areaPoints[areaPoints.length - 1][0], 0]);
	        linePoints.push([linePoints[linePoints.length - 1][0], 0]);
	      } else if (!isEmpty && lastIsEmpty) {
	        areaPoints.push([thisCoord, 0]);
	        linePoints.push([thisCoord, 0]);
	      }

	      areaPoints.push([thisCoord, otherCoord]);
	      linePoints.push([thisCoord, otherCoord]);
	      thisCoord += step;
	      lastIsEmpty = isEmpty;
	    });
	    var dataZoomModel = this.dataZoomModel; // var dataBackgroundModel = dataZoomModel.getModel('dataBackground');

	    this._displayables.barGroup.add(new graphic.Polygon({
	      shape: {
	        points: areaPoints
	      },
	      style: zrUtil.defaults({
	        fill: dataZoomModel.get('dataBackgroundColor')
	      }, dataZoomModel.getModel('dataBackground.areaStyle').getAreaStyle()),
	      silent: true,
	      z2: -20
	    }));

	    this._displayables.barGroup.add(new graphic.Polyline({
	      shape: {
	        points: linePoints
	      },
	      style: dataZoomModel.getModel('dataBackground.lineStyle').getLineStyle(),
	      silent: true,
	      z2: -19
	    }));
	  },
	  _prepareDataShadowInfo: function () {
	    var dataZoomModel = this.dataZoomModel;
	    var showDataShadow = dataZoomModel.get('showDataShadow');

	    if (showDataShadow === false) {
	      return;
	    } // Find a representative series.


	    var result;
	    var ecModel = this.ecModel;
	    dataZoomModel.eachTargetAxis(function (dimNames, axisIndex) {
	      var seriesModels = dataZoomModel.getAxisProxy(dimNames.name, axisIndex).getTargetSeriesModels();
	      zrUtil.each(seriesModels, function (seriesModel) {
	        if (result) {
	          return;
	        }

	        if (showDataShadow !== true && zrUtil.indexOf(SHOW_DATA_SHADOW_SERIES_TYPE, seriesModel.get('type')) < 0) {
	          return;
	        }

	        var thisAxis = ecModel.getComponent(dimNames.axis, axisIndex).axis;
	        var otherDim = getOtherDim(dimNames.name);
	        var otherAxisInverse;
	        var coordSys = seriesModel.coordinateSystem;

	        if (otherDim != null && coordSys.getOtherAxis) {
	          otherAxisInverse = coordSys.getOtherAxis(thisAxis).inverse;
	        }

	        result = {
	          thisAxis: thisAxis,
	          series: seriesModel,
	          thisDim: dimNames.name,
	          otherDim: otherDim,
	          otherAxisInverse: otherAxisInverse
	        };
	      }, this);
	    }, this);
	    return result;
	  },
	  _renderHandle: function () {
	    var displaybles = this._displayables;
	    var handles = displaybles.handles = [];
	    var handleLabels = displaybles.handleLabels = [];
	    var barGroup = this._displayables.barGroup;
	    var size = this._size;
	    var dataZoomModel = this.dataZoomModel;
	    barGroup.add(displaybles.filler = new Rect({
	      draggable: true,
	      cursor: getCursor(this._orient),
	      drift: bind(this._onDragMove, this, 'all'),
	      onmousemove: function (e) {
	        // Fot mobile devicem, prevent screen slider on the button.
	        eventTool.stop(e.event);
	      },
	      ondragstart: bind(this._showDataInfo, this, true),
	      ondragend: bind(this._onDragEnd, this),
	      onmouseover: bind(this._showDataInfo, this, true),
	      onmouseout: bind(this._showDataInfo, this, false),
	      style: {
	        fill: dataZoomModel.get('fillerColor'),
	        textPosition: 'inside'
	      }
	    })); // Frame border.

	    barGroup.add(new Rect(graphic.subPixelOptimizeRect({
	      silent: true,
	      shape: {
	        x: 0,
	        y: 0,
	        width: size[0],
	        height: size[1]
	      },
	      style: {
	        stroke: dataZoomModel.get('dataBackgroundColor') || dataZoomModel.get('borderColor'),
	        lineWidth: DEFAULT_FRAME_BORDER_WIDTH,
	        fill: 'rgba(0,0,0,0)'
	      }
	    })));
	    each([0, 1], function (handleIndex) {
	      var path = graphic.createIcon(dataZoomModel.get('handleIcon'), {
	        cursor: getCursor(this._orient),
	        draggable: true,
	        drift: bind(this._onDragMove, this, handleIndex),
	        onmousemove: function (e) {
	          // Fot mobile devicem, prevent screen slider on the button.
	          eventTool.stop(e.event);
	        },
	        ondragend: bind(this._onDragEnd, this),
	        onmouseover: bind(this._showDataInfo, this, true),
	        onmouseout: bind(this._showDataInfo, this, false)
	      }, {
	        x: -1,
	        y: 0,
	        width: 2,
	        height: 2
	      });
	      var bRect = path.getBoundingRect();
	      this._handleHeight = numberUtil.parsePercent(dataZoomModel.get('handleSize'), this._size[1]);
	      this._handleWidth = bRect.width / bRect.height * this._handleHeight;
	      path.setStyle(dataZoomModel.getModel('handleStyle').getItemStyle());
	      var handleColor = dataZoomModel.get('handleColor'); // Compatitable with previous version

	      if (handleColor != null) {
	        path.style.fill = handleColor;
	      }

	      barGroup.add(handles[handleIndex] = path);
	      var textStyleModel = dataZoomModel.textStyleModel;
	      this.group.add(handleLabels[handleIndex] = new graphic.Text({
	        silent: true,
	        invisible: true,
	        style: {
	          x: 0,
	          y: 0,
	          text: '',
	          textVerticalAlign: 'middle',
	          textAlign: 'center',
	          textFill: textStyleModel.getTextColor(),
	          textFont: textStyleModel.getFont()
	        },
	        z2: 10
	      }));
	    }, this);
	  },

	  /**
	   * @private
	   */
	  _resetInterval: function () {
	    var range = this._range = this.dataZoomModel.getPercentRange();

	    var viewExtent = this._getViewExtent();

	    this._handleEnds = [linearMap(range[0], [0, 100], viewExtent, true), linearMap(range[1], [0, 100], viewExtent, true)];
	  },

	  /**
	   * @private
	   * @param {(number|string)} handleIndex 0 or 1 or 'all'
	   * @param {number} delta
	   */
	  _updateInterval: function (handleIndex, delta) {
	    var dataZoomModel = this.dataZoomModel;
	    var handleEnds = this._handleEnds;

	    var viewExtend = this._getViewExtent();

	    var minMaxSpan = dataZoomModel.findRepresentativeAxisProxy().getMinMaxSpan();
	    var percentExtent = [0, 100];
	    sliderMove(delta, handleEnds, viewExtend, dataZoomModel.get('zoomLock') ? 'all' : handleIndex, minMaxSpan.minSpan != null ? linearMap(minMaxSpan.minSpan, percentExtent, viewExtend, true) : null, minMaxSpan.maxSpan != null ? linearMap(minMaxSpan.maxSpan, percentExtent, viewExtend, true) : null);
	    this._range = asc([linearMap(handleEnds[0], viewExtend, percentExtent, true), linearMap(handleEnds[1], viewExtend, percentExtent, true)]);
	  },

	  /**
	   * @private
	   */
	  _updateView: function (nonRealtime) {
	    var displaybles = this._displayables;
	    var handleEnds = this._handleEnds;
	    var handleInterval = asc(handleEnds.slice());
	    var size = this._size;
	    each([0, 1], function (handleIndex) {
	      // Handles
	      var handle = displaybles.handles[handleIndex];
	      var handleHeight = this._handleHeight;
	      handle.attr({
	        scale: [handleHeight / 2, handleHeight / 2],
	        position: [handleEnds[handleIndex], size[1] / 2 - handleHeight / 2]
	      });
	    }, this); // Filler

	    displaybles.filler.setShape({
	      x: handleInterval[0],
	      y: 0,
	      width: handleInterval[1] - handleInterval[0],
	      height: size[1]
	    });

	    this._updateDataInfo(nonRealtime);
	  },

	  /**
	   * @private
	   */
	  _updateDataInfo: function (nonRealtime) {
	    var dataZoomModel = this.dataZoomModel;
	    var displaybles = this._displayables;
	    var handleLabels = displaybles.handleLabels;
	    var orient = this._orient;
	    var labelTexts = ['', '']; // FIXME
	    // date型，支持formatter，autoformatter（ec2 date.getAutoFormatter）

	    if (dataZoomModel.get('showDetail')) {
	      var axisProxy = dataZoomModel.findRepresentativeAxisProxy();

	      if (axisProxy) {
	        var axis = axisProxy.getAxisModel().axis;
	        var range = this._range;
	        var dataInterval = nonRealtime // See #4434, data and axis are not processed and reset yet in non-realtime mode.
	        ? axisProxy.calculateDataWindow({
	          start: range[0],
	          end: range[1]
	        }).valueWindow : axisProxy.getDataValueWindow();
	        labelTexts = [this._formatLabel(dataInterval[0], axis), this._formatLabel(dataInterval[1], axis)];
	      }
	    }

	    var orderedHandleEnds = asc(this._handleEnds.slice());
	    setLabel.call(this, 0);
	    setLabel.call(this, 1);

	    function setLabel(handleIndex) {
	      // Label
	      // Text should not transform by barGroup.
	      // Ignore handlers transform
	      var barTransform = graphic.getTransform(displaybles.handles[handleIndex].parent, this.group);
	      var direction = graphic.transformDirection(handleIndex === 0 ? 'right' : 'left', barTransform);
	      var offset = this._handleWidth / 2 + LABEL_GAP;
	      var textPoint = graphic.applyTransform([orderedHandleEnds[handleIndex] + (handleIndex === 0 ? -offset : offset), this._size[1] / 2], barTransform);
	      handleLabels[handleIndex].setStyle({
	        x: textPoint[0],
	        y: textPoint[1],
	        textVerticalAlign: orient === HORIZONTAL ? 'middle' : direction,
	        textAlign: orient === HORIZONTAL ? direction : 'center',
	        text: labelTexts[handleIndex]
	      });
	    }
	  },

	  /**
	   * @private
	   */
	  _formatLabel: function (value, axis) {
	    var dataZoomModel = this.dataZoomModel;
	    var labelFormatter = dataZoomModel.get('labelFormatter');
	    var labelPrecision = dataZoomModel.get('labelPrecision');

	    if (labelPrecision == null || labelPrecision === 'auto') {
	      labelPrecision = axis.getPixelPrecision();
	    }

	    var valueStr = value == null || isNaN(value) ? '' // FIXME Glue code
	    : axis.type === 'category' || axis.type === 'time' ? axis.scale.getLabel(Math.round(value)) // param of toFixed should less then 20.
	    : value.toFixed(Math.min(labelPrecision, 20));
	    return zrUtil.isFunction(labelFormatter) ? labelFormatter(value, valueStr) : zrUtil.isString(labelFormatter) ? labelFormatter.replace('{value}', valueStr) : valueStr;
	  },

	  /**
	   * @private
	   * @param {boolean} showOrHide true: show, false: hide
	   */
	  _showDataInfo: function (showOrHide) {
	    // Always show when drgging.
	    showOrHide = this._dragging || showOrHide;
	    var handleLabels = this._displayables.handleLabels;
	    handleLabels[0].attr('invisible', !showOrHide);
	    handleLabels[1].attr('invisible', !showOrHide);
	  },
	  _onDragMove: function (handleIndex, dx, dy) {
	    this._dragging = true; // Transform dx, dy to bar coordination.

	    var barTransform = this._displayables.barGroup.getLocalTransform();

	    var vertex = graphic.applyTransform([dx, dy], barTransform, true);

	    this._updateInterval(handleIndex, vertex[0]);

	    var realtime = this.dataZoomModel.get('realtime');

	    this._updateView(!realtime);

	    if (realtime) {
	      realtime && this._dispatchZoomAction();
	    }
	  },
	  _onDragEnd: function () {
	    this._dragging = false;

	    this._showDataInfo(false);

	    this._dispatchZoomAction();
	  },
	  _onClickPanelClick: function (e) {
	    var size = this._size;

	    var localPoint = this._displayables.barGroup.transformCoordToLocal(e.offsetX, e.offsetY);

	    if (localPoint[0] < 0 || localPoint[0] > size[0] || localPoint[1] < 0 || localPoint[1] > size[1]) {
	      return;
	    }

	    var handleEnds = this._handleEnds;
	    var center = (handleEnds[0] + handleEnds[1]) / 2;

	    this._updateInterval('all', localPoint[0] - center);

	    this._updateView();

	    this._dispatchZoomAction();
	  },

	  /**
	   * This action will be throttled.
	   * @private
	   */
	  _dispatchZoomAction: function () {
	    var range = this._range;
	    this.api.dispatchAction({
	      type: 'dataZoom',
	      from: this.uid,
	      dataZoomId: this.dataZoomModel.id,
	      start: range[0],
	      end: range[1]
	    });
	  },

	  /**
	   * @private
	   */
	  _findCoordRect: function () {
	    // Find the grid coresponding to the first axis referred by dataZoom.
	    var rect;
	    each(this.getTargetCoordInfo(), function (coordInfoList) {
	      if (!rect && coordInfoList.length) {
	        var coordSys = coordInfoList[0].model.coordinateSystem;
	        rect = coordSys.getRect && coordSys.getRect();
	      }
	    });

	    if (!rect) {
	      var width = this.api.getWidth();
	      var height = this.api.getHeight();
	      rect = {
	        x: width * 0.2,
	        y: height * 0.2,
	        width: width * 0.6,
	        height: height * 0.6
	      };
	    }

	    return rect;
	  }
	});

	function getOtherDim(thisDim) {
	  // FIXME
	  // 这个逻辑和getOtherAxis里一致，但是写在这里是否不好
	  var map = {
	    x: 'y',
	    y: 'x',
	    radius: 'angle',
	    angle: 'radius'
	  };
	  return map[thisDim];
	}

	function getCursor(orient) {
	  return orient === 'vertical' ? 'ns-resize' : 'ew-resize';
	}

	var _default = SliderZoomView;
	module.exports = _default;

/***/ },
/* 548 */
/***/ function(module, exports, __webpack_require__) {

	var DataZoomModel = __webpack_require__(542);

	var _default = DataZoomModel.extend({
	  type: 'dataZoom.inside',

	  /**
	   * @protected
	   */
	  defaultOption: {
	    disabled: false,
	    // Whether disable this inside zoom.
	    zoomLock: false,
	    // Whether disable zoom but only pan.
	    zoomOnMouseWheel: true,
	    // Can be: true / false / 'shift' / 'ctrl' / 'alt'.
	    moveOnMouseMove: true,
	    // Can be: true / false / 'shift' / 'ctrl' / 'alt'.
	    preventDefaultMouseMove: true
	  }
	});

	module.exports = _default;

/***/ },
/* 549 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var DataZoomView = __webpack_require__(545);

	var sliderMove = __webpack_require__(413);

	var roams = __webpack_require__(550);

	var bind = zrUtil.bind;
	var InsideZoomView = DataZoomView.extend({
	  type: 'dataZoom.inside',

	  /**
	   * @override
	   */
	  init: function (ecModel, api) {
	    /**
	     * 'throttle' is used in this.dispatchAction, so we save range
	     * to avoid missing some 'pan' info.
	     * @private
	     * @type {Array.<number>}
	     */
	    this._range;
	  },

	  /**
	   * @override
	   */
	  render: function (dataZoomModel, ecModel, api, payload) {
	    InsideZoomView.superApply(this, 'render', arguments); // Notice: origin this._range should be maintained, and should not be re-fetched
	    // from dataZoomModel when payload.type is 'dataZoom', otherwise 'pan' or 'zoom'
	    // info will be missed because of 'throttle' of this.dispatchAction.

	    if (roams.shouldRecordRange(payload, dataZoomModel.id)) {
	      this._range = dataZoomModel.getPercentRange();
	    } // Reset controllers.


	    zrUtil.each(this.getTargetCoordInfo(), function (coordInfoList, coordSysName) {
	      var allCoordIds = zrUtil.map(coordInfoList, function (coordInfo) {
	        return roams.generateCoordId(coordInfo.model);
	      });
	      zrUtil.each(coordInfoList, function (coordInfo) {
	        var coordModel = coordInfo.model;
	        var dataZoomOption = dataZoomModel.option;
	        roams.register(api, {
	          coordId: roams.generateCoordId(coordModel),
	          allCoordIds: allCoordIds,
	          containsPoint: function (e, x, y) {
	            return coordModel.coordinateSystem.containPoint([x, y]);
	          },
	          dataZoomId: dataZoomModel.id,
	          throttleRate: dataZoomModel.get('throttle', true),
	          panGetRange: bind(this._onPan, this, coordInfo, coordSysName),
	          zoomGetRange: bind(this._onZoom, this, coordInfo, coordSysName),
	          zoomLock: dataZoomOption.zoomLock,
	          disabled: dataZoomOption.disabled,
	          roamControllerOpt: {
	            zoomOnMouseWheel: dataZoomOption.zoomOnMouseWheel,
	            moveOnMouseMove: dataZoomOption.moveOnMouseMove,
	            preventDefaultMouseMove: dataZoomOption.preventDefaultMouseMove
	          }
	        });
	      }, this);
	    }, this);
	  },

	  /**
	   * @override
	   */
	  dispose: function () {
	    roams.unregister(this.api, this.dataZoomModel.id);
	    InsideZoomView.superApply(this, 'dispose', arguments);
	    this._range = null;
	  },

	  /**
	   * @private
	   */
	  _onPan: function (coordInfo, coordSysName, controller, dx, dy, oldX, oldY, newX, newY) {
	    var range = this._range.slice(); // Calculate transform by the first axis.


	    var axisModel = coordInfo.axisModels[0];

	    if (!axisModel) {
	      return;
	    }

	    var directionInfo = getDirectionInfo[coordSysName]([oldX, oldY], [newX, newY], axisModel, controller, coordInfo);
	    var percentDelta = directionInfo.signal * (range[1] - range[0]) * directionInfo.pixel / directionInfo.pixelLength;
	    sliderMove(percentDelta, range, [0, 100], 'all');
	    return this._range = range;
	  },

	  /**
	   * @private
	   */
	  _onZoom: function (coordInfo, coordSysName, controller, scale, mouseX, mouseY) {
	    var range = this._range.slice(); // Calculate transform by the first axis.


	    var axisModel = coordInfo.axisModels[0];

	    if (!axisModel) {
	      return;
	    }

	    var directionInfo = getDirectionInfo[coordSysName](null, [mouseX, mouseY], axisModel, controller, coordInfo);
	    var percentPoint = (directionInfo.signal > 0 ? directionInfo.pixelStart + directionInfo.pixelLength - directionInfo.pixel : directionInfo.pixel - directionInfo.pixelStart) / directionInfo.pixelLength * (range[1] - range[0]) + range[0];
	    scale = Math.max(1 / scale, 0);
	    range[0] = (range[0] - percentPoint) * scale + percentPoint;
	    range[1] = (range[1] - percentPoint) * scale + percentPoint; // Restrict range.

	    var minMaxSpan = this.dataZoomModel.findRepresentativeAxisProxy().getMinMaxSpan();
	    sliderMove(0, range, [0, 100], 0, minMaxSpan.minSpan, minMaxSpan.maxSpan);
	    return this._range = range;
	  }
	});
	var getDirectionInfo = {
	  grid: function (oldPoint, newPoint, axisModel, controller, coordInfo) {
	    var axis = axisModel.axis;
	    var ret = {};
	    var rect = coordInfo.model.coordinateSystem.getRect();
	    oldPoint = oldPoint || [0, 0];

	    if (axis.dim === 'x') {
	      ret.pixel = newPoint[0] - oldPoint[0];
	      ret.pixelLength = rect.width;
	      ret.pixelStart = rect.x;
	      ret.signal = axis.inverse ? 1 : -1;
	    } else {
	      // axis.dim === 'y'
	      ret.pixel = newPoint[1] - oldPoint[1];
	      ret.pixelLength = rect.height;
	      ret.pixelStart = rect.y;
	      ret.signal = axis.inverse ? -1 : 1;
	    }

	    return ret;
	  },
	  polar: function (oldPoint, newPoint, axisModel, controller, coordInfo) {
	    var axis = axisModel.axis;
	    var ret = {};
	    var polar = coordInfo.model.coordinateSystem;
	    var radiusExtent = polar.getRadiusAxis().getExtent();
	    var angleExtent = polar.getAngleAxis().getExtent();
	    oldPoint = oldPoint ? polar.pointToCoord(oldPoint) : [0, 0];
	    newPoint = polar.pointToCoord(newPoint);

	    if (axisModel.mainType === 'radiusAxis') {
	      ret.pixel = newPoint[0] - oldPoint[0]; // ret.pixelLength = Math.abs(radiusExtent[1] - radiusExtent[0]);
	      // ret.pixelStart = Math.min(radiusExtent[0], radiusExtent[1]);

	      ret.pixelLength = radiusExtent[1] - radiusExtent[0];
	      ret.pixelStart = radiusExtent[0];
	      ret.signal = axis.inverse ? 1 : -1;
	    } else {
	      // 'angleAxis'
	      ret.pixel = newPoint[1] - oldPoint[1]; // ret.pixelLength = Math.abs(angleExtent[1] - angleExtent[0]);
	      // ret.pixelStart = Math.min(angleExtent[0], angleExtent[1]);

	      ret.pixelLength = angleExtent[1] - angleExtent[0];
	      ret.pixelStart = angleExtent[0];
	      ret.signal = axis.inverse ? -1 : 1;
	    }

	    return ret;
	  },
	  singleAxis: function (oldPoint, newPoint, axisModel, controller, coordInfo) {
	    var axis = axisModel.axis;
	    var rect = coordInfo.model.coordinateSystem.getRect();
	    var ret = {};
	    oldPoint = oldPoint || [0, 0];

	    if (axis.orient === 'horizontal') {
	      ret.pixel = newPoint[0] - oldPoint[0];
	      ret.pixelLength = rect.width;
	      ret.pixelStart = rect.x;
	      ret.signal = axis.inverse ? 1 : -1;
	    } else {
	      // 'vertical'
	      ret.pixel = newPoint[1] - oldPoint[1];
	      ret.pixelLength = rect.height;
	      ret.pixelStart = rect.y;
	      ret.signal = axis.inverse ? -1 : 1;
	    }

	    return ret;
	  }
	};
	var _default = InsideZoomView;
	module.exports = _default;

/***/ },
/* 550 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var RoamController = __webpack_require__(348);

	var throttleUtil = __webpack_require__(259);

	// Only create one roam controller for each coordinate system.
	// one roam controller might be refered by two inside data zoom
	// components (for example, one for x and one for y). When user
	// pan or zoom, only dispatch one action for those data zoom
	// components.
	var curry = zrUtil.curry;
	var ATTR = '\0_ec_dataZoom_roams';
	/**
	 * @public
	 * @param {module:echarts/ExtensionAPI} api
	 * @param {Object} dataZoomInfo
	 * @param {string} dataZoomInfo.coordId
	 * @param {Function} dataZoomInfo.containsPoint
	 * @param {Array.<string>} dataZoomInfo.allCoordIds
	 * @param {string} dataZoomInfo.dataZoomId
	 * @param {number} dataZoomInfo.throttleRate
	 * @param {Function} dataZoomInfo.panGetRange
	 * @param {Function} dataZoomInfo.zoomGetRange
	 * @param {boolean} [dataZoomInfo.zoomLock]
	 * @param {boolean} [dataZoomInfo.disabled]
	 */

	function register(api, dataZoomInfo) {
	  var store = giveStore(api);
	  var theDataZoomId = dataZoomInfo.dataZoomId;
	  var theCoordId = dataZoomInfo.coordId; // Do clean when a dataZoom changes its target coordnate system.
	  // Avoid memory leak, dispose all not-used-registered.

	  zrUtil.each(store, function (record, coordId) {
	    var dataZoomInfos = record.dataZoomInfos;

	    if (dataZoomInfos[theDataZoomId] && zrUtil.indexOf(dataZoomInfo.allCoordIds, theCoordId) < 0) {
	      delete dataZoomInfos[theDataZoomId];
	      record.count--;
	    }
	  });
	  cleanStore(store);
	  var record = store[theCoordId]; // Create if needed.

	  if (!record) {
	    record = store[theCoordId] = {
	      coordId: theCoordId,
	      dataZoomInfos: {},
	      count: 0
	    };
	    record.controller = createController(api, record);
	    record.dispatchAction = zrUtil.curry(dispatchAction, api);
	  } // Update reference of dataZoom.


	  !record.dataZoomInfos[theDataZoomId] && record.count++;
	  record.dataZoomInfos[theDataZoomId] = dataZoomInfo;
	  var controllerParams = mergeControllerParams(record.dataZoomInfos);
	  record.controller.enable(controllerParams.controlType, controllerParams.opt); // Consider resize, area should be always updated.

	  record.controller.setPointerChecker(dataZoomInfo.containsPoint); // Update throttle.

	  throttleUtil.createOrUpdate(record, 'dispatchAction', dataZoomInfo.throttleRate, 'fixRate');
	}
	/**
	 * @public
	 * @param {module:echarts/ExtensionAPI} api
	 * @param {string} dataZoomId
	 */


	function unregister(api, dataZoomId) {
	  var store = giveStore(api);
	  zrUtil.each(store, function (record) {
	    record.controller.dispose();
	    var dataZoomInfos = record.dataZoomInfos;

	    if (dataZoomInfos[dataZoomId]) {
	      delete dataZoomInfos[dataZoomId];
	      record.count--;
	    }
	  });
	  cleanStore(store);
	}
	/**
	 * @public
	 */


	function shouldRecordRange(payload, dataZoomId) {
	  if (payload && payload.type === 'dataZoom' && payload.batch) {
	    for (var i = 0, len = payload.batch.length; i < len; i++) {
	      if (payload.batch[i].dataZoomId === dataZoomId) {
	        return false;
	      }
	    }
	  }

	  return true;
	}
	/**
	 * @public
	 */


	function generateCoordId(coordModel) {
	  return coordModel.type + '\0_' + coordModel.id;
	}
	/**
	 * Key: coordId, value: {dataZoomInfos: [], count, controller}
	 * @type {Array.<Object>}
	 */


	function giveStore(api) {
	  // Mount store on zrender instance, so that we do not
	  // need to worry about dispose.
	  var zr = api.getZr();
	  return zr[ATTR] || (zr[ATTR] = {});
	}

	function createController(api, newRecord) {
	  var controller = new RoamController(api.getZr());
	  controller.on('pan', curry(onPan, newRecord));
	  controller.on('zoom', curry(onZoom, newRecord));
	  return controller;
	}

	function cleanStore(store) {
	  zrUtil.each(store, function (record, coordId) {
	    if (!record.count) {
	      record.controller.dispose();
	      delete store[coordId];
	    }
	  });
	}

	function onPan(record, dx, dy, oldX, oldY, newX, newY) {
	  wrapAndDispatch(record, function (info) {
	    return info.panGetRange(record.controller, dx, dy, oldX, oldY, newX, newY);
	  });
	}

	function onZoom(record, scale, mouseX, mouseY) {
	  wrapAndDispatch(record, function (info) {
	    return info.zoomGetRange(record.controller, scale, mouseX, mouseY);
	  });
	}

	function wrapAndDispatch(record, getRange) {
	  var batch = [];
	  zrUtil.each(record.dataZoomInfos, function (info) {
	    var range = getRange(info);
	    !info.disabled && range && batch.push({
	      dataZoomId: info.dataZoomId,
	      start: range[0],
	      end: range[1]
	    });
	  });
	  record.dispatchAction(batch);
	}
	/**
	 * This action will be throttled.
	 */


	function dispatchAction(api, batch) {
	  api.dispatchAction({
	    type: 'dataZoom',
	    batch: batch
	  });
	}
	/**
	 * Merge roamController settings when multiple dataZooms share one roamController.
	 */


	function mergeControllerParams(dataZoomInfos) {
	  var controlType;
	  var opt = {};
	  var typePriority = {
	    'true': 2,
	    'move': 1,
	    'false': 0,
	    'undefined': -1
	  };
	  zrUtil.each(dataZoomInfos, function (dataZoomInfo) {
	    var oneType = dataZoomInfo.disabled ? false : dataZoomInfo.zoomLock ? 'move' : true;
	    typePriority[oneType] > typePriority[controlType] && (controlType = oneType); // Do not support that different 'shift'/'ctrl'/'alt' setting used in one coord sys.

	    zrUtil.extend(opt, dataZoomInfo.roamControllerOpt);
	  });
	  return {
	    controlType: controlType,
	    opt: opt
	  };
	}

	exports.register = register;
	exports.unregister = unregister;
	exports.shouldRecordRange = shouldRecordRange;
	exports.generateCoordId = generateCoordId;

/***/ },
/* 551 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	echarts.registerProcessor(function (ecModel, api) {
	  ecModel.eachComponent('dataZoom', function (dataZoomModel) {
	    // We calculate window and reset axis here but not in model
	    // init stage and not after action dispatch handler, because
	    // reset should be called after seriesData.restoreData.
	    dataZoomModel.eachTargetAxis(resetSingleAxis); // Caution: data zoom filtering is order sensitive when using
	    // percent range and no min/max/scale set on axis.
	    // For example, we have dataZoom definition:
	    // [
	    //      {xAxisIndex: 0, start: 30, end: 70},
	    //      {yAxisIndex: 0, start: 20, end: 80}
	    // ]
	    // In this case, [20, 80] of y-dataZoom should be based on data
	    // that have filtered by x-dataZoom using range of [30, 70],
	    // but should not be based on full raw data. Thus sliding
	    // x-dataZoom will change both ranges of xAxis and yAxis,
	    // while sliding y-dataZoom will only change the range of yAxis.
	    // So we should filter x-axis after reset x-axis immediately,
	    // and then reset y-axis and filter y-axis.

	    dataZoomModel.eachTargetAxis(filterSingleAxis);
	  });
	  ecModel.eachComponent('dataZoom', function (dataZoomModel) {
	    // Fullfill all of the range props so that user
	    // is able to get them from chart.getOption().
	    var axisProxy = dataZoomModel.findRepresentativeAxisProxy();
	    var percentRange = axisProxy.getDataPercentWindow();
	    var valueRange = axisProxy.getDataValueWindow();
	    dataZoomModel.setRawRange({
	      start: percentRange[0],
	      end: percentRange[1],
	      startValue: valueRange[0],
	      endValue: valueRange[1]
	    }, true);
	  });
	});

	function resetSingleAxis(dimNames, axisIndex, dataZoomModel) {
	  dataZoomModel.getAxisProxy(dimNames.name, axisIndex).reset(dataZoomModel);
	}

	function filterSingleAxis(dimNames, axisIndex, dataZoomModel) {
	  dataZoomModel.getAxisProxy(dimNames.name, axisIndex).filterData(dataZoomModel);
	}

/***/ },
/* 552 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var zrUtil = __webpack_require__(166);

	var helper = __webpack_require__(543);

	echarts.registerAction('dataZoom', function (payload, ecModel) {
	  var linkedNodesFinder = helper.createLinkedNodesFinder(zrUtil.bind(ecModel.eachComponent, ecModel, 'dataZoom'), helper.eachAxisDim, function (model, dimNames) {
	    return model.get(dimNames.axisIndex);
	  });
	  var effectedModels = [];
	  ecModel.eachComponent({
	    mainType: 'dataZoom',
	    query: payload
	  }, function (model, index) {
	    effectedModels.push.apply(effectedModels, linkedNodesFinder(model).nodes);
	  });
	  zrUtil.each(effectedModels, function (dataZoomModel, index) {
	    dataZoomModel.setRawRange({
	      start: payload.start,
	      end: payload.end,
	      startValue: payload.startValue,
	      endValue: payload.endValue
	    });
	  });
	});

/***/ },
/* 553 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(554);

	__webpack_require__(565);

/***/ },
/* 554 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var preprocessor = __webpack_require__(555);

	__webpack_require__(556);

	__webpack_require__(557);

	__webpack_require__(558);

	__webpack_require__(561);

	__webpack_require__(564);

	/**
	 * DataZoom component entry
	 */
	echarts.registerPreprocessor(preprocessor);

/***/ },
/* 555 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var each = zrUtil.each;

	function _default(option) {
	  var visualMap = option && option.visualMap;

	  if (!zrUtil.isArray(visualMap)) {
	    visualMap = visualMap ? [visualMap] : [];
	  }

	  each(visualMap, function (opt) {
	    if (!opt) {
	      return;
	    } // rename splitList to pieces


	    if (has(opt, 'splitList') && !has(opt, 'pieces')) {
	      opt.pieces = opt.splitList;
	      delete opt.splitList;
	    }

	    var pieces = opt.pieces;

	    if (pieces && zrUtil.isArray(pieces)) {
	      each(pieces, function (piece) {
	        if (zrUtil.isObject(piece)) {
	          if (has(piece, 'start') && !has(piece, 'min')) {
	            piece.min = piece.start;
	          }

	          if (has(piece, 'end') && !has(piece, 'max')) {
	            piece.max = piece.end;
	          }
	        }
	      });
	    }
	  });
	}

	function has(obj, name) {
	  return obj && obj.hasOwnProperty && obj.hasOwnProperty(name);
	}

	module.exports = _default;

/***/ },
/* 556 */
/***/ function(module, exports, __webpack_require__) {

	var Component = __webpack_require__(245);

	Component.registerSubTypeDefaulter('visualMap', function (option) {
	  // Compatible with ec2, when splitNumber === 0, continuous visualMap will be used.
	  return !option.categories && (!(option.pieces ? option.pieces.length > 0 : option.splitNumber > 0) || option.calculable) ? 'continuous' : 'piecewise';
	});

/***/ },
/* 557 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var zrUtil = __webpack_require__(166);

	var visualSolution = __webpack_require__(526);

	var VisualMapping = __webpack_require__(377);

	echarts.registerVisual(echarts.PRIORITY.VISUAL.COMPONENT, function (ecModel) {
	  ecModel.eachComponent('visualMap', function (visualMapModel) {
	    processSingleVisualMap(visualMapModel, ecModel);
	  });
	  prepareVisualMeta(ecModel);
	});

	function processSingleVisualMap(visualMapModel, ecModel) {
	  visualMapModel.eachTargetSeries(function (seriesModel) {
	    var data = seriesModel.getData();
	    visualSolution.applyVisual(visualMapModel.stateList, visualMapModel.targetVisuals, data, visualMapModel.getValueState, visualMapModel, visualMapModel.getDataDimension(data));
	  });
	} // Only support color.


	function prepareVisualMeta(ecModel) {
	  ecModel.eachSeries(function (seriesModel) {
	    var data = seriesModel.getData();
	    var visualMetaList = [];
	    ecModel.eachComponent('visualMap', function (visualMapModel) {
	      if (visualMapModel.isTargetSeries(seriesModel)) {
	        var visualMeta = visualMapModel.getVisualMeta(zrUtil.bind(getColorVisual, null, seriesModel, visualMapModel)) || {
	          stops: [],
	          outerColors: []
	        };
	        visualMeta.dimension = visualMapModel.getDataDimension(data);
	        visualMetaList.push(visualMeta);
	      }
	    }); // console.log(JSON.stringify(visualMetaList.map(a => a.stops)));

	    seriesModel.getData().setVisual('visualMeta', visualMetaList);
	  });
	} // FIXME
	// performance and export for heatmap?
	// value can be Infinity or -Infinity


	function getColorVisual(seriesModel, visualMapModel, value, valueState) {
	  var mappings = visualMapModel.targetVisuals[valueState];
	  var visualTypes = VisualMapping.prepareVisualTypes(mappings);
	  var resultVisual = {
	    color: seriesModel.getData().getVisual('color') // default color.

	  };

	  for (var i = 0, len = visualTypes.length; i < len; i++) {
	    var type = visualTypes[i];
	    var mapping = mappings[type === 'opacity' ? '__alphaForOpacity' : type];
	    mapping && mapping.applyVisual(value, getVisual, setVisual);
	  }

	  return resultVisual.color;

	  function getVisual(key) {
	    return resultVisual[key];
	  }

	  function setVisual(key, value) {
	    resultVisual[key] = value;
	  }
	}

/***/ },
/* 558 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var VisualMapModel = __webpack_require__(559);

	var numberUtil = __webpack_require__(205);

	// Constant
	var DEFAULT_BAR_BOUND = [20, 140];
	var ContinuousModel = VisualMapModel.extend({
	  type: 'visualMap.continuous',

	  /**
	   * @protected
	   */
	  defaultOption: {
	    align: 'auto',
	    // 'auto', 'left', 'right', 'top', 'bottom'
	    calculable: false,
	    // This prop effect default component type determine,
	    // See echarts/component/visualMap/typeDefaulter.
	    range: null,
	    // selected range. In default case `range` is [min, max]
	    // and can auto change along with modification of min max,
	    // util use specifid a range.
	    realtime: true,
	    // Whether realtime update.
	    itemHeight: null,
	    // The length of the range control edge.
	    itemWidth: null,
	    // The length of the other side.
	    hoverLink: true,
	    // Enable hover highlight.
	    hoverLinkDataSize: null,
	    // The size of hovered data.
	    hoverLinkOnHandle: null // Whether trigger hoverLink when hover handle.
	    // If not specified, follow the value of `realtime`.

	  },

	  /**
	   * @override
	   */
	  optionUpdated: function (newOption, isInit) {
	    ContinuousModel.superApply(this, 'optionUpdated', arguments);
	    this.resetExtent();
	    this.resetVisual(function (mappingOption) {
	      mappingOption.mappingMethod = 'linear';
	      mappingOption.dataExtent = this.getExtent();
	    });

	    this._resetRange();
	  },

	  /**
	   * @protected
	   * @override
	   */
	  resetItemSize: function () {
	    ContinuousModel.superApply(this, 'resetItemSize', arguments);
	    var itemSize = this.itemSize;
	    this._orient === 'horizontal' && itemSize.reverse();
	    (itemSize[0] == null || isNaN(itemSize[0])) && (itemSize[0] = DEFAULT_BAR_BOUND[0]);
	    (itemSize[1] == null || isNaN(itemSize[1])) && (itemSize[1] = DEFAULT_BAR_BOUND[1]);
	  },

	  /**
	   * @private
	   */
	  _resetRange: function () {
	    var dataExtent = this.getExtent();
	    var range = this.option.range;

	    if (!range || range.auto) {
	      // `range` should always be array (so we dont use other
	      // value like 'auto') for user-friend. (consider getOption).
	      dataExtent.auto = 1;
	      this.option.range = dataExtent;
	    } else if (zrUtil.isArray(range)) {
	      if (range[0] > range[1]) {
	        range.reverse();
	      }

	      range[0] = Math.max(range[0], dataExtent[0]);
	      range[1] = Math.min(range[1], dataExtent[1]);
	    }
	  },

	  /**
	   * @protected
	   * @override
	   */
	  completeVisualOption: function () {
	    VisualMapModel.prototype.completeVisualOption.apply(this, arguments);
	    zrUtil.each(this.stateList, function (state) {
	      var symbolSize = this.option.controller[state].symbolSize;

	      if (symbolSize && symbolSize[0] !== symbolSize[1]) {
	        symbolSize[0] = 0; // For good looking.
	      }
	    }, this);
	  },

	  /**
	   * @override
	   */
	  setSelected: function (selected) {
	    this.option.range = selected.slice();

	    this._resetRange();
	  },

	  /**
	   * @public
	   */
	  getSelected: function () {
	    var dataExtent = this.getExtent();
	    var dataInterval = numberUtil.asc((this.get('range') || []).slice()); // Clamp

	    dataInterval[0] > dataExtent[1] && (dataInterval[0] = dataExtent[1]);
	    dataInterval[1] > dataExtent[1] && (dataInterval[1] = dataExtent[1]);
	    dataInterval[0] < dataExtent[0] && (dataInterval[0] = dataExtent[0]);
	    dataInterval[1] < dataExtent[0] && (dataInterval[1] = dataExtent[0]);
	    return dataInterval;
	  },

	  /**
	   * @override
	   */
	  getValueState: function (value) {
	    var range = this.option.range;
	    var dataExtent = this.getExtent(); // When range[0] === dataExtent[0], any value larger than dataExtent[0] maps to 'inRange'.
	    // range[1] is processed likewise.

	    return (range[0] <= dataExtent[0] || range[0] <= value) && (range[1] >= dataExtent[1] || value <= range[1]) ? 'inRange' : 'outOfRange';
	  },

	  /**
	   * @params {Array.<number>} range target value: range[0] <= value && value <= range[1]
	   * @return {Array.<Object>} [{seriesId, dataIndices: <Array.<number>>}, ...]
	   */
	  findTargetDataIndices: function (range) {
	    var result = [];
	    this.eachTargetSeries(function (seriesModel) {
	      var dataIndices = [];
	      var data = seriesModel.getData();
	      data.each(this.getDataDimension(data), function (value, dataIndex) {
	        range[0] <= value && value <= range[1] && dataIndices.push(dataIndex);
	      }, true, this);
	      result.push({
	        seriesId: seriesModel.id,
	        dataIndex: dataIndices
	      });
	    }, this);
	    return result;
	  },

	  /**
	   * @implement
	   */
	  getVisualMeta: function (getColorVisual) {
	    var oVals = getColorStopValues(this, 'outOfRange', this.getExtent());
	    var iVals = getColorStopValues(this, 'inRange', this.option.range.slice());
	    var stops = [];

	    function setStop(value, valueState) {
	      stops.push({
	        value: value,
	        color: getColorVisual(value, valueState)
	      });
	    } // Format to: outOfRange -- inRange -- outOfRange.


	    var iIdx = 0;
	    var oIdx = 0;
	    var iLen = iVals.length;
	    var oLen = oVals.length;

	    for (; oIdx < oLen && (!iVals.length || oVals[oIdx] <= iVals[0]); oIdx++) {
	      // If oVal[oIdx] === iVals[iIdx], oVal[oIdx] should be ignored.
	      if (oVals[oIdx] < iVals[iIdx]) {
	        setStop(oVals[oIdx], 'outOfRange');
	      }
	    }

	    for (var first = 1; iIdx < iLen; iIdx++, first = 0) {
	      // If range is full, value beyond min, max will be clamped.
	      // make a singularity
	      first && stops.length && setStop(iVals[iIdx], 'outOfRange');
	      setStop(iVals[iIdx], 'inRange');
	    }

	    for (var first = 1; oIdx < oLen; oIdx++) {
	      if (!iVals.length || iVals[iVals.length - 1] < oVals[oIdx]) {
	        // make a singularity
	        if (first) {
	          stops.length && setStop(stops[stops.length - 1].value, 'outOfRange');
	          first = 0;
	        }

	        setStop(oVals[oIdx], 'outOfRange');
	      }
	    }

	    var stopsLen = stops.length;
	    return {
	      stops: stops,
	      outerColors: [stopsLen ? stops[0].color : 'transparent', stopsLen ? stops[stopsLen - 1].color : 'transparent']
	    };
	  }
	});

	function getColorStopValues(visualMapModel, valueState, dataExtent) {
	  if (dataExtent[0] === dataExtent[1]) {
	    return dataExtent.slice();
	  } // When using colorHue mapping, it is not linear color any more.
	  // Moreover, canvas gradient seems not to be accurate linear.
	  // FIXME
	  // Should be arbitrary value 100? or based on pixel size?


	  var count = 200;
	  var step = (dataExtent[1] - dataExtent[0]) / count;
	  var value = dataExtent[0];
	  var stopValues = [];

	  for (var i = 0; i <= count && value < dataExtent[1]; i++) {
	    stopValues.push(value);
	    value += step;
	  }

	  stopValues.push(dataExtent[1]);
	  return stopValues;
	}

	var _default = ContinuousModel;
	module.exports = _default;

/***/ },
/* 559 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var zrUtil = __webpack_require__(166);

	var env = __webpack_require__(165);

	var visualDefault = __webpack_require__(560);

	var VisualMapping = __webpack_require__(377);

	var visualSolution = __webpack_require__(526);

	var modelUtil = __webpack_require__(203);

	var numberUtil = __webpack_require__(205);

	var mapVisual = VisualMapping.mapVisual;
	var eachVisual = VisualMapping.eachVisual;
	var isArray = zrUtil.isArray;
	var each = zrUtil.each;
	var asc = numberUtil.asc;
	var linearMap = numberUtil.linearMap;
	var noop = zrUtil.noop;
	var DEFAULT_COLOR = ['#f6efa6', '#d88273', '#bf444c'];
	var VisualMapModel = echarts.extendComponentModel({
	  type: 'visualMap',
	  dependencies: ['series'],

	  /**
	   * @readOnly
	   * @type {Array.<string>}
	   */
	  stateList: ['inRange', 'outOfRange'],

	  /**
	   * @readOnly
	   * @type {Array.<string>}
	   */
	  replacableOptionKeys: ['inRange', 'outOfRange', 'target', 'controller', 'color'],

	  /**
	   * [lowerBound, upperBound]
	   *
	   * @readOnly
	   * @type {Array.<number>}
	   */
	  dataBound: [-Infinity, Infinity],

	  /**
	   * @readOnly
	   * @type {string|Object}
	   */
	  layoutMode: {
	    type: 'box',
	    ignoreSize: true
	  },

	  /**
	   * @protected
	   */
	  defaultOption: {
	    show: true,
	    zlevel: 0,
	    z: 4,
	    seriesIndex: 'all',
	    // 'all' or null/undefined: all series.
	    // A number or an array of number: the specified series.
	    // set min: 0, max: 200, only for campatible with ec2.
	    // In fact min max should not have default value.
	    min: 0,
	    // min value, must specified if pieces is not specified.
	    max: 200,
	    // max value, must specified if pieces is not specified.
	    dimension: null,
	    inRange: null,
	    // 'color', 'colorHue', 'colorSaturation', 'colorLightness', 'colorAlpha',
	    // 'symbol', 'symbolSize'
	    outOfRange: null,
	    // 'color', 'colorHue', 'colorSaturation',
	    // 'colorLightness', 'colorAlpha',
	    // 'symbol', 'symbolSize'
	    left: 0,
	    // 'center' ¦ 'left' ¦ 'right' ¦ {number} (px)
	    right: null,
	    // The same as left.
	    top: null,
	    // 'top' ¦ 'bottom' ¦ 'center' ¦ {number} (px)
	    bottom: 0,
	    // The same as top.
	    itemWidth: null,
	    itemHeight: null,
	    inverse: false,
	    orient: 'vertical',
	    // 'horizontal' ¦ 'vertical'
	    backgroundColor: 'rgba(0,0,0,0)',
	    borderColor: '#ccc',
	    // 值域边框颜色
	    contentColor: '#5793f3',
	    inactiveColor: '#aaa',
	    borderWidth: 0,
	    // 值域边框线宽，单位px，默认为0（无边框）
	    padding: 5,
	    // 值域内边距，单位px，默认各方向内边距为5，
	    // 接受数组分别设定上右下左边距，同css
	    textGap: 10,
	    //
	    precision: 0,
	    // 小数精度，默认为0，无小数点
	    color: null,
	    //颜色（deprecated，兼容ec2，顺序同pieces，不同于inRange/outOfRange）
	    formatter: null,
	    text: null,
	    // 文本，如['高', '低']，兼容ec2，text[0]对应高值，text[1]对应低值
	    textStyle: {
	      color: '#333' // 值域文字颜色

	    }
	  },

	  /**
	   * @protected
	   */
	  init: function (option, parentModel, ecModel) {
	    /**
	     * @private
	     * @type {Array.<number>}
	     */
	    this._dataExtent;
	    /**
	     * @readOnly
	     */

	    this.targetVisuals = {};
	    /**
	     * @readOnly
	     */

	    this.controllerVisuals = {};
	    /**
	     * @readOnly
	     */

	    this.textStyleModel;
	    /**
	     * [width, height]
	     * @readOnly
	     * @type {Array.<number>}
	     */

	    this.itemSize;
	    this.mergeDefaultAndTheme(option, ecModel);
	  },

	  /**
	   * @protected
	   */
	  optionUpdated: function (newOption, isInit) {
	    var thisOption = this.option; // FIXME
	    // necessary?
	    // Disable realtime view update if canvas is not supported.

	    if (!env.canvasSupported) {
	      thisOption.realtime = false;
	    }

	    !isInit && visualSolution.replaceVisualOption(thisOption, newOption, this.replacableOptionKeys);
	    this.textStyleModel = this.getModel('textStyle');
	    this.resetItemSize();
	    this.completeVisualOption();
	  },

	  /**
	   * @protected
	   */
	  resetVisual: function (supplementVisualOption) {
	    var stateList = this.stateList;
	    supplementVisualOption = zrUtil.bind(supplementVisualOption, this);
	    this.controllerVisuals = visualSolution.createVisualMappings(this.option.controller, stateList, supplementVisualOption);
	    this.targetVisuals = visualSolution.createVisualMappings(this.option.target, stateList, supplementVisualOption);
	  },

	  /**
	   * @protected
	   * @return {Array.<number>} An array of series indices.
	   */
	  getTargetSeriesIndices: function () {
	    var optionSeriesIndex = this.option.seriesIndex;
	    var seriesIndices = [];

	    if (optionSeriesIndex == null || optionSeriesIndex === 'all') {
	      this.ecModel.eachSeries(function (seriesModel, index) {
	        seriesIndices.push(index);
	      });
	    } else {
	      seriesIndices = modelUtil.normalizeToArray(optionSeriesIndex);
	    }

	    return seriesIndices;
	  },

	  /**
	   * @public
	   */
	  eachTargetSeries: function (callback, context) {
	    zrUtil.each(this.getTargetSeriesIndices(), function (seriesIndex) {
	      callback.call(context, this.ecModel.getSeriesByIndex(seriesIndex));
	    }, this);
	  },

	  /**
	   * @pubilc
	   */
	  isTargetSeries: function (seriesModel) {
	    var is = false;
	    this.eachTargetSeries(function (model) {
	      model === seriesModel && (is = true);
	    });
	    return is;
	  },

	  /**
	   * @example
	   * this.formatValueText(someVal); // format single numeric value to text.
	   * this.formatValueText(someVal, true); // format single category value to text.
	   * this.formatValueText([min, max]); // format numeric min-max to text.
	   * this.formatValueText([this.dataBound[0], max]); // using data lower bound.
	   * this.formatValueText([min, this.dataBound[1]]); // using data upper bound.
	   *
	   * @param {number|Array.<number>} value Real value, or this.dataBound[0 or 1].
	   * @param {boolean} [isCategory=false] Only available when value is number.
	   * @param {Array.<string>} edgeSymbols Open-close symbol when value is interval.
	   * @return {string}
	   * @protected
	   */
	  formatValueText: function (value, isCategory, edgeSymbols) {
	    var option = this.option;
	    var precision = option.precision;
	    var dataBound = this.dataBound;
	    var formatter = option.formatter;
	    var isMinMax;
	    var textValue;
	    edgeSymbols = edgeSymbols || ['<', '>'];

	    if (zrUtil.isArray(value)) {
	      value = value.slice();
	      isMinMax = true;
	    }

	    textValue = isCategory ? value : isMinMax ? [toFixed(value[0]), toFixed(value[1])] : toFixed(value);

	    if (zrUtil.isString(formatter)) {
	      return formatter.replace('{value}', isMinMax ? textValue[0] : textValue).replace('{value2}', isMinMax ? textValue[1] : textValue);
	    } else if (zrUtil.isFunction(formatter)) {
	      return isMinMax ? formatter(value[0], value[1]) : formatter(value);
	    }

	    if (isMinMax) {
	      if (value[0] === dataBound[0]) {
	        return edgeSymbols[0] + ' ' + textValue[1];
	      } else if (value[1] === dataBound[1]) {
	        return edgeSymbols[1] + ' ' + textValue[0];
	      } else {
	        return textValue[0] + ' - ' + textValue[1];
	      }
	    } else {
	      // Format single value (includes category case).
	      return textValue;
	    }

	    function toFixed(val) {
	      return val === dataBound[0] ? 'min' : val === dataBound[1] ? 'max' : (+val).toFixed(Math.min(precision, 20));
	    }
	  },

	  /**
	   * @protected
	   */
	  resetExtent: function () {
	    var thisOption = this.option; // Can not calculate data extent by data here.
	    // Because series and data may be modified in processing stage.
	    // So we do not support the feature "auto min/max".

	    var extent = asc([thisOption.min, thisOption.max]);
	    this._dataExtent = extent;
	  },

	  /**
	   * @public
	   * @param {module:echarts/data/List} list
	   * @return {string} Concrete dimention. If return null/undefined,
	   *                  no dimension used.
	   */
	  getDataDimension: function (list) {
	    var optDim = this.option.dimension;
	    return optDim != null ? optDim : list.dimensions.length - 1;
	  },

	  /**
	   * @public
	   * @override
	   */
	  getExtent: function () {
	    return this._dataExtent.slice();
	  },

	  /**
	   * @protected
	   */
	  completeVisualOption: function () {
	    var thisOption = this.option;
	    var base = {
	      inRange: thisOption.inRange,
	      outOfRange: thisOption.outOfRange
	    };
	    var target = thisOption.target || (thisOption.target = {});
	    var controller = thisOption.controller || (thisOption.controller = {});
	    zrUtil.merge(target, base); // Do not override

	    zrUtil.merge(controller, base); // Do not override

	    var isCategory = this.isCategory();
	    completeSingle.call(this, target);
	    completeSingle.call(this, controller);
	    completeInactive.call(this, target, 'inRange', 'outOfRange'); // completeInactive.call(this, target, 'outOfRange', 'inRange');

	    completeController.call(this, controller);

	    function completeSingle(base) {
	      // Compatible with ec2 dataRange.color.
	      // The mapping order of dataRange.color is: [high value, ..., low value]
	      // whereas inRange.color and outOfRange.color is [low value, ..., high value]
	      // Notice: ec2 has no inverse.
	      if (isArray(thisOption.color) // If there has been inRange: {symbol: ...}, adding color is a mistake.
	      // So adding color only when no inRange defined.
	      && !base.inRange) {
	        base.inRange = {
	          color: thisOption.color.slice().reverse()
	        };
	      } // Compatible with previous logic, always give a defautl color, otherwise
	      // simple config with no inRange and outOfRange will not work.
	      // Originally we use visualMap.color as the default color, but setOption at
	      // the second time the default color will be erased. So we change to use
	      // constant DEFAULT_COLOR.
	      // If user do not want the defualt color, set inRange: {color: null}.


	      base.inRange = base.inRange || {
	        color: DEFAULT_COLOR
	      }; // If using shortcut like: {inRange: 'symbol'}, complete default value.

	      each(this.stateList, function (state) {
	        var visualType = base[state];

	        if (zrUtil.isString(visualType)) {
	          var defa = visualDefault.get(visualType, 'active', isCategory);

	          if (defa) {
	            base[state] = {};
	            base[state][visualType] = defa;
	          } else {
	            // Mark as not specified.
	            delete base[state];
	          }
	        }
	      }, this);
	    }

	    function completeInactive(base, stateExist, stateAbsent) {
	      var optExist = base[stateExist];
	      var optAbsent = base[stateAbsent];

	      if (optExist && !optAbsent) {
	        optAbsent = base[stateAbsent] = {};
	        each(optExist, function (visualData, visualType) {
	          if (!VisualMapping.isValidType(visualType)) {
	            return;
	          }

	          var defa = visualDefault.get(visualType, 'inactive', isCategory);

	          if (defa != null) {
	            optAbsent[visualType] = defa; // Compatibable with ec2:
	            // Only inactive color to rgba(0,0,0,0) can not
	            // make label transparent, so use opacity also.

	            if (visualType === 'color' && !optAbsent.hasOwnProperty('opacity') && !optAbsent.hasOwnProperty('colorAlpha')) {
	              optAbsent.opacity = [0, 0];
	            }
	          }
	        });
	      }
	    }

	    function completeController(controller) {
	      var symbolExists = (controller.inRange || {}).symbol || (controller.outOfRange || {}).symbol;
	      var symbolSizeExists = (controller.inRange || {}).symbolSize || (controller.outOfRange || {}).symbolSize;
	      var inactiveColor = this.get('inactiveColor');
	      each(this.stateList, function (state) {
	        var itemSize = this.itemSize;
	        var visuals = controller[state]; // Set inactive color for controller if no other color
	        // attr (like colorAlpha) specified.

	        if (!visuals) {
	          visuals = controller[state] = {
	            color: isCategory ? inactiveColor : [inactiveColor]
	          };
	        } // Consistent symbol and symbolSize if not specified.


	        if (visuals.symbol == null) {
	          visuals.symbol = symbolExists && zrUtil.clone(symbolExists) || (isCategory ? 'roundRect' : ['roundRect']);
	        }

	        if (visuals.symbolSize == null) {
	          visuals.symbolSize = symbolSizeExists && zrUtil.clone(symbolSizeExists) || (isCategory ? itemSize[0] : [itemSize[0], itemSize[0]]);
	        } // Filter square and none.


	        visuals.symbol = mapVisual(visuals.symbol, function (symbol) {
	          return symbol === 'none' || symbol === 'square' ? 'roundRect' : symbol;
	        }); // Normalize symbolSize

	        var symbolSize = visuals.symbolSize;

	        if (symbolSize != null) {
	          var max = -Infinity; // symbolSize can be object when categories defined.

	          eachVisual(symbolSize, function (value) {
	            value > max && (max = value);
	          });
	          visuals.symbolSize = mapVisual(symbolSize, function (value) {
	            return linearMap(value, [0, max], [0, itemSize[0]], true);
	          });
	        }
	      }, this);
	    }
	  },

	  /**
	   * @protected
	   */
	  resetItemSize: function () {
	    this.itemSize = [parseFloat(this.get('itemWidth')), parseFloat(this.get('itemHeight'))];
	  },

	  /**
	   * @public
	   */
	  isCategory: function () {
	    return !!this.option.categories;
	  },

	  /**
	   * @public
	   * @abstract
	   */
	  setSelected: noop,

	  /**
	   * @public
	   * @abstract
	   * @param {*|module:echarts/data/List} valueOrData
	   * @param {number} dataIndex
	   * @return {string} state See this.stateList
	   */
	  getValueState: noop,

	  /**
	   * FIXME
	   * Do not publish to thirt-part-dev temporarily
	   * util the interface is stable. (Should it return
	   * a function but not visual meta?)
	   *
	   * @pubilc
	   * @abstract
	   * @param {Function} getColorVisual
	   *        params: value, valueState
	   *        return: color
	   * @return {Object} visualMeta
	   *        should includes {stops, outerColors}
	   *        outerColor means [colorBeyondMinValue, colorBeyondMaxValue]
	   */
	  getVisualMeta: noop
	});
	var _default = VisualMapModel;
	module.exports = _default;

/***/ },
/* 560 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	/**
	 * @file Visual mapping.
	 */
	var visualDefault = {
	  /**
	   * @public
	   */
	  get: function (visualType, key, isCategory) {
	    var value = zrUtil.clone((defaultOption[visualType] || {})[key]);
	    return isCategory ? zrUtil.isArray(value) ? value[value.length - 1] : value : value;
	  }
	};
	var defaultOption = {
	  color: {
	    active: ['#006edd', '#e0ffff'],
	    inactive: ['rgba(0,0,0,0)']
	  },
	  colorHue: {
	    active: [0, 360],
	    inactive: [0, 0]
	  },
	  colorSaturation: {
	    active: [0.3, 1],
	    inactive: [0, 0]
	  },
	  colorLightness: {
	    active: [0.9, 0.5],
	    inactive: [0, 0]
	  },
	  colorAlpha: {
	    active: [0.3, 1],
	    inactive: [0, 0]
	  },
	  opacity: {
	    active: [0.3, 1],
	    inactive: [0, 0]
	  },
	  symbol: {
	    active: ['circle', 'roundRect', 'diamond'],
	    inactive: ['none']
	  },
	  symbolSize: {
	    active: [10, 50],
	    inactive: [0, 0]
	  }
	};
	var _default = visualDefault;
	module.exports = _default;

/***/ },
/* 561 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var LinearGradient = __webpack_require__(241);

	var eventTool = __webpack_require__(199);

	var VisualMapView = __webpack_require__(562);

	var graphic = __webpack_require__(212);

	var numberUtil = __webpack_require__(205);

	var sliderMove = __webpack_require__(413);

	var helper = __webpack_require__(563);

	var modelUtil = __webpack_require__(203);

	var linearMap = numberUtil.linearMap;
	var each = zrUtil.each;
	var mathMin = Math.min;
	var mathMax = Math.max; // Arbitrary value

	var HOVER_LINK_SIZE = 12;
	var HOVER_LINK_OUT = 6; // Notice:
	// Any "interval" should be by the order of [low, high].
	// "handle0" (handleIndex === 0) maps to
	// low data value: this._dataInterval[0] and has low coord.
	// "handle1" (handleIndex === 1) maps to
	// high data value: this._dataInterval[1] and has high coord.
	// The logic of transform is implemented in this._createBarGroup.

	var ContinuousView = VisualMapView.extend({
	  type: 'visualMap.continuous',

	  /**
	   * @override
	   */
	  init: function () {
	    ContinuousView.superApply(this, 'init', arguments);
	    /**
	     * @private
	     */

	    this._shapes = {};
	    /**
	     * @private
	     */

	    this._dataInterval = [];
	    /**
	     * @private
	     */

	    this._handleEnds = [];
	    /**
	     * @private
	     */

	    this._orient;
	    /**
	     * @private
	     */

	    this._useHandle;
	    /**
	     * @private
	     */

	    this._hoverLinkDataIndices = [];
	    /**
	     * @private
	     */

	    this._dragging;
	    /**
	     * @private
	     */

	    this._hovering;
	  },

	  /**
	   * @protected
	   * @override
	   */
	  doRender: function (visualMapModel, ecModel, api, payload) {
	    if (!payload || payload.type !== 'selectDataRange' || payload.from !== this.uid) {
	      this._buildView();
	    }
	  },

	  /**
	   * @private
	   */
	  _buildView: function () {
	    this.group.removeAll();
	    var visualMapModel = this.visualMapModel;
	    var thisGroup = this.group;
	    this._orient = visualMapModel.get('orient');
	    this._useHandle = visualMapModel.get('calculable');

	    this._resetInterval();

	    this._renderBar(thisGroup);

	    var dataRangeText = visualMapModel.get('text');

	    this._renderEndsText(thisGroup, dataRangeText, 0);

	    this._renderEndsText(thisGroup, dataRangeText, 1); // Do this for background size calculation.


	    this._updateView(true); // After updating view, inner shapes is built completely,
	    // and then background can be rendered.


	    this.renderBackground(thisGroup); // Real update view

	    this._updateView();

	    this._enableHoverLinkToSeries();

	    this._enableHoverLinkFromSeries();

	    this.positionGroup(thisGroup);
	  },

	  /**
	   * @private
	   */
	  _renderEndsText: function (group, dataRangeText, endsIndex) {
	    if (!dataRangeText) {
	      return;
	    } // Compatible with ec2, text[0] map to high value, text[1] map low value.


	    var text = dataRangeText[1 - endsIndex];
	    text = text != null ? text + '' : '';
	    var visualMapModel = this.visualMapModel;
	    var textGap = visualMapModel.get('textGap');
	    var itemSize = visualMapModel.itemSize;
	    var barGroup = this._shapes.barGroup;

	    var position = this._applyTransform([itemSize[0] / 2, endsIndex === 0 ? -textGap : itemSize[1] + textGap], barGroup);

	    var align = this._applyTransform(endsIndex === 0 ? 'bottom' : 'top', barGroup);

	    var orient = this._orient;
	    var textStyleModel = this.visualMapModel.textStyleModel;
	    this.group.add(new graphic.Text({
	      style: {
	        x: position[0],
	        y: position[1],
	        textVerticalAlign: orient === 'horizontal' ? 'middle' : align,
	        textAlign: orient === 'horizontal' ? align : 'center',
	        text: text,
	        textFont: textStyleModel.getFont(),
	        textFill: textStyleModel.getTextColor()
	      }
	    }));
	  },

	  /**
	   * @private
	   */
	  _renderBar: function (targetGroup) {
	    var visualMapModel = this.visualMapModel;
	    var shapes = this._shapes;
	    var itemSize = visualMapModel.itemSize;
	    var orient = this._orient;
	    var useHandle = this._useHandle;
	    var itemAlign = helper.getItemAlign(visualMapModel, this.api, itemSize);

	    var barGroup = shapes.barGroup = this._createBarGroup(itemAlign); // Bar


	    barGroup.add(shapes.outOfRange = createPolygon());
	    barGroup.add(shapes.inRange = createPolygon(null, useHandle ? getCursor(this._orient) : null, zrUtil.bind(this._dragHandle, this, 'all', false), zrUtil.bind(this._dragHandle, this, 'all', true)));
	    var textRect = visualMapModel.textStyleModel.getTextRect('国');
	    var textSize = mathMax(textRect.width, textRect.height); // Handle

	    if (useHandle) {
	      shapes.handleThumbs = [];
	      shapes.handleLabels = [];
	      shapes.handleLabelPoints = [];

	      this._createHandle(barGroup, 0, itemSize, textSize, orient, itemAlign);

	      this._createHandle(barGroup, 1, itemSize, textSize, orient, itemAlign);
	    }

	    this._createIndicator(barGroup, itemSize, textSize, orient);

	    targetGroup.add(barGroup);
	  },

	  /**
	   * @private
	   */
	  _createHandle: function (barGroup, handleIndex, itemSize, textSize, orient) {
	    var onDrift = zrUtil.bind(this._dragHandle, this, handleIndex, false);
	    var onDragEnd = zrUtil.bind(this._dragHandle, this, handleIndex, true);
	    var handleThumb = createPolygon(createHandlePoints(handleIndex, textSize), getCursor(this._orient), onDrift, onDragEnd);
	    handleThumb.position[0] = itemSize[0];
	    barGroup.add(handleThumb); // Text is always horizontal layout but should not be effected by
	    // transform (orient/inverse). So label is built separately but not
	    // use zrender/graphic/helper/RectText, and is located based on view
	    // group (according to handleLabelPoint) but not barGroup.

	    var textStyleModel = this.visualMapModel.textStyleModel;
	    var handleLabel = new graphic.Text({
	      draggable: true,
	      drift: onDrift,
	      onmousemove: function (e) {
	        // Fot mobile devicem, prevent screen slider on the button.
	        eventTool.stop(e.event);
	      },
	      ondragend: onDragEnd,
	      style: {
	        x: 0,
	        y: 0,
	        text: '',
	        textFont: textStyleModel.getFont(),
	        textFill: textStyleModel.getTextColor()
	      }
	    });
	    this.group.add(handleLabel);
	    var handleLabelPoint = [orient === 'horizontal' ? textSize / 2 : textSize * 1.5, orient === 'horizontal' ? handleIndex === 0 ? -(textSize * 1.5) : textSize * 1.5 : handleIndex === 0 ? -textSize / 2 : textSize / 2];
	    var shapes = this._shapes;
	    shapes.handleThumbs[handleIndex] = handleThumb;
	    shapes.handleLabelPoints[handleIndex] = handleLabelPoint;
	    shapes.handleLabels[handleIndex] = handleLabel;
	  },

	  /**
	   * @private
	   */
	  _createIndicator: function (barGroup, itemSize, textSize, orient) {
	    var indicator = createPolygon([[0, 0]], 'move');
	    indicator.position[0] = itemSize[0];
	    indicator.attr({
	      invisible: true,
	      silent: true
	    });
	    barGroup.add(indicator);
	    var textStyleModel = this.visualMapModel.textStyleModel;
	    var indicatorLabel = new graphic.Text({
	      silent: true,
	      invisible: true,
	      style: {
	        x: 0,
	        y: 0,
	        text: '',
	        textFont: textStyleModel.getFont(),
	        textFill: textStyleModel.getTextColor()
	      }
	    });
	    this.group.add(indicatorLabel);
	    var indicatorLabelPoint = [orient === 'horizontal' ? textSize / 2 : HOVER_LINK_OUT + 3, 0];
	    var shapes = this._shapes;
	    shapes.indicator = indicator;
	    shapes.indicatorLabel = indicatorLabel;
	    shapes.indicatorLabelPoint = indicatorLabelPoint;
	  },

	  /**
	   * @private
	   */
	  _dragHandle: function (handleIndex, isEnd, dx, dy) {
	    if (!this._useHandle) {
	      return;
	    }

	    this._dragging = !isEnd;

	    if (!isEnd) {
	      // Transform dx, dy to bar coordination.
	      var vertex = this._applyTransform([dx, dy], this._shapes.barGroup, true);

	      this._updateInterval(handleIndex, vertex[1]); // Considering realtime, update view should be executed
	      // before dispatch action.


	      this._updateView();
	    } // dragEnd do not dispatch action when realtime.


	    if (isEnd === !this.visualMapModel.get('realtime')) {
	      // jshint ignore:line
	      this.api.dispatchAction({
	        type: 'selectDataRange',
	        from: this.uid,
	        visualMapId: this.visualMapModel.id,
	        selected: this._dataInterval.slice()
	      });
	    }

	    if (isEnd) {
	      !this._hovering && this._clearHoverLinkToSeries();
	    } else if (useHoverLinkOnHandle(this.visualMapModel)) {
	      this._doHoverLinkToSeries(this._handleEnds[handleIndex], false);
	    }
	  },

	  /**
	   * @private
	   */
	  _resetInterval: function () {
	    var visualMapModel = this.visualMapModel;
	    var dataInterval = this._dataInterval = visualMapModel.getSelected();
	    var dataExtent = visualMapModel.getExtent();
	    var sizeExtent = [0, visualMapModel.itemSize[1]];
	    this._handleEnds = [linearMap(dataInterval[0], dataExtent, sizeExtent, true), linearMap(dataInterval[1], dataExtent, sizeExtent, true)];
	  },

	  /**
	   * @private
	   * @param {(number|string)} handleIndex 0 or 1 or 'all'
	   * @param {number} dx
	   * @param {number} dy
	   */
	  _updateInterval: function (handleIndex, delta) {
	    delta = delta || 0;
	    var visualMapModel = this.visualMapModel;
	    var handleEnds = this._handleEnds;
	    var sizeExtent = [0, visualMapModel.itemSize[1]];
	    sliderMove(delta, handleEnds, sizeExtent, handleIndex, // cross is forbiden
	    0);
	    var dataExtent = visualMapModel.getExtent(); // Update data interval.

	    this._dataInterval = [linearMap(handleEnds[0], sizeExtent, dataExtent, true), linearMap(handleEnds[1], sizeExtent, dataExtent, true)];
	  },

	  /**
	   * @private
	   */
	  _updateView: function (forSketch) {
	    var visualMapModel = this.visualMapModel;
	    var dataExtent = visualMapModel.getExtent();
	    var shapes = this._shapes;
	    var outOfRangeHandleEnds = [0, visualMapModel.itemSize[1]];
	    var inRangeHandleEnds = forSketch ? outOfRangeHandleEnds : this._handleEnds;

	    var visualInRange = this._createBarVisual(this._dataInterval, dataExtent, inRangeHandleEnds, 'inRange');

	    var visualOutOfRange = this._createBarVisual(dataExtent, dataExtent, outOfRangeHandleEnds, 'outOfRange');

	    shapes.inRange.setStyle({
	      fill: visualInRange.barColor,
	      opacity: visualInRange.opacity
	    }).setShape('points', visualInRange.barPoints);
	    shapes.outOfRange.setStyle({
	      fill: visualOutOfRange.barColor,
	      opacity: visualOutOfRange.opacity
	    }).setShape('points', visualOutOfRange.barPoints);

	    this._updateHandle(inRangeHandleEnds, visualInRange);
	  },

	  /**
	   * @private
	   */
	  _createBarVisual: function (dataInterval, dataExtent, handleEnds, forceState) {
	    var opts = {
	      forceState: forceState,
	      convertOpacityToAlpha: true
	    };

	    var colorStops = this._makeColorGradient(dataInterval, opts);

	    var symbolSizes = [this.getControllerVisual(dataInterval[0], 'symbolSize', opts), this.getControllerVisual(dataInterval[1], 'symbolSize', opts)];

	    var barPoints = this._createBarPoints(handleEnds, symbolSizes);

	    return {
	      barColor: new LinearGradient(0, 0, 0, 1, colorStops),
	      barPoints: barPoints,
	      handlesColor: [colorStops[0].color, colorStops[colorStops.length - 1].color]
	    };
	  },

	  /**
	   * @private
	   */
	  _makeColorGradient: function (dataInterval, opts) {
	    // Considering colorHue, which is not linear, so we have to sample
	    // to calculate gradient color stops, but not only caculate head
	    // and tail.
	    var sampleNumber = 100; // Arbitrary value.

	    var colorStops = [];
	    var step = (dataInterval[1] - dataInterval[0]) / sampleNumber;
	    colorStops.push({
	      color: this.getControllerVisual(dataInterval[0], 'color', opts),
	      offset: 0
	    });

	    for (var i = 1; i < sampleNumber; i++) {
	      var currValue = dataInterval[0] + step * i;

	      if (currValue > dataInterval[1]) {
	        break;
	      }

	      colorStops.push({
	        color: this.getControllerVisual(currValue, 'color', opts),
	        offset: i / sampleNumber
	      });
	    }

	    colorStops.push({
	      color: this.getControllerVisual(dataInterval[1], 'color', opts),
	      offset: 1
	    });
	    return colorStops;
	  },

	  /**
	   * @private
	   */
	  _createBarPoints: function (handleEnds, symbolSizes) {
	    var itemSize = this.visualMapModel.itemSize;
	    return [[itemSize[0] - symbolSizes[0], handleEnds[0]], [itemSize[0], handleEnds[0]], [itemSize[0], handleEnds[1]], [itemSize[0] - symbolSizes[1], handleEnds[1]]];
	  },

	  /**
	   * @private
	   */
	  _createBarGroup: function (itemAlign) {
	    var orient = this._orient;
	    var inverse = this.visualMapModel.get('inverse');
	    return new graphic.Group(orient === 'horizontal' && !inverse ? {
	      scale: itemAlign === 'bottom' ? [1, 1] : [-1, 1],
	      rotation: Math.PI / 2
	    } : orient === 'horizontal' && inverse ? {
	      scale: itemAlign === 'bottom' ? [-1, 1] : [1, 1],
	      rotation: -Math.PI / 2
	    } : orient === 'vertical' && !inverse ? {
	      scale: itemAlign === 'left' ? [1, -1] : [-1, -1]
	    } : {
	      scale: itemAlign === 'left' ? [1, 1] : [-1, 1]
	    });
	  },

	  /**
	   * @private
	   */
	  _updateHandle: function (handleEnds, visualInRange) {
	    if (!this._useHandle) {
	      return;
	    }

	    var shapes = this._shapes;
	    var visualMapModel = this.visualMapModel;
	    var handleThumbs = shapes.handleThumbs;
	    var handleLabels = shapes.handleLabels;
	    each([0, 1], function (handleIndex) {
	      var handleThumb = handleThumbs[handleIndex];
	      handleThumb.setStyle('fill', visualInRange.handlesColor[handleIndex]);
	      handleThumb.position[1] = handleEnds[handleIndex]; // Update handle label position.

	      var textPoint = graphic.applyTransform(shapes.handleLabelPoints[handleIndex], graphic.getTransform(handleThumb, this.group));
	      handleLabels[handleIndex].setStyle({
	        x: textPoint[0],
	        y: textPoint[1],
	        text: visualMapModel.formatValueText(this._dataInterval[handleIndex]),
	        textVerticalAlign: 'middle',
	        textAlign: this._applyTransform(this._orient === 'horizontal' ? handleIndex === 0 ? 'bottom' : 'top' : 'left', shapes.barGroup)
	      });
	    }, this);
	  },

	  /**
	   * @private
	   * @param {number} cursorValue
	   * @param {number} textValue
	   * @param {string} [rangeSymbol]
	   * @param {number} [halfHoverLinkSize]
	   */
	  _showIndicator: function (cursorValue, textValue, rangeSymbol, halfHoverLinkSize) {
	    var visualMapModel = this.visualMapModel;
	    var dataExtent = visualMapModel.getExtent();
	    var itemSize = visualMapModel.itemSize;
	    var sizeExtent = [0, itemSize[1]];
	    var pos = linearMap(cursorValue, dataExtent, sizeExtent, true);
	    var shapes = this._shapes;
	    var indicator = shapes.indicator;

	    if (!indicator) {
	      return;
	    }

	    indicator.position[1] = pos;
	    indicator.attr('invisible', false);
	    indicator.setShape('points', createIndicatorPoints(!!rangeSymbol, halfHoverLinkSize, pos, itemSize[1]));
	    var opts = {
	      convertOpacityToAlpha: true
	    };
	    var color = this.getControllerVisual(cursorValue, 'color', opts);
	    indicator.setStyle('fill', color); // Update handle label position.

	    var textPoint = graphic.applyTransform(shapes.indicatorLabelPoint, graphic.getTransform(indicator, this.group));
	    var indicatorLabel = shapes.indicatorLabel;
	    indicatorLabel.attr('invisible', false);

	    var align = this._applyTransform('left', shapes.barGroup);

	    var orient = this._orient;
	    indicatorLabel.setStyle({
	      text: (rangeSymbol ? rangeSymbol : '') + visualMapModel.formatValueText(textValue),
	      textVerticalAlign: orient === 'horizontal' ? align : 'middle',
	      textAlign: orient === 'horizontal' ? 'center' : align,
	      x: textPoint[0],
	      y: textPoint[1]
	    });
	  },

	  /**
	   * @private
	   */
	  _enableHoverLinkToSeries: function () {
	    var self = this;

	    this._shapes.barGroup.on('mousemove', function (e) {
	      self._hovering = true;

	      if (!self._dragging) {
	        var itemSize = self.visualMapModel.itemSize;

	        var pos = self._applyTransform([e.offsetX, e.offsetY], self._shapes.barGroup, true, true); // For hover link show when hover handle, which might be
	        // below or upper than sizeExtent.


	        pos[1] = mathMin(mathMax(0, pos[1]), itemSize[1]);

	        self._doHoverLinkToSeries(pos[1], 0 <= pos[0] && pos[0] <= itemSize[0]);
	      }
	    }).on('mouseout', function () {
	      // When mouse is out of handle, hoverLink still need
	      // to be displayed when realtime is set as false.
	      self._hovering = false;
	      !self._dragging && self._clearHoverLinkToSeries();
	    });
	  },

	  /**
	   * @private
	   */
	  _enableHoverLinkFromSeries: function () {
	    var zr = this.api.getZr();

	    if (this.visualMapModel.option.hoverLink) {
	      zr.on('mouseover', this._hoverLinkFromSeriesMouseOver, this);
	      zr.on('mouseout', this._hideIndicator, this);
	    } else {
	      this._clearHoverLinkFromSeries();
	    }
	  },

	  /**
	   * @private
	   */
	  _doHoverLinkToSeries: function (cursorPos, hoverOnBar) {
	    var visualMapModel = this.visualMapModel;
	    var itemSize = visualMapModel.itemSize;

	    if (!visualMapModel.option.hoverLink) {
	      return;
	    }

	    var sizeExtent = [0, itemSize[1]];
	    var dataExtent = visualMapModel.getExtent(); // For hover link show when hover handle, which might be below or upper than sizeExtent.

	    cursorPos = mathMin(mathMax(sizeExtent[0], cursorPos), sizeExtent[1]);
	    var halfHoverLinkSize = getHalfHoverLinkSize(visualMapModel, dataExtent, sizeExtent);
	    var hoverRange = [cursorPos - halfHoverLinkSize, cursorPos + halfHoverLinkSize];
	    var cursorValue = linearMap(cursorPos, sizeExtent, dataExtent, true);
	    var valueRange = [linearMap(hoverRange[0], sizeExtent, dataExtent, true), linearMap(hoverRange[1], sizeExtent, dataExtent, true)]; // Consider data range is out of visualMap range, see test/visualMap-continuous.html,
	    // where china and india has very large population.

	    hoverRange[0] < sizeExtent[0] && (valueRange[0] = -Infinity);
	    hoverRange[1] > sizeExtent[1] && (valueRange[1] = Infinity); // Do not show indicator when mouse is over handle,
	    // otherwise labels overlap, especially when dragging.

	    if (hoverOnBar) {
	      if (valueRange[0] === -Infinity) {
	        this._showIndicator(cursorValue, valueRange[1], '< ', halfHoverLinkSize);
	      } else if (valueRange[1] === Infinity) {
	        this._showIndicator(cursorValue, valueRange[0], '> ', halfHoverLinkSize);
	      } else {
	        this._showIndicator(cursorValue, cursorValue, '≈ ', halfHoverLinkSize);
	      }
	    } // When realtime is set as false, handles, which are in barGroup,
	    // also trigger hoverLink, which help user to realize where they
	    // focus on when dragging. (see test/heatmap-large.html)
	    // When realtime is set as true, highlight will not show when hover
	    // handle, because the label on handle, which displays a exact value
	    // but not range, might mislead users.


	    var oldBatch = this._hoverLinkDataIndices;
	    var newBatch = [];

	    if (hoverOnBar || useHoverLinkOnHandle(visualMapModel)) {
	      newBatch = this._hoverLinkDataIndices = visualMapModel.findTargetDataIndices(valueRange);
	    }

	    var resultBatches = modelUtil.compressBatches(oldBatch, newBatch);

	    this._dispatchHighDown('downplay', helper.convertDataIndex(resultBatches[0]));

	    this._dispatchHighDown('highlight', helper.convertDataIndex(resultBatches[1]));
	  },

	  /**
	   * @private
	   */
	  _hoverLinkFromSeriesMouseOver: function (e) {
	    var el = e.target;
	    var visualMapModel = this.visualMapModel;

	    if (!el || el.dataIndex == null) {
	      return;
	    }

	    var dataModel = this.ecModel.getSeriesByIndex(el.seriesIndex);

	    if (!visualMapModel.isTargetSeries(dataModel)) {
	      return;
	    }

	    var data = dataModel.getData(el.dataType);
	    var dim = data.getDimension(visualMapModel.getDataDimension(data));
	    var value = data.get(dim, el.dataIndex, true);

	    if (!isNaN(value)) {
	      this._showIndicator(value, value);
	    }
	  },

	  /**
	   * @private
	   */
	  _hideIndicator: function () {
	    var shapes = this._shapes;
	    shapes.indicator && shapes.indicator.attr('invisible', true);
	    shapes.indicatorLabel && shapes.indicatorLabel.attr('invisible', true);
	  },

	  /**
	   * @private
	   */
	  _clearHoverLinkToSeries: function () {
	    this._hideIndicator();

	    var indices = this._hoverLinkDataIndices;

	    this._dispatchHighDown('downplay', helper.convertDataIndex(indices));

	    indices.length = 0;
	  },

	  /**
	   * @private
	   */
	  _clearHoverLinkFromSeries: function () {
	    this._hideIndicator();

	    var zr = this.api.getZr();
	    zr.off('mouseover', this._hoverLinkFromSeriesMouseOver);
	    zr.off('mouseout', this._hideIndicator);
	  },

	  /**
	   * @private
	   */
	  _applyTransform: function (vertex, element, inverse, global) {
	    var transform = graphic.getTransform(element, global ? null : this.group);
	    return graphic[zrUtil.isArray(vertex) ? 'applyTransform' : 'transformDirection'](vertex, transform, inverse);
	  },

	  /**
	   * @private
	   */
	  _dispatchHighDown: function (type, batch) {
	    batch && batch.length && this.api.dispatchAction({
	      type: type,
	      batch: batch
	    });
	  },

	  /**
	   * @override
	   */
	  dispose: function () {
	    this._clearHoverLinkFromSeries();

	    this._clearHoverLinkToSeries();
	  },

	  /**
	   * @override
	   */
	  remove: function () {
	    this._clearHoverLinkFromSeries();

	    this._clearHoverLinkToSeries();
	  }
	});

	function createPolygon(points, cursor, onDrift, onDragEnd) {
	  return new graphic.Polygon({
	    shape: {
	      points: points
	    },
	    draggable: !!onDrift,
	    cursor: cursor,
	    drift: onDrift,
	    onmousemove: function (e) {
	      // Fot mobile devicem, prevent screen slider on the button.
	      eventTool.stop(e.event);
	    },
	    ondragend: onDragEnd
	  });
	}

	function createHandlePoints(handleIndex, textSize) {
	  return handleIndex === 0 ? [[0, 0], [textSize, 0], [textSize, -textSize]] : [[0, 0], [textSize, 0], [textSize, textSize]];
	}

	function createIndicatorPoints(isRange, halfHoverLinkSize, pos, extentMax) {
	  return isRange ? [// indicate range
	  [0, -mathMin(halfHoverLinkSize, mathMax(pos, 0))], [HOVER_LINK_OUT, 0], [0, mathMin(halfHoverLinkSize, mathMax(extentMax - pos, 0))]] : [// indicate single value
	  [0, 0], [5, -5], [5, 5]];
	}

	function getHalfHoverLinkSize(visualMapModel, dataExtent, sizeExtent) {
	  var halfHoverLinkSize = HOVER_LINK_SIZE / 2;
	  var hoverLinkDataSize = visualMapModel.get('hoverLinkDataSize');

	  if (hoverLinkDataSize) {
	    halfHoverLinkSize = linearMap(hoverLinkDataSize, dataExtent, sizeExtent, true) / 2;
	  }

	  return halfHoverLinkSize;
	}

	function useHoverLinkOnHandle(visualMapModel) {
	  var hoverLinkOnHandle = visualMapModel.get('hoverLinkOnHandle');
	  return !!(hoverLinkOnHandle == null ? visualMapModel.get('realtime') : hoverLinkOnHandle);
	}

	function getCursor(orient) {
	  return orient === 'vertical' ? 'ns-resize' : 'ew-resize';
	}

	var _default = ContinuousView;
	module.exports = _default;

/***/ },
/* 562 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var zrUtil = __webpack_require__(166);

	var graphic = __webpack_require__(212);

	var formatUtil = __webpack_require__(204);

	var layout = __webpack_require__(247);

	var VisualMapping = __webpack_require__(377);

	var _default = echarts.extendComponentView({
	  type: 'visualMap',

	  /**
	   * @readOnly
	   * @type {Object}
	   */
	  autoPositionValues: {
	    left: 1,
	    right: 1,
	    top: 1,
	    bottom: 1
	  },
	  init: function (ecModel, api) {
	    /**
	     * @readOnly
	     * @type {module:echarts/model/Global}
	     */
	    this.ecModel = ecModel;
	    /**
	     * @readOnly
	     * @type {module:echarts/ExtensionAPI}
	     */

	    this.api = api;
	    /**
	     * @readOnly
	     * @type {module:echarts/component/visualMap/visualMapModel}
	     */

	    this.visualMapModel;
	  },

	  /**
	   * @protected
	   */
	  render: function (visualMapModel, ecModel, api, payload) {
	    this.visualMapModel = visualMapModel;

	    if (visualMapModel.get('show') === false) {
	      this.group.removeAll();
	      return;
	    }

	    this.doRender.apply(this, arguments);
	  },

	  /**
	   * @protected
	   */
	  renderBackground: function (group) {
	    var visualMapModel = this.visualMapModel;
	    var padding = formatUtil.normalizeCssArray(visualMapModel.get('padding') || 0);
	    var rect = group.getBoundingRect();
	    group.add(new graphic.Rect({
	      z2: -1,
	      // Lay background rect on the lowest layer.
	      silent: true,
	      shape: {
	        x: rect.x - padding[3],
	        y: rect.y - padding[0],
	        width: rect.width + padding[3] + padding[1],
	        height: rect.height + padding[0] + padding[2]
	      },
	      style: {
	        fill: visualMapModel.get('backgroundColor'),
	        stroke: visualMapModel.get('borderColor'),
	        lineWidth: visualMapModel.get('borderWidth')
	      }
	    }));
	  },

	  /**
	   * @protected
	   * @param {number} targetValue can be Infinity or -Infinity
	   * @param {string=} visualCluster Only can be 'color' 'opacity' 'symbol' 'symbolSize'
	   * @param {Object} [opts]
	   * @param {string=} [opts.forceState] Specify state, instead of using getValueState method.
	   * @param {string=} [opts.convertOpacityToAlpha=false] For color gradient in controller widget.
	   * @return {*} Visual value.
	   */
	  getControllerVisual: function (targetValue, visualCluster, opts) {
	    opts = opts || {};
	    var forceState = opts.forceState;
	    var visualMapModel = this.visualMapModel;
	    var visualObj = {}; // Default values.

	    if (visualCluster === 'symbol') {
	      visualObj.symbol = visualMapModel.get('itemSymbol');
	    }

	    if (visualCluster === 'color') {
	      var defaultColor = visualMapModel.get('contentColor');
	      visualObj.color = defaultColor;
	    }

	    function getter(key) {
	      return visualObj[key];
	    }

	    function setter(key, value) {
	      visualObj[key] = value;
	    }

	    var mappings = visualMapModel.controllerVisuals[forceState || visualMapModel.getValueState(targetValue)];
	    var visualTypes = VisualMapping.prepareVisualTypes(mappings);
	    zrUtil.each(visualTypes, function (type) {
	      var visualMapping = mappings[type];

	      if (opts.convertOpacityToAlpha && type === 'opacity') {
	        type = 'colorAlpha';
	        visualMapping = mappings.__alphaForOpacity;
	      }

	      if (VisualMapping.dependsOn(type, visualCluster)) {
	        visualMapping && visualMapping.applyVisual(targetValue, getter, setter);
	      }
	    });
	    return visualObj[visualCluster];
	  },

	  /**
	   * @protected
	   */
	  positionGroup: function (group) {
	    var model = this.visualMapModel;
	    var api = this.api;
	    layout.positionElement(group, model.getBoxLayoutParams(), {
	      width: api.getWidth(),
	      height: api.getHeight()
	    });
	  },

	  /**
	   * @protected
	   * @abstract
	   */
	  doRender: zrUtil.noop
	});

	module.exports = _default;

/***/ },
/* 563 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var _layout = __webpack_require__(247);

	var getLayoutRect = _layout.getLayoutRect;

	/**
	 * @param {module:echarts/component/visualMap/VisualMapModel} visualMapModel\
	 * @param {module:echarts/ExtensionAPI} api
	 * @param {Array.<number>} itemSize always [short, long]
	 * @return {string} 'left' or 'right' or 'top' or 'bottom'
	 */
	function getItemAlign(visualMapModel, api, itemSize) {
	  var modelOption = visualMapModel.option;
	  var itemAlign = modelOption.align;

	  if (itemAlign != null && itemAlign !== 'auto') {
	    return itemAlign;
	  } // Auto decision align.


	  var ecSize = {
	    width: api.getWidth(),
	    height: api.getHeight()
	  };
	  var realIndex = modelOption.orient === 'horizontal' ? 1 : 0;
	  var paramsSet = [['left', 'right', 'width'], ['top', 'bottom', 'height']];
	  var reals = paramsSet[realIndex];
	  var fakeValue = [0, null, 10];
	  var layoutInput = {};

	  for (var i = 0; i < 3; i++) {
	    layoutInput[paramsSet[1 - realIndex][i]] = fakeValue[i];
	    layoutInput[reals[i]] = i === 2 ? itemSize[0] : modelOption[reals[i]];
	  }

	  var rParam = [['x', 'width', 3], ['y', 'height', 0]][realIndex];
	  var rect = getLayoutRect(layoutInput, ecSize, modelOption.padding);
	  return reals[(rect.margin[rParam[2]] || 0) + rect[rParam[0]] + rect[rParam[1]] * 0.5 < ecSize[rParam[1]] * 0.5 ? 0 : 1];
	}
	/**
	 * Prepare dataIndex for outside usage, where dataIndex means rawIndex, and
	 * dataIndexInside means filtered index.
	 */


	function convertDataIndex(batch) {
	  zrUtil.each(batch || [], function (batchItem) {
	    if (batch.dataIndex != null) {
	      batch.dataIndexInside = batch.dataIndex;
	      batch.dataIndex = null;
	    }
	  });
	  return batch;
	}

	exports.getItemAlign = getItemAlign;
	exports.convertDataIndex = convertDataIndex;

/***/ },
/* 564 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var actionInfo = {
	  type: 'selectDataRange',
	  event: 'dataRangeSelected',
	  // FIXME use updateView appears wrong
	  update: 'update'
	};
	echarts.registerAction(actionInfo, function (payload, ecModel) {
	  ecModel.eachComponent({
	    mainType: 'visualMap',
	    query: payload
	  }, function (model) {
	    model.setSelected(payload.selected);
	  });
	});

/***/ },
/* 565 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var preprocessor = __webpack_require__(555);

	__webpack_require__(556);

	__webpack_require__(557);

	__webpack_require__(566);

	__webpack_require__(567);

	__webpack_require__(564);

	/**
	 * DataZoom component entry
	 */
	echarts.registerPreprocessor(preprocessor);

/***/ },
/* 566 */
/***/ function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(162);

	var __DEV__ = _config.__DEV__;

	var zrUtil = __webpack_require__(166);

	var VisualMapModel = __webpack_require__(559);

	var VisualMapping = __webpack_require__(377);

	var visualDefault = __webpack_require__(560);

	var _number = __webpack_require__(205);

	var reformIntervals = _number.reformIntervals;
	var PiecewiseModel = VisualMapModel.extend({
	  type: 'visualMap.piecewise',

	  /**
	   * Order Rule:
	   *
	   * option.categories / option.pieces / option.text / option.selected:
	   *     If !option.inverse,
	   *     Order when vertical: ['top', ..., 'bottom'].
	   *     Order when horizontal: ['left', ..., 'right'].
	   *     If option.inverse, the meaning of
	   *     the order should be reversed.
	   *
	   * this._pieceList:
	   *     The order is always [low, ..., high].
	   *
	   * Mapping from location to low-high:
	   *     If !option.inverse
	   *     When vertical, top is high.
	   *     When horizontal, right is high.
	   *     If option.inverse, reverse.
	   */

	  /**
	   * @protected
	   */
	  defaultOption: {
	    selected: null,
	    // Object. If not specified, means selected.
	    // When pieces and splitNumber: {'0': true, '5': true}
	    // When categories: {'cate1': false, 'cate3': true}
	    // When selected === false, means all unselected.
	    minOpen: false,
	    // Whether include values that smaller than `min`.
	    maxOpen: false,
	    // Whether include values that bigger than `max`.
	    align: 'auto',
	    // 'auto', 'left', 'right'
	    itemWidth: 20,
	    // When put the controller vertically, it is the length of
	    // horizontal side of each item. Otherwise, vertical side.
	    itemHeight: 14,
	    // When put the controller vertically, it is the length of
	    // vertical side of each item. Otherwise, horizontal side.
	    itemSymbol: 'roundRect',
	    pieceList: null,
	    // Each item is Object, with some of those attrs:
	    // {min, max, lt, gt, lte, gte, value,
	    // color, colorSaturation, colorAlpha, opacity,
	    // symbol, symbolSize}, which customize the range or visual
	    // coding of the certain piece. Besides, see "Order Rule".
	    categories: null,
	    // category names, like: ['some1', 'some2', 'some3'].
	    // Attr min/max are ignored when categories set. See "Order Rule"
	    splitNumber: 5,
	    // If set to 5, auto split five pieces equally.
	    // If set to 0 and component type not set, component type will be
	    // determined as "continuous". (It is less reasonable but for ec2
	    // compatibility, see echarts/component/visualMap/typeDefaulter)
	    selectedMode: 'multiple',
	    // Can be 'multiple' or 'single'.
	    itemGap: 10,
	    // The gap between two items, in px.
	    hoverLink: true,
	    // Enable hover highlight.
	    showLabel: null // By default, when text is used, label will hide (the logic
	    // is remained for compatibility reason)

	  },

	  /**
	   * @override
	   */
	  optionUpdated: function (newOption, isInit) {
	    PiecewiseModel.superApply(this, 'optionUpdated', arguments);
	    /**
	     * The order is always [low, ..., high].
	     * [{text: string, interval: Array.<number>}, ...]
	     * @private
	     * @type {Array.<Object>}
	     */

	    this._pieceList = [];
	    this.resetExtent();
	    /**
	     * 'pieces', 'categories', 'splitNumber'
	     * @type {string}
	     */

	    var mode = this._mode = this._determineMode();

	    resetMethods[this._mode].call(this);

	    this._resetSelected(newOption, isInit);

	    var categories = this.option.categories;
	    this.resetVisual(function (mappingOption, state) {
	      if (mode === 'categories') {
	        mappingOption.mappingMethod = 'category';
	        mappingOption.categories = zrUtil.clone(categories);
	      } else {
	        mappingOption.dataExtent = this.getExtent();
	        mappingOption.mappingMethod = 'piecewise';
	        mappingOption.pieceList = zrUtil.map(this._pieceList, function (piece) {
	          var piece = zrUtil.clone(piece);

	          if (state !== 'inRange') {
	            // FIXME
	            // outOfRange do not support special visual in pieces.
	            piece.visual = null;
	          }

	          return piece;
	        });
	      }
	    });
	  },

	  /**
	   * @protected
	   * @override
	   */
	  completeVisualOption: function () {
	    // Consider this case:
	    // visualMap: {
	    //      pieces: [{symbol: 'circle', lt: 0}, {symbol: 'rect', gte: 0}]
	    // }
	    // where no inRange/outOfRange set but only pieces. So we should make
	    // default inRange/outOfRange for this case, otherwise visuals that only
	    // appear in `pieces` will not be taken into account in visual encoding.
	    var option = this.option;
	    var visualTypesInPieces = {};
	    var visualTypes = VisualMapping.listVisualTypes();
	    var isCategory = this.isCategory();
	    zrUtil.each(option.pieces, function (piece) {
	      zrUtil.each(visualTypes, function (visualType) {
	        if (piece.hasOwnProperty(visualType)) {
	          visualTypesInPieces[visualType] = 1;
	        }
	      });
	    });
	    zrUtil.each(visualTypesInPieces, function (v, visualType) {
	      var exists = 0;
	      zrUtil.each(this.stateList, function (state) {
	        exists |= has(option, state, visualType) || has(option.target, state, visualType);
	      }, this);
	      !exists && zrUtil.each(this.stateList, function (state) {
	        (option[state] || (option[state] = {}))[visualType] = visualDefault.get(visualType, state === 'inRange' ? 'active' : 'inactive', isCategory);
	      });
	    }, this);

	    function has(obj, state, visualType) {
	      return obj && obj[state] && (zrUtil.isObject(obj[state]) ? obj[state].hasOwnProperty(visualType) : obj[state] === visualType // e.g., inRange: 'symbol'
	      );
	    }

	    VisualMapModel.prototype.completeVisualOption.apply(this, arguments);
	  },
	  _resetSelected: function (newOption, isInit) {
	    var thisOption = this.option;
	    var pieceList = this._pieceList; // Selected do not merge but all override.

	    var selected = (isInit ? thisOption : newOption).selected || {};
	    thisOption.selected = selected; // Consider 'not specified' means true.

	    zrUtil.each(pieceList, function (piece, index) {
	      var key = this.getSelectedMapKey(piece);

	      if (!selected.hasOwnProperty(key)) {
	        selected[key] = true;
	      }
	    }, this);

	    if (thisOption.selectedMode === 'single') {
	      // Ensure there is only one selected.
	      var hasSel = false;
	      zrUtil.each(pieceList, function (piece, index) {
	        var key = this.getSelectedMapKey(piece);

	        if (selected[key]) {
	          hasSel ? selected[key] = false : hasSel = true;
	        }
	      }, this);
	    } // thisOption.selectedMode === 'multiple', default: all selected.

	  },

	  /**
	   * @public
	   */
	  getSelectedMapKey: function (piece) {
	    return this._mode === 'categories' ? piece.value + '' : piece.index + '';
	  },

	  /**
	   * @public
	   */
	  getPieceList: function () {
	    return this._pieceList;
	  },

	  /**
	   * @private
	   * @return {string}
	   */
	  _determineMode: function () {
	    var option = this.option;
	    return option.pieces && option.pieces.length > 0 ? 'pieces' : this.option.categories ? 'categories' : 'splitNumber';
	  },

	  /**
	   * @public
	   * @override
	   */
	  setSelected: function (selected) {
	    this.option.selected = zrUtil.clone(selected);
	  },

	  /**
	   * @public
	   * @override
	   */
	  getValueState: function (value) {
	    var index = VisualMapping.findPieceIndex(value, this._pieceList);
	    return index != null ? this.option.selected[this.getSelectedMapKey(this._pieceList[index])] ? 'inRange' : 'outOfRange' : 'outOfRange';
	  },

	  /**
	   * @public
	   * @params {number} pieceIndex piece index in visualMapModel.getPieceList()
	   * @return {Array.<Object>} [{seriesId, dataIndices: <Array.<number>>}, ...]
	   */
	  findTargetDataIndices: function (pieceIndex) {
	    var result = [];
	    this.eachTargetSeries(function (seriesModel) {
	      var dataIndices = [];
	      var data = seriesModel.getData();
	      data.each(this.getDataDimension(data), function (value, dataIndex) {
	        // Should always base on model pieceList, because it is order sensitive.
	        var pIdx = VisualMapping.findPieceIndex(value, this._pieceList);
	        pIdx === pieceIndex && dataIndices.push(dataIndex);
	      }, true, this);
	      result.push({
	        seriesId: seriesModel.id,
	        dataIndex: dataIndices
	      });
	    }, this);
	    return result;
	  },

	  /**
	   * @private
	   * @param {Object} piece piece.value or piece.interval is required.
	   * @return {number} Can be Infinity or -Infinity
	   */
	  getRepresentValue: function (piece) {
	    var representValue;

	    if (this.isCategory()) {
	      representValue = piece.value;
	    } else {
	      if (piece.value != null) {
	        representValue = piece.value;
	      } else {
	        var pieceInterval = piece.interval || [];
	        representValue = pieceInterval[0] === -Infinity && pieceInterval[1] === Infinity ? 0 : (pieceInterval[0] + pieceInterval[1]) / 2;
	      }
	    }

	    return representValue;
	  },
	  getVisualMeta: function (getColorVisual) {
	    // Do not support category. (category axis is ordinal, numerical)
	    if (this.isCategory()) {
	      return;
	    }

	    var stops = [];
	    var outerColors = [];
	    var visualMapModel = this;

	    function setStop(interval, valueState) {
	      var representValue = visualMapModel.getRepresentValue({
	        interval: interval
	      });

	      if (!valueState) {
	        valueState = visualMapModel.getValueState(representValue);
	      }

	      var color = getColorVisual(representValue, valueState);

	      if (interval[0] === -Infinity) {
	        outerColors[0] = color;
	      } else if (interval[1] === Infinity) {
	        outerColors[1] = color;
	      } else {
	        stops.push({
	          value: interval[0],
	          color: color
	        }, {
	          value: interval[1],
	          color: color
	        });
	      }
	    } // Suplement


	    var pieceList = this._pieceList.slice();

	    if (!pieceList.length) {
	      pieceList.push({
	        interval: [-Infinity, Infinity]
	      });
	    } else {
	      var edge = pieceList[0].interval[0];
	      edge !== -Infinity && pieceList.unshift({
	        interval: [-Infinity, edge]
	      });
	      edge = pieceList[pieceList.length - 1].interval[1];
	      edge !== Infinity && pieceList.push({
	        interval: [edge, Infinity]
	      });
	    }

	    var curr = -Infinity;
	    zrUtil.each(pieceList, function (piece) {
	      var interval = piece.interval;

	      if (interval) {
	        // Fulfill gap.
	        interval[0] > curr && setStop([curr, interval[0]], 'outOfRange');
	        setStop(interval.slice());
	        curr = interval[1];
	      }
	    }, this);
	    return {
	      stops: stops,
	      outerColors: outerColors
	    };
	  }
	});
	/**
	 * Key is this._mode
	 * @type {Object}
	 * @this {module:echarts/component/viusalMap/PiecewiseMode}
	 */

	var resetMethods = {
	  splitNumber: function () {
	    var thisOption = this.option;
	    var pieceList = this._pieceList;
	    var precision = Math.min(thisOption.precision, 20);
	    var dataExtent = this.getExtent();
	    var splitNumber = thisOption.splitNumber;
	    splitNumber = Math.max(parseInt(splitNumber, 10), 1);
	    thisOption.splitNumber = splitNumber;
	    var splitStep = (dataExtent[1] - dataExtent[0]) / splitNumber; // Precision auto-adaption

	    while (+splitStep.toFixed(precision) !== splitStep && precision < 5) {
	      precision++;
	    }

	    thisOption.precision = precision;
	    splitStep = +splitStep.toFixed(precision);
	    var index = 0;

	    if (thisOption.minOpen) {
	      pieceList.push({
	        index: index++,
	        interval: [-Infinity, dataExtent[0]],
	        close: [0, 0]
	      });
	    }

	    for (var curr = dataExtent[0], len = index + splitNumber; index < len; curr += splitStep) {
	      var max = index === splitNumber - 1 ? dataExtent[1] : curr + splitStep;
	      pieceList.push({
	        index: index++,
	        interval: [curr, max],
	        close: [1, 1]
	      });
	    }

	    if (thisOption.maxOpen) {
	      pieceList.push({
	        index: index++,
	        interval: [dataExtent[1], Infinity],
	        close: [0, 0]
	      });
	    }

	    reformIntervals(pieceList);
	    zrUtil.each(pieceList, function (piece) {
	      piece.text = this.formatValueText(piece.interval);
	    }, this);
	  },
	  categories: function () {
	    var thisOption = this.option;
	    zrUtil.each(thisOption.categories, function (cate) {
	      // FIXME category模式也使用pieceList，但在visualMapping中不是使用pieceList。
	      // 是否改一致。
	      this._pieceList.push({
	        text: this.formatValueText(cate, true),
	        value: cate
	      });
	    }, this); // See "Order Rule".

	    normalizeReverse(thisOption, this._pieceList);
	  },
	  pieces: function () {
	    var thisOption = this.option;
	    var pieceList = this._pieceList;
	    zrUtil.each(thisOption.pieces, function (pieceListItem, index) {
	      if (!zrUtil.isObject(pieceListItem)) {
	        pieceListItem = {
	          value: pieceListItem
	        };
	      }

	      var item = {
	        text: '',
	        index: index
	      };

	      if (pieceListItem.label != null) {
	        item.text = pieceListItem.label;
	      }

	      if (pieceListItem.hasOwnProperty('value')) {
	        var value = item.value = pieceListItem.value;
	        item.interval = [value, value];
	        item.close = [1, 1];
	      } else {
	        // `min` `max` is legacy option.
	        // `lt` `gt` `lte` `gte` is recommanded.
	        var interval = item.interval = [];
	        var close = item.close = [0, 0];
	        var closeList = [1, 0, 1];
	        var infinityList = [-Infinity, Infinity];
	        var useMinMax = [];

	        for (var lg = 0; lg < 2; lg++) {
	          var names = [['gte', 'gt', 'min'], ['lte', 'lt', 'max']][lg];

	          for (var i = 0; i < 3 && interval[lg] == null; i++) {
	            interval[lg] = pieceListItem[names[i]];
	            close[lg] = closeList[i];
	            useMinMax[lg] = i === 2;
	          }

	          interval[lg] == null && (interval[lg] = infinityList[lg]);
	        }

	        useMinMax[0] && interval[1] === Infinity && (close[0] = 0);
	        useMinMax[1] && interval[0] === -Infinity && (close[1] = 0);

	        if (interval[0] === interval[1] && close[0] && close[1]) {
	          // Consider: [{min: 5, max: 5, visual: {...}}, {min: 0, max: 5}],
	          // we use value to lift the priority when min === max
	          item.value = interval[0];
	        }
	      }

	      item.visual = VisualMapping.retrieveVisuals(pieceListItem);
	      pieceList.push(item);
	    }, this); // See "Order Rule".

	    normalizeReverse(thisOption, pieceList); // Only pieces

	    reformIntervals(pieceList);
	    zrUtil.each(pieceList, function (piece) {
	      var close = piece.close;
	      var edgeSymbols = [['<', '≤'][close[1]], ['>', '≥'][close[0]]];
	      piece.text = piece.text || this.formatValueText(piece.value != null ? piece.value : piece.interval, false, edgeSymbols);
	    }, this);
	  }
	};

	function normalizeReverse(thisOption, pieceList) {
	  var inverse = thisOption.inverse;

	  if (thisOption.orient === 'vertical' ? !inverse : inverse) {
	    pieceList.reverse();
	  }
	}

	var _default = PiecewiseModel;
	module.exports = _default;

/***/ },
/* 567 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var VisualMapView = __webpack_require__(562);

	var graphic = __webpack_require__(212);

	var _symbol = __webpack_require__(276);

	var createSymbol = _symbol.createSymbol;

	var layout = __webpack_require__(247);

	var helper = __webpack_require__(563);

	var PiecewiseVisualMapView = VisualMapView.extend({
	  type: 'visualMap.piecewise',

	  /**
	   * @protected
	   * @override
	   */
	  doRender: function () {
	    var thisGroup = this.group;
	    thisGroup.removeAll();
	    var visualMapModel = this.visualMapModel;
	    var textGap = visualMapModel.get('textGap');
	    var textStyleModel = visualMapModel.textStyleModel;
	    var textFont = textStyleModel.getFont();
	    var textFill = textStyleModel.getTextColor();

	    var itemAlign = this._getItemAlign();

	    var itemSize = visualMapModel.itemSize;

	    var viewData = this._getViewData();

	    var endsText = viewData.endsText;
	    var showLabel = zrUtil.retrieve(visualMapModel.get('showLabel', true), !endsText);
	    endsText && this._renderEndsText(thisGroup, endsText[0], itemSize, showLabel, itemAlign);
	    zrUtil.each(viewData.viewPieceList, renderItem, this);
	    endsText && this._renderEndsText(thisGroup, endsText[1], itemSize, showLabel, itemAlign);
	    layout.box(visualMapModel.get('orient'), thisGroup, visualMapModel.get('itemGap'));
	    this.renderBackground(thisGroup);
	    this.positionGroup(thisGroup);

	    function renderItem(item) {
	      var piece = item.piece;
	      var itemGroup = new graphic.Group();
	      itemGroup.onclick = zrUtil.bind(this._onItemClick, this, piece);

	      this._enableHoverLink(itemGroup, item.indexInModelPieceList);

	      var representValue = visualMapModel.getRepresentValue(piece);

	      this._createItemSymbol(itemGroup, representValue, [0, 0, itemSize[0], itemSize[1]]);

	      if (showLabel) {
	        var visualState = this.visualMapModel.getValueState(representValue);
	        itemGroup.add(new graphic.Text({
	          style: {
	            x: itemAlign === 'right' ? -textGap : itemSize[0] + textGap,
	            y: itemSize[1] / 2,
	            text: piece.text,
	            textVerticalAlign: 'middle',
	            textAlign: itemAlign,
	            textFont: textFont,
	            textFill: textFill,
	            opacity: visualState === 'outOfRange' ? 0.5 : 1
	          }
	        }));
	      }

	      thisGroup.add(itemGroup);
	    }
	  },

	  /**
	   * @private
	   */
	  _enableHoverLink: function (itemGroup, pieceIndex) {
	    itemGroup.on('mouseover', zrUtil.bind(onHoverLink, this, 'highlight')).on('mouseout', zrUtil.bind(onHoverLink, this, 'downplay'));

	    function onHoverLink(method) {
	      var visualMapModel = this.visualMapModel;
	      visualMapModel.option.hoverLink && this.api.dispatchAction({
	        type: method,
	        batch: helper.convertDataIndex(visualMapModel.findTargetDataIndices(pieceIndex))
	      });
	    }
	  },

	  /**
	   * @private
	   */
	  _getItemAlign: function () {
	    var visualMapModel = this.visualMapModel;
	    var modelOption = visualMapModel.option;

	    if (modelOption.orient === 'vertical') {
	      return helper.getItemAlign(visualMapModel, this.api, visualMapModel.itemSize);
	    } else {
	      // horizontal, most case left unless specifying right.
	      var align = modelOption.align;

	      if (!align || align === 'auto') {
	        align = 'left';
	      }

	      return align;
	    }
	  },

	  /**
	   * @private
	   */
	  _renderEndsText: function (group, text, itemSize, showLabel, itemAlign) {
	    if (!text) {
	      return;
	    }

	    var itemGroup = new graphic.Group();
	    var textStyleModel = this.visualMapModel.textStyleModel;
	    itemGroup.add(new graphic.Text({
	      style: {
	        x: showLabel ? itemAlign === 'right' ? itemSize[0] : 0 : itemSize[0] / 2,
	        y: itemSize[1] / 2,
	        textVerticalAlign: 'middle',
	        textAlign: showLabel ? itemAlign : 'center',
	        text: text,
	        textFont: textStyleModel.getFont(),
	        textFill: textStyleModel.getTextColor()
	      }
	    }));
	    group.add(itemGroup);
	  },

	  /**
	   * @private
	   * @return {Object} {peiceList, endsText} The order is the same as screen pixel order.
	   */
	  _getViewData: function () {
	    var visualMapModel = this.visualMapModel;
	    var viewPieceList = zrUtil.map(visualMapModel.getPieceList(), function (piece, index) {
	      return {
	        piece: piece,
	        indexInModelPieceList: index
	      };
	    });
	    var endsText = visualMapModel.get('text'); // Consider orient and inverse.

	    var orient = visualMapModel.get('orient');
	    var inverse = visualMapModel.get('inverse'); // Order of model pieceList is always [low, ..., high]

	    if (orient === 'horizontal' ? inverse : !inverse) {
	      viewPieceList.reverse();
	    } // Origin order of endsText is [high, low]
	    else if (endsText) {
	        endsText = endsText.slice().reverse();
	      }

	    return {
	      viewPieceList: viewPieceList,
	      endsText: endsText
	    };
	  },

	  /**
	   * @private
	   */
	  _createItemSymbol: function (group, representValue, shapeParam) {
	    group.add(createSymbol(this.getControllerVisual(representValue, 'symbol'), shapeParam[0], shapeParam[1], shapeParam[2], shapeParam[3], this.getControllerVisual(representValue, 'color')));
	  },

	  /**
	   * @private
	   */
	  _onItemClick: function (piece) {
	    var visualMapModel = this.visualMapModel;
	    var option = visualMapModel.option;
	    var selected = zrUtil.clone(option.selected);
	    var newKey = visualMapModel.getSelectedMapKey(piece);

	    if (option.selectedMode === 'single') {
	      selected[newKey] = true;
	      zrUtil.each(selected, function (o, key) {
	        selected[key] = key === newKey;
	      });
	    } else {
	      selected[newKey] = !selected[newKey];
	    }

	    this.api.dispatchAction({
	      type: 'selectDataRange',
	      from: this.uid,
	      visualMapId: this.visualMapModel.id,
	      selected: selected
	    });
	  }
	});
	var _default = PiecewiseVisualMapView;
	module.exports = _default;

/***/ },
/* 568 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	__webpack_require__(569);

	__webpack_require__(571);

	// HINT Markpoint can't be used too much
	echarts.registerPreprocessor(function (opt) {
	  // Make sure markPoint component is enabled
	  opt.markPoint = opt.markPoint || {};
	});

/***/ },
/* 569 */
/***/ function(module, exports, __webpack_require__) {

	var MarkerModel = __webpack_require__(570);

	var _default = MarkerModel.extend({
	  type: 'markPoint',
	  defaultOption: {
	    zlevel: 0,
	    z: 5,
	    symbol: 'pin',
	    symbolSize: 50,
	    //symbolRotate: 0,
	    //symbolOffset: [0, 0]
	    tooltip: {
	      trigger: 'item'
	    },
	    label: {
	      normal: {
	        show: true,
	        position: 'inside'
	      },
	      emphasis: {
	        show: true
	      }
	    },
	    itemStyle: {
	      normal: {
	        borderWidth: 2
	      }
	    }
	  }
	});

	module.exports = _default;

/***/ },
/* 570 */
/***/ function(module, exports, __webpack_require__) {

	var _config = __webpack_require__(162);

	var __DEV__ = _config.__DEV__;

	var echarts = __webpack_require__(161);

	var zrUtil = __webpack_require__(166);

	var env = __webpack_require__(165);

	var modelUtil = __webpack_require__(203);

	var formatUtil = __webpack_require__(204);

	var addCommas = formatUtil.addCommas;
	var encodeHTML = formatUtil.encodeHTML;

	function fillLabel(opt) {
	  modelUtil.defaultEmphasis(opt.label, ['show']);
	}

	var MarkerModel = echarts.extendComponentModel({
	  type: 'marker',
	  dependencies: ['series', 'grid', 'polar', 'geo'],

	  /**
	   * @overrite
	   */
	  init: function (option, parentModel, ecModel, extraOpt) {
	    this.mergeDefaultAndTheme(option, ecModel);
	    this.mergeOption(option, ecModel, extraOpt.createdBySelf, true);
	  },

	  /**
	   * @return {boolean}
	   */
	  isAnimationEnabled: function () {
	    if (env.node) {
	      return false;
	    }

	    var hostSeries = this.__hostSeries;
	    return this.getShallow('animation') && hostSeries && hostSeries.isAnimationEnabled();
	  },
	  mergeOption: function (newOpt, ecModel, createdBySelf, isInit) {
	    var MarkerModel = this.constructor;
	    var modelPropName = this.mainType + 'Model';

	    if (!createdBySelf) {
	      ecModel.eachSeries(function (seriesModel) {
	        var markerOpt = seriesModel.get(this.mainType);
	        var markerModel = seriesModel[modelPropName];

	        if (!markerOpt || !markerOpt.data) {
	          seriesModel[modelPropName] = null;
	          return;
	        }

	        if (!markerModel) {
	          if (isInit) {
	            // Default label emphasis `position` and `show`
	            fillLabel(markerOpt);
	          }

	          zrUtil.each(markerOpt.data, function (item) {
	            // FIXME Overwrite fillLabel method ?
	            if (item instanceof Array) {
	              fillLabel(item[0]);
	              fillLabel(item[1]);
	            } else {
	              fillLabel(item);
	            }
	          });
	          markerModel = new MarkerModel(markerOpt, this, ecModel);
	          zrUtil.extend(markerModel, {
	            mainType: this.mainType,
	            // Use the same series index and name
	            seriesIndex: seriesModel.seriesIndex,
	            name: seriesModel.name,
	            createdBySelf: true
	          });
	          markerModel.__hostSeries = seriesModel;
	        } else {
	          markerModel.mergeOption(markerOpt, ecModel, true);
	        }

	        seriesModel[modelPropName] = markerModel;
	      }, this);
	    }
	  },
	  formatTooltip: function (dataIndex) {
	    var data = this.getData();
	    var value = this.getRawValue(dataIndex);
	    var formattedValue = zrUtil.isArray(value) ? zrUtil.map(value, addCommas).join(', ') : addCommas(value);
	    var name = data.getName(dataIndex);
	    var html = encodeHTML(this.name);

	    if (value != null || name) {
	      html += '<br />';
	    }

	    if (name) {
	      html += encodeHTML(name);

	      if (value != null) {
	        html += ' : ';
	      }
	    }

	    if (value != null) {
	      html += encodeHTML(formattedValue);
	    }

	    return html;
	  },
	  getData: function () {
	    return this._data;
	  },
	  setData: function (data) {
	    this._data = data;
	  }
	});
	zrUtil.mixin(MarkerModel, modelUtil.dataFormatMixin);
	var _default = MarkerModel;
	module.exports = _default;

/***/ },
/* 571 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var SymbolDraw = __webpack_require__(284);

	var numberUtil = __webpack_require__(205);

	var List = __webpack_require__(265);

	var markerHelper = __webpack_require__(572);

	var MarkerView = __webpack_require__(573);

	function updateMarkerLayout(mpData, seriesModel, api) {
	  var coordSys = seriesModel.coordinateSystem;
	  mpData.each(function (idx) {
	    var itemModel = mpData.getItemModel(idx);
	    var point;
	    var xPx = numberUtil.parsePercent(itemModel.get('x'), api.getWidth());
	    var yPx = numberUtil.parsePercent(itemModel.get('y'), api.getHeight());

	    if (!isNaN(xPx) && !isNaN(yPx)) {
	      point = [xPx, yPx];
	    } // Chart like bar may have there own marker positioning logic
	    else if (seriesModel.getMarkerPosition) {
	        // Use the getMarkerPoisition
	        point = seriesModel.getMarkerPosition(mpData.getValues(mpData.dimensions, idx));
	      } else if (coordSys) {
	        var x = mpData.get(coordSys.dimensions[0], idx);
	        var y = mpData.get(coordSys.dimensions[1], idx);
	        point = coordSys.dataToPoint([x, y]);
	      } // Use x, y if has any


	    if (!isNaN(xPx)) {
	      point[0] = xPx;
	    }

	    if (!isNaN(yPx)) {
	      point[1] = yPx;
	    }

	    mpData.setItemLayout(idx, point);
	  });
	}

	var _default = MarkerView.extend({
	  type: 'markPoint',
	  updateLayout: function (markPointModel, ecModel, api) {
	    ecModel.eachSeries(function (seriesModel) {
	      var mpModel = seriesModel.markPointModel;

	      if (mpModel) {
	        updateMarkerLayout(mpModel.getData(), seriesModel, api);
	        this.markerGroupMap.get(seriesModel.id).updateLayout(mpModel);
	      }
	    }, this);
	  },
	  renderSeries: function (seriesModel, mpModel, ecModel, api) {
	    var coordSys = seriesModel.coordinateSystem;
	    var seriesId = seriesModel.id;
	    var seriesData = seriesModel.getData();
	    var symbolDrawMap = this.markerGroupMap;
	    var symbolDraw = symbolDrawMap.get(seriesId) || symbolDrawMap.set(seriesId, new SymbolDraw());
	    var mpData = createList(coordSys, seriesModel, mpModel); // FIXME

	    mpModel.setData(mpData);
	    updateMarkerLayout(mpModel.getData(), seriesModel, api);
	    mpData.each(function (idx) {
	      var itemModel = mpData.getItemModel(idx);
	      var symbolSize = itemModel.getShallow('symbolSize');

	      if (typeof symbolSize === 'function') {
	        // FIXME 这里不兼容 ECharts 2.x，2.x 貌似参数是整个数据？
	        symbolSize = symbolSize(mpModel.getRawValue(idx), mpModel.getDataParams(idx));
	      }

	      mpData.setItemVisual(idx, {
	        symbolSize: symbolSize,
	        color: itemModel.get('itemStyle.normal.color') || seriesData.getVisual('color'),
	        symbol: itemModel.getShallow('symbol')
	      });
	    }); // TODO Text are wrong

	    symbolDraw.updateData(mpData);
	    this.group.add(symbolDraw.group); // Set host model for tooltip
	    // FIXME

	    mpData.eachItemGraphicEl(function (el) {
	      el.traverse(function (child) {
	        child.dataModel = mpModel;
	      });
	    });
	    symbolDraw.__keep = true;
	    symbolDraw.group.silent = mpModel.get('silent') || seriesModel.get('silent');
	  }
	});
	/**
	 * @inner
	 * @param {module:echarts/coord/*} [coordSys]
	 * @param {module:echarts/model/Series} seriesModel
	 * @param {module:echarts/model/Model} mpModel
	 */


	function createList(coordSys, seriesModel, mpModel) {
	  var coordDimsInfos;

	  if (coordSys) {
	    coordDimsInfos = zrUtil.map(coordSys && coordSys.dimensions, function (coordDim) {
	      var info = seriesModel.getData().getDimensionInfo(seriesModel.coordDimToDataDim(coordDim)[0]) || {}; // In map series data don't have lng and lat dimension. Fallback to same with coordSys

	      info.name = coordDim;
	      return info;
	    });
	  } else {
	    coordDimsInfos = [{
	      name: 'value',
	      type: 'float'
	    }];
	  }

	  var mpData = new List(coordDimsInfos, mpModel);
	  var dataOpt = zrUtil.map(mpModel.get('data'), zrUtil.curry(markerHelper.dataTransform, seriesModel));

	  if (coordSys) {
	    dataOpt = zrUtil.filter(dataOpt, zrUtil.curry(markerHelper.dataFilter, coordSys));
	  }

	  mpData.initData(dataOpt, null, coordSys ? markerHelper.dimValueGetter : function (item) {
	    return item.value;
	  });
	  return mpData;
	}

	module.exports = _default;

/***/ },
/* 572 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var numberUtil = __webpack_require__(205);

	var indexOf = zrUtil.indexOf;

	function hasXOrY(item) {
	  return !(isNaN(parseFloat(item.x)) && isNaN(parseFloat(item.y)));
	}

	function hasXAndY(item) {
	  return !isNaN(parseFloat(item.x)) && !isNaN(parseFloat(item.y));
	}

	function getPrecision(data, valueAxisDim, dataIndex) {
	  var precision = -1;

	  do {
	    precision = Math.max(numberUtil.getPrecision(data.get(valueAxisDim, dataIndex)), precision);
	    data = data.stackedOn;
	  } while (data);

	  return precision;
	}

	function markerTypeCalculatorWithExtent(mlType, data, otherDataDim, targetDataDim, otherCoordIndex, targetCoordIndex) {
	  var coordArr = [];
	  var value = numCalculate(data, targetDataDim, mlType);
	  var dataIndex = data.indicesOfNearest(targetDataDim, value, true)[0];
	  coordArr[otherCoordIndex] = data.get(otherDataDim, dataIndex, true);
	  coordArr[targetCoordIndex] = data.get(targetDataDim, dataIndex, true);
	  var precision = getPrecision(data, targetDataDim, dataIndex);
	  precision = Math.min(precision, 20);

	  if (precision >= 0) {
	    coordArr[targetCoordIndex] = +coordArr[targetCoordIndex].toFixed(precision);
	  }

	  return coordArr;
	}

	var curry = zrUtil.curry; // TODO Specified percent

	var markerTypeCalculator = {
	  /**
	   * @method
	   * @param {module:echarts/data/List} data
	   * @param {string} baseAxisDim
	   * @param {string} valueAxisDim
	   */
	  min: curry(markerTypeCalculatorWithExtent, 'min'),

	  /**
	   * @method
	   * @param {module:echarts/data/List} data
	   * @param {string} baseAxisDim
	   * @param {string} valueAxisDim
	   */
	  max: curry(markerTypeCalculatorWithExtent, 'max'),

	  /**
	   * @method
	   * @param {module:echarts/data/List} data
	   * @param {string} baseAxisDim
	   * @param {string} valueAxisDim
	   */
	  average: curry(markerTypeCalculatorWithExtent, 'average')
	};
	/**
	 * Transform markPoint data item to format used in List by do the following
	 * 1. Calculate statistic like `max`, `min`, `average`
	 * 2. Convert `item.xAxis`, `item.yAxis` to `item.coord` array
	 * @param  {module:echarts/model/Series} seriesModel
	 * @param  {module:echarts/coord/*} [coordSys]
	 * @param  {Object} item
	 * @return {Object}
	 */

	function dataTransform(seriesModel, item) {
	  var data = seriesModel.getData();
	  var coordSys = seriesModel.coordinateSystem; // 1. If not specify the position with pixel directly
	  // 2. If `coord` is not a data array. Which uses `xAxis`,
	  // `yAxis` to specify the coord on each dimension
	  // parseFloat first because item.x and item.y can be percent string like '20%'

	  if (item && !hasXAndY(item) && !zrUtil.isArray(item.coord) && coordSys) {
	    var dims = coordSys.dimensions;
	    var axisInfo = getAxisInfo(item, data, coordSys, seriesModel); // Clone the option
	    // Transform the properties xAxis, yAxis, radiusAxis, angleAxis, geoCoord to value

	    item = zrUtil.clone(item);

	    if (item.type && markerTypeCalculator[item.type] && axisInfo.baseAxis && axisInfo.valueAxis) {
	      var otherCoordIndex = indexOf(dims, axisInfo.baseAxis.dim);
	      var targetCoordIndex = indexOf(dims, axisInfo.valueAxis.dim);
	      item.coord = markerTypeCalculator[item.type](data, axisInfo.baseDataDim, axisInfo.valueDataDim, otherCoordIndex, targetCoordIndex); // Force to use the value of calculated value.

	      item.value = item.coord[targetCoordIndex];
	    } else {
	      // FIXME Only has one of xAxis and yAxis.
	      var coord = [item.xAxis != null ? item.xAxis : item.radiusAxis, item.yAxis != null ? item.yAxis : item.angleAxis]; // Each coord support max, min, average

	      for (var i = 0; i < 2; i++) {
	        if (markerTypeCalculator[coord[i]]) {
	          var dataDim = seriesModel.coordDimToDataDim(dims[i])[0];
	          coord[i] = numCalculate(data, dataDim, coord[i]);
	        }
	      }

	      item.coord = coord;
	    }
	  }

	  return item;
	}

	function getAxisInfo(item, data, coordSys, seriesModel) {
	  var ret = {};

	  if (item.valueIndex != null || item.valueDim != null) {
	    ret.valueDataDim = item.valueIndex != null ? data.getDimension(item.valueIndex) : item.valueDim;
	    ret.valueAxis = coordSys.getAxis(seriesModel.dataDimToCoordDim(ret.valueDataDim));
	    ret.baseAxis = coordSys.getOtherAxis(ret.valueAxis);
	    ret.baseDataDim = seriesModel.coordDimToDataDim(ret.baseAxis.dim)[0];
	  } else {
	    ret.baseAxis = seriesModel.getBaseAxis();
	    ret.valueAxis = coordSys.getOtherAxis(ret.baseAxis);
	    ret.baseDataDim = seriesModel.coordDimToDataDim(ret.baseAxis.dim)[0];
	    ret.valueDataDim = seriesModel.coordDimToDataDim(ret.valueAxis.dim)[0];
	  }

	  return ret;
	}
	/**
	 * Filter data which is out of coordinateSystem range
	 * [dataFilter description]
	 * @param  {module:echarts/coord/*} [coordSys]
	 * @param  {Object} item
	 * @return {boolean}
	 */


	function dataFilter(coordSys, item) {
	  // Alwalys return true if there is no coordSys
	  return coordSys && coordSys.containData && item.coord && !hasXOrY(item) ? coordSys.containData(item.coord) : true;
	}

	function dimValueGetter(item, dimName, dataIndex, dimIndex) {
	  // x, y, radius, angle
	  if (dimIndex < 2) {
	    return item.coord && item.coord[dimIndex];
	  }

	  return item.value;
	}

	function numCalculate(data, valueDataDim, type) {
	  if (type === 'average') {
	    var sum = 0;
	    var count = 0;
	    data.each(valueDataDim, function (val, idx) {
	      if (!isNaN(val)) {
	        sum += val;
	        count++;
	      }
	    }, true);
	    return sum / count;
	  } else {
	    return data.getDataExtent(valueDataDim, true)[type === 'max' ? 1 : 0];
	  }
	}

	exports.dataTransform = dataTransform;
	exports.getAxisInfo = getAxisInfo;
	exports.dataFilter = dataFilter;
	exports.dimValueGetter = dimValueGetter;
	exports.numCalculate = numCalculate;

/***/ },
/* 573 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var zrUtil = __webpack_require__(166);

	var _default = echarts.extendComponentView({
	  type: 'marker',
	  init: function () {
	    /**
	     * Markline grouped by series
	     * @private
	     * @type {module:zrender/core/util.HashMap}
	     */
	    this.markerGroupMap = zrUtil.createHashMap();
	  },
	  render: function (markerModel, ecModel, api) {
	    var markerGroupMap = this.markerGroupMap;
	    markerGroupMap.each(function (item) {
	      item.__keep = false;
	    });
	    var markerModelKey = this.type + 'Model';
	    ecModel.eachSeries(function (seriesModel) {
	      var markerModel = seriesModel[markerModelKey];
	      markerModel && this.renderSeries(seriesModel, markerModel, ecModel, api);
	    }, this);
	    markerGroupMap.each(function (item) {
	      !item.__keep && this.group.remove(item.group);
	    }, this);
	  },
	  renderSeries: function () {}
	});

	module.exports = _default;

/***/ },
/* 574 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	__webpack_require__(575);

	__webpack_require__(576);

	echarts.registerPreprocessor(function (opt) {
	  // Make sure markLine component is enabled
	  opt.markLine = opt.markLine || {};
	});

/***/ },
/* 575 */
/***/ function(module, exports, __webpack_require__) {

	var MarkerModel = __webpack_require__(570);

	var _default = MarkerModel.extend({
	  type: 'markLine',
	  defaultOption: {
	    zlevel: 0,
	    z: 5,
	    symbol: ['circle', 'arrow'],
	    symbolSize: [8, 16],
	    //symbolRotate: 0,
	    precision: 2,
	    tooltip: {
	      trigger: 'item'
	    },
	    label: {
	      normal: {
	        show: true,
	        position: 'end'
	      },
	      emphasis: {
	        show: true
	      }
	    },
	    lineStyle: {
	      normal: {
	        type: 'dashed'
	      },
	      emphasis: {
	        width: 3
	      }
	    },
	    animationEasing: 'linear'
	  }
	});

	module.exports = _default;

/***/ },
/* 576 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var List = __webpack_require__(265);

	var numberUtil = __webpack_require__(205);

	var markerHelper = __webpack_require__(572);

	var LineDraw = __webpack_require__(384);

	var MarkerView = __webpack_require__(573);

	var markLineTransform = function (seriesModel, coordSys, mlModel, item) {
	  var data = seriesModel.getData(); // Special type markLine like 'min', 'max', 'average'

	  var mlType = item.type;

	  if (!zrUtil.isArray(item) && (mlType === 'min' || mlType === 'max' || mlType === 'average' // In case
	  // data: [{
	  //   yAxis: 10
	  // }]
	  || item.xAxis != null || item.yAxis != null)) {
	    var valueAxis;
	    var valueDataDim;
	    var value;

	    if (item.yAxis != null || item.xAxis != null) {
	      valueDataDim = item.yAxis != null ? 'y' : 'x';
	      valueAxis = coordSys.getAxis(valueDataDim);
	      value = zrUtil.retrieve(item.yAxis, item.xAxis);
	    } else {
	      var axisInfo = markerHelper.getAxisInfo(item, data, coordSys, seriesModel);
	      valueDataDim = axisInfo.valueDataDim;
	      valueAxis = axisInfo.valueAxis;
	      value = markerHelper.numCalculate(data, valueDataDim, mlType);
	    }

	    var valueIndex = valueDataDim === 'x' ? 0 : 1;
	    var baseIndex = 1 - valueIndex;
	    var mlFrom = zrUtil.clone(item);
	    var mlTo = {};
	    mlFrom.type = null;
	    mlFrom.coord = [];
	    mlTo.coord = [];
	    mlFrom.coord[baseIndex] = -Infinity;
	    mlTo.coord[baseIndex] = Infinity;
	    var precision = mlModel.get('precision');

	    if (precision >= 0 && typeof value === 'number') {
	      value = +value.toFixed(Math.min(precision, 20));
	    }

	    mlFrom.coord[valueIndex] = mlTo.coord[valueIndex] = value;
	    item = [mlFrom, mlTo, {
	      // Extra option for tooltip and label
	      type: mlType,
	      valueIndex: item.valueIndex,
	      // Force to use the value of calculated value.
	      value: value
	    }];
	  }

	  item = [markerHelper.dataTransform(seriesModel, item[0]), markerHelper.dataTransform(seriesModel, item[1]), zrUtil.extend({}, item[2])]; // Avoid line data type is extended by from(to) data type

	  item[2].type = item[2].type || ''; // Merge from option and to option into line option

	  zrUtil.merge(item[2], item[0]);
	  zrUtil.merge(item[2], item[1]);
	  return item;
	};

	function isInifinity(val) {
	  return !isNaN(val) && !isFinite(val);
	} // If a markLine has one dim


	function ifMarkLineHasOnlyDim(dimIndex, fromCoord, toCoord, coordSys) {
	  var otherDimIndex = 1 - dimIndex;
	  var dimName = coordSys.dimensions[dimIndex];
	  return isInifinity(fromCoord[otherDimIndex]) && isInifinity(toCoord[otherDimIndex]) && fromCoord[dimIndex] === toCoord[dimIndex] && coordSys.getAxis(dimName).containData(fromCoord[dimIndex]);
	}

	function markLineFilter(coordSys, item) {
	  if (coordSys.type === 'cartesian2d') {
	    var fromCoord = item[0].coord;
	    var toCoord = item[1].coord; // In case
	    // {
	    //  markLine: {
	    //    data: [{ yAxis: 2 }]
	    //  }
	    // }

	    if (fromCoord && toCoord && (ifMarkLineHasOnlyDim(1, fromCoord, toCoord, coordSys) || ifMarkLineHasOnlyDim(0, fromCoord, toCoord, coordSys))) {
	      return true;
	    }
	  }

	  return markerHelper.dataFilter(coordSys, item[0]) && markerHelper.dataFilter(coordSys, item[1]);
	}

	function updateSingleMarkerEndLayout(data, idx, isFrom, seriesModel, api) {
	  var coordSys = seriesModel.coordinateSystem;
	  var itemModel = data.getItemModel(idx);
	  var point;
	  var xPx = numberUtil.parsePercent(itemModel.get('x'), api.getWidth());
	  var yPx = numberUtil.parsePercent(itemModel.get('y'), api.getHeight());

	  if (!isNaN(xPx) && !isNaN(yPx)) {
	    point = [xPx, yPx];
	  } else {
	    // Chart like bar may have there own marker positioning logic
	    if (seriesModel.getMarkerPosition) {
	      // Use the getMarkerPoisition
	      point = seriesModel.getMarkerPosition(data.getValues(data.dimensions, idx));
	    } else {
	      var dims = coordSys.dimensions;
	      var x = data.get(dims[0], idx);
	      var y = data.get(dims[1], idx);
	      point = coordSys.dataToPoint([x, y]);
	    } // Expand line to the edge of grid if value on one axis is Inifnity
	    // In case
	    //  markLine: {
	    //    data: [{
	    //      yAxis: 2
	    //      // or
	    //      type: 'average'
	    //    }]
	    //  }


	    if (coordSys.type === 'cartesian2d') {
	      var xAxis = coordSys.getAxis('x');
	      var yAxis = coordSys.getAxis('y');
	      var dims = coordSys.dimensions;

	      if (isInifinity(data.get(dims[0], idx))) {
	        point[0] = xAxis.toGlobalCoord(xAxis.getExtent()[isFrom ? 0 : 1]);
	      } else if (isInifinity(data.get(dims[1], idx))) {
	        point[1] = yAxis.toGlobalCoord(yAxis.getExtent()[isFrom ? 0 : 1]);
	      }
	    } // Use x, y if has any


	    if (!isNaN(xPx)) {
	      point[0] = xPx;
	    }

	    if (!isNaN(yPx)) {
	      point[1] = yPx;
	    }
	  }

	  data.setItemLayout(idx, point);
	}

	var _default = MarkerView.extend({
	  type: 'markLine',
	  updateLayout: function (markLineModel, ecModel, api) {
	    ecModel.eachSeries(function (seriesModel) {
	      var mlModel = seriesModel.markLineModel;

	      if (mlModel) {
	        var mlData = mlModel.getData();
	        var fromData = mlModel.__from;
	        var toData = mlModel.__to; // Update visual and layout of from symbol and to symbol

	        fromData.each(function (idx) {
	          updateSingleMarkerEndLayout(fromData, idx, true, seriesModel, api);
	          updateSingleMarkerEndLayout(toData, idx, false, seriesModel, api);
	        }); // Update layout of line

	        mlData.each(function (idx) {
	          mlData.setItemLayout(idx, [fromData.getItemLayout(idx), toData.getItemLayout(idx)]);
	        });
	        this.markerGroupMap.get(seriesModel.id).updateLayout();
	      }
	    }, this);
	  },
	  renderSeries: function (seriesModel, mlModel, ecModel, api) {
	    var coordSys = seriesModel.coordinateSystem;
	    var seriesId = seriesModel.id;
	    var seriesData = seriesModel.getData();
	    var lineDrawMap = this.markerGroupMap;
	    var lineDraw = lineDrawMap.get(seriesId) || lineDrawMap.set(seriesId, new LineDraw());
	    this.group.add(lineDraw.group);
	    var mlData = createList(coordSys, seriesModel, mlModel);
	    var fromData = mlData.from;
	    var toData = mlData.to;
	    var lineData = mlData.line;
	    mlModel.__from = fromData;
	    mlModel.__to = toData; // Line data for tooltip and formatter

	    mlModel.setData(lineData);
	    var symbolType = mlModel.get('symbol');
	    var symbolSize = mlModel.get('symbolSize');

	    if (!zrUtil.isArray(symbolType)) {
	      symbolType = [symbolType, symbolType];
	    }

	    if (typeof symbolSize === 'number') {
	      symbolSize = [symbolSize, symbolSize];
	    } // Update visual and layout of from symbol and to symbol


	    mlData.from.each(function (idx) {
	      updateDataVisualAndLayout(fromData, idx, true);
	      updateDataVisualAndLayout(toData, idx, false);
	    }); // Update visual and layout of line

	    lineData.each(function (idx) {
	      var lineColor = lineData.getItemModel(idx).get('lineStyle.normal.color');
	      lineData.setItemVisual(idx, {
	        color: lineColor || fromData.getItemVisual(idx, 'color')
	      });
	      lineData.setItemLayout(idx, [fromData.getItemLayout(idx), toData.getItemLayout(idx)]);
	      lineData.setItemVisual(idx, {
	        'fromSymbolSize': fromData.getItemVisual(idx, 'symbolSize'),
	        'fromSymbol': fromData.getItemVisual(idx, 'symbol'),
	        'toSymbolSize': toData.getItemVisual(idx, 'symbolSize'),
	        'toSymbol': toData.getItemVisual(idx, 'symbol')
	      });
	    });
	    lineDraw.updateData(lineData); // Set host model for tooltip
	    // FIXME

	    mlData.line.eachItemGraphicEl(function (el, idx) {
	      el.traverse(function (child) {
	        child.dataModel = mlModel;
	      });
	    });

	    function updateDataVisualAndLayout(data, idx, isFrom) {
	      var itemModel = data.getItemModel(idx);
	      updateSingleMarkerEndLayout(data, idx, isFrom, seriesModel, api);
	      data.setItemVisual(idx, {
	        symbolSize: itemModel.get('symbolSize') || symbolSize[isFrom ? 0 : 1],
	        symbol: itemModel.get('symbol', true) || symbolType[isFrom ? 0 : 1],
	        color: itemModel.get('itemStyle.normal.color') || seriesData.getVisual('color')
	      });
	    }

	    lineDraw.__keep = true;
	    lineDraw.group.silent = mlModel.get('silent') || seriesModel.get('silent');
	  }
	});
	/**
	 * @inner
	 * @param {module:echarts/coord/*} coordSys
	 * @param {module:echarts/model/Series} seriesModel
	 * @param {module:echarts/model/Model} mpModel
	 */


	function createList(coordSys, seriesModel, mlModel) {
	  var coordDimsInfos;

	  if (coordSys) {
	    coordDimsInfos = zrUtil.map(coordSys && coordSys.dimensions, function (coordDim) {
	      var info = seriesModel.getData().getDimensionInfo(seriesModel.coordDimToDataDim(coordDim)[0]) || {}; // In map series data don't have lng and lat dimension. Fallback to same with coordSys

	      info.name = coordDim;
	      return info;
	    });
	  } else {
	    coordDimsInfos = [{
	      name: 'value',
	      type: 'float'
	    }];
	  }

	  var fromData = new List(coordDimsInfos, mlModel);
	  var toData = new List(coordDimsInfos, mlModel); // No dimensions

	  var lineData = new List([], mlModel);
	  var optData = zrUtil.map(mlModel.get('data'), zrUtil.curry(markLineTransform, seriesModel, coordSys, mlModel));

	  if (coordSys) {
	    optData = zrUtil.filter(optData, zrUtil.curry(markLineFilter, coordSys));
	  }

	  var dimValueGetter = coordSys ? markerHelper.dimValueGetter : function (item) {
	    return item.value;
	  };
	  fromData.initData(zrUtil.map(optData, function (item) {
	    return item[0];
	  }), null, dimValueGetter);
	  toData.initData(zrUtil.map(optData, function (item) {
	    return item[1];
	  }), null, dimValueGetter);
	  lineData.initData(zrUtil.map(optData, function (item) {
	    return item[2];
	  }));
	  lineData.hasItemOption = true;
	  return {
	    from: fromData,
	    to: toData,
	    line: lineData
	  };
	}

	module.exports = _default;

/***/ },
/* 577 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	__webpack_require__(578);

	__webpack_require__(579);

	echarts.registerPreprocessor(function (opt) {
	  // Make sure markArea component is enabled
	  opt.markArea = opt.markArea || {};
	});

/***/ },
/* 578 */
/***/ function(module, exports, __webpack_require__) {

	var MarkerModel = __webpack_require__(570);

	var _default = MarkerModel.extend({
	  type: 'markArea',
	  defaultOption: {
	    zlevel: 0,
	    // PENDING
	    z: 1,
	    tooltip: {
	      trigger: 'item'
	    },
	    // markArea should fixed on the coordinate system
	    animation: false,
	    label: {
	      normal: {
	        show: true,
	        position: 'top'
	      },
	      emphasis: {
	        show: true,
	        position: 'top'
	      }
	    },
	    itemStyle: {
	      normal: {
	        // color and borderColor default to use color from series
	        // color: 'auto'
	        // borderColor: 'auto'
	        borderWidth: 0
	      }
	    }
	  }
	});

	module.exports = _default;

/***/ },
/* 579 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var colorUtil = __webpack_require__(180);

	var List = __webpack_require__(265);

	var numberUtil = __webpack_require__(205);

	var graphic = __webpack_require__(212);

	var markerHelper = __webpack_require__(572);

	var MarkerView = __webpack_require__(573);

	// TODO Better on polar
	var markAreaTransform = function (seriesModel, coordSys, maModel, item) {
	  var lt = markerHelper.dataTransform(seriesModel, item[0]);
	  var rb = markerHelper.dataTransform(seriesModel, item[1]);
	  var retrieve = zrUtil.retrieve; // FIXME make sure lt is less than rb

	  var ltCoord = lt.coord;
	  var rbCoord = rb.coord;
	  ltCoord[0] = retrieve(ltCoord[0], -Infinity);
	  ltCoord[1] = retrieve(ltCoord[1], -Infinity);
	  rbCoord[0] = retrieve(rbCoord[0], Infinity);
	  rbCoord[1] = retrieve(rbCoord[1], Infinity); // Merge option into one

	  var result = zrUtil.mergeAll([{}, lt, rb]);
	  result.coord = [lt.coord, rb.coord];
	  result.x0 = lt.x;
	  result.y0 = lt.y;
	  result.x1 = rb.x;
	  result.y1 = rb.y;
	  return result;
	};

	function isInifinity(val) {
	  return !isNaN(val) && !isFinite(val);
	} // If a markArea has one dim


	function ifMarkLineHasOnlyDim(dimIndex, fromCoord, toCoord, coordSys) {
	  var otherDimIndex = 1 - dimIndex;
	  return isInifinity(fromCoord[otherDimIndex]) && isInifinity(toCoord[otherDimIndex]);
	}

	function markAreaFilter(coordSys, item) {
	  var fromCoord = item.coord[0];
	  var toCoord = item.coord[1];

	  if (coordSys.type === 'cartesian2d') {
	    // In case
	    // {
	    //  markArea: {
	    //    data: [{ yAxis: 2 }]
	    //  }
	    // }
	    if (fromCoord && toCoord && (ifMarkLineHasOnlyDim(1, fromCoord, toCoord, coordSys) || ifMarkLineHasOnlyDim(0, fromCoord, toCoord, coordSys))) {
	      return true;
	    }
	  }

	  return markerHelper.dataFilter(coordSys, {
	    coord: fromCoord,
	    x: item.x0,
	    y: item.y0
	  }) || markerHelper.dataFilter(coordSys, {
	    coord: toCoord,
	    x: item.x1,
	    y: item.y1
	  });
	} // dims can be ['x0', 'y0'], ['x1', 'y1'], ['x0', 'y1'], ['x1', 'y0']


	function getSingleMarkerEndPoint(data, idx, dims, seriesModel, api) {
	  var coordSys = seriesModel.coordinateSystem;
	  var itemModel = data.getItemModel(idx);
	  var point;
	  var xPx = numberUtil.parsePercent(itemModel.get(dims[0]), api.getWidth());
	  var yPx = numberUtil.parsePercent(itemModel.get(dims[1]), api.getHeight());

	  if (!isNaN(xPx) && !isNaN(yPx)) {
	    point = [xPx, yPx];
	  } else {
	    // Chart like bar may have there own marker positioning logic
	    if (seriesModel.getMarkerPosition) {
	      // Use the getMarkerPoisition
	      point = seriesModel.getMarkerPosition(data.getValues(dims, idx));
	    } else {
	      var x = data.get(dims[0], idx);
	      var y = data.get(dims[1], idx);
	      point = coordSys.dataToPoint([x, y], true);
	    }

	    if (coordSys.type === 'cartesian2d') {
	      var xAxis = coordSys.getAxis('x');
	      var yAxis = coordSys.getAxis('y');
	      var x = data.get(dims[0], idx);
	      var y = data.get(dims[1], idx);

	      if (isInifinity(x)) {
	        point[0] = xAxis.toGlobalCoord(xAxis.getExtent()[dims[0] === 'x0' ? 0 : 1]);
	      } else if (isInifinity(y)) {
	        point[1] = yAxis.toGlobalCoord(yAxis.getExtent()[dims[1] === 'y0' ? 0 : 1]);
	      }
	    } // Use x, y if has any


	    if (!isNaN(xPx)) {
	      point[0] = xPx;
	    }

	    if (!isNaN(yPx)) {
	      point[1] = yPx;
	    }
	  }

	  return point;
	}

	var dimPermutations = [['x0', 'y0'], ['x1', 'y0'], ['x1', 'y1'], ['x0', 'y1']];
	MarkerView.extend({
	  type: 'markArea',
	  updateLayout: function (markAreaModel, ecModel, api) {
	    ecModel.eachSeries(function (seriesModel) {
	      var maModel = seriesModel.markAreaModel;

	      if (maModel) {
	        var areaData = maModel.getData();
	        areaData.each(function (idx) {
	          var points = zrUtil.map(dimPermutations, function (dim) {
	            return getSingleMarkerEndPoint(areaData, idx, dim, seriesModel, api);
	          }); // Layout

	          areaData.setItemLayout(idx, points);
	          var el = areaData.getItemGraphicEl(idx);
	          el.setShape('points', points);
	        });
	      }
	    }, this);
	  },
	  renderSeries: function (seriesModel, maModel, ecModel, api) {
	    var coordSys = seriesModel.coordinateSystem;
	    var seriesName = seriesModel.name;
	    var seriesData = seriesModel.getData();
	    var areaGroupMap = this.markerGroupMap;
	    var polygonGroup = areaGroupMap.get(seriesName) || areaGroupMap.set(seriesName, {
	      group: new graphic.Group()
	    });
	    this.group.add(polygonGroup.group);
	    polygonGroup.__keep = true;
	    var areaData = createList(coordSys, seriesModel, maModel); // Line data for tooltip and formatter

	    maModel.setData(areaData); // Update visual and layout of line

	    areaData.each(function (idx) {
	      // Layout
	      areaData.setItemLayout(idx, zrUtil.map(dimPermutations, function (dim) {
	        return getSingleMarkerEndPoint(areaData, idx, dim, seriesModel, api);
	      })); // Visual

	      areaData.setItemVisual(idx, {
	        color: seriesData.getVisual('color')
	      });
	    });
	    areaData.diff(polygonGroup.__data).add(function (idx) {
	      var polygon = new graphic.Polygon({
	        shape: {
	          points: areaData.getItemLayout(idx)
	        }
	      });
	      areaData.setItemGraphicEl(idx, polygon);
	      polygonGroup.group.add(polygon);
	    }).update(function (newIdx, oldIdx) {
	      var polygon = polygonGroup.__data.getItemGraphicEl(oldIdx);

	      graphic.updateProps(polygon, {
	        shape: {
	          points: areaData.getItemLayout(newIdx)
	        }
	      }, maModel, newIdx);
	      polygonGroup.group.add(polygon);
	      areaData.setItemGraphicEl(newIdx, polygon);
	    }).remove(function (idx) {
	      var polygon = polygonGroup.__data.getItemGraphicEl(idx);

	      polygonGroup.group.remove(polygon);
	    }).execute();
	    areaData.eachItemGraphicEl(function (polygon, idx) {
	      var itemModel = areaData.getItemModel(idx);
	      var labelModel = itemModel.getModel('label.normal');
	      var labelHoverModel = itemModel.getModel('label.emphasis');
	      var color = areaData.getItemVisual(idx, 'color');
	      polygon.useStyle(zrUtil.defaults(itemModel.getModel('itemStyle.normal').getItemStyle(), {
	        fill: colorUtil.modifyAlpha(color, 0.4),
	        stroke: color
	      }));
	      polygon.hoverStyle = itemModel.getModel('itemStyle.emphasis').getItemStyle();
	      graphic.setLabelStyle(polygon.style, polygon.hoverStyle, labelModel, labelHoverModel, {
	        labelFetcher: maModel,
	        labelDataIndex: idx,
	        defaultText: areaData.getName(idx) || '',
	        isRectText: true,
	        autoColor: color
	      });
	      graphic.setHoverStyle(polygon, {});
	      polygon.dataModel = maModel;
	    });
	    polygonGroup.__data = areaData;
	    polygonGroup.group.silent = maModel.get('silent') || seriesModel.get('silent');
	  }
	});
	/**
	 * @inner
	 * @param {module:echarts/coord/*} coordSys
	 * @param {module:echarts/model/Series} seriesModel
	 * @param {module:echarts/model/Model} mpModel
	 */

	function createList(coordSys, seriesModel, maModel) {
	  var coordDimsInfos;
	  var areaData;
	  var dims = ['x0', 'y0', 'x1', 'y1'];

	  if (coordSys) {
	    coordDimsInfos = zrUtil.map(coordSys && coordSys.dimensions, function (coordDim) {
	      var info = seriesModel.getData().getDimensionInfo(seriesModel.coordDimToDataDim(coordDim)[0]) || {}; // In map series data don't have lng and lat dimension. Fallback to same with coordSys

	      info.name = coordDim;
	      return info;
	    });
	    areaData = new List(zrUtil.map(dims, function (dim, idx) {
	      return {
	        name: dim,
	        type: coordDimsInfos[idx % 2].type
	      };
	    }), maModel);
	  } else {
	    coordDimsInfos = [{
	      name: 'value',
	      type: 'float'
	    }];
	    areaData = new List(coordDimsInfos, maModel);
	  }

	  var optData = zrUtil.map(maModel.get('data'), zrUtil.curry(markAreaTransform, seriesModel, coordSys, maModel));

	  if (coordSys) {
	    optData = zrUtil.filter(optData, zrUtil.curry(markAreaFilter, coordSys));
	  }

	  var dimValueGetter = coordSys ? function (item, dimName, dataIndex, dimIndex) {
	    return item.coord[Math.floor(dimIndex / 2)][dimIndex % 2];
	  } : function (item) {
	    return item.value;
	  };
	  areaData.initData(optData, null, dimValueGetter);
	  areaData.hasItemOption = true;
	  return areaData;
	}

/***/ },
/* 580 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var preprocessor = __webpack_require__(581);

	__webpack_require__(582);

	__webpack_require__(583);

	__webpack_require__(584);

	__webpack_require__(586);

	/**
	 * DataZoom component entry
	 */
	echarts.registerPreprocessor(preprocessor);

/***/ },
/* 581 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	function _default(option) {
	  var timelineOpt = option && option.timeline;

	  if (!zrUtil.isArray(timelineOpt)) {
	    timelineOpt = timelineOpt ? [timelineOpt] : [];
	  }

	  zrUtil.each(timelineOpt, function (opt) {
	    if (!opt) {
	      return;
	    }

	    compatibleEC2(opt);
	  });
	}

	function compatibleEC2(opt) {
	  var type = opt.type;
	  var ec2Types = {
	    'number': 'value',
	    'time': 'time'
	  }; // Compatible with ec2

	  if (ec2Types[type]) {
	    opt.axisType = ec2Types[type];
	    delete opt.type;
	  }

	  transferItem(opt);

	  if (has(opt, 'controlPosition')) {
	    var controlStyle = opt.controlStyle || (opt.controlStyle = {});

	    if (!has(controlStyle, 'position')) {
	      controlStyle.position = opt.controlPosition;
	    }

	    if (controlStyle.position === 'none' && !has(controlStyle, 'show')) {
	      controlStyle.show = false;
	      delete controlStyle.position;
	    }

	    delete opt.controlPosition;
	  }

	  zrUtil.each(opt.data || [], function (dataItem) {
	    if (zrUtil.isObject(dataItem) && !zrUtil.isArray(dataItem)) {
	      if (!has(dataItem, 'value') && has(dataItem, 'name')) {
	        // In ec2, using name as value.
	        dataItem.value = dataItem.name;
	      }

	      transferItem(dataItem);
	    }
	  });
	}

	function transferItem(opt) {
	  var itemStyle = opt.itemStyle || (opt.itemStyle = {});
	  var itemStyleEmphasis = itemStyle.emphasis || (itemStyle.emphasis = {}); // Transfer label out

	  var label = opt.label || opt.label || {};
	  var labelNormal = label.normal || (label.normal = {});
	  var excludeLabelAttr = {
	    normal: 1,
	    emphasis: 1
	  };
	  zrUtil.each(label, function (value, name) {
	    if (!excludeLabelAttr[name] && !has(labelNormal, name)) {
	      labelNormal[name] = value;
	    }
	  });

	  if (itemStyleEmphasis.label && !has(label, 'emphasis')) {
	    label.emphasis = itemStyleEmphasis.label;
	    delete itemStyleEmphasis.label;
	  }
	}

	function has(obj, attr) {
	  return obj.hasOwnProperty(attr);
	}

	module.exports = _default;

/***/ },
/* 582 */
/***/ function(module, exports, __webpack_require__) {

	var Component = __webpack_require__(245);

	Component.registerSubTypeDefaulter('timeline', function () {
	  // Only slider now.
	  return 'slider';
	});

/***/ },
/* 583 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var zrUtil = __webpack_require__(166);

	echarts.registerAction({
	  type: 'timelineChange',
	  event: 'timelineChanged',
	  update: 'prepareAndUpdate'
	}, function (payload, ecModel) {
	  var timelineModel = ecModel.getComponent('timeline');

	  if (timelineModel && payload.currentIndex != null) {
	    timelineModel.setCurrentIndex(payload.currentIndex);

	    if (!timelineModel.get('loop', true) && timelineModel.isIndexMax()) {
	      timelineModel.setPlayState(false);
	    }
	  } // Set normalized currentIndex to payload.


	  ecModel.resetOption('timeline');
	  return zrUtil.defaults({
	    currentIndex: timelineModel.option.currentIndex
	  }, payload);
	});
	echarts.registerAction({
	  type: 'timelinePlayChange',
	  event: 'timelinePlayChanged',
	  update: 'update'
	}, function (payload, ecModel) {
	  var timelineModel = ecModel.getComponent('timeline');

	  if (timelineModel && payload.playState != null) {
	    timelineModel.setPlayState(payload.playState);
	  }
	});

/***/ },
/* 584 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var TimelineModel = __webpack_require__(585);

	var modelUtil = __webpack_require__(203);

	var SliderTimelineModel = TimelineModel.extend({
	  type: 'timeline.slider',

	  /**
	   * @protected
	   */
	  defaultOption: {
	    backgroundColor: 'rgba(0,0,0,0)',
	    // 时间轴背景颜色
	    borderColor: '#ccc',
	    // 时间轴边框颜色
	    borderWidth: 0,
	    // 时间轴边框线宽，单位px，默认为0（无边框）
	    orient: 'horizontal',
	    // 'vertical'
	    inverse: false,
	    tooltip: {
	      // boolean or Object
	      trigger: 'item' // data item may also have tootip attr.

	    },
	    symbol: 'emptyCircle',
	    symbolSize: 10,
	    lineStyle: {
	      show: true,
	      width: 2,
	      color: '#304654'
	    },
	    label: {
	      // 文本标签
	      position: 'auto',
	      // auto left right top bottom
	      // When using number, label position is not
	      // restricted by viewRect.
	      // positive: right/bottom, negative: left/top
	      normal: {
	        show: true,
	        interval: 'auto',
	        rotate: 0,
	        // formatter: null,
	        // 其余属性默认使用全局文本样式，详见TEXTSTYLE
	        color: '#304654'
	      },
	      emphasis: {
	        show: true,
	        // 其余属性默认使用全局文本样式，详见TEXTSTYLE
	        color: '#c23531'
	      }
	    },
	    itemStyle: {
	      normal: {
	        color: '#304654',
	        borderWidth: 1
	      },
	      emphasis: {
	        color: '#c23531'
	      }
	    },
	    checkpointStyle: {
	      symbol: 'circle',
	      symbolSize: 13,
	      color: '#c23531',
	      borderWidth: 5,
	      borderColor: 'rgba(194,53,49, 0.5)',
	      animation: true,
	      animationDuration: 300,
	      animationEasing: 'quinticInOut'
	    },
	    controlStyle: {
	      show: true,
	      showPlayBtn: true,
	      showPrevBtn: true,
	      showNextBtn: true,
	      itemSize: 22,
	      itemGap: 12,
	      position: 'left',
	      // 'left' 'right' 'top' 'bottom'
	      playIcon: 'path://M31.6,53C17.5,53,6,41.5,6,27.4S17.5,1.8,31.6,1.8C45.7,1.8,57.2,13.3,57.2,27.4S45.7,53,31.6,53z M31.6,3.3 C18.4,3.3,7.5,14.1,7.5,27.4c0,13.3,10.8,24.1,24.1,24.1C44.9,51.5,55.7,40.7,55.7,27.4C55.7,14.1,44.9,3.3,31.6,3.3z M24.9,21.3 c0-2.2,1.6-3.1,3.5-2l10.5,6.1c1.899,1.1,1.899,2.9,0,4l-10.5,6.1c-1.9,1.1-3.5,0.2-3.5-2V21.3z',
	      // jshint ignore:line
	      stopIcon: 'path://M30.9,53.2C16.8,53.2,5.3,41.7,5.3,27.6S16.8,2,30.9,2C45,2,56.4,13.5,56.4,27.6S45,53.2,30.9,53.2z M30.9,3.5C17.6,3.5,6.8,14.4,6.8,27.6c0,13.3,10.8,24.1,24.101,24.1C44.2,51.7,55,40.9,55,27.6C54.9,14.4,44.1,3.5,30.9,3.5z M36.9,35.8c0,0.601-0.4,1-0.9,1h-1.3c-0.5,0-0.9-0.399-0.9-1V19.5c0-0.6,0.4-1,0.9-1H36c0.5,0,0.9,0.4,0.9,1V35.8z M27.8,35.8 c0,0.601-0.4,1-0.9,1h-1.3c-0.5,0-0.9-0.399-0.9-1V19.5c0-0.6,0.4-1,0.9-1H27c0.5,0,0.9,0.4,0.9,1L27.8,35.8L27.8,35.8z',
	      // jshint ignore:line
	      nextIcon: 'path://M18.6,50.8l22.5-22.5c0.2-0.2,0.3-0.4,0.3-0.7c0-0.3-0.1-0.5-0.3-0.7L18.7,4.4c-0.1-0.1-0.2-0.3-0.2-0.5 c0-0.4,0.3-0.8,0.8-0.8c0.2,0,0.5,0.1,0.6,0.3l23.5,23.5l0,0c0.2,0.2,0.3,0.4,0.3,0.7c0,0.3-0.1,0.5-0.3,0.7l-0.1,0.1L19.7,52 c-0.1,0.1-0.3,0.2-0.5,0.2c-0.4,0-0.8-0.3-0.8-0.8C18.4,51.2,18.5,51,18.6,50.8z',
	      // jshint ignore:line
	      prevIcon: 'path://M43,52.8L20.4,30.3c-0.2-0.2-0.3-0.4-0.3-0.7c0-0.3,0.1-0.5,0.3-0.7L42.9,6.4c0.1-0.1,0.2-0.3,0.2-0.5 c0-0.4-0.3-0.8-0.8-0.8c-0.2,0-0.5,0.1-0.6,0.3L18.3,28.8l0,0c-0.2,0.2-0.3,0.4-0.3,0.7c0,0.3,0.1,0.5,0.3,0.7l0.1,0.1L41.9,54 c0.1,0.1,0.3,0.2,0.5,0.2c0.4,0,0.8-0.3,0.8-0.8C43.2,53.2,43.1,53,43,52.8z',
	      // jshint ignore:line
	      normal: {
	        color: '#304654',
	        borderColor: '#304654',
	        borderWidth: 1
	      },
	      emphasis: {
	        color: '#c23531',
	        borderColor: '#c23531',
	        borderWidth: 2
	      }
	    },
	    data: []
	  }
	});
	zrUtil.mixin(SliderTimelineModel, modelUtil.dataFormatMixin);
	var _default = SliderTimelineModel;
	module.exports = _default;

/***/ },
/* 585 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var ComponentModel = __webpack_require__(245);

	var List = __webpack_require__(265);

	var modelUtil = __webpack_require__(203);

	var TimelineModel = ComponentModel.extend({
	  type: 'timeline',
	  layoutMode: 'box',

	  /**
	   * @protected
	   */
	  defaultOption: {
	    zlevel: 0,
	    // 一级层叠
	    z: 4,
	    // 二级层叠
	    show: true,
	    axisType: 'time',
	    // 模式是时间类型，支持 value, category
	    realtime: true,
	    left: '20%',
	    top: null,
	    right: '20%',
	    bottom: 0,
	    width: null,
	    height: 40,
	    padding: 5,
	    controlPosition: 'left',
	    // 'left' 'right' 'top' 'bottom' 'none'
	    autoPlay: false,
	    rewind: false,
	    // 反向播放
	    loop: true,
	    playInterval: 2000,
	    // 播放时间间隔，单位ms
	    currentIndex: 0,
	    itemStyle: {
	      normal: {},
	      emphasis: {}
	    },
	    label: {
	      normal: {
	        color: '#000'
	      },
	      emphasis: {}
	    },
	    data: []
	  },

	  /**
	   * @override
	   */
	  init: function (option, parentModel, ecModel) {
	    /**
	     * @private
	     * @type {module:echarts/data/List}
	     */
	    this._data;
	    /**
	     * @private
	     * @type {Array.<string>}
	     */

	    this._names;
	    this.mergeDefaultAndTheme(option, ecModel);

	    this._initData();
	  },

	  /**
	   * @override
	   */
	  mergeOption: function (option) {
	    TimelineModel.superApply(this, 'mergeOption', arguments);

	    this._initData();
	  },

	  /**
	   * @param {number} [currentIndex]
	   */
	  setCurrentIndex: function (currentIndex) {
	    if (currentIndex == null) {
	      currentIndex = this.option.currentIndex;
	    }

	    var count = this._data.count();

	    if (this.option.loop) {
	      currentIndex = (currentIndex % count + count) % count;
	    } else {
	      currentIndex >= count && (currentIndex = count - 1);
	      currentIndex < 0 && (currentIndex = 0);
	    }

	    this.option.currentIndex = currentIndex;
	  },

	  /**
	   * @return {number} currentIndex
	   */
	  getCurrentIndex: function () {
	    return this.option.currentIndex;
	  },

	  /**
	   * @return {boolean}
	   */
	  isIndexMax: function () {
	    return this.getCurrentIndex() >= this._data.count() - 1;
	  },

	  /**
	   * @param {boolean} state true: play, false: stop
	   */
	  setPlayState: function (state) {
	    this.option.autoPlay = !!state;
	  },

	  /**
	   * @return {boolean} true: play, false: stop
	   */
	  getPlayState: function () {
	    return !!this.option.autoPlay;
	  },

	  /**
	   * @private
	   */
	  _initData: function () {
	    var thisOption = this.option;
	    var dataArr = thisOption.data || [];
	    var axisType = thisOption.axisType;
	    var names = this._names = [];

	    if (axisType === 'category') {
	      var idxArr = [];
	      zrUtil.each(dataArr, function (item, index) {
	        var value = modelUtil.getDataItemValue(item);
	        var newItem;

	        if (zrUtil.isObject(item)) {
	          newItem = zrUtil.clone(item);
	          newItem.value = index;
	        } else {
	          newItem = index;
	        }

	        idxArr.push(newItem);

	        if (!zrUtil.isString(value) && (value == null || isNaN(value))) {
	          value = '';
	        }

	        names.push(value + '');
	      });
	      dataArr = idxArr;
	    }

	    var dimType = {
	      category: 'ordinal',
	      time: 'time'
	    }[axisType] || 'number';
	    var data = this._data = new List([{
	      name: 'value',
	      type: dimType
	    }], this);
	    data.initData(dataArr, names);
	  },
	  getData: function () {
	    return this._data;
	  },

	  /**
	   * @public
	   * @return {Array.<string>} categoreis
	   */
	  getCategories: function () {
	    if (this.get('axisType') === 'category') {
	      return this._names.slice();
	    }
	  }
	});
	var _default = TimelineModel;
	module.exports = _default;

/***/ },
/* 586 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var BoundingRect = __webpack_require__(184);

	var matrix = __webpack_require__(175);

	var graphic = __webpack_require__(212);

	var layout = __webpack_require__(247);

	var TimelineView = __webpack_require__(587);

	var TimelineAxis = __webpack_require__(588);

	var _symbol = __webpack_require__(276);

	var createSymbol = _symbol.createSymbol;

	var axisHelper = __webpack_require__(268);

	var numberUtil = __webpack_require__(205);

	var _format = __webpack_require__(204);

	var encodeHTML = _format.encodeHTML;
	var bind = zrUtil.bind;
	var each = zrUtil.each;
	var PI = Math.PI;

	var _default = TimelineView.extend({
	  type: 'timeline.slider',
	  init: function (ecModel, api) {
	    this.api = api;
	    /**
	     * @private
	     * @type {module:echarts/component/timeline/TimelineAxis}
	     */

	    this._axis;
	    /**
	     * @private
	     * @type {module:zrender/core/BoundingRect}
	     */

	    this._viewRect;
	    /**
	     * @type {number}
	     */

	    this._timer;
	    /**
	     * @type {module:zrender/Element}
	     */

	    this._currentPointer;
	    /**
	     * @type {module:zrender/container/Group}
	     */

	    this._mainGroup;
	    /**
	     * @type {module:zrender/container/Group}
	     */

	    this._labelGroup;
	  },

	  /**
	   * @override
	   */
	  render: function (timelineModel, ecModel, api, payload) {
	    this.model = timelineModel;
	    this.api = api;
	    this.ecModel = ecModel;
	    this.group.removeAll();

	    if (timelineModel.get('show', true)) {
	      var layoutInfo = this._layout(timelineModel, api);

	      var mainGroup = this._createGroup('mainGroup');

	      var labelGroup = this._createGroup('labelGroup');
	      /**
	       * @private
	       * @type {module:echarts/component/timeline/TimelineAxis}
	       */


	      var axis = this._axis = this._createAxis(layoutInfo, timelineModel);

	      timelineModel.formatTooltip = function (dataIndex) {
	        return encodeHTML(axis.scale.getLabel(dataIndex));
	      };

	      each(['AxisLine', 'AxisTick', 'Control', 'CurrentPointer'], function (name) {
	        this['_render' + name](layoutInfo, mainGroup, axis, timelineModel);
	      }, this);

	      this._renderAxisLabel(layoutInfo, labelGroup, axis, timelineModel);

	      this._position(layoutInfo, timelineModel);
	    }

	    this._doPlayStop();
	  },

	  /**
	   * @override
	   */
	  remove: function () {
	    this._clearTimer();

	    this.group.removeAll();
	  },

	  /**
	   * @override
	   */
	  dispose: function () {
	    this._clearTimer();
	  },
	  _layout: function (timelineModel, api) {
	    var labelPosOpt = timelineModel.get('label.normal.position');
	    var orient = timelineModel.get('orient');
	    var viewRect = getViewRect(timelineModel, api); // Auto label offset.

	    if (labelPosOpt == null || labelPosOpt === 'auto') {
	      labelPosOpt = orient === 'horizontal' ? viewRect.y + viewRect.height / 2 < api.getHeight() / 2 ? '-' : '+' : viewRect.x + viewRect.width / 2 < api.getWidth() / 2 ? '+' : '-';
	    } else if (isNaN(labelPosOpt)) {
	      labelPosOpt = {
	        horizontal: {
	          top: '-',
	          bottom: '+'
	        },
	        vertical: {
	          left: '-',
	          right: '+'
	        }
	      }[orient][labelPosOpt];
	    }

	    var labelAlignMap = {
	      horizontal: 'center',
	      vertical: labelPosOpt >= 0 || labelPosOpt === '+' ? 'left' : 'right'
	    };
	    var labelBaselineMap = {
	      horizontal: labelPosOpt >= 0 || labelPosOpt === '+' ? 'top' : 'bottom',
	      vertical: 'middle'
	    };
	    var rotationMap = {
	      horizontal: 0,
	      vertical: PI / 2
	    }; // Position

	    var mainLength = orient === 'vertical' ? viewRect.height : viewRect.width;
	    var controlModel = timelineModel.getModel('controlStyle');
	    var showControl = controlModel.get('show');
	    var controlSize = showControl ? controlModel.get('itemSize') : 0;
	    var controlGap = showControl ? controlModel.get('itemGap') : 0;
	    var sizePlusGap = controlSize + controlGap; // Special label rotate.

	    var labelRotation = timelineModel.get('label.normal.rotate') || 0;
	    labelRotation = labelRotation * PI / 180; // To radian.

	    var playPosition;
	    var prevBtnPosition;
	    var nextBtnPosition;
	    var axisExtent;
	    var controlPosition = controlModel.get('position', true);
	    var showControl = controlModel.get('show', true);
	    var showPlayBtn = showControl && controlModel.get('showPlayBtn', true);
	    var showPrevBtn = showControl && controlModel.get('showPrevBtn', true);
	    var showNextBtn = showControl && controlModel.get('showNextBtn', true);
	    var xLeft = 0;
	    var xRight = mainLength; // position[0] means left, position[1] means middle.

	    if (controlPosition === 'left' || controlPosition === 'bottom') {
	      showPlayBtn && (playPosition = [0, 0], xLeft += sizePlusGap);
	      showPrevBtn && (prevBtnPosition = [xLeft, 0], xLeft += sizePlusGap);
	      showNextBtn && (nextBtnPosition = [xRight - controlSize, 0], xRight -= sizePlusGap);
	    } else {
	      // 'top' 'right'
	      showPlayBtn && (playPosition = [xRight - controlSize, 0], xRight -= sizePlusGap);
	      showPrevBtn && (prevBtnPosition = [0, 0], xLeft += sizePlusGap);
	      showNextBtn && (nextBtnPosition = [xRight - controlSize, 0], xRight -= sizePlusGap);
	    }

	    axisExtent = [xLeft, xRight];

	    if (timelineModel.get('inverse')) {
	      axisExtent.reverse();
	    }

	    return {
	      viewRect: viewRect,
	      mainLength: mainLength,
	      orient: orient,
	      rotation: rotationMap[orient],
	      labelRotation: labelRotation,
	      labelPosOpt: labelPosOpt,
	      labelAlign: timelineModel.get('label.normal.align') || labelAlignMap[orient],
	      labelBaseline: timelineModel.get('label.normal.verticalAlign') || timelineModel.get('label.normal.baseline') || labelBaselineMap[orient],
	      // Based on mainGroup.
	      playPosition: playPosition,
	      prevBtnPosition: prevBtnPosition,
	      nextBtnPosition: nextBtnPosition,
	      axisExtent: axisExtent,
	      controlSize: controlSize,
	      controlGap: controlGap
	    };
	  },
	  _position: function (layoutInfo, timelineModel) {
	    // Position is be called finally, because bounding rect is needed for
	    // adapt content to fill viewRect (auto adapt offset).
	    // Timeline may be not all in the viewRect when 'offset' is specified
	    // as a number, because it is more appropriate that label aligns at
	    // 'offset' but not the other edge defined by viewRect.
	    var mainGroup = this._mainGroup;
	    var labelGroup = this._labelGroup;
	    var viewRect = layoutInfo.viewRect;

	    if (layoutInfo.orient === 'vertical') {
	      // transfrom to horizontal, inverse rotate by left-top point.
	      var m = matrix.create();
	      var rotateOriginX = viewRect.x;
	      var rotateOriginY = viewRect.y + viewRect.height;
	      matrix.translate(m, m, [-rotateOriginX, -rotateOriginY]);
	      matrix.rotate(m, m, -PI / 2);
	      matrix.translate(m, m, [rotateOriginX, rotateOriginY]);
	      viewRect = viewRect.clone();
	      viewRect.applyTransform(m);
	    }

	    var viewBound = getBound(viewRect);
	    var mainBound = getBound(mainGroup.getBoundingRect());
	    var labelBound = getBound(labelGroup.getBoundingRect());
	    var mainPosition = mainGroup.position;
	    var labelsPosition = labelGroup.position;
	    labelsPosition[0] = mainPosition[0] = viewBound[0][0];
	    var labelPosOpt = layoutInfo.labelPosOpt;

	    if (isNaN(labelPosOpt)) {
	      // '+' or '-'
	      var mainBoundIdx = labelPosOpt === '+' ? 0 : 1;
	      toBound(mainPosition, mainBound, viewBound, 1, mainBoundIdx);
	      toBound(labelsPosition, labelBound, viewBound, 1, 1 - mainBoundIdx);
	    } else {
	      var mainBoundIdx = labelPosOpt >= 0 ? 0 : 1;
	      toBound(mainPosition, mainBound, viewBound, 1, mainBoundIdx);
	      labelsPosition[1] = mainPosition[1] + labelPosOpt;
	    }

	    mainGroup.attr('position', mainPosition);
	    labelGroup.attr('position', labelsPosition);
	    mainGroup.rotation = labelGroup.rotation = layoutInfo.rotation;
	    setOrigin(mainGroup);
	    setOrigin(labelGroup);

	    function setOrigin(targetGroup) {
	      var pos = targetGroup.position;
	      targetGroup.origin = [viewBound[0][0] - pos[0], viewBound[1][0] - pos[1]];
	    }

	    function getBound(rect) {
	      // [[xmin, xmax], [ymin, ymax]]
	      return [[rect.x, rect.x + rect.width], [rect.y, rect.y + rect.height]];
	    }

	    function toBound(fromPos, from, to, dimIdx, boundIdx) {
	      fromPos[dimIdx] += to[dimIdx][boundIdx] - from[dimIdx][boundIdx];
	    }
	  },
	  _createAxis: function (layoutInfo, timelineModel) {
	    var data = timelineModel.getData();
	    var axisType = timelineModel.get('axisType');
	    var scale = axisHelper.createScaleByModel(timelineModel, axisType);
	    var dataExtent = data.getDataExtent('value');
	    scale.setExtent(dataExtent[0], dataExtent[1]);

	    this._customizeScale(scale, data);

	    scale.niceTicks();
	    var axis = new TimelineAxis('value', scale, layoutInfo.axisExtent, axisType);
	    axis.model = timelineModel;
	    return axis;
	  },
	  _customizeScale: function (scale, data) {
	    scale.getTicks = function () {
	      return data.mapArray(['value'], function (value) {
	        return value;
	      });
	    };

	    scale.getTicksLabels = function () {
	      return zrUtil.map(this.getTicks(), scale.getLabel, scale);
	    };
	  },
	  _createGroup: function (name) {
	    var newGroup = this['_' + name] = new graphic.Group();
	    this.group.add(newGroup);
	    return newGroup;
	  },
	  _renderAxisLine: function (layoutInfo, group, axis, timelineModel) {
	    var axisExtent = axis.getExtent();

	    if (!timelineModel.get('lineStyle.show')) {
	      return;
	    }

	    group.add(new graphic.Line({
	      shape: {
	        x1: axisExtent[0],
	        y1: 0,
	        x2: axisExtent[1],
	        y2: 0
	      },
	      style: zrUtil.extend({
	        lineCap: 'round'
	      }, timelineModel.getModel('lineStyle').getLineStyle()),
	      silent: true,
	      z2: 1
	    }));
	  },

	  /**
	   * @private
	   */
	  _renderAxisTick: function (layoutInfo, group, axis, timelineModel) {
	    var data = timelineModel.getData();
	    var ticks = axis.scale.getTicks();
	    each(ticks, function (value, dataIndex) {
	      var tickCoord = axis.dataToCoord(value);
	      var itemModel = data.getItemModel(dataIndex);
	      var itemStyleModel = itemModel.getModel('itemStyle.normal');
	      var hoverStyleModel = itemModel.getModel('itemStyle.emphasis');
	      var symbolOpt = {
	        position: [tickCoord, 0],
	        onclick: bind(this._changeTimeline, this, dataIndex)
	      };
	      var el = giveSymbol(itemModel, itemStyleModel, group, symbolOpt);
	      graphic.setHoverStyle(el, hoverStyleModel.getItemStyle());

	      if (itemModel.get('tooltip')) {
	        el.dataIndex = dataIndex;
	        el.dataModel = timelineModel;
	      } else {
	        el.dataIndex = el.dataModel = null;
	      }
	    }, this);
	  },

	  /**
	   * @private
	   */
	  _renderAxisLabel: function (layoutInfo, group, axis, timelineModel) {
	    var labelModel = timelineModel.getModel('label.normal');

	    if (!labelModel.get('show')) {
	      return;
	    }

	    var data = timelineModel.getData();
	    var ticks = axis.scale.getTicks();
	    var labels = axisHelper.getFormattedLabels(axis, labelModel.get('formatter'));
	    var labelInterval = axis.getLabelInterval();
	    each(ticks, function (tick, dataIndex) {
	      if (axis.isLabelIgnored(dataIndex, labelInterval)) {
	        return;
	      }

	      var itemModel = data.getItemModel(dataIndex);
	      var normalLabelModel = itemModel.getModel('label.normal');
	      var hoverLabelModel = itemModel.getModel('label.emphasis');
	      var tickCoord = axis.dataToCoord(tick);
	      var textEl = new graphic.Text({
	        position: [tickCoord, 0],
	        rotation: layoutInfo.labelRotation - layoutInfo.rotation,
	        onclick: bind(this._changeTimeline, this, dataIndex),
	        silent: false
	      });
	      graphic.setTextStyle(textEl.style, normalLabelModel, {
	        text: labels[dataIndex],
	        textAlign: layoutInfo.labelAlign,
	        textVerticalAlign: layoutInfo.labelBaseline
	      });
	      group.add(textEl);
	      graphic.setHoverStyle(textEl, graphic.setTextStyle({}, hoverLabelModel));
	    }, this);
	  },

	  /**
	   * @private
	   */
	  _renderControl: function (layoutInfo, group, axis, timelineModel) {
	    var controlSize = layoutInfo.controlSize;
	    var rotation = layoutInfo.rotation;
	    var itemStyle = timelineModel.getModel('controlStyle.normal').getItemStyle();
	    var hoverStyle = timelineModel.getModel('controlStyle.emphasis').getItemStyle();
	    var rect = [0, -controlSize / 2, controlSize, controlSize];
	    var playState = timelineModel.getPlayState();
	    var inverse = timelineModel.get('inverse', true);
	    makeBtn(layoutInfo.nextBtnPosition, 'controlStyle.nextIcon', bind(this._changeTimeline, this, inverse ? '-' : '+'));
	    makeBtn(layoutInfo.prevBtnPosition, 'controlStyle.prevIcon', bind(this._changeTimeline, this, inverse ? '+' : '-'));
	    makeBtn(layoutInfo.playPosition, 'controlStyle.' + (playState ? 'stopIcon' : 'playIcon'), bind(this._handlePlayClick, this, !playState), true);

	    function makeBtn(position, iconPath, onclick, willRotate) {
	      if (!position) {
	        return;
	      }

	      var opt = {
	        position: position,
	        origin: [controlSize / 2, 0],
	        rotation: willRotate ? -rotation : 0,
	        rectHover: true,
	        style: itemStyle,
	        onclick: onclick
	      };
	      var btn = makeIcon(timelineModel, iconPath, rect, opt);
	      group.add(btn);
	      graphic.setHoverStyle(btn, hoverStyle);
	    }
	  },
	  _renderCurrentPointer: function (layoutInfo, group, axis, timelineModel) {
	    var data = timelineModel.getData();
	    var currentIndex = timelineModel.getCurrentIndex();
	    var pointerModel = data.getItemModel(currentIndex).getModel('checkpointStyle');
	    var me = this;
	    var callback = {
	      onCreate: function (pointer) {
	        pointer.draggable = true;
	        pointer.drift = bind(me._handlePointerDrag, me);
	        pointer.ondragend = bind(me._handlePointerDragend, me);
	        pointerMoveTo(pointer, currentIndex, axis, timelineModel, true);
	      },
	      onUpdate: function (pointer) {
	        pointerMoveTo(pointer, currentIndex, axis, timelineModel);
	      }
	    }; // Reuse when exists, for animation and drag.

	    this._currentPointer = giveSymbol(pointerModel, pointerModel, this._mainGroup, {}, this._currentPointer, callback);
	  },
	  _handlePlayClick: function (nextState) {
	    this._clearTimer();

	    this.api.dispatchAction({
	      type: 'timelinePlayChange',
	      playState: nextState,
	      from: this.uid
	    });
	  },
	  _handlePointerDrag: function (dx, dy, e) {
	    this._clearTimer();

	    this._pointerChangeTimeline([e.offsetX, e.offsetY]);
	  },
	  _handlePointerDragend: function (e) {
	    this._pointerChangeTimeline([e.offsetX, e.offsetY], true);
	  },
	  _pointerChangeTimeline: function (mousePos, trigger) {
	    var toCoord = this._toAxisCoord(mousePos)[0];

	    var axis = this._axis;
	    var axisExtent = numberUtil.asc(axis.getExtent().slice());
	    toCoord > axisExtent[1] && (toCoord = axisExtent[1]);
	    toCoord < axisExtent[0] && (toCoord = axisExtent[0]);
	    this._currentPointer.position[0] = toCoord;

	    this._currentPointer.dirty();

	    var targetDataIndex = this._findNearestTick(toCoord);

	    var timelineModel = this.model;

	    if (trigger || targetDataIndex !== timelineModel.getCurrentIndex() && timelineModel.get('realtime')) {
	      this._changeTimeline(targetDataIndex);
	    }
	  },
	  _doPlayStop: function () {
	    this._clearTimer();

	    if (this.model.getPlayState()) {
	      this._timer = setTimeout(bind(handleFrame, this), this.model.get('playInterval'));
	    }

	    function handleFrame() {
	      // Do not cache
	      var timelineModel = this.model;

	      this._changeTimeline(timelineModel.getCurrentIndex() + (timelineModel.get('rewind', true) ? -1 : 1));
	    }
	  },
	  _toAxisCoord: function (vertex) {
	    var trans = this._mainGroup.getLocalTransform();

	    return graphic.applyTransform(vertex, trans, true);
	  },
	  _findNearestTick: function (axisCoord) {
	    var data = this.model.getData();
	    var dist = Infinity;
	    var targetDataIndex;
	    var axis = this._axis;
	    data.each(['value'], function (value, dataIndex) {
	      var coord = axis.dataToCoord(value);
	      var d = Math.abs(coord - axisCoord);

	      if (d < dist) {
	        dist = d;
	        targetDataIndex = dataIndex;
	      }
	    });
	    return targetDataIndex;
	  },
	  _clearTimer: function () {
	    if (this._timer) {
	      clearTimeout(this._timer);
	      this._timer = null;
	    }
	  },
	  _changeTimeline: function (nextIndex) {
	    var currentIndex = this.model.getCurrentIndex();

	    if (nextIndex === '+') {
	      nextIndex = currentIndex + 1;
	    } else if (nextIndex === '-') {
	      nextIndex = currentIndex - 1;
	    }

	    this.api.dispatchAction({
	      type: 'timelineChange',
	      currentIndex: nextIndex,
	      from: this.uid
	    });
	  }
	});

	function getViewRect(model, api) {
	  return layout.getLayoutRect(model.getBoxLayoutParams(), {
	    width: api.getWidth(),
	    height: api.getHeight()
	  }, model.get('padding'));
	}

	function makeIcon(timelineModel, objPath, rect, opts) {
	  var icon = graphic.makePath(timelineModel.get(objPath).replace(/^path:\/\//, ''), zrUtil.clone(opts || {}), new BoundingRect(rect[0], rect[1], rect[2], rect[3]), 'center');
	  return icon;
	}
	/**
	 * Create symbol or update symbol
	 * opt: basic position and event handlers
	 */


	function giveSymbol(hostModel, itemStyleModel, group, opt, symbol, callback) {
	  var color = itemStyleModel.get('color');

	  if (!symbol) {
	    var symbolType = hostModel.get('symbol');
	    symbol = createSymbol(symbolType, -1, -1, 2, 2, color);
	    symbol.setStyle('strokeNoScale', true);
	    group.add(symbol);
	    callback && callback.onCreate(symbol);
	  } else {
	    symbol.setColor(color);
	    group.add(symbol); // Group may be new, also need to add.

	    callback && callback.onUpdate(symbol);
	  } // Style


	  var itemStyle = itemStyleModel.getItemStyle(['color', 'symbol', 'symbolSize']);
	  symbol.setStyle(itemStyle); // Transform and events.

	  opt = zrUtil.merge({
	    rectHover: true,
	    z2: 100
	  }, opt, true);
	  var symbolSize = hostModel.get('symbolSize');
	  symbolSize = symbolSize instanceof Array ? symbolSize.slice() : [+symbolSize, +symbolSize];
	  symbolSize[0] /= 2;
	  symbolSize[1] /= 2;
	  opt.scale = symbolSize;
	  var symbolOffset = hostModel.get('symbolOffset');

	  if (symbolOffset) {
	    var pos = opt.position = opt.position || [0, 0];
	    pos[0] += numberUtil.parsePercent(symbolOffset[0], symbolSize[0]);
	    pos[1] += numberUtil.parsePercent(symbolOffset[1], symbolSize[1]);
	  }

	  var symbolRotate = hostModel.get('symbolRotate');
	  opt.rotation = (symbolRotate || 0) * Math.PI / 180 || 0;
	  symbol.attr(opt); // FIXME
	  // (1) When symbol.style.strokeNoScale is true and updateTransform is not performed,
	  // getBoundingRect will return wrong result.
	  // (This is supposed to be resolved in zrender, but it is a little difficult to
	  // leverage performance and auto updateTransform)
	  // (2) All of ancesters of symbol do not scale, so we can just updateTransform symbol.

	  symbol.updateTransform();
	  return symbol;
	}

	function pointerMoveTo(pointer, dataIndex, axis, timelineModel, noAnimation) {
	  if (pointer.dragging) {
	    return;
	  }

	  var pointerModel = timelineModel.getModel('checkpointStyle');
	  var toCoord = axis.dataToCoord(timelineModel.getData().get(['value'], dataIndex));

	  if (noAnimation || !pointerModel.get('animation', true)) {
	    pointer.attr({
	      position: [toCoord, 0]
	    });
	  } else {
	    pointer.stopAnimation(true);
	    pointer.animateTo({
	      position: [toCoord, 0]
	    }, pointerModel.get('animationDuration', true), pointerModel.get('animationEasing', true));
	  }
	}

	module.exports = _default;

/***/ },
/* 587 */
/***/ function(module, exports, __webpack_require__) {

	var ComponentView = __webpack_require__(257);

	var _default = ComponentView.extend({
	  type: 'timeline'
	});

	module.exports = _default;

/***/ },
/* 588 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var Axis = __webpack_require__(277);

	var axisHelper = __webpack_require__(268);

	/**
	 * Extend axis 2d
	 * @constructor module:echarts/coord/cartesian/Axis2D
	 * @extends {module:echarts/coord/cartesian/Axis}
	 * @param {string} dim
	 * @param {*} scale
	 * @param {Array.<number>} coordExtent
	 * @param {string} axisType
	 * @param {string} position
	 */
	var TimelineAxis = function (dim, scale, coordExtent, axisType) {
	  Axis.call(this, dim, scale, coordExtent);
	  /**
	   * Axis type
	   *  - 'category'
	   *  - 'value'
	   *  - 'time'
	   *  - 'log'
	   * @type {string}
	   */

	  this.type = axisType || 'value';
	  /**
	   * @private
	   * @type {number}
	   */

	  this._autoLabelInterval;
	  /**
	   * Axis model
	   * @param {module:echarts/component/TimelineModel}
	   */

	  this.model = null;
	};

	TimelineAxis.prototype = {
	  constructor: TimelineAxis,

	  /**
	   * @public
	   * @return {number}
	   */
	  getLabelInterval: function () {
	    var timelineModel = this.model;
	    var labelModel = timelineModel.getModel('label.normal');
	    var labelInterval = labelModel.get('interval');

	    if (labelInterval != null && labelInterval != 'auto') {
	      return labelInterval;
	    }

	    var labelInterval = this._autoLabelInterval;

	    if (!labelInterval) {
	      labelInterval = this._autoLabelInterval = axisHelper.getAxisLabelInterval(zrUtil.map(this.scale.getTicks(), this.dataToCoord, this), axisHelper.getFormattedLabels(this, labelModel.get('formatter')), labelModel.getFont(), timelineModel.get('orient') === 'horizontal' ? 0 : 90, labelModel.get('rotate'));
	    }

	    return labelInterval;
	  },

	  /**
	   * If label is ignored.
	   * Automatically used when axis is category and label can not be all shown
	   * @public
	   * @param  {number} idx
	   * @return {boolean}
	   */
	  isLabelIgnored: function (idx) {
	    if (this.type === 'category') {
	      var labelInterval = this.getLabelInterval();
	      return typeof labelInterval === 'function' && !labelInterval(idx, this.scale.getLabel(idx)) || idx % (labelInterval + 1);
	    }
	  }
	};
	zrUtil.inherits(TimelineAxis, Axis);
	var _default = TimelineAxis;
	module.exports = _default;

/***/ },
/* 589 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(590);

	__webpack_require__(591);

	__webpack_require__(592);

	__webpack_require__(593);

	__webpack_require__(594);

	__webpack_require__(595);

	__webpack_require__(600);

/***/ },
/* 590 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var zrUtil = __webpack_require__(166);

	var featureManager = __webpack_require__(533);

	var ToolboxModel = echarts.extendComponentModel({
	  type: 'toolbox',
	  layoutMode: {
	    type: 'box',
	    ignoreSize: true
	  },
	  mergeDefaultAndTheme: function (option) {
	    ToolboxModel.superApply(this, 'mergeDefaultAndTheme', arguments);
	    zrUtil.each(this.option.feature, function (featureOpt, featureName) {
	      var Feature = featureManager.get(featureName);
	      Feature && zrUtil.merge(featureOpt, Feature.defaultOption);
	    });
	  },
	  defaultOption: {
	    show: true,
	    z: 6,
	    zlevel: 0,
	    orient: 'horizontal',
	    left: 'right',
	    top: 'top',
	    // right
	    // bottom
	    backgroundColor: 'transparent',
	    borderColor: '#ccc',
	    borderRadius: 0,
	    borderWidth: 0,
	    padding: 5,
	    itemSize: 15,
	    itemGap: 8,
	    showTitle: true,
	    iconStyle: {
	      normal: {
	        borderColor: '#666',
	        color: 'none'
	      },
	      emphasis: {
	        borderColor: '#3E98C5'
	      } // textStyle: {},
	      // feature

	    }
	  }
	});
	var _default = ToolboxModel;
	module.exports = _default;

/***/ },
/* 591 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var zrUtil = __webpack_require__(166);

	var textContain = __webpack_require__(195);

	var featureManager = __webpack_require__(533);

	var graphic = __webpack_require__(212);

	var Model = __webpack_require__(206);

	var DataDiffer = __webpack_require__(266);

	var listComponentHelper = __webpack_require__(498);

	var _default = echarts.extendComponentView({
	  type: 'toolbox',
	  render: function (toolboxModel, ecModel, api, payload) {
	    var group = this.group;
	    group.removeAll();

	    if (!toolboxModel.get('show')) {
	      return;
	    }

	    var itemSize = +toolboxModel.get('itemSize');
	    var featureOpts = toolboxModel.get('feature') || {};
	    var features = this._features || (this._features = {});
	    var featureNames = [];
	    zrUtil.each(featureOpts, function (opt, name) {
	      featureNames.push(name);
	    });
	    new DataDiffer(this._featureNames || [], featureNames).add(processFeature).update(processFeature).remove(zrUtil.curry(processFeature, null)).execute(); // Keep for diff.

	    this._featureNames = featureNames;

	    function processFeature(newIndex, oldIndex) {
	      var featureName = featureNames[newIndex];
	      var oldName = featureNames[oldIndex];
	      var featureOpt = featureOpts[featureName];
	      var featureModel = new Model(featureOpt, toolboxModel, toolboxModel.ecModel);
	      var feature;

	      if (featureName && !oldName) {
	        // Create
	        if (isUserFeatureName(featureName)) {
	          feature = {
	            model: featureModel,
	            onclick: featureModel.option.onclick,
	            featureName: featureName
	          };
	        } else {
	          var Feature = featureManager.get(featureName);

	          if (!Feature) {
	            return;
	          }

	          feature = new Feature(featureModel, ecModel, api);
	        }

	        features[featureName] = feature;
	      } else {
	        feature = features[oldName]; // If feature does not exsit.

	        if (!feature) {
	          return;
	        }

	        feature.model = featureModel;
	        feature.ecModel = ecModel;
	        feature.api = api;
	      }

	      if (!featureName && oldName) {
	        feature.dispose && feature.dispose(ecModel, api);
	        return;
	      }

	      if (!featureModel.get('show') || feature.unusable) {
	        feature.remove && feature.remove(ecModel, api);
	        return;
	      }

	      createIconPaths(featureModel, feature, featureName);

	      featureModel.setIconStatus = function (iconName, status) {
	        var option = this.option;
	        var iconPaths = this.iconPaths;
	        option.iconStatus = option.iconStatus || {};
	        option.iconStatus[iconName] = status; // FIXME

	        iconPaths[iconName] && iconPaths[iconName].trigger(status);
	      };

	      if (feature.render) {
	        feature.render(featureModel, ecModel, api, payload);
	      }
	    }

	    function createIconPaths(featureModel, feature, featureName) {
	      var iconStyleModel = featureModel.getModel('iconStyle'); // If one feature has mutiple icon. they are orginaized as
	      // {
	      //     icon: {
	      //         foo: '',
	      //         bar: ''
	      //     },
	      //     title: {
	      //         foo: '',
	      //         bar: ''
	      //     }
	      // }

	      var icons = feature.getIcons ? feature.getIcons() : featureModel.get('icon');
	      var titles = featureModel.get('title') || {};

	      if (typeof icons === 'string') {
	        var icon = icons;
	        var title = titles;
	        icons = {};
	        titles = {};
	        icons[featureName] = icon;
	        titles[featureName] = title;
	      }

	      var iconPaths = featureModel.iconPaths = {};
	      zrUtil.each(icons, function (iconStr, iconName) {
	        var path = graphic.createIcon(iconStr, {}, {
	          x: -itemSize / 2,
	          y: -itemSize / 2,
	          width: itemSize,
	          height: itemSize
	        });
	        path.setStyle(iconStyleModel.getModel('normal').getItemStyle());
	        path.hoverStyle = iconStyleModel.getModel('emphasis').getItemStyle();
	        graphic.setHoverStyle(path);

	        if (toolboxModel.get('showTitle')) {
	          path.__title = titles[iconName];
	          path.on('mouseover', function () {
	            // Should not reuse above hoverStyle, which might be modified.
	            var hoverStyle = iconStyleModel.getModel('emphasis').getItemStyle();
	            path.setStyle({
	              text: titles[iconName],
	              textPosition: hoverStyle.textPosition || 'bottom',
	              textFill: hoverStyle.fill || hoverStyle.stroke || '#000',
	              textAlign: hoverStyle.textAlign || 'center'
	            });
	          }).on('mouseout', function () {
	            path.setStyle({
	              textFill: null
	            });
	          });
	        }

	        path.trigger(featureModel.get('iconStatus.' + iconName) || 'normal');
	        group.add(path);
	        path.on('click', zrUtil.bind(feature.onclick, feature, ecModel, api, iconName));
	        iconPaths[iconName] = path;
	      });
	    }

	    listComponentHelper.layout(group, toolboxModel, api); // Render background after group is layout
	    // FIXME

	    group.add(listComponentHelper.makeBackground(group.getBoundingRect(), toolboxModel)); // Adjust icon title positions to avoid them out of screen

	    group.eachChild(function (icon) {
	      var titleText = icon.__title;
	      var hoverStyle = icon.hoverStyle; // May be background element

	      if (hoverStyle && titleText) {
	        var rect = textContain.getBoundingRect(titleText, textContain.makeFont(hoverStyle));
	        var offsetX = icon.position[0] + group.position[0];
	        var offsetY = icon.position[1] + group.position[1] + itemSize;
	        var needPutOnTop = false;

	        if (offsetY + rect.height > api.getHeight()) {
	          hoverStyle.textPosition = 'top';
	          needPutOnTop = true;
	        }

	        var topOffset = needPutOnTop ? -5 - rect.height : itemSize + 8;

	        if (offsetX + rect.width / 2 > api.getWidth()) {
	          hoverStyle.textPosition = ['100%', topOffset];
	          hoverStyle.textAlign = 'right';
	        } else if (offsetX - rect.width / 2 < 0) {
	          hoverStyle.textPosition = [0, topOffset];
	          hoverStyle.textAlign = 'left';
	        }
	      }
	    });
	  },
	  updateView: function (toolboxModel, ecModel, api, payload) {
	    zrUtil.each(this._features, function (feature) {
	      feature.updateView && feature.updateView(feature.model, ecModel, api, payload);
	    });
	  },
	  updateLayout: function (toolboxModel, ecModel, api, payload) {
	    zrUtil.each(this._features, function (feature) {
	      feature.updateLayout && feature.updateLayout(feature.model, ecModel, api, payload);
	    });
	  },
	  remove: function (ecModel, api) {
	    zrUtil.each(this._features, function (feature) {
	      feature.remove && feature.remove(ecModel, api);
	    });
	    this.group.removeAll();
	  },
	  dispose: function (ecModel, api) {
	    zrUtil.each(this._features, function (feature) {
	      feature.dispose && feature.dispose(ecModel, api);
	    });
	  }
	});

	function isUserFeatureName(featureName) {
	  return featureName.indexOf('my') === 0;
	}

	module.exports = _default;

/***/ },
/* 592 */
/***/ function(module, exports, __webpack_require__) {

	var env = __webpack_require__(165);

	var lang = __webpack_require__(534);

	var featureManager = __webpack_require__(533);

	var saveAsImageLang = lang.toolbox.saveAsImage;

	function SaveAsImage(model) {
	  this.model = model;
	}

	SaveAsImage.defaultOption = {
	  show: true,
	  icon: 'M4.7,22.9L29.3,45.5L54.7,23.4M4.6,43.6L4.6,58L53.8,58L53.8,43.6M29.2,45.1L29.2,0',
	  title: saveAsImageLang.title,
	  type: 'png',
	  // Default use option.backgroundColor
	  // backgroundColor: '#fff',
	  name: '',
	  excludeComponents: ['toolbox'],
	  pixelRatio: 1,
	  lang: saveAsImageLang.lang.slice()
	};
	SaveAsImage.prototype.unusable = !env.canvasSupported;
	var proto = SaveAsImage.prototype;

	proto.onclick = function (ecModel, api) {
	  var model = this.model;
	  var title = model.get('name') || ecModel.get('title.0.text') || 'echarts';
	  var $a = document.createElement('a');
	  var type = model.get('type', true) || 'png';
	  $a.download = title + '.' + type;
	  $a.target = '_blank';
	  var url = api.getConnectedDataURL({
	    type: type,
	    backgroundColor: model.get('backgroundColor', true) || ecModel.get('backgroundColor') || '#fff',
	    excludeComponents: model.get('excludeComponents'),
	    pixelRatio: model.get('pixelRatio')
	  });
	  $a.href = url; // Chrome and Firefox

	  if (typeof MouseEvent === 'function' && !env.browser.ie && !env.browser.edge) {
	    var evt = new MouseEvent('click', {
	      view: window,
	      bubbles: true,
	      cancelable: false
	    });
	    $a.dispatchEvent(evt);
	  } // IE
	  else {
	      if (window.navigator.msSaveOrOpenBlob) {
	        var bstr = atob(url.split(',')[1]);
	        var n = bstr.length;
	        var u8arr = new Uint8Array(n);

	        while (n--) {
	          u8arr[n] = bstr.charCodeAt(n);
	        }

	        var blob = new Blob([u8arr]);
	        window.navigator.msSaveOrOpenBlob(blob, title + '.' + type);
	      } else {
	        var lang = model.get('lang');
	        var html = '' + '<body style="margin:0;">' + '<img src="' + url + '" style="max-width:100%;" title="' + (lang && lang[0] || '') + '" />' + '</body>';
	        var tab = window.open();
	        tab.document.write(html);
	      }
	    }
	};

	featureManager.register('saveAsImage', SaveAsImage);
	var _default = SaveAsImage;
	module.exports = _default;

/***/ },
/* 593 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var zrUtil = __webpack_require__(166);

	var lang = __webpack_require__(534);

	var featureManager = __webpack_require__(533);

	var magicTypeLang = lang.toolbox.magicType;

	function MagicType(model) {
	  this.model = model;
	}

	MagicType.defaultOption = {
	  show: true,
	  type: [],
	  // Icon group
	  icon: {
	    line: 'M4.1,28.9h7.1l9.3-22l7.4,38l9.7-19.7l3,12.8h14.9M4.1,58h51.4',
	    bar: 'M6.7,22.9h10V48h-10V22.9zM24.9,13h10v35h-10V13zM43.2,2h10v46h-10V2zM3.1,58h53.7',
	    stack: 'M8.2,38.4l-8.4,4.1l30.6,15.3L60,42.5l-8.1-4.1l-21.5,11L8.2,38.4z M51.9,30l-8.1,4.2l-13.4,6.9l-13.9-6.9L8.2,30l-8.4,4.2l8.4,4.2l22.2,11l21.5-11l8.1-4.2L51.9,30z M51.9,21.7l-8.1,4.2L35.7,30l-5.3,2.8L24.9,30l-8.4-4.1l-8.3-4.2l-8.4,4.2L8.2,30l8.3,4.2l13.9,6.9l13.4-6.9l8.1-4.2l8.1-4.1L51.9,21.7zM30.4,2.2L-0.2,17.5l8.4,4.1l8.3,4.2l8.4,4.2l5.5,2.7l5.3-2.7l8.1-4.2l8.1-4.2l8.1-4.1L30.4,2.2z',
	    // jshint ignore:line
	    tiled: 'M2.3,2.2h22.8V25H2.3V2.2z M35,2.2h22.8V25H35V2.2zM2.3,35h22.8v22.8H2.3V35z M35,35h22.8v22.8H35V35z'
	  },
	  // `line`, `bar`, `stack`, `tiled`
	  title: zrUtil.clone(magicTypeLang.title),
	  option: {},
	  seriesIndex: {}
	};
	var proto = MagicType.prototype;

	proto.getIcons = function () {
	  var model = this.model;
	  var availableIcons = model.get('icon');
	  var icons = {};
	  zrUtil.each(model.get('type'), function (type) {
	    if (availableIcons[type]) {
	      icons[type] = availableIcons[type];
	    }
	  });
	  return icons;
	};

	var seriesOptGenreator = {
	  'line': function (seriesType, seriesId, seriesModel, model) {
	    if (seriesType === 'bar') {
	      return zrUtil.merge({
	        id: seriesId,
	        type: 'line',
	        // Preserve data related option
	        data: seriesModel.get('data'),
	        stack: seriesModel.get('stack'),
	        markPoint: seriesModel.get('markPoint'),
	        markLine: seriesModel.get('markLine')
	      }, model.get('option.line') || {}, true);
	    }
	  },
	  'bar': function (seriesType, seriesId, seriesModel, model) {
	    if (seriesType === 'line') {
	      return zrUtil.merge({
	        id: seriesId,
	        type: 'bar',
	        // Preserve data related option
	        data: seriesModel.get('data'),
	        stack: seriesModel.get('stack'),
	        markPoint: seriesModel.get('markPoint'),
	        markLine: seriesModel.get('markLine')
	      }, model.get('option.bar') || {}, true);
	    }
	  },
	  'stack': function (seriesType, seriesId, seriesModel, model) {
	    if (seriesType === 'line' || seriesType === 'bar') {
	      return zrUtil.merge({
	        id: seriesId,
	        stack: '__ec_magicType_stack__'
	      }, model.get('option.stack') || {}, true);
	    }
	  },
	  'tiled': function (seriesType, seriesId, seriesModel, model) {
	    if (seriesType === 'line' || seriesType === 'bar') {
	      return zrUtil.merge({
	        id: seriesId,
	        stack: ''
	      }, model.get('option.tiled') || {}, true);
	    }
	  }
	};
	var radioTypes = [['line', 'bar'], ['stack', 'tiled']];

	proto.onclick = function (ecModel, api, type) {
	  var model = this.model;
	  var seriesIndex = model.get('seriesIndex.' + type); // Not supported magicType

	  if (!seriesOptGenreator[type]) {
	    return;
	  }

	  var newOption = {
	    series: []
	  };

	  var generateNewSeriesTypes = function (seriesModel) {
	    var seriesType = seriesModel.subType;
	    var seriesId = seriesModel.id;
	    var newSeriesOpt = seriesOptGenreator[type](seriesType, seriesId, seriesModel, model);

	    if (newSeriesOpt) {
	      // PENDING If merge original option?
	      zrUtil.defaults(newSeriesOpt, seriesModel.option);
	      newOption.series.push(newSeriesOpt);
	    } // Modify boundaryGap


	    var coordSys = seriesModel.coordinateSystem;

	    if (coordSys && coordSys.type === 'cartesian2d' && (type === 'line' || type === 'bar')) {
	      var categoryAxis = coordSys.getAxesByScale('ordinal')[0];

	      if (categoryAxis) {
	        var axisDim = categoryAxis.dim;
	        var axisType = axisDim + 'Axis';
	        var axisModel = ecModel.queryComponents({
	          mainType: axisType,
	          index: seriesModel.get(name + 'Index'),
	          id: seriesModel.get(name + 'Id')
	        })[0];
	        var axisIndex = axisModel.componentIndex;
	        newOption[axisType] = newOption[axisType] || [];

	        for (var i = 0; i <= axisIndex; i++) {
	          newOption[axisType][axisIndex] = newOption[axisType][axisIndex] || {};
	        }

	        newOption[axisType][axisIndex].boundaryGap = type === 'bar' ? true : false;
	      }
	    }
	  };

	  zrUtil.each(radioTypes, function (radio) {
	    if (zrUtil.indexOf(radio, type) >= 0) {
	      zrUtil.each(radio, function (item) {
	        model.setIconStatus(item, 'normal');
	      });
	    }
	  });
	  model.setIconStatus(type, 'emphasis');
	  ecModel.eachComponent({
	    mainType: 'series',
	    query: seriesIndex == null ? null : {
	      seriesIndex: seriesIndex
	    }
	  }, generateNewSeriesTypes);
	  api.dispatchAction({
	    type: 'changeMagicType',
	    currentType: type,
	    newOption: newOption
	  });
	};

	echarts.registerAction({
	  type: 'changeMagicType',
	  event: 'magicTypeChanged',
	  update: 'prepareAndUpdate'
	}, function (payload, ecModel) {
	  ecModel.mergeOption(payload.newOption);
	});
	featureManager.register('magicType', MagicType);
	var _default = MagicType;
	module.exports = _default;

/***/ },
/* 594 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var zrUtil = __webpack_require__(166);

	var eventTool = __webpack_require__(199);

	var lang = __webpack_require__(534);

	var featureManager = __webpack_require__(533);

	var dataViewLang = lang.toolbox.dataView;
	var BLOCK_SPLITER = new Array(60).join('-');
	var ITEM_SPLITER = '\t';
	/**
	 * Group series into two types
	 *  1. on category axis, like line, bar
	 *  2. others, like scatter, pie
	 * @param {module:echarts/model/Global} ecModel
	 * @return {Object}
	 * @inner
	 */

	function groupSeries(ecModel) {
	  var seriesGroupByCategoryAxis = {};
	  var otherSeries = [];
	  var meta = [];
	  ecModel.eachRawSeries(function (seriesModel) {
	    var coordSys = seriesModel.coordinateSystem;

	    if (coordSys && (coordSys.type === 'cartesian2d' || coordSys.type === 'polar')) {
	      var baseAxis = coordSys.getBaseAxis();

	      if (baseAxis.type === 'category') {
	        var key = baseAxis.dim + '_' + baseAxis.index;

	        if (!seriesGroupByCategoryAxis[key]) {
	          seriesGroupByCategoryAxis[key] = {
	            categoryAxis: baseAxis,
	            valueAxis: coordSys.getOtherAxis(baseAxis),
	            series: []
	          };
	          meta.push({
	            axisDim: baseAxis.dim,
	            axisIndex: baseAxis.index
	          });
	        }

	        seriesGroupByCategoryAxis[key].series.push(seriesModel);
	      } else {
	        otherSeries.push(seriesModel);
	      }
	    } else {
	      otherSeries.push(seriesModel);
	    }
	  });
	  return {
	    seriesGroupByCategoryAxis: seriesGroupByCategoryAxis,
	    other: otherSeries,
	    meta: meta
	  };
	}
	/**
	 * Assemble content of series on cateogory axis
	 * @param {Array.<module:echarts/model/Series>} series
	 * @return {string}
	 * @inner
	 */


	function assembleSeriesWithCategoryAxis(series) {
	  var tables = [];
	  zrUtil.each(series, function (group, key) {
	    var categoryAxis = group.categoryAxis;
	    var valueAxis = group.valueAxis;
	    var valueAxisDim = valueAxis.dim;
	    var headers = [' '].concat(zrUtil.map(group.series, function (series) {
	      return series.name;
	    }));
	    var columns = [categoryAxis.model.getCategories()];
	    zrUtil.each(group.series, function (series) {
	      columns.push(series.getRawData().mapArray(valueAxisDim, function (val) {
	        return val;
	      }));
	    }); // Assemble table content

	    var lines = [headers.join(ITEM_SPLITER)];

	    for (var i = 0; i < columns[0].length; i++) {
	      var items = [];

	      for (var j = 0; j < columns.length; j++) {
	        items.push(columns[j][i]);
	      }

	      lines.push(items.join(ITEM_SPLITER));
	    }

	    tables.push(lines.join('\n'));
	  });
	  return tables.join('\n\n' + BLOCK_SPLITER + '\n\n');
	}
	/**
	 * Assemble content of other series
	 * @param {Array.<module:echarts/model/Series>} series
	 * @return {string}
	 * @inner
	 */


	function assembleOtherSeries(series) {
	  return zrUtil.map(series, function (series) {
	    var data = series.getRawData();
	    var lines = [series.name];
	    var vals = [];
	    data.each(data.dimensions, function () {
	      var argLen = arguments.length;
	      var dataIndex = arguments[argLen - 1];
	      var name = data.getName(dataIndex);

	      for (var i = 0; i < argLen - 1; i++) {
	        vals[i] = arguments[i];
	      }

	      lines.push((name ? name + ITEM_SPLITER : '') + vals.join(ITEM_SPLITER));
	    });
	    return lines.join('\n');
	  }).join('\n\n' + BLOCK_SPLITER + '\n\n');
	}
	/**
	 * @param {module:echarts/model/Global}
	 * @return {Object}
	 * @inner
	 */


	function getContentFromModel(ecModel) {
	  var result = groupSeries(ecModel);
	  return {
	    value: zrUtil.filter([assembleSeriesWithCategoryAxis(result.seriesGroupByCategoryAxis), assembleOtherSeries(result.other)], function (str) {
	      return str.replace(/[\n\t\s]/g, '');
	    }).join('\n\n' + BLOCK_SPLITER + '\n\n'),
	    meta: result.meta
	  };
	}

	function trim(str) {
	  return str.replace(/^\s\s*/, '').replace(/\s\s*$/, '');
	}
	/**
	 * If a block is tsv format
	 */


	function isTSVFormat(block) {
	  // Simple method to find out if a block is tsv format
	  var firstLine = block.slice(0, block.indexOf('\n'));

	  if (firstLine.indexOf(ITEM_SPLITER) >= 0) {
	    return true;
	  }
	}

	var itemSplitRegex = new RegExp('[' + ITEM_SPLITER + ']+', 'g');
	/**
	 * @param {string} tsv
	 * @return {Object}
	 */

	function parseTSVContents(tsv) {
	  var tsvLines = tsv.split(/\n+/g);
	  var headers = trim(tsvLines.shift()).split(itemSplitRegex);
	  var categories = [];
	  var series = zrUtil.map(headers, function (header) {
	    return {
	      name: header,
	      data: []
	    };
	  });

	  for (var i = 0; i < tsvLines.length; i++) {
	    var items = trim(tsvLines[i]).split(itemSplitRegex);
	    categories.push(items.shift());

	    for (var j = 0; j < items.length; j++) {
	      series[j] && (series[j].data[i] = items[j]);
	    }
	  }

	  return {
	    series: series,
	    categories: categories
	  };
	}
	/**
	 * @param {string} str
	 * @return {Array.<Object>}
	 * @inner
	 */


	function parseListContents(str) {
	  var lines = str.split(/\n+/g);
	  var seriesName = trim(lines.shift());
	  var data = [];

	  for (var i = 0; i < lines.length; i++) {
	    var items = trim(lines[i]).split(itemSplitRegex);
	    var name = '';
	    var value;
	    var hasName = false;

	    if (isNaN(items[0])) {
	      // First item is name
	      hasName = true;
	      name = items[0];
	      items = items.slice(1);
	      data[i] = {
	        name: name,
	        value: []
	      };
	      value = data[i].value;
	    } else {
	      value = data[i] = [];
	    }

	    for (var j = 0; j < items.length; j++) {
	      value.push(+items[j]);
	    }

	    if (value.length === 1) {
	      hasName ? data[i].value = value[0] : data[i] = value[0];
	    }
	  }

	  return {
	    name: seriesName,
	    data: data
	  };
	}
	/**
	 * @param {string} str
	 * @param {Array.<Object>} blockMetaList
	 * @return {Object}
	 * @inner
	 */


	function parseContents(str, blockMetaList) {
	  var blocks = str.split(new RegExp('\n*' + BLOCK_SPLITER + '\n*', 'g'));
	  var newOption = {
	    series: []
	  };
	  zrUtil.each(blocks, function (block, idx) {
	    if (isTSVFormat(block)) {
	      var result = parseTSVContents(block);
	      var blockMeta = blockMetaList[idx];
	      var axisKey = blockMeta.axisDim + 'Axis';

	      if (blockMeta) {
	        newOption[axisKey] = newOption[axisKey] || [];
	        newOption[axisKey][blockMeta.axisIndex] = {
	          data: result.categories
	        };
	        newOption.series = newOption.series.concat(result.series);
	      }
	    } else {
	      var result = parseListContents(block);
	      newOption.series.push(result);
	    }
	  });
	  return newOption;
	}
	/**
	 * @alias {module:echarts/component/toolbox/feature/DataView}
	 * @constructor
	 * @param {module:echarts/model/Model} model
	 */


	function DataView(model) {
	  this._dom = null;
	  this.model = model;
	}

	DataView.defaultOption = {
	  show: true,
	  readOnly: false,
	  optionToContent: null,
	  contentToOption: null,
	  icon: 'M17.5,17.3H33 M17.5,17.3H33 M45.4,29.5h-28 M11.5,2v56H51V14.8L38.4,2H11.5z M38.4,2.2v12.7H51 M45.4,41.7h-28',
	  title: zrUtil.clone(dataViewLang.title),
	  lang: zrUtil.clone(dataViewLang.lang),
	  backgroundColor: '#fff',
	  textColor: '#000',
	  textareaColor: '#fff',
	  textareaBorderColor: '#333',
	  buttonColor: '#c23531',
	  buttonTextColor: '#fff'
	};

	DataView.prototype.onclick = function (ecModel, api) {
	  var container = api.getDom();
	  var model = this.model;

	  if (this._dom) {
	    container.removeChild(this._dom);
	  }

	  var root = document.createElement('div');
	  root.style.cssText = 'position:absolute;left:5px;top:5px;bottom:5px;right:5px;';
	  root.style.backgroundColor = model.get('backgroundColor') || '#fff'; // Create elements

	  var header = document.createElement('h4');
	  var lang = model.get('lang') || [];
	  header.innerHTML = lang[0] || model.get('title');
	  header.style.cssText = 'margin: 10px 20px;';
	  header.style.color = model.get('textColor');
	  var viewMain = document.createElement('div');
	  var textarea = document.createElement('textarea');
	  viewMain.style.cssText = 'display:block;width:100%;overflow:auto;';
	  var optionToContent = model.get('optionToContent');
	  var contentToOption = model.get('contentToOption');
	  var result = getContentFromModel(ecModel);

	  if (typeof optionToContent === 'function') {
	    var htmlOrDom = optionToContent(api.getOption());

	    if (typeof htmlOrDom === 'string') {
	      viewMain.innerHTML = htmlOrDom;
	    } else if (zrUtil.isDom(htmlOrDom)) {
	      viewMain.appendChild(htmlOrDom);
	    }
	  } else {
	    // Use default textarea
	    viewMain.appendChild(textarea);
	    textarea.readOnly = model.get('readOnly');
	    textarea.style.cssText = 'width:100%;height:100%;font-family:monospace;font-size:14px;line-height:1.6rem;';
	    textarea.style.color = model.get('textColor');
	    textarea.style.borderColor = model.get('textareaBorderColor');
	    textarea.style.backgroundColor = model.get('textareaColor');
	    textarea.value = result.value;
	  }

	  var blockMetaList = result.meta;
	  var buttonContainer = document.createElement('div');
	  buttonContainer.style.cssText = 'position:absolute;bottom:0;left:0;right:0;';
	  var buttonStyle = 'float:right;margin-right:20px;border:none;' + 'cursor:pointer;padding:2px 5px;font-size:12px;border-radius:3px';
	  var closeButton = document.createElement('div');
	  var refreshButton = document.createElement('div');
	  buttonStyle += ';background-color:' + model.get('buttonColor');
	  buttonStyle += ';color:' + model.get('buttonTextColor');
	  var self = this;

	  function close() {
	    container.removeChild(root);
	    self._dom = null;
	  }

	  eventTool.addEventListener(closeButton, 'click', close);
	  eventTool.addEventListener(refreshButton, 'click', function () {
	    var newOption;

	    try {
	      if (typeof contentToOption === 'function') {
	        newOption = contentToOption(viewMain, api.getOption());
	      } else {
	        newOption = parseContents(textarea.value, blockMetaList);
	      }
	    } catch (e) {
	      close();
	      throw new Error('Data view format error ' + e);
	    }

	    if (newOption) {
	      api.dispatchAction({
	        type: 'changeDataView',
	        newOption: newOption
	      });
	    }

	    close();
	  });
	  closeButton.innerHTML = lang[1];
	  refreshButton.innerHTML = lang[2];
	  refreshButton.style.cssText = buttonStyle;
	  closeButton.style.cssText = buttonStyle;
	  !model.get('readOnly') && buttonContainer.appendChild(refreshButton);
	  buttonContainer.appendChild(closeButton); // http://stackoverflow.com/questions/6637341/use-tab-to-indent-in-textarea

	  eventTool.addEventListener(textarea, 'keydown', function (e) {
	    if ((e.keyCode || e.which) === 9) {
	      // get caret position/selection
	      var val = this.value;
	      var start = this.selectionStart;
	      var end = this.selectionEnd; // set textarea value to: text before caret + tab + text after caret

	      this.value = val.substring(0, start) + ITEM_SPLITER + val.substring(end); // put caret at right position again

	      this.selectionStart = this.selectionEnd = start + 1; // prevent the focus lose

	      eventTool.stop(e);
	    }
	  });
	  root.appendChild(header);
	  root.appendChild(viewMain);
	  root.appendChild(buttonContainer);
	  viewMain.style.height = container.clientHeight - 80 + 'px';
	  container.appendChild(root);
	  this._dom = root;
	};

	DataView.prototype.remove = function (ecModel, api) {
	  this._dom && api.getDom().removeChild(this._dom);
	};

	DataView.prototype.dispose = function (ecModel, api) {
	  this.remove(ecModel, api);
	};
	/**
	 * @inner
	 */


	function tryMergeDataOption(newData, originalData) {
	  return zrUtil.map(newData, function (newVal, idx) {
	    var original = originalData && originalData[idx];

	    if (zrUtil.isObject(original) && !zrUtil.isArray(original)) {
	      if (zrUtil.isObject(newVal) && !zrUtil.isArray(newVal)) {
	        newVal = newVal.value;
	      } // Original data has option


	      return zrUtil.defaults({
	        value: newVal
	      }, original);
	    } else {
	      return newVal;
	    }
	  });
	}

	featureManager.register('dataView', DataView);
	echarts.registerAction({
	  type: 'changeDataView',
	  event: 'dataViewChanged',
	  update: 'prepareAndUpdate'
	}, function (payload, ecModel) {
	  var newSeriesOptList = [];
	  zrUtil.each(payload.newOption.series, function (seriesOpt) {
	    var seriesModel = ecModel.getSeriesByName(seriesOpt.name)[0];

	    if (!seriesModel) {
	      // New created series
	      // Geuss the series type
	      newSeriesOptList.push(zrUtil.extend({
	        // Default is scatter
	        type: 'scatter'
	      }, seriesOpt));
	    } else {
	      var originalData = seriesModel.get('data');
	      newSeriesOptList.push({
	        name: seriesOpt.name,
	        data: tryMergeDataOption(seriesOpt.data, originalData)
	      });
	    }
	  });
	  ecModel.mergeOption(zrUtil.defaults({
	    series: newSeriesOptList
	  }, payload.newOption));
	});
	var _default = DataView;
	module.exports = _default;

/***/ },
/* 595 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var zrUtil = __webpack_require__(166);

	var BrushController = __webpack_require__(419);

	var BrushTargetManager = __webpack_require__(528);

	var history = __webpack_require__(596);

	var sliderMove = __webpack_require__(413);

	var lang = __webpack_require__(534);

	var featureManager = __webpack_require__(533);

	__webpack_require__(597);

	// Use dataZoomSelect
	var dataZoomLang = lang.toolbox.dataZoom;
	var each = zrUtil.each; // Spectial component id start with \0ec\0, see echarts/model/Global.js~hasInnerId

	var DATA_ZOOM_ID_BASE = '\0_ec_\0toolbox-dataZoom_';

	function DataZoom(model, ecModel, api) {
	  /**
	   * @private
	   * @type {module:echarts/component/helper/BrushController}
	   */
	  (this._brushController = new BrushController(api.getZr())).on('brush', zrUtil.bind(this._onBrush, this)).mount();
	  /**
	   * @private
	   * @type {boolean}
	   */

	  this._isZoomActive;
	}

	DataZoom.defaultOption = {
	  show: true,
	  // Icon group
	  icon: {
	    zoom: 'M0,13.5h26.9 M13.5,26.9V0 M32.1,13.5H58V58H13.5 V32.1',
	    back: 'M22,1.4L9.9,13.5l12.3,12.3 M10.3,13.5H54.9v44.6 H10.3v-26'
	  },
	  // `zoom`, `back`
	  title: zrUtil.clone(dataZoomLang.title)
	};
	var proto = DataZoom.prototype;

	proto.render = function (featureModel, ecModel, api, payload) {
	  this.model = featureModel;
	  this.ecModel = ecModel;
	  this.api = api;
	  updateZoomBtnStatus(featureModel, ecModel, this, payload, api);
	  updateBackBtnStatus(featureModel, ecModel);
	};

	proto.onclick = function (ecModel, api, type) {
	  handlers[type].call(this);
	};

	proto.remove = function (ecModel, api) {
	  this._brushController.unmount();
	};

	proto.dispose = function (ecModel, api) {
	  this._brushController.dispose();
	};
	/**
	 * @private
	 */


	var handlers = {
	  zoom: function () {
	    var nextActive = !this._isZoomActive;
	    this.api.dispatchAction({
	      type: 'takeGlobalCursor',
	      key: 'dataZoomSelect',
	      dataZoomSelectActive: nextActive
	    });
	  },
	  back: function () {
	    this._dispatchZoomAction(history.pop(this.ecModel));
	  }
	};
	/**
	 * @private
	 */

	proto._onBrush = function (areas, opt) {
	  if (!opt.isEnd || !areas.length) {
	    return;
	  }

	  var snapshot = {};
	  var ecModel = this.ecModel;

	  this._brushController.updateCovers([]); // remove cover


	  var brushTargetManager = new BrushTargetManager(retrieveAxisSetting(this.model.option), ecModel, {
	    include: ['grid']
	  });
	  brushTargetManager.matchOutputRanges(areas, ecModel, function (area, coordRange, coordSys) {
	    if (coordSys.type !== 'cartesian2d') {
	      return;
	    }

	    var brushType = area.brushType;

	    if (brushType === 'rect') {
	      setBatch('x', coordSys, coordRange[0]);
	      setBatch('y', coordSys, coordRange[1]);
	    } else {
	      setBatch({
	        lineX: 'x',
	        lineY: 'y'
	      }[brushType], coordSys, coordRange);
	    }
	  });
	  history.push(ecModel, snapshot);

	  this._dispatchZoomAction(snapshot);

	  function setBatch(dimName, coordSys, minMax) {
	    var axis = coordSys.getAxis(dimName);
	    var axisModel = axis.model;
	    var dataZoomModel = findDataZoom(dimName, axisModel, ecModel); // Restrict range.

	    var minMaxSpan = dataZoomModel.findRepresentativeAxisProxy(axisModel).getMinMaxSpan();

	    if (minMaxSpan.minValueSpan != null || minMaxSpan.maxValueSpan != null) {
	      minMax = sliderMove(0, minMax.slice(), axis.scale.getExtent(), 0, minMaxSpan.minValueSpan, minMaxSpan.maxValueSpan);
	    }

	    dataZoomModel && (snapshot[dataZoomModel.id] = {
	      dataZoomId: dataZoomModel.id,
	      startValue: minMax[0],
	      endValue: minMax[1]
	    });
	  }

	  function findDataZoom(dimName, axisModel, ecModel) {
	    var found;
	    ecModel.eachComponent({
	      mainType: 'dataZoom',
	      subType: 'select'
	    }, function (dzModel) {
	      var has = dzModel.getAxisModel(dimName, axisModel.componentIndex);
	      has && (found = dzModel);
	    });
	    return found;
	  }
	};
	/**
	 * @private
	 */


	proto._dispatchZoomAction = function (snapshot) {
	  var batch = []; // Convert from hash map to array.

	  each(snapshot, function (batchItem, dataZoomId) {
	    batch.push(zrUtil.clone(batchItem));
	  });
	  batch.length && this.api.dispatchAction({
	    type: 'dataZoom',
	    from: this.uid,
	    batch: batch
	  });
	};

	function retrieveAxisSetting(option) {
	  var setting = {}; // Compatible with previous setting: null => all axis, false => no axis.

	  zrUtil.each(['xAxisIndex', 'yAxisIndex'], function (name) {
	    setting[name] = option[name];
	    setting[name] == null && (setting[name] = 'all');
	    (setting[name] === false || setting[name] === 'none') && (setting[name] = []);
	  });
	  return setting;
	}

	function updateBackBtnStatus(featureModel, ecModel) {
	  featureModel.setIconStatus('back', history.count(ecModel) > 1 ? 'emphasis' : 'normal');
	}

	function updateZoomBtnStatus(featureModel, ecModel, view, payload, api) {
	  var zoomActive = view._isZoomActive;

	  if (payload && payload.type === 'takeGlobalCursor') {
	    zoomActive = payload.key === 'dataZoomSelect' ? payload.dataZoomSelectActive : false;
	  }

	  view._isZoomActive = zoomActive;
	  featureModel.setIconStatus('zoom', zoomActive ? 'emphasis' : 'normal');
	  var brushTargetManager = new BrushTargetManager(retrieveAxisSetting(featureModel.option), ecModel, {
	    include: ['grid']
	  });

	  view._brushController.setPanels(brushTargetManager.makePanelOpts(api, function (targetInfo) {
	    return targetInfo.xAxisDeclared && !targetInfo.yAxisDeclared ? 'lineX' : !targetInfo.xAxisDeclared && targetInfo.yAxisDeclared ? 'lineY' : 'rect';
	  })).enableBrush(zoomActive ? {
	    brushType: 'auto',
	    brushStyle: {
	      // FIXME user customized?
	      lineWidth: 0,
	      fill: 'rgba(0,0,0,0.2)'
	    }
	  } : false);
	}

	featureManager.register('dataZoom', DataZoom); // Create special dataZoom option for select

	echarts.registerPreprocessor(function (option) {
	  if (!option) {
	    return;
	  }

	  var dataZoomOpts = option.dataZoom || (option.dataZoom = []);

	  if (!zrUtil.isArray(dataZoomOpts)) {
	    option.dataZoom = dataZoomOpts = [dataZoomOpts];
	  }

	  var toolboxOpt = option.toolbox;

	  if (toolboxOpt) {
	    // Assume there is only one toolbox
	    if (zrUtil.isArray(toolboxOpt)) {
	      toolboxOpt = toolboxOpt[0];
	    }

	    if (toolboxOpt && toolboxOpt.feature) {
	      var dataZoomOpt = toolboxOpt.feature.dataZoom;
	      addForAxis('xAxis', dataZoomOpt);
	      addForAxis('yAxis', dataZoomOpt);
	    }
	  }

	  function addForAxis(axisName, dataZoomOpt) {
	    if (!dataZoomOpt) {
	      return;
	    } // Try not to modify model, because it is not merged yet.


	    var axisIndicesName = axisName + 'Index';
	    var givenAxisIndices = dataZoomOpt[axisIndicesName];

	    if (givenAxisIndices != null && givenAxisIndices != 'all' && !zrUtil.isArray(givenAxisIndices)) {
	      givenAxisIndices = givenAxisIndices === false || givenAxisIndices === 'none' ? [] : [givenAxisIndices];
	    }

	    forEachComponent(axisName, function (axisOpt, axisIndex) {
	      if (givenAxisIndices != null && givenAxisIndices != 'all' && zrUtil.indexOf(givenAxisIndices, axisIndex) === -1) {
	        return;
	      }

	      var newOpt = {
	        type: 'select',
	        $fromToolbox: true,
	        // Id for merge mapping.
	        id: DATA_ZOOM_ID_BASE + axisName + axisIndex
	      }; // FIXME
	      // Only support one axis now.

	      newOpt[axisIndicesName] = axisIndex;
	      dataZoomOpts.push(newOpt);
	    });
	  }

	  function forEachComponent(mainType, cb) {
	    var opts = option[mainType];

	    if (!zrUtil.isArray(opts)) {
	      opts = opts ? [opts] : [];
	    }

	    each(opts, cb);
	  }
	});
	var _default = DataZoom;
	module.exports = _default;

/***/ },
/* 596 */
/***/ function(module, exports, __webpack_require__) {

	var zrUtil = __webpack_require__(166);

	var each = zrUtil.each;
	var ATTR = '\0_ec_hist_store';
	/**
	 * @param {module:echarts/model/Global} ecModel
	 * @param {Object} newSnapshot {dataZoomId, batch: [payloadInfo, ...]}
	 */

	function push(ecModel, newSnapshot) {
	  var store = giveStore(ecModel); // If previous dataZoom can not be found,
	  // complete an range with current range.

	  each(newSnapshot, function (batchItem, dataZoomId) {
	    var i = store.length - 1;

	    for (; i >= 0; i--) {
	      var snapshot = store[i];

	      if (snapshot[dataZoomId]) {
	        break;
	      }
	    }

	    if (i < 0) {
	      // No origin range set, create one by current range.
	      var dataZoomModel = ecModel.queryComponents({
	        mainType: 'dataZoom',
	        subType: 'select',
	        id: dataZoomId
	      })[0];

	      if (dataZoomModel) {
	        var percentRange = dataZoomModel.getPercentRange();
	        store[0][dataZoomId] = {
	          dataZoomId: dataZoomId,
	          start: percentRange[0],
	          end: percentRange[1]
	        };
	      }
	    }
	  });
	  store.push(newSnapshot);
	}
	/**
	 * @param {module:echarts/model/Global} ecModel
	 * @return {Object} snapshot
	 */


	function pop(ecModel) {
	  var store = giveStore(ecModel);
	  var head = store[store.length - 1];
	  store.length > 1 && store.pop(); // Find top for all dataZoom.

	  var snapshot = {};
	  each(head, function (batchItem, dataZoomId) {
	    for (var i = store.length - 1; i >= 0; i--) {
	      var batchItem = store[i][dataZoomId];

	      if (batchItem) {
	        snapshot[dataZoomId] = batchItem;
	        break;
	      }
	    }
	  });
	  return snapshot;
	}
	/**
	 * @param {module:echarts/model/Global} ecModel
	 */


	function clear(ecModel) {
	  ecModel[ATTR] = null;
	}
	/**
	 * @param {module:echarts/model/Global} ecModel
	 * @return {number} records. always >= 1.
	 */


	function count(ecModel) {
	  return giveStore(ecModel).length;
	}
	/**
	 * [{key: dataZoomId, value: {dataZoomId, range}}, ...]
	 * History length of each dataZoom may be different.
	 * this._history[0] is used to store origin range.
	 * @type {Array.<Object>}
	 */


	function giveStore(ecModel) {
	  var store = ecModel[ATTR];

	  if (!store) {
	    store = ecModel[ATTR] = [{}];
	  }

	  return store;
	}

	exports.push = push;
	exports.pop = pop;
	exports.clear = clear;
	exports.count = count;

/***/ },
/* 597 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(541);

	__webpack_require__(542);

	__webpack_require__(545);

	__webpack_require__(598);

	__webpack_require__(599);

	__webpack_require__(551);

	__webpack_require__(552);

/***/ },
/* 598 */
/***/ function(module, exports, __webpack_require__) {

	var DataZoomModel = __webpack_require__(542);

	var _default = DataZoomModel.extend({
	  type: 'dataZoom.select'
	});

	module.exports = _default;

/***/ },
/* 599 */
/***/ function(module, exports, __webpack_require__) {

	var DataZoomView = __webpack_require__(545);

	var _default = DataZoomView.extend({
	  type: 'dataZoom.select'
	});

	module.exports = _default;

/***/ },
/* 600 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(161);

	var history = __webpack_require__(596);

	var lang = __webpack_require__(534);

	var featureManager = __webpack_require__(533);

	var restoreLang = lang.toolbox.restore;

	function Restore(model) {
	  this.model = model;
	}

	Restore.defaultOption = {
	  show: true,
	  icon: 'M3.8,33.4 M47,18.9h9.8V8.7 M56.3,20.1 C52.1,9,40.5,0.6,26.8,2.1C12.6,3.7,1.6,16.2,2.1,30.6 M13,41.1H3.1v10.2 M3.7,39.9c4.2,11.1,15.8,19.5,29.5,18 c14.2-1.6,25.2-14.1,24.7-28.5',
	  title: restoreLang.title
	};
	var proto = Restore.prototype;

	proto.onclick = function (ecModel, api, type) {
	  history.clear(ecModel);
	  api.dispatchAction({
	    type: 'restore',
	    from: this.uid
	  });
	};

	featureManager.register('restore', Restore);
	echarts.registerAction({
	  type: 'restore',
	  event: 'restore',
	  update: 'prepareAndUpdate'
	}, function (payload, ecModel) {
	  ecModel.resetOption('recreate');
	});
	var _default = Restore;
	module.exports = _default;

/***/ },
/* 601 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(602);

	var _zrender = __webpack_require__(163);

	var registerPainter = _zrender.registerPainter;

	var Painter = __webpack_require__(604);

	registerPainter('vml', Painter);

/***/ },
/* 602 */
/***/ function(module, exports, __webpack_require__) {

	var env = __webpack_require__(165);

	var _vector = __webpack_require__(168);

	var applyTransform = _vector.applyTransform;

	var BoundingRect = __webpack_require__(184);

	var colorTool = __webpack_require__(180);

	var textContain = __webpack_require__(195);

	var textHelper = __webpack_require__(194);

	var RectText = __webpack_require__(193);

	var Displayable = __webpack_require__(192);

	var ZImage = __webpack_require__(191);

	var Text = __webpack_require__(226);

	var Path = __webpack_require__(214);

	var PathProxy = __webpack_require__(215);

	var Gradient = __webpack_require__(242);

	var vmlCore = __webpack_require__(603);

	// http://www.w3.org/TR/NOTE-VML
	// TODO Use proxy like svg instead of overwrite brush methods
	var CMD = PathProxy.CMD;
	var round = Math.round;
	var sqrt = Math.sqrt;
	var abs = Math.abs;
	var cos = Math.cos;
	var sin = Math.sin;
	var mathMax = Math.max;

	if (!env.canvasSupported) {
	  var comma = ',';
	  var imageTransformPrefix = 'progid:DXImageTransform.Microsoft';
	  var Z = 21600;
	  var Z2 = Z / 2;
	  var ZLEVEL_BASE = 100000;
	  var Z_BASE = 1000;

	  var initRootElStyle = function (el) {
	    el.style.cssText = 'position:absolute;left:0;top:0;width:1px;height:1px;';
	    el.coordsize = Z + ',' + Z;
	    el.coordorigin = '0,0';
	  };

	  var encodeHtmlAttribute = function (s) {
	    return String(s).replace(/&/g, '&amp;').replace(/"/g, '&quot;');
	  };

	  var rgb2Str = function (r, g, b) {
	    return 'rgb(' + [r, g, b].join(',') + ')';
	  };

	  var append = function (parent, child) {
	    if (child && parent && child.parentNode !== parent) {
	      parent.appendChild(child);
	    }
	  };

	  var remove = function (parent, child) {
	    if (child && parent && child.parentNode === parent) {
	      parent.removeChild(child);
	    }
	  };

	  var getZIndex = function (zlevel, z, z2) {
	    // z 的取值范围为 [0, 1000]
	    return (parseFloat(zlevel) || 0) * ZLEVEL_BASE + (parseFloat(z) || 0) * Z_BASE + z2;
	  };

	  var parsePercent = function (value, maxValue) {
	    if (typeof value === 'string') {
	      if (value.lastIndexOf('%') >= 0) {
	        return parseFloat(value) / 100 * maxValue;
	      }

	      return parseFloat(value);
	    }

	    return value;
	  };
	  /***************************************************
	   * PATH
	   **************************************************/


	  var setColorAndOpacity = function (el, color, opacity) {
	    var colorArr = colorTool.parse(color);
	    opacity = +opacity;

	    if (isNaN(opacity)) {
	      opacity = 1;
	    }

	    if (colorArr) {
	      el.color = rgb2Str(colorArr[0], colorArr[1], colorArr[2]);
	      el.opacity = opacity * colorArr[3];
	    }
	  };

	  var getColorAndAlpha = function (color) {
	    var colorArr = colorTool.parse(color);
	    return [rgb2Str(colorArr[0], colorArr[1], colorArr[2]), colorArr[3]];
	  };

	  var updateFillNode = function (el, style, zrEl) {
	    // TODO pattern
	    var fill = style.fill;

	    if (fill != null) {
	      // Modified from excanvas
	      if (fill instanceof Gradient) {
	        var gradientType;
	        var angle = 0;
	        var focus = [0, 0]; // additional offset

	        var shift = 0; // scale factor for offset

	        var expansion = 1;
	        var rect = zrEl.getBoundingRect();
	        var rectWidth = rect.width;
	        var rectHeight = rect.height;

	        if (fill.type === 'linear') {
	          gradientType = 'gradient';
	          var transform = zrEl.transform;
	          var p0 = [fill.x * rectWidth, fill.y * rectHeight];
	          var p1 = [fill.x2 * rectWidth, fill.y2 * rectHeight];

	          if (transform) {
	            applyTransform(p0, p0, transform);
	            applyTransform(p1, p1, transform);
	          }

	          var dx = p1[0] - p0[0];
	          var dy = p1[1] - p0[1];
	          angle = Math.atan2(dx, dy) * 180 / Math.PI; // The angle should be a non-negative number.

	          if (angle < 0) {
	            angle += 360;
	          } // Very small angles produce an unexpected result because they are
	          // converted to a scientific notation string.


	          if (angle < 1e-6) {
	            angle = 0;
	          }
	        } else {
	          gradientType = 'gradientradial';
	          var p0 = [fill.x * rectWidth, fill.y * rectHeight];
	          var transform = zrEl.transform;
	          var scale = zrEl.scale;
	          var width = rectWidth;
	          var height = rectHeight;
	          focus = [// Percent in bounding rect
	          (p0[0] - rect.x) / width, (p0[1] - rect.y) / height];

	          if (transform) {
	            applyTransform(p0, p0, transform);
	          }

	          width /= scale[0] * Z;
	          height /= scale[1] * Z;
	          var dimension = mathMax(width, height);
	          shift = 2 * 0 / dimension;
	          expansion = 2 * fill.r / dimension - shift;
	        } // We need to sort the color stops in ascending order by offset,
	        // otherwise IE won't interpret it correctly.


	        var stops = fill.colorStops.slice();
	        stops.sort(function (cs1, cs2) {
	          return cs1.offset - cs2.offset;
	        });
	        var length = stops.length; // Color and alpha list of first and last stop

	        var colorAndAlphaList = [];
	        var colors = [];

	        for (var i = 0; i < length; i++) {
	          var stop = stops[i];
	          var colorAndAlpha = getColorAndAlpha(stop.color);
	          colors.push(stop.offset * expansion + shift + ' ' + colorAndAlpha[0]);

	          if (i === 0 || i === length - 1) {
	            colorAndAlphaList.push(colorAndAlpha);
	          }
	        }

	        if (length >= 2) {
	          var color1 = colorAndAlphaList[0][0];
	          var color2 = colorAndAlphaList[1][0];
	          var opacity1 = colorAndAlphaList[0][1] * style.opacity;
	          var opacity2 = colorAndAlphaList[1][1] * style.opacity;
	          el.type = gradientType;
	          el.method = 'none';
	          el.focus = '100%';
	          el.angle = angle;
	          el.color = color1;
	          el.color2 = color2;
	          el.colors = colors.join(','); // When colors attribute is used, the meanings of opacity and o:opacity2
	          // are reversed.

	          el.opacity = opacity2; // FIXME g_o_:opacity ?

	          el.opacity2 = opacity1;
	        }

	        if (gradientType === 'radial') {
	          el.focusposition = focus.join(',');
	        }
	      } else {
	        // FIXME Change from Gradient fill to color fill
	        setColorAndOpacity(el, fill, style.opacity);
	      }
	    }
	  };

	  var updateStrokeNode = function (el, style) {
	    // if (style.lineJoin != null) {
	    //     el.joinstyle = style.lineJoin;
	    // }
	    // if (style.miterLimit != null) {
	    //     el.miterlimit = style.miterLimit * Z;
	    // }
	    // if (style.lineCap != null) {
	    //     el.endcap = style.lineCap;
	    // }
	    if (style.lineDash != null) {
	      el.dashstyle = style.lineDash.join(' ');
	    }

	    if (style.stroke != null && !(style.stroke instanceof Gradient)) {
	      setColorAndOpacity(el, style.stroke, style.opacity);
	    }
	  };

	  var updateFillAndStroke = function (vmlEl, type, style, zrEl) {
	    var isFill = type == 'fill';
	    var el = vmlEl.getElementsByTagName(type)[0]; // Stroke must have lineWidth

	    if (style[type] != null && style[type] !== 'none' && (isFill || !isFill && style.lineWidth)) {
	      vmlEl[isFill ? 'filled' : 'stroked'] = 'true'; // FIXME Remove before updating, or set `colors` will throw error

	      if (style[type] instanceof Gradient) {
	        remove(vmlEl, el);
	      }

	      if (!el) {
	        el = vmlCore.createNode(type);
	      }

	      isFill ? updateFillNode(el, style, zrEl) : updateStrokeNode(el, style);
	      append(vmlEl, el);
	    } else {
	      vmlEl[isFill ? 'filled' : 'stroked'] = 'false';
	      remove(vmlEl, el);
	    }
	  };

	  var points = [[], [], []];

	  var pathDataToString = function (path, m) {
	    var M = CMD.M;
	    var C = CMD.C;
	    var L = CMD.L;
	    var A = CMD.A;
	    var Q = CMD.Q;
	    var str = [];
	    var nPoint;
	    var cmdStr;
	    var cmd;
	    var i;
	    var xi;
	    var yi;
	    var data = path.data;
	    var dataLength = path.len();

	    for (i = 0; i < dataLength;) {
	      cmd = data[i++];
	      cmdStr = '';
	      nPoint = 0;

	      switch (cmd) {
	        case M:
	          cmdStr = ' m ';
	          nPoint = 1;
	          xi = data[i++];
	          yi = data[i++];
	          points[0][0] = xi;
	          points[0][1] = yi;
	          break;

	        case L:
	          cmdStr = ' l ';
	          nPoint = 1;
	          xi = data[i++];
	          yi = data[i++];
	          points[0][0] = xi;
	          points[0][1] = yi;
	          break;

	        case Q:
	        case C:
	          cmdStr = ' c ';
	          nPoint = 3;
	          var x1 = data[i++];
	          var y1 = data[i++];
	          var x2 = data[i++];
	          var y2 = data[i++];
	          var x3;
	          var y3;

	          if (cmd === Q) {
	            // Convert quadratic to cubic using degree elevation
	            x3 = x2;
	            y3 = y2;
	            x2 = (x2 + 2 * x1) / 3;
	            y2 = (y2 + 2 * y1) / 3;
	            x1 = (xi + 2 * x1) / 3;
	            y1 = (yi + 2 * y1) / 3;
	          } else {
	            x3 = data[i++];
	            y3 = data[i++];
	          }

	          points[0][0] = x1;
	          points[0][1] = y1;
	          points[1][0] = x2;
	          points[1][1] = y2;
	          points[2][0] = x3;
	          points[2][1] = y3;
	          xi = x3;
	          yi = y3;
	          break;

	        case A:
	          var x = 0;
	          var y = 0;
	          var sx = 1;
	          var sy = 1;
	          var angle = 0;

	          if (m) {
	            // Extract SRT from matrix
	            x = m[4];
	            y = m[5];
	            sx = sqrt(m[0] * m[0] + m[1] * m[1]);
	            sy = sqrt(m[2] * m[2] + m[3] * m[3]);
	            angle = Math.atan2(-m[1] / sy, m[0] / sx);
	          }

	          var cx = data[i++];
	          var cy = data[i++];
	          var rx = data[i++];
	          var ry = data[i++];
	          var startAngle = data[i++] + angle;
	          var endAngle = data[i++] + startAngle + angle; // FIXME
	          // var psi = data[i++];

	          i++;
	          var clockwise = data[i++];
	          var x0 = cx + cos(startAngle) * rx;
	          var y0 = cy + sin(startAngle) * ry;
	          var x1 = cx + cos(endAngle) * rx;
	          var y1 = cy + sin(endAngle) * ry;
	          var type = clockwise ? ' wa ' : ' at ';

	          if (Math.abs(x0 - x1) < 1e-4) {
	            // IE won't render arches drawn counter clockwise if x0 == x1.
	            if (Math.abs(endAngle - startAngle) > 1e-2) {
	              // Offset x0 by 1/80 of a pixel. Use something
	              // that can be represented in binary
	              if (clockwise) {
	                x0 += 270 / Z;
	              }
	            } else {
	              // Avoid case draw full circle
	              if (Math.abs(y0 - cy) < 1e-4) {
	                if (clockwise && x0 < cx || !clockwise && x0 > cx) {
	                  y1 -= 270 / Z;
	                } else {
	                  y1 += 270 / Z;
	                }
	              } else if (clockwise && y0 < cy || !clockwise && y0 > cy) {
	                x1 += 270 / Z;
	              } else {
	                x1 -= 270 / Z;
	              }
	            }
	          }

	          str.push(type, round(((cx - rx) * sx + x) * Z - Z2), comma, round(((cy - ry) * sy + y) * Z - Z2), comma, round(((cx + rx) * sx + x) * Z - Z2), comma, round(((cy + ry) * sy + y) * Z - Z2), comma, round((x0 * sx + x) * Z - Z2), comma, round((y0 * sy + y) * Z - Z2), comma, round((x1 * sx + x) * Z - Z2), comma, round((y1 * sy + y) * Z - Z2));
	          xi = x1;
	          yi = y1;
	          break;

	        case CMD.R:
	          var p0 = points[0];
	          var p1 = points[1]; // x0, y0

	          p0[0] = data[i++];
	          p0[1] = data[i++]; // x1, y1

	          p1[0] = p0[0] + data[i++];
	          p1[1] = p0[1] + data[i++];

	          if (m) {
	            applyTransform(p0, p0, m);
	            applyTransform(p1, p1, m);
	          }

	          p0[0] = round(p0[0] * Z - Z2);
	          p1[0] = round(p1[0] * Z - Z2);
	          p0[1] = round(p0[1] * Z - Z2);
	          p1[1] = round(p1[1] * Z - Z2);
	          str.push( // x0, y0
	          ' m ', p0[0], comma, p0[1], // x1, y0
	          ' l ', p1[0], comma, p0[1], // x1, y1
	          ' l ', p1[0], comma, p1[1], // x0, y1
	          ' l ', p0[0], comma, p1[1]);
	          break;

	        case CMD.Z:
	          // FIXME Update xi, yi
	          str.push(' x ');
	      }

	      if (nPoint > 0) {
	        str.push(cmdStr);

	        for (var k = 0; k < nPoint; k++) {
	          var p = points[k];
	          m && applyTransform(p, p, m); // 不 round 会非常慢

	          str.push(round(p[0] * Z - Z2), comma, round(p[1] * Z - Z2), k < nPoint - 1 ? comma : '');
	        }
	      }
	    }

	    return str.join('');
	  }; // Rewrite the original path method


	  Path.prototype.brushVML = function (vmlRoot) {
	    var style = this.style;
	    var vmlEl = this._vmlEl;

	    if (!vmlEl) {
	      vmlEl = vmlCore.createNode('shape');
	      initRootElStyle(vmlEl);
	      this._vmlEl = vmlEl;
	    }

	    updateFillAndStroke(vmlEl, 'fill', style, this);
	    updateFillAndStroke(vmlEl, 'stroke', style, this);
	    var m = this.transform;
	    var needTransform = m != null;
	    var strokeEl = vmlEl.getElementsByTagName('stroke')[0];

	    if (strokeEl) {
	      var lineWidth = style.lineWidth; // Get the line scale.
	      // Determinant of this.m_ means how much the area is enlarged by the
	      // transformation. So its square root can be used as a scale factor
	      // for width.

	      if (needTransform && !style.strokeNoScale) {
	        var det = m[0] * m[3] - m[1] * m[2];
	        lineWidth *= sqrt(abs(det));
	      }

	      strokeEl.weight = lineWidth + 'px';
	    }

	    var path = this.path || (this.path = new PathProxy());

	    if (this.__dirtyPath) {
	      path.beginPath();
	      this.buildPath(path, this.shape);
	      path.toStatic();
	      this.__dirtyPath = false;
	    }

	    vmlEl.path = pathDataToString(path, this.transform);
	    vmlEl.style.zIndex = getZIndex(this.zlevel, this.z, this.z2); // Append to root

	    append(vmlRoot, vmlEl); // Text

	    if (style.text != null) {
	      this.drawRectText(vmlRoot, this.getBoundingRect());
	    } else {
	      this.removeRectText(vmlRoot);
	    }
	  };

	  Path.prototype.onRemove = function (vmlRoot) {
	    remove(vmlRoot, this._vmlEl);
	    this.removeRectText(vmlRoot);
	  };

	  Path.prototype.onAdd = function (vmlRoot) {
	    append(vmlRoot, this._vmlEl);
	    this.appendRectText(vmlRoot);
	  };
	  /***************************************************
	   * IMAGE
	   **************************************************/


	  var isImage = function (img) {
	    // FIXME img instanceof Image 如果 img 是一个字符串的时候，IE8 下会报错
	    return typeof img === 'object' && img.tagName && img.tagName.toUpperCase() === 'IMG'; // return img instanceof Image;
	  }; // Rewrite the original path method


	  ZImage.prototype.brushVML = function (vmlRoot) {
	    var style = this.style;
	    var image = style.image; // Image original width, height

	    var ow;
	    var oh;

	    if (isImage(image)) {
	      var src = image.src;

	      if (src === this._imageSrc) {
	        ow = this._imageWidth;
	        oh = this._imageHeight;
	      } else {
	        var imageRuntimeStyle = image.runtimeStyle;
	        var oldRuntimeWidth = imageRuntimeStyle.width;
	        var oldRuntimeHeight = imageRuntimeStyle.height;
	        imageRuntimeStyle.width = 'auto';
	        imageRuntimeStyle.height = 'auto'; // get the original size

	        ow = image.width;
	        oh = image.height; // and remove overides

	        imageRuntimeStyle.width = oldRuntimeWidth;
	        imageRuntimeStyle.height = oldRuntimeHeight; // Caching image original width, height and src

	        this._imageSrc = src;
	        this._imageWidth = ow;
	        this._imageHeight = oh;
	      }

	      image = src;
	    } else {
	      if (image === this._imageSrc) {
	        ow = this._imageWidth;
	        oh = this._imageHeight;
	      }
	    }

	    if (!image) {
	      return;
	    }

	    var x = style.x || 0;
	    var y = style.y || 0;
	    var dw = style.width;
	    var dh = style.height;
	    var sw = style.sWidth;
	    var sh = style.sHeight;
	    var sx = style.sx || 0;
	    var sy = style.sy || 0;
	    var hasCrop = sw && sh;
	    var vmlEl = this._vmlEl;

	    if (!vmlEl) {
	      // FIXME 使用 group 在 left, top 都不是 0 的时候就无法显示了。
	      // vmlEl = vmlCore.createNode('group');
	      vmlEl = vmlCore.doc.createElement('div');
	      initRootElStyle(vmlEl);
	      this._vmlEl = vmlEl;
	    }

	    var vmlElStyle = vmlEl.style;
	    var hasRotation = false;
	    var m;
	    var scaleX = 1;
	    var scaleY = 1;

	    if (this.transform) {
	      m = this.transform;
	      scaleX = sqrt(m[0] * m[0] + m[1] * m[1]);
	      scaleY = sqrt(m[2] * m[2] + m[3] * m[3]);
	      hasRotation = m[1] || m[2];
	    }

	    if (hasRotation) {
	      // If filters are necessary (rotation exists), create them
	      // filters are bog-slow, so only create them if abbsolutely necessary
	      // The following check doesn't account for skews (which don't exist
	      // in the canvas spec (yet) anyway.
	      // From excanvas
	      var p0 = [x, y];
	      var p1 = [x + dw, y];
	      var p2 = [x, y + dh];
	      var p3 = [x + dw, y + dh];
	      applyTransform(p0, p0, m);
	      applyTransform(p1, p1, m);
	      applyTransform(p2, p2, m);
	      applyTransform(p3, p3, m);
	      var maxX = mathMax(p0[0], p1[0], p2[0], p3[0]);
	      var maxY = mathMax(p0[1], p1[1], p2[1], p3[1]);
	      var transformFilter = [];
	      transformFilter.push('M11=', m[0] / scaleX, comma, 'M12=', m[2] / scaleY, comma, 'M21=', m[1] / scaleX, comma, 'M22=', m[3] / scaleY, comma, 'Dx=', round(x * scaleX + m[4]), comma, 'Dy=', round(y * scaleY + m[5]));
	      vmlElStyle.padding = '0 ' + round(maxX) + 'px ' + round(maxY) + 'px 0'; // FIXME DXImageTransform 在 IE11 的兼容模式下不起作用

	      vmlElStyle.filter = imageTransformPrefix + '.Matrix(' + transformFilter.join('') + ', SizingMethod=clip)';
	    } else {
	      if (m) {
	        x = x * scaleX + m[4];
	        y = y * scaleY + m[5];
	      }

	      vmlElStyle.filter = '';
	      vmlElStyle.left = round(x) + 'px';
	      vmlElStyle.top = round(y) + 'px';
	    }

	    var imageEl = this._imageEl;
	    var cropEl = this._cropEl;

	    if (!imageEl) {
	      imageEl = vmlCore.doc.createElement('div');
	      this._imageEl = imageEl;
	    }

	    var imageELStyle = imageEl.style;

	    if (hasCrop) {
	      // Needs know image original width and height
	      if (!(ow && oh)) {
	        var tmpImage = new Image();
	        var self = this;

	        tmpImage.onload = function () {
	          tmpImage.onload = null;
	          ow = tmpImage.width;
	          oh = tmpImage.height; // Adjust image width and height to fit the ratio destinationSize / sourceSize

	          imageELStyle.width = round(scaleX * ow * dw / sw) + 'px';
	          imageELStyle.height = round(scaleY * oh * dh / sh) + 'px'; // Caching image original width, height and src

	          self._imageWidth = ow;
	          self._imageHeight = oh;
	          self._imageSrc = image;
	        };

	        tmpImage.src = image;
	      } else {
	        imageELStyle.width = round(scaleX * ow * dw / sw) + 'px';
	        imageELStyle.height = round(scaleY * oh * dh / sh) + 'px';
	      }

	      if (!cropEl) {
	        cropEl = vmlCore.doc.createElement('div');
	        cropEl.style.overflow = 'hidden';
	        this._cropEl = cropEl;
	      }

	      var cropElStyle = cropEl.style;
	      cropElStyle.width = round((dw + sx * dw / sw) * scaleX);
	      cropElStyle.height = round((dh + sy * dh / sh) * scaleY);
	      cropElStyle.filter = imageTransformPrefix + '.Matrix(Dx=' + -sx * dw / sw * scaleX + ',Dy=' + -sy * dh / sh * scaleY + ')';

	      if (!cropEl.parentNode) {
	        vmlEl.appendChild(cropEl);
	      }

	      if (imageEl.parentNode != cropEl) {
	        cropEl.appendChild(imageEl);
	      }
	    } else {
	      imageELStyle.width = round(scaleX * dw) + 'px';
	      imageELStyle.height = round(scaleY * dh) + 'px';
	      vmlEl.appendChild(imageEl);

	      if (cropEl && cropEl.parentNode) {
	        vmlEl.removeChild(cropEl);
	        this._cropEl = null;
	      }
	    }

	    var filterStr = '';
	    var alpha = style.opacity;

	    if (alpha < 1) {
	      filterStr += '.Alpha(opacity=' + round(alpha * 100) + ') ';
	    }

	    filterStr += imageTransformPrefix + '.AlphaImageLoader(src=' + image + ', SizingMethod=scale)';
	    imageELStyle.filter = filterStr;
	    vmlEl.style.zIndex = getZIndex(this.zlevel, this.z, this.z2); // Append to root

	    append(vmlRoot, vmlEl); // Text

	    if (style.text != null) {
	      this.drawRectText(vmlRoot, this.getBoundingRect());
	    }
	  };

	  ZImage.prototype.onRemove = function (vmlRoot) {
	    remove(vmlRoot, this._vmlEl);
	    this._vmlEl = null;
	    this._cropEl = null;
	    this._imageEl = null;
	    this.removeRectText(vmlRoot);
	  };

	  ZImage.prototype.onAdd = function (vmlRoot) {
	    append(vmlRoot, this._vmlEl);
	    this.appendRectText(vmlRoot);
	  };
	  /***************************************************
	   * TEXT
	   **************************************************/


	  var DEFAULT_STYLE_NORMAL = 'normal';
	  var fontStyleCache = {};
	  var fontStyleCacheCount = 0;
	  var MAX_FONT_CACHE_SIZE = 100;
	  var fontEl = document.createElement('div');

	  var getFontStyle = function (fontString) {
	    var fontStyle = fontStyleCache[fontString];

	    if (!fontStyle) {
	      // Clear cache
	      if (fontStyleCacheCount > MAX_FONT_CACHE_SIZE) {
	        fontStyleCacheCount = 0;
	        fontStyleCache = {};
	      }

	      var style = fontEl.style;
	      var fontFamily;

	      try {
	        style.font = fontString;
	        fontFamily = style.fontFamily.split(',')[0];
	      } catch (e) {}

	      fontStyle = {
	        style: style.fontStyle || DEFAULT_STYLE_NORMAL,
	        variant: style.fontVariant || DEFAULT_STYLE_NORMAL,
	        weight: style.fontWeight || DEFAULT_STYLE_NORMAL,
	        size: parseFloat(style.fontSize || 12) | 0,
	        family: fontFamily || 'Microsoft YaHei'
	      };
	      fontStyleCache[fontString] = fontStyle;
	      fontStyleCacheCount++;
	    }

	    return fontStyle;
	  };

	  var textMeasureEl; // Overwrite measure text method

	  textContain.$override('measureText', function (text, textFont) {
	    var doc = vmlCore.doc;

	    if (!textMeasureEl) {
	      textMeasureEl = doc.createElement('div');
	      textMeasureEl.style.cssText = 'position:absolute;top:-20000px;left:0;' + 'padding:0;margin:0;border:none;white-space:pre;';
	      vmlCore.doc.body.appendChild(textMeasureEl);
	    }

	    try {
	      textMeasureEl.style.font = textFont;
	    } catch (ex) {// Ignore failures to set to invalid font.
	    }

	    textMeasureEl.innerHTML = ''; // Don't use innerHTML or innerText because they allow markup/whitespace.

	    textMeasureEl.appendChild(doc.createTextNode(text));
	    return {
	      width: textMeasureEl.offsetWidth
	    };
	  });
	  var tmpRect = new BoundingRect();

	  var drawRectText = function (vmlRoot, rect, textRect, fromTextEl) {
	    var style = this.style; // Optimize, avoid normalize every time.

	    this.__dirty && textHelper.normalizeTextStyle(style, true);
	    var text = style.text; // Convert to string

	    text != null && (text += '');

	    if (!text) {
	      return;
	    } // Convert rich text to plain text. Rich text is not supported in
	    // IE8-, but tags in rich text template will be removed.


	    if (style.rich) {
	      var contentBlock = textContain.parseRichText(text, style);
	      text = [];

	      for (var i = 0; i < contentBlock.lines.length; i++) {
	        var tokens = contentBlock.lines[i].tokens;
	        var textLine = [];

	        for (var j = 0; j < tokens.length; j++) {
	          textLine.push(tokens[j].text);
	        }

	        text.push(textLine.join(''));
	      }

	      text = text.join('\n');
	    }

	    var x;
	    var y;
	    var align = style.textAlign;
	    var verticalAlign = style.textVerticalAlign;
	    var fontStyle = getFontStyle(style.font); // FIXME encodeHtmlAttribute ?

	    var font = fontStyle.style + ' ' + fontStyle.variant + ' ' + fontStyle.weight + ' ' + fontStyle.size + 'px "' + fontStyle.family + '"';
	    textRect = textRect || textContain.getBoundingRect(text, font, align, verticalAlign); // Transform rect to view space

	    var m = this.transform; // Ignore transform for text in other element

	    if (m && !fromTextEl) {
	      tmpRect.copy(rect);
	      tmpRect.applyTransform(m);
	      rect = tmpRect;
	    }

	    if (!fromTextEl) {
	      var textPosition = style.textPosition;
	      var distance = style.textDistance; // Text position represented by coord

	      if (textPosition instanceof Array) {
	        x = rect.x + parsePercent(textPosition[0], rect.width);
	        y = rect.y + parsePercent(textPosition[1], rect.height);
	        align = align || 'left';
	      } else {
	        var res = textContain.adjustTextPositionOnRect(textPosition, rect, distance);
	        x = res.x;
	        y = res.y; // Default align and baseline when has textPosition

	        align = align || res.textAlign;
	        verticalAlign = verticalAlign || res.textVerticalAlign;
	      }
	    } else {
	      x = rect.x;
	      y = rect.y;
	    }

	    x = textContain.adjustTextX(x, textRect.width, align);
	    y = textContain.adjustTextY(y, textRect.height, verticalAlign); // Force baseline 'middle'

	    y += textRect.height / 2; // var fontSize = fontStyle.size;
	    // 1.75 is an arbitrary number, as there is no info about the text baseline
	    // switch (baseline) {
	    // case 'hanging':
	    // case 'top':
	    //     y += fontSize / 1.75;
	    //     break;
	    //     case 'middle':
	    //         break;
	    //     default:
	    //     // case null:
	    //     // case 'alphabetic':
	    //     // case 'ideographic':
	    //     // case 'bottom':
	    //         y -= fontSize / 2.25;
	    //         break;
	    // }
	    // switch (align) {
	    //     case 'left':
	    //         break;
	    //     case 'center':
	    //         x -= textRect.width / 2;
	    //         break;
	    //     case 'right':
	    //         x -= textRect.width;
	    //         break;
	    // case 'end':
	    // align = elementStyle.direction == 'ltr' ? 'right' : 'left';
	    // break;
	    // case 'start':
	    // align = elementStyle.direction == 'rtl' ? 'right' : 'left';
	    // break;
	    // default:
	    //     align = 'left';
	    // }

	    var createNode = vmlCore.createNode;
	    var textVmlEl = this._textVmlEl;
	    var pathEl;
	    var textPathEl;
	    var skewEl;

	    if (!textVmlEl) {
	      textVmlEl = createNode('line');
	      pathEl = createNode('path');
	      textPathEl = createNode('textpath');
	      skewEl = createNode('skew'); // FIXME Why here is not cammel case
	      // Align 'center' seems wrong

	      textPathEl.style['v-text-align'] = 'left';
	      initRootElStyle(textVmlEl);
	      pathEl.textpathok = true;
	      textPathEl.on = true;
	      textVmlEl.from = '0 0';
	      textVmlEl.to = '1000 0.05';
	      append(textVmlEl, skewEl);
	      append(textVmlEl, pathEl);
	      append(textVmlEl, textPathEl);
	      this._textVmlEl = textVmlEl;
	    } else {
	      // 这里是在前面 appendChild 保证顺序的前提下
	      skewEl = textVmlEl.firstChild;
	      pathEl = skewEl.nextSibling;
	      textPathEl = pathEl.nextSibling;
	    }

	    var coords = [x, y];
	    var textVmlElStyle = textVmlEl.style; // Ignore transform for text in other element

	    if (m && fromTextEl) {
	      applyTransform(coords, coords, m);
	      skewEl.on = true;
	      skewEl.matrix = m[0].toFixed(3) + comma + m[2].toFixed(3) + comma + m[1].toFixed(3) + comma + m[3].toFixed(3) + ',0,0'; // Text position

	      skewEl.offset = (round(coords[0]) || 0) + ',' + (round(coords[1]) || 0); // Left top point as origin

	      skewEl.origin = '0 0';
	      textVmlElStyle.left = '0px';
	      textVmlElStyle.top = '0px';
	    } else {
	      skewEl.on = false;
	      textVmlElStyle.left = round(x) + 'px';
	      textVmlElStyle.top = round(y) + 'px';
	    }

	    textPathEl.string = encodeHtmlAttribute(text); // TODO

	    try {
	      textPathEl.style.font = font;
	    } // Error font format
	    catch (e) {}

	    updateFillAndStroke(textVmlEl, 'fill', {
	      fill: style.textFill,
	      opacity: style.opacity
	    }, this);
	    updateFillAndStroke(textVmlEl, 'stroke', {
	      stroke: style.textStroke,
	      opacity: style.opacity,
	      lineDash: style.lineDash
	    }, this);
	    textVmlEl.style.zIndex = getZIndex(this.zlevel, this.z, this.z2); // Attached to root

	    append(vmlRoot, textVmlEl);
	  };

	  var removeRectText = function (vmlRoot) {
	    remove(vmlRoot, this._textVmlEl);
	    this._textVmlEl = null;
	  };

	  var appendRectText = function (vmlRoot) {
	    append(vmlRoot, this._textVmlEl);
	  };

	  var list = [RectText, Displayable, ZImage, Path, Text]; // In case Displayable has been mixed in RectText

	  for (var i = 0; i < list.length; i++) {
	    var proto = list[i].prototype;
	    proto.drawRectText = drawRectText;
	    proto.removeRectText = removeRectText;
	    proto.appendRectText = appendRectText;
	  }

	  Text.prototype.brushVML = function (vmlRoot) {
	    var style = this.style;

	    if (style.text != null) {
	      this.drawRectText(vmlRoot, {
	        x: style.x || 0,
	        y: style.y || 0,
	        width: 0,
	        height: 0
	      }, this.getBoundingRect(), true);
	    } else {
	      this.removeRectText(vmlRoot);
	    }
	  };

	  Text.prototype.onRemove = function (vmlRoot) {
	    this.removeRectText(vmlRoot);
	  };

	  Text.prototype.onAdd = function (vmlRoot) {
	    this.appendRectText(vmlRoot);
	  };
	}

/***/ },
/* 603 */
/***/ function(module, exports, __webpack_require__) {

	var env = __webpack_require__(165);

	var urn = 'urn:schemas-microsoft-com:vml';
	var win = typeof window === 'undefined' ? null : window;
	var vmlInited = false;
	var doc = win && win.document;

	function createNode(tagName) {
	  return doCreateNode(tagName);
	} // Avoid assign to an exported variable, for transforming to cjs.


	var doCreateNode;

	if (doc && !env.canvasSupported) {
	  try {
	    !doc.namespaces.zrvml && doc.namespaces.add('zrvml', urn);

	    doCreateNode = function (tagName) {
	      return doc.createElement('<zrvml:' + tagName + ' class="zrvml">');
	    };
	  } catch (e) {
	    doCreateNode = function (tagName) {
	      return doc.createElement('<' + tagName + ' xmlns="' + urn + '" class="zrvml">');
	    };
	  }
	} // From raphael


	function initVML() {
	  if (vmlInited || !doc) {
	    return;
	  }

	  vmlInited = true;
	  var styleSheets = doc.styleSheets;

	  if (styleSheets.length < 31) {
	    doc.createStyleSheet().addRule('.zrvml', 'behavior:url(#default#VML)');
	  } else {
	    // http://msdn.microsoft.com/en-us/library/ms531194%28VS.85%29.aspx
	    styleSheets[0].addRule('.zrvml', 'behavior:url(#default#VML)');
	  }
	}

	exports.doc = doc;
	exports.createNode = createNode;
	exports.initVML = initVML;

/***/ },
/* 604 */
/***/ function(module, exports, __webpack_require__) {

	var zrLog = __webpack_require__(182);

	var vmlCore = __webpack_require__(603);

	var _util = __webpack_require__(166);

	var each = _util.each;

	/**
	 * VML Painter.
	 *
	 * @module zrender/vml/Painter
	 */
	function parseInt10(val) {
	  return parseInt(val, 10);
	}
	/**
	 * @alias module:zrender/vml/Painter
	 */


	function VMLPainter(root, storage) {
	  vmlCore.initVML();
	  this.root = root;
	  this.storage = storage;
	  var vmlViewport = document.createElement('div');
	  var vmlRoot = document.createElement('div');
	  vmlViewport.style.cssText = 'display:inline-block;overflow:hidden;position:relative;width:300px;height:150px;';
	  vmlRoot.style.cssText = 'position:absolute;left:0;top:0;';
	  root.appendChild(vmlViewport);
	  this._vmlRoot = vmlRoot;
	  this._vmlViewport = vmlViewport;
	  this.resize(); // Modify storage

	  var oldDelFromStorage = storage.delFromStorage;
	  var oldAddToStorage = storage.addToStorage;

	  storage.delFromStorage = function (el) {
	    oldDelFromStorage.call(storage, el);

	    if (el) {
	      el.onRemove && el.onRemove(vmlRoot);
	    }
	  };

	  storage.addToStorage = function (el) {
	    // Displayable already has a vml node
	    el.onAdd && el.onAdd(vmlRoot);
	    oldAddToStorage.call(storage, el);
	  };

	  this._firstPaint = true;
	}

	VMLPainter.prototype = {
	  constructor: VMLPainter,
	  getType: function () {
	    return 'vml';
	  },

	  /**
	   * @return {HTMLDivElement}
	   */
	  getViewportRoot: function () {
	    return this._vmlViewport;
	  },
	  getViewportRootOffset: function () {
	    var viewportRoot = this.getViewportRoot();

	    if (viewportRoot) {
	      return {
	        offsetLeft: viewportRoot.offsetLeft || 0,
	        offsetTop: viewportRoot.offsetTop || 0
	      };
	    }
	  },

	  /**
	   * 刷新
	   */
	  refresh: function () {
	    var list = this.storage.getDisplayList(true, true);

	    this._paintList(list);
	  },
	  _paintList: function (list) {
	    var vmlRoot = this._vmlRoot;

	    for (var i = 0; i < list.length; i++) {
	      var el = list[i];

	      if (el.invisible || el.ignore) {
	        if (!el.__alreadyNotVisible) {
	          el.onRemove(vmlRoot);
	        } // Set as already invisible


	        el.__alreadyNotVisible = true;
	      } else {
	        if (el.__alreadyNotVisible) {
	          el.onAdd(vmlRoot);
	        }

	        el.__alreadyNotVisible = false;

	        if (el.__dirty) {
	          el.beforeBrush && el.beforeBrush();
	          (el.brushVML || el.brush).call(el, vmlRoot);
	          el.afterBrush && el.afterBrush();
	        }
	      }

	      el.__dirty = false;
	    }

	    if (this._firstPaint) {
	      // Detached from document at first time
	      // to avoid page refreshing too many times
	      // FIXME 如果每次都先 removeChild 可能会导致一些填充和描边的效果改变
	      this._vmlViewport.appendChild(vmlRoot);

	      this._firstPaint = false;
	    }
	  },
	  resize: function (width, height) {
	    var width = width == null ? this._getWidth() : width;
	    var height = height == null ? this._getHeight() : height;

	    if (this._width != width || this._height != height) {
	      this._width = width;
	      this._height = height;
	      var vmlViewportStyle = this._vmlViewport.style;
	      vmlViewportStyle.width = width + 'px';
	      vmlViewportStyle.height = height + 'px';
	    }
	  },
	  dispose: function () {
	    this.root.innerHTML = '';
	    this._vmlRoot = this._vmlViewport = this.storage = null;
	  },
	  getWidth: function () {
	    return this._width;
	  },
	  getHeight: function () {
	    return this._height;
	  },
	  clear: function () {
	    if (this._vmlViewport) {
	      this.root.removeChild(this._vmlViewport);
	    }
	  },
	  _getWidth: function () {
	    var root = this.root;
	    var stl = root.currentStyle;
	    return (root.clientWidth || parseInt10(stl.width)) - parseInt10(stl.paddingLeft) - parseInt10(stl.paddingRight) | 0;
	  },
	  _getHeight: function () {
	    var root = this.root;
	    var stl = root.currentStyle;
	    return (root.clientHeight || parseInt10(stl.height)) - parseInt10(stl.paddingTop) - parseInt10(stl.paddingBottom) | 0;
	  }
	}; // Not supported methods

	function createMethodNotSupport(method) {
	  return function () {
	    zrLog('In IE8.0 VML mode painter not support method "' + method + '"');
	  };
	} // Unsupported methods


	each(['getLayer', 'insertLayer', 'eachLayer', 'eachBuiltinLayer', 'eachOtherLayer', 'getLayers', 'modLayer', 'delLayer', 'clearLayer', 'toDataURL', 'pathToImage'], function (name) {
	  VMLPainter.prototype[name] = createMethodNotSupport(name);
	});
	var _default = VMLPainter;
	module.exports = _default;

/***/ },
/* 605 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(606);

	var _zrender = __webpack_require__(163);

	var registerPainter = _zrender.registerPainter;

	var Painter = __webpack_require__(608);

	registerPainter('svg', Painter);

/***/ },
/* 606 */
/***/ function(module, exports, __webpack_require__) {

	var _core = __webpack_require__(607);

	var createElement = _core.createElement;

	var PathProxy = __webpack_require__(215);

	var BoundingRect = __webpack_require__(184);

	var textContain = __webpack_require__(195);

	var textHelper = __webpack_require__(194);

	var Text = __webpack_require__(226);

	// TODO
	// 1. shadow
	// 2. Image: sx, sy, sw, sh
	var CMD = PathProxy.CMD;
	var arrayJoin = Array.prototype.join;
	var NONE = 'none';
	var mathRound = Math.round;
	var mathSin = Math.sin;
	var mathCos = Math.cos;
	var PI = Math.PI;
	var PI2 = Math.PI * 2;
	var degree = 180 / PI;
	var EPSILON = 1e-4;

	function round4(val) {
	  return mathRound(val * 1e4) / 1e4;
	}

	function isAroundZero(val) {
	  return val < EPSILON && val > -EPSILON;
	}

	function pathHasFill(style, isText) {
	  var fill = isText ? style.textFill : style.fill;
	  return fill != null && fill !== NONE;
	}

	function pathHasStroke(style, isText) {
	  var stroke = isText ? style.textStroke : style.stroke;
	  return stroke != null && stroke !== NONE;
	}

	function setTransform(svgEl, m) {
	  if (m) {
	    attr(svgEl, 'transform', 'matrix(' + arrayJoin.call(m, ',') + ')');
	  }
	}

	function attr(el, key, val) {
	  if (!val || val.type !== 'linear' && val.type !== 'radial') {
	    // Don't set attribute for gradient, since it need new dom nodes
	    el.setAttribute(key, val);
	  }
	}

	function attrXLink(el, key, val) {
	  el.setAttributeNS('http://www.w3.org/1999/xlink', key, val);
	}

	function bindStyle(svgEl, style, isText) {
	  if (pathHasFill(style, isText)) {
	    var fill = isText ? style.textFill : style.fill;
	    fill = fill === 'transparent' ? NONE : fill;
	    /**
	     * FIXME:
	     * This is a temporary fix for Chrome's clipping bug
	     * that happens when a clip-path is referring another one.
	     * This fix should be used before Chrome's bug is fixed.
	     * For an element that has clip-path, and fill is none,
	     * set it to be "rgba(0, 0, 0, 0.002)" will hide the element.
	     * Otherwise, it will show black fill color.
	     * 0.002 is used because this won't work for alpha values smaller
	     * than 0.002.
	     *
	     * See
	     * https://bugs.chromium.org/p/chromium/issues/detail?id=659790
	     * for more information.
	     */

	    if (svgEl.getAttribute('clip-path') !== 'none' && fill === NONE) {
	      fill = 'rgba(0, 0, 0, 0.002)';
	    }

	    attr(svgEl, 'fill', fill);
	    attr(svgEl, 'fill-opacity', style.opacity);
	  } else {
	    attr(svgEl, 'fill', NONE);
	  }

	  if (pathHasStroke(style, isText)) {
	    var stroke = isText ? style.textStroke : style.stroke;
	    stroke = stroke === 'transparent' ? NONE : stroke;
	    attr(svgEl, 'stroke', stroke);
	    var strokeWidth = isText ? style.textStrokeWidth : style.lineWidth;
	    var strokeScale = style.strokeNoScale ? style.host.getLineScale() : 1;
	    attr(svgEl, 'stroke-width', strokeWidth / strokeScale);
	    attr(svgEl, 'paint-order', 'stroke');
	    attr(svgEl, 'stroke-opacity', style.opacity);
	    var lineDash = style.lineDash;

	    if (lineDash) {
	      attr(svgEl, 'stroke-dasharray', style.lineDash.join(','));
	      attr(svgEl, 'stroke-dashoffset', mathRound(style.lineDashOffset || 0));
	    } else {
	      attr(svgEl, 'stroke-dasharray', '');
	    } // PENDING


	    style.lineCap && attr(svgEl, 'stroke-linecap', style.lineCap);
	    style.lineJoin && attr(svgEl, 'stroke-linejoin', style.lineJoin);
	    style.miterLimit && attr(svgEl, 'stroke-miterlimit', style.miterLimit);
	  } else {
	    attr(svgEl, 'stroke', NONE);
	  }
	}
	/***************************************************
	 * PATH
	 **************************************************/


	function pathDataToString(path) {
	  var str = [];
	  var data = path.data;
	  var dataLength = path.len();

	  for (var i = 0; i < dataLength;) {
	    var cmd = data[i++];
	    var cmdStr = '';
	    var nData = 0;

	    switch (cmd) {
	      case CMD.M:
	        cmdStr = 'M';
	        nData = 2;
	        break;

	      case CMD.L:
	        cmdStr = 'L';
	        nData = 2;
	        break;

	      case CMD.Q:
	        cmdStr = 'Q';
	        nData = 4;
	        break;

	      case CMD.C:
	        cmdStr = 'C';
	        nData = 6;
	        break;

	      case CMD.A:
	        var cx = data[i++];
	        var cy = data[i++];
	        var rx = data[i++];
	        var ry = data[i++];
	        var theta = data[i++];
	        var dTheta = data[i++];
	        var psi = data[i++];
	        var clockwise = data[i++];
	        var dThetaPositive = Math.abs(dTheta);
	        var isCircle = isAroundZero(dThetaPositive % PI2) && !isAroundZero(dThetaPositive);
	        var large = false;

	        if (dThetaPositive >= PI2) {
	          large = true;
	        } else if (isAroundZero(dThetaPositive)) {
	          large = false;
	        } else {
	          large = (dTheta > -PI && dTheta < 0 || dTheta > PI) === !!clockwise;
	        }

	        var x0 = round4(cx + rx * mathCos(theta));
	        var y0 = round4(cy + ry * mathSin(theta)); // It will not draw if start point and end point are exactly the same
	        // We need to shift the end point with a small value
	        // FIXME A better way to draw circle ?

	        if (isCircle) {
	          if (clockwise) {
	            dTheta = PI2 - 1e-4;
	          } else {
	            dTheta = -PI2 + 1e-4;
	          }

	          large = true;

	          if (i === 9) {
	            // Move to (x0, y0) only when CMD.A comes at the
	            // first position of a shape.
	            // For instance, when drawing a ring, CMD.A comes
	            // after CMD.M, so it's unnecessary to move to
	            // (x0, y0).
	            str.push('M', x0, y0);
	          }
	        }

	        var x = round4(cx + rx * mathCos(theta + dTheta));
	        var y = round4(cy + ry * mathSin(theta + dTheta)); // FIXME Ellipse

	        str.push('A', round4(rx), round4(ry), mathRound(psi * degree), +large, +clockwise, x, y);
	        break;

	      case CMD.Z:
	        cmdStr = 'Z';
	        break;

	      case CMD.R:
	        var x = round4(data[i++]);
	        var y = round4(data[i++]);
	        var w = round4(data[i++]);
	        var h = round4(data[i++]);
	        str.push('M', x, y, 'L', x + w, y, 'L', x + w, y + h, 'L', x, y + h, 'L', x, y);
	        break;
	    }

	    cmdStr && str.push(cmdStr);

	    for (var j = 0; j < nData; j++) {
	      // PENDING With scale
	      str.push(round4(data[i++]));
	    }
	  }

	  return str.join(' ');
	}

	var svgPath = {};

	svgPath.brush = function (el) {
	  var style = el.style;
	  var svgEl = el.__svgEl;

	  if (!svgEl) {
	    svgEl = createElement('path');
	    el.__svgEl = svgEl;
	  }

	  if (!el.path) {
	    el.createPathProxy();
	  }

	  var path = el.path;

	  if (el.__dirtyPath) {
	    path.beginPath();
	    el.buildPath(path, el.shape);
	    el.__dirtyPath = false;
	    var pathStr = pathDataToString(path);

	    if (pathStr.indexOf('NaN') < 0) {
	      // Ignore illegal path, which may happen such in out-of-range
	      // data in Calendar series.
	      attr(svgEl, 'd', pathStr);
	    }
	  }

	  bindStyle(svgEl, style);
	  setTransform(svgEl, el.transform);

	  if (style.text != null) {
	    svgTextDrawRectText(el, el.getBoundingRect());
	  }
	};
	/***************************************************
	 * IMAGE
	 **************************************************/


	var svgImage = {};

	svgImage.brush = function (el) {
	  var style = el.style;
	  var image = style.image;

	  if (image instanceof HTMLImageElement) {
	    var src = image.src;
	    image = src;
	  }

	  if (!image) {
	    return;
	  }

	  var x = style.x || 0;
	  var y = style.y || 0;
	  var dw = style.width;
	  var dh = style.height;
	  var svgEl = el.__svgEl;

	  if (!svgEl) {
	    svgEl = createElement('image');
	    el.__svgEl = svgEl;
	  }

	  if (image !== el.__imageSrc) {
	    attrXLink(svgEl, 'href', image); // Caching image src

	    el.__imageSrc = image;
	  }

	  attr(svgEl, 'width', dw);
	  attr(svgEl, 'height', dh);
	  attr(svgEl, 'x', x);
	  attr(svgEl, 'y', y);
	  setTransform(svgEl, el.transform);

	  if (style.text != null) {
	    svgTextDrawRectText(el, el.getBoundingRect());
	  }
	};
	/***************************************************
	 * TEXT
	 **************************************************/


	var svgText = {};
	var tmpRect = new BoundingRect();

	var svgTextDrawRectText = function (el, rect, textRect) {
	  var style = el.style;
	  el.__dirty && textHelper.normalizeTextStyle(style, true);
	  var text = style.text; // Convert to string

	  if (text == null) {
	    // Draw no text only when text is set to null, but not ''
	    return;
	  } else {
	    text += '';
	  }

	  var textSvgEl = el.__textSvgEl;

	  if (!textSvgEl) {
	    textSvgEl = createElement('text');
	    el.__textSvgEl = textSvgEl;
	  }

	  bindStyle(textSvgEl, style, true);

	  if (el instanceof Text || el.style.transformText) {
	    // Transform text with element
	    setTransform(textSvgEl, el.transform);
	  } else {
	    if (el.transform) {
	      tmpRect.copy(rect);
	      tmpRect.applyTransform(el.transform);
	      rect = tmpRect;
	    } else {
	      var pos = el.transformCoordToGlobal(rect.x, rect.y);
	      rect.x = pos[0];
	      rect.y = pos[1];
	    }
	  }

	  var x;
	  var y;
	  var textPosition = style.textPosition;
	  var distance = style.textDistance;
	  var align = style.textAlign || 'left';

	  if (typeof style.fontSize === 'number') {
	    style.fontSize += 'px';
	  }

	  var font = style.font || [style.fontStyle || '', style.fontWeight || '', style.fontSize || '', style.fontFamily || ''].join(' ') || textContain.DEFAULT_FONT;
	  var verticalAlign = getVerticalAlignForSvg(style.textVerticalAlign);
	  textRect = textContain.getBoundingRect(text, font, align, verticalAlign);
	  var lineHeight = textRect.lineHeight; // Text position represented by coord

	  if (textPosition instanceof Array) {
	    x = rect.x + textPosition[0];
	    y = rect.y + textPosition[1];
	  } else {
	    var newPos = textContain.adjustTextPositionOnRect(textPosition, rect, distance);
	    x = newPos.x;
	    y = newPos.y;
	    verticalAlign = getVerticalAlignForSvg(newPos.textVerticalAlign);
	    align = newPos.textAlign;
	  }

	  attr(textSvgEl, 'alignment-baseline', verticalAlign);

	  if (font) {
	    textSvgEl.style.font = font;
	  }

	  var textPadding = style.textPadding; // Make baseline top

	  attr(textSvgEl, 'x', x);
	  attr(textSvgEl, 'y', y);
	  var textLines = text.split('\n');
	  var nTextLines = textLines.length;
	  var textAnchor = align; // PENDING

	  if (textAnchor === 'left') {
	    textAnchor = 'start';
	    textPadding && (x += textPadding[3]);
	  } else if (textAnchor === 'right') {
	    textAnchor = 'end';
	    textPadding && (x -= textPadding[1]);
	  } else if (textAnchor === 'center') {
	    textAnchor = 'middle';
	    textPadding && (x += (textPadding[3] - textPadding[1]) / 2);
	  }

	  var dy = 0;

	  if (verticalAlign === 'baseline') {
	    dy = -textRect.height + lineHeight;
	    textPadding && (dy -= textPadding[2]);
	  } else if (verticalAlign === 'middle') {
	    dy = (-textRect.height + lineHeight) / 2;
	    textPadding && (y += (textPadding[0] - textPadding[2]) / 2);
	  } else {
	    textPadding && (dy += textPadding[0]);
	  } // Font may affect position of each tspan elements


	  if (el.__text !== text || el.__textFont !== font) {
	    var tspanList = el.__tspanList || [];
	    el.__tspanList = tspanList;

	    for (var i = 0; i < nTextLines; i++) {
	      // Using cached tspan elements
	      var tspan = tspanList[i];

	      if (!tspan) {
	        tspan = tspanList[i] = createElement('tspan');
	        textSvgEl.appendChild(tspan);
	        attr(tspan, 'alignment-baseline', verticalAlign);
	        attr(tspan, 'text-anchor', textAnchor);
	      } else {
	        tspan.innerHTML = '';
	      }

	      attr(tspan, 'x', x);
	      attr(tspan, 'y', y + i * lineHeight + dy);
	      tspan.appendChild(document.createTextNode(textLines[i]));
	    } // Remove unsed tspan elements


	    for (; i < tspanList.length; i++) {
	      textSvgEl.removeChild(tspanList[i]);
	    }

	    tspanList.length = nTextLines;
	    el.__text = text;
	    el.__textFont = font;
	  } else if (el.__tspanList.length) {
	    // Update span x and y
	    var len = el.__tspanList.length;

	    for (var i = 0; i < len; ++i) {
	      var tspan = el.__tspanList[i];

	      if (tspan) {
	        attr(tspan, 'x', x);
	        attr(tspan, 'y', y + i * lineHeight + dy);
	      }
	    }
	  }
	};

	function getVerticalAlignForSvg(verticalAlign) {
	  if (verticalAlign === 'middle') {
	    return 'middle';
	  } else if (verticalAlign === 'bottom') {
	    return 'baseline';
	  } else {
	    return 'hanging';
	  }
	}

	svgText.drawRectText = svgTextDrawRectText;

	svgText.brush = function (el) {
	  var style = el.style;

	  if (style.text != null) {
	    // 强制设置 textPosition
	    style.textPosition = [0, 0];
	    svgTextDrawRectText(el, {
	      x: style.x || 0,
	      y: style.y || 0,
	      width: 0,
	      height: 0
	    }, el.getBoundingRect());
	  }
	};

	exports.path = svgPath;
	exports.image = svgImage;
	exports.text = svgText;

/***/ },
/* 607 */
/***/ function(module, exports) {

	var svgURI = 'http://www.w3.org/2000/svg';

	function createElement(name) {
	  return document.createElementNS(svgURI, name);
	}

	exports.createElement = createElement;

/***/ },
/* 608 */
/***/ function(module, exports, __webpack_require__) {

	var _core = __webpack_require__(607);

	var createElement = _core.createElement;

	var util = __webpack_require__(166);

	var each = util.each;

	var zrLog = __webpack_require__(182);

	var Path = __webpack_require__(214);

	var ZImage = __webpack_require__(191);

	var ZText = __webpack_require__(226);

	var arrayDiff = __webpack_require__(609);

	var GradientManager = __webpack_require__(610);

	var ClippathManager = __webpack_require__(612);

	var _graphic = __webpack_require__(606);

	var svgPath = _graphic.path;
	var svgImage = _graphic.image;
	var svgText = _graphic.text;

	/**
	 * SVG Painter
	 * @module zrender/svg/Painter
	 */
	function parseInt10(val) {
	  return parseInt(val, 10);
	}

	function getSvgProxy(el) {
	  if (el instanceof Path) {
	    return svgPath;
	  } else if (el instanceof ZImage) {
	    return svgImage;
	  } else if (el instanceof ZText) {
	    return svgText;
	  } else {
	    return svgPath;
	  }
	}

	function checkParentAvailable(parent, child) {
	  return child && parent && child.parentNode !== parent;
	}

	function insertAfter(parent, child, prevSibling) {
	  if (checkParentAvailable(parent, child) && prevSibling) {
	    var nextSibling = prevSibling.nextSibling;
	    nextSibling ? parent.insertBefore(child, nextSibling) : parent.appendChild(child);
	  }
	}

	function prepend(parent, child) {
	  if (checkParentAvailable(parent, child)) {
	    var firstChild = parent.firstChild;
	    firstChild ? parent.insertBefore(child, firstChild) : parent.appendChild(child);
	  }
	}

	function append(parent, child) {
	  if (checkParentAvailable(parent, child)) {
	    parent.appendChild(child);
	  }
	}

	function remove(parent, child) {
	  if (child && parent && child.parentNode === parent) {
	    parent.removeChild(child);
	  }
	}

	function getTextSvgElement(displayable) {
	  return displayable.__textSvgEl;
	}

	function getSvgElement(displayable) {
	  return displayable.__svgEl;
	}
	/**
	 * @alias module:zrender/svg/Painter
	 * @constructor
	 * @param {HTMLElement} root 绘图容器
	 * @param {module:zrender/Storage} storage
	 * @param {Object} opts
	 */


	var SVGPainter = function (root, storage, opts) {
	  this.root = root;
	  this.storage = storage;
	  this._opts = opts = util.extend({}, opts || {});
	  var svgRoot = createElement('svg');
	  svgRoot.setAttribute('xmlns', 'http://www.w3.org/2000/svg');
	  svgRoot.setAttribute('version', '1.1');
	  svgRoot.setAttribute('baseProfile', 'full');
	  svgRoot.style['user-select'] = 'none';
	  svgRoot.style.cssText = 'position:absolute;left:0;top:0;';
	  this.gradientManager = new GradientManager(svgRoot);
	  this.clipPathManager = new ClippathManager(svgRoot);
	  var viewport = document.createElement('div');
	  viewport.style.cssText = 'overflow:hidden;position:relative';
	  this._svgRoot = svgRoot;
	  this._viewport = viewport;
	  root.appendChild(viewport);
	  viewport.appendChild(svgRoot);
	  this.resize(opts.width, opts.height);
	  this._visibleList = [];
	};

	SVGPainter.prototype = {
	  constructor: SVGPainter,
	  getType: function () {
	    return 'svg';
	  },
	  getViewportRoot: function () {
	    return this._viewport;
	  },
	  getViewportRootOffset: function () {
	    var viewportRoot = this.getViewportRoot();

	    if (viewportRoot) {
	      return {
	        offsetLeft: viewportRoot.offsetLeft || 0,
	        offsetTop: viewportRoot.offsetTop || 0
	      };
	    }
	  },
	  refresh: function () {
	    var list = this.storage.getDisplayList(true);

	    this._paintList(list);
	  },
	  _paintList: function (list) {
	    this.gradientManager.markAllUnused();
	    this.clipPathManager.markAllUnused();
	    var svgRoot = this._svgRoot;
	    var visibleList = this._visibleList;
	    var listLen = list.length;
	    var newVisibleList = [];
	    var i;

	    for (i = 0; i < listLen; i++) {
	      var displayable = list[i];
	      var svgProxy = getSvgProxy(displayable);

	      if (!displayable.invisible) {
	        if (displayable.__dirty) {
	          svgProxy && svgProxy.brush(displayable); // Update clipPath

	          this.clipPathManager.update(displayable); // Update gradient

	          if (displayable.style) {
	            this.gradientManager.update(displayable.style.fill);
	            this.gradientManager.update(displayable.style.stroke);
	          }

	          displayable.__dirty = false;
	        }

	        newVisibleList.push(displayable);
	      }
	    }

	    var diff = arrayDiff(visibleList, newVisibleList);
	    var prevSvgElement; // First do remove, in case element moved to the head and do remove
	    // after add

	    for (i = 0; i < diff.length; i++) {
	      var item = diff[i];

	      if (item.removed) {
	        for (var k = 0; k < item.count; k++) {
	          var displayable = visibleList[item.indices[k]];
	          var svgElement = getSvgElement(displayable);
	          var textSvgElement = getTextSvgElement(displayable);
	          remove(svgRoot, svgElement);
	          remove(svgRoot, textSvgElement);
	        }
	      }
	    }

	    for (i = 0; i < diff.length; i++) {
	      var item = diff[i];

	      if (item.added) {
	        for (var k = 0; k < item.count; k++) {
	          var displayable = newVisibleList[item.indices[k]];
	          var svgElement = getSvgElement(displayable);
	          var textSvgElement = getTextSvgElement(displayable);
	          prevSvgElement ? insertAfter(svgRoot, svgElement, prevSvgElement) : prepend(svgRoot, svgElement);

	          if (svgElement) {
	            insertAfter(svgRoot, textSvgElement, svgElement);
	          } else if (prevSvgElement) {
	            insertAfter(svgRoot, textSvgElement, prevSvgElement);
	          } else {
	            prepend(svgRoot, textSvgElement);
	          } // Insert text


	          insertAfter(svgRoot, textSvgElement, svgElement);
	          prevSvgElement = textSvgElement || svgElement || prevSvgElement;
	          this.gradientManager.addWithoutUpdate(svgElement, displayable);
	          this.clipPathManager.markUsed(displayable);
	        }
	      } else if (!item.removed) {
	        for (var k = 0; k < item.count; k++) {
	          var displayable = newVisibleList[item.indices[k]];
	          prevSvgElement = svgElement = getTextSvgElement(displayable) || getSvgElement(displayable) || prevSvgElement;
	          this.gradientManager.markUsed(displayable);
	          this.gradientManager.addWithoutUpdate(svgElement, displayable);
	          this.clipPathManager.markUsed(displayable);
	        }
	      }
	    }

	    this.gradientManager.removeUnused();
	    this.clipPathManager.removeUnused();
	    this._visibleList = newVisibleList;
	  },
	  _getDefs: function (isForceCreating) {
	    var svgRoot = this._svgRoot;

	    var defs = this._svgRoot.getElementsByTagName('defs');

	    if (defs.length === 0) {
	      // Not exist
	      if (isForceCreating) {
	        var defs = svgRoot.insertBefore(createElement('defs'), // Create new tag
	        svgRoot.firstChild // Insert in the front of svg
	        );

	        if (!defs.contains) {
	          // IE doesn't support contains method
	          defs.contains = function (el) {
	            var children = defs.children;

	            if (!children) {
	              return false;
	            }

	            for (var i = children.length - 1; i >= 0; --i) {
	              if (children[i] === el) {
	                return true;
	              }
	            }

	            return false;
	          };
	        }

	        return defs;
	      } else {
	        return null;
	      }
	    } else {
	      return defs[0];
	    }
	  },
	  resize: function (width, height) {
	    var viewport = this._viewport; // FIXME Why ?

	    viewport.style.display = 'none'; // Save input w/h

	    var opts = this._opts;
	    width != null && (opts.width = width);
	    height != null && (opts.height = height);
	    width = this._getSize(0);
	    height = this._getSize(1);
	    viewport.style.display = '';

	    if (this._width !== width && this._height !== height) {
	      this._width = width;
	      this._height = height;
	      var viewportStyle = viewport.style;
	      viewportStyle.width = width + 'px';
	      viewportStyle.height = height + 'px';
	      var svgRoot = this._svgRoot; // Set width by 'svgRoot.width = width' is invalid

	      svgRoot.setAttribute('width', width);
	      svgRoot.setAttribute('height', height);
	    }
	  },

	  /**
	   * 获取绘图区域宽度
	   */
	  getWidth: function () {
	    return this._width;
	  },

	  /**
	   * 获取绘图区域高度
	   */
	  getHeight: function () {
	    return this._height;
	  },
	  _getSize: function (whIdx) {
	    var opts = this._opts;
	    var wh = ['width', 'height'][whIdx];
	    var cwh = ['clientWidth', 'clientHeight'][whIdx];
	    var plt = ['paddingLeft', 'paddingTop'][whIdx];
	    var prb = ['paddingRight', 'paddingBottom'][whIdx];

	    if (opts[wh] != null && opts[wh] !== 'auto') {
	      return parseFloat(opts[wh]);
	    }

	    var root = this.root; // IE8 does not support getComputedStyle, but it use VML.

	    var stl = document.defaultView.getComputedStyle(root);
	    return (root[cwh] || parseInt10(stl[wh]) || parseInt10(root.style[wh])) - (parseInt10(stl[plt]) || 0) - (parseInt10(stl[prb]) || 0) | 0;
	  },
	  dispose: function () {
	    this.root.innerHTML = '';
	    this._svgRoot = this._viewport = this.storage = null;
	  },
	  clear: function () {
	    if (this._viewport) {
	      this.root.removeChild(this._viewport);
	    }
	  },
	  pathToSvg: function () {
	    this.refresh();
	    var html = this._svgRoot.outerHTML;
	    return 'data:img/svg+xml;utf-8,' + unescape(html);
	  }
	}; // Not supported methods

	function createMethodNotSupport(method) {
	  return function () {
	    zrLog('In SVG mode painter not support method "' + method + '"');
	  };
	} // Unsuppoted methods


	each(['getLayer', 'insertLayer', 'eachLayer', 'eachBuiltinLayer', 'eachOtherLayer', 'getLayers', 'modLayer', 'delLayer', 'clearLayer', 'toDataURL', 'pathToImage'], function (name) {
	  SVGPainter.prototype[name] = createMethodNotSupport(name);
	});
	var _default = SVGPainter;
	module.exports = _default;

/***/ },
/* 609 */
/***/ function(module, exports) {

	// Myers' Diff Algorithm
	// Modified from https://github.com/kpdecker/jsdiff/blob/master/src/diff/base.js
	function Diff() {}

	Diff.prototype = {
	  diff: function (oldArr, newArr, equals) {
	    if (!equals) {
	      equals = function (a, b) {
	        return a === b;
	      };
	    }

	    this.equals = equals;
	    var self = this;
	    oldArr = oldArr.slice();
	    newArr = newArr.slice(); // Allow subclasses to massage the input prior to running

	    var newLen = newArr.length;
	    var oldLen = oldArr.length;
	    var editLength = 1;
	    var maxEditLength = newLen + oldLen;
	    var bestPath = [{
	      newPos: -1,
	      components: []
	    }]; // Seed editLength = 0, i.e. the content starts with the same values

	    var oldPos = this.extractCommon(bestPath[0], newArr, oldArr, 0);

	    if (bestPath[0].newPos + 1 >= newLen && oldPos + 1 >= oldLen) {
	      var indices = [];

	      for (var i = 0; i < newArr.length; i++) {
	        indices.push(i);
	      } // Identity per the equality and tokenizer


	      return [{
	        indices: indices,
	        count: newArr.length
	      }];
	    } // Main worker method. checks all permutations of a given edit length for acceptance.


	    function execEditLength() {
	      for (var diagonalPath = -1 * editLength; diagonalPath <= editLength; diagonalPath += 2) {
	        var basePath;
	        var addPath = bestPath[diagonalPath - 1];
	        var removePath = bestPath[diagonalPath + 1];
	        var oldPos = (removePath ? removePath.newPos : 0) - diagonalPath;

	        if (addPath) {
	          // No one else is going to attempt to use this value, clear it
	          bestPath[diagonalPath - 1] = undefined;
	        }

	        var canAdd = addPath && addPath.newPos + 1 < newLen;
	        var canRemove = removePath && 0 <= oldPos && oldPos < oldLen;

	        if (!canAdd && !canRemove) {
	          // If this path is a terminal then prune
	          bestPath[diagonalPath] = undefined;
	          continue;
	        } // Select the diagonal that we want to branch from. We select the prior
	        // path whose position in the new string is the farthest from the origin
	        // and does not pass the bounds of the diff graph


	        if (!canAdd || canRemove && addPath.newPos < removePath.newPos) {
	          basePath = clonePath(removePath);
	          self.pushComponent(basePath.components, undefined, true);
	        } else {
	          basePath = addPath; // No need to clone, we've pulled it from the list

	          basePath.newPos++;
	          self.pushComponent(basePath.components, true, undefined);
	        }

	        oldPos = self.extractCommon(basePath, newArr, oldArr, diagonalPath); // If we have hit the end of both strings, then we are done

	        if (basePath.newPos + 1 >= newLen && oldPos + 1 >= oldLen) {
	          return buildValues(self, basePath.components, newArr, oldArr);
	        } else {
	          // Otherwise track this path as a potential candidate and continue.
	          bestPath[diagonalPath] = basePath;
	        }
	      }

	      editLength++;
	    }

	    while (editLength <= maxEditLength) {
	      var ret = execEditLength();

	      if (ret) {
	        return ret;
	      }
	    }
	  },
	  pushComponent: function (components, added, removed) {
	    var last = components[components.length - 1];

	    if (last && last.added === added && last.removed === removed) {
	      // We need to clone here as the component clone operation is just
	      // as shallow array clone
	      components[components.length - 1] = {
	        count: last.count + 1,
	        added: added,
	        removed: removed
	      };
	    } else {
	      components.push({
	        count: 1,
	        added: added,
	        removed: removed
	      });
	    }
	  },
	  extractCommon: function (basePath, newArr, oldArr, diagonalPath) {
	    var newLen = newArr.length;
	    var oldLen = oldArr.length;
	    var newPos = basePath.newPos;
	    var oldPos = newPos - diagonalPath;
	    var commonCount = 0;

	    while (newPos + 1 < newLen && oldPos + 1 < oldLen && this.equals(newArr[newPos + 1], oldArr[oldPos + 1])) {
	      newPos++;
	      oldPos++;
	      commonCount++;
	    }

	    if (commonCount) {
	      basePath.components.push({
	        count: commonCount
	      });
	    }

	    basePath.newPos = newPos;
	    return oldPos;
	  },
	  tokenize: function (value) {
	    return value.slice();
	  },
	  join: function (value) {
	    return value.slice();
	  }
	};

	function buildValues(diff, components, newArr, oldArr) {
	  var componentPos = 0;
	  var componentLen = components.length;
	  var newPos = 0;
	  var oldPos = 0;

	  for (; componentPos < componentLen; componentPos++) {
	    var component = components[componentPos];

	    if (!component.removed) {
	      var indices = [];

	      for (var i = newPos; i < newPos + component.count; i++) {
	        indices.push(i);
	      }

	      component.indices = indices;
	      newPos += component.count; // Common case

	      if (!component.added) {
	        oldPos += component.count;
	      }
	    } else {
	      var indices = [];

	      for (var i = oldPos; i < oldPos + component.count; i++) {
	        indices.push(i);
	      }

	      component.indices = indices;
	      oldPos += component.count;
	    }
	  }

	  return components;
	}

	function clonePath(path) {
	  return {
	    newPos: path.newPos,
	    components: path.components.slice(0)
	  };
	}

	var arrayDiff = new Diff();

	function _default(oldArr, newArr, callback) {
	  return arrayDiff.diff(oldArr, newArr, callback);
	}

	module.exports = _default;

/***/ },
/* 610 */
/***/ function(module, exports, __webpack_require__) {

	var Definable = __webpack_require__(611);

	var zrUtil = __webpack_require__(166);

	var zrLog = __webpack_require__(182);

	/**
	 * @file Manages SVG gradient elements.
	 * @author Zhang Wenli
	 */

	/**
	 * Manages SVG gradient elements.
	 *
	 * @class
	 * @extends Definable
	 * @param   {SVGElement} svgRoot root of SVG document
	 */
	function GradientManager(svgRoot) {
	  Definable.call(this, svgRoot, ['linearGradient', 'radialGradient'], '__gradient_in_use__');
	}

	zrUtil.inherits(GradientManager, Definable);
	/**
	 * Create new gradient DOM for fill or stroke if not exist,
	 * but will not update gradient if exists.
	 *
	 * @param {SvgElement}  svgElement   SVG element to paint
	 * @param {Displayable} displayable  zrender displayable element
	 */

	GradientManager.prototype.addWithoutUpdate = function (svgElement, displayable) {
	  if (displayable && displayable.style) {
	    var that = this;
	    zrUtil.each(['fill', 'stroke'], function (fillOrStroke) {
	      if (displayable.style[fillOrStroke] && (displayable.style[fillOrStroke].type === 'linear' || displayable.style[fillOrStroke].type === 'radial')) {
	        var gradient = displayable.style[fillOrStroke];
	        var defs = that.getDefs(true); // Create dom in <defs> if not exists

	        var dom;

	        if (gradient._dom) {
	          // Gradient exists
	          dom = gradient._dom;

	          if (!defs.contains(gradient._dom)) {
	            // _dom is no longer in defs, recreate
	            that.addDom(dom);
	          }
	        } else {
	          // New dom
	          dom = that.add(gradient);
	        }

	        that.markUsed(displayable);
	        var id = dom.getAttribute('id');
	        svgElement.setAttribute(fillOrStroke, 'url(#' + id + ')');
	      }
	    });
	  }
	};
	/**
	 * Add a new gradient tag in <defs>
	 *
	 * @param   {Gradient} gradient zr gradient instance
	 * @return {SVGLinearGradientElement | SVGRadialGradientElement}
	 *                            created DOM
	 */


	GradientManager.prototype.add = function (gradient) {
	  var dom;

	  if (gradient.type === 'linear') {
	    dom = this.createElement('linearGradient');
	  } else if (gradient.type === 'radial') {
	    dom = this.createElement('radialGradient');
	  } else {
	    zrLog('Illegal gradient type.');
	    return null;
	  } // Set dom id with gradient id, since each gradient instance
	  // will have no more than one dom element.
	  // id may exists before for those dirty elements, in which case
	  // id should remain the same, and other attributes should be
	  // updated.


	  gradient.id = gradient.id || this.nextId++;
	  dom.setAttribute('id', 'zr-gradient-' + gradient.id);
	  this.updateDom(gradient, dom);
	  this.addDom(dom);
	  return dom;
	};
	/**
	 * Update gradient.
	 *
	 * @param {Gradient} gradient zr gradient instance
	 */


	GradientManager.prototype.update = function (gradient) {
	  var that = this;
	  Definable.prototype.update.call(this, gradient, function () {
	    var type = gradient.type;
	    var tagName = gradient._dom.tagName;

	    if (type === 'linear' && tagName === 'linearGradient' || type === 'radial' && tagName === 'radialGradient') {
	      // Gradient type is not changed, update gradient
	      that.updateDom(gradient, gradient._dom);
	    } else {
	      // Remove and re-create if type is changed
	      that.removeDom(gradient);
	      that.add(gradient);
	    }
	  });
	};
	/**
	 * Update gradient dom
	 *
	 * @param {Gradient} gradient zr gradient instance
	 * @param {SVGLinearGradientElement | SVGRadialGradientElement} dom
	 *                            DOM to update
	 */


	GradientManager.prototype.updateDom = function (gradient, dom) {
	  if (gradient.type === 'linear') {
	    dom.setAttribute('x1', gradient.x);
	    dom.setAttribute('y1', gradient.y);
	    dom.setAttribute('x2', gradient.x2);
	    dom.setAttribute('y2', gradient.y2);
	  } else if (gradient.type === 'radial') {
	    dom.setAttribute('cx', gradient.x);
	    dom.setAttribute('cy', gradient.y);
	    dom.setAttribute('r', gradient.r);
	  } else {
	    zrLog('Illegal gradient type.');
	    return;
	  }

	  if (gradient.global) {
	    // x1, x2, y1, y2 in range of 0 to canvas width or height
	    dom.setAttribute('gradientUnits', 'userSpaceOnUse');
	  } else {
	    // x1, x2, y1, y2 in range of 0 to 1
	    dom.setAttribute('gradientUnits', 'objectBoundingBox');
	  } // Remove color stops if exists


	  dom.innerHTML = ''; // Add color stops

	  var colors = gradient.colorStops;

	  for (var i = 0, len = colors.length; i < len; ++i) {
	    var stop = this.createElement('stop');
	    stop.setAttribute('offset', colors[i].offset * 100 + '%');
	    stop.setAttribute('stop-color', colors[i].color);
	    dom.appendChild(stop);
	  } // Store dom element in gradient, to avoid creating multiple
	  // dom instances for the same gradient element


	  gradient._dom = dom;
	};
	/**
	 * Mark a single gradient to be used
	 *
	 * @param {Displayable} displayable displayable element
	 */


	GradientManager.prototype.markUsed = function (displayable) {
	  if (displayable.style) {
	    var gradient = displayable.style.fill;

	    if (gradient && gradient._dom) {
	      Definable.prototype.markUsed.call(this, gradient._dom);
	    }

	    gradient = displayable.style.stroke;

	    if (gradient && gradient._dom) {
	      Definable.prototype.markUsed.call(this, gradient._dom);
	    }
	  }
	};

	var _default = GradientManager;
	module.exports = _default;

/***/ },
/* 611 */
/***/ function(module, exports, __webpack_require__) {

	var _core = __webpack_require__(607);

	var createElement = _core.createElement;

	var zrUtil = __webpack_require__(166);

	var Path = __webpack_require__(214);

	var ZImage = __webpack_require__(191);

	var ZText = __webpack_require__(226);

	var _graphic = __webpack_require__(606);

	var svgPath = _graphic.path;
	var svgImage = _graphic.image;
	var svgText = _graphic.text;

	/**
	 * @file Manages elements that can be defined in <defs> in SVG,
	 *       e.g., gradients, clip path, etc.
	 * @author Zhang Wenli
	 */
	var MARK_UNUSED = '0';
	var MARK_USED = '1';
	/**
	 * Manages elements that can be defined in <defs> in SVG,
	 * e.g., gradients, clip path, etc.
	 *
	 * @class
	 * @param {SVGElement}      svgRoot   root of SVG document
	 * @param {string|string[]} tagNames  possible tag names
	 * @param {string}          markLabel label name to make if the element
	 *                                    is used
	 */

	function Definable(svgRoot, tagNames, markLabel) {
	  this._svgRoot = svgRoot;
	  this._tagNames = typeof tagNames === 'string' ? [tagNames] : tagNames;
	  this._markLabel = markLabel;
	  this.nextId = 0;
	}

	Definable.prototype.createElement = createElement;
	/**
	 * Get the <defs> tag for svgRoot; optionally creates one if not exists.
	 *
	 * @param {boolean} isForceCreating if need to create when not exists
	 * @return {SVGDefsElement} SVG <defs> element, null if it doesn't
	 * exist and isForceCreating is false
	 */

	Definable.prototype.getDefs = function (isForceCreating) {
	  var svgRoot = this._svgRoot;

	  var defs = this._svgRoot.getElementsByTagName('defs');

	  if (defs.length === 0) {
	    // Not exist
	    if (isForceCreating) {
	      defs = svgRoot.insertBefore(this.createElement('defs'), // Create new tag
	      svgRoot.firstChild // Insert in the front of svg
	      );

	      if (!defs.contains) {
	        // IE doesn't support contains method
	        defs.contains = function (el) {
	          var children = defs.children;

	          if (!children) {
	            return false;
	          }

	          for (var i = children.length - 1; i >= 0; --i) {
	            if (children[i] === el) {
	              return true;
	            }
	          }

	          return false;
	        };
	      }

	      return defs;
	    } else {
	      return null;
	    }
	  } else {
	    return defs[0];
	  }
	};
	/**
	 * Update DOM element if necessary.
	 *
	 * @param {Object|string} element style element. e.g., for gradient,
	 *                                it may be '#ccc' or {type: 'linear', ...}
	 * @param {Function|undefined} onUpdate update callback
	 */


	Definable.prototype.update = function (element, onUpdate) {
	  if (!element) {
	    return;
	  }

	  var defs = this.getDefs(false);

	  if (element._dom && defs.contains(element._dom)) {
	    // Update DOM
	    if (typeof onUpdate === 'function') {
	      onUpdate();
	    }
	  } else {
	    // No previous dom, create new
	    var dom = this.add(element);

	    if (dom) {
	      element._dom = dom;
	    }
	  }
	};
	/**
	 * Add gradient dom to defs
	 *
	 * @param {SVGElement} dom DOM to be added to <defs>
	 */


	Definable.prototype.addDom = function (dom) {
	  var defs = this.getDefs(true);
	  defs.appendChild(dom);
	};
	/**
	 * Remove DOM of a given element.
	 *
	 * @param {SVGElement} element element to remove dom
	 */


	Definable.prototype.removeDom = function (element) {
	  var defs = this.getDefs(false);
	  defs.removeChild(element._dom);
	};
	/**
	 * Get DOMs of this element.
	 *
	 * @return {HTMLDomElement} doms of this defineable elements in <defs>
	 */


	Definable.prototype.getDoms = function () {
	  var defs = this.getDefs(false);

	  if (!defs) {
	    // No dom when defs is not defined
	    return [];
	  }

	  var doms = [];
	  zrUtil.each(this._tagNames, function (tagName) {
	    var tags = defs.getElementsByTagName(tagName); // Note that tags is HTMLCollection, which is array-like
	    // rather than real array.
	    // So `doms.concat(tags)` add tags as one object.

	    doms = doms.concat([].slice.call(tags));
	  });
	  return doms;
	};
	/**
	 * Mark DOMs to be unused before painting, and clear unused ones at the end
	 * of the painting.
	 */


	Definable.prototype.markAllUnused = function () {
	  var doms = this.getDoms();
	  var that = this;
	  zrUtil.each(doms, function (dom) {
	    dom[that._markLabel] = MARK_UNUSED;
	  });
	};
	/**
	 * Mark a single DOM to be used.
	 *
	 * @param {SVGElement} dom DOM to mark
	 */


	Definable.prototype.markUsed = function (dom) {
	  if (dom) {
	    dom[this._markLabel] = MARK_USED;
	  }
	};
	/**
	 * Remove unused DOMs defined in <defs>
	 */


	Definable.prototype.removeUnused = function () {
	  var defs = this.getDefs(false);

	  if (!defs) {
	    // Nothing to remove
	    return;
	  }

	  var doms = this.getDoms();
	  var that = this;
	  zrUtil.each(doms, function (dom) {
	    if (dom[that._markLabel] !== MARK_USED) {
	      // Remove gradient
	      defs.removeChild(dom);
	    }
	  });
	};
	/**
	 * Get SVG proxy.
	 *
	 * @param {Displayable} displayable displayable element
	 * @return {Path|Image|Text} svg proxy of given element
	 */


	Definable.prototype.getSvgProxy = function (displayable) {
	  if (displayable instanceof Path) {
	    return svgPath;
	  } else if (displayable instanceof ZImage) {
	    return svgImage;
	  } else if (displayable instanceof ZText) {
	    return svgText;
	  } else {
	    return svgPath;
	  }
	};
	/**
	 * Get text SVG element.
	 *
	 * @param {Displayable} displayable displayable element
	 * @return {SVGElement} SVG element of text
	 */


	Definable.prototype.getTextSvgElement = function (displayable) {
	  return displayable.__textSvgEl;
	};
	/**
	 * Get SVG element.
	 *
	 * @param {Displayable} displayable displayable element
	 * @return {SVGElement} SVG element
	 */


	Definable.prototype.getSvgElement = function (displayable) {
	  return displayable.__svgEl;
	};

	var _default = Definable;
	module.exports = _default;

/***/ },
/* 612 */
/***/ function(module, exports, __webpack_require__) {

	var Definable = __webpack_require__(611);

	var zrUtil = __webpack_require__(166);

	var matrix = __webpack_require__(175);

	/**
	 * @file Manages SVG clipPath elements.
	 * @author Zhang Wenli
	 */

	/**
	 * Manages SVG clipPath elements.
	 *
	 * @class
	 * @extends Definable
	 * @param   {SVGElement} svgRoot root of SVG document
	 */
	function ClippathManager(svgRoot) {
	  Definable.call(this, svgRoot, 'clipPath', '__clippath_in_use__');
	}

	zrUtil.inherits(ClippathManager, Definable);
	/**
	 * Update clipPath.
	 *
	 * @param {Displayable} displayable displayable element
	 */

	ClippathManager.prototype.update = function (displayable) {
	  var svgEl = this.getSvgElement(displayable);

	  if (svgEl) {
	    this.updateDom(svgEl, displayable.__clipPaths, false);
	  }

	  var textEl = this.getTextSvgElement(displayable);

	  if (textEl) {
	    // Make another clipPath for text, since it's transform
	    // matrix is not the same with svgElement
	    this.updateDom(textEl, displayable.__clipPaths, true);
	  }

	  this.markUsed(displayable);
	};
	/**
	 * Create an SVGElement of displayable and create a <clipPath> of its
	 * clipPath
	 *
	 * @param {Displayable} parentEl  parent element
	 * @param {ClipPath[]}  clipPaths clipPaths of parent element
	 * @param {boolean}     isText    if parent element is Text
	 */


	ClippathManager.prototype.updateDom = function (parentEl, clipPaths, isText) {
	  if (clipPaths && clipPaths.length > 0) {
	    // Has clipPath, create <clipPath> with the first clipPath
	    var defs = this.getDefs(true);
	    var clipPath = clipPaths[0];
	    var clipPathEl;
	    var id;
	    var dom = isText ? '_textDom' : '_dom';

	    if (clipPath[dom]) {
	      // Use a dom that is already in <defs>
	      id = clipPath[dom].getAttribute('id');
	      clipPathEl = clipPath[dom]; // Use a dom that is already in <defs>

	      if (!defs.contains(clipPathEl)) {
	        // This happens when set old clipPath that has
	        // been previously removed
	        defs.appendChild(clipPathEl);
	      }
	    } else {
	      // New <clipPath>
	      id = 'zr-clip-' + this.nextId;
	      ++this.nextId;
	      clipPathEl = this.createElement('clipPath');
	      clipPathEl.setAttribute('id', id);
	      defs.appendChild(clipPathEl);
	      clipPath[dom] = clipPathEl;
	    } // Build path and add to <clipPath>


	    var svgProxy = this.getSvgProxy(clipPath);

	    if (clipPath.transform && clipPath.parent.invTransform && !isText) {
	      /**
	       * If a clipPath has a parent with transform, the transform
	       * of parent should not be considered when setting transform
	       * of clipPath. So we need to transform back from parent's
	       * transform, which is done by multiplying parent's inverse
	       * transform.
	       */
	      // Store old transform
	      var transform = Array.prototype.slice.call(clipPath.transform); // Transform back from parent, and brush path

	      matrix.mul(clipPath.transform, clipPath.parent.invTransform, clipPath.transform);
	      svgProxy.brush(clipPath); // Set back transform of clipPath

	      clipPath.transform = transform;
	    } else {
	      svgProxy.brush(clipPath);
	    }

	    var pathEl = this.getSvgElement(clipPath);
	    /**
	     * Use `cloneNode()` here to appendChild to multiple parents,
	     * which may happend when Text and other shapes are using the same
	     * clipPath. Since Text will create an extra clipPath DOM due to
	     * different transform rules.
	     */

	    clipPathEl.appendChild(pathEl.cloneNode());
	    parentEl.setAttribute('clip-path', 'url(#' + id + ')');

	    if (clipPaths.length > 1) {
	      // Make the other clipPaths recursively
	      this.updateDom(clipPathEl, clipPaths.slice(1), isText);
	    }
	  } else {
	    // No clipPath
	    if (parentEl) {
	      parentEl.setAttribute('clip-path', 'none');
	    }
	  }
	};
	/**
	 * Mark a single clipPath to be used
	 *
	 * @param {Displayable} displayable displayable element
	 */


	ClippathManager.prototype.markUsed = function (displayable) {
	  var that = this;

	  if (displayable.__clipPaths && displayable.__clipPaths.length > 0) {
	    zrUtil.each(displayable.__clipPaths, function (clipPath) {
	      if (clipPath._dom) {
	        Definable.prototype.markUsed.call(that, clipPath._dom);
	      }

	      if (clipPath._textDom) {
	        Definable.prototype.markUsed.call(that, clipPath._textDom);
	      }
	    });
	  }
	};

	var _default = ClippathManager;
	module.exports = _default;

/***/ },
/* 613 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(614);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _elementResizeEvent = __webpack_require__(620);

	var _elementResizeEvent2 = _interopRequireDefault(_elementResizeEvent);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var ReactEcharts = function (_React$Component) {
	  _inherits(ReactEcharts, _React$Component);

	  function ReactEcharts(props) {
	    _classCallCheck(this, ReactEcharts);

	    var _this = _possibleConstructorReturn(this, (ReactEcharts.__proto__ || Object.getPrototypeOf(ReactEcharts)).call(this, props));

	    _this.getEchartsInstance = function () {
	      return _this.echartsInstance.getInstanceByDom(_this.echartsElement) || _this.echartsInstance.init(_this.echartsElement, _this.props.theme);
	    };

	    _this.bindEvents = function (instance, events) {
	      var _loopEvent = function _loopEvent(eventName) {
	        // ignore the event config which not satisfy
	        if (typeof eventName === 'string' && typeof events[eventName] === 'function') {
	          // binding event
	          instance.off(eventName);
	          instance.on(eventName, function (param) {
	            events[eventName](param, instance);
	          });
	        }
	      };

	      for (var eventName in events) {
	        if (Object.prototype.hasOwnProperty.call(events, eventName)) {
	          _loopEvent(eventName);
	        }
	      }
	    };

	    _this.renderEchartDom = function () {
	      // init the echart object
	      var echartObj = _this.getEchartsInstance();
	      // set the echart option
	      echartObj.setOption(_this.props.option, _this.props.notMerge || false, _this.props.lazyUpdate || false);
	      // set loading mask
	      if (_this.props.showLoading) echartObj.showLoading(_this.props.loadingOption || null);else echartObj.hideLoading();

	      return echartObj;
	    };

	    _this.echartsInstance = _this.props.echarts; // the echarts object.
	    _this.echartsElement = null; // echarts div element
	    return _this;
	  }

	  // first add


	  _createClass(ReactEcharts, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      var echartObj = this.renderEchartDom();
	      var onEvents = this.props.onEvents || {};

	      this.bindEvents(echartObj, onEvents);
	      // on chart ready
	      if (typeof this.props.onChartReady === 'function') this.props.onChartReady(echartObj);

	      // on resize
	      (0, _elementResizeEvent2['default'])(this.echartsElement, function () {
	        echartObj.resize();
	      });
	    }

	    // update

	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate() {
	      this.renderEchartDom();
	      this.bindEvents(this.getEchartsInstance(), this.props.onEvents || []);
	    }

	    // remove

	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      if (this.echartsElement) {
	        // if elementResizeEvent.unbind exist, just do it.
	        if (typeof _elementResizeEvent2['default'].unbind === 'function') {
	          _elementResizeEvent2['default'].unbind(this.echartsElement);
	        }
	        this.echartsInstance.dispose(this.echartsElement);
	      }
	    }
	    // return the echart object


	    // bind the events


	    // render the dom

	  }, {
	    key: 'render',
	    value: function render() {
	      var _this2 = this;

	      var style = this.props.style || {
	        height: '300px'
	      };
	      // for render
	      return _react2['default'].createElement('div', {
	        ref: function ref(e) {
	          _this2.echartsElement = e;
	        },
	        style: style,
	        className: this.props.className
	      });
	    }
	  }]);

	  return ReactEcharts;
	}(_react2['default'].Component);

	exports['default'] = ReactEcharts;


	ReactEcharts.propTypes = {
	  option: _propTypes2['default'].object.isRequired, // eslint-disable-line react/forbid-prop-types
	  echarts: _propTypes2['default'].object.isRequired, // eslint-disable-line react/forbid-prop-types
	  notMerge: _propTypes2['default'].bool,
	  lazyUpdate: _propTypes2['default'].bool,
	  style: _propTypes2['default'].object, // eslint-disable-line react/forbid-prop-types
	  className: _propTypes2['default'].string,
	  theme: _propTypes2['default'].string,
	  onChartReady: _propTypes2['default'].func,
	  showLoading: _propTypes2['default'].bool,
	  loadingOption: _propTypes2['default'].object, // eslint-disable-line react/forbid-prop-types
	  onEvents: _propTypes2['default'].object // eslint-disable-line react/forbid-prop-types
	};

	ReactEcharts.defaultProps = {
	  echarts: {},
	  notMerge: false,
	  lazyUpdate: false,
	  style: { height: '300px' },
	  className: '',
	  theme: null,
	  onChartReady: function onChartReady() {},
	  showLoading: false,
	  loadingOption: null,
	  onEvents: {}
	};

/***/ },
/* 614 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	if (process.env.NODE_ENV !== 'production') {
	  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&
	    Symbol["for"] &&
	    Symbol["for"]('react.element')) ||
	    0xeac7;

	  var isValidElement = function(object) {
	    return typeof object === 'object' &&
	      object !== null &&
	      object.$$typeof === REACT_ELEMENT_TYPE;
	  };

	  // By explicitly using `prop-types` you are opting into new development behavior.
	  // http://fb.me/prop-types-in-prod
	  var throwOnDirectAccess = true;
	  module.exports = __webpack_require__(615)(isValidElement, throwOnDirectAccess);
	} else {
	  // By explicitly using `prop-types` you are opting into new production behavior.
	  // http://fb.me/prop-types-in-prod
	  module.exports = __webpack_require__(619)();
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 615 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';

	var assign = __webpack_require__(616);

	var ReactPropTypesSecret = __webpack_require__(617);
	var checkPropTypes = __webpack_require__(618);

	var printWarning = function() {};

	if (process.env.NODE_ENV !== 'production') {
	  printWarning = function(text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };
	}

	function emptyFunctionThatReturnsNull() {
	  return null;
	}

	module.exports = function(isValidElement, throwOnDirectAccess) {
	  /* global Symbol */
	  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	  /**
	   * Returns the iterator method function contained on the iterable object.
	   *
	   * Be sure to invoke the function with the iterable as context:
	   *
	   *     var iteratorFn = getIteratorFn(myIterable);
	   *     if (iteratorFn) {
	   *       var iterator = iteratorFn.call(myIterable);
	   *       ...
	   *     }
	   *
	   * @param {?object} maybeIterable
	   * @return {?function}
	   */
	  function getIteratorFn(maybeIterable) {
	    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	    if (typeof iteratorFn === 'function') {
	      return iteratorFn;
	    }
	  }

	  /**
	   * Collection of methods that allow declaration and validation of props that are
	   * supplied to React components. Example usage:
	   *
	   *   var Props = require('ReactPropTypes');
	   *   var MyArticle = React.createClass({
	   *     propTypes: {
	   *       // An optional string prop named "description".
	   *       description: Props.string,
	   *
	   *       // A required enum prop named "category".
	   *       category: Props.oneOf(['News','Photos']).isRequired,
	   *
	   *       // A prop named "dialog" that requires an instance of Dialog.
	   *       dialog: Props.instanceOf(Dialog).isRequired
	   *     },
	   *     render: function() { ... }
	   *   });
	   *
	   * A more formal specification of how these methods are used:
	   *
	   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	   *   decl := ReactPropTypes.{type}(.isRequired)?
	   *
	   * Each and every declaration produces a function with the same signature. This
	   * allows the creation of custom validation functions. For example:
	   *
	   *  var MyLink = React.createClass({
	   *    propTypes: {
	   *      // An optional string or URI prop named "href".
	   *      href: function(props, propName, componentName) {
	   *        var propValue = props[propName];
	   *        if (propValue != null && typeof propValue !== 'string' &&
	   *            !(propValue instanceof URI)) {
	   *          return new Error(
	   *            'Expected a string or an URI for ' + propName + ' in ' +
	   *            componentName
	   *          );
	   *        }
	   *      }
	   *    },
	   *    render: function() {...}
	   *  });
	   *
	   * @internal
	   */

	  var ANONYMOUS = '<<anonymous>>';

	  // Important!
	  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
	  var ReactPropTypes = {
	    array: createPrimitiveTypeChecker('array'),
	    bool: createPrimitiveTypeChecker('boolean'),
	    func: createPrimitiveTypeChecker('function'),
	    number: createPrimitiveTypeChecker('number'),
	    object: createPrimitiveTypeChecker('object'),
	    string: createPrimitiveTypeChecker('string'),
	    symbol: createPrimitiveTypeChecker('symbol'),

	    any: createAnyTypeChecker(),
	    arrayOf: createArrayOfTypeChecker,
	    element: createElementTypeChecker(),
	    instanceOf: createInstanceTypeChecker,
	    node: createNodeChecker(),
	    objectOf: createObjectOfTypeChecker,
	    oneOf: createEnumTypeChecker,
	    oneOfType: createUnionTypeChecker,
	    shape: createShapeTypeChecker,
	    exact: createStrictShapeTypeChecker
	  };

	  /**
	   * inlined Object.is polyfill to avoid requiring consumers ship their own
	   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	   */
	  /*eslint-disable no-self-compare*/
	  function is(x, y) {
	    // SameValue algorithm
	    if (x === y) {
	      // Steps 1-5, 7-10
	      // Steps 6.b-6.e: +0 != -0
	      return x !== 0 || 1 / x === 1 / y;
	    } else {
	      // Step 6.a: NaN == NaN
	      return x !== x && y !== y;
	    }
	  }
	  /*eslint-enable no-self-compare*/

	  /**
	   * We use an Error-like object for backward compatibility as people may call
	   * PropTypes directly and inspect their output. However, we don't use real
	   * Errors anymore. We don't inspect their stack anyway, and creating them
	   * is prohibitively expensive if they are created too often, such as what
	   * happens in oneOfType() for any type before the one that matched.
	   */
	  function PropTypeError(message) {
	    this.message = message;
	    this.stack = '';
	  }
	  // Make `instanceof Error` still work for returned errors.
	  PropTypeError.prototype = Error.prototype;

	  function createChainableTypeChecker(validate) {
	    if (process.env.NODE_ENV !== 'production') {
	      var manualPropTypeCallCache = {};
	      var manualPropTypeWarningCount = 0;
	    }
	    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	      componentName = componentName || ANONYMOUS;
	      propFullName = propFullName || propName;

	      if (secret !== ReactPropTypesSecret) {
	        if (throwOnDirectAccess) {
	          // New behavior only for users of `prop-types` package
	          var err = new Error(
	            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	            'Use `PropTypes.checkPropTypes()` to call them. ' +
	            'Read more at http://fb.me/use-check-prop-types'
	          );
	          err.name = 'Invariant Violation';
	          throw err;
	        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
	          // Old behavior for people using React.PropTypes
	          var cacheKey = componentName + ':' + propName;
	          if (
	            !manualPropTypeCallCache[cacheKey] &&
	            // Avoid spamming the console because they are often not actionable except for lib authors
	            manualPropTypeWarningCount < 3
	          ) {
	            printWarning(
	              'You are manually calling a React.PropTypes validation ' +
	              'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +
	              'and will throw in the standalone `prop-types` package. ' +
	              'You may be seeing this warning due to a third-party PropTypes ' +
	              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
	            );
	            manualPropTypeCallCache[cacheKey] = true;
	            manualPropTypeWarningCount++;
	          }
	        }
	      }
	      if (props[propName] == null) {
	        if (isRequired) {
	          if (props[propName] === null) {
	            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	          }
	          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	        }
	        return null;
	      } else {
	        return validate(props, propName, componentName, location, propFullName);
	      }
	    }

	    var chainedCheckType = checkType.bind(null, false);
	    chainedCheckType.isRequired = checkType.bind(null, true);

	    return chainedCheckType;
	  }

	  function createPrimitiveTypeChecker(expectedType) {
	    function validate(props, propName, componentName, location, propFullName, secret) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== expectedType) {
	        // `propValue` being instance of, say, date/regexp, pass the 'object'
	        // check, but we can offer a more precise error message here rather than
	        // 'of type `object`'.
	        var preciseType = getPreciseType(propValue);

	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createAnyTypeChecker() {
	    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
	  }

	  function createArrayOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	      }
	      var propValue = props[propName];
	      if (!Array.isArray(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	      }
	      for (var i = 0; i < propValue.length; i++) {
	        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createElementTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!isValidElement(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createInstanceTypeChecker(expectedClass) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!(props[propName] instanceof expectedClass)) {
	        var expectedClassName = expectedClass.name || ANONYMOUS;
	        var actualClassName = getClassName(props[propName]);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createEnumTypeChecker(expectedValues) {
	    if (!Array.isArray(expectedValues)) {
	      process.env.NODE_ENV !== 'production' ? printWarning('Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
	      return emptyFunctionThatReturnsNull;
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      for (var i = 0; i < expectedValues.length; i++) {
	        if (is(propValue, expectedValues[i])) {
	          return null;
	        }
	      }

	      var valuesString = JSON.stringify(expectedValues);
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createObjectOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	      }
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	      }
	      for (var key in propValue) {
	        if (propValue.hasOwnProperty(key)) {
	          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	          if (error instanceof Error) {
	            return error;
	          }
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createUnionTypeChecker(arrayOfTypeCheckers) {
	    if (!Array.isArray(arrayOfTypeCheckers)) {
	      process.env.NODE_ENV !== 'production' ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
	      return emptyFunctionThatReturnsNull;
	    }

	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (typeof checker !== 'function') {
	        printWarning(
	          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
	          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
	        );
	        return emptyFunctionThatReturnsNull;
	      }
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	        var checker = arrayOfTypeCheckers[i];
	        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
	          return null;
	        }
	      }

	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createNodeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!isNode(props[propName])) {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      for (var key in shapeTypes) {
	        var checker = shapeTypes[key];
	        if (!checker) {
	          continue;
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createStrictShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      // We need to check all keys in case some are required but missing from
	      // props.
	      var allKeys = assign({}, props[propName], shapeTypes);
	      for (var key in allKeys) {
	        var checker = shapeTypes[key];
	        if (!checker) {
	          return new PropTypeError(
	            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
	            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
	            '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
	          );
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }

	    return createChainableTypeChecker(validate);
	  }

	  function isNode(propValue) {
	    switch (typeof propValue) {
	      case 'number':
	      case 'string':
	      case 'undefined':
	        return true;
	      case 'boolean':
	        return !propValue;
	      case 'object':
	        if (Array.isArray(propValue)) {
	          return propValue.every(isNode);
	        }
	        if (propValue === null || isValidElement(propValue)) {
	          return true;
	        }

	        var iteratorFn = getIteratorFn(propValue);
	        if (iteratorFn) {
	          var iterator = iteratorFn.call(propValue);
	          var step;
	          if (iteratorFn !== propValue.entries) {
	            while (!(step = iterator.next()).done) {
	              if (!isNode(step.value)) {
	                return false;
	              }
	            }
	          } else {
	            // Iterator will provide entry [k,v] tuples rather than values.
	            while (!(step = iterator.next()).done) {
	              var entry = step.value;
	              if (entry) {
	                if (!isNode(entry[1])) {
	                  return false;
	                }
	              }
	            }
	          }
	        } else {
	          return false;
	        }

	        return true;
	      default:
	        return false;
	    }
	  }

	  function isSymbol(propType, propValue) {
	    // Native Symbol.
	    if (propType === 'symbol') {
	      return true;
	    }

	    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	    if (propValue['@@toStringTag'] === 'Symbol') {
	      return true;
	    }

	    // Fallback for non-spec compliant Symbols which are polyfilled.
	    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	      return true;
	    }

	    return false;
	  }

	  // Equivalent of `typeof` but with special handling for array and regexp.
	  function getPropType(propValue) {
	    var propType = typeof propValue;
	    if (Array.isArray(propValue)) {
	      return 'array';
	    }
	    if (propValue instanceof RegExp) {
	      // Old webkits (at least until Android 4.0) return 'function' rather than
	      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	      // passes PropTypes.object.
	      return 'object';
	    }
	    if (isSymbol(propType, propValue)) {
	      return 'symbol';
	    }
	    return propType;
	  }

	  // This handles more types than `getPropType`. Only used for error messages.
	  // See `createPrimitiveTypeChecker`.
	  function getPreciseType(propValue) {
	    if (typeof propValue === 'undefined' || propValue === null) {
	      return '' + propValue;
	    }
	    var propType = getPropType(propValue);
	    if (propType === 'object') {
	      if (propValue instanceof Date) {
	        return 'date';
	      } else if (propValue instanceof RegExp) {
	        return 'regexp';
	      }
	    }
	    return propType;
	  }

	  // Returns a string that is postfixed to a warning about an invalid type.
	  // For example, "undefined" or "of type array"
	  function getPostfixForTypeWarning(value) {
	    var type = getPreciseType(value);
	    switch (type) {
	      case 'array':
	      case 'object':
	        return 'an ' + type;
	      case 'boolean':
	      case 'date':
	      case 'regexp':
	        return 'a ' + type;
	      default:
	        return type;
	    }
	  }

	  // Returns class name of the object, if any.
	  function getClassName(propValue) {
	    if (!propValue.constructor || !propValue.constructor.name) {
	      return ANONYMOUS;
	    }
	    return propValue.constructor.name;
	  }

	  ReactPropTypes.checkPropTypes = checkPropTypes;
	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 616 */
/***/ function(module, exports) {

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/

	'use strict';
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};


/***/ },
/* 617 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	module.exports = ReactPropTypesSecret;


/***/ },
/* 618 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';

	var printWarning = function() {};

	if (process.env.NODE_ENV !== 'production') {
	  var ReactPropTypesSecret = __webpack_require__(617);
	  var loggedTypeFailures = {};

	  printWarning = function(text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };
	}

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?Function} getStack Returns the component stack.
	 * @private
	 */
	function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
	  if (process.env.NODE_ENV !== 'production') {
	    for (var typeSpecName in typeSpecs) {
	      if (typeSpecs.hasOwnProperty(typeSpecName)) {
	        var error;
	        // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          if (typeof typeSpecs[typeSpecName] !== 'function') {
	            var err = Error(
	              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
	              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
	            );
	            err.name = 'Invariant Violation';
	            throw err;
	          }
	          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error && !(error instanceof Error)) {
	          printWarning(
	            (componentName || 'React class') + ': type specification of ' +
	            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
	            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
	            'You may have forgotten to pass an argument to the type checker ' +
	            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
	            'shape all require an argument).'
	          )

	        }
	        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error.message] = true;

	          var stack = getStack ? getStack() : '';

	          printWarning(
	            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
	          );
	        }
	      }
	    }
	  }
	}

	module.exports = checkPropTypes;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 619 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';

	var ReactPropTypesSecret = __webpack_require__(617);

	function emptyFunction() {}

	module.exports = function() {
	  function shim(props, propName, componentName, location, propFullName, secret) {
	    if (secret === ReactPropTypesSecret) {
	      // It is still safe when called from React.
	      return;
	    }
	    var err = new Error(
	      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	      'Use PropTypes.checkPropTypes() to call them. ' +
	      'Read more at http://fb.me/use-check-prop-types'
	    );
	    err.name = 'Invariant Violation';
	    throw err;
	  };
	  shim.isRequired = shim;
	  function getShim() {
	    return shim;
	  };
	  // Important!
	  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
	  var ReactPropTypes = {
	    array: shim,
	    bool: shim,
	    func: shim,
	    number: shim,
	    object: shim,
	    string: shim,
	    symbol: shim,

	    any: shim,
	    arrayOf: getShim,
	    element: shim,
	    instanceOf: getShim,
	    node: shim,
	    objectOf: getShim,
	    oneOf: getShim,
	    oneOfType: getShim,
	    shape: getShim,
	    exact: getShim
	  };

	  ReactPropTypes.checkPropTypes = emptyFunction;
	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};


/***/ },
/* 620 */
/***/ function(module, exports) {

	var exports = function exports(element, fn) {
	  var window = this
	  var document = window.document
	  var isIE
	  var requestFrame

	  var attachEvent = document.attachEvent
	  if (typeof navigator !== 'undefined') {
	    isIE = navigator.userAgent.match(/Trident/) || navigator.userAgent.match(/Edge/)
	  }

	  requestFrame = (function () {
	    var raf = window.requestAnimationFrame ||
	      window.mozRequestAnimationFrame ||
	        window.webkitRequestAnimationFrame ||
	          function fallbackRAF(func) {
	            return window.setTimeout(func, 20)
	          }
	    return function requestFrameFunction(func) {
	      return raf(func)
	    }
	  })()

	  var cancelFrame = (function () {
	    var cancel = window.cancelAnimationFrame ||
	      window.mozCancelAnimationFrame ||
	        window.webkitCancelAnimationFrame ||
	          window.clearTimeout
	    return function cancelFrameFunction(id) {
	      return cancel(id)
	    }
	  })()

	  function resizeListener(e) {
	    var win = e.target || e.srcElement
	    if (win.__resizeRAF__) {
	      cancelFrame(win.__resizeRAF__)
	    }
	    win.__resizeRAF__ = requestFrame(function () {
	      var trigger = win.__resizeTrigger__
	      if(trigger !== undefined) {
	        trigger.__resizeListeners__.forEach(function (fn) {
	          fn.call(trigger, e)
	        })
	      }
	    })
	  }

	  function objectLoad() {
	    this.contentDocument.defaultView.__resizeTrigger__ = this.__resizeElement__
	    this.contentDocument.defaultView.addEventListener('resize', resizeListener)
	  }

	  if (!element.__resizeListeners__) {
	    element.__resizeListeners__ = []
	    if (attachEvent) {
	      element.__resizeTrigger__ = element
	      element.attachEvent('onresize', resizeListener)
	    } else {
	      if (getComputedStyle(element).position === 'static') {
	        element.style.position = 'relative'
	      }
	      var obj = element.__resizeTrigger__ = document.createElement('object')
	      obj.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; height: 100%; width: 100%; overflow: hidden; pointer-events: none; z-index: -1; opacity: 0;')
	      obj.setAttribute('class', 'resize-sensor')
	      obj.__resizeElement__ = element
	      obj.onload = objectLoad
	      obj.type = 'text/html'
	      if (isIE) {
	        element.appendChild(obj)
	      }
	      obj.data = 'about:blank'
	      if (!isIE) {
	        element.appendChild(obj)
	      }
	    }
	  }
	  element.__resizeListeners__.push(fn)
	}

	exports.unbind = function(element, fn){
	  var attachEvent = document.attachEvent;
	  element.__resizeListeners__.splice(element.__resizeListeners__.indexOf(fn), 1);
	  if (!element.__resizeListeners__.length) {
	    if (attachEvent) {
	      element.detachEvent('onresize', resizeListener);
	    } else {
	      element.__resizeTrigger__.contentDocument.defaultView.removeEventListener('resize', resizeListener);
	      element.__resizeTrigger__ = !element.removeChild(element.__resizeTrigger__);
	    }
	  }
	}

	module.exports = (typeof window === 'undefined') ? exports : exports.bind(window)


/***/ },
/* 621 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, global) {/*!
	 * @overview es6-promise - a tiny implementation of Promises/A+.
	 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
	 * @license   Licensed under MIT license
	 *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
	 * @version   v4.2.5+7f2b526d
	 */

	(function (global, factory) {
		 true ? module.exports = factory() :
		typeof define === 'function' && define.amd ? define(factory) :
		(global.ES6Promise = factory());
	}(this, (function () { 'use strict';

	function objectOrFunction(x) {
	  var type = typeof x;
	  return x !== null && (type === 'object' || type === 'function');
	}

	function isFunction(x) {
	  return typeof x === 'function';
	}



	var _isArray = void 0;
	if (Array.isArray) {
	  _isArray = Array.isArray;
	} else {
	  _isArray = function (x) {
	    return Object.prototype.toString.call(x) === '[object Array]';
	  };
	}

	var isArray = _isArray;

	var len = 0;
	var vertxNext = void 0;
	var customSchedulerFn = void 0;

	var asap = function asap(callback, arg) {
	  queue[len] = callback;
	  queue[len + 1] = arg;
	  len += 2;
	  if (len === 2) {
	    // If len is 2, that means that we need to schedule an async flush.
	    // If additional callbacks are queued before the queue is flushed, they
	    // will be processed by this flush that we are scheduling.
	    if (customSchedulerFn) {
	      customSchedulerFn(flush);
	    } else {
	      scheduleFlush();
	    }
	  }
	};

	function setScheduler(scheduleFn) {
	  customSchedulerFn = scheduleFn;
	}

	function setAsap(asapFn) {
	  asap = asapFn;
	}

	var browserWindow = typeof window !== 'undefined' ? window : undefined;
	var browserGlobal = browserWindow || {};
	var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
	var isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';

	// test for web worker but not in IE10
	var isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';

	// node
	function useNextTick() {
	  // node version 0.10.x displays a deprecation warning when nextTick is used recursively
	  // see https://github.com/cujojs/when/issues/410 for details
	  return function () {
	    return process.nextTick(flush);
	  };
	}

	// vertx
	function useVertxTimer() {
	  if (typeof vertxNext !== 'undefined') {
	    return function () {
	      vertxNext(flush);
	    };
	  }

	  return useSetTimeout();
	}

	function useMutationObserver() {
	  var iterations = 0;
	  var observer = new BrowserMutationObserver(flush);
	  var node = document.createTextNode('');
	  observer.observe(node, { characterData: true });

	  return function () {
	    node.data = iterations = ++iterations % 2;
	  };
	}

	// web worker
	function useMessageChannel() {
	  var channel = new MessageChannel();
	  channel.port1.onmessage = flush;
	  return function () {
	    return channel.port2.postMessage(0);
	  };
	}

	function useSetTimeout() {
	  // Store setTimeout reference so es6-promise will be unaffected by
	  // other code modifying setTimeout (like sinon.useFakeTimers())
	  var globalSetTimeout = setTimeout;
	  return function () {
	    return globalSetTimeout(flush, 1);
	  };
	}

	var queue = new Array(1000);
	function flush() {
	  for (var i = 0; i < len; i += 2) {
	    var callback = queue[i];
	    var arg = queue[i + 1];

	    callback(arg);

	    queue[i] = undefined;
	    queue[i + 1] = undefined;
	  }

	  len = 0;
	}

	function attemptVertx() {
	  try {
	    var vertx = Function('return this')().require('vertx');
	    vertxNext = vertx.runOnLoop || vertx.runOnContext;
	    return useVertxTimer();
	  } catch (e) {
	    return useSetTimeout();
	  }
	}

	var scheduleFlush = void 0;
	// Decide what async method to use to triggering processing of queued callbacks:
	if (isNode) {
	  scheduleFlush = useNextTick();
	} else if (BrowserMutationObserver) {
	  scheduleFlush = useMutationObserver();
	} else if (isWorker) {
	  scheduleFlush = useMessageChannel();
	} else if (browserWindow === undefined && "function" === 'function') {
	  scheduleFlush = attemptVertx();
	} else {
	  scheduleFlush = useSetTimeout();
	}

	function then(onFulfillment, onRejection) {
	  var parent = this;

	  var child = new this.constructor(noop);

	  if (child[PROMISE_ID] === undefined) {
	    makePromise(child);
	  }

	  var _state = parent._state;


	  if (_state) {
	    var callback = arguments[_state - 1];
	    asap(function () {
	      return invokeCallback(_state, child, callback, parent._result);
	    });
	  } else {
	    subscribe(parent, child, onFulfillment, onRejection);
	  }

	  return child;
	}

	/**
	  `Promise.resolve` returns a promise that will become resolved with the
	  passed `value`. It is shorthand for the following:

	  ```javascript
	  let promise = new Promise(function(resolve, reject){
	    resolve(1);
	  });

	  promise.then(function(value){
	    // value === 1
	  });
	  ```

	  Instead of writing the above, your code now simply becomes the following:

	  ```javascript
	  let promise = Promise.resolve(1);

	  promise.then(function(value){
	    // value === 1
	  });
	  ```

	  @method resolve
	  @static
	  @param {Any} value value that the returned promise will be resolved with
	  Useful for tooling.
	  @return {Promise} a promise that will become fulfilled with the given
	  `value`
	*/
	function resolve$1(object) {
	  /*jshint validthis:true */
	  var Constructor = this;

	  if (object && typeof object === 'object' && object.constructor === Constructor) {
	    return object;
	  }

	  var promise = new Constructor(noop);
	  resolve(promise, object);
	  return promise;
	}

	var PROMISE_ID = Math.random().toString(36).substring(2);

	function noop() {}

	var PENDING = void 0;
	var FULFILLED = 1;
	var REJECTED = 2;

	var TRY_CATCH_ERROR = { error: null };

	function selfFulfillment() {
	  return new TypeError("You cannot resolve a promise with itself");
	}

	function cannotReturnOwn() {
	  return new TypeError('A promises callback cannot return that same promise.');
	}

	function getThen(promise) {
	  try {
	    return promise.then;
	  } catch (error) {
	    TRY_CATCH_ERROR.error = error;
	    return TRY_CATCH_ERROR;
	  }
	}

	function tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {
	  try {
	    then$$1.call(value, fulfillmentHandler, rejectionHandler);
	  } catch (e) {
	    return e;
	  }
	}

	function handleForeignThenable(promise, thenable, then$$1) {
	  asap(function (promise) {
	    var sealed = false;
	    var error = tryThen(then$$1, thenable, function (value) {
	      if (sealed) {
	        return;
	      }
	      sealed = true;
	      if (thenable !== value) {
	        resolve(promise, value);
	      } else {
	        fulfill(promise, value);
	      }
	    }, function (reason) {
	      if (sealed) {
	        return;
	      }
	      sealed = true;

	      reject(promise, reason);
	    }, 'Settle: ' + (promise._label || ' unknown promise'));

	    if (!sealed && error) {
	      sealed = true;
	      reject(promise, error);
	    }
	  }, promise);
	}

	function handleOwnThenable(promise, thenable) {
	  if (thenable._state === FULFILLED) {
	    fulfill(promise, thenable._result);
	  } else if (thenable._state === REJECTED) {
	    reject(promise, thenable._result);
	  } else {
	    subscribe(thenable, undefined, function (value) {
	      return resolve(promise, value);
	    }, function (reason) {
	      return reject(promise, reason);
	    });
	  }
	}

	function handleMaybeThenable(promise, maybeThenable, then$$1) {
	  if (maybeThenable.constructor === promise.constructor && then$$1 === then && maybeThenable.constructor.resolve === resolve$1) {
	    handleOwnThenable(promise, maybeThenable);
	  } else {
	    if (then$$1 === TRY_CATCH_ERROR) {
	      reject(promise, TRY_CATCH_ERROR.error);
	      TRY_CATCH_ERROR.error = null;
	    } else if (then$$1 === undefined) {
	      fulfill(promise, maybeThenable);
	    } else if (isFunction(then$$1)) {
	      handleForeignThenable(promise, maybeThenable, then$$1);
	    } else {
	      fulfill(promise, maybeThenable);
	    }
	  }
	}

	function resolve(promise, value) {
	  if (promise === value) {
	    reject(promise, selfFulfillment());
	  } else if (objectOrFunction(value)) {
	    handleMaybeThenable(promise, value, getThen(value));
	  } else {
	    fulfill(promise, value);
	  }
	}

	function publishRejection(promise) {
	  if (promise._onerror) {
	    promise._onerror(promise._result);
	  }

	  publish(promise);
	}

	function fulfill(promise, value) {
	  if (promise._state !== PENDING) {
	    return;
	  }

	  promise._result = value;
	  promise._state = FULFILLED;

	  if (promise._subscribers.length !== 0) {
	    asap(publish, promise);
	  }
	}

	function reject(promise, reason) {
	  if (promise._state !== PENDING) {
	    return;
	  }
	  promise._state = REJECTED;
	  promise._result = reason;

	  asap(publishRejection, promise);
	}

	function subscribe(parent, child, onFulfillment, onRejection) {
	  var _subscribers = parent._subscribers;
	  var length = _subscribers.length;


	  parent._onerror = null;

	  _subscribers[length] = child;
	  _subscribers[length + FULFILLED] = onFulfillment;
	  _subscribers[length + REJECTED] = onRejection;

	  if (length === 0 && parent._state) {
	    asap(publish, parent);
	  }
	}

	function publish(promise) {
	  var subscribers = promise._subscribers;
	  var settled = promise._state;

	  if (subscribers.length === 0) {
	    return;
	  }

	  var child = void 0,
	      callback = void 0,
	      detail = promise._result;

	  for (var i = 0; i < subscribers.length; i += 3) {
	    child = subscribers[i];
	    callback = subscribers[i + settled];

	    if (child) {
	      invokeCallback(settled, child, callback, detail);
	    } else {
	      callback(detail);
	    }
	  }

	  promise._subscribers.length = 0;
	}

	function tryCatch(callback, detail) {
	  try {
	    return callback(detail);
	  } catch (e) {
	    TRY_CATCH_ERROR.error = e;
	    return TRY_CATCH_ERROR;
	  }
	}

	function invokeCallback(settled, promise, callback, detail) {
	  var hasCallback = isFunction(callback),
	      value = void 0,
	      error = void 0,
	      succeeded = void 0,
	      failed = void 0;

	  if (hasCallback) {
	    value = tryCatch(callback, detail);

	    if (value === TRY_CATCH_ERROR) {
	      failed = true;
	      error = value.error;
	      value.error = null;
	    } else {
	      succeeded = true;
	    }

	    if (promise === value) {
	      reject(promise, cannotReturnOwn());
	      return;
	    }
	  } else {
	    value = detail;
	    succeeded = true;
	  }

	  if (promise._state !== PENDING) {
	    // noop
	  } else if (hasCallback && succeeded) {
	    resolve(promise, value);
	  } else if (failed) {
	    reject(promise, error);
	  } else if (settled === FULFILLED) {
	    fulfill(promise, value);
	  } else if (settled === REJECTED) {
	    reject(promise, value);
	  }
	}

	function initializePromise(promise, resolver) {
	  try {
	    resolver(function resolvePromise(value) {
	      resolve(promise, value);
	    }, function rejectPromise(reason) {
	      reject(promise, reason);
	    });
	  } catch (e) {
	    reject(promise, e);
	  }
	}

	var id = 0;
	function nextId() {
	  return id++;
	}

	function makePromise(promise) {
	  promise[PROMISE_ID] = id++;
	  promise._state = undefined;
	  promise._result = undefined;
	  promise._subscribers = [];
	}

	function validationError() {
	  return new Error('Array Methods must be provided an Array');
	}

	var Enumerator = function () {
	  function Enumerator(Constructor, input) {
	    this._instanceConstructor = Constructor;
	    this.promise = new Constructor(noop);

	    if (!this.promise[PROMISE_ID]) {
	      makePromise(this.promise);
	    }

	    if (isArray(input)) {
	      this.length = input.length;
	      this._remaining = input.length;

	      this._result = new Array(this.length);

	      if (this.length === 0) {
	        fulfill(this.promise, this._result);
	      } else {
	        this.length = this.length || 0;
	        this._enumerate(input);
	        if (this._remaining === 0) {
	          fulfill(this.promise, this._result);
	        }
	      }
	    } else {
	      reject(this.promise, validationError());
	    }
	  }

	  Enumerator.prototype._enumerate = function _enumerate(input) {
	    for (var i = 0; this._state === PENDING && i < input.length; i++) {
	      this._eachEntry(input[i], i);
	    }
	  };

	  Enumerator.prototype._eachEntry = function _eachEntry(entry, i) {
	    var c = this._instanceConstructor;
	    var resolve$$1 = c.resolve;


	    if (resolve$$1 === resolve$1) {
	      var _then = getThen(entry);

	      if (_then === then && entry._state !== PENDING) {
	        this._settledAt(entry._state, i, entry._result);
	      } else if (typeof _then !== 'function') {
	        this._remaining--;
	        this._result[i] = entry;
	      } else if (c === Promise$1) {
	        var promise = new c(noop);
	        handleMaybeThenable(promise, entry, _then);
	        this._willSettleAt(promise, i);
	      } else {
	        this._willSettleAt(new c(function (resolve$$1) {
	          return resolve$$1(entry);
	        }), i);
	      }
	    } else {
	      this._willSettleAt(resolve$$1(entry), i);
	    }
	  };

	  Enumerator.prototype._settledAt = function _settledAt(state, i, value) {
	    var promise = this.promise;


	    if (promise._state === PENDING) {
	      this._remaining--;

	      if (state === REJECTED) {
	        reject(promise, value);
	      } else {
	        this._result[i] = value;
	      }
	    }

	    if (this._remaining === 0) {
	      fulfill(promise, this._result);
	    }
	  };

	  Enumerator.prototype._willSettleAt = function _willSettleAt(promise, i) {
	    var enumerator = this;

	    subscribe(promise, undefined, function (value) {
	      return enumerator._settledAt(FULFILLED, i, value);
	    }, function (reason) {
	      return enumerator._settledAt(REJECTED, i, reason);
	    });
	  };

	  return Enumerator;
	}();

	/**
	  `Promise.all` accepts an array of promises, and returns a new promise which
	  is fulfilled with an array of fulfillment values for the passed promises, or
	  rejected with the reason of the first passed promise to be rejected. It casts all
	  elements of the passed iterable to promises as it runs this algorithm.

	  Example:

	  ```javascript
	  let promise1 = resolve(1);
	  let promise2 = resolve(2);
	  let promise3 = resolve(3);
	  let promises = [ promise1, promise2, promise3 ];

	  Promise.all(promises).then(function(array){
	    // The array here would be [ 1, 2, 3 ];
	  });
	  ```

	  If any of the `promises` given to `all` are rejected, the first promise
	  that is rejected will be given as an argument to the returned promises's
	  rejection handler. For example:

	  Example:

	  ```javascript
	  let promise1 = resolve(1);
	  let promise2 = reject(new Error("2"));
	  let promise3 = reject(new Error("3"));
	  let promises = [ promise1, promise2, promise3 ];

	  Promise.all(promises).then(function(array){
	    // Code here never runs because there are rejected promises!
	  }, function(error) {
	    // error.message === "2"
	  });
	  ```

	  @method all
	  @static
	  @param {Array} entries array of promises
	  @param {String} label optional string for labeling the promise.
	  Useful for tooling.
	  @return {Promise} promise that is fulfilled when all `promises` have been
	  fulfilled, or rejected if any of them become rejected.
	  @static
	*/
	function all(entries) {
	  return new Enumerator(this, entries).promise;
	}

	/**
	  `Promise.race` returns a new promise which is settled in the same way as the
	  first passed promise to settle.

	  Example:

	  ```javascript
	  let promise1 = new Promise(function(resolve, reject){
	    setTimeout(function(){
	      resolve('promise 1');
	    }, 200);
	  });

	  let promise2 = new Promise(function(resolve, reject){
	    setTimeout(function(){
	      resolve('promise 2');
	    }, 100);
	  });

	  Promise.race([promise1, promise2]).then(function(result){
	    // result === 'promise 2' because it was resolved before promise1
	    // was resolved.
	  });
	  ```

	  `Promise.race` is deterministic in that only the state of the first
	  settled promise matters. For example, even if other promises given to the
	  `promises` array argument are resolved, but the first settled promise has
	  become rejected before the other promises became fulfilled, the returned
	  promise will become rejected:

	  ```javascript
	  let promise1 = new Promise(function(resolve, reject){
	    setTimeout(function(){
	      resolve('promise 1');
	    }, 200);
	  });

	  let promise2 = new Promise(function(resolve, reject){
	    setTimeout(function(){
	      reject(new Error('promise 2'));
	    }, 100);
	  });

	  Promise.race([promise1, promise2]).then(function(result){
	    // Code here never runs
	  }, function(reason){
	    // reason.message === 'promise 2' because promise 2 became rejected before
	    // promise 1 became fulfilled
	  });
	  ```

	  An example real-world use case is implementing timeouts:

	  ```javascript
	  Promise.race([ajax('foo.json'), timeout(5000)])
	  ```

	  @method race
	  @static
	  @param {Array} promises array of promises to observe
	  Useful for tooling.
	  @return {Promise} a promise which settles in the same way as the first passed
	  promise to settle.
	*/
	function race(entries) {
	  /*jshint validthis:true */
	  var Constructor = this;

	  if (!isArray(entries)) {
	    return new Constructor(function (_, reject) {
	      return reject(new TypeError('You must pass an array to race.'));
	    });
	  } else {
	    return new Constructor(function (resolve, reject) {
	      var length = entries.length;
	      for (var i = 0; i < length; i++) {
	        Constructor.resolve(entries[i]).then(resolve, reject);
	      }
	    });
	  }
	}

	/**
	  `Promise.reject` returns a promise rejected with the passed `reason`.
	  It is shorthand for the following:

	  ```javascript
	  let promise = new Promise(function(resolve, reject){
	    reject(new Error('WHOOPS'));
	  });

	  promise.then(function(value){
	    // Code here doesn't run because the promise is rejected!
	  }, function(reason){
	    // reason.message === 'WHOOPS'
	  });
	  ```

	  Instead of writing the above, your code now simply becomes the following:

	  ```javascript
	  let promise = Promise.reject(new Error('WHOOPS'));

	  promise.then(function(value){
	    // Code here doesn't run because the promise is rejected!
	  }, function(reason){
	    // reason.message === 'WHOOPS'
	  });
	  ```

	  @method reject
	  @static
	  @param {Any} reason value that the returned promise will be rejected with.
	  Useful for tooling.
	  @return {Promise} a promise rejected with the given `reason`.
	*/
	function reject$1(reason) {
	  /*jshint validthis:true */
	  var Constructor = this;
	  var promise = new Constructor(noop);
	  reject(promise, reason);
	  return promise;
	}

	function needsResolver() {
	  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
	}

	function needsNew() {
	  throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
	}

	/**
	  Promise objects represent the eventual result of an asynchronous operation. The
	  primary way of interacting with a promise is through its `then` method, which
	  registers callbacks to receive either a promise's eventual value or the reason
	  why the promise cannot be fulfilled.

	  Terminology
	  -----------

	  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
	  - `thenable` is an object or function that defines a `then` method.
	  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
	  - `exception` is a value that is thrown using the throw statement.
	  - `reason` is a value that indicates why a promise was rejected.
	  - `settled` the final resting state of a promise, fulfilled or rejected.

	  A promise can be in one of three states: pending, fulfilled, or rejected.

	  Promises that are fulfilled have a fulfillment value and are in the fulfilled
	  state.  Promises that are rejected have a rejection reason and are in the
	  rejected state.  A fulfillment value is never a thenable.

	  Promises can also be said to *resolve* a value.  If this value is also a
	  promise, then the original promise's settled state will match the value's
	  settled state.  So a promise that *resolves* a promise that rejects will
	  itself reject, and a promise that *resolves* a promise that fulfills will
	  itself fulfill.


	  Basic Usage:
	  ------------

	  ```js
	  let promise = new Promise(function(resolve, reject) {
	    // on success
	    resolve(value);

	    // on failure
	    reject(reason);
	  });

	  promise.then(function(value) {
	    // on fulfillment
	  }, function(reason) {
	    // on rejection
	  });
	  ```

	  Advanced Usage:
	  ---------------

	  Promises shine when abstracting away asynchronous interactions such as
	  `XMLHttpRequest`s.

	  ```js
	  function getJSON(url) {
	    return new Promise(function(resolve, reject){
	      let xhr = new XMLHttpRequest();

	      xhr.open('GET', url);
	      xhr.onreadystatechange = handler;
	      xhr.responseType = 'json';
	      xhr.setRequestHeader('Accept', 'application/json');
	      xhr.send();

	      function handler() {
	        if (this.readyState === this.DONE) {
	          if (this.status === 200) {
	            resolve(this.response);
	          } else {
	            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
	          }
	        }
	      };
	    });
	  }

	  getJSON('/posts.json').then(function(json) {
	    // on fulfillment
	  }, function(reason) {
	    // on rejection
	  });
	  ```

	  Unlike callbacks, promises are great composable primitives.

	  ```js
	  Promise.all([
	    getJSON('/posts'),
	    getJSON('/comments')
	  ]).then(function(values){
	    values[0] // => postsJSON
	    values[1] // => commentsJSON

	    return values;
	  });
	  ```

	  @class Promise
	  @param {Function} resolver
	  Useful for tooling.
	  @constructor
	*/

	var Promise$1 = function () {
	  function Promise(resolver) {
	    this[PROMISE_ID] = nextId();
	    this._result = this._state = undefined;
	    this._subscribers = [];

	    if (noop !== resolver) {
	      typeof resolver !== 'function' && needsResolver();
	      this instanceof Promise ? initializePromise(this, resolver) : needsNew();
	    }
	  }

	  /**
	  The primary way of interacting with a promise is through its `then` method,
	  which registers callbacks to receive either a promise's eventual value or the
	  reason why the promise cannot be fulfilled.
	   ```js
	  findUser().then(function(user){
	    // user is available
	  }, function(reason){
	    // user is unavailable, and you are given the reason why
	  });
	  ```
	   Chaining
	  --------
	   The return value of `then` is itself a promise.  This second, 'downstream'
	  promise is resolved with the return value of the first promise's fulfillment
	  or rejection handler, or rejected if the handler throws an exception.
	   ```js
	  findUser().then(function (user) {
	    return user.name;
	  }, function (reason) {
	    return 'default name';
	  }).then(function (userName) {
	    // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
	    // will be `'default name'`
	  });
	   findUser().then(function (user) {
	    throw new Error('Found user, but still unhappy');
	  }, function (reason) {
	    throw new Error('`findUser` rejected and we're unhappy');
	  }).then(function (value) {
	    // never reached
	  }, function (reason) {
	    // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
	    // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
	  });
	  ```
	  If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.
	   ```js
	  findUser().then(function (user) {
	    throw new PedagogicalException('Upstream error');
	  }).then(function (value) {
	    // never reached
	  }).then(function (value) {
	    // never reached
	  }, function (reason) {
	    // The `PedgagocialException` is propagated all the way down to here
	  });
	  ```
	   Assimilation
	  ------------
	   Sometimes the value you want to propagate to a downstream promise can only be
	  retrieved asynchronously. This can be achieved by returning a promise in the
	  fulfillment or rejection handler. The downstream promise will then be pending
	  until the returned promise is settled. This is called *assimilation*.
	   ```js
	  findUser().then(function (user) {
	    return findCommentsByAuthor(user);
	  }).then(function (comments) {
	    // The user's comments are now available
	  });
	  ```
	   If the assimliated promise rejects, then the downstream promise will also reject.
	   ```js
	  findUser().then(function (user) {
	    return findCommentsByAuthor(user);
	  }).then(function (comments) {
	    // If `findCommentsByAuthor` fulfills, we'll have the value here
	  }, function (reason) {
	    // If `findCommentsByAuthor` rejects, we'll have the reason here
	  });
	  ```
	   Simple Example
	  --------------
	   Synchronous Example
	   ```javascript
	  let result;
	   try {
	    result = findResult();
	    // success
	  } catch(reason) {
	    // failure
	  }
	  ```
	   Errback Example
	   ```js
	  findResult(function(result, err){
	    if (err) {
	      // failure
	    } else {
	      // success
	    }
	  });
	  ```
	   Promise Example;
	   ```javascript
	  findResult().then(function(result){
	    // success
	  }, function(reason){
	    // failure
	  });
	  ```
	   Advanced Example
	  --------------
	   Synchronous Example
	   ```javascript
	  let author, books;
	   try {
	    author = findAuthor();
	    books  = findBooksByAuthor(author);
	    // success
	  } catch(reason) {
	    // failure
	  }
	  ```
	   Errback Example
	   ```js
	   function foundBooks(books) {
	   }
	   function failure(reason) {
	   }
	   findAuthor(function(author, err){
	    if (err) {
	      failure(err);
	      // failure
	    } else {
	      try {
	        findBoooksByAuthor(author, function(books, err) {
	          if (err) {
	            failure(err);
	          } else {
	            try {
	              foundBooks(books);
	            } catch(reason) {
	              failure(reason);
	            }
	          }
	        });
	      } catch(error) {
	        failure(err);
	      }
	      // success
	    }
	  });
	  ```
	   Promise Example;
	   ```javascript
	  findAuthor().
	    then(findBooksByAuthor).
	    then(function(books){
	      // found books
	  }).catch(function(reason){
	    // something went wrong
	  });
	  ```
	   @method then
	  @param {Function} onFulfilled
	  @param {Function} onRejected
	  Useful for tooling.
	  @return {Promise}
	  */

	  /**
	  `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
	  as the catch block of a try/catch statement.
	  ```js
	  function findAuthor(){
	  throw new Error('couldn't find that author');
	  }
	  // synchronous
	  try {
	  findAuthor();
	  } catch(reason) {
	  // something went wrong
	  }
	  // async with promises
	  findAuthor().catch(function(reason){
	  // something went wrong
	  });
	  ```
	  @method catch
	  @param {Function} onRejection
	  Useful for tooling.
	  @return {Promise}
	  */


	  Promise.prototype["catch"] = function _catch(onRejection) {
	    return this.then(null, onRejection);
	  };

	  /**
	    `finally` will be invoked regardless of the promise's fate just as native
	    try/catch/finally behaves
	  
	    Synchronous example:
	  
	    ```js
	    findAuthor() {
	      if (Math.random() > 0.5) {
	        throw new Error();
	      }
	      return new Author();
	    }
	  
	    try {
	      return findAuthor(); // succeed or fail
	    } catch(error) {
	      return findOtherAuther();
	    } finally {
	      // always runs
	      // doesn't affect the return value
	    }
	    ```
	  
	    Asynchronous example:
	  
	    ```js
	    findAuthor().catch(function(reason){
	      return findOtherAuther();
	    }).finally(function(){
	      // author was either found, or not
	    });
	    ```
	  
	    @method finally
	    @param {Function} callback
	    @return {Promise}
	  */


	  Promise.prototype["finally"] = function _finally(callback) {
	    var promise = this;
	    var constructor = promise.constructor;

	    if (isFunction(callback)) {
	      return promise.then(function (value) {
	        return constructor.resolve(callback()).then(function () {
	          return value;
	        });
	      }, function (reason) {
	        return constructor.resolve(callback()).then(function () {
	          throw reason;
	        });
	      });
	    }

	    return promise.then(callback, callback);
	  };

	  return Promise;
	}();

	Promise$1.prototype.then = then;
	Promise$1.all = all;
	Promise$1.race = race;
	Promise$1.resolve = resolve$1;
	Promise$1.reject = reject$1;
	Promise$1._setScheduler = setScheduler;
	Promise$1._setAsap = setAsap;
	Promise$1._asap = asap;

	/*global self*/
	function polyfill() {
	  var local = void 0;

	  if (typeof global !== 'undefined') {
	    local = global;
	  } else if (typeof self !== 'undefined') {
	    local = self;
	  } else {
	    try {
	      local = Function('return this')();
	    } catch (e) {
	      throw new Error('polyfill failed because global object is unavailable in this environment');
	    }
	  }

	  var P = local.Promise;

	  if (P) {
	    var promiseToString = null;
	    try {
	      promiseToString = Object.prototype.toString.call(P.resolve());
	    } catch (e) {
	      // silently ignored
	    }

	    if (promiseToString === '[object Promise]' && !P.cast) {
	      return;
	    }
	  }

	  local.Promise = Promise$1;
	}

	// Strange compat..
	Promise$1.polyfill = polyfill;
	Promise$1.Promise = Promise$1;

	return Promise$1;

	})));



	//# sourceMappingURL=es6-promise.map

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4), (function() { return this; }())))

/***/ },
/* 622 */
/***/ function(module, exports, __webpack_require__) {

	// the whatwg-fetch polyfill installs the fetch() function
	// on the global object (window or self)
	//
	// Return that as the export for use in Webpack, Browserify etc.
	__webpack_require__(623);
	module.exports = self.fetch.bind(self);


/***/ },
/* 623 */
/***/ function(module, exports, __webpack_require__) {

	(function (global, factory) {
	   true ? factory(exports) :
	  typeof define === 'function' && define.amd ? define(['exports'], factory) :
	  (factory((global.WHATWGFetch = {})));
	}(this, (function (exports) { 'use strict';

	  var support = {
	    searchParams: 'URLSearchParams' in self,
	    iterable: 'Symbol' in self && 'iterator' in Symbol,
	    blob:
	      'FileReader' in self &&
	      'Blob' in self &&
	      (function() {
	        try {
	          new Blob();
	          return true
	        } catch (e) {
	          return false
	        }
	      })(),
	    formData: 'FormData' in self,
	    arrayBuffer: 'ArrayBuffer' in self
	  };

	  function isDataView(obj) {
	    return obj && DataView.prototype.isPrototypeOf(obj)
	  }

	  if (support.arrayBuffer) {
	    var viewClasses = [
	      '[object Int8Array]',
	      '[object Uint8Array]',
	      '[object Uint8ClampedArray]',
	      '[object Int16Array]',
	      '[object Uint16Array]',
	      '[object Int32Array]',
	      '[object Uint32Array]',
	      '[object Float32Array]',
	      '[object Float64Array]'
	    ];

	    var isArrayBufferView =
	      ArrayBuffer.isView ||
	      function(obj) {
	        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
	      };
	  }

	  function normalizeName(name) {
	    if (typeof name !== 'string') {
	      name = String(name);
	    }
	    if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
	      throw new TypeError('Invalid character in header field name')
	    }
	    return name.toLowerCase()
	  }

	  function normalizeValue(value) {
	    if (typeof value !== 'string') {
	      value = String(value);
	    }
	    return value
	  }

	  // Build a destructive iterator for the value list
	  function iteratorFor(items) {
	    var iterator = {
	      next: function() {
	        var value = items.shift();
	        return {done: value === undefined, value: value}
	      }
	    };

	    if (support.iterable) {
	      iterator[Symbol.iterator] = function() {
	        return iterator
	      };
	    }

	    return iterator
	  }

	  function Headers(headers) {
	    this.map = {};

	    if (headers instanceof Headers) {
	      headers.forEach(function(value, name) {
	        this.append(name, value);
	      }, this);
	    } else if (Array.isArray(headers)) {
	      headers.forEach(function(header) {
	        this.append(header[0], header[1]);
	      }, this);
	    } else if (headers) {
	      Object.getOwnPropertyNames(headers).forEach(function(name) {
	        this.append(name, headers[name]);
	      }, this);
	    }
	  }

	  Headers.prototype.append = function(name, value) {
	    name = normalizeName(name);
	    value = normalizeValue(value);
	    var oldValue = this.map[name];
	    this.map[name] = oldValue ? oldValue + ', ' + value : value;
	  };

	  Headers.prototype['delete'] = function(name) {
	    delete this.map[normalizeName(name)];
	  };

	  Headers.prototype.get = function(name) {
	    name = normalizeName(name);
	    return this.has(name) ? this.map[name] : null
	  };

	  Headers.prototype.has = function(name) {
	    return this.map.hasOwnProperty(normalizeName(name))
	  };

	  Headers.prototype.set = function(name, value) {
	    this.map[normalizeName(name)] = normalizeValue(value);
	  };

	  Headers.prototype.forEach = function(callback, thisArg) {
	    for (var name in this.map) {
	      if (this.map.hasOwnProperty(name)) {
	        callback.call(thisArg, this.map[name], name, this);
	      }
	    }
	  };

	  Headers.prototype.keys = function() {
	    var items = [];
	    this.forEach(function(value, name) {
	      items.push(name);
	    });
	    return iteratorFor(items)
	  };

	  Headers.prototype.values = function() {
	    var items = [];
	    this.forEach(function(value) {
	      items.push(value);
	    });
	    return iteratorFor(items)
	  };

	  Headers.prototype.entries = function() {
	    var items = [];
	    this.forEach(function(value, name) {
	      items.push([name, value]);
	    });
	    return iteratorFor(items)
	  };

	  if (support.iterable) {
	    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
	  }

	  function consumed(body) {
	    if (body.bodyUsed) {
	      return Promise.reject(new TypeError('Already read'))
	    }
	    body.bodyUsed = true;
	  }

	  function fileReaderReady(reader) {
	    return new Promise(function(resolve, reject) {
	      reader.onload = function() {
	        resolve(reader.result);
	      };
	      reader.onerror = function() {
	        reject(reader.error);
	      };
	    })
	  }

	  function readBlobAsArrayBuffer(blob) {
	    var reader = new FileReader();
	    var promise = fileReaderReady(reader);
	    reader.readAsArrayBuffer(blob);
	    return promise
	  }

	  function readBlobAsText(blob) {
	    var reader = new FileReader();
	    var promise = fileReaderReady(reader);
	    reader.readAsText(blob);
	    return promise
	  }

	  function readArrayBufferAsText(buf) {
	    var view = new Uint8Array(buf);
	    var chars = new Array(view.length);

	    for (var i = 0; i < view.length; i++) {
	      chars[i] = String.fromCharCode(view[i]);
	    }
	    return chars.join('')
	  }

	  function bufferClone(buf) {
	    if (buf.slice) {
	      return buf.slice(0)
	    } else {
	      var view = new Uint8Array(buf.byteLength);
	      view.set(new Uint8Array(buf));
	      return view.buffer
	    }
	  }

	  function Body() {
	    this.bodyUsed = false;

	    this._initBody = function(body) {
	      this._bodyInit = body;
	      if (!body) {
	        this._bodyText = '';
	      } else if (typeof body === 'string') {
	        this._bodyText = body;
	      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
	        this._bodyBlob = body;
	      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
	        this._bodyFormData = body;
	      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
	        this._bodyText = body.toString();
	      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
	        this._bodyArrayBuffer = bufferClone(body.buffer);
	        // IE 10-11 can't handle a DataView body.
	        this._bodyInit = new Blob([this._bodyArrayBuffer]);
	      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
	        this._bodyArrayBuffer = bufferClone(body);
	      } else {
	        this._bodyText = body = Object.prototype.toString.call(body);
	      }

	      if (!this.headers.get('content-type')) {
	        if (typeof body === 'string') {
	          this.headers.set('content-type', 'text/plain;charset=UTF-8');
	        } else if (this._bodyBlob && this._bodyBlob.type) {
	          this.headers.set('content-type', this._bodyBlob.type);
	        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
	          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
	        }
	      }
	    };

	    if (support.blob) {
	      this.blob = function() {
	        var rejected = consumed(this);
	        if (rejected) {
	          return rejected
	        }

	        if (this._bodyBlob) {
	          return Promise.resolve(this._bodyBlob)
	        } else if (this._bodyArrayBuffer) {
	          return Promise.resolve(new Blob([this._bodyArrayBuffer]))
	        } else if (this._bodyFormData) {
	          throw new Error('could not read FormData body as blob')
	        } else {
	          return Promise.resolve(new Blob([this._bodyText]))
	        }
	      };

	      this.arrayBuffer = function() {
	        if (this._bodyArrayBuffer) {
	          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)
	        } else {
	          return this.blob().then(readBlobAsArrayBuffer)
	        }
	      };
	    }

	    this.text = function() {
	      var rejected = consumed(this);
	      if (rejected) {
	        return rejected
	      }

	      if (this._bodyBlob) {
	        return readBlobAsText(this._bodyBlob)
	      } else if (this._bodyArrayBuffer) {
	        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
	      } else if (this._bodyFormData) {
	        throw new Error('could not read FormData body as text')
	      } else {
	        return Promise.resolve(this._bodyText)
	      }
	    };

	    if (support.formData) {
	      this.formData = function() {
	        return this.text().then(decode)
	      };
	    }

	    this.json = function() {
	      return this.text().then(JSON.parse)
	    };

	    return this
	  }

	  // HTTP methods whose capitalization should be normalized
	  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

	  function normalizeMethod(method) {
	    var upcased = method.toUpperCase();
	    return methods.indexOf(upcased) > -1 ? upcased : method
	  }

	  function Request(input, options) {
	    options = options || {};
	    var body = options.body;

	    if (input instanceof Request) {
	      if (input.bodyUsed) {
	        throw new TypeError('Already read')
	      }
	      this.url = input.url;
	      this.credentials = input.credentials;
	      if (!options.headers) {
	        this.headers = new Headers(input.headers);
	      }
	      this.method = input.method;
	      this.mode = input.mode;
	      this.signal = input.signal;
	      if (!body && input._bodyInit != null) {
	        body = input._bodyInit;
	        input.bodyUsed = true;
	      }
	    } else {
	      this.url = String(input);
	    }

	    this.credentials = options.credentials || this.credentials || 'same-origin';
	    if (options.headers || !this.headers) {
	      this.headers = new Headers(options.headers);
	    }
	    this.method = normalizeMethod(options.method || this.method || 'GET');
	    this.mode = options.mode || this.mode || null;
	    this.signal = options.signal || this.signal;
	    this.referrer = null;

	    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
	      throw new TypeError('Body not allowed for GET or HEAD requests')
	    }
	    this._initBody(body);
	  }

	  Request.prototype.clone = function() {
	    return new Request(this, {body: this._bodyInit})
	  };

	  function decode(body) {
	    var form = new FormData();
	    body
	      .trim()
	      .split('&')
	      .forEach(function(bytes) {
	        if (bytes) {
	          var split = bytes.split('=');
	          var name = split.shift().replace(/\+/g, ' ');
	          var value = split.join('=').replace(/\+/g, ' ');
	          form.append(decodeURIComponent(name), decodeURIComponent(value));
	        }
	      });
	    return form
	  }

	  function parseHeaders(rawHeaders) {
	    var headers = new Headers();
	    // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
	    // https://tools.ietf.org/html/rfc7230#section-3.2
	    var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
	    preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
	      var parts = line.split(':');
	      var key = parts.shift().trim();
	      if (key) {
	        var value = parts.join(':').trim();
	        headers.append(key, value);
	      }
	    });
	    return headers
	  }

	  Body.call(Request.prototype);

	  function Response(bodyInit, options) {
	    if (!options) {
	      options = {};
	    }

	    this.type = 'default';
	    this.status = options.status === undefined ? 200 : options.status;
	    this.ok = this.status >= 200 && this.status < 300;
	    this.statusText = 'statusText' in options ? options.statusText : 'OK';
	    this.headers = new Headers(options.headers);
	    this.url = options.url || '';
	    this._initBody(bodyInit);
	  }

	  Body.call(Response.prototype);

	  Response.prototype.clone = function() {
	    return new Response(this._bodyInit, {
	      status: this.status,
	      statusText: this.statusText,
	      headers: new Headers(this.headers),
	      url: this.url
	    })
	  };

	  Response.error = function() {
	    var response = new Response(null, {status: 0, statusText: ''});
	    response.type = 'error';
	    return response
	  };

	  var redirectStatuses = [301, 302, 303, 307, 308];

	  Response.redirect = function(url, status) {
	    if (redirectStatuses.indexOf(status) === -1) {
	      throw new RangeError('Invalid status code')
	    }

	    return new Response(null, {status: status, headers: {location: url}})
	  };

	  exports.DOMException = self.DOMException;
	  try {
	    new exports.DOMException();
	  } catch (err) {
	    exports.DOMException = function(message, name) {
	      this.message = message;
	      this.name = name;
	      var error = Error(message);
	      this.stack = error.stack;
	    };
	    exports.DOMException.prototype = Object.create(Error.prototype);
	    exports.DOMException.prototype.constructor = exports.DOMException;
	  }

	  function fetch(input, init) {
	    return new Promise(function(resolve, reject) {
	      var request = new Request(input, init);

	      if (request.signal && request.signal.aborted) {
	        return reject(new exports.DOMException('Aborted', 'AbortError'))
	      }

	      var xhr = new XMLHttpRequest();

	      function abortXhr() {
	        xhr.abort();
	      }

	      xhr.onload = function() {
	        var options = {
	          status: xhr.status,
	          statusText: xhr.statusText,
	          headers: parseHeaders(xhr.getAllResponseHeaders() || '')
	        };
	        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
	        var body = 'response' in xhr ? xhr.response : xhr.responseText;
	        resolve(new Response(body, options));
	      };

	      xhr.onerror = function() {
	        reject(new TypeError('Network request failed'));
	      };

	      xhr.ontimeout = function() {
	        reject(new TypeError('Network request failed'));
	      };

	      xhr.onabort = function() {
	        reject(new exports.DOMException('Aborted', 'AbortError'));
	      };

	      xhr.open(request.method, request.url, true);

	      if (request.credentials === 'include') {
	        xhr.withCredentials = true;
	      } else if (request.credentials === 'omit') {
	        xhr.withCredentials = false;
	      }

	      if ('responseType' in xhr && support.blob) {
	        xhr.responseType = 'blob';
	      }

	      request.headers.forEach(function(value, name) {
	        xhr.setRequestHeader(name, value);
	      });

	      if (request.signal) {
	        request.signal.addEventListener('abort', abortXhr);

	        xhr.onreadystatechange = function() {
	          // DONE (success or failure)
	          if (xhr.readyState === 4) {
	            request.signal.removeEventListener('abort', abortXhr);
	          }
	        };
	      }

	      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
	    })
	  }

	  fetch.polyfill = true;

	  if (!self.fetch) {
	    self.fetch = fetch;
	    self.Headers = Headers;
	    self.Request = Request;
	    self.Response = Response;
	  }

	  exports.Headers = Headers;
	  exports.Request = Request;
	  exports.Response = Response;
	  exports.fetch = fetch;

	  Object.defineProperty(exports, '__esModule', { value: true });

	})));


/***/ },
/* 624 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.__RewireAPI__ = exports.__ResetDependency__ = exports.__set__ = exports.__Rewire__ = exports.__GetDependency__ = exports.__get__ = exports.RedBoxError = undefined;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _propTypes = __webpack_require__(614);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(158);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _style = __webpack_require__(625);

	var _style2 = _interopRequireDefault(_style);

	var _errorStackParser = __webpack_require__(626);

	var _errorStackParser2 = _interopRequireDefault(_errorStackParser);

	var _objectAssign = __webpack_require__(616);

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	var _lib = __webpack_require__(628);

	var _sourcemappedStacktrace = __webpack_require__(629);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var RedBoxError = exports.RedBoxError = function (_get__2) {
	  _inherits(RedBoxError, _get__2);

	  function RedBoxError(props) {
	    _classCallCheck(this, RedBoxError);

	    var _this = _possibleConstructorReturn(this, (RedBoxError.__proto__ || Object.getPrototypeOf(RedBoxError)).call(this, props));

	    _this.state = {
	      error: null,
	      mapped: false
	    };

	    _this.mapOnConstruction(props.error);
	    return _this;
	  }

	  // State is used to store the error mapped to the source map.


	  _createClass(RedBoxError, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      if (!this.state.mapped) this.mapError(this.props.error);
	    }

	    // Try to map the error when the component gets constructed, this is possible
	    // in some cases like evals.

	  }, {
	    key: 'mapOnConstruction',
	    value: function mapOnConstruction(error) {
	      var stackLines = error.stack.split('\n');

	      // There's no stack, only the error message.
	      if (stackLines.length < 2) {
	        this.state = { error: error, mapped: true };
	        return;
	      }

	      // Using the “eval” setting on webpack already gives the correct location.
	      var isWebpackEval = stackLines[1].search(/\(webpack:\/{3}/) !== -1;
	      if (isWebpackEval) {
	        // No changes are needed here.
	        this.state = { error: error, mapped: true };
	        return;
	      }

	      // Other eval follow a specific pattern and can be easily parsed.
	      var isEval = stackLines[1].search(/\(eval at/) !== -1;
	      if (!isEval) {
	        // mapping will be deferred until `componentDidMount`
	        this.state = { error: error, mapped: false };
	        return;
	      }

	      // The first line is the error message.
	      var fixedLines = [stackLines.shift()];
	      // The rest needs to be fixed.
	      var _iteratorNormalCompletion = true;
	      var _didIteratorError = false;
	      var _iteratorError = undefined;

	      try {
	        for (var _iterator = stackLines[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	          var stackLine = _step.value;

	          var evalStackLine = stackLine.match(/(.+)\(eval at (.+) \(.+?\), .+(\:[0-9]+\:[0-9]+)\)/);
	          if (evalStackLine) {
	            var _evalStackLine = _slicedToArray(evalStackLine, 4),
	                atSomething = _evalStackLine[1],
	                file = _evalStackLine[2],
	                rowColumn = _evalStackLine[3];

	            fixedLines.push(atSomething + ' (' + file + rowColumn + ')');
	          } else {
	            // TODO: When stack frames of different types are detected, try to load the additional source maps
	            fixedLines.push(stackLine);
	          }
	        }
	      } catch (err) {
	        _didIteratorError = true;
	        _iteratorError = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion && _iterator["return"]) {
	            _iterator["return"]();
	          }
	        } finally {
	          if (_didIteratorError) {
	            throw _iteratorError;
	          }
	        }
	      }

	      error.stack = fixedLines.join('\n');
	      this.state = { error: error, mapped: true };
	    }
	  }, {
	    key: 'mapError',
	    value: function mapError(error) {
	      var _this2 = this;

	      _get__('mapStackTrace')(error.stack, function (mappedStack) {
	        error.stack = mappedStack.join('\n');
	        _this2.setState({ error: error, mapped: true });
	      });
	    }
	  }, {
	    key: 'renderFrames',
	    value: function renderFrames(frames) {
	      var _props = this.props,
	          filename = _props.filename,
	          editorScheme = _props.editorScheme,
	          useLines = _props.useLines,
	          useColumns = _props.useColumns;

	      var _get__3 = _get__('assign')({}, _get__('style'), this.props.style),
	          frame = _get__3.frame,
	          file = _get__3.file,
	          linkToFile = _get__3.linkToFile;

	      return frames.map(function (f, index) {
	        var text = void 0;
	        var url = void 0;

	        if (index === 0 && filename && !_get__('isFilenameAbsolute')(f.fileName)) {
	          url = _get__('makeUrl')(filename, editorScheme);
	          text = _get__('makeLinkText')(filename);
	        } else {
	          var lines = useLines ? f.lineNumber : null;
	          var columns = useColumns ? f.columnNumber : null;
	          url = _get__('makeUrl')(f.fileName, editorScheme, lines, columns);
	          text = _get__('makeLinkText')(f.fileName, lines, columns);
	        }

	        return _get__('React').createElement(
	          'div',
	          { style: frame, key: index },
	          _get__('React').createElement(
	            'div',
	            null,
	            f.functionName
	          ),
	          _get__('React').createElement(
	            'div',
	            { style: file },
	            _get__('React').createElement(
	              'a',
	              { href: url, style: linkToFile },
	              text
	            )
	          )
	        );
	      });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      // The error is received as a property to initialize state.error, which may
	      // be updated when it is mapped to the source map.
	      var error = this.state.error;
	      var className = this.props.className;

	      var _get__4 = _get__('assign')({}, _get__('style'), this.props.style),
	          redbox = _get__4.redbox,
	          message = _get__4.message,
	          stack = _get__4.stack,
	          frame = _get__4.frame;

	      var frames = void 0;
	      var parseError = void 0;
	      try {
	        frames = _get__('ErrorStackParser').parse(error);
	      } catch (e) {
	        parseError = new Error('Failed to parse stack trace. Stack trace information unavailable.');
	      }

	      if (parseError) {
	        frames = _get__('React').createElement(
	          'div',
	          { style: frame, key: 0 },
	          _get__('React').createElement(
	            'div',
	            null,
	            parseError.message
	          )
	        );
	      } else {
	        frames = this.renderFrames(frames);
	      }

	      return _get__('React').createElement(
	        'div',
	        { style: redbox, className: className },
	        _get__('React').createElement(
	          'div',
	          { style: message },
	          error.name,
	          ': ',
	          error.message
	        ),
	        _get__('React').createElement(
	          'div',
	          { style: stack },
	          frames
	        )
	      );
	    }
	  }]);

	  return RedBoxError;
	}(_get__('Component'));

	// "Portal" component for actual RedBoxError component to
	// render to (directly under body). Prevents bugs as in #27.


	RedBoxError.propTypes = {
	  error: _get__('PropTypes').instanceOf(Error).isRequired,
	  filename: _get__('PropTypes').string,
	  editorScheme: _get__('PropTypes').string,
	  useLines: _get__('PropTypes').bool,
	  useColumns: _get__('PropTypes').bool,
	  style: _get__('PropTypes').object,
	  className: _get__('PropTypes').string
	};
	RedBoxError.displayName = 'RedBoxError';
	RedBoxError.defaultProps = {
	  useLines: true,
	  useColumns: true };

	var RedBox = function (_get__5) {
	  _inherits(RedBox, _get__5);

	  function RedBox() {
	    _classCallCheck(this, RedBox);

	    return _possibleConstructorReturn(this, (RedBox.__proto__ || Object.getPrototypeOf(RedBox)).apply(this, arguments));
	  }

	  _createClass(RedBox, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.el = document.createElement('div');
	      document.body.appendChild(this.el);
	      this.renderRedBoxError();
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate() {
	      this.renderRedBoxError();
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      _get__('ReactDOM').unmountComponentAtNode(this.el);
	      document.body.removeChild(this.el);
	      this.el = null;
	    }
	  }, {
	    key: 'renderRedBoxError',
	    value: function renderRedBoxError() {
	      _get__('ReactDOM').render(_get__('React').createElement(_get__('RedBoxError'), this.props), this.el);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return null;
	    }
	  }]);

	  return RedBox;
	}(_get__('Component'));

	RedBox.propTypes = {
	  error: _get__('PropTypes').instanceOf(Error).isRequired
	};
	RedBox.displayName = 'RedBox';
	exports["default"] = RedBox;

	var _RewiredData__ = Object.create(null);

	var INTENTIONAL_UNDEFINED = '__INTENTIONAL_UNDEFINED__';
	var _RewireAPI__ = {};

	(function () {
	  function addPropertyToAPIObject(name, value) {
	    Object.defineProperty(_RewireAPI__, name, {
	      value: value,
	      enumerable: false,
	      configurable: true
	    });
	  }

	  addPropertyToAPIObject('__get__', _get__);
	  addPropertyToAPIObject('__GetDependency__', _get__);
	  addPropertyToAPIObject('__Rewire__', _set__);
	  addPropertyToAPIObject('__set__', _set__);
	  addPropertyToAPIObject('__reset__', _reset__);
	  addPropertyToAPIObject('__ResetDependency__', _reset__);
	  addPropertyToAPIObject('__with__', _with__);
	})();

	function _get__(variableName) {
	  if (_RewiredData__ === undefined || _RewiredData__[variableName] === undefined) {
	    return _get_original__(variableName);
	  } else {
	    var value = _RewiredData__[variableName];

	    if (value === INTENTIONAL_UNDEFINED) {
	      return undefined;
	    } else {
	      return value;
	    }
	  }
	}

	function _get_original__(variableName) {
	  switch (variableName) {
	    case 'PropTypes':
	      return _propTypes2["default"];

	    case 'mapStackTrace':
	      return _sourcemappedStacktrace.mapStackTrace;

	    case 'assign':
	      return _objectAssign2["default"];

	    case 'style':
	      return _style2["default"];

	    case 'isFilenameAbsolute':
	      return _lib.isFilenameAbsolute;

	    case 'makeUrl':
	      return _lib.makeUrl;

	    case 'makeLinkText':
	      return _lib.makeLinkText;

	    case 'ErrorStackParser':
	      return _errorStackParser2["default"];

	    case 'Component':
	      return _react.Component;

	    case 'ReactDOM':
	      return _reactDom2["default"];

	    case 'React':
	      return _react2["default"];

	    case 'RedBoxError':
	      return RedBoxError;
	  }

	  return undefined;
	}

	function _assign__(variableName, value) {
	  if (_RewiredData__ === undefined || _RewiredData__[variableName] === undefined) {
	    return _set_original__(variableName, value);
	  } else {
	    return _RewiredData__[variableName] = value;
	  }
	}

	function _set_original__(variableName, _value) {
	  switch (variableName) {}

	  return undefined;
	}

	function _update_operation__(operation, variableName, prefix) {
	  var oldValue = _get__(variableName);

	  var newValue = operation === '++' ? oldValue + 1 : oldValue - 1;

	  _assign__(variableName, newValue);

	  return prefix ? newValue : oldValue;
	}

	function _set__(variableName, value) {
	  if ((typeof variableName === 'undefined' ? 'undefined' : _typeof(variableName)) === 'object') {
	    Object.keys(variableName).forEach(function (name) {
	      _RewiredData__[name] = variableName[name];
	    });
	  } else {
	    if (value === undefined) {
	      _RewiredData__[variableName] = INTENTIONAL_UNDEFINED;
	    } else {
	      _RewiredData__[variableName] = value;
	    }

	    return function () {
	      _reset__(variableName);
	    };
	  }
	}

	function _reset__(variableName) {
	  delete _RewiredData__[variableName];
	}

	function _with__(object) {
	  var rewiredVariableNames = Object.keys(object);
	  var previousValues = {};

	  function reset() {
	    rewiredVariableNames.forEach(function (variableName) {
	      _RewiredData__[variableName] = previousValues[variableName];
	    });
	  }

	  return function (callback) {
	    rewiredVariableNames.forEach(function (variableName) {
	      previousValues[variableName] = _RewiredData__[variableName];
	      _RewiredData__[variableName] = object[variableName];
	    });
	    var result = callback();

	    if (!!result && typeof result.then == 'function') {
	      result.then(reset)["catch"](reset);
	    } else {
	      reset();
	    }

	    return result;
	  };
	}

	var _typeOfOriginalExport = typeof RedBox === 'undefined' ? 'undefined' : _typeof(RedBox);

	function addNonEnumerableProperty(name, value) {
	  Object.defineProperty(RedBox, name, {
	    value: value,
	    enumerable: false,
	    configurable: true
	  });
	}

	if ((_typeOfOriginalExport === 'object' || _typeOfOriginalExport === 'function') && Object.isExtensible(RedBox)) {
	  addNonEnumerableProperty('__get__', _get__);
	  addNonEnumerableProperty('__GetDependency__', _get__);
	  addNonEnumerableProperty('__Rewire__', _set__);
	  addNonEnumerableProperty('__set__', _set__);
	  addNonEnumerableProperty('__reset__', _reset__);
	  addNonEnumerableProperty('__ResetDependency__', _reset__);
	  addNonEnumerableProperty('__with__', _with__);
	  addNonEnumerableProperty('__RewireAPI__', _RewireAPI__);
	}

	exports.__get__ = _get__;
	exports.__GetDependency__ = _get__;
	exports.__Rewire__ = _set__;
	exports.__set__ = _set__;
	exports.__ResetDependency__ = _reset__;
	exports.__RewireAPI__ = _RewireAPI__;

/***/ },
/* 625 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var _DefaultExportValue = {
	  redbox: {
	    boxSizing: 'border-box',
	    fontFamily: 'sans-serif',
	    position: 'fixed',
	    padding: 10,
	    top: '0px',
	    left: '0px',
	    bottom: '0px',
	    right: '0px',
	    width: '100%',
	    background: 'rgb(204, 0, 0)',
	    color: 'white',
	    zIndex: 2147483647,
	    textAlign: 'left',
	    fontSize: '16px',
	    lineHeight: 1.2,
	    overflow: 'auto'
	  },
	  message: {
	    fontWeight: 'bold'
	  },
	  stack: {
	    fontFamily: 'monospace',
	    marginTop: '2em'
	  },
	  frame: {
	    marginTop: '1em'
	  },
	  file: {
	    fontSize: '0.8em',
	    color: 'rgba(255, 255, 255, 0.7)'
	  },
	  linkToFile: {
	    textDecoration: 'none',
	    color: 'rgba(255, 255, 255, 0.7)'
	  }
	};
	exports["default"] = _DefaultExportValue;

/***/ },
/* 626 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(root, factory) {
	    'use strict';
	    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.

	    /* istanbul ignore next */
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(627)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('stackframe'));
	    } else {
	        root.ErrorStackParser = factory(root.StackFrame);
	    }
	}(this, function ErrorStackParser(StackFrame) {
	    'use strict';

	    var FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\S+\:\d+/;
	    var CHROME_IE_STACK_REGEXP = /^\s*at .*(\S+\:\d+|\(native\))/m;
	    var SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\[native code\])?$/;

	    function _map(array, fn, thisArg) {
	        if (typeof Array.prototype.map === 'function') {
	            return array.map(fn, thisArg);
	        } else {
	            var output = new Array(array.length);
	            for (var i = 0; i < array.length; i++) {
	                output[i] = fn.call(thisArg, array[i]);
	            }
	            return output;
	        }
	    }

	    function _filter(array, fn, thisArg) {
	        if (typeof Array.prototype.filter === 'function') {
	            return array.filter(fn, thisArg);
	        } else {
	            var output = [];
	            for (var i = 0; i < array.length; i++) {
	                if (fn.call(thisArg, array[i])) {
	                    output.push(array[i]);
	                }
	            }
	            return output;
	        }
	    }

	    function _indexOf(array, target) {
	        if (typeof Array.prototype.indexOf === 'function') {
	            return array.indexOf(target);
	        } else {
	            for (var i = 0; i < array.length; i++) {
	                if (array[i] === target) {
	                    return i;
	                }
	            }
	            return -1;
	        }
	    }

	    return {
	        /**
	         * Given an Error object, extract the most information from it.
	         *
	         * @param {Error} error object
	         * @return {Array} of StackFrames
	         */
	        parse: function ErrorStackParser$$parse(error) {
	            if (typeof error.stacktrace !== 'undefined' || typeof error['opera#sourceloc'] !== 'undefined') {
	                return this.parseOpera(error);
	            } else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {
	                return this.parseV8OrIE(error);
	            } else if (error.stack) {
	                return this.parseFFOrSafari(error);
	            } else {
	                throw new Error('Cannot parse given Error object');
	            }
	        },

	        // Separate line and column numbers from a string of the form: (URI:Line:Column)
	        extractLocation: function ErrorStackParser$$extractLocation(urlLike) {
	            // Fail-fast but return locations like "(native)"
	            if (urlLike.indexOf(':') === -1) {
	                return [urlLike];
	            }

	            var regExp = /(.+?)(?:\:(\d+))?(?:\:(\d+))?$/;
	            var parts = regExp.exec(urlLike.replace(/[\(\)]/g, ''));
	            return [parts[1], parts[2] || undefined, parts[3] || undefined];
	        },

	        parseV8OrIE: function ErrorStackParser$$parseV8OrIE(error) {
	            var filtered = _filter(error.stack.split('\n'), function(line) {
	                return !!line.match(CHROME_IE_STACK_REGEXP);
	            }, this);

	            return _map(filtered, function(line) {
	                if (line.indexOf('(eval ') > -1) {
	                    // Throw away eval information until we implement stacktrace.js/stackframe#8
	                    line = line.replace(/eval code/g, 'eval').replace(/(\(eval at [^\()]*)|(\)\,.*$)/g, '');
	                }
	                var tokens = line.replace(/^\s+/, '').replace(/\(eval code/g, '(').split(/\s+/).slice(1);
	                var locationParts = this.extractLocation(tokens.pop());
	                var functionName = tokens.join(' ') || undefined;
	                var fileName = _indexOf(['eval', '<anonymous>'], locationParts[0]) > -1 ? undefined : locationParts[0];

	                return new StackFrame(functionName, undefined, fileName, locationParts[1], locationParts[2], line);
	            }, this);
	        },

	        parseFFOrSafari: function ErrorStackParser$$parseFFOrSafari(error) {
	            var filtered = _filter(error.stack.split('\n'), function(line) {
	                return !line.match(SAFARI_NATIVE_CODE_REGEXP);
	            }, this);

	            return _map(filtered, function(line) {
	                // Throw away eval information until we implement stacktrace.js/stackframe#8
	                if (line.indexOf(' > eval') > -1) {
	                    line = line.replace(/ line (\d+)(?: > eval line \d+)* > eval\:\d+\:\d+/g, ':$1');
	                }

	                if (line.indexOf('@') === -1 && line.indexOf(':') === -1) {
	                    // Safari eval frames only have function names and nothing else
	                    return new StackFrame(line);
	                } else {
	                    var tokens = line.split('@');
	                    var locationParts = this.extractLocation(tokens.pop());
	                    var functionName = tokens.join('@') || undefined;
	                    return new StackFrame(functionName,
	                        undefined,
	                        locationParts[0],
	                        locationParts[1],
	                        locationParts[2],
	                        line);
	                }
	            }, this);
	        },

	        parseOpera: function ErrorStackParser$$parseOpera(e) {
	            if (!e.stacktrace || (e.message.indexOf('\n') > -1 &&
	                e.message.split('\n').length > e.stacktrace.split('\n').length)) {
	                return this.parseOpera9(e);
	            } else if (!e.stack) {
	                return this.parseOpera10(e);
	            } else {
	                return this.parseOpera11(e);
	            }
	        },

	        parseOpera9: function ErrorStackParser$$parseOpera9(e) {
	            var lineRE = /Line (\d+).*script (?:in )?(\S+)/i;
	            var lines = e.message.split('\n');
	            var result = [];

	            for (var i = 2, len = lines.length; i < len; i += 2) {
	                var match = lineRE.exec(lines[i]);
	                if (match) {
	                    result.push(new StackFrame(undefined, undefined, match[2], match[1], undefined, lines[i]));
	                }
	            }

	            return result;
	        },

	        parseOpera10: function ErrorStackParser$$parseOpera10(e) {
	            var lineRE = /Line (\d+).*script (?:in )?(\S+)(?:: In function (\S+))?$/i;
	            var lines = e.stacktrace.split('\n');
	            var result = [];

	            for (var i = 0, len = lines.length; i < len; i += 2) {
	                var match = lineRE.exec(lines[i]);
	                if (match) {
	                    result.push(
	                        new StackFrame(
	                            match[3] || undefined,
	                            undefined,
	                            match[2],
	                            match[1],
	                            undefined,
	                            lines[i]
	                        )
	                    );
	                }
	            }

	            return result;
	        },

	        // Opera 10.65+ Error.stack very similar to FF/Safari
	        parseOpera11: function ErrorStackParser$$parseOpera11(error) {
	            var filtered = _filter(error.stack.split('\n'), function(line) {
	                return !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/);
	            }, this);

	            return _map(filtered, function(line) {
	                var tokens = line.split('@');
	                var locationParts = this.extractLocation(tokens.pop());
	                var functionCall = (tokens.shift() || '');
	                var functionName = functionCall
	                        .replace(/<anonymous function(: (\w+))?>/, '$2')
	                        .replace(/\([^\)]*\)/g, '') || undefined;
	                var argsRaw;
	                if (functionCall.match(/\(([^\)]*)\)/)) {
	                    argsRaw = functionCall.replace(/^[^\(]+\(([^\)]*)\)$/, '$1');
	                }
	                var args = (argsRaw === undefined || argsRaw === '[arguments not available]') ?
	                    undefined : argsRaw.split(',');
	                return new StackFrame(
	                    functionName,
	                    args,
	                    locationParts[0],
	                    locationParts[1],
	                    locationParts[2],
	                    line);
	            }, this);
	        }
	    };
	}));



/***/ },
/* 627 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
	    'use strict';
	    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.

	    /* istanbul ignore next */
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports === 'object') {
	        module.exports = factory();
	    } else {
	        root.StackFrame = factory();
	    }
	}(this, function () {
	    'use strict';
	    function _isNumber(n) {
	        return !isNaN(parseFloat(n)) && isFinite(n);
	    }

	    function StackFrame(functionName, args, fileName, lineNumber, columnNumber, source) {
	        if (functionName !== undefined) {
	            this.setFunctionName(functionName);
	        }
	        if (args !== undefined) {
	            this.setArgs(args);
	        }
	        if (fileName !== undefined) {
	            this.setFileName(fileName);
	        }
	        if (lineNumber !== undefined) {
	            this.setLineNumber(lineNumber);
	        }
	        if (columnNumber !== undefined) {
	            this.setColumnNumber(columnNumber);
	        }
	        if (source !== undefined) {
	            this.setSource(source);
	        }
	    }

	    StackFrame.prototype = {
	        getFunctionName: function () {
	            return this.functionName;
	        },
	        setFunctionName: function (v) {
	            this.functionName = String(v);
	        },

	        getArgs: function () {
	            return this.args;
	        },
	        setArgs: function (v) {
	            if (Object.prototype.toString.call(v) !== '[object Array]') {
	                throw new TypeError('Args must be an Array');
	            }
	            this.args = v;
	        },

	        // NOTE: Property name may be misleading as it includes the path,
	        // but it somewhat mirrors V8's JavaScriptStackTraceApi
	        // https://code.google.com/p/v8/wiki/JavaScriptStackTraceApi and Gecko's
	        // http://mxr.mozilla.org/mozilla-central/source/xpcom/base/nsIException.idl#14
	        getFileName: function () {
	            return this.fileName;
	        },
	        setFileName: function (v) {
	            this.fileName = String(v);
	        },

	        getLineNumber: function () {
	            return this.lineNumber;
	        },
	        setLineNumber: function (v) {
	            if (!_isNumber(v)) {
	                throw new TypeError('Line Number must be a Number');
	            }
	            this.lineNumber = Number(v);
	        },

	        getColumnNumber: function () {
	            return this.columnNumber;
	        },
	        setColumnNumber: function (v) {
	            if (!_isNumber(v)) {
	                throw new TypeError('Column Number must be a Number');
	            }
	            this.columnNumber = Number(v);
	        },

	        getSource: function () {
	            return this.source;
	        },
	        setSource: function (v) {
	            this.source = String(v);
	        },

	        toString: function() {
	            var functionName = this.getFunctionName() || '{anonymous}';
	            var args = '(' + (this.getArgs() || []).join(',') + ')';
	            var fileName = this.getFileName() ? ('@' + this.getFileName()) : '';
	            var lineNumber = _isNumber(this.getLineNumber()) ? (':' + this.getLineNumber()) : '';
	            var columnNumber = _isNumber(this.getColumnNumber()) ? (':' + this.getColumnNumber()) : '';
	            return functionName + args + fileName + lineNumber + columnNumber;
	        }
	    };

	    return StackFrame;
	}));


/***/ },
/* 628 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var filenameWithoutLoaders = exports.filenameWithoutLoaders = function filenameWithoutLoaders() {
	  var filename = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

	  var index = filename.lastIndexOf('!');

	  return index < 0 ? filename : filename.substr(index + 1);
	};

	var filenameHasLoaders = exports.filenameHasLoaders = function filenameHasLoaders(filename) {
	  var actualFilename = _get__('filenameWithoutLoaders')(filename);

	  return actualFilename !== filename;
	};

	var filenameHasSchema = exports.filenameHasSchema = function filenameHasSchema(filename) {
	  return (/^[\w]+\:/.test(filename)
	  );
	};

	var isFilenameAbsolute = exports.isFilenameAbsolute = function isFilenameAbsolute(filename) {
	  var actualFilename = _get__('filenameWithoutLoaders')(filename);

	  if (actualFilename.indexOf('/') === 0) {
	    return true;
	  }

	  return false;
	};

	var makeUrl = exports.makeUrl = function makeUrl(filename, scheme, line, column) {
	  var actualFilename = _get__('filenameWithoutLoaders')(filename);

	  if (_get__('filenameHasSchema')(filename)) {
	    return actualFilename;
	  }

	  var url = 'file://' + actualFilename;

	  if (scheme === 'vscode') {
	    url = scheme + '://file/' + url;
	    url = url.replace(/file:\/\/\//, ''); // visual studio code does not need file:/// in its scheme
	    if (line && actualFilename === filename) {
	      url = url + ':' + line;

	      if (column) {
	        url = url + ':' + column;
	      }
	    }
	  } else if (scheme) {
	    url = scheme + '://open?url=' + url;

	    if (line && actualFilename === filename) {
	      url = url + '&line=' + line;

	      if (column) {
	        url = url + '&column=' + column;
	      }
	    }
	  }

	  return url;
	};

	var makeLinkText = exports.makeLinkText = function makeLinkText(filename, line, column) {
	  var text = _get__('filenameWithoutLoaders')(filename);

	  if (line && text === filename) {
	    text = text + ':' + line;

	    if (column) {
	      text = text + ':' + column;
	    }
	  }

	  return text;
	};

	var _RewiredData__ = Object.create(null);

	var INTENTIONAL_UNDEFINED = '__INTENTIONAL_UNDEFINED__';
	var _RewireAPI__ = {};

	(function () {
	  function addPropertyToAPIObject(name, value) {
	    Object.defineProperty(_RewireAPI__, name, {
	      value: value,
	      enumerable: false,
	      configurable: true
	    });
	  }

	  addPropertyToAPIObject('__get__', _get__);
	  addPropertyToAPIObject('__GetDependency__', _get__);
	  addPropertyToAPIObject('__Rewire__', _set__);
	  addPropertyToAPIObject('__set__', _set__);
	  addPropertyToAPIObject('__reset__', _reset__);
	  addPropertyToAPIObject('__ResetDependency__', _reset__);
	  addPropertyToAPIObject('__with__', _with__);
	})();

	function _get__(variableName) {
	  if (_RewiredData__ === undefined || _RewiredData__[variableName] === undefined) {
	    return _get_original__(variableName);
	  } else {
	    var value = _RewiredData__[variableName];

	    if (value === INTENTIONAL_UNDEFINED) {
	      return undefined;
	    } else {
	      return value;
	    }
	  }
	}

	function _get_original__(variableName) {
	  switch (variableName) {
	    case 'filenameWithoutLoaders':
	      return filenameWithoutLoaders;

	    case 'filenameHasSchema':
	      return filenameHasSchema;
	  }

	  return undefined;
	}

	function _assign__(variableName, value) {
	  if (_RewiredData__ === undefined || _RewiredData__[variableName] === undefined) {
	    return _set_original__(variableName, value);
	  } else {
	    return _RewiredData__[variableName] = value;
	  }
	}

	function _set_original__(variableName, _value) {
	  switch (variableName) {}

	  return undefined;
	}

	function _update_operation__(operation, variableName, prefix) {
	  var oldValue = _get__(variableName);

	  var newValue = operation === '++' ? oldValue + 1 : oldValue - 1;

	  _assign__(variableName, newValue);

	  return prefix ? newValue : oldValue;
	}

	function _set__(variableName, value) {
	  if ((typeof variableName === 'undefined' ? 'undefined' : _typeof(variableName)) === 'object') {
	    Object.keys(variableName).forEach(function (name) {
	      _RewiredData__[name] = variableName[name];
	    });
	  } else {
	    if (value === undefined) {
	      _RewiredData__[variableName] = INTENTIONAL_UNDEFINED;
	    } else {
	      _RewiredData__[variableName] = value;
	    }

	    return function () {
	      _reset__(variableName);
	    };
	  }
	}

	function _reset__(variableName) {
	  delete _RewiredData__[variableName];
	}

	function _with__(object) {
	  var rewiredVariableNames = Object.keys(object);
	  var previousValues = {};

	  function reset() {
	    rewiredVariableNames.forEach(function (variableName) {
	      _RewiredData__[variableName] = previousValues[variableName];
	    });
	  }

	  return function (callback) {
	    rewiredVariableNames.forEach(function (variableName) {
	      previousValues[variableName] = _RewiredData__[variableName];
	      _RewiredData__[variableName] = object[variableName];
	    });
	    var result = callback();

	    if (!!result && typeof result.then == 'function') {
	      result.then(reset)["catch"](reset);
	    } else {
	      reset();
	    }

	    return result;
	  };
	}

	exports.__get__ = _get__;
	exports.__GetDependency__ = _get__;
	exports.__Rewire__ = _set__;
	exports.__set__ = _set__;
	exports.__ResetDependency__ = _reset__;
	exports.__RewireAPI__ = _RewireAPI__;
	exports["default"] = _RewireAPI__;

/***/ },
/* 629 */
/***/ function(module, exports, __webpack_require__) {

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory();
		else if(typeof define === 'function' && define.amd)
			define([], factory);
		else if(typeof exports === 'object')
			exports["sourceMappedStackTrace"] = factory();
		else
			root["sourceMappedStackTrace"] = factory();
	})(this, function() {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};

	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {

	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;

	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};

	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;

	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}


	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;

	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;

	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";

	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ function(module, exports, __webpack_require__) {

		var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
		 * sourcemapped-stacktrace.js
		 * created by James Salter <iteration@gmail.com> (2014)
		 *
		 * https://github.com/novocaine/sourcemapped-stacktrace
		 *
		 * Licensed under the New BSD license. See LICENSE or:
		 * http://opensource.org/licenses/BSD-3-Clause
		 */

		/*global define */

		// note we only include source-map-consumer, not the whole source-map library,
		// which includes gear for generating source maps that we don't need
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function(source_map_consumer) {

		  var global_mapForUri = {};

		  /**
		   * Re-map entries in a stacktrace using sourcemaps if available.
		   *
		   * @param {Array} stack - Array of strings from the browser's stack
		   *                        representation. Currently only Chrome
		   *                        format is supported.
		   * @param {function} done - Callback invoked with the transformed stacktrace
		   *                          (an Array of Strings) passed as the first
		   *                          argument
		   * @param {Object} [opts] - Optional options object.
		   * @param {Function} [opts.filter] - Filter function applied to each stackTrace line.
		   *                                   Lines which do not pass the filter won't be processesd.
		   * @param {boolean} [opts.cacheGlobally] - Whether to cache sourcemaps globally across multiple calls.
		   */
		  var mapStackTrace = function(stack, done, opts) {
		    var lines;
		    var line;
		    var mapForUri = {};
		    var rows = {};
		    var fields;
		    var uri;
		    var expected_fields;
		    var regex;
		    var skip_lines;

		    var fetcher = new Fetcher(function() {
		      var result = processSourceMaps(lines, rows, fetcher.mapForUri);
		      done(result);
		    }, opts);

		    if (isChromeOrEdge() || isIE11Plus()) {
		      regex = /^ +at.+\((.*):([0-9]+):([0-9]+)/;
		      expected_fields = 4;
		      // (skip first line containing exception message)
		      skip_lines = 1;
		    } else if (isFirefox() || isSafari()) {
		      regex = /@(.*):([0-9]+):([0-9]+)/;
		      expected_fields = 4;
		      skip_lines = 0;
		    } else {
		      throw new Error("unknown browser :(");
		    }

		    lines = stack.split("\n").slice(skip_lines);

		    for (var i=0; i < lines.length; i++) {
		      line = lines[i];
		      if ( opts && opts.filter && !opts.filter(line) ) continue;
		      
		      fields = line.match(regex);
		      if (fields && fields.length === expected_fields) {
		        rows[i] = fields;
		        uri = fields[1];
		        if (!uri.match(/<anonymous>/)) {
		          fetcher.fetchScript(uri);
		        }
		      }
		    }

		    // if opts.cacheGlobally set, all maps could have been cached already,
		    // thus we need to call done callback right away
		    if ( fetcher.sem === 0 ) {
		      fetcher.done(fetcher.mapForUri);
		    }
		  };

		  var isChromeOrEdge = function() {
		    return navigator.userAgent.toLowerCase().indexOf('chrome') > -1;
		  };

		  var isFirefox = function() {
		    return navigator.userAgent.toLowerCase().indexOf('firefox') > -1;
		  };  

		  var isSafari = function() {
		    return navigator.userAgent.toLowerCase().indexOf('safari') > -1;
		  };
				
		  var isIE11Plus = function() {
		   	return document.documentMode && document.documentMode >= 11;
		  };

		  var Fetcher = function(done, opts) {
		    this.sem = 0;
		    this.mapForUri = opts && opts.cacheGlobally ? global_mapForUri : {};
		    this.done = done;
		  };

		  Fetcher.prototype.fetchScript = function(uri) {
		    if (!(uri in this.mapForUri)) {
		      this.sem++;
		      this.mapForUri[uri] = null;
		    } else {
		      return;
		    }

		    var xhr = createXMLHTTPObject();
		    var that = this;
		    xhr.onreadystatechange = function(e) {
		      that.onScriptLoad.call(that, e, uri);
		    };
		    xhr.open("GET", uri, true);
		    xhr.send();
		  };

		  var absUrlRegex = new RegExp('^(?:[a-z]+:)?//', 'i');

		  Fetcher.prototype.onScriptLoad = function(e, uri) {
		    if (e.target.readyState !== 4) {
		      return;
		    }

		    if (e.target.status === 200 ||
		      (uri.slice(0, 7) === "file://" && e.target.status === 0))
		    {
		      // find .map in file.
		      //
		      // attempt to find it at the very end of the file, but tolerate trailing
		      // whitespace inserted by some packers.
		      var match = e.target.responseText.match("//# [s]ourceMappingURL=(.*)[\\s]*$", "m");
		      if (match && match.length === 2) {
		        // get the map
		        var mapUri = match[1];

		        var embeddedSourceMap = mapUri.match("data:application/json;(charset=[^;]+;)?base64,(.*)");

		        if (embeddedSourceMap && embeddedSourceMap[2]) {
		          this.mapForUri[uri] = new source_map_consumer.SourceMapConsumer(atob(embeddedSourceMap[2]));
		          this.done(this.mapForUri);
		        } else {
		          if (!absUrlRegex.test(mapUri)) {
		            // relative url; according to sourcemaps spec is 'source origin'
		            var origin;
		            var lastSlash = uri.lastIndexOf('/');
		            if (lastSlash !== -1) {
		              origin = uri.slice(0, lastSlash + 1);
		              mapUri = origin + mapUri;
		              // note if lastSlash === -1, actual script uri has no slash
		              // somehow, so no way to use it as a prefix... we give up and try
		              // as absolute
		            }
		          }

		          var xhrMap = createXMLHTTPObject();
		          var that = this;
		          xhrMap.onreadystatechange = function() {
		            if (xhrMap.readyState === 4) {
		              that.sem--;
		              if (xhrMap.status === 200 ||
		                (mapUri.slice(0, 7) === "file://" && xhrMap.status === 0)) {
		                that.mapForUri[uri] = new source_map_consumer.SourceMapConsumer(xhrMap.responseText);
		              }
		              if (that.sem === 0) {
		                that.done(that.mapForUri);
		              }
		            }
		          };

		          xhrMap.open("GET", mapUri, true);
		          xhrMap.send();
		        }
		      } else {
		        // no map
		        this.sem--;
		      }
		    } else {
		      // HTTP error fetching uri of the script
		      this.sem--;
		    }

		    if (this.sem === 0) {
		      this.done(this.mapForUri);
		    }
		  };

		  var processSourceMaps = function(lines, rows, mapForUri) {
		    var result = [];
		    var map;
		    for (var i=0; i < lines.length; i++) {
		      var row = rows[i];
		      if (row) {
		        var uri = row[1];
		        var line = parseInt(row[2], 10);
		        var column = parseInt(row[3], 10);
		        map = mapForUri[uri];

		        if (map) {
		          // we think we have a map for that uri. call source-map library
		          var origPos = map.originalPositionFor(
		            { line: line, column: column });
		          result.push(formatOriginalPosition(origPos.source,
		            origPos.line, origPos.column, origPos.name || origName(lines[i])));
		        } else {
		          // we can't find a map for that url, but we parsed the row.
		          // reformat unchanged line for consistency with the sourcemapped
		          // lines.
		          result.push(formatOriginalPosition(uri, line, column, origName(lines[i])));
		        }
		      } else {
		        // we weren't able to parse the row, push back what we were given
		        result.push(lines[i]);
		      }
		    }

		    return result;
		  };

		  function origName(origLine) {
		    var match = String(origLine).match((isChromeOrEdge() || isIE11Plus()) ?
		      / +at +([^ ]*).*/ :
		      /([^@]*)@.*/);
		    return match && match[1];
		  }

		  var formatOriginalPosition = function(source, line, column, name) {
		    // mimic chrome's format
		    return "    at " + (name ? name : "(unknown)") +
		      " (" + source + ":" + line + ":" + column + ")";
		  };

		  // xmlhttprequest boilerplate
		  var XMLHttpFactories = [
			function () {return new XMLHttpRequest();},
			function () {return new ActiveXObject("Msxml2.XMLHTTP");},
			function () {return new ActiveXObject("Msxml3.XMLHTTP");},
			function () {return new ActiveXObject("Microsoft.XMLHTTP");}
		  ];

		  function createXMLHTTPObject() {
		      var xmlhttp = false;
		      for (var i=0;i<XMLHttpFactories.length;i++) {
		          try {
		              xmlhttp = XMLHttpFactories[i]();
		          }
		          catch (e) {
		              continue;
		          }
		          break;
		      }
		      return xmlhttp;
		  }

		  return {
		    mapStackTrace: mapStackTrace
		  }
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


	/***/ },
	/* 1 */
	/***/ function(module, exports, __webpack_require__) {

		/* -*- Mode: js; js-indent-level: 2; -*- */
		/*
		 * Copyright 2011 Mozilla Foundation and contributors
		 * Licensed under the New BSD license. See LICENSE or:
		 * http://opensource.org/licenses/BSD-3-Clause
		 */

		var util = __webpack_require__(2);
		var binarySearch = __webpack_require__(3);
		var ArraySet = __webpack_require__(4).ArraySet;
		var base64VLQ = __webpack_require__(5);
		var quickSort = __webpack_require__(7).quickSort;

		function SourceMapConsumer(aSourceMap) {
		  var sourceMap = aSourceMap;
		  if (typeof aSourceMap === 'string') {
		    sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
		  }

		  return sourceMap.sections != null
		    ? new IndexedSourceMapConsumer(sourceMap)
		    : new BasicSourceMapConsumer(sourceMap);
		}

		SourceMapConsumer.fromSourceMap = function(aSourceMap) {
		  return BasicSourceMapConsumer.fromSourceMap(aSourceMap);
		}

		/**
		 * The version of the source mapping spec that we are consuming.
		 */
		SourceMapConsumer.prototype._version = 3;

		// `__generatedMappings` and `__originalMappings` are arrays that hold the
		// parsed mapping coordinates from the source map's "mappings" attribute. They
		// are lazily instantiated, accessed via the `_generatedMappings` and
		// `_originalMappings` getters respectively, and we only parse the mappings
		// and create these arrays once queried for a source location. We jump through
		// these hoops because there can be many thousands of mappings, and parsing
		// them is expensive, so we only want to do it if we must.
		//
		// Each object in the arrays is of the form:
		//
		//     {
		//       generatedLine: The line number in the generated code,
		//       generatedColumn: The column number in the generated code,
		//       source: The path to the original source file that generated this
		//               chunk of code,
		//       originalLine: The line number in the original source that
		//                     corresponds to this chunk of generated code,
		//       originalColumn: The column number in the original source that
		//                       corresponds to this chunk of generated code,
		//       name: The name of the original symbol which generated this chunk of
		//             code.
		//     }
		//
		// All properties except for `generatedLine` and `generatedColumn` can be
		// `null`.
		//
		// `_generatedMappings` is ordered by the generated positions.
		//
		// `_originalMappings` is ordered by the original positions.

		SourceMapConsumer.prototype.__generatedMappings = null;
		Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
		  get: function () {
		    if (!this.__generatedMappings) {
		      this._parseMappings(this._mappings, this.sourceRoot);
		    }

		    return this.__generatedMappings;
		  }
		});

		SourceMapConsumer.prototype.__originalMappings = null;
		Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
		  get: function () {
		    if (!this.__originalMappings) {
		      this._parseMappings(this._mappings, this.sourceRoot);
		    }

		    return this.__originalMappings;
		  }
		});

		SourceMapConsumer.prototype._charIsMappingSeparator =
		  function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
		    var c = aStr.charAt(index);
		    return c === ";" || c === ",";
		  };

		/**
		 * Parse the mappings in a string in to a data structure which we can easily
		 * query (the ordered arrays in the `this.__generatedMappings` and
		 * `this.__originalMappings` properties).
		 */
		SourceMapConsumer.prototype._parseMappings =
		  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
		    throw new Error("Subclasses must implement _parseMappings");
		  };

		SourceMapConsumer.GENERATED_ORDER = 1;
		SourceMapConsumer.ORIGINAL_ORDER = 2;

		SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
		SourceMapConsumer.LEAST_UPPER_BOUND = 2;

		/**
		 * Iterate over each mapping between an original source/line/column and a
		 * generated line/column in this source map.
		 *
		 * @param Function aCallback
		 *        The function that is called with each mapping.
		 * @param Object aContext
		 *        Optional. If specified, this object will be the value of `this` every
		 *        time that `aCallback` is called.
		 * @param aOrder
		 *        Either `SourceMapConsumer.GENERATED_ORDER` or
		 *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
		 *        iterate over the mappings sorted by the generated file's line/column
		 *        order or the original's source/line/column order, respectively. Defaults to
		 *        `SourceMapConsumer.GENERATED_ORDER`.
		 */
		SourceMapConsumer.prototype.eachMapping =
		  function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
		    var context = aContext || null;
		    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;

		    var mappings;
		    switch (order) {
		    case SourceMapConsumer.GENERATED_ORDER:
		      mappings = this._generatedMappings;
		      break;
		    case SourceMapConsumer.ORIGINAL_ORDER:
		      mappings = this._originalMappings;
		      break;
		    default:
		      throw new Error("Unknown order of iteration.");
		    }

		    var sourceRoot = this.sourceRoot;
		    mappings.map(function (mapping) {
		      var source = mapping.source === null ? null : this._sources.at(mapping.source);
		      if (source != null && sourceRoot != null) {
		        source = util.join(sourceRoot, source);
		      }
		      return {
		        source: source,
		        generatedLine: mapping.generatedLine,
		        generatedColumn: mapping.generatedColumn,
		        originalLine: mapping.originalLine,
		        originalColumn: mapping.originalColumn,
		        name: mapping.name === null ? null : this._names.at(mapping.name)
		      };
		    }, this).forEach(aCallback, context);
		  };

		/**
		 * Returns all generated line and column information for the original source,
		 * line, and column provided. If no column is provided, returns all mappings
		 * corresponding to a either the line we are searching for or the next
		 * closest line that has any mappings. Otherwise, returns all mappings
		 * corresponding to the given line and either the column we are searching for
		 * or the next closest column that has any offsets.
		 *
		 * The only argument is an object with the following properties:
		 *
		 *   - source: The filename of the original source.
		 *   - line: The line number in the original source.
		 *   - column: Optional. the column number in the original source.
		 *
		 * and an array of objects is returned, each with the following properties:
		 *
		 *   - line: The line number in the generated source, or null.
		 *   - column: The column number in the generated source, or null.
		 */
		SourceMapConsumer.prototype.allGeneratedPositionsFor =
		  function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
		    var line = util.getArg(aArgs, 'line');

		    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
		    // returns the index of the closest mapping less than the needle. By
		    // setting needle.originalColumn to 0, we thus find the last mapping for
		    // the given line, provided such a mapping exists.
		    var needle = {
		      source: util.getArg(aArgs, 'source'),
		      originalLine: line,
		      originalColumn: util.getArg(aArgs, 'column', 0)
		    };

		    if (this.sourceRoot != null) {
		      needle.source = util.relative(this.sourceRoot, needle.source);
		    }
		    if (!this._sources.has(needle.source)) {
		      return [];
		    }
		    needle.source = this._sources.indexOf(needle.source);

		    var mappings = [];

		    var index = this._findMapping(needle,
		                                  this._originalMappings,
		                                  "originalLine",
		                                  "originalColumn",
		                                  util.compareByOriginalPositions,
		                                  binarySearch.LEAST_UPPER_BOUND);
		    if (index >= 0) {
		      var mapping = this._originalMappings[index];

		      if (aArgs.column === undefined) {
		        var originalLine = mapping.originalLine;

		        // Iterate until either we run out of mappings, or we run into
		        // a mapping for a different line than the one we found. Since
		        // mappings are sorted, this is guaranteed to find all mappings for
		        // the line we found.
		        while (mapping && mapping.originalLine === originalLine) {
		          mappings.push({
		            line: util.getArg(mapping, 'generatedLine', null),
		            column: util.getArg(mapping, 'generatedColumn', null),
		            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
		          });

		          mapping = this._originalMappings[++index];
		        }
		      } else {
		        var originalColumn = mapping.originalColumn;

		        // Iterate until either we run out of mappings, or we run into
		        // a mapping for a different line than the one we were searching for.
		        // Since mappings are sorted, this is guaranteed to find all mappings for
		        // the line we are searching for.
		        while (mapping &&
		               mapping.originalLine === line &&
		               mapping.originalColumn == originalColumn) {
		          mappings.push({
		            line: util.getArg(mapping, 'generatedLine', null),
		            column: util.getArg(mapping, 'generatedColumn', null),
		            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
		          });

		          mapping = this._originalMappings[++index];
		        }
		      }
		    }

		    return mappings;
		  };

		exports.SourceMapConsumer = SourceMapConsumer;

		/**
		 * A BasicSourceMapConsumer instance represents a parsed source map which we can
		 * query for information about the original file positions by giving it a file
		 * position in the generated source.
		 *
		 * The only parameter is the raw source map (either as a JSON string, or
		 * already parsed to an object). According to the spec, source maps have the
		 * following attributes:
		 *
		 *   - version: Which version of the source map spec this map is following.
		 *   - sources: An array of URLs to the original source files.
		 *   - names: An array of identifiers which can be referrenced by individual mappings.
		 *   - sourceRoot: Optional. The URL root from which all sources are relative.
		 *   - sourcesContent: Optional. An array of contents of the original source files.
		 *   - mappings: A string of base64 VLQs which contain the actual mappings.
		 *   - file: Optional. The generated file this source map is associated with.
		 *
		 * Here is an example source map, taken from the source map spec[0]:
		 *
		 *     {
		 *       version : 3,
		 *       file: "out.js",
		 *       sourceRoot : "",
		 *       sources: ["foo.js", "bar.js"],
		 *       names: ["src", "maps", "are", "fun"],
		 *       mappings: "AA,AB;;ABCDE;"
		 *     }
		 *
		 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
		 */
		function BasicSourceMapConsumer(aSourceMap) {
		  var sourceMap = aSourceMap;
		  if (typeof aSourceMap === 'string') {
		    sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
		  }

		  var version = util.getArg(sourceMap, 'version');
		  var sources = util.getArg(sourceMap, 'sources');
		  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
		  // requires the array) to play nice here.
		  var names = util.getArg(sourceMap, 'names', []);
		  var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
		  var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
		  var mappings = util.getArg(sourceMap, 'mappings');
		  var file = util.getArg(sourceMap, 'file', null);

		  // Once again, Sass deviates from the spec and supplies the version as a
		  // string rather than a number, so we use loose equality checking here.
		  if (version != this._version) {
		    throw new Error('Unsupported version: ' + version);
		  }

		  sources = sources
		    .map(String)
		    // Some source maps produce relative source paths like "./foo.js" instead of
		    // "foo.js".  Normalize these first so that future comparisons will succeed.
		    // See bugzil.la/1090768.
		    .map(util.normalize)
		    // Always ensure that absolute sources are internally stored relative to
		    // the source root, if the source root is absolute. Not doing this would
		    // be particularly problematic when the source root is a prefix of the
		    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.
		    .map(function (source) {
		      return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)
		        ? util.relative(sourceRoot, source)
		        : source;
		    });

		  // Pass `true` below to allow duplicate names and sources. While source maps
		  // are intended to be compressed and deduplicated, the TypeScript compiler
		  // sometimes generates source maps with duplicates in them. See Github issue
		  // #72 and bugzil.la/889492.
		  this._names = ArraySet.fromArray(names.map(String), true);
		  this._sources = ArraySet.fromArray(sources, true);

		  this.sourceRoot = sourceRoot;
		  this.sourcesContent = sourcesContent;
		  this._mappings = mappings;
		  this.file = file;
		}

		BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
		BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;

		/**
		 * Create a BasicSourceMapConsumer from a SourceMapGenerator.
		 *
		 * @param SourceMapGenerator aSourceMap
		 *        The source map that will be consumed.
		 * @returns BasicSourceMapConsumer
		 */
		BasicSourceMapConsumer.fromSourceMap =
		  function SourceMapConsumer_fromSourceMap(aSourceMap) {
		    var smc = Object.create(BasicSourceMapConsumer.prototype);

		    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
		    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
		    smc.sourceRoot = aSourceMap._sourceRoot;
		    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),
		                                                            smc.sourceRoot);
		    smc.file = aSourceMap._file;

		    // Because we are modifying the entries (by converting string sources and
		    // names to indices into the sources and names ArraySets), we have to make
		    // a copy of the entry or else bad things happen. Shared mutable state
		    // strikes again! See github issue #191.

		    var generatedMappings = aSourceMap._mappings.toArray().slice();
		    var destGeneratedMappings = smc.__generatedMappings = [];
		    var destOriginalMappings = smc.__originalMappings = [];

		    for (var i = 0, length = generatedMappings.length; i < length; i++) {
		      var srcMapping = generatedMappings[i];
		      var destMapping = new Mapping;
		      destMapping.generatedLine = srcMapping.generatedLine;
		      destMapping.generatedColumn = srcMapping.generatedColumn;

		      if (srcMapping.source) {
		        destMapping.source = sources.indexOf(srcMapping.source);
		        destMapping.originalLine = srcMapping.originalLine;
		        destMapping.originalColumn = srcMapping.originalColumn;

		        if (srcMapping.name) {
		          destMapping.name = names.indexOf(srcMapping.name);
		        }

		        destOriginalMappings.push(destMapping);
		      }

		      destGeneratedMappings.push(destMapping);
		    }

		    quickSort(smc.__originalMappings, util.compareByOriginalPositions);

		    return smc;
		  };

		/**
		 * The version of the source mapping spec that we are consuming.
		 */
		BasicSourceMapConsumer.prototype._version = 3;

		/**
		 * The list of original sources.
		 */
		Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {
		  get: function () {
		    return this._sources.toArray().map(function (s) {
		      return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;
		    }, this);
		  }
		});

		/**
		 * Provide the JIT with a nice shape / hidden class.
		 */
		function Mapping() {
		  this.generatedLine = 0;
		  this.generatedColumn = 0;
		  this.source = null;
		  this.originalLine = null;
		  this.originalColumn = null;
		  this.name = null;
		}

		/**
		 * Parse the mappings in a string in to a data structure which we can easily
		 * query (the ordered arrays in the `this.__generatedMappings` and
		 * `this.__originalMappings` properties).
		 */
		BasicSourceMapConsumer.prototype._parseMappings =
		  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
		    var generatedLine = 1;
		    var previousGeneratedColumn = 0;
		    var previousOriginalLine = 0;
		    var previousOriginalColumn = 0;
		    var previousSource = 0;
		    var previousName = 0;
		    var length = aStr.length;
		    var index = 0;
		    var cachedSegments = {};
		    var temp = {};
		    var originalMappings = [];
		    var generatedMappings = [];
		    var mapping, str, segment, end, value;

		    while (index < length) {
		      if (aStr.charAt(index) === ';') {
		        generatedLine++;
		        index++;
		        previousGeneratedColumn = 0;
		      }
		      else if (aStr.charAt(index) === ',') {
		        index++;
		      }
		      else {
		        mapping = new Mapping();
		        mapping.generatedLine = generatedLine;

		        // Because each offset is encoded relative to the previous one,
		        // many segments often have the same encoding. We can exploit this
		        // fact by caching the parsed variable length fields of each segment,
		        // allowing us to avoid a second parse if we encounter the same
		        // segment again.
		        for (end = index; end < length; end++) {
		          if (this._charIsMappingSeparator(aStr, end)) {
		            break;
		          }
		        }
		        str = aStr.slice(index, end);

		        segment = cachedSegments[str];
		        if (segment) {
		          index += str.length;
		        } else {
		          segment = [];
		          while (index < end) {
		            base64VLQ.decode(aStr, index, temp);
		            value = temp.value;
		            index = temp.rest;
		            segment.push(value);
		          }

		          if (segment.length === 2) {
		            throw new Error('Found a source, but no line and column');
		          }

		          if (segment.length === 3) {
		            throw new Error('Found a source and line, but no column');
		          }

		          cachedSegments[str] = segment;
		        }

		        // Generated column.
		        mapping.generatedColumn = previousGeneratedColumn + segment[0];
		        previousGeneratedColumn = mapping.generatedColumn;

		        if (segment.length > 1) {
		          // Original source.
		          mapping.source = previousSource + segment[1];
		          previousSource += segment[1];

		          // Original line.
		          mapping.originalLine = previousOriginalLine + segment[2];
		          previousOriginalLine = mapping.originalLine;
		          // Lines are stored 0-based
		          mapping.originalLine += 1;

		          // Original column.
		          mapping.originalColumn = previousOriginalColumn + segment[3];
		          previousOriginalColumn = mapping.originalColumn;

		          if (segment.length > 4) {
		            // Original name.
		            mapping.name = previousName + segment[4];
		            previousName += segment[4];
		          }
		        }

		        generatedMappings.push(mapping);
		        if (typeof mapping.originalLine === 'number') {
		          originalMappings.push(mapping);
		        }
		      }
		    }

		    quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);
		    this.__generatedMappings = generatedMappings;

		    quickSort(originalMappings, util.compareByOriginalPositions);
		    this.__originalMappings = originalMappings;
		  };

		/**
		 * Find the mapping that best matches the hypothetical "needle" mapping that
		 * we are searching for in the given "haystack" of mappings.
		 */
		BasicSourceMapConsumer.prototype._findMapping =
		  function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,
		                                         aColumnName, aComparator, aBias) {
		    // To return the position we are searching for, we must first find the
		    // mapping for the given position and then return the opposite position it
		    // points to. Because the mappings are sorted, we can use binary search to
		    // find the best mapping.

		    if (aNeedle[aLineName] <= 0) {
		      throw new TypeError('Line must be greater than or equal to 1, got '
		                          + aNeedle[aLineName]);
		    }
		    if (aNeedle[aColumnName] < 0) {
		      throw new TypeError('Column must be greater than or equal to 0, got '
		                          + aNeedle[aColumnName]);
		    }

		    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
		  };

		/**
		 * Compute the last column for each generated mapping. The last column is
		 * inclusive.
		 */
		BasicSourceMapConsumer.prototype.computeColumnSpans =
		  function SourceMapConsumer_computeColumnSpans() {
		    for (var index = 0; index < this._generatedMappings.length; ++index) {
		      var mapping = this._generatedMappings[index];

		      // Mappings do not contain a field for the last generated columnt. We
		      // can come up with an optimistic estimate, however, by assuming that
		      // mappings are contiguous (i.e. given two consecutive mappings, the
		      // first mapping ends where the second one starts).
		      if (index + 1 < this._generatedMappings.length) {
		        var nextMapping = this._generatedMappings[index + 1];

		        if (mapping.generatedLine === nextMapping.generatedLine) {
		          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
		          continue;
		        }
		      }

		      // The last mapping for each line spans the entire line.
		      mapping.lastGeneratedColumn = Infinity;
		    }
		  };

		/**
		 * Returns the original source, line, and column information for the generated
		 * source's line and column positions provided. The only argument is an object
		 * with the following properties:
		 *
		 *   - line: The line number in the generated source.
		 *   - column: The column number in the generated source.
		 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
		 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
		 *     closest element that is smaller than or greater than the one we are
		 *     searching for, respectively, if the exact element cannot be found.
		 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
		 *
		 * and an object is returned with the following properties:
		 *
		 *   - source: The original source file, or null.
		 *   - line: The line number in the original source, or null.
		 *   - column: The column number in the original source, or null.
		 *   - name: The original identifier, or null.
		 */
		BasicSourceMapConsumer.prototype.originalPositionFor =
		  function SourceMapConsumer_originalPositionFor(aArgs) {
		    var needle = {
		      generatedLine: util.getArg(aArgs, 'line'),
		      generatedColumn: util.getArg(aArgs, 'column')
		    };

		    var index = this._findMapping(
		      needle,
		      this._generatedMappings,
		      "generatedLine",
		      "generatedColumn",
		      util.compareByGeneratedPositionsDeflated,
		      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
		    );

		    if (index >= 0) {
		      var mapping = this._generatedMappings[index];

		      if (mapping.generatedLine === needle.generatedLine) {
		        var source = util.getArg(mapping, 'source', null);
		        if (source !== null) {
		          source = this._sources.at(source);
		          if (this.sourceRoot != null) {
		            source = util.join(this.sourceRoot, source);
		          }
		        }
		        var name = util.getArg(mapping, 'name', null);
		        if (name !== null) {
		          name = this._names.at(name);
		        }
		        return {
		          source: source,
		          line: util.getArg(mapping, 'originalLine', null),
		          column: util.getArg(mapping, 'originalColumn', null),
		          name: name
		        };
		      }
		    }

		    return {
		      source: null,
		      line: null,
		      column: null,
		      name: null
		    };
		  };

		/**
		 * Return true if we have the source content for every source in the source
		 * map, false otherwise.
		 */
		BasicSourceMapConsumer.prototype.hasContentsOfAllSources =
		  function BasicSourceMapConsumer_hasContentsOfAllSources() {
		    if (!this.sourcesContent) {
		      return false;
		    }
		    return this.sourcesContent.length >= this._sources.size() &&
		      !this.sourcesContent.some(function (sc) { return sc == null; });
		  };

		/**
		 * Returns the original source content. The only argument is the url of the
		 * original source file. Returns null if no original source content is
		 * available.
		 */
		BasicSourceMapConsumer.prototype.sourceContentFor =
		  function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
		    if (!this.sourcesContent) {
		      return null;
		    }

		    if (this.sourceRoot != null) {
		      aSource = util.relative(this.sourceRoot, aSource);
		    }

		    if (this._sources.has(aSource)) {
		      return this.sourcesContent[this._sources.indexOf(aSource)];
		    }

		    var url;
		    if (this.sourceRoot != null
		        && (url = util.urlParse(this.sourceRoot))) {
		      // XXX: file:// URIs and absolute paths lead to unexpected behavior for
		      // many users. We can help them out when they expect file:// URIs to
		      // behave like it would if they were running a local HTTP server. See
		      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
		      var fileUriAbsPath = aSource.replace(/^file:\/\//, "");
		      if (url.scheme == "file"
		          && this._sources.has(fileUriAbsPath)) {
		        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]
		      }

		      if ((!url.path || url.path == "/")
		          && this._sources.has("/" + aSource)) {
		        return this.sourcesContent[this._sources.indexOf("/" + aSource)];
		      }
		    }

		    // This function is used recursively from
		    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
		    // don't want to throw if we can't find the source - we just want to
		    // return null, so we provide a flag to exit gracefully.
		    if (nullOnMissing) {
		      return null;
		    }
		    else {
		      throw new Error('"' + aSource + '" is not in the SourceMap.');
		    }
		  };

		/**
		 * Returns the generated line and column information for the original source,
		 * line, and column positions provided. The only argument is an object with
		 * the following properties:
		 *
		 *   - source: The filename of the original source.
		 *   - line: The line number in the original source.
		 *   - column: The column number in the original source.
		 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
		 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
		 *     closest element that is smaller than or greater than the one we are
		 *     searching for, respectively, if the exact element cannot be found.
		 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
		 *
		 * and an object is returned with the following properties:
		 *
		 *   - line: The line number in the generated source, or null.
		 *   - column: The column number in the generated source, or null.
		 */
		BasicSourceMapConsumer.prototype.generatedPositionFor =
		  function SourceMapConsumer_generatedPositionFor(aArgs) {
		    var source = util.getArg(aArgs, 'source');
		    if (this.sourceRoot != null) {
		      source = util.relative(this.sourceRoot, source);
		    }
		    if (!this._sources.has(source)) {
		      return {
		        line: null,
		        column: null,
		        lastColumn: null
		      };
		    }
		    source = this._sources.indexOf(source);

		    var needle = {
		      source: source,
		      originalLine: util.getArg(aArgs, 'line'),
		      originalColumn: util.getArg(aArgs, 'column')
		    };

		    var index = this._findMapping(
		      needle,
		      this._originalMappings,
		      "originalLine",
		      "originalColumn",
		      util.compareByOriginalPositions,
		      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
		    );

		    if (index >= 0) {
		      var mapping = this._originalMappings[index];

		      if (mapping.source === needle.source) {
		        return {
		          line: util.getArg(mapping, 'generatedLine', null),
		          column: util.getArg(mapping, 'generatedColumn', null),
		          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
		        };
		      }
		    }

		    return {
		      line: null,
		      column: null,
		      lastColumn: null
		    };
		  };

		exports.BasicSourceMapConsumer = BasicSourceMapConsumer;

		/**
		 * An IndexedSourceMapConsumer instance represents a parsed source map which
		 * we can query for information. It differs from BasicSourceMapConsumer in
		 * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
		 * input.
		 *
		 * The only parameter is a raw source map (either as a JSON string, or already
		 * parsed to an object). According to the spec for indexed source maps, they
		 * have the following attributes:
		 *
		 *   - version: Which version of the source map spec this map is following.
		 *   - file: Optional. The generated file this source map is associated with.
		 *   - sections: A list of section definitions.
		 *
		 * Each value under the "sections" field has two fields:
		 *   - offset: The offset into the original specified at which this section
		 *       begins to apply, defined as an object with a "line" and "column"
		 *       field.
		 *   - map: A source map definition. This source map could also be indexed,
		 *       but doesn't have to be.
		 *
		 * Instead of the "map" field, it's also possible to have a "url" field
		 * specifying a URL to retrieve a source map from, but that's currently
		 * unsupported.
		 *
		 * Here's an example source map, taken from the source map spec[0], but
		 * modified to omit a section which uses the "url" field.
		 *
		 *  {
		 *    version : 3,
		 *    file: "app.js",
		 *    sections: [{
		 *      offset: {line:100, column:10},
		 *      map: {
		 *        version : 3,
		 *        file: "section.js",
		 *        sources: ["foo.js", "bar.js"],
		 *        names: ["src", "maps", "are", "fun"],
		 *        mappings: "AAAA,E;;ABCDE;"
		 *      }
		 *    }],
		 *  }
		 *
		 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
		 */
		function IndexedSourceMapConsumer(aSourceMap) {
		  var sourceMap = aSourceMap;
		  if (typeof aSourceMap === 'string') {
		    sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
		  }

		  var version = util.getArg(sourceMap, 'version');
		  var sections = util.getArg(sourceMap, 'sections');

		  if (version != this._version) {
		    throw new Error('Unsupported version: ' + version);
		  }

		  this._sources = new ArraySet();
		  this._names = new ArraySet();

		  var lastOffset = {
		    line: -1,
		    column: 0
		  };
		  this._sections = sections.map(function (s) {
		    if (s.url) {
		      // The url field will require support for asynchronicity.
		      // See https://github.com/mozilla/source-map/issues/16
		      throw new Error('Support for url field in sections not implemented.');
		    }
		    var offset = util.getArg(s, 'offset');
		    var offsetLine = util.getArg(offset, 'line');
		    var offsetColumn = util.getArg(offset, 'column');

		    if (offsetLine < lastOffset.line ||
		        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {
		      throw new Error('Section offsets must be ordered and non-overlapping.');
		    }
		    lastOffset = offset;

		    return {
		      generatedOffset: {
		        // The offset fields are 0-based, but we use 1-based indices when
		        // encoding/decoding from VLQ.
		        generatedLine: offsetLine + 1,
		        generatedColumn: offsetColumn + 1
		      },
		      consumer: new SourceMapConsumer(util.getArg(s, 'map'))
		    }
		  });
		}

		IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
		IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;

		/**
		 * The version of the source mapping spec that we are consuming.
		 */
		IndexedSourceMapConsumer.prototype._version = 3;

		/**
		 * The list of original sources.
		 */
		Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {
		  get: function () {
		    var sources = [];
		    for (var i = 0; i < this._sections.length; i++) {
		      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
		        sources.push(this._sections[i].consumer.sources[j]);
		      }
		    }
		    return sources;
		  }
		});

		/**
		 * Returns the original source, line, and column information for the generated
		 * source's line and column positions provided. The only argument is an object
		 * with the following properties:
		 *
		 *   - line: The line number in the generated source.
		 *   - column: The column number in the generated source.
		 *
		 * and an object is returned with the following properties:
		 *
		 *   - source: The original source file, or null.
		 *   - line: The line number in the original source, or null.
		 *   - column: The column number in the original source, or null.
		 *   - name: The original identifier, or null.
		 */
		IndexedSourceMapConsumer.prototype.originalPositionFor =
		  function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
		    var needle = {
		      generatedLine: util.getArg(aArgs, 'line'),
		      generatedColumn: util.getArg(aArgs, 'column')
		    };

		    // Find the section containing the generated position we're trying to map
		    // to an original position.
		    var sectionIndex = binarySearch.search(needle, this._sections,
		      function(needle, section) {
		        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
		        if (cmp) {
		          return cmp;
		        }

		        return (needle.generatedColumn -
		                section.generatedOffset.generatedColumn);
		      });
		    var section = this._sections[sectionIndex];

		    if (!section) {
		      return {
		        source: null,
		        line: null,
		        column: null,
		        name: null
		      };
		    }

		    return section.consumer.originalPositionFor({
		      line: needle.generatedLine -
		        (section.generatedOffset.generatedLine - 1),
		      column: needle.generatedColumn -
		        (section.generatedOffset.generatedLine === needle.generatedLine
		         ? section.generatedOffset.generatedColumn - 1
		         : 0),
		      bias: aArgs.bias
		    });
		  };

		/**
		 * Return true if we have the source content for every source in the source
		 * map, false otherwise.
		 */
		IndexedSourceMapConsumer.prototype.hasContentsOfAllSources =
		  function IndexedSourceMapConsumer_hasContentsOfAllSources() {
		    return this._sections.every(function (s) {
		      return s.consumer.hasContentsOfAllSources();
		    });
		  };

		/**
		 * Returns the original source content. The only argument is the url of the
		 * original source file. Returns null if no original source content is
		 * available.
		 */
		IndexedSourceMapConsumer.prototype.sourceContentFor =
		  function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
		    for (var i = 0; i < this._sections.length; i++) {
		      var section = this._sections[i];

		      var content = section.consumer.sourceContentFor(aSource, true);
		      if (content) {
		        return content;
		      }
		    }
		    if (nullOnMissing) {
		      return null;
		    }
		    else {
		      throw new Error('"' + aSource + '" is not in the SourceMap.');
		    }
		  };

		/**
		 * Returns the generated line and column information for the original source,
		 * line, and column positions provided. The only argument is an object with
		 * the following properties:
		 *
		 *   - source: The filename of the original source.
		 *   - line: The line number in the original source.
		 *   - column: The column number in the original source.
		 *
		 * and an object is returned with the following properties:
		 *
		 *   - line: The line number in the generated source, or null.
		 *   - column: The column number in the generated source, or null.
		 */
		IndexedSourceMapConsumer.prototype.generatedPositionFor =
		  function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
		    for (var i = 0; i < this._sections.length; i++) {
		      var section = this._sections[i];

		      // Only consider this section if the requested source is in the list of
		      // sources of the consumer.
		      if (section.consumer.sources.indexOf(util.getArg(aArgs, 'source')) === -1) {
		        continue;
		      }
		      var generatedPosition = section.consumer.generatedPositionFor(aArgs);
		      if (generatedPosition) {
		        var ret = {
		          line: generatedPosition.line +
		            (section.generatedOffset.generatedLine - 1),
		          column: generatedPosition.column +
		            (section.generatedOffset.generatedLine === generatedPosition.line
		             ? section.generatedOffset.generatedColumn - 1
		             : 0)
		        };
		        return ret;
		      }
		    }

		    return {
		      line: null,
		      column: null
		    };
		  };

		/**
		 * Parse the mappings in a string in to a data structure which we can easily
		 * query (the ordered arrays in the `this.__generatedMappings` and
		 * `this.__originalMappings` properties).
		 */
		IndexedSourceMapConsumer.prototype._parseMappings =
		  function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
		    this.__generatedMappings = [];
		    this.__originalMappings = [];
		    for (var i = 0; i < this._sections.length; i++) {
		      var section = this._sections[i];
		      var sectionMappings = section.consumer._generatedMappings;
		      for (var j = 0; j < sectionMappings.length; j++) {
		        var mapping = sectionMappings[j];

		        var source = section.consumer._sources.at(mapping.source);
		        if (section.consumer.sourceRoot !== null) {
		          source = util.join(section.consumer.sourceRoot, source);
		        }
		        this._sources.add(source);
		        source = this._sources.indexOf(source);

		        var name = section.consumer._names.at(mapping.name);
		        this._names.add(name);
		        name = this._names.indexOf(name);

		        // The mappings coming from the consumer for the section have
		        // generated positions relative to the start of the section, so we
		        // need to offset them to be relative to the start of the concatenated
		        // generated file.
		        var adjustedMapping = {
		          source: source,
		          generatedLine: mapping.generatedLine +
		            (section.generatedOffset.generatedLine - 1),
		          generatedColumn: mapping.generatedColumn +
		            (section.generatedOffset.generatedLine === mapping.generatedLine
		            ? section.generatedOffset.generatedColumn - 1
		            : 0),
		          originalLine: mapping.originalLine,
		          originalColumn: mapping.originalColumn,
		          name: name
		        };

		        this.__generatedMappings.push(adjustedMapping);
		        if (typeof adjustedMapping.originalLine === 'number') {
		          this.__originalMappings.push(adjustedMapping);
		        }
		      }
		    }

		    quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
		    quickSort(this.__originalMappings, util.compareByOriginalPositions);
		  };

		exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;


	/***/ },
	/* 2 */
	/***/ function(module, exports) {

		/* -*- Mode: js; js-indent-level: 2; -*- */
		/*
		 * Copyright 2011 Mozilla Foundation and contributors
		 * Licensed under the New BSD license. See LICENSE or:
		 * http://opensource.org/licenses/BSD-3-Clause
		 */

		/**
		 * This is a helper function for getting values from parameter/options
		 * objects.
		 *
		 * @param args The object we are extracting values from
		 * @param name The name of the property we are getting.
		 * @param defaultValue An optional value to return if the property is missing
		 * from the object. If this is not specified and the property is missing, an
		 * error will be thrown.
		 */
		function getArg(aArgs, aName, aDefaultValue) {
		  if (aName in aArgs) {
		    return aArgs[aName];
		  } else if (arguments.length === 3) {
		    return aDefaultValue;
		  } else {
		    throw new Error('"' + aName + '" is a required argument.');
		  }
		}
		exports.getArg = getArg;

		var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/;
		var dataUrlRegexp = /^data:.+\,.+$/;

		function urlParse(aUrl) {
		  var match = aUrl.match(urlRegexp);
		  if (!match) {
		    return null;
		  }
		  return {
		    scheme: match[1],
		    auth: match[2],
		    host: match[3],
		    port: match[4],
		    path: match[5]
		  };
		}
		exports.urlParse = urlParse;

		function urlGenerate(aParsedUrl) {
		  var url = '';
		  if (aParsedUrl.scheme) {
		    url += aParsedUrl.scheme + ':';
		  }
		  url += '//';
		  if (aParsedUrl.auth) {
		    url += aParsedUrl.auth + '@';
		  }
		  if (aParsedUrl.host) {
		    url += aParsedUrl.host;
		  }
		  if (aParsedUrl.port) {
		    url += ":" + aParsedUrl.port
		  }
		  if (aParsedUrl.path) {
		    url += aParsedUrl.path;
		  }
		  return url;
		}
		exports.urlGenerate = urlGenerate;

		/**
		 * Normalizes a path, or the path portion of a URL:
		 *
		 * - Replaces consecutive slashes with one slash.
		 * - Removes unnecessary '.' parts.
		 * - Removes unnecessary '<dir>/..' parts.
		 *
		 * Based on code in the Node.js 'path' core module.
		 *
		 * @param aPath The path or url to normalize.
		 */
		function normalize(aPath) {
		  var path = aPath;
		  var url = urlParse(aPath);
		  if (url) {
		    if (!url.path) {
		      return aPath;
		    }
		    path = url.path;
		  }
		  var isAbsolute = exports.isAbsolute(path);

		  var parts = path.split(/\/+/);
		  for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
		    part = parts[i];
		    if (part === '.') {
		      parts.splice(i, 1);
		    } else if (part === '..') {
		      up++;
		    } else if (up > 0) {
		      if (part === '') {
		        // The first part is blank if the path is absolute. Trying to go
		        // above the root is a no-op. Therefore we can remove all '..' parts
		        // directly after the root.
		        parts.splice(i + 1, up);
		        up = 0;
		      } else {
		        parts.splice(i, 2);
		        up--;
		      }
		    }
		  }
		  path = parts.join('/');

		  if (path === '') {
		    path = isAbsolute ? '/' : '.';
		  }

		  if (url) {
		    url.path = path;
		    return urlGenerate(url);
		  }
		  return path;
		}
		exports.normalize = normalize;

		/**
		 * Joins two paths/URLs.
		 *
		 * @param aRoot The root path or URL.
		 * @param aPath The path or URL to be joined with the root.
		 *
		 * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
		 *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
		 *   first.
		 * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
		 *   is updated with the result and aRoot is returned. Otherwise the result
		 *   is returned.
		 *   - If aPath is absolute, the result is aPath.
		 *   - Otherwise the two paths are joined with a slash.
		 * - Joining for example 'http://' and 'www.example.com' is also supported.
		 */
		function join(aRoot, aPath) {
		  if (aRoot === "") {
		    aRoot = ".";
		  }
		  if (aPath === "") {
		    aPath = ".";
		  }
		  var aPathUrl = urlParse(aPath);
		  var aRootUrl = urlParse(aRoot);
		  if (aRootUrl) {
		    aRoot = aRootUrl.path || '/';
		  }

		  // `join(foo, '//www.example.org')`
		  if (aPathUrl && !aPathUrl.scheme) {
		    if (aRootUrl) {
		      aPathUrl.scheme = aRootUrl.scheme;
		    }
		    return urlGenerate(aPathUrl);
		  }

		  if (aPathUrl || aPath.match(dataUrlRegexp)) {
		    return aPath;
		  }

		  // `join('http://', 'www.example.com')`
		  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
		    aRootUrl.host = aPath;
		    return urlGenerate(aRootUrl);
		  }

		  var joined = aPath.charAt(0) === '/'
		    ? aPath
		    : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);

		  if (aRootUrl) {
		    aRootUrl.path = joined;
		    return urlGenerate(aRootUrl);
		  }
		  return joined;
		}
		exports.join = join;

		exports.isAbsolute = function (aPath) {
		  return aPath.charAt(0) === '/' || !!aPath.match(urlRegexp);
		};

		/**
		 * Make a path relative to a URL or another path.
		 *
		 * @param aRoot The root path or URL.
		 * @param aPath The path or URL to be made relative to aRoot.
		 */
		function relative(aRoot, aPath) {
		  if (aRoot === "") {
		    aRoot = ".";
		  }

		  aRoot = aRoot.replace(/\/$/, '');

		  // It is possible for the path to be above the root. In this case, simply
		  // checking whether the root is a prefix of the path won't work. Instead, we
		  // need to remove components from the root one by one, until either we find
		  // a prefix that fits, or we run out of components to remove.
		  var level = 0;
		  while (aPath.indexOf(aRoot + '/') !== 0) {
		    var index = aRoot.lastIndexOf("/");
		    if (index < 0) {
		      return aPath;
		    }

		    // If the only part of the root that is left is the scheme (i.e. http://,
		    // file:///, etc.), one or more slashes (/), or simply nothing at all, we
		    // have exhausted all components, so the path is not relative to the root.
		    aRoot = aRoot.slice(0, index);
		    if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
		      return aPath;
		    }

		    ++level;
		  }

		  // Make sure we add a "../" for each component we removed from the root.
		  return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
		}
		exports.relative = relative;

		var supportsNullProto = (function () {
		  var obj = Object.create(null);
		  return !('__proto__' in obj);
		}());

		function identity (s) {
		  return s;
		}

		/**
		 * Because behavior goes wacky when you set `__proto__` on objects, we
		 * have to prefix all the strings in our set with an arbitrary character.
		 *
		 * See https://github.com/mozilla/source-map/pull/31 and
		 * https://github.com/mozilla/source-map/issues/30
		 *
		 * @param String aStr
		 */
		function toSetString(aStr) {
		  if (isProtoString(aStr)) {
		    return '$' + aStr;
		  }

		  return aStr;
		}
		exports.toSetString = supportsNullProto ? identity : toSetString;

		function fromSetString(aStr) {
		  if (isProtoString(aStr)) {
		    return aStr.slice(1);
		  }

		  return aStr;
		}
		exports.fromSetString = supportsNullProto ? identity : fromSetString;

		function isProtoString(s) {
		  if (!s) {
		    return false;
		  }

		  var length = s.length;

		  if (length < 9 /* "__proto__".length */) {
		    return false;
		  }

		  if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||
		      s.charCodeAt(length - 2) !== 95  /* '_' */ ||
		      s.charCodeAt(length - 3) !== 111 /* 'o' */ ||
		      s.charCodeAt(length - 4) !== 116 /* 't' */ ||
		      s.charCodeAt(length - 5) !== 111 /* 'o' */ ||
		      s.charCodeAt(length - 6) !== 114 /* 'r' */ ||
		      s.charCodeAt(length - 7) !== 112 /* 'p' */ ||
		      s.charCodeAt(length - 8) !== 95  /* '_' */ ||
		      s.charCodeAt(length - 9) !== 95  /* '_' */) {
		    return false;
		  }

		  for (var i = length - 10; i >= 0; i--) {
		    if (s.charCodeAt(i) !== 36 /* '$' */) {
		      return false;
		    }
		  }

		  return true;
		}

		/**
		 * Comparator between two mappings where the original positions are compared.
		 *
		 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
		 * mappings with the same original source/line/column, but different generated
		 * line and column the same. Useful when searching for a mapping with a
		 * stubbed out mapping.
		 */
		function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
		  var cmp = mappingA.source - mappingB.source;
		  if (cmp !== 0) {
		    return cmp;
		  }

		  cmp = mappingA.originalLine - mappingB.originalLine;
		  if (cmp !== 0) {
		    return cmp;
		  }

		  cmp = mappingA.originalColumn - mappingB.originalColumn;
		  if (cmp !== 0 || onlyCompareOriginal) {
		    return cmp;
		  }

		  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
		  if (cmp !== 0) {
		    return cmp;
		  }

		  cmp = mappingA.generatedLine - mappingB.generatedLine;
		  if (cmp !== 0) {
		    return cmp;
		  }

		  return mappingA.name - mappingB.name;
		}
		exports.compareByOriginalPositions = compareByOriginalPositions;

		/**
		 * Comparator between two mappings with deflated source and name indices where
		 * the generated positions are compared.
		 *
		 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
		 * mappings with the same generated line and column, but different
		 * source/name/original line and column the same. Useful when searching for a
		 * mapping with a stubbed out mapping.
		 */
		function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
		  var cmp = mappingA.generatedLine - mappingB.generatedLine;
		  if (cmp !== 0) {
		    return cmp;
		  }

		  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
		  if (cmp !== 0 || onlyCompareGenerated) {
		    return cmp;
		  }

		  cmp = mappingA.source - mappingB.source;
		  if (cmp !== 0) {
		    return cmp;
		  }

		  cmp = mappingA.originalLine - mappingB.originalLine;
		  if (cmp !== 0) {
		    return cmp;
		  }

		  cmp = mappingA.originalColumn - mappingB.originalColumn;
		  if (cmp !== 0) {
		    return cmp;
		  }

		  return mappingA.name - mappingB.name;
		}
		exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;

		function strcmp(aStr1, aStr2) {
		  if (aStr1 === aStr2) {
		    return 0;
		  }

		  if (aStr1 > aStr2) {
		    return 1;
		  }

		  return -1;
		}

		/**
		 * Comparator between two mappings with inflated source and name strings where
		 * the generated positions are compared.
		 */
		function compareByGeneratedPositionsInflated(mappingA, mappingB) {
		  var cmp = mappingA.generatedLine - mappingB.generatedLine;
		  if (cmp !== 0) {
		    return cmp;
		  }

		  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
		  if (cmp !== 0) {
		    return cmp;
		  }

		  cmp = strcmp(mappingA.source, mappingB.source);
		  if (cmp !== 0) {
		    return cmp;
		  }

		  cmp = mappingA.originalLine - mappingB.originalLine;
		  if (cmp !== 0) {
		    return cmp;
		  }

		  cmp = mappingA.originalColumn - mappingB.originalColumn;
		  if (cmp !== 0) {
		    return cmp;
		  }

		  return strcmp(mappingA.name, mappingB.name);
		}
		exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;


	/***/ },
	/* 3 */
	/***/ function(module, exports) {

		/* -*- Mode: js; js-indent-level: 2; -*- */
		/*
		 * Copyright 2011 Mozilla Foundation and contributors
		 * Licensed under the New BSD license. See LICENSE or:
		 * http://opensource.org/licenses/BSD-3-Clause
		 */

		exports.GREATEST_LOWER_BOUND = 1;
		exports.LEAST_UPPER_BOUND = 2;

		/**
		 * Recursive implementation of binary search.
		 *
		 * @param aLow Indices here and lower do not contain the needle.
		 * @param aHigh Indices here and higher do not contain the needle.
		 * @param aNeedle The element being searched for.
		 * @param aHaystack The non-empty array being searched.
		 * @param aCompare Function which takes two elements and returns -1, 0, or 1.
		 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
		 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
		 *     closest element that is smaller than or greater than the one we are
		 *     searching for, respectively, if the exact element cannot be found.
		 */
		function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
		  // This function terminates when one of the following is true:
		  //
		  //   1. We find the exact element we are looking for.
		  //
		  //   2. We did not find the exact element, but we can return the index of
		  //      the next-closest element.
		  //
		  //   3. We did not find the exact element, and there is no next-closest
		  //      element than the one we are searching for, so we return -1.
		  var mid = Math.floor((aHigh - aLow) / 2) + aLow;
		  var cmp = aCompare(aNeedle, aHaystack[mid], true);
		  if (cmp === 0) {
		    // Found the element we are looking for.
		    return mid;
		  }
		  else if (cmp > 0) {
		    // Our needle is greater than aHaystack[mid].
		    if (aHigh - mid > 1) {
		      // The element is in the upper half.
		      return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
		    }

		    // The exact needle element was not found in this haystack. Determine if
		    // we are in termination case (3) or (2) and return the appropriate thing.
		    if (aBias == exports.LEAST_UPPER_BOUND) {
		      return aHigh < aHaystack.length ? aHigh : -1;
		    } else {
		      return mid;
		    }
		  }
		  else {
		    // Our needle is less than aHaystack[mid].
		    if (mid - aLow > 1) {
		      // The element is in the lower half.
		      return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
		    }

		    // we are in termination case (3) or (2) and return the appropriate thing.
		    if (aBias == exports.LEAST_UPPER_BOUND) {
		      return mid;
		    } else {
		      return aLow < 0 ? -1 : aLow;
		    }
		  }
		}

		/**
		 * This is an implementation of binary search which will always try and return
		 * the index of the closest element if there is no exact hit. This is because
		 * mappings between original and generated line/col pairs are single points,
		 * and there is an implicit region between each of them, so a miss just means
		 * that you aren't on the very start of a region.
		 *
		 * @param aNeedle The element you are looking for.
		 * @param aHaystack The array that is being searched.
		 * @param aCompare A function which takes the needle and an element in the
		 *     array and returns -1, 0, or 1 depending on whether the needle is less
		 *     than, equal to, or greater than the element, respectively.
		 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
		 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
		 *     closest element that is smaller than or greater than the one we are
		 *     searching for, respectively, if the exact element cannot be found.
		 *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
		 */
		exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
		  if (aHaystack.length === 0) {
		    return -1;
		  }

		  var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,
		                              aCompare, aBias || exports.GREATEST_LOWER_BOUND);
		  if (index < 0) {
		    return -1;
		  }

		  // We have found either the exact element, or the next-closest element than
		  // the one we are searching for. However, there may be more than one such
		  // element. Make sure we always return the smallest of these.
		  while (index - 1 >= 0) {
		    if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
		      break;
		    }
		    --index;
		  }

		  return index;
		};


	/***/ },
	/* 4 */
	/***/ function(module, exports, __webpack_require__) {

		/* -*- Mode: js; js-indent-level: 2; -*- */
		/*
		 * Copyright 2011 Mozilla Foundation and contributors
		 * Licensed under the New BSD license. See LICENSE or:
		 * http://opensource.org/licenses/BSD-3-Clause
		 */

		var util = __webpack_require__(2);
		var has = Object.prototype.hasOwnProperty;

		/**
		 * A data structure which is a combination of an array and a set. Adding a new
		 * member is O(1), testing for membership is O(1), and finding the index of an
		 * element is O(1). Removing elements from the set is not supported. Only
		 * strings are supported for membership.
		 */
		function ArraySet() {
		  this._array = [];
		  this._set = Object.create(null);
		}

		/**
		 * Static method for creating ArraySet instances from an existing array.
		 */
		ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
		  var set = new ArraySet();
		  for (var i = 0, len = aArray.length; i < len; i++) {
		    set.add(aArray[i], aAllowDuplicates);
		  }
		  return set;
		};

		/**
		 * Return how many unique items are in this ArraySet. If duplicates have been
		 * added, than those do not count towards the size.
		 *
		 * @returns Number
		 */
		ArraySet.prototype.size = function ArraySet_size() {
		  return Object.getOwnPropertyNames(this._set).length;
		};

		/**
		 * Add the given string to this set.
		 *
		 * @param String aStr
		 */
		ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
		  var sStr = util.toSetString(aStr);
		  var isDuplicate = has.call(this._set, sStr);
		  var idx = this._array.length;
		  if (!isDuplicate || aAllowDuplicates) {
		    this._array.push(aStr);
		  }
		  if (!isDuplicate) {
		    this._set[sStr] = idx;
		  }
		};

		/**
		 * Is the given string a member of this set?
		 *
		 * @param String aStr
		 */
		ArraySet.prototype.has = function ArraySet_has(aStr) {
		  var sStr = util.toSetString(aStr);
		  return has.call(this._set, sStr);
		};

		/**
		 * What is the index of the given string in the array?
		 *
		 * @param String aStr
		 */
		ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
		  var sStr = util.toSetString(aStr);
		  if (has.call(this._set, sStr)) {
		    return this._set[sStr];
		  }
		  throw new Error('"' + aStr + '" is not in the set.');
		};

		/**
		 * What is the element at the given index?
		 *
		 * @param Number aIdx
		 */
		ArraySet.prototype.at = function ArraySet_at(aIdx) {
		  if (aIdx >= 0 && aIdx < this._array.length) {
		    return this._array[aIdx];
		  }
		  throw new Error('No element indexed by ' + aIdx);
		};

		/**
		 * Returns the array representation of this set (which has the proper indices
		 * indicated by indexOf). Note that this is a copy of the internal array used
		 * for storing the members so that no one can mess with internal state.
		 */
		ArraySet.prototype.toArray = function ArraySet_toArray() {
		  return this._array.slice();
		};

		exports.ArraySet = ArraySet;


	/***/ },
	/* 5 */
	/***/ function(module, exports, __webpack_require__) {

		/* -*- Mode: js; js-indent-level: 2; -*- */
		/*
		 * Copyright 2011 Mozilla Foundation and contributors
		 * Licensed under the New BSD license. See LICENSE or:
		 * http://opensource.org/licenses/BSD-3-Clause
		 *
		 * Based on the Base 64 VLQ implementation in Closure Compiler:
		 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
		 *
		 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
		 * Redistribution and use in source and binary forms, with or without
		 * modification, are permitted provided that the following conditions are
		 * met:
		 *
		 *  * Redistributions of source code must retain the above copyright
		 *    notice, this list of conditions and the following disclaimer.
		 *  * Redistributions in binary form must reproduce the above
		 *    copyright notice, this list of conditions and the following
		 *    disclaimer in the documentation and/or other materials provided
		 *    with the distribution.
		 *  * Neither the name of Google Inc. nor the names of its
		 *    contributors may be used to endorse or promote products derived
		 *    from this software without specific prior written permission.
		 *
		 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
		 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
		 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
		 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
		 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
		 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
		 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
		 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
		 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
		 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
		 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		 */

		var base64 = __webpack_require__(6);

		// A single base 64 digit can contain 6 bits of data. For the base 64 variable
		// length quantities we use in the source map spec, the first bit is the sign,
		// the next four bits are the actual value, and the 6th bit is the
		// continuation bit. The continuation bit tells us whether there are more
		// digits in this value following this digit.
		//
		//   Continuation
		//   |    Sign
		//   |    |
		//   V    V
		//   101011

		var VLQ_BASE_SHIFT = 5;

		// binary: 100000
		var VLQ_BASE = 1 << VLQ_BASE_SHIFT;

		// binary: 011111
		var VLQ_BASE_MASK = VLQ_BASE - 1;

		// binary: 100000
		var VLQ_CONTINUATION_BIT = VLQ_BASE;

		/**
		 * Converts from a two-complement value to a value where the sign bit is
		 * placed in the least significant bit.  For example, as decimals:
		 *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
		 *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
		 */
		function toVLQSigned(aValue) {
		  return aValue < 0
		    ? ((-aValue) << 1) + 1
		    : (aValue << 1) + 0;
		}

		/**
		 * Converts to a two-complement value from a value where the sign bit is
		 * placed in the least significant bit.  For example, as decimals:
		 *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
		 *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
		 */
		function fromVLQSigned(aValue) {
		  var isNegative = (aValue & 1) === 1;
		  var shifted = aValue >> 1;
		  return isNegative
		    ? -shifted
		    : shifted;
		}

		/**
		 * Returns the base 64 VLQ encoded value.
		 */
		exports.encode = function base64VLQ_encode(aValue) {
		  var encoded = "";
		  var digit;

		  var vlq = toVLQSigned(aValue);

		  do {
		    digit = vlq & VLQ_BASE_MASK;
		    vlq >>>= VLQ_BASE_SHIFT;
		    if (vlq > 0) {
		      // There are still more digits in this value, so we must make sure the
		      // continuation bit is marked.
		      digit |= VLQ_CONTINUATION_BIT;
		    }
		    encoded += base64.encode(digit);
		  } while (vlq > 0);

		  return encoded;
		};

		/**
		 * Decodes the next base 64 VLQ value from the given string and returns the
		 * value and the rest of the string via the out parameter.
		 */
		exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
		  var strLen = aStr.length;
		  var result = 0;
		  var shift = 0;
		  var continuation, digit;

		  do {
		    if (aIndex >= strLen) {
		      throw new Error("Expected more digits in base 64 VLQ value.");
		    }

		    digit = base64.decode(aStr.charCodeAt(aIndex++));
		    if (digit === -1) {
		      throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
		    }

		    continuation = !!(digit & VLQ_CONTINUATION_BIT);
		    digit &= VLQ_BASE_MASK;
		    result = result + (digit << shift);
		    shift += VLQ_BASE_SHIFT;
		  } while (continuation);

		  aOutParam.value = fromVLQSigned(result);
		  aOutParam.rest = aIndex;
		};


	/***/ },
	/* 6 */
	/***/ function(module, exports) {

		/* -*- Mode: js; js-indent-level: 2; -*- */
		/*
		 * Copyright 2011 Mozilla Foundation and contributors
		 * Licensed under the New BSD license. See LICENSE or:
		 * http://opensource.org/licenses/BSD-3-Clause
		 */

		var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');

		/**
		 * Encode an integer in the range of 0 to 63 to a single base 64 digit.
		 */
		exports.encode = function (number) {
		  if (0 <= number && number < intToCharMap.length) {
		    return intToCharMap[number];
		  }
		  throw new TypeError("Must be between 0 and 63: " + number);
		};

		/**
		 * Decode a single base 64 character code digit to an integer. Returns -1 on
		 * failure.
		 */
		exports.decode = function (charCode) {
		  var bigA = 65;     // 'A'
		  var bigZ = 90;     // 'Z'

		  var littleA = 97;  // 'a'
		  var littleZ = 122; // 'z'

		  var zero = 48;     // '0'
		  var nine = 57;     // '9'

		  var plus = 43;     // '+'
		  var slash = 47;    // '/'

		  var littleOffset = 26;
		  var numberOffset = 52;

		  // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
		  if (bigA <= charCode && charCode <= bigZ) {
		    return (charCode - bigA);
		  }

		  // 26 - 51: abcdefghijklmnopqrstuvwxyz
		  if (littleA <= charCode && charCode <= littleZ) {
		    return (charCode - littleA + littleOffset);
		  }

		  // 52 - 61: 0123456789
		  if (zero <= charCode && charCode <= nine) {
		    return (charCode - zero + numberOffset);
		  }

		  // 62: +
		  if (charCode == plus) {
		    return 62;
		  }

		  // 63: /
		  if (charCode == slash) {
		    return 63;
		  }

		  // Invalid base64 digit.
		  return -1;
		};


	/***/ },
	/* 7 */
	/***/ function(module, exports) {

		/* -*- Mode: js; js-indent-level: 2; -*- */
		/*
		 * Copyright 2011 Mozilla Foundation and contributors
		 * Licensed under the New BSD license. See LICENSE or:
		 * http://opensource.org/licenses/BSD-3-Clause
		 */

		// It turns out that some (most?) JavaScript engines don't self-host
		// `Array.prototype.sort`. This makes sense because C++ will likely remain
		// faster than JS when doing raw CPU-intensive sorting. However, when using a
		// custom comparator function, calling back and forth between the VM's C++ and
		// JIT'd JS is rather slow *and* loses JIT type information, resulting in
		// worse generated code for the comparator function than would be optimal. In
		// fact, when sorting with a comparator, these costs outweigh the benefits of
		// sorting in C++. By using our own JS-implemented Quick Sort (below), we get
		// a ~3500ms mean speed-up in `bench/bench.html`.

		/**
		 * Swap the elements indexed by `x` and `y` in the array `ary`.
		 *
		 * @param {Array} ary
		 *        The array.
		 * @param {Number} x
		 *        The index of the first item.
		 * @param {Number} y
		 *        The index of the second item.
		 */
		function swap(ary, x, y) {
		  var temp = ary[x];
		  ary[x] = ary[y];
		  ary[y] = temp;
		}

		/**
		 * Returns a random integer within the range `low .. high` inclusive.
		 *
		 * @param {Number} low
		 *        The lower bound on the range.
		 * @param {Number} high
		 *        The upper bound on the range.
		 */
		function randomIntInRange(low, high) {
		  return Math.round(low + (Math.random() * (high - low)));
		}

		/**
		 * The Quick Sort algorithm.
		 *
		 * @param {Array} ary
		 *        An array to sort.
		 * @param {function} comparator
		 *        Function to use to compare two items.
		 * @param {Number} p
		 *        Start index of the array
		 * @param {Number} r
		 *        End index of the array
		 */
		function doQuickSort(ary, comparator, p, r) {
		  // If our lower bound is less than our upper bound, we (1) partition the
		  // array into two pieces and (2) recurse on each half. If it is not, this is
		  // the empty array and our base case.

		  if (p < r) {
		    // (1) Partitioning.
		    //
		    // The partitioning chooses a pivot between `p` and `r` and moves all
		    // elements that are less than or equal to the pivot to the before it, and
		    // all the elements that are greater than it after it. The effect is that
		    // once partition is done, the pivot is in the exact place it will be when
		    // the array is put in sorted order, and it will not need to be moved
		    // again. This runs in O(n) time.

		    // Always choose a random pivot so that an input array which is reverse
		    // sorted does not cause O(n^2) running time.
		    var pivotIndex = randomIntInRange(p, r);
		    var i = p - 1;

		    swap(ary, pivotIndex, r);
		    var pivot = ary[r];

		    // Immediately after `j` is incremented in this loop, the following hold
		    // true:
		    //
		    //   * Every element in `ary[p .. i]` is less than or equal to the pivot.
		    //
		    //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
		    for (var j = p; j < r; j++) {
		      if (comparator(ary[j], pivot) <= 0) {
		        i += 1;
		        swap(ary, i, j);
		      }
		    }

		    swap(ary, i + 1, j);
		    var q = i + 1;

		    // (2) Recurse on each half.

		    doQuickSort(ary, comparator, p, q - 1);
		    doQuickSort(ary, comparator, q + 1, r);
		  }
		}

		/**
		 * Sort the given array in-place with the given comparator function.
		 *
		 * @param {Array} ary
		 *        An array to sort.
		 * @param {function} comparator
		 *        Function to use to compare two items.
		 */
		exports.quickSort = function (ary, comparator) {
		  doQuickSort(ary, comparator, 0, ary.length - 1);
		};


	/***/ }
	/******/ ])
	});
	;

/***/ },
/* 630 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	  Copyright (c) 2017 Jed Watson.
	  Licensed under the MIT License (MIT), see
	  http://jedwatson.github.io/classnames
	*/
	/* global define */

	(function () {
		'use strict';

		var hasOwn = {}.hasOwnProperty;

		function classNames () {
			var classes = [];

			for (var i = 0; i < arguments.length; i++) {
				var arg = arguments[i];
				if (!arg) continue;

				var argType = typeof arg;

				if (argType === 'string' || argType === 'number') {
					classes.push(arg);
				} else if (Array.isArray(arg) && arg.length) {
					var inner = classNames.apply(null, arg);
					if (inner) {
						classes.push(inner);
					}
				} else if (argType === 'object') {
					for (var key in arg) {
						if (hasOwn.call(arg, key) && arg[key]) {
							classes.push(key);
						}
					}
				}
			}

			return classes.join(' ');
		}

		if (typeof module !== 'undefined' && module.exports) {
			classNames["default"] = classNames;
			module.exports = classNames;
		} else if (true) {
			// register as 'classnames', consistent with npm package name
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
				return classNames;
			}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			window.classNames = classNames;
		}
	}());


/***/ },
/* 631 */
/***/ function(module, exports, __webpack_require__) {

	/* components */
	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _Router2 = __webpack_require__(632);

	var _Router3 = _interopRequireDefault(_Router2);

	exports.Router = _Router3['default'];

	var _Link2 = __webpack_require__(669);

	var _Link3 = _interopRequireDefault(_Link2);

	exports.Link = _Link3['default'];

	var _IndexLink2 = __webpack_require__(671);

	var _IndexLink3 = _interopRequireDefault(_IndexLink2);

	exports.IndexLink = _IndexLink3['default'];

	/* components (configuration) */

	var _IndexRedirect2 = __webpack_require__(672);

	var _IndexRedirect3 = _interopRequireDefault(_IndexRedirect2);

	exports.IndexRedirect = _IndexRedirect3['default'];

	var _IndexRoute2 = __webpack_require__(674);

	var _IndexRoute3 = _interopRequireDefault(_IndexRoute2);

	exports.IndexRoute = _IndexRoute3['default'];

	var _Redirect2 = __webpack_require__(673);

	var _Redirect3 = _interopRequireDefault(_Redirect2);

	exports.Redirect = _Redirect3['default'];

	var _Route2 = __webpack_require__(675);

	var _Route3 = _interopRequireDefault(_Route2);

	exports.Route = _Route3['default'];

	/* mixins */

	var _History2 = __webpack_require__(676);

	var _History3 = _interopRequireDefault(_History2);

	exports.History = _History3['default'];

	var _Lifecycle2 = __webpack_require__(677);

	var _Lifecycle3 = _interopRequireDefault(_Lifecycle2);

	exports.Lifecycle = _Lifecycle3['default'];

	var _RouteContext2 = __webpack_require__(678);

	var _RouteContext3 = _interopRequireDefault(_RouteContext2);

	exports.RouteContext = _RouteContext3['default'];

	/* utils */

	var _useRoutes2 = __webpack_require__(679);

	var _useRoutes3 = _interopRequireDefault(_useRoutes2);

	exports.useRoutes = _useRoutes3['default'];

	var _RouteUtils = __webpack_require__(664);

	exports.createRoutes = _RouteUtils.createRoutes;

	var _RouterContext2 = __webpack_require__(666);

	var _RouterContext3 = _interopRequireDefault(_RouterContext2);

	exports.RouterContext = _RouterContext3['default'];

	var _RoutingContext2 = __webpack_require__(680);

	var _RoutingContext3 = _interopRequireDefault(_RoutingContext2);

	exports.RoutingContext = _RoutingContext3['default'];

	var _PropTypes2 = __webpack_require__(670);

	var _PropTypes3 = _interopRequireDefault(_PropTypes2);

	exports.PropTypes = _PropTypes3['default'];
	exports.locationShape = _PropTypes2.locationShape;
	exports.routerShape = _PropTypes2.routerShape;

	var _match2 = __webpack_require__(681);

	var _match3 = _interopRequireDefault(_match2);

	exports.match = _match3['default'];

	var _useRouterHistory2 = __webpack_require__(685);

	var _useRouterHistory3 = _interopRequireDefault(_useRouterHistory2);

	exports.useRouterHistory = _useRouterHistory3['default'];

	var _PatternUtils = __webpack_require__(657);

	exports.formatPattern = _PatternUtils.formatPattern;

	var _applyRouterMiddleware2 = __webpack_require__(686);

	var _applyRouterMiddleware3 = _interopRequireDefault(_applyRouterMiddleware2);

	exports.applyRouterMiddleware = _applyRouterMiddleware3['default'];

	/* histories */

	var _browserHistory2 = __webpack_require__(687);

	var _browserHistory3 = _interopRequireDefault(_browserHistory2);

	exports.browserHistory = _browserHistory3['default'];

	var _hashHistory2 = __webpack_require__(690);

	var _hashHistory3 = _interopRequireDefault(_hashHistory2);

	exports.hashHistory = _hashHistory3['default'];

	var _createMemoryHistory2 = __webpack_require__(682);

	var _createMemoryHistory3 = _interopRequireDefault(_createMemoryHistory2);

	exports.createMemoryHistory = _createMemoryHistory3['default'];

/***/ },
/* 632 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var _historyLibCreateHashHistory = __webpack_require__(633);

	var _historyLibCreateHashHistory2 = _interopRequireDefault(_historyLibCreateHashHistory);

	var _historyLibUseQueries = __webpack_require__(650);

	var _historyLibUseQueries2 = _interopRequireDefault(_historyLibUseQueries);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _createTransitionManager = __webpack_require__(653);

	var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);

	var _InternalPropTypes = __webpack_require__(665);

	var _RouterContext = __webpack_require__(666);

	var _RouterContext2 = _interopRequireDefault(_RouterContext);

	var _RouteUtils = __webpack_require__(664);

	var _RouterUtils = __webpack_require__(668);

	var _routerWarning = __webpack_require__(654);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	function isDeprecatedHistory(history) {
	  return !history || !history.__v2_compatible__;
	}

	var _React$PropTypes = _react2['default'].PropTypes;
	var func = _React$PropTypes.func;
	var object = _React$PropTypes.object;

	/**
	 * A <Router> is a high-level API for automatically setting up
	 * a router that renders a <RouterContext> with all the props
	 * it needs each time the URL changes.
	 */
	var Router = _react2['default'].createClass({
	  displayName: 'Router',

	  propTypes: {
	    history: object,
	    children: _InternalPropTypes.routes,
	    routes: _InternalPropTypes.routes, // alias for children
	    render: func,
	    createElement: func,
	    onError: func,
	    onUpdate: func,

	    // PRIVATE: For client-side rehydration of server match.
	    matchContext: object
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      render: function render(props) {
	        return _react2['default'].createElement(_RouterContext2['default'], props);
	      }
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      location: null,
	      routes: null,
	      params: null,
	      components: null
	    };
	  },

	  handleError: function handleError(error) {
	    if (this.props.onError) {
	      this.props.onError.call(this, error);
	    } else {
	      // Throw errors by default so we don't silently swallow them!
	      throw error; // This error probably occurred in getChildRoutes or getComponents.
	    }
	  },

	  componentWillMount: function componentWillMount() {
	    var _this = this;

	    var _props = this.props;
	    var parseQueryString = _props.parseQueryString;
	    var stringifyQuery = _props.stringifyQuery;

	    process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](!(parseQueryString || stringifyQuery), '`parseQueryString` and `stringifyQuery` are deprecated. Please create a custom history. http://tiny.cc/router-customquerystring') : undefined;

	    var _createRouterObjects = this.createRouterObjects();

	    var history = _createRouterObjects.history;
	    var transitionManager = _createRouterObjects.transitionManager;
	    var router = _createRouterObjects.router;

	    this._unlisten = transitionManager.listen(function (error, state) {
	      if (error) {
	        _this.handleError(error);
	      } else {
	        _this.setState(state, _this.props.onUpdate);
	      }
	    });

	    this.history = history;
	    this.router = router;
	  },

	  createRouterObjects: function createRouterObjects() {
	    var matchContext = this.props.matchContext;

	    if (matchContext) {
	      return matchContext;
	    }

	    var history = this.props.history;
	    var _props2 = this.props;
	    var routes = _props2.routes;
	    var children = _props2.children;

	    if (isDeprecatedHistory(history)) {
	      history = this.wrapDeprecatedHistory(history);
	    }

	    var transitionManager = _createTransitionManager2['default'](history, _RouteUtils.createRoutes(routes || children));
	    var router = _RouterUtils.createRouterObject(history, transitionManager);
	    var routingHistory = _RouterUtils.createRoutingHistory(history, transitionManager);

	    return { history: routingHistory, transitionManager: transitionManager, router: router };
	  },

	  wrapDeprecatedHistory: function wrapDeprecatedHistory(history) {
	    var _props3 = this.props;
	    var parseQueryString = _props3.parseQueryString;
	    var stringifyQuery = _props3.stringifyQuery;

	    var createHistory = undefined;
	    if (history) {
	      process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, 'It appears you have provided a deprecated history object to `<Router/>`, please use a history provided by ' + 'React Router with `import { browserHistory } from \'react-router\'` or `import { hashHistory } from \'react-router\'`. ' + 'If you are using a custom history please create it with `useRouterHistory`, see http://tiny.cc/router-usinghistory for details.') : undefined;
	      createHistory = function () {
	        return history;
	      };
	    } else {
	      process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, '`Router` no longer defaults the history prop to hash history. Please use the `hashHistory` singleton instead. http://tiny.cc/router-defaulthistory') : undefined;
	      createHistory = _historyLibCreateHashHistory2['default'];
	    }

	    return _historyLibUseQueries2['default'](createHistory)({ parseQueryString: parseQueryString, stringifyQuery: stringifyQuery });
	  },

	  /* istanbul ignore next: sanity check */
	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](nextProps.history === this.props.history, 'You cannot change <Router history>; it will be ignored') : undefined;

	    process.env.NODE_ENV !== 'production' ? _routerWarning2['default']((nextProps.routes || nextProps.children) === (this.props.routes || this.props.children), 'You cannot change <Router routes>; it will be ignored') : undefined;
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    if (this._unlisten) this._unlisten();
	  },

	  render: function render() {
	    var _state = this.state;
	    var location = _state.location;
	    var routes = _state.routes;
	    var params = _state.params;
	    var components = _state.components;
	    var _props4 = this.props;
	    var createElement = _props4.createElement;
	    var render = _props4.render;

	    var props = _objectWithoutProperties(_props4, ['createElement', 'render']);

	    if (location == null) return null; // Async match

	    // Only forward non-Router-specific props to routing context, as those are
	    // the only ones that might be custom routing context props.
	    Object.keys(Router.propTypes).forEach(function (propType) {
	      return delete props[propType];
	    });

	    return render(_extends({}, props, {
	      history: this.history,
	      router: this.router,
	      location: location,
	      routes: routes,
	      params: params,
	      components: components,
	      createElement: createElement
	    }));
	  }

	});

	exports['default'] = Router;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 633 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(634);

	var _warning2 = _interopRequireDefault(_warning);

	var _invariant = __webpack_require__(635);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _Actions = __webpack_require__(636);

	var _PathUtils = __webpack_require__(637);

	var _ExecutionEnvironment = __webpack_require__(638);

	var _DOMUtils = __webpack_require__(639);

	var _DOMStateStorage = __webpack_require__(640);

	var _createDOMHistory = __webpack_require__(641);

	var _createDOMHistory2 = _interopRequireDefault(_createDOMHistory);

	function isAbsolutePath(path) {
	  return typeof path === 'string' && path.charAt(0) === '/';
	}

	function ensureSlash() {
	  var path = _DOMUtils.getHashPath();

	  if (isAbsolutePath(path)) return true;

	  _DOMUtils.replaceHashPath('/' + path);

	  return false;
	}

	function addQueryStringValueToPath(path, key, value) {
	  return path + (path.indexOf('?') === -1 ? '?' : '&') + (key + '=' + value);
	}

	function stripQueryStringValueFromPath(path, key) {
	  return path.replace(new RegExp('[?&]?' + key + '=[a-zA-Z0-9]+'), '');
	}

	function getQueryStringValueFromPath(path, key) {
	  var match = path.match(new RegExp('\\?.*?\\b' + key + '=(.+?)\\b'));
	  return match && match[1];
	}

	var DefaultQueryKey = '_k';

	function createHashHistory() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	  !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Hash history needs a DOM') : _invariant2['default'](false) : undefined;

	  var queryKey = options.queryKey;

	  if (queryKey === undefined || !!queryKey) queryKey = typeof queryKey === 'string' ? queryKey : DefaultQueryKey;

	  function getCurrentLocation() {
	    var path = _DOMUtils.getHashPath();

	    var key = undefined,
	        state = undefined;
	    if (queryKey) {
	      key = getQueryStringValueFromPath(path, queryKey);
	      path = stripQueryStringValueFromPath(path, queryKey);

	      if (key) {
	        state = _DOMStateStorage.readState(key);
	      } else {
	        state = null;
	        key = history.createKey();
	        _DOMUtils.replaceHashPath(addQueryStringValueToPath(path, queryKey, key));
	      }
	    } else {
	      key = state = null;
	    }

	    var location = _PathUtils.parsePath(path);

	    return history.createLocation(_extends({}, location, { state: state }), undefined, key);
	  }

	  function startHashChangeListener(_ref) {
	    var transitionTo = _ref.transitionTo;

	    function hashChangeListener() {
	      if (!ensureSlash()) return; // Always make sure hashes are preceeded with a /.

	      transitionTo(getCurrentLocation());
	    }

	    ensureSlash();
	    _DOMUtils.addEventListener(window, 'hashchange', hashChangeListener);

	    return function () {
	      _DOMUtils.removeEventListener(window, 'hashchange', hashChangeListener);
	    };
	  }

	  function finishTransition(location) {
	    var basename = location.basename;
	    var pathname = location.pathname;
	    var search = location.search;
	    var state = location.state;
	    var action = location.action;
	    var key = location.key;

	    if (action === _Actions.POP) return; // Nothing to do.

	    var path = (basename || '') + pathname + search;

	    if (queryKey) {
	      path = addQueryStringValueToPath(path, queryKey, key);
	      _DOMStateStorage.saveState(key, state);
	    } else {
	      // Drop key and state.
	      location.key = location.state = null;
	    }

	    var currentHash = _DOMUtils.getHashPath();

	    if (action === _Actions.PUSH) {
	      if (currentHash !== path) {
	        window.location.hash = path;
	      } else {
	        process.env.NODE_ENV !== 'production' ? _warning2['default'](false, 'You cannot PUSH the same path using hash history') : undefined;
	      }
	    } else if (currentHash !== path) {
	      // REPLACE
	      _DOMUtils.replaceHashPath(path);
	    }
	  }

	  var history = _createDOMHistory2['default'](_extends({}, options, {
	    getCurrentLocation: getCurrentLocation,
	    finishTransition: finishTransition,
	    saveState: _DOMStateStorage.saveState
	  }));

	  var listenerCount = 0,
	      stopHashChangeListener = undefined;

	  function listenBefore(listener) {
	    if (++listenerCount === 1) stopHashChangeListener = startHashChangeListener(history);

	    var unlisten = history.listenBefore(listener);

	    return function () {
	      unlisten();

	      if (--listenerCount === 0) stopHashChangeListener();
	    };
	  }

	  function listen(listener) {
	    if (++listenerCount === 1) stopHashChangeListener = startHashChangeListener(history);

	    var unlisten = history.listen(listener);

	    return function () {
	      unlisten();

	      if (--listenerCount === 0) stopHashChangeListener();
	    };
	  }

	  function push(location) {
	    process.env.NODE_ENV !== 'production' ? _warning2['default'](queryKey || location.state == null, 'You cannot use state without a queryKey it will be dropped') : undefined;

	    history.push(location);
	  }

	  function replace(location) {
	    process.env.NODE_ENV !== 'production' ? _warning2['default'](queryKey || location.state == null, 'You cannot use state without a queryKey it will be dropped') : undefined;

	    history.replace(location);
	  }

	  var goIsSupportedWithoutReload = _DOMUtils.supportsGoWithoutReloadUsingHash();

	  function go(n) {
	    process.env.NODE_ENV !== 'production' ? _warning2['default'](goIsSupportedWithoutReload, 'Hash history go(n) causes a full page reload in this browser') : undefined;

	    history.go(n);
	  }

	  function createHref(path) {
	    return '#' + history.createHref(path);
	  }

	  // deprecated
	  function registerTransitionHook(hook) {
	    if (++listenerCount === 1) stopHashChangeListener = startHashChangeListener(history);

	    history.registerTransitionHook(hook);
	  }

	  // deprecated
	  function unregisterTransitionHook(hook) {
	    history.unregisterTransitionHook(hook);

	    if (--listenerCount === 0) stopHashChangeListener();
	  }

	  // deprecated
	  function pushState(state, path) {
	    process.env.NODE_ENV !== 'production' ? _warning2['default'](queryKey || state == null, 'You cannot use state without a queryKey it will be dropped') : undefined;

	    history.pushState(state, path);
	  }

	  // deprecated
	  function replaceState(state, path) {
	    process.env.NODE_ENV !== 'production' ? _warning2['default'](queryKey || state == null, 'You cannot use state without a queryKey it will be dropped') : undefined;

	    history.replaceState(state, path);
	  }

	  return _extends({}, history, {
	    listenBefore: listenBefore,
	    listen: listen,
	    push: push,
	    replace: replace,
	    go: go,
	    createHref: createHref,

	    registerTransitionHook: registerTransitionHook, // deprecated - warning is in createHistory
	    unregisterTransitionHook: unregisterTransitionHook, // deprecated - warning is in createHistory
	    pushState: pushState, // deprecated - warning is in createHistory
	    replaceState: replaceState // deprecated - warning is in createHistory
	  });
	}

	exports['default'] = createHashHistory;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 634 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = function() {};

	if (process.env.NODE_ENV !== 'production') {
	  warning = function(condition, format, args) {
	    var len = arguments.length;
	    args = new Array(len > 2 ? len - 2 : 0);
	    for (var key = 2; key < len; key++) {
	      args[key - 2] = arguments[key];
	    }
	    if (format === undefined) {
	      throw new Error(
	        '`warning(condition, format, ...args)` requires a warning ' +
	        'message argument'
	      );
	    }

	    if (format.length < 10 || (/^[s\W]*$/).test(format)) {
	      throw new Error(
	        'The warning format should be able to uniquely identify this ' +
	        'warning. Please, use a more descriptive format than: ' + format
	      );
	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' +
	        format.replace(/%s/g, function() {
	          return args[argIndex++];
	        });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch(x) {}
	    }
	  };
	}

	module.exports = warning;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 635 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var invariant = function(condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	module.exports = invariant;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 636 */
/***/ function(module, exports) {

	/**
	 * Indicates that navigation was caused by a call to history.push.
	 */
	'use strict';

	exports.__esModule = true;
	var PUSH = 'PUSH';

	exports.PUSH = PUSH;
	/**
	 * Indicates that navigation was caused by a call to history.replace.
	 */
	var REPLACE = 'REPLACE';

	exports.REPLACE = REPLACE;
	/**
	 * Indicates that navigation was caused by some other action such
	 * as using a browser's back/forward buttons and/or manually manipulating
	 * the URL in a browser's location bar. This is the default.
	 *
	 * See https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate
	 * for more information.
	 */
	var POP = 'POP';

	exports.POP = POP;
	exports['default'] = {
	  PUSH: PUSH,
	  REPLACE: REPLACE,
	  POP: POP
	};

/***/ },
/* 637 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports.extractPath = extractPath;
	exports.parsePath = parsePath;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(634);

	var _warning2 = _interopRequireDefault(_warning);

	function extractPath(string) {
	  var match = string.match(/^https?:\/\/[^\/]*/);

	  if (match == null) return string;

	  return string.substring(match[0].length);
	}

	function parsePath(path) {
	  var pathname = extractPath(path);
	  var search = '';
	  var hash = '';

	  process.env.NODE_ENV !== 'production' ? _warning2['default'](path === pathname, 'A path must be pathname + search + hash only, not a fully qualified URL like "%s"', path) : undefined;

	  var hashIndex = pathname.indexOf('#');
	  if (hashIndex !== -1) {
	    hash = pathname.substring(hashIndex);
	    pathname = pathname.substring(0, hashIndex);
	  }

	  var searchIndex = pathname.indexOf('?');
	  if (searchIndex !== -1) {
	    search = pathname.substring(searchIndex);
	    pathname = pathname.substring(0, searchIndex);
	  }

	  if (pathname === '') pathname = '/';

	  return {
	    pathname: pathname,
	    search: search,
	    hash: hash
	  };
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 638 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
	exports.canUseDOM = canUseDOM;

/***/ },
/* 639 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.addEventListener = addEventListener;
	exports.removeEventListener = removeEventListener;
	exports.getHashPath = getHashPath;
	exports.replaceHashPath = replaceHashPath;
	exports.getWindowPath = getWindowPath;
	exports.go = go;
	exports.getUserConfirmation = getUserConfirmation;
	exports.supportsHistory = supportsHistory;
	exports.supportsGoWithoutReloadUsingHash = supportsGoWithoutReloadUsingHash;

	function addEventListener(node, event, listener) {
	  if (node.addEventListener) {
	    node.addEventListener(event, listener, false);
	  } else {
	    node.attachEvent('on' + event, listener);
	  }
	}

	function removeEventListener(node, event, listener) {
	  if (node.removeEventListener) {
	    node.removeEventListener(event, listener, false);
	  } else {
	    node.detachEvent('on' + event, listener);
	  }
	}

	function getHashPath() {
	  // We can't use window.location.hash here because it's not
	  // consistent across browsers - Firefox will pre-decode it!
	  return window.location.href.split('#')[1] || '';
	}

	function replaceHashPath(path) {
	  window.location.replace(window.location.pathname + window.location.search + '#' + path);
	}

	function getWindowPath() {
	  return window.location.pathname + window.location.search + window.location.hash;
	}

	function go(n) {
	  if (n) window.history.go(n);
	}

	function getUserConfirmation(message, callback) {
	  callback(window.confirm(message));
	}

	/**
	 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
	 *
	 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
	 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
	 * changed to avoid false negatives for Windows Phones: https://github.com/rackt/react-router/issues/586
	 */

	function supportsHistory() {
	  var ua = navigator.userAgent;
	  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) {
	    return false;
	  }
	  return window.history && 'pushState' in window.history;
	}

	/**
	 * Returns false if using go(n) with hash history causes a full page reload.
	 */

	function supportsGoWithoutReloadUsingHash() {
	  var ua = navigator.userAgent;
	  return ua.indexOf('Firefox') === -1;
	}

/***/ },
/* 640 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/*eslint-disable no-empty */
	'use strict';

	exports.__esModule = true;
	exports.saveState = saveState;
	exports.readState = readState;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(634);

	var _warning2 = _interopRequireDefault(_warning);

	var KeyPrefix = '@@History/';
	var QuotaExceededErrors = ['QuotaExceededError', 'QUOTA_EXCEEDED_ERR'];

	var SecurityError = 'SecurityError';

	function createKey(key) {
	  return KeyPrefix + key;
	}

	function saveState(key, state) {
	  try {
	    if (state == null) {
	      window.sessionStorage.removeItem(createKey(key));
	    } else {
	      window.sessionStorage.setItem(createKey(key), JSON.stringify(state));
	    }
	  } catch (error) {
	    if (error.name === SecurityError) {
	      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any
	      // attempt to access window.sessionStorage.
	      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to save state; sessionStorage is not available due to security settings') : undefined;

	      return;
	    }

	    if (QuotaExceededErrors.indexOf(error.name) >= 0 && window.sessionStorage.length === 0) {
	      // Safari "private mode" throws QuotaExceededError.
	      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to save state; sessionStorage is not available in Safari private mode') : undefined;

	      return;
	    }

	    throw error;
	  }
	}

	function readState(key) {
	  var json = undefined;
	  try {
	    json = window.sessionStorage.getItem(createKey(key));
	  } catch (error) {
	    if (error.name === SecurityError) {
	      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any
	      // attempt to access window.sessionStorage.
	      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to read state; sessionStorage is not available due to security settings') : undefined;

	      return null;
	    }
	  }

	  if (json) {
	    try {
	      return JSON.parse(json);
	    } catch (error) {
	      // Ignore invalid JSON.
	    }
	  }

	  return null;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 641 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _invariant = __webpack_require__(635);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _ExecutionEnvironment = __webpack_require__(638);

	var _DOMUtils = __webpack_require__(639);

	var _createHistory = __webpack_require__(642);

	var _createHistory2 = _interopRequireDefault(_createHistory);

	function createDOMHistory(options) {
	  var history = _createHistory2['default'](_extends({
	    getUserConfirmation: _DOMUtils.getUserConfirmation
	  }, options, {
	    go: _DOMUtils.go
	  }));

	  function listen(listener) {
	    !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'DOM history needs a DOM') : _invariant2['default'](false) : undefined;

	    return history.listen(listener);
	  }

	  return _extends({}, history, {
	    listen: listen
	  });
	}

	exports['default'] = createDOMHistory;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 642 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(634);

	var _warning2 = _interopRequireDefault(_warning);

	var _deepEqual = __webpack_require__(643);

	var _deepEqual2 = _interopRequireDefault(_deepEqual);

	var _PathUtils = __webpack_require__(637);

	var _AsyncUtils = __webpack_require__(646);

	var _Actions = __webpack_require__(636);

	var _createLocation2 = __webpack_require__(647);

	var _createLocation3 = _interopRequireDefault(_createLocation2);

	var _runTransitionHook = __webpack_require__(648);

	var _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);

	var _deprecate = __webpack_require__(649);

	var _deprecate2 = _interopRequireDefault(_deprecate);

	function createRandomKey(length) {
	  return Math.random().toString(36).substr(2, length);
	}

	function locationsAreEqual(a, b) {
	  return a.pathname === b.pathname && a.search === b.search &&
	  //a.action === b.action && // Different action !== location change.
	  a.key === b.key && _deepEqual2['default'](a.state, b.state);
	}

	var DefaultKeyLength = 6;

	function createHistory() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	  var getCurrentLocation = options.getCurrentLocation;
	  var finishTransition = options.finishTransition;
	  var saveState = options.saveState;
	  var go = options.go;
	  var getUserConfirmation = options.getUserConfirmation;
	  var keyLength = options.keyLength;

	  if (typeof keyLength !== 'number') keyLength = DefaultKeyLength;

	  var transitionHooks = [];

	  function listenBefore(hook) {
	    transitionHooks.push(hook);

	    return function () {
	      transitionHooks = transitionHooks.filter(function (item) {
	        return item !== hook;
	      });
	    };
	  }

	  var allKeys = [];
	  var changeListeners = [];
	  var location = undefined;

	  function getCurrent() {
	    if (pendingLocation && pendingLocation.action === _Actions.POP) {
	      return allKeys.indexOf(pendingLocation.key);
	    } else if (location) {
	      return allKeys.indexOf(location.key);
	    } else {
	      return -1;
	    }
	  }

	  function updateLocation(newLocation) {
	    var current = getCurrent();

	    location = newLocation;

	    if (location.action === _Actions.PUSH) {
	      allKeys = [].concat(allKeys.slice(0, current + 1), [location.key]);
	    } else if (location.action === _Actions.REPLACE) {
	      allKeys[current] = location.key;
	    }

	    changeListeners.forEach(function (listener) {
	      listener(location);
	    });
	  }

	  function listen(listener) {
	    changeListeners.push(listener);

	    if (location) {
	      listener(location);
	    } else {
	      var _location = getCurrentLocation();
	      allKeys = [_location.key];
	      updateLocation(_location);
	    }

	    return function () {
	      changeListeners = changeListeners.filter(function (item) {
	        return item !== listener;
	      });
	    };
	  }

	  function confirmTransitionTo(location, callback) {
	    _AsyncUtils.loopAsync(transitionHooks.length, function (index, next, done) {
	      _runTransitionHook2['default'](transitionHooks[index], location, function (result) {
	        if (result != null) {
	          done(result);
	        } else {
	          next();
	        }
	      });
	    }, function (message) {
	      if (getUserConfirmation && typeof message === 'string') {
	        getUserConfirmation(message, function (ok) {
	          callback(ok !== false);
	        });
	      } else {
	        callback(message !== false);
	      }
	    });
	  }

	  var pendingLocation = undefined;

	  function transitionTo(nextLocation) {
	    if (location && locationsAreEqual(location, nextLocation)) return; // Nothing to do.

	    pendingLocation = nextLocation;

	    confirmTransitionTo(nextLocation, function (ok) {
	      if (pendingLocation !== nextLocation) return; // Transition was interrupted.

	      if (ok) {
	        // treat PUSH to current path like REPLACE to be consistent with browsers
	        if (nextLocation.action === _Actions.PUSH) {
	          var prevPath = createPath(location);
	          var nextPath = createPath(nextLocation);

	          if (nextPath === prevPath && _deepEqual2['default'](location.state, nextLocation.state)) nextLocation.action = _Actions.REPLACE;
	        }

	        if (finishTransition(nextLocation) !== false) updateLocation(nextLocation);
	      } else if (location && nextLocation.action === _Actions.POP) {
	        var prevIndex = allKeys.indexOf(location.key);
	        var nextIndex = allKeys.indexOf(nextLocation.key);

	        if (prevIndex !== -1 && nextIndex !== -1) go(prevIndex - nextIndex); // Restore the URL.
	      }
	    });
	  }

	  function push(location) {
	    transitionTo(createLocation(location, _Actions.PUSH, createKey()));
	  }

	  function replace(location) {
	    transitionTo(createLocation(location, _Actions.REPLACE, createKey()));
	  }

	  function goBack() {
	    go(-1);
	  }

	  function goForward() {
	    go(1);
	  }

	  function createKey() {
	    return createRandomKey(keyLength);
	  }

	  function createPath(location) {
	    if (location == null || typeof location === 'string') return location;

	    var pathname = location.pathname;
	    var search = location.search;
	    var hash = location.hash;

	    var result = pathname;

	    if (search) result += search;

	    if (hash) result += hash;

	    return result;
	  }

	  function createHref(location) {
	    return createPath(location);
	  }

	  function createLocation(location, action) {
	    var key = arguments.length <= 2 || arguments[2] === undefined ? createKey() : arguments[2];

	    if (typeof action === 'object') {
	      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, 'The state (2nd) argument to history.createLocation is deprecated; use a ' + 'location descriptor instead') : undefined;

	      if (typeof location === 'string') location = _PathUtils.parsePath(location);

	      location = _extends({}, location, { state: action });

	      action = key;
	      key = arguments[3] || createKey();
	    }

	    return _createLocation3['default'](location, action, key);
	  }

	  // deprecated
	  function setState(state) {
	    if (location) {
	      updateLocationState(location, state);
	      updateLocation(location);
	    } else {
	      updateLocationState(getCurrentLocation(), state);
	    }
	  }

	  function updateLocationState(location, state) {
	    location.state = _extends({}, location.state, state);
	    saveState(location.key, location.state);
	  }

	  // deprecated
	  function registerTransitionHook(hook) {
	    if (transitionHooks.indexOf(hook) === -1) transitionHooks.push(hook);
	  }

	  // deprecated
	  function unregisterTransitionHook(hook) {
	    transitionHooks = transitionHooks.filter(function (item) {
	      return item !== hook;
	    });
	  }

	  // deprecated
	  function pushState(state, path) {
	    if (typeof path === 'string') path = _PathUtils.parsePath(path);

	    push(_extends({ state: state }, path));
	  }

	  // deprecated
	  function replaceState(state, path) {
	    if (typeof path === 'string') path = _PathUtils.parsePath(path);

	    replace(_extends({ state: state }, path));
	  }

	  return {
	    listenBefore: listenBefore,
	    listen: listen,
	    transitionTo: transitionTo,
	    push: push,
	    replace: replace,
	    go: go,
	    goBack: goBack,
	    goForward: goForward,
	    createKey: createKey,
	    createPath: createPath,
	    createHref: createHref,
	    createLocation: createLocation,

	    setState: _deprecate2['default'](setState, 'setState is deprecated; use location.key to save state instead'),
	    registerTransitionHook: _deprecate2['default'](registerTransitionHook, 'registerTransitionHook is deprecated; use listenBefore instead'),
	    unregisterTransitionHook: _deprecate2['default'](unregisterTransitionHook, 'unregisterTransitionHook is deprecated; use the callback returned from listenBefore instead'),
	    pushState: _deprecate2['default'](pushState, 'pushState is deprecated; use push instead'),
	    replaceState: _deprecate2['default'](replaceState, 'replaceState is deprecated; use replace instead')
	  };
	}

	exports['default'] = createHistory;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 643 */
/***/ function(module, exports, __webpack_require__) {

	var pSlice = Array.prototype.slice;
	var objectKeys = __webpack_require__(644);
	var isArguments = __webpack_require__(645);

	var deepEqual = module.exports = function (actual, expected, opts) {
	  if (!opts) opts = {};
	  // 7.1. All identical values are equivalent, as determined by ===.
	  if (actual === expected) {
	    return true;

	  } else if (actual instanceof Date && expected instanceof Date) {
	    return actual.getTime() === expected.getTime();

	  // 7.3. Other pairs that do not both pass typeof value == 'object',
	  // equivalence is determined by ==.
	  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {
	    return opts.strict ? actual === expected : actual == expected;

	  // 7.4. For all other Object pairs, including Array objects, equivalence is
	  // determined by having the same number of owned properties (as verified
	  // with Object.prototype.hasOwnProperty.call), the same set of keys
	  // (although not necessarily the same order), equivalent values for every
	  // corresponding key, and an identical 'prototype' property. Note: this
	  // accounts for both named and indexed properties on Arrays.
	  } else {
	    return objEquiv(actual, expected, opts);
	  }
	}

	function isUndefinedOrNull(value) {
	  return value === null || value === undefined;
	}

	function isBuffer (x) {
	  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;
	  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
	    return false;
	  }
	  if (x.length > 0 && typeof x[0] !== 'number') return false;
	  return true;
	}

	function objEquiv(a, b, opts) {
	  var i, key;
	  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
	    return false;
	  // an identical 'prototype' property.
	  if (a.prototype !== b.prototype) return false;
	  //~~~I've managed to break Object.keys through screwy arguments passing.
	  //   Converting to array solves the problem.
	  if (isArguments(a)) {
	    if (!isArguments(b)) {
	      return false;
	    }
	    a = pSlice.call(a);
	    b = pSlice.call(b);
	    return deepEqual(a, b, opts);
	  }
	  if (isBuffer(a)) {
	    if (!isBuffer(b)) {
	      return false;
	    }
	    if (a.length !== b.length) return false;
	    for (i = 0; i < a.length; i++) {
	      if (a[i] !== b[i]) return false;
	    }
	    return true;
	  }
	  try {
	    var ka = objectKeys(a),
	        kb = objectKeys(b);
	  } catch (e) {//happens when one is a string literal and the other isn't
	    return false;
	  }
	  // having the same number of owned properties (keys incorporates
	  // hasOwnProperty)
	  if (ka.length != kb.length)
	    return false;
	  //the same set of keys (although not necessarily the same order),
	  ka.sort();
	  kb.sort();
	  //~~~cheap key test
	  for (i = ka.length - 1; i >= 0; i--) {
	    if (ka[i] != kb[i])
	      return false;
	  }
	  //equivalent values for every corresponding key, and
	  //~~~possibly expensive deep test
	  for (i = ka.length - 1; i >= 0; i--) {
	    key = ka[i];
	    if (!deepEqual(a[key], b[key], opts)) return false;
	  }
	  return typeof a === typeof b;
	}


/***/ },
/* 644 */
/***/ function(module, exports) {

	exports = module.exports = typeof Object.keys === 'function'
	  ? Object.keys : shim;

	exports.shim = shim;
	function shim (obj) {
	  var keys = [];
	  for (var key in obj) keys.push(key);
	  return keys;
	}


/***/ },
/* 645 */
/***/ function(module, exports) {

	var supportsArgumentsClass = (function(){
	  return Object.prototype.toString.call(arguments)
	})() == '[object Arguments]';

	exports = module.exports = supportsArgumentsClass ? supported : unsupported;

	exports.supported = supported;
	function supported(object) {
	  return Object.prototype.toString.call(object) == '[object Arguments]';
	};

	exports.unsupported = unsupported;
	function unsupported(object){
	  return object &&
	    typeof object == 'object' &&
	    typeof object.length == 'number' &&
	    Object.prototype.hasOwnProperty.call(object, 'callee') &&
	    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||
	    false;
	};


/***/ },
/* 646 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	var _slice = Array.prototype.slice;
	exports.loopAsync = loopAsync;

	function loopAsync(turns, work, callback) {
	  var currentTurn = 0,
	      isDone = false;
	  var sync = false,
	      hasNext = false,
	      doneArgs = undefined;

	  function done() {
	    isDone = true;
	    if (sync) {
	      // Iterate instead of recursing if possible.
	      doneArgs = [].concat(_slice.call(arguments));
	      return;
	    }

	    callback.apply(this, arguments);
	  }

	  function next() {
	    if (isDone) {
	      return;
	    }

	    hasNext = true;
	    if (sync) {
	      // Iterate instead of recursing if possible.
	      return;
	    }

	    sync = true;

	    while (!isDone && currentTurn < turns && hasNext) {
	      hasNext = false;
	      work.call(this, currentTurn++, next, done);
	    }

	    sync = false;

	    if (isDone) {
	      // This means the loop finished synchronously.
	      callback.apply(this, doneArgs);
	      return;
	    }

	    if (currentTurn >= turns && hasNext) {
	      isDone = true;
	      callback();
	    }
	  }

	  next();
	}

/***/ },
/* 647 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(634);

	var _warning2 = _interopRequireDefault(_warning);

	var _Actions = __webpack_require__(636);

	var _PathUtils = __webpack_require__(637);

	function createLocation() {
	  var location = arguments.length <= 0 || arguments[0] === undefined ? '/' : arguments[0];
	  var action = arguments.length <= 1 || arguments[1] === undefined ? _Actions.POP : arguments[1];
	  var key = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

	  var _fourthArg = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];

	  if (typeof location === 'string') location = _PathUtils.parsePath(location);

	  if (typeof action === 'object') {
	    process.env.NODE_ENV !== 'production' ? _warning2['default'](false, 'The state (2nd) argument to createLocation is deprecated; use a ' + 'location descriptor instead') : undefined;

	    location = _extends({}, location, { state: action });

	    action = key || _Actions.POP;
	    key = _fourthArg;
	  }

	  var pathname = location.pathname || '/';
	  var search = location.search || '';
	  var hash = location.hash || '';
	  var state = location.state || null;

	  return {
	    pathname: pathname,
	    search: search,
	    hash: hash,
	    state: state,
	    action: action,
	    key: key
	  };
	}

	exports['default'] = createLocation;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 648 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(634);

	var _warning2 = _interopRequireDefault(_warning);

	function runTransitionHook(hook, location, callback) {
	  var result = hook(location, callback);

	  if (hook.length < 2) {
	    // Assume the hook runs synchronously and automatically
	    // call the callback with the return value.
	    callback(result);
	  } else {
	    process.env.NODE_ENV !== 'production' ? _warning2['default'](result === undefined, 'You should not "return" in a transition hook with a callback argument; call the callback instead') : undefined;
	  }
	}

	exports['default'] = runTransitionHook;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 649 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(634);

	var _warning2 = _interopRequireDefault(_warning);

	function deprecate(fn, message) {
	  return function () {
	    process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] ' + message) : undefined;
	    return fn.apply(this, arguments);
	  };
	}

	exports['default'] = deprecate;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 650 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(634);

	var _warning2 = _interopRequireDefault(_warning);

	var _queryString = __webpack_require__(651);

	var _runTransitionHook = __webpack_require__(648);

	var _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);

	var _PathUtils = __webpack_require__(637);

	var _deprecate = __webpack_require__(649);

	var _deprecate2 = _interopRequireDefault(_deprecate);

	var SEARCH_BASE_KEY = '$searchBase';

	function defaultStringifyQuery(query) {
	  return _queryString.stringify(query).replace(/%20/g, '+');
	}

	var defaultParseQueryString = _queryString.parse;

	function isNestedObject(object) {
	  for (var p in object) {
	    if (Object.prototype.hasOwnProperty.call(object, p) && typeof object[p] === 'object' && !Array.isArray(object[p]) && object[p] !== null) return true;
	  }return false;
	}

	/**
	 * Returns a new createHistory function that may be used to create
	 * history objects that know how to handle URL queries.
	 */
	function useQueries(createHistory) {
	  return function () {
	    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    var history = createHistory(options);

	    var stringifyQuery = options.stringifyQuery;
	    var parseQueryString = options.parseQueryString;

	    if (typeof stringifyQuery !== 'function') stringifyQuery = defaultStringifyQuery;

	    if (typeof parseQueryString !== 'function') parseQueryString = defaultParseQueryString;

	    function addQuery(location) {
	      if (location.query == null) {
	        var search = location.search;

	        location.query = parseQueryString(search.substring(1));
	        location[SEARCH_BASE_KEY] = { search: search, searchBase: '' };
	      }

	      // TODO: Instead of all the book-keeping here, this should just strip the
	      // stringified query from the search.

	      return location;
	    }

	    function appendQuery(location, query) {
	      var _extends2;

	      var searchBaseSpec = location[SEARCH_BASE_KEY];
	      var queryString = query ? stringifyQuery(query) : '';
	      if (!searchBaseSpec && !queryString) {
	        return location;
	      }

	      process.env.NODE_ENV !== 'production' ? _warning2['default'](stringifyQuery !== defaultStringifyQuery || !isNestedObject(query), 'useQueries does not stringify nested query objects by default; ' + 'use a custom stringifyQuery function') : undefined;

	      if (typeof location === 'string') location = _PathUtils.parsePath(location);

	      var searchBase = undefined;
	      if (searchBaseSpec && location.search === searchBaseSpec.search) {
	        searchBase = searchBaseSpec.searchBase;
	      } else {
	        searchBase = location.search || '';
	      }

	      var search = searchBase;
	      if (queryString) {
	        search += (search ? '&' : '?') + queryString;
	      }

	      return _extends({}, location, (_extends2 = {
	        search: search
	      }, _extends2[SEARCH_BASE_KEY] = { search: search, searchBase: searchBase }, _extends2));
	    }

	    // Override all read methods with query-aware versions.
	    function listenBefore(hook) {
	      return history.listenBefore(function (location, callback) {
	        _runTransitionHook2['default'](hook, addQuery(location), callback);
	      });
	    }

	    function listen(listener) {
	      return history.listen(function (location) {
	        listener(addQuery(location));
	      });
	    }

	    // Override all write methods with query-aware versions.
	    function push(location) {
	      history.push(appendQuery(location, location.query));
	    }

	    function replace(location) {
	      history.replace(appendQuery(location, location.query));
	    }

	    function createPath(location, query) {
	      process.env.NODE_ENV !== 'production' ? _warning2['default'](!query, 'the query argument to createPath is deprecated; use a location descriptor instead') : undefined;

	      return history.createPath(appendQuery(location, query || location.query));
	    }

	    function createHref(location, query) {
	      process.env.NODE_ENV !== 'production' ? _warning2['default'](!query, 'the query argument to createHref is deprecated; use a location descriptor instead') : undefined;

	      return history.createHref(appendQuery(location, query || location.query));
	    }

	    function createLocation(location) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      var fullLocation = history.createLocation.apply(history, [appendQuery(location, location.query)].concat(args));
	      if (location.query) {
	        fullLocation.query = location.query;
	      }
	      return addQuery(fullLocation);
	    }

	    // deprecated
	    function pushState(state, path, query) {
	      if (typeof path === 'string') path = _PathUtils.parsePath(path);

	      push(_extends({ state: state }, path, { query: query }));
	    }

	    // deprecated
	    function replaceState(state, path, query) {
	      if (typeof path === 'string') path = _PathUtils.parsePath(path);

	      replace(_extends({ state: state }, path, { query: query }));
	    }

	    return _extends({}, history, {
	      listenBefore: listenBefore,
	      listen: listen,
	      push: push,
	      replace: replace,
	      createPath: createPath,
	      createHref: createHref,
	      createLocation: createLocation,

	      pushState: _deprecate2['default'](pushState, 'pushState is deprecated; use push instead'),
	      replaceState: _deprecate2['default'](replaceState, 'replaceState is deprecated; use replace instead')
	    });
	  };
	}

	exports['default'] = useQueries;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 651 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var strictUriEncode = __webpack_require__(652);

	exports.extract = function (str) {
		return str.split('?')[1] || '';
	};

	exports.parse = function (str) {
		if (typeof str !== 'string') {
			return {};
		}

		str = str.trim().replace(/^(\?|#|&)/, '');

		if (!str) {
			return {};
		}

		return str.split('&').reduce(function (ret, param) {
			var parts = param.replace(/\+/g, ' ').split('=');
			// Firefox (pre 40) decodes `%3D` to `=`
			// https://github.com/sindresorhus/query-string/pull/37
			var key = parts.shift();
			var val = parts.length > 0 ? parts.join('=') : undefined;

			key = decodeURIComponent(key);

			// missing `=` should be `null`:
			// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
			val = val === undefined ? null : decodeURIComponent(val);

			if (!ret.hasOwnProperty(key)) {
				ret[key] = val;
			} else if (Array.isArray(ret[key])) {
				ret[key].push(val);
			} else {
				ret[key] = [ret[key], val];
			}

			return ret;
		}, {});
	};

	exports.stringify = function (obj) {
		return obj ? Object.keys(obj).sort().map(function (key) {
			var val = obj[key];

			if (val === undefined) {
				return '';
			}

			if (val === null) {
				return key;
			}

			if (Array.isArray(val)) {
				return val.slice().sort().map(function (val2) {
					return strictUriEncode(key) + '=' + strictUriEncode(val2);
				}).join('&');
			}

			return strictUriEncode(key) + '=' + strictUriEncode(val);
		}).filter(function (x) {
			return x.length > 0;
		}).join('&') : '';
	};


/***/ },
/* 652 */
/***/ function(module, exports) {

	'use strict';
	module.exports = function (str) {
		return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
			return '%' + c.charCodeAt(0).toString(16).toUpperCase();
		});
	};


/***/ },
/* 653 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports['default'] = createTransitionManager;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _routerWarning = __webpack_require__(654);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _historyLibActions = __webpack_require__(636);

	var _computeChangedRoutes2 = __webpack_require__(656);

	var _computeChangedRoutes3 = _interopRequireDefault(_computeChangedRoutes2);

	var _TransitionUtils = __webpack_require__(658);

	var _isActive2 = __webpack_require__(660);

	var _isActive3 = _interopRequireDefault(_isActive2);

	var _getComponents = __webpack_require__(661);

	var _getComponents2 = _interopRequireDefault(_getComponents);

	var _matchRoutes = __webpack_require__(663);

	var _matchRoutes2 = _interopRequireDefault(_matchRoutes);

	function hasAnyProperties(object) {
	  for (var p in object) {
	    if (Object.prototype.hasOwnProperty.call(object, p)) return true;
	  }return false;
	}

	function createTransitionManager(history, routes) {
	  var state = {};

	  // Signature should be (location, indexOnly), but needs to support (path,
	  // query, indexOnly)
	  function isActive(location) {
	    var indexOnlyOrDeprecatedQuery = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
	    var deprecatedIndexOnly = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

	    var indexOnly = undefined;
	    if (indexOnlyOrDeprecatedQuery && indexOnlyOrDeprecatedQuery !== true || deprecatedIndexOnly !== null) {
	      process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, '`isActive(pathname, query, indexOnly) is deprecated; use `isActive(location, indexOnly)` with a location descriptor instead. http://tiny.cc/router-isActivedeprecated') : undefined;
	      location = { pathname: location, query: indexOnlyOrDeprecatedQuery };
	      indexOnly = deprecatedIndexOnly || false;
	    } else {
	      location = history.createLocation(location);
	      indexOnly = indexOnlyOrDeprecatedQuery;
	    }

	    return _isActive3['default'](location, indexOnly, state.location, state.routes, state.params);
	  }

	  function createLocationFromRedirectInfo(location) {
	    return history.createLocation(location, _historyLibActions.REPLACE);
	  }

	  var partialNextState = undefined;

	  function match(location, callback) {
	    if (partialNextState && partialNextState.location === location) {
	      // Continue from where we left off.
	      finishMatch(partialNextState, callback);
	    } else {
	      _matchRoutes2['default'](routes, location, function (error, nextState) {
	        if (error) {
	          callback(error);
	        } else if (nextState) {
	          finishMatch(_extends({}, nextState, { location: location }), callback);
	        } else {
	          callback();
	        }
	      });
	    }
	  }

	  function finishMatch(nextState, callback) {
	    var _computeChangedRoutes = _computeChangedRoutes3['default'](state, nextState);

	    var leaveRoutes = _computeChangedRoutes.leaveRoutes;
	    var changeRoutes = _computeChangedRoutes.changeRoutes;
	    var enterRoutes = _computeChangedRoutes.enterRoutes;

	    _TransitionUtils.runLeaveHooks(leaveRoutes);

	    // Tear down confirmation hooks for left routes
	    leaveRoutes.filter(function (route) {
	      return enterRoutes.indexOf(route) === -1;
	    }).forEach(removeListenBeforeHooksForRoute);

	    // change and enter hooks are run in series
	    _TransitionUtils.runChangeHooks(changeRoutes, state, nextState, function (error, redirectInfo) {
	      if (error || redirectInfo) return handleErrorOrRedirect(error, redirectInfo);

	      _TransitionUtils.runEnterHooks(enterRoutes, nextState, finishEnterHooks);
	    });

	    function finishEnterHooks(error, redirectInfo) {
	      if (error || redirectInfo) return handleErrorOrRedirect(error, redirectInfo);

	      // TODO: Fetch components after state is updated.
	      _getComponents2['default'](nextState, function (error, components) {
	        if (error) {
	          callback(error);
	        } else {
	          // TODO: Make match a pure function and have some other API
	          // for "match and update state".
	          callback(null, null, state = _extends({}, nextState, { components: components }));
	        }
	      });
	    }

	    function handleErrorOrRedirect(error, redirectInfo) {
	      if (error) callback(error);else callback(null, createLocationFromRedirectInfo(redirectInfo));
	    }
	  }

	  var RouteGuid = 1;

	  function getRouteID(route) {
	    var create = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

	    return route.__id__ || create && (route.__id__ = RouteGuid++);
	  }

	  var RouteHooks = Object.create(null);

	  function getRouteHooksForRoutes(routes) {
	    return routes.reduce(function (hooks, route) {
	      hooks.push.apply(hooks, RouteHooks[getRouteID(route)]);
	      return hooks;
	    }, []);
	  }

	  function transitionHook(location, callback) {
	    _matchRoutes2['default'](routes, location, function (error, nextState) {
	      if (nextState == null) {
	        // TODO: We didn't actually match anything, but hang
	        // onto error/nextState so we don't have to matchRoutes
	        // again in the listen callback.
	        callback();
	        return;
	      }

	      // Cache some state here so we don't have to
	      // matchRoutes() again in the listen callback.
	      partialNextState = _extends({}, nextState, { location: location });

	      var hooks = getRouteHooksForRoutes(_computeChangedRoutes3['default'](state, partialNextState).leaveRoutes);

	      var result = undefined;
	      for (var i = 0, len = hooks.length; result == null && i < len; ++i) {
	        // Passing the location arg here indicates to
	        // the user that this is a transition hook.
	        result = hooks[i](location);
	      }

	      callback(result);
	    });
	  }

	  /* istanbul ignore next: untestable with Karma */
	  function beforeUnloadHook() {
	    // Synchronously check to see if any route hooks want
	    // to prevent the current window/tab from closing.
	    if (state.routes) {
	      var hooks = getRouteHooksForRoutes(state.routes);

	      var message = undefined;
	      for (var i = 0, len = hooks.length; typeof message !== 'string' && i < len; ++i) {
	        // Passing no args indicates to the user that this is a
	        // beforeunload hook. We don't know the next location.
	        message = hooks[i]();
	      }

	      return message;
	    }
	  }

	  var unlistenBefore = undefined,
	      unlistenBeforeUnload = undefined;

	  function removeListenBeforeHooksForRoute(route) {
	    var routeID = getRouteID(route, false);
	    if (!routeID) {
	      return;
	    }

	    delete RouteHooks[routeID];

	    if (!hasAnyProperties(RouteHooks)) {
	      // teardown transition & beforeunload hooks
	      if (unlistenBefore) {
	        unlistenBefore();
	        unlistenBefore = null;
	      }

	      if (unlistenBeforeUnload) {
	        unlistenBeforeUnload();
	        unlistenBeforeUnload = null;
	      }
	    }
	  }

	  /**
	   * Registers the given hook function to run before leaving the given route.
	   *
	   * During a normal transition, the hook function receives the next location
	   * as its only argument and must return either a) a prompt message to show
	   * the user, to make sure they want to leave the page or b) false, to prevent
	   * the transition.
	   *
	   * During the beforeunload event (in browsers) the hook receives no arguments.
	   * In this case it must return a prompt message to prevent the transition.
	   *
	   * Returns a function that may be used to unbind the listener.
	   */
	  function listenBeforeLeavingRoute(route, hook) {
	    // TODO: Warn if they register for a route that isn't currently
	    // active. They're probably doing something wrong, like re-creating
	    // route objects on every location change.
	    var routeID = getRouteID(route);
	    var hooks = RouteHooks[routeID];

	    if (!hooks) {
	      var thereWereNoRouteHooks = !hasAnyProperties(RouteHooks);

	      RouteHooks[routeID] = [hook];

	      if (thereWereNoRouteHooks) {
	        // setup transition & beforeunload hooks
	        unlistenBefore = history.listenBefore(transitionHook);

	        if (history.listenBeforeUnload) unlistenBeforeUnload = history.listenBeforeUnload(beforeUnloadHook);
	      }
	    } else {
	      if (hooks.indexOf(hook) === -1) {
	        process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, 'adding multiple leave hooks for the same route is deprecated; manage multiple confirmations in your own code instead') : undefined;

	        hooks.push(hook);
	      }
	    }

	    return function () {
	      var hooks = RouteHooks[routeID];

	      if (hooks) {
	        var newHooks = hooks.filter(function (item) {
	          return item !== hook;
	        });

	        if (newHooks.length === 0) {
	          removeListenBeforeHooksForRoute(route);
	        } else {
	          RouteHooks[routeID] = newHooks;
	        }
	      }
	    };
	  }

	  /**
	   * This is the API for stateful environments. As the location
	   * changes, we update state and call the listener. We can also
	   * gracefully handle errors and redirects.
	   */
	  function listen(listener) {
	    // TODO: Only use a single history listener. Otherwise we'll
	    // end up with multiple concurrent calls to match.
	    return history.listen(function (location) {
	      if (state.location === location) {
	        listener(null, state);
	      } else {
	        match(location, function (error, redirectLocation, nextState) {
	          if (error) {
	            listener(error);
	          } else if (redirectLocation) {
	            history.transitionTo(redirectLocation);
	          } else if (nextState) {
	            listener(null, nextState);
	          } else {
	            process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, 'Location "%s" did not match any routes', location.pathname + location.search + location.hash) : undefined;
	          }
	        });
	      }
	    });
	  }

	  return {
	    isActive: isActive,
	    match: match,
	    listenBeforeLeavingRoute: listenBeforeLeavingRoute,
	    listen: listen
	  };
	}

	//export default useRoutes
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 654 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports['default'] = routerWarning;
	exports._resetWarned = _resetWarned;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(655);

	var _warning2 = _interopRequireDefault(_warning);

	var warned = {};

	function routerWarning(falseToWarn, message) {
	  // Only issue deprecation warnings once.
	  if (message.indexOf('deprecated') !== -1) {
	    if (warned[message]) {
	      return;
	    }

	    warned[message] = true;
	  }

	  message = '[react-router] ' + message;

	  for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	    args[_key - 2] = arguments[_key];
	  }

	  process.env.NODE_ENV !== 'production' ? _warning2['default'].apply(undefined, [falseToWarn, message].concat(args)) : undefined;
	}

	function _resetWarned() {
	  warned = {};
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 655 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = function() {};

	if (process.env.NODE_ENV !== 'production') {
	  warning = function(condition, format, args) {
	    var len = arguments.length;
	    args = new Array(len > 2 ? len - 2 : 0);
	    for (var key = 2; key < len; key++) {
	      args[key - 2] = arguments[key];
	    }
	    if (format === undefined) {
	      throw new Error(
	        '`warning(condition, format, ...args)` requires a warning ' +
	        'message argument'
	      );
	    }

	    if (format.length < 10 || (/^[s\W]*$/).test(format)) {
	      throw new Error(
	        'The warning format should be able to uniquely identify this ' +
	        'warning. Please, use a more descriptive format than: ' + format
	      );
	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' +
	        format.replace(/%s/g, function() {
	          return args[argIndex++];
	        });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch(x) {}
	    }
	  };
	}

	module.exports = warning;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 656 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _PatternUtils = __webpack_require__(657);

	function routeParamsChanged(route, prevState, nextState) {
	  if (!route.path) return false;

	  var paramNames = _PatternUtils.getParamNames(route.path);

	  return paramNames.some(function (paramName) {
	    return prevState.params[paramName] !== nextState.params[paramName];
	  });
	}

	/**
	 * Returns an object of { leaveRoutes, changeRoutes, enterRoutes } determined by
	 * the change from prevState to nextState. We leave routes if either
	 * 1) they are not in the next state or 2) they are in the next state
	 * but their params have changed (i.e. /users/123 => /users/456).
	 *
	 * leaveRoutes are ordered starting at the leaf route of the tree
	 * we're leaving up to the common parent route. enterRoutes are ordered
	 * from the top of the tree we're entering down to the leaf route.
	 *
	 * changeRoutes are any routes that didn't leave or enter during
	 * the transition.
	 */
	function computeChangedRoutes(prevState, nextState) {
	  var prevRoutes = prevState && prevState.routes;
	  var nextRoutes = nextState.routes;

	  var leaveRoutes = undefined,
	      changeRoutes = undefined,
	      enterRoutes = undefined;
	  if (prevRoutes) {
	    (function () {
	      var parentIsLeaving = false;
	      leaveRoutes = prevRoutes.filter(function (route) {
	        if (parentIsLeaving) {
	          return true;
	        } else {
	          var isLeaving = nextRoutes.indexOf(route) === -1 || routeParamsChanged(route, prevState, nextState);
	          if (isLeaving) parentIsLeaving = true;
	          return isLeaving;
	        }
	      });

	      // onLeave hooks start at the leaf route.
	      leaveRoutes.reverse();

	      enterRoutes = [];
	      changeRoutes = [];

	      nextRoutes.forEach(function (route) {
	        var isNew = prevRoutes.indexOf(route) === -1;
	        var paramsChanged = leaveRoutes.indexOf(route) !== -1;

	        if (isNew || paramsChanged) enterRoutes.push(route);else changeRoutes.push(route);
	      });
	    })();
	  } else {
	    leaveRoutes = [];
	    changeRoutes = [];
	    enterRoutes = nextRoutes;
	  }

	  return {
	    leaveRoutes: leaveRoutes,
	    changeRoutes: changeRoutes,
	    enterRoutes: enterRoutes
	  };
	}

	exports['default'] = computeChangedRoutes;
	module.exports = exports['default'];

/***/ },
/* 657 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports.compilePattern = compilePattern;
	exports.matchPattern = matchPattern;
	exports.getParamNames = getParamNames;
	exports.getParams = getParams;
	exports.formatPattern = formatPattern;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _invariant = __webpack_require__(635);

	var _invariant2 = _interopRequireDefault(_invariant);

	function escapeRegExp(string) {
	  return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}

	function _compilePattern(pattern) {
	  var regexpSource = '';
	  var paramNames = [];
	  var tokens = [];

	  var match = undefined,
	      lastIndex = 0,
	      matcher = /:([a-zA-Z_$][a-zA-Z0-9_$]*)|\*\*|\*|\(|\)/g;
	  while (match = matcher.exec(pattern)) {
	    if (match.index !== lastIndex) {
	      tokens.push(pattern.slice(lastIndex, match.index));
	      regexpSource += escapeRegExp(pattern.slice(lastIndex, match.index));
	    }

	    if (match[1]) {
	      regexpSource += '([^/]+)';
	      paramNames.push(match[1]);
	    } else if (match[0] === '**') {
	      regexpSource += '(.*)';
	      paramNames.push('splat');
	    } else if (match[0] === '*') {
	      regexpSource += '(.*?)';
	      paramNames.push('splat');
	    } else if (match[0] === '(') {
	      regexpSource += '(?:';
	    } else if (match[0] === ')') {
	      regexpSource += ')?';
	    }

	    tokens.push(match[0]);

	    lastIndex = matcher.lastIndex;
	  }

	  if (lastIndex !== pattern.length) {
	    tokens.push(pattern.slice(lastIndex, pattern.length));
	    regexpSource += escapeRegExp(pattern.slice(lastIndex, pattern.length));
	  }

	  return {
	    pattern: pattern,
	    regexpSource: regexpSource,
	    paramNames: paramNames,
	    tokens: tokens
	  };
	}

	var CompiledPatternsCache = {};

	function compilePattern(pattern) {
	  if (!(pattern in CompiledPatternsCache)) CompiledPatternsCache[pattern] = _compilePattern(pattern);

	  return CompiledPatternsCache[pattern];
	}

	/**
	 * Attempts to match a pattern on the given pathname. Patterns may use
	 * the following special characters:
	 *
	 * - :paramName     Matches a URL segment up to the next /, ?, or #. The
	 *                  captured string is considered a "param"
	 * - ()             Wraps a segment of the URL that is optional
	 * - *              Consumes (non-greedy) all characters up to the next
	 *                  character in the pattern, or to the end of the URL if
	 *                  there is none
	 * - **             Consumes (greedy) all characters up to the next character
	 *                  in the pattern, or to the end of the URL if there is none
	 *
	 * The return value is an object with the following properties:
	 *
	 * - remainingPathname
	 * - paramNames
	 * - paramValues
	 */

	function matchPattern(pattern, pathname) {
	  // Ensure pattern starts with leading slash for consistency with pathname.
	  if (pattern.charAt(0) !== '/') {
	    pattern = '/' + pattern;
	  }

	  var _compilePattern2 = compilePattern(pattern);

	  var regexpSource = _compilePattern2.regexpSource;
	  var paramNames = _compilePattern2.paramNames;
	  var tokens = _compilePattern2.tokens;

	  if (pattern.charAt(pattern.length - 1) !== '/') {
	    regexpSource += '/?'; // Allow optional path separator at end.
	  }

	  // Special-case patterns like '*' for catch-all routes.
	  if (tokens[tokens.length - 1] === '*') {
	    regexpSource += '$';
	  }

	  var match = pathname.match(new RegExp('^' + regexpSource, 'i'));

	  var remainingPathname = undefined,
	      paramValues = undefined;
	  if (match != null) {
	    var matchedPath = match[0];
	    remainingPathname = pathname.substr(matchedPath.length);

	    if (remainingPathname) {
	      // Require that the match ends at a path separator, if we didn't match
	      // the full path, so any remaining pathname is a new path segment.
	      if (matchedPath.charAt(matchedPath.length - 1) !== '/') {
	        return {
	          remainingPathname: null,
	          paramNames: paramNames,
	          paramValues: null
	        };
	      }

	      // If there is a remaining pathname, treat the path separator as part of
	      // the remaining pathname for properly continuing the match.
	      remainingPathname = '/' + remainingPathname;
	    }

	    paramValues = match.slice(1).map(function (v) {
	      return v && decodeURIComponent(v);
	    });
	  } else {
	    remainingPathname = paramValues = null;
	  }

	  return {
	    remainingPathname: remainingPathname,
	    paramNames: paramNames,
	    paramValues: paramValues
	  };
	}

	function getParamNames(pattern) {
	  return compilePattern(pattern).paramNames;
	}

	function getParams(pattern, pathname) {
	  var _matchPattern = matchPattern(pattern, pathname);

	  var paramNames = _matchPattern.paramNames;
	  var paramValues = _matchPattern.paramValues;

	  if (paramValues != null) {
	    return paramNames.reduce(function (memo, paramName, index) {
	      memo[paramName] = paramValues[index];
	      return memo;
	    }, {});
	  }

	  return null;
	}

	/**
	 * Returns a version of the given pattern with params interpolated. Throws
	 * if there is a dynamic segment of the pattern for which there is no param.
	 */

	function formatPattern(pattern, params) {
	  params = params || {};

	  var _compilePattern3 = compilePattern(pattern);

	  var tokens = _compilePattern3.tokens;

	  var parenCount = 0,
	      pathname = '',
	      splatIndex = 0;

	  var token = undefined,
	      paramName = undefined,
	      paramValue = undefined;
	  for (var i = 0, len = tokens.length; i < len; ++i) {
	    token = tokens[i];

	    if (token === '*' || token === '**') {
	      paramValue = Array.isArray(params.splat) ? params.splat[splatIndex++] : params.splat;

	      !(paramValue != null || parenCount > 0) ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Missing splat #%s for path "%s"', splatIndex, pattern) : _invariant2['default'](false) : undefined;

	      if (paramValue != null) pathname += encodeURI(paramValue);
	    } else if (token === '(') {
	      parenCount += 1;
	    } else if (token === ')') {
	      parenCount -= 1;
	    } else if (token.charAt(0) === ':') {
	      paramName = token.substring(1);
	      paramValue = params[paramName];

	      !(paramValue != null || parenCount > 0) ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Missing "%s" parameter for path "%s"', paramName, pattern) : _invariant2['default'](false) : undefined;

	      if (paramValue != null) pathname += encodeURIComponent(paramValue);
	    } else {
	      pathname += token;
	    }
	  }

	  return pathname.replace(/\/+/g, '/');
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 658 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports.runEnterHooks = runEnterHooks;
	exports.runChangeHooks = runChangeHooks;
	exports.runLeaveHooks = runLeaveHooks;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _AsyncUtils = __webpack_require__(659);

	var _routerWarning = __webpack_require__(654);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	function createTransitionHook(hook, route, asyncArity) {
	  return function () {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    hook.apply(route, args);

	    if (hook.length < asyncArity) {
	      var callback = args[args.length - 1];
	      // Assume hook executes synchronously and
	      // automatically call the callback.
	      callback();
	    }
	  };
	}

	function getEnterHooks(routes) {
	  return routes.reduce(function (hooks, route) {
	    if (route.onEnter) hooks.push(createTransitionHook(route.onEnter, route, 3));

	    return hooks;
	  }, []);
	}

	function getChangeHooks(routes) {
	  return routes.reduce(function (hooks, route) {
	    if (route.onChange) hooks.push(createTransitionHook(route.onChange, route, 4));
	    return hooks;
	  }, []);
	}

	function runTransitionHooks(length, iter, callback) {
	  if (!length) {
	    callback();
	    return;
	  }

	  var redirectInfo = undefined;
	  function replace(location, deprecatedPathname, deprecatedQuery) {
	    if (deprecatedPathname) {
	      process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, '`replaceState(state, pathname, query) is deprecated; use `replace(location)` with a location descriptor instead. http://tiny.cc/router-isActivedeprecated') : undefined;
	      redirectInfo = {
	        pathname: deprecatedPathname,
	        query: deprecatedQuery,
	        state: location
	      };

	      return;
	    }

	    redirectInfo = location;
	  }

	  _AsyncUtils.loopAsync(length, function (index, next, done) {
	    iter(index, replace, function (error) {
	      if (error || redirectInfo) {
	        done(error, redirectInfo); // No need to continue.
	      } else {
	          next();
	        }
	    });
	  }, callback);
	}

	/**
	 * Runs all onEnter hooks in the given array of routes in order
	 * with onEnter(nextState, replace, callback) and calls
	 * callback(error, redirectInfo) when finished. The first hook
	 * to use replace short-circuits the loop.
	 *
	 * If a hook needs to run asynchronously, it may use the callback
	 * function. However, doing so will cause the transition to pause,
	 * which could lead to a non-responsive UI if the hook is slow.
	 */

	function runEnterHooks(routes, nextState, callback) {
	  var hooks = getEnterHooks(routes);
	  return runTransitionHooks(hooks.length, function (index, replace, next) {
	    hooks[index](nextState, replace, next);
	  }, callback);
	}

	/**
	 * Runs all onChange hooks in the given array of routes in order
	 * with onChange(prevState, nextState, replace, callback) and calls
	 * callback(error, redirectInfo) when finished. The first hook
	 * to use replace short-circuits the loop.
	 *
	 * If a hook needs to run asynchronously, it may use the callback
	 * function. However, doing so will cause the transition to pause,
	 * which could lead to a non-responsive UI if the hook is slow.
	 */

	function runChangeHooks(routes, state, nextState, callback) {
	  var hooks = getChangeHooks(routes);
	  return runTransitionHooks(hooks.length, function (index, replace, next) {
	    hooks[index](state, nextState, replace, next);
	  }, callback);
	}

	/**
	 * Runs all onLeave hooks in the given array of routes in order.
	 */

	function runLeaveHooks(routes) {
	  for (var i = 0, len = routes.length; i < len; ++i) {
	    if (routes[i].onLeave) routes[i].onLeave.call(routes[i]);
	  }
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 659 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	var _slice = Array.prototype.slice;
	exports.loopAsync = loopAsync;
	exports.mapAsync = mapAsync;

	function loopAsync(turns, work, callback) {
	  var currentTurn = 0,
	      isDone = false;
	  var sync = false,
	      hasNext = false,
	      doneArgs = undefined;

	  function done() {
	    isDone = true;
	    if (sync) {
	      // Iterate instead of recursing if possible.
	      doneArgs = [].concat(_slice.call(arguments));
	      return;
	    }

	    callback.apply(this, arguments);
	  }

	  function next() {
	    if (isDone) {
	      return;
	    }

	    hasNext = true;
	    if (sync) {
	      // Iterate instead of recursing if possible.
	      return;
	    }

	    sync = true;

	    while (!isDone && currentTurn < turns && hasNext) {
	      hasNext = false;
	      work.call(this, currentTurn++, next, done);
	    }

	    sync = false;

	    if (isDone) {
	      // This means the loop finished synchronously.
	      callback.apply(this, doneArgs);
	      return;
	    }

	    if (currentTurn >= turns && hasNext) {
	      isDone = true;
	      callback();
	    }
	  }

	  next();
	}

	function mapAsync(array, work, callback) {
	  var length = array.length;
	  var values = [];

	  if (length === 0) return callback(null, values);

	  var isDone = false,
	      doneCount = 0;

	  function done(index, error, value) {
	    if (isDone) return;

	    if (error) {
	      isDone = true;
	      callback(error);
	    } else {
	      values[index] = value;

	      isDone = ++doneCount === length;

	      if (isDone) callback(null, values);
	    }
	  }

	  array.forEach(function (item, index) {
	    work(item, index, function (error, value) {
	      done(index, error, value);
	    });
	  });
	}

/***/ },
/* 660 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = isActive;

	var _PatternUtils = __webpack_require__(657);

	function deepEqual(a, b) {
	  if (a == b) return true;

	  if (a == null || b == null) return false;

	  if (Array.isArray(a)) {
	    return Array.isArray(b) && a.length === b.length && a.every(function (item, index) {
	      return deepEqual(item, b[index]);
	    });
	  }

	  if (typeof a === 'object') {
	    for (var p in a) {
	      if (!Object.prototype.hasOwnProperty.call(a, p)) {
	        continue;
	      }

	      if (a[p] === undefined) {
	        if (b[p] !== undefined) {
	          return false;
	        }
	      } else if (!Object.prototype.hasOwnProperty.call(b, p)) {
	        return false;
	      } else if (!deepEqual(a[p], b[p])) {
	        return false;
	      }
	    }

	    return true;
	  }

	  return String(a) === String(b);
	}

	/**
	 * Returns true if the current pathname matches the supplied one, net of
	 * leading and trailing slash normalization. This is sufficient for an
	 * indexOnly route match.
	 */
	function pathIsActive(pathname, currentPathname) {
	  // Normalize leading slash for consistency. Leading slash on pathname has
	  // already been normalized in isActive. See caveat there.
	  if (currentPathname.charAt(0) !== '/') {
	    currentPathname = '/' + currentPathname;
	  }

	  // Normalize the end of both path names too. Maybe `/foo/` shouldn't show
	  // `/foo` as active, but in this case, we would already have failed the
	  // match.
	  if (pathname.charAt(pathname.length - 1) !== '/') {
	    pathname += '/';
	  }
	  if (currentPathname.charAt(currentPathname.length - 1) !== '/') {
	    currentPathname += '/';
	  }

	  return currentPathname === pathname;
	}

	/**
	 * Returns true if the given pathname matches the active routes and params.
	 */
	function routeIsActive(pathname, routes, params) {
	  var remainingPathname = pathname,
	      paramNames = [],
	      paramValues = [];

	  // for...of would work here but it's probably slower post-transpilation.
	  for (var i = 0, len = routes.length; i < len; ++i) {
	    var route = routes[i];
	    var pattern = route.path || '';

	    if (pattern.charAt(0) === '/') {
	      remainingPathname = pathname;
	      paramNames = [];
	      paramValues = [];
	    }

	    if (remainingPathname !== null && pattern) {
	      var matched = _PatternUtils.matchPattern(pattern, remainingPathname);
	      remainingPathname = matched.remainingPathname;
	      paramNames = [].concat(paramNames, matched.paramNames);
	      paramValues = [].concat(paramValues, matched.paramValues);

	      if (remainingPathname === '') {
	        // We have an exact match on the route. Just check that all the params
	        // match.
	        // FIXME: This doesn't work on repeated params.
	        return paramNames.every(function (paramName, index) {
	          return String(paramValues[index]) === String(params[paramName]);
	        });
	      }
	    }
	  }

	  return false;
	}

	/**
	 * Returns true if all key/value pairs in the given query are
	 * currently active.
	 */
	function queryIsActive(query, activeQuery) {
	  if (activeQuery == null) return query == null;

	  if (query == null) return true;

	  return deepEqual(query, activeQuery);
	}

	/**
	 * Returns true if a <Link> to the given pathname/query combination is
	 * currently active.
	 */

	function isActive(_ref, indexOnly, currentLocation, routes, params) {
	  var pathname = _ref.pathname;
	  var query = _ref.query;

	  if (currentLocation == null) return false;

	  // TODO: This is a bit ugly. It keeps around support for treating pathnames
	  // without preceding slashes as absolute paths, but possibly also works
	  // around the same quirks with basenames as in matchRoutes.
	  if (pathname.charAt(0) !== '/') {
	    pathname = '/' + pathname;
	  }

	  if (!pathIsActive(pathname, currentLocation.pathname)) {
	    // The path check is necessary and sufficient for indexOnly, but otherwise
	    // we still need to check the routes.
	    if (indexOnly || !routeIsActive(pathname, routes, params)) {
	      return false;
	    }
	  }

	  return queryIsActive(query, currentLocation.query);
	}

	module.exports = exports['default'];

/***/ },
/* 661 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _AsyncUtils = __webpack_require__(659);

	var _deprecateObjectProperties = __webpack_require__(662);

	var _routerWarning = __webpack_require__(654);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	function getComponentsForRoute(nextState, route, callback) {
	  if (route.component || route.components) {
	    callback(null, route.component || route.components);
	    return;
	  }

	  var getComponent = route.getComponent || route.getComponents;
	  if (!getComponent) {
	    callback();
	    return;
	  }

	  var location = nextState.location;

	  var nextStateWithLocation = undefined;

	  if (process.env.NODE_ENV !== 'production' && _deprecateObjectProperties.canUseMembrane) {
	    nextStateWithLocation = _extends({}, nextState);

	    // I don't use deprecateObjectProperties here because I want to keep the
	    // same code path between development and production, in that we just
	    // assign extra properties to the copy of the state object in both cases.

	    var _loop = function (prop) {
	      if (!Object.prototype.hasOwnProperty.call(location, prop)) {
	        return 'continue';
	      }

	      Object.defineProperty(nextStateWithLocation, prop, {
	        get: function get() {
	          process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, 'Accessing location properties from the first argument to `getComponent` and `getComponents` is deprecated. That argument is now the router state (`nextState`) rather than the location. To access the location, use `nextState.location`.') : undefined;
	          return location[prop];
	        }
	      });
	    };

	    for (var prop in location) {
	      var _ret = _loop(prop);

	      if (_ret === 'continue') continue;
	    }
	  } else {
	    nextStateWithLocation = _extends({}, nextState, location);
	  }

	  getComponent.call(route, nextStateWithLocation, callback);
	}

	/**
	 * Asynchronously fetches all components needed for the given router
	 * state and calls callback(error, components) when finished.
	 *
	 * Note: This operation may finish synchronously if no routes have an
	 * asynchronous getComponents method.
	 */
	function getComponents(nextState, callback) {
	  _AsyncUtils.mapAsync(nextState.routes, function (route, index, callback) {
	    getComponentsForRoute(nextState, route, callback);
	  }, callback);
	}

	exports['default'] = getComponents;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 662 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _routerWarning = __webpack_require__(654);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var canUseMembrane = false;

	exports.canUseMembrane = canUseMembrane;
	// No-op by default.
	var deprecateObjectProperties = function deprecateObjectProperties(object) {
	  return object;
	};

	if (process.env.NODE_ENV !== 'production') {
	  try {
	    if (Object.defineProperty({}, 'x', { get: function get() {
	        return true;
	      } }).x) {
	      exports.canUseMembrane = canUseMembrane = true;
	    }
	    /* eslint-disable no-empty */
	  } catch (e) {}
	  /* eslint-enable no-empty */

	  if (canUseMembrane) {
	    deprecateObjectProperties = function (object, message) {
	      // Wrap the deprecated object in a membrane to warn on property access.
	      var membrane = {};

	      var _loop = function (prop) {
	        if (!Object.prototype.hasOwnProperty.call(object, prop)) {
	          return 'continue';
	        }

	        if (typeof object[prop] === 'function') {
	          // Can't use fat arrow here because of use of arguments below.
	          membrane[prop] = function () {
	            process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, message) : undefined;
	            return object[prop].apply(object, arguments);
	          };
	          return 'continue';
	        }

	        // These properties are non-enumerable to prevent React dev tools from
	        // seeing them and causing spurious warnings when accessing them. In
	        // principle this could be done with a proxy, but support for the
	        // ownKeys trap on proxies is not universal, even among browsers that
	        // otherwise support proxies.
	        Object.defineProperty(membrane, prop, {
	          get: function get() {
	            process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, message) : undefined;
	            return object[prop];
	          }
	        });
	      };

	      for (var prop in object) {
	        var _ret = _loop(prop);

	        if (_ret === 'continue') continue;
	      }

	      return membrane;
	    };
	  }
	}

	exports['default'] = deprecateObjectProperties;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 663 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports['default'] = matchRoutes;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _routerWarning = __webpack_require__(654);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _AsyncUtils = __webpack_require__(659);

	var _PatternUtils = __webpack_require__(657);

	var _RouteUtils = __webpack_require__(664);

	function getChildRoutes(route, location, callback) {
	  if (route.childRoutes) {
	    return [null, route.childRoutes];
	  }
	  if (!route.getChildRoutes) {
	    return [];
	  }

	  var sync = true,
	      result = undefined;

	  route.getChildRoutes(location, function (error, childRoutes) {
	    childRoutes = !error && _RouteUtils.createRoutes(childRoutes);
	    if (sync) {
	      result = [error, childRoutes];
	      return;
	    }

	    callback(error, childRoutes);
	  });

	  sync = false;
	  return result; // Might be undefined.
	}

	function getIndexRoute(route, location, callback) {
	  if (route.indexRoute) {
	    callback(null, route.indexRoute);
	  } else if (route.getIndexRoute) {
	    route.getIndexRoute(location, function (error, indexRoute) {
	      callback(error, !error && _RouteUtils.createRoutes(indexRoute)[0]);
	    });
	  } else if (route.childRoutes) {
	    (function () {
	      var pathless = route.childRoutes.filter(function (childRoute) {
	        return !childRoute.path;
	      });

	      _AsyncUtils.loopAsync(pathless.length, function (index, next, done) {
	        getIndexRoute(pathless[index], location, function (error, indexRoute) {
	          if (error || indexRoute) {
	            var routes = [pathless[index]].concat(Array.isArray(indexRoute) ? indexRoute : [indexRoute]);
	            done(error, routes);
	          } else {
	            next();
	          }
	        });
	      }, function (err, routes) {
	        callback(null, routes);
	      });
	    })();
	  } else {
	    callback();
	  }
	}

	function assignParams(params, paramNames, paramValues) {
	  return paramNames.reduce(function (params, paramName, index) {
	    var paramValue = paramValues && paramValues[index];

	    if (Array.isArray(params[paramName])) {
	      params[paramName].push(paramValue);
	    } else if (paramName in params) {
	      params[paramName] = [params[paramName], paramValue];
	    } else {
	      params[paramName] = paramValue;
	    }

	    return params;
	  }, params);
	}

	function createParams(paramNames, paramValues) {
	  return assignParams({}, paramNames, paramValues);
	}

	function matchRouteDeep(route, location, remainingPathname, paramNames, paramValues, callback) {
	  var pattern = route.path || '';

	  if (pattern.charAt(0) === '/') {
	    remainingPathname = location.pathname;
	    paramNames = [];
	    paramValues = [];
	  }

	  // Only try to match the path if the route actually has a pattern, and if
	  // we're not just searching for potential nested absolute paths.
	  if (remainingPathname !== null && pattern) {
	    var matched = _PatternUtils.matchPattern(pattern, remainingPathname);
	    remainingPathname = matched.remainingPathname;
	    paramNames = [].concat(paramNames, matched.paramNames);
	    paramValues = [].concat(paramValues, matched.paramValues);

	    // By assumption, pattern is non-empty here, which is the prerequisite for
	    // actually terminating a match.
	    if (remainingPathname === '') {
	      var _ret2 = (function () {
	        var match = {
	          routes: [route],
	          params: createParams(paramNames, paramValues)
	        };

	        getIndexRoute(route, location, function (error, indexRoute) {
	          if (error) {
	            callback(error);
	          } else {
	            if (Array.isArray(indexRoute)) {
	              var _match$routes;

	              process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](indexRoute.every(function (route) {
	                return !route.path;
	              }), 'Index routes should not have paths') : undefined;
	              (_match$routes = match.routes).push.apply(_match$routes, indexRoute);
	            } else if (indexRoute) {
	              process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](!indexRoute.path, 'Index routes should not have paths') : undefined;
	              match.routes.push(indexRoute);
	            }

	            callback(null, match);
	          }
	        });

	        return {
	          v: undefined
	        };
	      })();

	      if (typeof _ret2 === 'object') return _ret2.v;
	    }
	  }

	  if (remainingPathname != null || route.childRoutes) {
	    // Either a) this route matched at least some of the path or b)
	    // we don't have to load this route's children asynchronously. In
	    // either case continue checking for matches in the subtree.
	    var onChildRoutes = function onChildRoutes(error, childRoutes) {
	      if (error) {
	        callback(error);
	      } else if (childRoutes) {
	        // Check the child routes to see if any of them match.
	        matchRoutes(childRoutes, location, function (error, match) {
	          if (error) {
	            callback(error);
	          } else if (match) {
	            // A child route matched! Augment the match and pass it up the stack.
	            match.routes.unshift(route);
	            callback(null, match);
	          } else {
	            callback();
	          }
	        }, remainingPathname, paramNames, paramValues);
	      } else {
	        callback();
	      }
	    };

	    var result = getChildRoutes(route, location, onChildRoutes);
	    if (result) {
	      onChildRoutes.apply(undefined, result);
	    }
	  } else {
	    callback();
	  }
	}

	/**
	 * Asynchronously matches the given location to a set of routes and calls
	 * callback(error, state) when finished. The state object will have the
	 * following properties:
	 *
	 * - routes       An array of routes that matched, in hierarchical order
	 * - params       An object of URL parameters
	 *
	 * Note: This operation may finish synchronously if no routes have an
	 * asynchronous getChildRoutes method.
	 */

	function matchRoutes(routes, location, callback, remainingPathname) {
	  var paramNames = arguments.length <= 4 || arguments[4] === undefined ? [] : arguments[4];
	  var paramValues = arguments.length <= 5 || arguments[5] === undefined ? [] : arguments[5];

	  if (remainingPathname === undefined) {
	    // TODO: This is a little bit ugly, but it works around a quirk in history
	    // that strips the leading slash from pathnames when using basenames with
	    // trailing slashes.
	    if (location.pathname.charAt(0) !== '/') {
	      location = _extends({}, location, {
	        pathname: '/' + location.pathname
	      });
	    }
	    remainingPathname = location.pathname;
	  }

	  _AsyncUtils.loopAsync(routes.length, function (index, next, done) {
	    matchRouteDeep(routes[index], location, remainingPathname, paramNames, paramValues, function (error, match) {
	      if (error || match) {
	        done(error, match);
	      } else {
	        next();
	      }
	    });
	  }, callback);
	}

	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 664 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.isReactChildren = isReactChildren;
	exports.createRouteFromReactElement = createRouteFromReactElement;
	exports.createRoutesFromReactChildren = createRoutesFromReactChildren;
	exports.createRoutes = createRoutes;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _routerWarning = __webpack_require__(654);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	function isValidChild(object) {
	  return object == null || _react2['default'].isValidElement(object);
	}

	function isReactChildren(object) {
	  return isValidChild(object) || Array.isArray(object) && object.every(isValidChild);
	}

	function checkPropTypes(componentName, propTypes, props) {
	  componentName = componentName || 'UnknownComponent';

	  for (var propName in propTypes) {
	    if (Object.prototype.hasOwnProperty.call(propTypes, propName)) {
	      var error = propTypes[propName](props, propName, componentName);

	      /* istanbul ignore if: error logging */
	      if (error instanceof Error) process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, error.message) : undefined;
	    }
	  }
	}

	function createRoute(defaultProps, props) {
	  return _extends({}, defaultProps, props);
	}

	function createRouteFromReactElement(element) {
	  var type = element.type;
	  var route = createRoute(type.defaultProps, element.props);

	  if (type.propTypes) checkPropTypes(type.displayName || type.name, type.propTypes, route);

	  if (route.children) {
	    var childRoutes = createRoutesFromReactChildren(route.children, route);

	    if (childRoutes.length) route.childRoutes = childRoutes;

	    delete route.children;
	  }

	  return route;
	}

	/**
	 * Creates and returns a routes object from the given ReactChildren. JSX
	 * provides a convenient way to visualize how routes in the hierarchy are
	 * nested.
	 *
	 *   import { Route, createRoutesFromReactChildren } from 'react-router'
	 *   
	 *   const routes = createRoutesFromReactChildren(
	 *     <Route component={App}>
	 *       <Route path="home" component={Dashboard}/>
	 *       <Route path="news" component={NewsFeed}/>
	 *     </Route>
	 *   )
	 *
	 * Note: This method is automatically used when you provide <Route> children
	 * to a <Router> component.
	 */

	function createRoutesFromReactChildren(children, parentRoute) {
	  var routes = [];

	  _react2['default'].Children.forEach(children, function (element) {
	    if (_react2['default'].isValidElement(element)) {
	      // Component classes may have a static create* method.
	      if (element.type.createRouteFromReactElement) {
	        var route = element.type.createRouteFromReactElement(element, parentRoute);

	        if (route) routes.push(route);
	      } else {
	        routes.push(createRouteFromReactElement(element));
	      }
	    }
	  });

	  return routes;
	}

	/**
	 * Creates and returns an array of routes from the given object which
	 * may be a JSX route, a plain object route, or an array of either.
	 */

	function createRoutes(routes) {
	  if (isReactChildren(routes)) {
	    routes = createRoutesFromReactChildren(routes);
	  } else if (routes && !Array.isArray(routes)) {
	    routes = [routes];
	  }

	  return routes;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 665 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.falsy = falsy;

	var _react = __webpack_require__(1);

	var func = _react.PropTypes.func;
	var object = _react.PropTypes.object;
	var arrayOf = _react.PropTypes.arrayOf;
	var oneOfType = _react.PropTypes.oneOfType;
	var element = _react.PropTypes.element;
	var shape = _react.PropTypes.shape;
	var string = _react.PropTypes.string;

	function falsy(props, propName, componentName) {
	  if (props[propName]) return new Error('<' + componentName + '> should not have a "' + propName + '" prop');
	}

	var history = shape({
	  listen: func.isRequired,
	  push: func.isRequired,
	  replace: func.isRequired,
	  go: func.isRequired,
	  goBack: func.isRequired,
	  goForward: func.isRequired
	});

	exports.history = history;
	var component = oneOfType([func, string]);
	exports.component = component;
	var components = oneOfType([component, object]);
	exports.components = components;
	var route = oneOfType([object, element]);
	exports.route = route;
	var routes = oneOfType([route, arrayOf(route)]);
	exports.routes = routes;

/***/ },
/* 666 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _invariant = __webpack_require__(635);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _deprecateObjectProperties = __webpack_require__(662);

	var _deprecateObjectProperties2 = _interopRequireDefault(_deprecateObjectProperties);

	var _getRouteParams = __webpack_require__(667);

	var _getRouteParams2 = _interopRequireDefault(_getRouteParams);

	var _RouteUtils = __webpack_require__(664);

	var _routerWarning = __webpack_require__(654);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _React$PropTypes = _react2['default'].PropTypes;
	var array = _React$PropTypes.array;
	var func = _React$PropTypes.func;
	var object = _React$PropTypes.object;

	/**
	 * A <RouterContext> renders the component tree for a given router state
	 * and sets the history object and the current location in context.
	 */
	var RouterContext = _react2['default'].createClass({
	  displayName: 'RouterContext',

	  propTypes: {
	    history: object,
	    router: object.isRequired,
	    location: object.isRequired,
	    routes: array.isRequired,
	    params: object.isRequired,
	    components: array.isRequired,
	    createElement: func.isRequired
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      createElement: _react2['default'].createElement
	    };
	  },

	  childContextTypes: {
	    history: object,
	    location: object.isRequired,
	    router: object.isRequired
	  },

	  getChildContext: function getChildContext() {
	    var _props = this.props;
	    var router = _props.router;
	    var history = _props.history;
	    var location = _props.location;

	    if (!router) {
	      process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, '`<RouterContext>` expects a `router` rather than a `history`') : undefined;

	      router = _extends({}, history, {
	        setRouteLeaveHook: history.listenBeforeLeavingRoute
	      });
	      delete router.listenBeforeLeavingRoute;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      location = _deprecateObjectProperties2['default'](location, '`context.location` is deprecated, please use a route component\'s `props.location` instead. http://tiny.cc/router-accessinglocation');
	    }

	    return { history: history, location: location, router: router };
	  },

	  createElement: function createElement(component, props) {
	    return component == null ? null : this.props.createElement(component, props);
	  },

	  render: function render() {
	    var _this = this;

	    var _props2 = this.props;
	    var history = _props2.history;
	    var location = _props2.location;
	    var routes = _props2.routes;
	    var params = _props2.params;
	    var components = _props2.components;

	    var element = null;

	    if (components) {
	      element = components.reduceRight(function (element, components, index) {
	        if (components == null) return element; // Don't create new children; use the grandchildren.

	        var route = routes[index];
	        var routeParams = _getRouteParams2['default'](route, params);
	        var props = {
	          history: history,
	          location: location,
	          params: params,
	          route: route,
	          routeParams: routeParams,
	          routes: routes
	        };

	        if (_RouteUtils.isReactChildren(element)) {
	          props.children = element;
	        } else if (element) {
	          for (var prop in element) {
	            if (Object.prototype.hasOwnProperty.call(element, prop)) props[prop] = element[prop];
	          }
	        }

	        if (typeof components === 'object') {
	          var elements = {};

	          for (var key in components) {
	            if (Object.prototype.hasOwnProperty.call(components, key)) {
	              // Pass through the key as a prop to createElement to allow
	              // custom createElement functions to know which named component
	              // they're rendering, for e.g. matching up to fetched data.
	              elements[key] = _this.createElement(components[key], _extends({
	                key: key }, props));
	            }
	          }

	          return elements;
	        }

	        return _this.createElement(components, props);
	      }, element);
	    }

	    !(element === null || element === false || _react2['default'].isValidElement(element)) ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'The root route must render a single element') : _invariant2['default'](false) : undefined;

	    return element;
	  }

	});

	exports['default'] = RouterContext;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 667 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _PatternUtils = __webpack_require__(657);

	/**
	 * Extracts an object of params the given route cares about from
	 * the given params object.
	 */
	function getRouteParams(route, params) {
	  var routeParams = {};

	  if (!route.path) return routeParams;

	  var paramNames = _PatternUtils.getParamNames(route.path);

	  for (var p in params) {
	    if (Object.prototype.hasOwnProperty.call(params, p) && paramNames.indexOf(p) !== -1) {
	      routeParams[p] = params[p];
	    }
	  }

	  return routeParams;
	}

	exports['default'] = getRouteParams;
	module.exports = exports['default'];

/***/ },
/* 668 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.createRouterObject = createRouterObject;
	exports.createRoutingHistory = createRoutingHistory;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _deprecateObjectProperties = __webpack_require__(662);

	var _deprecateObjectProperties2 = _interopRequireDefault(_deprecateObjectProperties);

	function createRouterObject(history, transitionManager) {
	  return _extends({}, history, {
	    setRouteLeaveHook: transitionManager.listenBeforeLeavingRoute,
	    isActive: transitionManager.isActive
	  });
	}

	// deprecated

	function createRoutingHistory(history, transitionManager) {
	  history = _extends({}, history, transitionManager);

	  if (process.env.NODE_ENV !== 'production') {
	    history = _deprecateObjectProperties2['default'](history, '`props.history` and `context.history` are deprecated. Please use `context.router`. http://tiny.cc/router-contextchanges');
	  }

	  return history;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 669 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _routerWarning = __webpack_require__(654);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _PropTypes = __webpack_require__(670);

	var _React$PropTypes = _react2['default'].PropTypes;
	var bool = _React$PropTypes.bool;
	var object = _React$PropTypes.object;
	var string = _React$PropTypes.string;
	var func = _React$PropTypes.func;
	var oneOfType = _React$PropTypes.oneOfType;

	function isLeftClickEvent(event) {
	  return event.button === 0;
	}

	function isModifiedEvent(event) {
	  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
	}

	// TODO: De-duplicate against hasAnyProperties in createTransitionManager.
	function isEmptyObject(object) {
	  for (var p in object) {
	    if (Object.prototype.hasOwnProperty.call(object, p)) return false;
	  }return true;
	}

	function createLocationDescriptor(to, _ref) {
	  var query = _ref.query;
	  var hash = _ref.hash;
	  var state = _ref.state;

	  if (query || hash || state) {
	    return { pathname: to, query: query, hash: hash, state: state };
	  }

	  return to;
	}

	/**
	 * A <Link> is used to create an <a> element that links to a route.
	 * When that route is active, the link gets the value of its
	 * activeClassName prop.
	 *
	 * For example, assuming you have the following route:
	 *
	 *   <Route path="/posts/:postID" component={Post} />
	 *
	 * You could use the following component to link to that route:
	 *
	 *   <Link to={`/posts/${post.id}`} />
	 *
	 * Links may pass along location state and/or query string parameters
	 * in the state/query props, respectively.
	 *
	 *   <Link ... query={{ show: true }} state={{ the: 'state' }} />
	 */
	var Link = _react2['default'].createClass({
	  displayName: 'Link',

	  contextTypes: {
	    router: _PropTypes.routerShape
	  },

	  propTypes: {
	    to: oneOfType([string, object]).isRequired,
	    query: object,
	    hash: string,
	    state: object,
	    activeStyle: object,
	    activeClassName: string,
	    onlyActiveOnIndex: bool.isRequired,
	    onClick: func
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      onlyActiveOnIndex: false,
	      style: {}
	    };
	  },

	  handleClick: function handleClick(event) {
	    var allowTransition = true;

	    if (this.props.onClick) this.props.onClick(event);

	    if (isModifiedEvent(event) || !isLeftClickEvent(event)) return;

	    if (event.defaultPrevented === true) allowTransition = false;

	    // If target prop is set (e.g. to "_blank") let browser handle link.
	    /* istanbul ignore if: untestable with Karma */
	    if (this.props.target) {
	      if (!allowTransition) event.preventDefault();

	      return;
	    }

	    event.preventDefault();

	    if (allowTransition) {
	      var _props = this.props;
	      var to = _props.to;
	      var query = _props.query;
	      var hash = _props.hash;
	      var state = _props.state;

	      var _location = createLocationDescriptor(to, { query: query, hash: hash, state: state });

	      this.context.router.push(_location);
	    }
	  },

	  render: function render() {
	    var _props2 = this.props;
	    var to = _props2.to;
	    var query = _props2.query;
	    var hash = _props2.hash;
	    var state = _props2.state;
	    var activeClassName = _props2.activeClassName;
	    var activeStyle = _props2.activeStyle;
	    var onlyActiveOnIndex = _props2.onlyActiveOnIndex;

	    var props = _objectWithoutProperties(_props2, ['to', 'query', 'hash', 'state', 'activeClassName', 'activeStyle', 'onlyActiveOnIndex']);

	    process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](!(query || hash || state), 'the `query`, `hash`, and `state` props on `<Link>` are deprecated, use `<Link to={{ pathname, query, hash, state }}/>. http://tiny.cc/router-isActivedeprecated') : undefined;

	    // Ignore if rendered outside the context of router, simplifies unit testing.
	    var router = this.context.router;

	    if (router) {
	      var _location2 = createLocationDescriptor(to, { query: query, hash: hash, state: state });
	      props.href = router.createHref(_location2);

	      if (activeClassName || activeStyle != null && !isEmptyObject(activeStyle)) {
	        if (router.isActive(_location2, onlyActiveOnIndex)) {
	          if (activeClassName) {
	            if (props.className) {
	              props.className += ' ' + activeClassName;
	            } else {
	              props.className = activeClassName;
	            }
	          }

	          if (activeStyle) props.style = _extends({}, props.style, activeStyle);
	        }
	      }
	    }

	    return _react2['default'].createElement('a', _extends({}, props, { onClick: this.handleClick }));
	  }

	});

	exports['default'] = Link;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 670 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(1);

	var _deprecateObjectProperties = __webpack_require__(662);

	var _deprecateObjectProperties2 = _interopRequireDefault(_deprecateObjectProperties);

	var _InternalPropTypes = __webpack_require__(665);

	var InternalPropTypes = _interopRequireWildcard(_InternalPropTypes);

	var _routerWarning = __webpack_require__(654);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var func = _react.PropTypes.func;
	var object = _react.PropTypes.object;
	var shape = _react.PropTypes.shape;
	var string = _react.PropTypes.string;
	var routerShape = shape({
	  push: func.isRequired,
	  replace: func.isRequired,
	  go: func.isRequired,
	  goBack: func.isRequired,
	  goForward: func.isRequired,
	  setRouteLeaveHook: func.isRequired,
	  isActive: func.isRequired
	});

	exports.routerShape = routerShape;
	var locationShape = shape({
	  pathname: string.isRequired,
	  search: string.isRequired,
	  state: object,
	  action: string.isRequired,
	  key: string
	});

	exports.locationShape = locationShape;
	// Deprecated stuff below:

	var falsy = InternalPropTypes.falsy;
	exports.falsy = falsy;
	var history = InternalPropTypes.history;
	exports.history = history;
	var location = locationShape;
	exports.location = location;
	var component = InternalPropTypes.component;
	exports.component = component;
	var components = InternalPropTypes.components;
	exports.components = components;
	var route = InternalPropTypes.route;
	exports.route = route;
	var routes = InternalPropTypes.routes;
	exports.routes = routes;
	var router = routerShape;

	exports.router = router;
	if (process.env.NODE_ENV !== 'production') {
	  (function () {
	    var deprecatePropType = function deprecatePropType(propType, message) {
	      return function () {
	        process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, message) : undefined;
	        return propType.apply(undefined, arguments);
	      };
	    };

	    var deprecateInternalPropType = function deprecateInternalPropType(propType) {
	      return deprecatePropType(propType, 'This prop type is not intended for external use, and was previously exported by mistake. These internal prop types are deprecated for external use, and will be removed in a later version.');
	    };

	    var deprecateRenamedPropType = function deprecateRenamedPropType(propType, name) {
	      return deprecatePropType(propType, 'The `' + name + '` prop type is now exported as `' + name + 'Shape` to avoid name conflicts. This export is deprecated and will be removed in a later version.');
	    };

	    exports.falsy = falsy = deprecateInternalPropType(falsy);
	    exports.history = history = deprecateInternalPropType(history);
	    exports.component = component = deprecateInternalPropType(component);
	    exports.components = components = deprecateInternalPropType(components);
	    exports.route = route = deprecateInternalPropType(route);
	    exports.routes = routes = deprecateInternalPropType(routes);

	    exports.location = location = deprecateRenamedPropType(location, 'location');
	    exports.router = router = deprecateRenamedPropType(router, 'router');
	  })();
	}

	var defaultExport = {
	  falsy: falsy,
	  history: history,
	  location: location,
	  component: component,
	  components: components,
	  route: route,
	  // For some reason, routes was never here.
	  router: router
	};

	if (process.env.NODE_ENV !== 'production') {
	  defaultExport = _deprecateObjectProperties2['default'](defaultExport, 'The default export from `react-router/lib/PropTypes` is deprecated. Please use the named exports instead.');
	}

	exports['default'] = defaultExport;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 671 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _Link = __webpack_require__(669);

	var _Link2 = _interopRequireDefault(_Link);

	/**
	 * An <IndexLink> is used to link to an <IndexRoute>.
	 */
	var IndexLink = _react2['default'].createClass({
	  displayName: 'IndexLink',

	  render: function render() {
	    return _react2['default'].createElement(_Link2['default'], _extends({}, this.props, { onlyActiveOnIndex: true }));
	  }

	});

	exports['default'] = IndexLink;
	module.exports = exports['default'];

/***/ },
/* 672 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _routerWarning = __webpack_require__(654);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _invariant = __webpack_require__(635);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _Redirect = __webpack_require__(673);

	var _Redirect2 = _interopRequireDefault(_Redirect);

	var _InternalPropTypes = __webpack_require__(665);

	var _React$PropTypes = _react2['default'].PropTypes;
	var string = _React$PropTypes.string;
	var object = _React$PropTypes.object;

	/**
	 * An <IndexRedirect> is used to redirect from an indexRoute.
	 */
	var IndexRedirect = _react2['default'].createClass({
	  displayName: 'IndexRedirect',

	  statics: {

	    createRouteFromReactElement: function createRouteFromReactElement(element, parentRoute) {
	      /* istanbul ignore else: sanity check */
	      if (parentRoute) {
	        parentRoute.indexRoute = _Redirect2['default'].createRouteFromReactElement(element);
	      } else {
	        process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, 'An <IndexRedirect> does not make sense at the root of your route config') : undefined;
	      }
	    }

	  },

	  propTypes: {
	    to: string.isRequired,
	    query: object,
	    state: object,
	    onEnter: _InternalPropTypes.falsy,
	    children: _InternalPropTypes.falsy
	  },

	  /* istanbul ignore next: sanity check */
	  render: function render() {
	     true ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, '<IndexRedirect> elements are for router configuration only and should not be rendered') : _invariant2['default'](false) : undefined;
	  }

	});

	exports['default'] = IndexRedirect;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 673 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _invariant = __webpack_require__(635);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _RouteUtils = __webpack_require__(664);

	var _PatternUtils = __webpack_require__(657);

	var _InternalPropTypes = __webpack_require__(665);

	var _React$PropTypes = _react2['default'].PropTypes;
	var string = _React$PropTypes.string;
	var object = _React$PropTypes.object;

	/**
	 * A <Redirect> is used to declare another URL path a client should
	 * be sent to when they request a given URL.
	 *
	 * Redirects are placed alongside routes in the route configuration
	 * and are traversed in the same manner.
	 */
	var Redirect = _react2['default'].createClass({
	  displayName: 'Redirect',

	  statics: {

	    createRouteFromReactElement: function createRouteFromReactElement(element) {
	      var route = _RouteUtils.createRouteFromReactElement(element);

	      if (route.from) route.path = route.from;

	      route.onEnter = function (nextState, replace) {
	        var location = nextState.location;
	        var params = nextState.params;

	        var pathname = undefined;
	        if (route.to.charAt(0) === '/') {
	          pathname = _PatternUtils.formatPattern(route.to, params);
	        } else if (!route.to) {
	          pathname = location.pathname;
	        } else {
	          var routeIndex = nextState.routes.indexOf(route);
	          var parentPattern = Redirect.getRoutePattern(nextState.routes, routeIndex - 1);
	          var pattern = parentPattern.replace(/\/*$/, '/') + route.to;
	          pathname = _PatternUtils.formatPattern(pattern, params);
	        }

	        replace({
	          pathname: pathname,
	          query: route.query || location.query,
	          state: route.state || location.state
	        });
	      };

	      return route;
	    },

	    getRoutePattern: function getRoutePattern(routes, routeIndex) {
	      var parentPattern = '';

	      for (var i = routeIndex; i >= 0; i--) {
	        var route = routes[i];
	        var pattern = route.path || '';

	        parentPattern = pattern.replace(/\/*$/, '/') + parentPattern;

	        if (pattern.indexOf('/') === 0) break;
	      }

	      return '/' + parentPattern;
	    }

	  },

	  propTypes: {
	    path: string,
	    from: string, // Alias for path
	    to: string.isRequired,
	    query: object,
	    state: object,
	    onEnter: _InternalPropTypes.falsy,
	    children: _InternalPropTypes.falsy
	  },

	  /* istanbul ignore next: sanity check */
	  render: function render() {
	     true ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, '<Redirect> elements are for router configuration only and should not be rendered') : _invariant2['default'](false) : undefined;
	  }

	});

	exports['default'] = Redirect;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 674 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _routerWarning = __webpack_require__(654);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _invariant = __webpack_require__(635);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _RouteUtils = __webpack_require__(664);

	var _InternalPropTypes = __webpack_require__(665);

	var func = _react2['default'].PropTypes.func;

	/**
	 * An <IndexRoute> is used to specify its parent's <Route indexRoute> in
	 * a JSX route config.
	 */
	var IndexRoute = _react2['default'].createClass({
	  displayName: 'IndexRoute',

	  statics: {

	    createRouteFromReactElement: function createRouteFromReactElement(element, parentRoute) {
	      /* istanbul ignore else: sanity check */
	      if (parentRoute) {
	        parentRoute.indexRoute = _RouteUtils.createRouteFromReactElement(element);
	      } else {
	        process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, 'An <IndexRoute> does not make sense at the root of your route config') : undefined;
	      }
	    }

	  },

	  propTypes: {
	    path: _InternalPropTypes.falsy,
	    component: _InternalPropTypes.component,
	    components: _InternalPropTypes.components,
	    getComponent: func,
	    getComponents: func
	  },

	  /* istanbul ignore next: sanity check */
	  render: function render() {
	     true ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, '<IndexRoute> elements are for router configuration only and should not be rendered') : _invariant2['default'](false) : undefined;
	  }

	});

	exports['default'] = IndexRoute;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 675 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _invariant = __webpack_require__(635);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _RouteUtils = __webpack_require__(664);

	var _InternalPropTypes = __webpack_require__(665);

	var _React$PropTypes = _react2['default'].PropTypes;
	var string = _React$PropTypes.string;
	var func = _React$PropTypes.func;

	/**
	 * A <Route> is used to declare which components are rendered to the
	 * page when the URL matches a given pattern.
	 *
	 * Routes are arranged in a nested tree structure. When a new URL is
	 * requested, the tree is searched depth-first to find a route whose
	 * path matches the URL.  When one is found, all routes in the tree
	 * that lead to it are considered "active" and their components are
	 * rendered into the DOM, nested in the same order as in the tree.
	 */
	var Route = _react2['default'].createClass({
	  displayName: 'Route',

	  statics: {
	    createRouteFromReactElement: _RouteUtils.createRouteFromReactElement
	  },

	  propTypes: {
	    path: string,
	    component: _InternalPropTypes.component,
	    components: _InternalPropTypes.components,
	    getComponent: func,
	    getComponents: func
	  },

	  /* istanbul ignore next: sanity check */
	  render: function render() {
	     true ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, '<Route> elements are for router configuration only and should not be rendered') : _invariant2['default'](false) : undefined;
	  }

	});

	exports['default'] = Route;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 676 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _routerWarning = __webpack_require__(654);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _InternalPropTypes = __webpack_require__(665);

	/**
	 * A mixin that adds the "history" instance variable to components.
	 */
	var History = {

	  contextTypes: {
	    history: _InternalPropTypes.history
	  },

	  componentWillMount: function componentWillMount() {
	    process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, 'the `History` mixin is deprecated, please access `context.router` with your own `contextTypes`. http://tiny.cc/router-historymixin') : undefined;
	    this.history = this.context.history;
	  }

	};

	exports['default'] = History;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 677 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _routerWarning = __webpack_require__(654);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _invariant = __webpack_require__(635);

	var _invariant2 = _interopRequireDefault(_invariant);

	var object = _react2['default'].PropTypes.object;

	/**
	 * The Lifecycle mixin adds the routerWillLeave lifecycle method to a
	 * component that may be used to cancel a transition or prompt the user
	 * for confirmation.
	 *
	 * On standard transitions, routerWillLeave receives a single argument: the
	 * location we're transitioning to. To cancel the transition, return false.
	 * To prompt the user for confirmation, return a prompt message (string).
	 *
	 * During the beforeunload event (assuming you're using the useBeforeUnload
	 * history enhancer), routerWillLeave does not receive a location object
	 * because it isn't possible for us to know the location we're transitioning
	 * to. In this case routerWillLeave must return a prompt message to prevent
	 * the user from closing the window/tab.
	 */
	var Lifecycle = {

	  contextTypes: {
	    history: object.isRequired,
	    // Nested children receive the route as context, either
	    // set by the route component using the RouteContext mixin
	    // or by some other ancestor.
	    route: object
	  },

	  propTypes: {
	    // Route components receive the route object as a prop.
	    route: object
	  },

	  componentDidMount: function componentDidMount() {
	    process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, 'the `Lifecycle` mixin is deprecated, please use `context.router.setRouteLeaveHook(route, hook)`. http://tiny.cc/router-lifecyclemixin') : undefined;
	    !this.routerWillLeave ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'The Lifecycle mixin requires you to define a routerWillLeave method') : _invariant2['default'](false) : undefined;

	    var route = this.props.route || this.context.route;

	    !route ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'The Lifecycle mixin must be used on either a) a <Route component> or ' + 'b) a descendant of a <Route component> that uses the RouteContext mixin') : _invariant2['default'](false) : undefined;

	    this._unlistenBeforeLeavingRoute = this.context.history.listenBeforeLeavingRoute(route, this.routerWillLeave);
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    if (this._unlistenBeforeLeavingRoute) this._unlistenBeforeLeavingRoute();
	  }

	};

	exports['default'] = Lifecycle;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 678 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _routerWarning = __webpack_require__(654);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var object = _react2['default'].PropTypes.object;

	/**
	 * The RouteContext mixin provides a convenient way for route
	 * components to set the route in context. This is needed for
	 * routes that render elements that want to use the Lifecycle
	 * mixin to prevent transitions.
	 */
	var RouteContext = {

	  propTypes: {
	    route: object.isRequired
	  },

	  childContextTypes: {
	    route: object.isRequired
	  },

	  getChildContext: function getChildContext() {
	    return {
	      route: this.props.route
	    };
	  },

	  componentWillMount: function componentWillMount() {
	    process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, 'The `RouteContext` mixin is deprecated. You can provide `this.props.route` on context with your own `contextTypes`. http://tiny.cc/router-routecontextmixin') : undefined;
	  }

	};

	exports['default'] = RouteContext;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 679 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var _historyLibUseQueries = __webpack_require__(650);

	var _historyLibUseQueries2 = _interopRequireDefault(_historyLibUseQueries);

	var _createTransitionManager = __webpack_require__(653);

	var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);

	var _routerWarning = __webpack_require__(654);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	/**
	 * Returns a new createHistory function that may be used to create
	 * history objects that know about routing.
	 *
	 * Enhances history objects with the following methods:
	 *
	 * - listen((error, nextState) => {})
	 * - listenBeforeLeavingRoute(route, (nextLocation) => {})
	 * - match(location, (error, redirectLocation, nextState) => {})
	 * - isActive(pathname, query, indexOnly=false)
	 */
	function useRoutes(createHistory) {
	  process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, '`useRoutes` is deprecated. Please use `createTransitionManager` instead.') : undefined;

	  return function () {
	    var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    var routes = _ref.routes;

	    var options = _objectWithoutProperties(_ref, ['routes']);

	    var history = _historyLibUseQueries2['default'](createHistory)(options);
	    var transitionManager = _createTransitionManager2['default'](history, routes);
	    return _extends({}, history, transitionManager);
	  };
	}

	exports['default'] = useRoutes;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 680 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _RouterContext = __webpack_require__(666);

	var _RouterContext2 = _interopRequireDefault(_RouterContext);

	var _routerWarning = __webpack_require__(654);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var RoutingContext = _react2['default'].createClass({
	  displayName: 'RoutingContext',

	  componentWillMount: function componentWillMount() {
	    process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, '`RoutingContext` has been renamed to `RouterContext`. Please use `import { RouterContext } from \'react-router\'`. http://tiny.cc/router-routercontext') : undefined;
	  },

	  render: function render() {
	    return _react2['default'].createElement(_RouterContext2['default'], this.props);
	  }
	});

	exports['default'] = RoutingContext;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 681 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var _invariant = __webpack_require__(635);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _createMemoryHistory = __webpack_require__(682);

	var _createMemoryHistory2 = _interopRequireDefault(_createMemoryHistory);

	var _createTransitionManager = __webpack_require__(653);

	var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);

	var _RouteUtils = __webpack_require__(664);

	var _RouterUtils = __webpack_require__(668);

	/**
	 * A high-level API to be used for server-side rendering.
	 *
	 * This function matches a location to a set of routes and calls
	 * callback(error, redirectLocation, renderProps) when finished.
	 *
	 * Note: You probably don't want to use this in a browser unless you're using
	 * server-side rendering with async routes.
	 */
	function match(_ref, callback) {
	  var history = _ref.history;
	  var routes = _ref.routes;
	  var location = _ref.location;

	  var options = _objectWithoutProperties(_ref, ['history', 'routes', 'location']);

	  !(history || location) ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'match needs a history or a location') : _invariant2['default'](false) : undefined;

	  history = history ? history : _createMemoryHistory2['default'](options);
	  var transitionManager = _createTransitionManager2['default'](history, _RouteUtils.createRoutes(routes));

	  var unlisten = undefined;

	  if (location) {
	    // Allow match({ location: '/the/path', ... })
	    location = history.createLocation(location);
	  } else {
	    // Pick up the location from the history via synchronous history.listen
	    // call if needed.
	    unlisten = history.listen(function (historyLocation) {
	      location = historyLocation;
	    });
	  }

	  var router = _RouterUtils.createRouterObject(history, transitionManager);
	  history = _RouterUtils.createRoutingHistory(history, transitionManager);

	  transitionManager.match(location, function (error, redirectLocation, nextState) {
	    callback(error, redirectLocation, nextState && _extends({}, nextState, {
	      history: history,
	      router: router,
	      matchContext: { history: history, transitionManager: transitionManager, router: router }
	    }));

	    // Defer removing the listener to here to prevent DOM histories from having
	    // to unwind DOM event listeners unnecessarily, in case callback renders a
	    // <Router> and attaches another history listener.
	    if (unlisten) {
	      unlisten();
	    }
	  });
	}

	exports['default'] = match;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 682 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = createMemoryHistory;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _historyLibUseQueries = __webpack_require__(650);

	var _historyLibUseQueries2 = _interopRequireDefault(_historyLibUseQueries);

	var _historyLibUseBasename = __webpack_require__(683);

	var _historyLibUseBasename2 = _interopRequireDefault(_historyLibUseBasename);

	var _historyLibCreateMemoryHistory = __webpack_require__(684);

	var _historyLibCreateMemoryHistory2 = _interopRequireDefault(_historyLibCreateMemoryHistory);

	function createMemoryHistory(options) {
	  // signatures and type checking differ between `useRoutes` and
	  // `createMemoryHistory`, have to create `memoryHistory` first because
	  // `useQueries` doesn't understand the signature
	  var memoryHistory = _historyLibCreateMemoryHistory2['default'](options);
	  var createHistory = function createHistory() {
	    return memoryHistory;
	  };
	  var history = _historyLibUseQueries2['default'](_historyLibUseBasename2['default'](createHistory))(options);
	  history.__v2_compatible__ = true;
	  return history;
	}

	module.exports = exports['default'];

/***/ },
/* 683 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(634);

	var _warning2 = _interopRequireDefault(_warning);

	var _ExecutionEnvironment = __webpack_require__(638);

	var _PathUtils = __webpack_require__(637);

	var _runTransitionHook = __webpack_require__(648);

	var _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);

	var _deprecate = __webpack_require__(649);

	var _deprecate2 = _interopRequireDefault(_deprecate);

	function useBasename(createHistory) {
	  return function () {
	    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    var history = createHistory(options);

	    var basename = options.basename;

	    var checkedBaseHref = false;

	    function checkBaseHref() {
	      if (checkedBaseHref) {
	        return;
	      }

	      // Automatically use the value of <base href> in HTML
	      // documents as basename if it's not explicitly given.
	      if (basename == null && _ExecutionEnvironment.canUseDOM) {
	        var base = document.getElementsByTagName('base')[0];
	        var baseHref = base && base.getAttribute('href');

	        if (baseHref != null) {
	          basename = baseHref;

	          process.env.NODE_ENV !== 'production' ? _warning2['default'](false, 'Automatically setting basename using <base href> is deprecated and will ' + 'be removed in the next major release. The semantics of <base href> are ' + 'subtly different from basename. Please pass the basename explicitly in ' + 'the options to createHistory') : undefined;
	        }
	      }

	      checkedBaseHref = true;
	    }

	    function addBasename(location) {
	      checkBaseHref();

	      if (basename && location.basename == null) {
	        if (location.pathname.indexOf(basename) === 0) {
	          location.pathname = location.pathname.substring(basename.length);
	          location.basename = basename;

	          if (location.pathname === '') location.pathname = '/';
	        } else {
	          location.basename = '';
	        }
	      }

	      return location;
	    }

	    function prependBasename(location) {
	      checkBaseHref();

	      if (!basename) return location;

	      if (typeof location === 'string') location = _PathUtils.parsePath(location);

	      var pname = location.pathname;
	      var normalizedBasename = basename.slice(-1) === '/' ? basename : basename + '/';
	      var normalizedPathname = pname.charAt(0) === '/' ? pname.slice(1) : pname;
	      var pathname = normalizedBasename + normalizedPathname;

	      return _extends({}, location, {
	        pathname: pathname
	      });
	    }

	    // Override all read methods with basename-aware versions.
	    function listenBefore(hook) {
	      return history.listenBefore(function (location, callback) {
	        _runTransitionHook2['default'](hook, addBasename(location), callback);
	      });
	    }

	    function listen(listener) {
	      return history.listen(function (location) {
	        listener(addBasename(location));
	      });
	    }

	    // Override all write methods with basename-aware versions.
	    function push(location) {
	      history.push(prependBasename(location));
	    }

	    function replace(location) {
	      history.replace(prependBasename(location));
	    }

	    function createPath(location) {
	      return history.createPath(prependBasename(location));
	    }

	    function createHref(location) {
	      return history.createHref(prependBasename(location));
	    }

	    function createLocation(location) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      return addBasename(history.createLocation.apply(history, [prependBasename(location)].concat(args)));
	    }

	    // deprecated
	    function pushState(state, path) {
	      if (typeof path === 'string') path = _PathUtils.parsePath(path);

	      push(_extends({ state: state }, path));
	    }

	    // deprecated
	    function replaceState(state, path) {
	      if (typeof path === 'string') path = _PathUtils.parsePath(path);

	      replace(_extends({ state: state }, path));
	    }

	    return _extends({}, history, {
	      listenBefore: listenBefore,
	      listen: listen,
	      push: push,
	      replace: replace,
	      createPath: createPath,
	      createHref: createHref,
	      createLocation: createLocation,

	      pushState: _deprecate2['default'](pushState, 'pushState is deprecated; use push instead'),
	      replaceState: _deprecate2['default'](replaceState, 'replaceState is deprecated; use replace instead')
	    });
	  };
	}

	exports['default'] = useBasename;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 684 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(634);

	var _warning2 = _interopRequireDefault(_warning);

	var _invariant = __webpack_require__(635);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _PathUtils = __webpack_require__(637);

	var _Actions = __webpack_require__(636);

	var _createHistory = __webpack_require__(642);

	var _createHistory2 = _interopRequireDefault(_createHistory);

	function createStateStorage(entries) {
	  return entries.filter(function (entry) {
	    return entry.state;
	  }).reduce(function (memo, entry) {
	    memo[entry.key] = entry.state;
	    return memo;
	  }, {});
	}

	function createMemoryHistory() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	  if (Array.isArray(options)) {
	    options = { entries: options };
	  } else if (typeof options === 'string') {
	    options = { entries: [options] };
	  }

	  var history = _createHistory2['default'](_extends({}, options, {
	    getCurrentLocation: getCurrentLocation,
	    finishTransition: finishTransition,
	    saveState: saveState,
	    go: go
	  }));

	  var _options = options;
	  var entries = _options.entries;
	  var current = _options.current;

	  if (typeof entries === 'string') {
	    entries = [entries];
	  } else if (!Array.isArray(entries)) {
	    entries = ['/'];
	  }

	  entries = entries.map(function (entry) {
	    var key = history.createKey();

	    if (typeof entry === 'string') return { pathname: entry, key: key };

	    if (typeof entry === 'object' && entry) return _extends({}, entry, { key: key });

	     true ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Unable to create history entry from %s', entry) : _invariant2['default'](false) : undefined;
	  });

	  if (current == null) {
	    current = entries.length - 1;
	  } else {
	    !(current >= 0 && current < entries.length) ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Current index must be >= 0 and < %s, was %s', entries.length, current) : _invariant2['default'](false) : undefined;
	  }

	  var storage = createStateStorage(entries);

	  function saveState(key, state) {
	    storage[key] = state;
	  }

	  function readState(key) {
	    return storage[key];
	  }

	  function getCurrentLocation() {
	    var entry = entries[current];
	    var basename = entry.basename;
	    var pathname = entry.pathname;
	    var search = entry.search;

	    var path = (basename || '') + pathname + (search || '');

	    var key = undefined,
	        state = undefined;
	    if (entry.key) {
	      key = entry.key;
	      state = readState(key);
	    } else {
	      key = history.createKey();
	      state = null;
	      entry.key = key;
	    }

	    var location = _PathUtils.parsePath(path);

	    return history.createLocation(_extends({}, location, { state: state }), undefined, key);
	  }

	  function canGo(n) {
	    var index = current + n;
	    return index >= 0 && index < entries.length;
	  }

	  function go(n) {
	    if (n) {
	      if (!canGo(n)) {
	        process.env.NODE_ENV !== 'production' ? _warning2['default'](false, 'Cannot go(%s) there is not enough history', n) : undefined;
	        return;
	      }

	      current += n;

	      var currentLocation = getCurrentLocation();

	      // change action to POP
	      history.transitionTo(_extends({}, currentLocation, { action: _Actions.POP }));
	    }
	  }

	  function finishTransition(location) {
	    switch (location.action) {
	      case _Actions.PUSH:
	        current += 1;

	        // if we are not on the top of stack
	        // remove rest and push new
	        if (current < entries.length) entries.splice(current);

	        entries.push(location);
	        saveState(location.key, location.state);
	        break;
	      case _Actions.REPLACE:
	        entries[current] = location;
	        saveState(location.key, location.state);
	        break;
	    }
	  }

	  return history;
	}

	exports['default'] = createMemoryHistory;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 685 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = useRouterHistory;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _historyLibUseQueries = __webpack_require__(650);

	var _historyLibUseQueries2 = _interopRequireDefault(_historyLibUseQueries);

	var _historyLibUseBasename = __webpack_require__(683);

	var _historyLibUseBasename2 = _interopRequireDefault(_historyLibUseBasename);

	function useRouterHistory(createHistory) {
	  return function (options) {
	    var history = _historyLibUseQueries2['default'](_historyLibUseBasename2['default'](createHistory))(options);
	    history.__v2_compatible__ = true;
	    return history;
	  };
	}

	module.exports = exports['default'];

/***/ },
/* 686 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _RouterContext = __webpack_require__(666);

	var _RouterContext2 = _interopRequireDefault(_RouterContext);

	exports['default'] = function () {
	  for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key < _len; _key++) {
	    middlewares[_key] = arguments[_key];
	  }

	  var withContext = middlewares.map(function (m) {
	    return m.renderRouterContext;
	  }).filter(function (f) {
	    return f;
	  });
	  var withComponent = middlewares.map(function (m) {
	    return m.renderRouteComponent;
	  }).filter(function (f) {
	    return f;
	  });
	  var makeCreateElement = function makeCreateElement() {
	    var baseCreateElement = arguments.length <= 0 || arguments[0] === undefined ? _react.createElement : arguments[0];
	    return function (Component, props) {
	      return withComponent.reduceRight(function (previous, renderRouteComponent) {
	        return renderRouteComponent(previous, props);
	      }, baseCreateElement(Component, props));
	    };
	  };

	  return function (renderProps) {
	    return withContext.reduceRight(function (previous, renderRouterContext) {
	      return renderRouterContext(previous, renderProps);
	    }, _react2['default'].createElement(_RouterContext2['default'], _extends({}, renderProps, {
	      createElement: makeCreateElement(renderProps.createElement)
	    })));
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 687 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _historyLibCreateBrowserHistory = __webpack_require__(688);

	var _historyLibCreateBrowserHistory2 = _interopRequireDefault(_historyLibCreateBrowserHistory);

	var _createRouterHistory = __webpack_require__(689);

	var _createRouterHistory2 = _interopRequireDefault(_createRouterHistory);

	exports['default'] = _createRouterHistory2['default'](_historyLibCreateBrowserHistory2['default']);
	module.exports = exports['default'];

/***/ },
/* 688 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _invariant = __webpack_require__(635);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _Actions = __webpack_require__(636);

	var _PathUtils = __webpack_require__(637);

	var _ExecutionEnvironment = __webpack_require__(638);

	var _DOMUtils = __webpack_require__(639);

	var _DOMStateStorage = __webpack_require__(640);

	var _createDOMHistory = __webpack_require__(641);

	var _createDOMHistory2 = _interopRequireDefault(_createDOMHistory);

	/**
	 * Creates and returns a history object that uses HTML5's history API
	 * (pushState, replaceState, and the popstate event) to manage history.
	 * This is the recommended method of managing history in browsers because
	 * it provides the cleanest URLs.
	 *
	 * Note: In browsers that do not support the HTML5 history API full
	 * page reloads will be used to preserve URLs.
	 */
	function createBrowserHistory() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	  !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Browser history needs a DOM') : _invariant2['default'](false) : undefined;

	  var forceRefresh = options.forceRefresh;

	  var isSupported = _DOMUtils.supportsHistory();
	  var useRefresh = !isSupported || forceRefresh;

	  function getCurrentLocation(historyState) {
	    try {
	      historyState = historyState || window.history.state || {};
	    } catch (e) {
	      historyState = {};
	    }

	    var path = _DOMUtils.getWindowPath();
	    var _historyState = historyState;
	    var key = _historyState.key;

	    var state = undefined;
	    if (key) {
	      state = _DOMStateStorage.readState(key);
	    } else {
	      state = null;
	      key = history.createKey();

	      if (isSupported) window.history.replaceState(_extends({}, historyState, { key: key }), null);
	    }

	    var location = _PathUtils.parsePath(path);

	    return history.createLocation(_extends({}, location, { state: state }), undefined, key);
	  }

	  function startPopStateListener(_ref) {
	    var transitionTo = _ref.transitionTo;

	    function popStateListener(event) {
	      if (event.state === undefined) return; // Ignore extraneous popstate events in WebKit.

	      transitionTo(getCurrentLocation(event.state));
	    }

	    _DOMUtils.addEventListener(window, 'popstate', popStateListener);

	    return function () {
	      _DOMUtils.removeEventListener(window, 'popstate', popStateListener);
	    };
	  }

	  function finishTransition(location) {
	    var basename = location.basename;
	    var pathname = location.pathname;
	    var search = location.search;
	    var hash = location.hash;
	    var state = location.state;
	    var action = location.action;
	    var key = location.key;

	    if (action === _Actions.POP) return; // Nothing to do.

	    _DOMStateStorage.saveState(key, state);

	    var path = (basename || '') + pathname + search + hash;
	    var historyState = {
	      key: key
	    };

	    if (action === _Actions.PUSH) {
	      if (useRefresh) {
	        window.location.href = path;
	        return false; // Prevent location update.
	      } else {
	          window.history.pushState(historyState, null, path);
	        }
	    } else {
	      // REPLACE
	      if (useRefresh) {
	        window.location.replace(path);
	        return false; // Prevent location update.
	      } else {
	          window.history.replaceState(historyState, null, path);
	        }
	    }
	  }

	  var history = _createDOMHistory2['default'](_extends({}, options, {
	    getCurrentLocation: getCurrentLocation,
	    finishTransition: finishTransition,
	    saveState: _DOMStateStorage.saveState
	  }));

	  var listenerCount = 0,
	      stopPopStateListener = undefined;

	  function listenBefore(listener) {
	    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);

	    var unlisten = history.listenBefore(listener);

	    return function () {
	      unlisten();

	      if (--listenerCount === 0) stopPopStateListener();
	    };
	  }

	  function listen(listener) {
	    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);

	    var unlisten = history.listen(listener);

	    return function () {
	      unlisten();

	      if (--listenerCount === 0) stopPopStateListener();
	    };
	  }

	  // deprecated
	  function registerTransitionHook(hook) {
	    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);

	    history.registerTransitionHook(hook);
	  }

	  // deprecated
	  function unregisterTransitionHook(hook) {
	    history.unregisterTransitionHook(hook);

	    if (--listenerCount === 0) stopPopStateListener();
	  }

	  return _extends({}, history, {
	    listenBefore: listenBefore,
	    listen: listen,
	    registerTransitionHook: registerTransitionHook,
	    unregisterTransitionHook: unregisterTransitionHook
	  });
	}

	exports['default'] = createBrowserHistory;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 689 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _useRouterHistory = __webpack_require__(685);

	var _useRouterHistory2 = _interopRequireDefault(_useRouterHistory);

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	exports['default'] = function (createHistory) {
	  var history = undefined;
	  if (canUseDOM) history = _useRouterHistory2['default'](createHistory)();
	  return history;
	};

	module.exports = exports['default'];

/***/ },
/* 690 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _historyLibCreateHashHistory = __webpack_require__(633);

	var _historyLibCreateHashHistory2 = _interopRequireDefault(_historyLibCreateHashHistory);

	var _createRouterHistory = __webpack_require__(689);

	var _createRouterHistory2 = _interopRequireDefault(_createRouterHistory);

	exports['default'] = _createRouterHistory2['default'](_historyLibCreateHashHistory2['default']);
	module.exports = exports['default'];

/***/ },
/* 691 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports.compose = exports.applyMiddleware = exports.bindActionCreators = exports.combineReducers = exports.createStore = undefined;

	var _createStore = __webpack_require__(692);

	var _createStore2 = _interopRequireDefault(_createStore);

	var _combineReducers = __webpack_require__(706);

	var _combineReducers2 = _interopRequireDefault(_combineReducers);

	var _bindActionCreators = __webpack_require__(708);

	var _bindActionCreators2 = _interopRequireDefault(_bindActionCreators);

	var _applyMiddleware = __webpack_require__(709);

	var _applyMiddleware2 = _interopRequireDefault(_applyMiddleware);

	var _compose = __webpack_require__(710);

	var _compose2 = _interopRequireDefault(_compose);

	var _warning = __webpack_require__(707);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/*
	* This is a dummy function to check if the function name has been altered by minification.
	* If the function has been minified and NODE_ENV !== 'production', warn the user.
	*/
	function isCrushed() {}

	if (process.env.NODE_ENV !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {
	  (0, _warning2['default'])('You are currently using minified code outside of NODE_ENV === \'production\'. ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or DefinePlugin for webpack (http://stackoverflow.com/questions/30030031) ' + 'to ensure you have the correct code for your production build.');
	}

	exports.createStore = _createStore2['default'];
	exports.combineReducers = _combineReducers2['default'];
	exports.bindActionCreators = _bindActionCreators2['default'];
	exports.applyMiddleware = _applyMiddleware2['default'];
	exports.compose = _compose2['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 692 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.ActionTypes = undefined;
	exports['default'] = createStore;

	var _isPlainObject = __webpack_require__(693);

	var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

	var _symbolObservable = __webpack_require__(703);

	var _symbolObservable2 = _interopRequireDefault(_symbolObservable);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * These are private action types reserved by Redux.
	 * For any unknown actions, you must return the current state.
	 * If the current state is undefined, you must return the initial state.
	 * Do not reference these action types directly in your code.
	 */
	var ActionTypes = exports.ActionTypes = {
	  INIT: '@@redux/INIT'

	  /**
	   * Creates a Redux store that holds the state tree.
	   * The only way to change the data in the store is to call `dispatch()` on it.
	   *
	   * There should only be a single store in your app. To specify how different
	   * parts of the state tree respond to actions you may combine several reducers
	   * into a single reducer function by using `combineReducers`.
	   *
	   * @param {Function} reducer A function that returns the next state tree given
	   * the current state tree and the action to handle.
	   *
	   * @param {any} [preloadedState] The initial state. You may optionally specify it
	   * to hydrate the state from the server in universal apps or to restore a
	   * previously serialized user session.
	   * If you use `combineReducers` to produce the root reducer function this must be
	   * an object with the same shape as `combineReducers` keys.
	   *
	   * @param {Function} [enhancer] The store enhancer. You may optionally specify it
	   * to enhance the store with third-party capabilities such as middleware
	   * time travel persistence etc. The only store enhancer that ships with Redux
	   * is `applyMiddleware()`.
	   *
	   * @returns {Store} A Redux store that lets you read the state dispatch actions
	   * and subscribe to changes.
	   */
	};function createStore(reducer, preloadedState, enhancer) {
	  var _ref2;

	  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {
	    enhancer = preloadedState;
	    preloadedState = undefined;
	  }

	  if (typeof enhancer !== 'undefined') {
	    if (typeof enhancer !== 'function') {
	      throw new Error('Expected the enhancer to be a function.');
	    }

	    return enhancer(createStore)(reducer, preloadedState);
	  }

	  if (typeof reducer !== 'function') {
	    throw new Error('Expected the reducer to be a function.');
	  }

	  var currentReducer = reducer;
	  var currentState = preloadedState;
	  var currentListeners = [];
	  var nextListeners = currentListeners;
	  var isDispatching = false;

	  function ensureCanMutateNextListeners() {
	    if (nextListeners === currentListeners) {
	      nextListeners = currentListeners.slice();
	    }
	  }

	  /**
	   * Reads the state tree managed by the store.
	   *
	   * @returns {any} The current state tree of your application.
	   */
	  function getState() {
	    return currentState;
	  }

	  /**
	   * Adds a change listener. It will be called any time an action is dispatched,
	   * and some part of the state tree may potentially have changed. You may then
	   * call `getState()` to read the current state tree inside the callback.
	   *
	   * You may call `dispatch()` from a change listener, with the following
	   * caveats:
	   *
	   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
	   * If you subscribe or unsubscribe while the listeners are being invoked, this
	   * will not have any effect on the `dispatch()` that is currently in progress.
	   * However, the next `dispatch()` call, whether nested or not, will use a more
	   * recent snapshot of the subscription list.
	   *
	   * 2. The listener should not expect to see all state changes, as the state
	   * might have been updated multiple times during a nested `dispatch()` before
	   * the listener is called. It is, however, guaranteed that all subscribers
	   * registered before the `dispatch()` started will be called with the latest
	   * state by the time it exits.
	   *
	   * @param {Function} listener A callback to be invoked on every dispatch.
	   * @returns {Function} A function to remove this change listener.
	   */
	  function subscribe(listener) {
	    if (typeof listener !== 'function') {
	      throw new Error('Expected listener to be a function.');
	    }

	    var isSubscribed = true;

	    ensureCanMutateNextListeners();
	    nextListeners.push(listener);

	    return function unsubscribe() {
	      if (!isSubscribed) {
	        return;
	      }

	      isSubscribed = false;

	      ensureCanMutateNextListeners();
	      var index = nextListeners.indexOf(listener);
	      nextListeners.splice(index, 1);
	    };
	  }

	  /**
	   * Dispatches an action. It is the only way to trigger a state change.
	   *
	   * The `reducer` function, used to create the store, will be called with the
	   * current state tree and the given `action`. Its return value will
	   * be considered the **next** state of the tree, and the change listeners
	   * will be notified.
	   *
	   * The base implementation only supports plain object actions. If you want to
	   * dispatch a Promise, an Observable, a thunk, or something else, you need to
	   * wrap your store creating function into the corresponding middleware. For
	   * example, see the documentation for the `redux-thunk` package. Even the
	   * middleware will eventually dispatch plain object actions using this method.
	   *
	   * @param {Object} action A plain object representing “what changed”. It is
	   * a good idea to keep actions serializable so you can record and replay user
	   * sessions, or use the time travelling `redux-devtools`. An action must have
	   * a `type` property which may not be `undefined`. It is a good idea to use
	   * string constants for action types.
	   *
	   * @returns {Object} For convenience, the same action object you dispatched.
	   *
	   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
	   * return something else (for example, a Promise you can await).
	   */
	  function dispatch(action) {
	    if (!(0, _isPlainObject2['default'])(action)) {
	      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');
	    }

	    if (typeof action.type === 'undefined') {
	      throw new Error('Actions may not have an undefined "type" property. ' + 'Have you misspelled a constant?');
	    }

	    if (isDispatching) {
	      throw new Error('Reducers may not dispatch actions.');
	    }

	    try {
	      isDispatching = true;
	      currentState = currentReducer(currentState, action);
	    } finally {
	      isDispatching = false;
	    }

	    var listeners = currentListeners = nextListeners;
	    for (var i = 0; i < listeners.length; i++) {
	      var listener = listeners[i];
	      listener();
	    }

	    return action;
	  }

	  /**
	   * Replaces the reducer currently used by the store to calculate the state.
	   *
	   * You might need this if your app implements code splitting and you want to
	   * load some of the reducers dynamically. You might also need this if you
	   * implement a hot reloading mechanism for Redux.
	   *
	   * @param {Function} nextReducer The reducer for the store to use instead.
	   * @returns {void}
	   */
	  function replaceReducer(nextReducer) {
	    if (typeof nextReducer !== 'function') {
	      throw new Error('Expected the nextReducer to be a function.');
	    }

	    currentReducer = nextReducer;
	    dispatch({ type: ActionTypes.INIT });
	  }

	  /**
	   * Interoperability point for observable/reactive libraries.
	   * @returns {observable} A minimal observable of state changes.
	   * For more information, see the observable proposal:
	   * https://github.com/tc39/proposal-observable
	   */
	  function observable() {
	    var _ref;

	    var outerSubscribe = subscribe;
	    return _ref = {
	      /**
	       * The minimal observable subscription method.
	       * @param {Object} observer Any object that can be used as an observer.
	       * The observer object should have a `next` method.
	       * @returns {subscription} An object with an `unsubscribe` method that can
	       * be used to unsubscribe the observable from the store, and prevent further
	       * emission of values from the observable.
	       */
	      subscribe: function subscribe(observer) {
	        if (typeof observer !== 'object') {
	          throw new TypeError('Expected the observer to be an object.');
	        }

	        function observeState() {
	          if (observer.next) {
	            observer.next(getState());
	          }
	        }

	        observeState();
	        var unsubscribe = outerSubscribe(observeState);
	        return { unsubscribe: unsubscribe };
	      }
	    }, _ref[_symbolObservable2['default']] = function () {
	      return this;
	    }, _ref;
	  }

	  // When a store is created, an "INIT" action is dispatched so that every
	  // reducer returns their initial state. This effectively populates
	  // the initial state tree.
	  dispatch({ type: ActionTypes.INIT });

	  return _ref2 = {
	    dispatch: dispatch,
	    subscribe: subscribe,
	    getState: getState,
	    replaceReducer: replaceReducer
	  }, _ref2[_symbolObservable2['default']] = observable, _ref2;
	}

/***/ },
/* 693 */
/***/ function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(694),
	    getPrototype = __webpack_require__(700),
	    isObjectLike = __webpack_require__(702);

	/** `Object#toString` result references. */
	var objectTag = '[object Object]';

	/** Used for built-in method references. */
	var funcProto = Function.prototype,
	    objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Used to infer the `Object` constructor. */
	var objectCtorString = funcToString.call(Object);

	/**
	 * Checks if `value` is a plain object, that is, an object created by the
	 * `Object` constructor or one with a `[[Prototype]]` of `null`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.8.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * _.isPlainObject(new Foo);
	 * // => false
	 *
	 * _.isPlainObject([1, 2, 3]);
	 * // => false
	 *
	 * _.isPlainObject({ 'x': 0, 'y': 0 });
	 * // => true
	 *
	 * _.isPlainObject(Object.create(null));
	 * // => true
	 */
	function isPlainObject(value) {
	  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
	    return false;
	  }
	  var proto = getPrototype(value);
	  if (proto === null) {
	    return true;
	  }
	  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
	  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
	    funcToString.call(Ctor) == objectCtorString;
	}

	module.exports = isPlainObject;


/***/ },
/* 694 */
/***/ function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(695),
	    getRawTag = __webpack_require__(698),
	    objectToString = __webpack_require__(699);

	/** `Object#toString` result references. */
	var nullTag = '[object Null]',
	    undefinedTag = '[object Undefined]';

	/** Built-in value references. */
	var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

	/**
	 * The base implementation of `getTag` without fallbacks for buggy environments.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	  if (value == null) {
	    return value === undefined ? undefinedTag : nullTag;
	  }
	  return (symToStringTag && symToStringTag in Object(value))
	    ? getRawTag(value)
	    : objectToString(value);
	}

	module.exports = baseGetTag;


/***/ },
/* 695 */
/***/ function(module, exports, __webpack_require__) {

	var root = __webpack_require__(696);

	/** Built-in value references. */
	var Symbol = root.Symbol;

	module.exports = Symbol;


/***/ },
/* 696 */
/***/ function(module, exports, __webpack_require__) {

	var freeGlobal = __webpack_require__(697);

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();

	module.exports = root;


/***/ },
/* 697 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

	module.exports = freeGlobal;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 698 */
/***/ function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(695);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;

	/** Built-in value references. */
	var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

	/**
	 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the raw `toStringTag`.
	 */
	function getRawTag(value) {
	  var isOwn = hasOwnProperty.call(value, symToStringTag),
	      tag = value[symToStringTag];

	  try {
	    value[symToStringTag] = undefined;
	    var unmasked = true;
	  } catch (e) {}

	  var result = nativeObjectToString.call(value);
	  if (unmasked) {
	    if (isOwn) {
	      value[symToStringTag] = tag;
	    } else {
	      delete value[symToStringTag];
	    }
	  }
	  return result;
	}

	module.exports = getRawTag;


/***/ },
/* 699 */
/***/ function(module, exports) {

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;

	/**
	 * Converts `value` to a string using `Object.prototype.toString`.
	 *
	 * @private
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 */
	function objectToString(value) {
	  return nativeObjectToString.call(value);
	}

	module.exports = objectToString;


/***/ },
/* 700 */
/***/ function(module, exports, __webpack_require__) {

	var overArg = __webpack_require__(701);

	/** Built-in value references. */
	var getPrototype = overArg(Object.getPrototypeOf, Object);

	module.exports = getPrototype;


/***/ },
/* 701 */
/***/ function(module, exports) {

	/**
	 * Creates a unary function that invokes `func` with its argument transformed.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} transform The argument transform.
	 * @returns {Function} Returns the new function.
	 */
	function overArg(func, transform) {
	  return function(arg) {
	    return func(transform(arg));
	  };
	}

	module.exports = overArg;


/***/ },
/* 702 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return value != null && typeof value == 'object';
	}

	module.exports = isObjectLike;


/***/ },
/* 703 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, module) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _ponyfill = __webpack_require__(705);

	var _ponyfill2 = _interopRequireDefault(_ponyfill);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var root; /* global window */


	if (typeof self !== 'undefined') {
	  root = self;
	} else if (typeof window !== 'undefined') {
	  root = window;
	} else if (typeof global !== 'undefined') {
	  root = global;
	} else if (true) {
	  root = module;
	} else {
	  root = Function('return this')();
	}

	var result = (0, _ponyfill2['default'])(root);
	exports['default'] = result;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(704)(module)))

/***/ },
/* 704 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 705 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports['default'] = symbolObservablePonyfill;
	function symbolObservablePonyfill(root) {
		var result;
		var _Symbol = root.Symbol;

		if (typeof _Symbol === 'function') {
			if (_Symbol.observable) {
				result = _Symbol.observable;
			} else {
				result = _Symbol('observable');
				_Symbol.observable = result;
			}
		} else {
			result = '@@observable';
		}

		return result;
	};

/***/ },
/* 706 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports['default'] = combineReducers;

	var _createStore = __webpack_require__(692);

	var _isPlainObject = __webpack_require__(693);

	var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

	var _warning = __webpack_require__(707);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function getUndefinedStateErrorMessage(key, action) {
	  var actionType = action && action.type;
	  var actionName = actionType && '"' + actionType.toString() + '"' || 'an action';

	  return 'Given action ' + actionName + ', reducer "' + key + '" returned undefined. ' + 'To ignore an action, you must explicitly return the previous state. ' + 'If you want this reducer to hold no value, you can return null instead of undefined.';
	}

	function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {
	  var reducerKeys = Object.keys(reducers);
	  var argumentName = action && action.type === _createStore.ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';

	  if (reducerKeys.length === 0) {
	    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';
	  }

	  if (!(0, _isPlainObject2['default'])(inputState)) {
	    return 'The ' + argumentName + ' has unexpected type of "' + {}.toString.call(inputState).match(/\s([a-z|A-Z]+)/)[1] + '". Expected argument to be an object with the following ' + ('keys: "' + reducerKeys.join('", "') + '"');
	  }

	  var unexpectedKeys = Object.keys(inputState).filter(function (key) {
	    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];
	  });

	  unexpectedKeys.forEach(function (key) {
	    unexpectedKeyCache[key] = true;
	  });

	  if (unexpectedKeys.length > 0) {
	    return 'Unexpected ' + (unexpectedKeys.length > 1 ? 'keys' : 'key') + ' ' + ('"' + unexpectedKeys.join('", "') + '" found in ' + argumentName + '. ') + 'Expected to find one of the known reducer keys instead: ' + ('"' + reducerKeys.join('", "') + '". Unexpected keys will be ignored.');
	  }
	}

	function assertReducerShape(reducers) {
	  Object.keys(reducers).forEach(function (key) {
	    var reducer = reducers[key];
	    var initialState = reducer(undefined, { type: _createStore.ActionTypes.INIT });

	    if (typeof initialState === 'undefined') {
	      throw new Error('Reducer "' + key + '" returned undefined during initialization. ' + 'If the state passed to the reducer is undefined, you must ' + 'explicitly return the initial state. The initial state may ' + 'not be undefined. If you don\'t want to set a value for this reducer, ' + 'you can use null instead of undefined.');
	    }

	    var type = '@@redux/PROBE_UNKNOWN_ACTION_' + Math.random().toString(36).substring(7).split('').join('.');
	    if (typeof reducer(undefined, { type: type }) === 'undefined') {
	      throw new Error('Reducer "' + key + '" returned undefined when probed with a random type. ' + ('Don\'t try to handle ' + _createStore.ActionTypes.INIT + ' or other actions in "redux/*" ') + 'namespace. They are considered private. Instead, you must return the ' + 'current state for any unknown actions, unless it is undefined, ' + 'in which case you must return the initial state, regardless of the ' + 'action type. The initial state may not be undefined, but can be null.');
	    }
	  });
	}

	/**
	 * Turns an object whose values are different reducer functions, into a single
	 * reducer function. It will call every child reducer, and gather their results
	 * into a single state object, whose keys correspond to the keys of the passed
	 * reducer functions.
	 *
	 * @param {Object} reducers An object whose values correspond to different
	 * reducer functions that need to be combined into one. One handy way to obtain
	 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
	 * undefined for any action. Instead, they should return their initial state
	 * if the state passed to them was undefined, and the current state for any
	 * unrecognized action.
	 *
	 * @returns {Function} A reducer function that invokes every reducer inside the
	 * passed object, and builds a state object with the same shape.
	 */
	function combineReducers(reducers) {
	  var reducerKeys = Object.keys(reducers);
	  var finalReducers = {};
	  for (var i = 0; i < reducerKeys.length; i++) {
	    var key = reducerKeys[i];

	    if (process.env.NODE_ENV !== 'production') {
	      if (typeof reducers[key] === 'undefined') {
	        (0, _warning2['default'])('No reducer provided for key "' + key + '"');
	      }
	    }

	    if (typeof reducers[key] === 'function') {
	      finalReducers[key] = reducers[key];
	    }
	  }
	  var finalReducerKeys = Object.keys(finalReducers);

	  var unexpectedKeyCache = void 0;
	  if (process.env.NODE_ENV !== 'production') {
	    unexpectedKeyCache = {};
	  }

	  var shapeAssertionError = void 0;
	  try {
	    assertReducerShape(finalReducers);
	  } catch (e) {
	    shapeAssertionError = e;
	  }

	  return function combination() {
	    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    var action = arguments[1];

	    if (shapeAssertionError) {
	      throw shapeAssertionError;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);
	      if (warningMessage) {
	        (0, _warning2['default'])(warningMessage);
	      }
	    }

	    var hasChanged = false;
	    var nextState = {};
	    for (var _i = 0; _i < finalReducerKeys.length; _i++) {
	      var _key = finalReducerKeys[_i];
	      var reducer = finalReducers[_key];
	      var previousStateForKey = state[_key];
	      var nextStateForKey = reducer(previousStateForKey, action);
	      if (typeof nextStateForKey === 'undefined') {
	        var errorMessage = getUndefinedStateErrorMessage(_key, action);
	        throw new Error(errorMessage);
	      }
	      nextState[_key] = nextStateForKey;
	      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
	    }
	    return hasChanged ? nextState : state;
	  };
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 707 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = warning;
	/**
	 * Prints a warning in the console if it exists.
	 *
	 * @param {String} message The warning message.
	 * @returns {void}
	 */
	function warning(message) {
	  /* eslint-disable no-console */
	  if (typeof console !== 'undefined' && typeof console.error === 'function') {
	    console.error(message);
	  }
	  /* eslint-enable no-console */
	  try {
	    // This error was thrown as a convenience so that if you enable
	    // "break on all exceptions" in your console,
	    // it would pause the execution at this line.
	    throw new Error(message);
	    /* eslint-disable no-empty */
	  } catch (e) {}
	  /* eslint-enable no-empty */
	}

/***/ },
/* 708 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = bindActionCreators;
	function bindActionCreator(actionCreator, dispatch) {
	  return function () {
	    return dispatch(actionCreator.apply(undefined, arguments));
	  };
	}

	/**
	 * Turns an object whose values are action creators, into an object with the
	 * same keys, but with every function wrapped into a `dispatch` call so they
	 * may be invoked directly. This is just a convenience method, as you can call
	 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
	 *
	 * For convenience, you can also pass a single function as the first argument,
	 * and get a function in return.
	 *
	 * @param {Function|Object} actionCreators An object whose values are action
	 * creator functions. One handy way to obtain it is to use ES6 `import * as`
	 * syntax. You may also pass a single function.
	 *
	 * @param {Function} dispatch The `dispatch` function available on your Redux
	 * store.
	 *
	 * @returns {Function|Object} The object mimicking the original object, but with
	 * every action creator wrapped into the `dispatch` call. If you passed a
	 * function as `actionCreators`, the return value will also be a single
	 * function.
	 */
	function bindActionCreators(actionCreators, dispatch) {
	  if (typeof actionCreators === 'function') {
	    return bindActionCreator(actionCreators, dispatch);
	  }

	  if (typeof actionCreators !== 'object' || actionCreators === null) {
	    throw new Error('bindActionCreators expected an object or a function, instead received ' + (actionCreators === null ? 'null' : typeof actionCreators) + '. ' + 'Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');
	  }

	  var keys = Object.keys(actionCreators);
	  var boundActionCreators = {};
	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i];
	    var actionCreator = actionCreators[key];
	    if (typeof actionCreator === 'function') {
	      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
	    }
	  }
	  return boundActionCreators;
	}

/***/ },
/* 709 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports['default'] = applyMiddleware;

	var _compose = __webpack_require__(710);

	var _compose2 = _interopRequireDefault(_compose);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * Creates a store enhancer that applies middleware to the dispatch method
	 * of the Redux store. This is handy for a variety of tasks, such as expressing
	 * asynchronous actions in a concise manner, or logging every action payload.
	 *
	 * See `redux-thunk` package as an example of the Redux middleware.
	 *
	 * Because middleware is potentially asynchronous, this should be the first
	 * store enhancer in the composition chain.
	 *
	 * Note that each middleware will be given the `dispatch` and `getState` functions
	 * as named arguments.
	 *
	 * @param {...Function} middlewares The middleware chain to be applied.
	 * @returns {Function} A store enhancer applying the middleware.
	 */
	function applyMiddleware() {
	  for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key < _len; _key++) {
	    middlewares[_key] = arguments[_key];
	  }

	  return function (createStore) {
	    return function (reducer, preloadedState, enhancer) {
	      var store = createStore(reducer, preloadedState, enhancer);
	      var _dispatch = store.dispatch;
	      var chain = [];

	      var middlewareAPI = {
	        getState: store.getState,
	        dispatch: function dispatch(action) {
	          return _dispatch(action);
	        }
	      };
	      chain = middlewares.map(function (middleware) {
	        return middleware(middlewareAPI);
	      });
	      _dispatch = _compose2['default'].apply(undefined, chain)(store.dispatch);

	      return _extends({}, store, {
	        dispatch: _dispatch
	      });
	    };
	  };
	}

/***/ },
/* 710 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports["default"] = compose;
	/**
	 * Composes single-argument functions from right to left. The rightmost
	 * function can take multiple arguments as it provides the signature for
	 * the resulting composite function.
	 *
	 * @param {...Function} funcs The functions to compose.
	 * @returns {Function} A function obtained by composing the argument functions
	 * from right to left. For example, compose(f, g, h) is identical to doing
	 * (...args) => f(g(h(...args))).
	 */

	function compose() {
	  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
	    funcs[_key] = arguments[_key];
	  }

	  if (funcs.length === 0) {
	    return function (arg) {
	      return arg;
	    };
	  }

	  if (funcs.length === 1) {
	    return funcs[0];
	  }

	  return funcs.reduce(function (a, b) {
	    return function () {
	      return a(b.apply(undefined, arguments));
	    };
	  });
	}

/***/ },
/* 711 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.connect = exports.Provider = undefined;

	var _Provider = __webpack_require__(712);

	var _Provider2 = _interopRequireDefault(_Provider);

	var _connect = __webpack_require__(715);

	var _connect2 = _interopRequireDefault(_connect);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports.Provider = _Provider2["default"];
	exports.connect = _connect2["default"];

/***/ },
/* 712 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports["default"] = undefined;

	var _react = __webpack_require__(1);

	var _propTypes = __webpack_require__(614);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _storeShape = __webpack_require__(713);

	var _storeShape2 = _interopRequireDefault(_storeShape);

	var _warning = __webpack_require__(714);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var didWarnAboutReceivingStore = false;
	function warnAboutReceivingStore() {
	  if (didWarnAboutReceivingStore) {
	    return;
	  }
	  didWarnAboutReceivingStore = true;

	  (0, _warning2["default"])('<Provider> does not support changing `store` on the fly. ' + 'It is most likely that you see this error because you updated to ' + 'Redux 2.x and React Redux 2.x which no longer hot reload reducers ' + 'automatically. See https://github.com/reactjs/react-redux/releases/' + 'tag/v2.0.0 for the migration instructions.');
	}

	var Provider = function (_Component) {
	  _inherits(Provider, _Component);

	  Provider.prototype.getChildContext = function getChildContext() {
	    return { store: this.store };
	  };

	  function Provider(props, context) {
	    _classCallCheck(this, Provider);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));

	    _this.store = props.store;
	    return _this;
	  }

	  Provider.prototype.render = function render() {
	    return _react.Children.only(this.props.children);
	  };

	  return Provider;
	}(_react.Component);

	exports["default"] = Provider;


	if (process.env.NODE_ENV !== 'production') {
	  Provider.prototype.componentWillReceiveProps = function (nextProps) {
	    var store = this.store;
	    var nextStore = nextProps.store;


	    if (store !== nextStore) {
	      warnAboutReceivingStore();
	    }
	  };
	}

	Provider.propTypes = {
	  store: _storeShape2["default"].isRequired,
	  children: _propTypes2["default"].element.isRequired
	};
	Provider.childContextTypes = {
	  store: _storeShape2["default"].isRequired
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 713 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _propTypes = __webpack_require__(614);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports["default"] = _propTypes2["default"].shape({
	  subscribe: _propTypes2["default"].func.isRequired,
	  dispatch: _propTypes2["default"].func.isRequired,
	  getState: _propTypes2["default"].func.isRequired
	});

/***/ },
/* 714 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports["default"] = warning;
	/**
	 * Prints a warning in the console if it exists.
	 *
	 * @param {String} message The warning message.
	 * @returns {void}
	 */
	function warning(message) {
	  /* eslint-disable no-console */
	  if (typeof console !== 'undefined' && typeof console.error === 'function') {
	    console.error(message);
	  }
	  /* eslint-enable no-console */
	  try {
	    // This error was thrown as a convenience so that if you enable
	    // "break on all exceptions" in your console,
	    // it would pause the execution at this line.
	    throw new Error(message);
	    /* eslint-disable no-empty */
	  } catch (e) {}
	  /* eslint-enable no-empty */
	}

/***/ },
/* 715 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports["default"] = connect;

	var _react = __webpack_require__(1);

	var _storeShape = __webpack_require__(713);

	var _storeShape2 = _interopRequireDefault(_storeShape);

	var _shallowEqual = __webpack_require__(716);

	var _shallowEqual2 = _interopRequireDefault(_shallowEqual);

	var _wrapActionCreators = __webpack_require__(717);

	var _wrapActionCreators2 = _interopRequireDefault(_wrapActionCreators);

	var _warning = __webpack_require__(714);

	var _warning2 = _interopRequireDefault(_warning);

	var _isPlainObject = __webpack_require__(693);

	var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

	var _hoistNonReactStatics = __webpack_require__(718);

	var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

	var _invariant = __webpack_require__(635);

	var _invariant2 = _interopRequireDefault(_invariant);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var defaultMapStateToProps = function defaultMapStateToProps(state) {
	  return {};
	}; // eslint-disable-line no-unused-vars
	var defaultMapDispatchToProps = function defaultMapDispatchToProps(dispatch) {
	  return { dispatch: dispatch };
	};
	var defaultMergeProps = function defaultMergeProps(stateProps, dispatchProps, parentProps) {
	  return _extends({}, parentProps, stateProps, dispatchProps);
	};

	function getDisplayName(WrappedComponent) {
	  return WrappedComponent.displayName || WrappedComponent.name || 'Component';
	}

	var errorObject = { value: null };
	function tryCatch(fn, ctx) {
	  try {
	    return fn.apply(ctx);
	  } catch (e) {
	    errorObject.value = e;
	    return errorObject;
	  }
	}

	// Helps track hot reloading.
	var nextVersion = 0;

	function connect(mapStateToProps, mapDispatchToProps, mergeProps) {
	  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

	  var shouldSubscribe = Boolean(mapStateToProps);
	  var mapState = mapStateToProps || defaultMapStateToProps;

	  var mapDispatch = void 0;
	  if (typeof mapDispatchToProps === 'function') {
	    mapDispatch = mapDispatchToProps;
	  } else if (!mapDispatchToProps) {
	    mapDispatch = defaultMapDispatchToProps;
	  } else {
	    mapDispatch = (0, _wrapActionCreators2["default"])(mapDispatchToProps);
	  }

	  var finalMergeProps = mergeProps || defaultMergeProps;
	  var _options$pure = options.pure,
	      pure = _options$pure === undefined ? true : _options$pure,
	      _options$withRef = options.withRef,
	      withRef = _options$withRef === undefined ? false : _options$withRef;

	  var checkMergedEquals = pure && finalMergeProps !== defaultMergeProps;

	  // Helps track hot reloading.
	  var version = nextVersion++;

	  return function wrapWithConnect(WrappedComponent) {
	    var connectDisplayName = 'Connect(' + getDisplayName(WrappedComponent) + ')';

	    function checkStateShape(props, methodName) {
	      if (!(0, _isPlainObject2["default"])(props)) {
	        (0, _warning2["default"])(methodName + '() in ' + connectDisplayName + ' must return a plain object. ' + ('Instead received ' + props + '.'));
	      }
	    }

	    function computeMergedProps(stateProps, dispatchProps, parentProps) {
	      var mergedProps = finalMergeProps(stateProps, dispatchProps, parentProps);
	      if (process.env.NODE_ENV !== 'production') {
	        checkStateShape(mergedProps, 'mergeProps');
	      }
	      return mergedProps;
	    }

	    var Connect = function (_Component) {
	      _inherits(Connect, _Component);

	      Connect.prototype.shouldComponentUpdate = function shouldComponentUpdate() {
	        return !pure || this.haveOwnPropsChanged || this.hasStoreStateChanged;
	      };

	      function Connect(props, context) {
	        _classCallCheck(this, Connect);

	        var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));

	        _this.version = version;
	        _this.store = props.store || context.store;

	        (0, _invariant2["default"])(_this.store, 'Could not find "store" in either the context or ' + ('props of "' + connectDisplayName + '". ') + 'Either wrap the root component in a <Provider>, ' + ('or explicitly pass "store" as a prop to "' + connectDisplayName + '".'));

	        var storeState = _this.store.getState();
	        _this.state = { storeState: storeState };
	        _this.clearCache();
	        return _this;
	      }

	      Connect.prototype.computeStateProps = function computeStateProps(store, props) {
	        if (!this.finalMapStateToProps) {
	          return this.configureFinalMapState(store, props);
	        }

	        var state = store.getState();
	        var stateProps = this.doStatePropsDependOnOwnProps ? this.finalMapStateToProps(state, props) : this.finalMapStateToProps(state);

	        if (process.env.NODE_ENV !== 'production') {
	          checkStateShape(stateProps, 'mapStateToProps');
	        }
	        return stateProps;
	      };

	      Connect.prototype.configureFinalMapState = function configureFinalMapState(store, props) {
	        var mappedState = mapState(store.getState(), props);
	        var isFactory = typeof mappedState === 'function';

	        this.finalMapStateToProps = isFactory ? mappedState : mapState;
	        this.doStatePropsDependOnOwnProps = this.finalMapStateToProps.length !== 1;

	        if (isFactory) {
	          return this.computeStateProps(store, props);
	        }

	        if (process.env.NODE_ENV !== 'production') {
	          checkStateShape(mappedState, 'mapStateToProps');
	        }
	        return mappedState;
	      };

	      Connect.prototype.computeDispatchProps = function computeDispatchProps(store, props) {
	        if (!this.finalMapDispatchToProps) {
	          return this.configureFinalMapDispatch(store, props);
	        }

	        var dispatch = store.dispatch;

	        var dispatchProps = this.doDispatchPropsDependOnOwnProps ? this.finalMapDispatchToProps(dispatch, props) : this.finalMapDispatchToProps(dispatch);

	        if (process.env.NODE_ENV !== 'production') {
	          checkStateShape(dispatchProps, 'mapDispatchToProps');
	        }
	        return dispatchProps;
	      };

	      Connect.prototype.configureFinalMapDispatch = function configureFinalMapDispatch(store, props) {
	        var mappedDispatch = mapDispatch(store.dispatch, props);
	        var isFactory = typeof mappedDispatch === 'function';

	        this.finalMapDispatchToProps = isFactory ? mappedDispatch : mapDispatch;
	        this.doDispatchPropsDependOnOwnProps = this.finalMapDispatchToProps.length !== 1;

	        if (isFactory) {
	          return this.computeDispatchProps(store, props);
	        }

	        if (process.env.NODE_ENV !== 'production') {
	          checkStateShape(mappedDispatch, 'mapDispatchToProps');
	        }
	        return mappedDispatch;
	      };

	      Connect.prototype.updateStatePropsIfNeeded = function updateStatePropsIfNeeded() {
	        var nextStateProps = this.computeStateProps(this.store, this.props);
	        if (this.stateProps && (0, _shallowEqual2["default"])(nextStateProps, this.stateProps)) {
	          return false;
	        }

	        this.stateProps = nextStateProps;
	        return true;
	      };

	      Connect.prototype.updateDispatchPropsIfNeeded = function updateDispatchPropsIfNeeded() {
	        var nextDispatchProps = this.computeDispatchProps(this.store, this.props);
	        if (this.dispatchProps && (0, _shallowEqual2["default"])(nextDispatchProps, this.dispatchProps)) {
	          return false;
	        }

	        this.dispatchProps = nextDispatchProps;
	        return true;
	      };

	      Connect.prototype.updateMergedPropsIfNeeded = function updateMergedPropsIfNeeded() {
	        var nextMergedProps = computeMergedProps(this.stateProps, this.dispatchProps, this.props);
	        if (this.mergedProps && checkMergedEquals && (0, _shallowEqual2["default"])(nextMergedProps, this.mergedProps)) {
	          return false;
	        }

	        this.mergedProps = nextMergedProps;
	        return true;
	      };

	      Connect.prototype.isSubscribed = function isSubscribed() {
	        return typeof this.unsubscribe === 'function';
	      };

	      Connect.prototype.trySubscribe = function trySubscribe() {
	        if (shouldSubscribe && !this.unsubscribe) {
	          this.unsubscribe = this.store.subscribe(this.handleChange.bind(this));
	          this.handleChange();
	        }
	      };

	      Connect.prototype.tryUnsubscribe = function tryUnsubscribe() {
	        if (this.unsubscribe) {
	          this.unsubscribe();
	          this.unsubscribe = null;
	        }
	      };

	      Connect.prototype.componentDidMount = function componentDidMount() {
	        this.trySubscribe();
	      };

	      Connect.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	        if (!pure || !(0, _shallowEqual2["default"])(nextProps, this.props)) {
	          this.haveOwnPropsChanged = true;
	        }
	      };

	      Connect.prototype.componentWillUnmount = function componentWillUnmount() {
	        this.tryUnsubscribe();
	        this.clearCache();
	      };

	      Connect.prototype.clearCache = function clearCache() {
	        this.dispatchProps = null;
	        this.stateProps = null;
	        this.mergedProps = null;
	        this.haveOwnPropsChanged = true;
	        this.hasStoreStateChanged = true;
	        this.haveStatePropsBeenPrecalculated = false;
	        this.statePropsPrecalculationError = null;
	        this.renderedElement = null;
	        this.finalMapDispatchToProps = null;
	        this.finalMapStateToProps = null;
	      };

	      Connect.prototype.handleChange = function handleChange() {
	        if (!this.unsubscribe) {
	          return;
	        }

	        var storeState = this.store.getState();
	        var prevStoreState = this.state.storeState;
	        if (pure && prevStoreState === storeState) {
	          return;
	        }

	        if (pure && !this.doStatePropsDependOnOwnProps) {
	          var haveStatePropsChanged = tryCatch(this.updateStatePropsIfNeeded, this);
	          if (!haveStatePropsChanged) {
	            return;
	          }
	          if (haveStatePropsChanged === errorObject) {
	            this.statePropsPrecalculationError = errorObject.value;
	          }
	          this.haveStatePropsBeenPrecalculated = true;
	        }

	        this.hasStoreStateChanged = true;
	        this.setState({ storeState: storeState });
	      };

	      Connect.prototype.getWrappedInstance = function getWrappedInstance() {
	        (0, _invariant2["default"])(withRef, 'To access the wrapped instance, you need to specify ' + '{ withRef: true } as the fourth argument of the connect() call.');

	        return this.refs.wrappedInstance;
	      };

	      Connect.prototype.render = function render() {
	        var haveOwnPropsChanged = this.haveOwnPropsChanged,
	            hasStoreStateChanged = this.hasStoreStateChanged,
	            haveStatePropsBeenPrecalculated = this.haveStatePropsBeenPrecalculated,
	            statePropsPrecalculationError = this.statePropsPrecalculationError,
	            renderedElement = this.renderedElement;


	        this.haveOwnPropsChanged = false;
	        this.hasStoreStateChanged = false;
	        this.haveStatePropsBeenPrecalculated = false;
	        this.statePropsPrecalculationError = null;

	        if (statePropsPrecalculationError) {
	          throw statePropsPrecalculationError;
	        }

	        var shouldUpdateStateProps = true;
	        var shouldUpdateDispatchProps = true;
	        if (pure && renderedElement) {
	          shouldUpdateStateProps = hasStoreStateChanged || haveOwnPropsChanged && this.doStatePropsDependOnOwnProps;
	          shouldUpdateDispatchProps = haveOwnPropsChanged && this.doDispatchPropsDependOnOwnProps;
	        }

	        var haveStatePropsChanged = false;
	        var haveDispatchPropsChanged = false;
	        if (haveStatePropsBeenPrecalculated) {
	          haveStatePropsChanged = true;
	        } else if (shouldUpdateStateProps) {
	          haveStatePropsChanged = this.updateStatePropsIfNeeded();
	        }
	        if (shouldUpdateDispatchProps) {
	          haveDispatchPropsChanged = this.updateDispatchPropsIfNeeded();
	        }

	        var haveMergedPropsChanged = true;
	        if (haveStatePropsChanged || haveDispatchPropsChanged || haveOwnPropsChanged) {
	          haveMergedPropsChanged = this.updateMergedPropsIfNeeded();
	        } else {
	          haveMergedPropsChanged = false;
	        }

	        if (!haveMergedPropsChanged && renderedElement) {
	          return renderedElement;
	        }

	        if (withRef) {
	          this.renderedElement = (0, _react.createElement)(WrappedComponent, _extends({}, this.mergedProps, {
	            ref: 'wrappedInstance'
	          }));
	        } else {
	          this.renderedElement = (0, _react.createElement)(WrappedComponent, this.mergedProps);
	        }

	        return this.renderedElement;
	      };

	      return Connect;
	    }(_react.Component);

	    Connect.displayName = connectDisplayName;
	    Connect.WrappedComponent = WrappedComponent;
	    Connect.contextTypes = {
	      store: _storeShape2["default"]
	    };
	    Connect.propTypes = {
	      store: _storeShape2["default"]
	    };

	    if (process.env.NODE_ENV !== 'production') {
	      Connect.prototype.componentWillUpdate = function componentWillUpdate() {
	        if (this.version === version) {
	          return;
	        }

	        // We are hot reloading!
	        this.version = version;
	        this.trySubscribe();
	        this.clearCache();
	      };
	    }

	    return (0, _hoistNonReactStatics2["default"])(Connect, WrappedComponent);
	  };
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 716 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports["default"] = shallowEqual;
	function shallowEqual(objA, objB) {
	  if (objA === objB) {
	    return true;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  }

	  // Test for A's keys different from B.
	  var hasOwn = Object.prototype.hasOwnProperty;
	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwn.call(objB, keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
	      return false;
	    }
	  }

	  return true;
	}

/***/ },
/* 717 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports["default"] = wrapActionCreators;

	var _redux = __webpack_require__(691);

	function wrapActionCreators(actionCreators) {
	  return function (dispatch) {
	    return (0, _redux.bindActionCreators)(actionCreators, dispatch);
	  };
	}

/***/ },
/* 718 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Copyright 2015, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */
	var REACT_STATICS = {
	    childContextTypes: true,
	    contextTypes: true,
	    defaultProps: true,
	    displayName: true,
	    getDefaultProps: true,
	    getDerivedStateFromProps: true,
	    mixins: true,
	    propTypes: true,
	    type: true
	};

	var KNOWN_STATICS = {
	    name: true,
	    length: true,
	    prototype: true,
	    caller: true,
	    callee: true,
	    arguments: true,
	    arity: true
	};

	var defineProperty = Object.defineProperty;
	var getOwnPropertyNames = Object.getOwnPropertyNames;
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
	var getPrototypeOf = Object.getPrototypeOf;
	var objectPrototype = getPrototypeOf && getPrototypeOf(Object);

	function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
	    if (typeof sourceComponent !== 'string') { // don't hoist over string (html) components

	        if (objectPrototype) {
	            var inheritedComponent = getPrototypeOf(sourceComponent);
	            if (inheritedComponent && inheritedComponent !== objectPrototype) {
	                hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
	            }
	        }

	        var keys = getOwnPropertyNames(sourceComponent);

	        if (getOwnPropertySymbols) {
	            keys = keys.concat(getOwnPropertySymbols(sourceComponent));
	        }

	        for (var i = 0; i < keys.length; ++i) {
	            var key = keys[i];
	            if (!REACT_STATICS[key] && !KNOWN_STATICS[key] && (!blacklist || !blacklist[key])) {
	                var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
	                try { // Avoid failures from read-only properties
	                    defineProperty(targetComponent, key, descriptor);
	                } catch (e) {}
	            }
	        }

	        return targetComponent;
	    }

	    return targetComponent;
	}

	module.exports = hoistNonReactStatics;


/***/ },
/* 719 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.routerMiddleware = exports.routerActions = exports.goForward = exports.goBack = exports.go = exports.replace = exports.push = exports.CALL_HISTORY_METHOD = exports.routerReducer = exports.LOCATION_CHANGE = exports.syncHistoryWithStore = undefined;

	var _reducer = __webpack_require__(720);

	Object.defineProperty(exports, 'LOCATION_CHANGE', {
	  enumerable: true,
	  get: function get() {
	    return _reducer.LOCATION_CHANGE;
	  }
	});
	Object.defineProperty(exports, 'routerReducer', {
	  enumerable: true,
	  get: function get() {
	    return _reducer.routerReducer;
	  }
	});

	var _actions = __webpack_require__(721);

	Object.defineProperty(exports, 'CALL_HISTORY_METHOD', {
	  enumerable: true,
	  get: function get() {
	    return _actions.CALL_HISTORY_METHOD;
	  }
	});
	Object.defineProperty(exports, 'push', {
	  enumerable: true,
	  get: function get() {
	    return _actions.push;
	  }
	});
	Object.defineProperty(exports, 'replace', {
	  enumerable: true,
	  get: function get() {
	    return _actions.replace;
	  }
	});
	Object.defineProperty(exports, 'go', {
	  enumerable: true,
	  get: function get() {
	    return _actions.go;
	  }
	});
	Object.defineProperty(exports, 'goBack', {
	  enumerable: true,
	  get: function get() {
	    return _actions.goBack;
	  }
	});
	Object.defineProperty(exports, 'goForward', {
	  enumerable: true,
	  get: function get() {
	    return _actions.goForward;
	  }
	});
	Object.defineProperty(exports, 'routerActions', {
	  enumerable: true,
	  get: function get() {
	    return _actions.routerActions;
	  }
	});

	var _sync = __webpack_require__(722);

	var _sync2 = _interopRequireDefault(_sync);

	var _middleware = __webpack_require__(723);

	var _middleware2 = _interopRequireDefault(_middleware);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	exports.syncHistoryWithStore = _sync2['default'];
	exports.routerMiddleware = _middleware2['default'];

/***/ },
/* 720 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.routerReducer = routerReducer;
	/**
	 * This action type will be dispatched when your history
	 * receives a location change.
	 */
	var LOCATION_CHANGE = exports.LOCATION_CHANGE = '@@router/LOCATION_CHANGE';

	var initialState = {
	  locationBeforeTransitions: null
	};

	/**
	 * This reducer will update the state with the most recent location history
	 * has transitioned to. This may not be in sync with the router, particularly
	 * if you have asynchronously-loaded routes, so reading from and relying on
	 * this state is discouraged.
	 */
	function routerReducer() {
	  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;

	  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	      type = _ref.type,
	      payload = _ref.payload;

	  if (type === LOCATION_CHANGE) {
	    return _extends({}, state, { locationBeforeTransitions: payload });
	  }

	  return state;
	}

/***/ },
/* 721 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/**
	 * This action type will be dispatched by the history actions below.
	 * If you're writing a middleware to watch for navigation events, be sure to
	 * look for actions of this type.
	 */
	var CALL_HISTORY_METHOD = exports.CALL_HISTORY_METHOD = '@@router/CALL_HISTORY_METHOD';

	function updateLocation(method) {
	  return function () {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return {
	      type: CALL_HISTORY_METHOD,
	      payload: { method: method, args: args }
	    };
	  };
	}

	/**
	 * These actions correspond to the history API.
	 * The associated routerMiddleware will capture these events before they get to
	 * your reducer and reissue them as the matching function on your history.
	 */
	var push = exports.push = updateLocation('push');
	var replace = exports.replace = updateLocation('replace');
	var go = exports.go = updateLocation('go');
	var goBack = exports.goBack = updateLocation('goBack');
	var goForward = exports.goForward = updateLocation('goForward');

	var routerActions = exports.routerActions = { push: push, replace: replace, go: go, goBack: goBack, goForward: goForward };

/***/ },
/* 722 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports['default'] = syncHistoryWithStore;

	var _reducer = __webpack_require__(720);

	var defaultSelectLocationState = function defaultSelectLocationState(state) {
	  return state.routing;
	};

	/**
	 * This function synchronizes your history state with the Redux store.
	 * Location changes flow from history to the store. An enhanced history is
	 * returned with a listen method that responds to store updates for location.
	 *
	 * When this history is provided to the router, this means the location data
	 * will flow like this:
	 * history.push -> store.dispatch -> enhancedHistory.listen -> router
	 * This ensures that when the store state changes due to a replay or other
	 * event, the router will be updated appropriately and can transition to the
	 * correct router state.
	 */
	function syncHistoryWithStore(history, store) {
	  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
	      _ref$selectLocationSt = _ref.selectLocationState,
	      selectLocationState = _ref$selectLocationSt === undefined ? defaultSelectLocationState : _ref$selectLocationSt,
	      _ref$adjustUrlOnRepla = _ref.adjustUrlOnReplay,
	      adjustUrlOnReplay = _ref$adjustUrlOnRepla === undefined ? true : _ref$adjustUrlOnRepla;

	  // Ensure that the reducer is mounted on the store and functioning properly.
	  if (typeof selectLocationState(store.getState()) === 'undefined') {
	    throw new Error('Expected the routing state to be available either as `state.routing` ' + 'or as the custom expression you can specify as `selectLocationState` ' + 'in the `syncHistoryWithStore()` options. ' + 'Ensure you have added the `routerReducer` to your store\'s ' + 'reducers via `combineReducers` or whatever method you use to isolate ' + 'your reducers.');
	  }

	  var initialLocation = void 0;
	  var isTimeTraveling = void 0;
	  var unsubscribeFromStore = void 0;
	  var unsubscribeFromHistory = void 0;
	  var currentLocation = void 0;

	  // What does the store say about current location?
	  var getLocationInStore = function getLocationInStore(useInitialIfEmpty) {
	    var locationState = selectLocationState(store.getState());
	    return locationState.locationBeforeTransitions || (useInitialIfEmpty ? initialLocation : undefined);
	  };

	  // Init initialLocation with potential location in store
	  initialLocation = getLocationInStore();

	  // If the store is replayed, update the URL in the browser to match.
	  if (adjustUrlOnReplay) {
	    var handleStoreChange = function handleStoreChange() {
	      var locationInStore = getLocationInStore(true);
	      if (currentLocation === locationInStore || initialLocation === locationInStore) {
	        return;
	      }

	      // Update address bar to reflect store state
	      isTimeTraveling = true;
	      currentLocation = locationInStore;
	      history.transitionTo(_extends({}, locationInStore, {
	        action: 'PUSH'
	      }));
	      isTimeTraveling = false;
	    };

	    unsubscribeFromStore = store.subscribe(handleStoreChange);
	    handleStoreChange();
	  }

	  // Whenever location changes, dispatch an action to get it in the store
	  var handleLocationChange = function handleLocationChange(location) {
	    // ... unless we just caused that location change
	    if (isTimeTraveling) {
	      return;
	    }

	    // Remember where we are
	    currentLocation = location;

	    // Are we being called for the first time?
	    if (!initialLocation) {
	      // Remember as a fallback in case state is reset
	      initialLocation = location;

	      // Respect persisted location, if any
	      if (getLocationInStore()) {
	        return;
	      }
	    }

	    // Tell the store to update by dispatching an action
	    store.dispatch({
	      type: _reducer.LOCATION_CHANGE,
	      payload: location
	    });
	  };
	  unsubscribeFromHistory = history.listen(handleLocationChange);

	  // History 3.x doesn't call listen synchronously, so fire the initial location change ourselves
	  if (history.getCurrentLocation) {
	    handleLocationChange(history.getCurrentLocation());
	  }

	  // The enhanced history uses store as source of truth
	  return _extends({}, history, {
	    // The listeners are subscribed to the store instead of history
	    listen: function listen(listener) {
	      // Copy of last location.
	      var lastPublishedLocation = getLocationInStore(true);

	      // Keep track of whether we unsubscribed, as Redux store
	      // only applies changes in subscriptions on next dispatch
	      var unsubscribed = false;
	      var unsubscribeFromStore = store.subscribe(function () {
	        var currentLocation = getLocationInStore(true);
	        if (currentLocation === lastPublishedLocation) {
	          return;
	        }
	        lastPublishedLocation = currentLocation;
	        if (!unsubscribed) {
	          listener(lastPublishedLocation);
	        }
	      });

	      // History 2.x listeners expect a synchronous call. Make the first call to the
	      // listener after subscribing to the store, in case the listener causes a
	      // location change (e.g. when it redirects)
	      if (!history.getCurrentLocation) {
	        listener(lastPublishedLocation);
	      }

	      // Let user unsubscribe later
	      return function () {
	        unsubscribed = true;
	        unsubscribeFromStore();
	      };
	    },


	    // It also provides a way to destroy internal listeners
	    unsubscribe: function unsubscribe() {
	      if (adjustUrlOnReplay) {
	        unsubscribeFromStore();
	      }
	      unsubscribeFromHistory();
	    }
	  });
	}

/***/ },
/* 723 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports['default'] = routerMiddleware;

	var _actions = __webpack_require__(721);

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	/**
	 * This middleware captures CALL_HISTORY_METHOD actions to redirect to the
	 * provided history object. This will prevent these actions from reaching your
	 * reducer or any middleware that comes after this one.
	 */
	function routerMiddleware(history) {
	  return function () {
	    return function (next) {
	      return function (action) {
	        if (action.type !== _actions.CALL_HISTORY_METHOD) {
	          return next(action);
	        }

	        var _action$payload = action.payload,
	            method = _action$payload.method,
	            args = _action$payload.args;

	        history[method].apply(history, _toConsumableArray(args));
	      };
	    };
	  };
	}

/***/ },
/* 724 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	(function (global, factory) {
	   true ? module.exports = factory() :
	  typeof define === 'function' && define.amd ? define(factory) :
	  (global.Immutable = factory());
	}(this, function () { 'use strict';var SLICE$0 = Array.prototype.slice;

	  function createClass(ctor, superClass) {
	    if (superClass) {
	      ctor.prototype = Object.create(superClass.prototype);
	    }
	    ctor.prototype.constructor = ctor;
	  }

	  function Iterable(value) {
	      return isIterable(value) ? value : Seq(value);
	    }


	  createClass(KeyedIterable, Iterable);
	    function KeyedIterable(value) {
	      return isKeyed(value) ? value : KeyedSeq(value);
	    }


	  createClass(IndexedIterable, Iterable);
	    function IndexedIterable(value) {
	      return isIndexed(value) ? value : IndexedSeq(value);
	    }


	  createClass(SetIterable, Iterable);
	    function SetIterable(value) {
	      return isIterable(value) && !isAssociative(value) ? value : SetSeq(value);
	    }



	  function isIterable(maybeIterable) {
	    return !!(maybeIterable && maybeIterable[IS_ITERABLE_SENTINEL]);
	  }

	  function isKeyed(maybeKeyed) {
	    return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);
	  }

	  function isIndexed(maybeIndexed) {
	    return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);
	  }

	  function isAssociative(maybeAssociative) {
	    return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);
	  }

	  function isOrdered(maybeOrdered) {
	    return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);
	  }

	  Iterable.isIterable = isIterable;
	  Iterable.isKeyed = isKeyed;
	  Iterable.isIndexed = isIndexed;
	  Iterable.isAssociative = isAssociative;
	  Iterable.isOrdered = isOrdered;

	  Iterable.Keyed = KeyedIterable;
	  Iterable.Indexed = IndexedIterable;
	  Iterable.Set = SetIterable;


	  var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';
	  var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';
	  var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';
	  var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';

	  // Used for setting prototype methods that IE8 chokes on.
	  var DELETE = 'delete';

	  // Constants describing the size of trie nodes.
	  var SHIFT = 5; // Resulted in best performance after ______?
	  var SIZE = 1 << SHIFT;
	  var MASK = SIZE - 1;

	  // A consistent shared value representing "not set" which equals nothing other
	  // than itself, and nothing that could be provided externally.
	  var NOT_SET = {};

	  // Boolean references, Rough equivalent of `bool &`.
	  var CHANGE_LENGTH = { value: false };
	  var DID_ALTER = { value: false };

	  function MakeRef(ref) {
	    ref.value = false;
	    return ref;
	  }

	  function SetRef(ref) {
	    ref && (ref.value = true);
	  }

	  // A function which returns a value representing an "owner" for transient writes
	  // to tries. The return value will only ever equal itself, and will not equal
	  // the return of any subsequent call of this function.
	  function OwnerID() {}

	  // http://jsperf.com/copy-array-inline
	  function arrCopy(arr, offset) {
	    offset = offset || 0;
	    var len = Math.max(0, arr.length - offset);
	    var newArr = new Array(len);
	    for (var ii = 0; ii < len; ii++) {
	      newArr[ii] = arr[ii + offset];
	    }
	    return newArr;
	  }

	  function ensureSize(iter) {
	    if (iter.size === undefined) {
	      iter.size = iter.__iterate(returnTrue);
	    }
	    return iter.size;
	  }

	  function wrapIndex(iter, index) {
	    // This implements "is array index" which the ECMAString spec defines as:
	    //
	    //     A String property name P is an array index if and only if
	    //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal
	    //     to 2^32−1.
	    //
	    // http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects
	    if (typeof index !== 'number') {
	      var uint32Index = index >>> 0; // N >>> 0 is shorthand for ToUint32
	      if ('' + uint32Index !== index || uint32Index === 4294967295) {
	        return NaN;
	      }
	      index = uint32Index;
	    }
	    return index < 0 ? ensureSize(iter) + index : index;
	  }

	  function returnTrue() {
	    return true;
	  }

	  function wholeSlice(begin, end, size) {
	    return (begin === 0 || (size !== undefined && begin <= -size)) &&
	      (end === undefined || (size !== undefined && end >= size));
	  }

	  function resolveBegin(begin, size) {
	    return resolveIndex(begin, size, 0);
	  }

	  function resolveEnd(end, size) {
	    return resolveIndex(end, size, size);
	  }

	  function resolveIndex(index, size, defaultIndex) {
	    return index === undefined ?
	      defaultIndex :
	      index < 0 ?
	        Math.max(0, size + index) :
	        size === undefined ?
	          index :
	          Math.min(size, index);
	  }

	  /* global Symbol */

	  var ITERATE_KEYS = 0;
	  var ITERATE_VALUES = 1;
	  var ITERATE_ENTRIES = 2;

	  var REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	  var FAUX_ITERATOR_SYMBOL = '@@iterator';

	  var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;


	  function Iterator(next) {
	      this.next = next;
	    }

	    Iterator.prototype.toString = function() {
	      return '[Iterator]';
	    };


	  Iterator.KEYS = ITERATE_KEYS;
	  Iterator.VALUES = ITERATE_VALUES;
	  Iterator.ENTRIES = ITERATE_ENTRIES;

	  Iterator.prototype.inspect =
	  Iterator.prototype.toSource = function () { return this.toString(); }
	  Iterator.prototype[ITERATOR_SYMBOL] = function () {
	    return this;
	  };


	  function iteratorValue(type, k, v, iteratorResult) {
	    var value = type === 0 ? k : type === 1 ? v : [k, v];
	    iteratorResult ? (iteratorResult.value = value) : (iteratorResult = {
	      value: value, done: false
	    });
	    return iteratorResult;
	  }

	  function iteratorDone() {
	    return { value: undefined, done: true };
	  }

	  function hasIterator(maybeIterable) {
	    return !!getIteratorFn(maybeIterable);
	  }

	  function isIterator(maybeIterator) {
	    return maybeIterator && typeof maybeIterator.next === 'function';
	  }

	  function getIterator(iterable) {
	    var iteratorFn = getIteratorFn(iterable);
	    return iteratorFn && iteratorFn.call(iterable);
	  }

	  function getIteratorFn(iterable) {
	    var iteratorFn = iterable && (
	      (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL]) ||
	      iterable[FAUX_ITERATOR_SYMBOL]
	    );
	    if (typeof iteratorFn === 'function') {
	      return iteratorFn;
	    }
	  }

	  function isArrayLike(value) {
	    return value && typeof value.length === 'number';
	  }

	  createClass(Seq, Iterable);
	    function Seq(value) {
	      return value === null || value === undefined ? emptySequence() :
	        isIterable(value) ? value.toSeq() : seqFromValue(value);
	    }

	    Seq.of = function(/*...values*/) {
	      return Seq(arguments);
	    };

	    Seq.prototype.toSeq = function() {
	      return this;
	    };

	    Seq.prototype.toString = function() {
	      return this.__toString('Seq {', '}');
	    };

	    Seq.prototype.cacheResult = function() {
	      if (!this._cache && this.__iterateUncached) {
	        this._cache = this.entrySeq().toArray();
	        this.size = this._cache.length;
	      }
	      return this;
	    };

	    // abstract __iterateUncached(fn, reverse)

	    Seq.prototype.__iterate = function(fn, reverse) {
	      return seqIterate(this, fn, reverse, true);
	    };

	    // abstract __iteratorUncached(type, reverse)

	    Seq.prototype.__iterator = function(type, reverse) {
	      return seqIterator(this, type, reverse, true);
	    };



	  createClass(KeyedSeq, Seq);
	    function KeyedSeq(value) {
	      return value === null || value === undefined ?
	        emptySequence().toKeyedSeq() :
	        isIterable(value) ?
	          (isKeyed(value) ? value.toSeq() : value.fromEntrySeq()) :
	          keyedSeqFromValue(value);
	    }

	    KeyedSeq.prototype.toKeyedSeq = function() {
	      return this;
	    };



	  createClass(IndexedSeq, Seq);
	    function IndexedSeq(value) {
	      return value === null || value === undefined ? emptySequence() :
	        !isIterable(value) ? indexedSeqFromValue(value) :
	        isKeyed(value) ? value.entrySeq() : value.toIndexedSeq();
	    }

	    IndexedSeq.of = function(/*...values*/) {
	      return IndexedSeq(arguments);
	    };

	    IndexedSeq.prototype.toIndexedSeq = function() {
	      return this;
	    };

	    IndexedSeq.prototype.toString = function() {
	      return this.__toString('Seq [', ']');
	    };

	    IndexedSeq.prototype.__iterate = function(fn, reverse) {
	      return seqIterate(this, fn, reverse, false);
	    };

	    IndexedSeq.prototype.__iterator = function(type, reverse) {
	      return seqIterator(this, type, reverse, false);
	    };



	  createClass(SetSeq, Seq);
	    function SetSeq(value) {
	      return (
	        value === null || value === undefined ? emptySequence() :
	        !isIterable(value) ? indexedSeqFromValue(value) :
	        isKeyed(value) ? value.entrySeq() : value
	      ).toSetSeq();
	    }

	    SetSeq.of = function(/*...values*/) {
	      return SetSeq(arguments);
	    };

	    SetSeq.prototype.toSetSeq = function() {
	      return this;
	    };



	  Seq.isSeq = isSeq;
	  Seq.Keyed = KeyedSeq;
	  Seq.Set = SetSeq;
	  Seq.Indexed = IndexedSeq;

	  var IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';

	  Seq.prototype[IS_SEQ_SENTINEL] = true;



	  createClass(ArraySeq, IndexedSeq);
	    function ArraySeq(array) {
	      this._array = array;
	      this.size = array.length;
	    }

	    ArraySeq.prototype.get = function(index, notSetValue) {
	      return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;
	    };

	    ArraySeq.prototype.__iterate = function(fn, reverse) {
	      var array = this._array;
	      var maxIndex = array.length - 1;
	      for (var ii = 0; ii <= maxIndex; ii++) {
	        if (fn(array[reverse ? maxIndex - ii : ii], ii, this) === false) {
	          return ii + 1;
	        }
	      }
	      return ii;
	    };

	    ArraySeq.prototype.__iterator = function(type, reverse) {
	      var array = this._array;
	      var maxIndex = array.length - 1;
	      var ii = 0;
	      return new Iterator(function() 
	        {return ii > maxIndex ?
	          iteratorDone() :
	          iteratorValue(type, ii, array[reverse ? maxIndex - ii++ : ii++])}
	      );
	    };



	  createClass(ObjectSeq, KeyedSeq);
	    function ObjectSeq(object) {
	      var keys = Object.keys(object);
	      this._object = object;
	      this._keys = keys;
	      this.size = keys.length;
	    }

	    ObjectSeq.prototype.get = function(key, notSetValue) {
	      if (notSetValue !== undefined && !this.has(key)) {
	        return notSetValue;
	      }
	      return this._object[key];
	    };

	    ObjectSeq.prototype.has = function(key) {
	      return this._object.hasOwnProperty(key);
	    };

	    ObjectSeq.prototype.__iterate = function(fn, reverse) {
	      var object = this._object;
	      var keys = this._keys;
	      var maxIndex = keys.length - 1;
	      for (var ii = 0; ii <= maxIndex; ii++) {
	        var key = keys[reverse ? maxIndex - ii : ii];
	        if (fn(object[key], key, this) === false) {
	          return ii + 1;
	        }
	      }
	      return ii;
	    };

	    ObjectSeq.prototype.__iterator = function(type, reverse) {
	      var object = this._object;
	      var keys = this._keys;
	      var maxIndex = keys.length - 1;
	      var ii = 0;
	      return new Iterator(function()  {
	        var key = keys[reverse ? maxIndex - ii : ii];
	        return ii++ > maxIndex ?
	          iteratorDone() :
	          iteratorValue(type, key, object[key]);
	      });
	    };

	  ObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;


	  createClass(IterableSeq, IndexedSeq);
	    function IterableSeq(iterable) {
	      this._iterable = iterable;
	      this.size = iterable.length || iterable.size;
	    }

	    IterableSeq.prototype.__iterateUncached = function(fn, reverse) {
	      if (reverse) {
	        return this.cacheResult().__iterate(fn, reverse);
	      }
	      var iterable = this._iterable;
	      var iterator = getIterator(iterable);
	      var iterations = 0;
	      if (isIterator(iterator)) {
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (fn(step.value, iterations++, this) === false) {
	            break;
	          }
	        }
	      }
	      return iterations;
	    };

	    IterableSeq.prototype.__iteratorUncached = function(type, reverse) {
	      if (reverse) {
	        return this.cacheResult().__iterator(type, reverse);
	      }
	      var iterable = this._iterable;
	      var iterator = getIterator(iterable);
	      if (!isIterator(iterator)) {
	        return new Iterator(iteratorDone);
	      }
	      var iterations = 0;
	      return new Iterator(function()  {
	        var step = iterator.next();
	        return step.done ? step : iteratorValue(type, iterations++, step.value);
	      });
	    };



	  createClass(IteratorSeq, IndexedSeq);
	    function IteratorSeq(iterator) {
	      this._iterator = iterator;
	      this._iteratorCache = [];
	    }

	    IteratorSeq.prototype.__iterateUncached = function(fn, reverse) {
	      if (reverse) {
	        return this.cacheResult().__iterate(fn, reverse);
	      }
	      var iterator = this._iterator;
	      var cache = this._iteratorCache;
	      var iterations = 0;
	      while (iterations < cache.length) {
	        if (fn(cache[iterations], iterations++, this) === false) {
	          return iterations;
	        }
	      }
	      var step;
	      while (!(step = iterator.next()).done) {
	        var val = step.value;
	        cache[iterations] = val;
	        if (fn(val, iterations++, this) === false) {
	          break;
	        }
	      }
	      return iterations;
	    };

	    IteratorSeq.prototype.__iteratorUncached = function(type, reverse) {
	      if (reverse) {
	        return this.cacheResult().__iterator(type, reverse);
	      }
	      var iterator = this._iterator;
	      var cache = this._iteratorCache;
	      var iterations = 0;
	      return new Iterator(function()  {
	        if (iterations >= cache.length) {
	          var step = iterator.next();
	          if (step.done) {
	            return step;
	          }
	          cache[iterations] = step.value;
	        }
	        return iteratorValue(type, iterations, cache[iterations++]);
	      });
	    };




	  // # pragma Helper functions

	  function isSeq(maybeSeq) {
	    return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);
	  }

	  var EMPTY_SEQ;

	  function emptySequence() {
	    return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));
	  }

	  function keyedSeqFromValue(value) {
	    var seq =
	      Array.isArray(value) ? new ArraySeq(value).fromEntrySeq() :
	      isIterator(value) ? new IteratorSeq(value).fromEntrySeq() :
	      hasIterator(value) ? new IterableSeq(value).fromEntrySeq() :
	      typeof value === 'object' ? new ObjectSeq(value) :
	      undefined;
	    if (!seq) {
	      throw new TypeError(
	        'Expected Array or iterable object of [k, v] entries, '+
	        'or keyed object: ' + value
	      );
	    }
	    return seq;
	  }

	  function indexedSeqFromValue(value) {
	    var seq = maybeIndexedSeqFromValue(value);
	    if (!seq) {
	      throw new TypeError(
	        'Expected Array or iterable object of values: ' + value
	      );
	    }
	    return seq;
	  }

	  function seqFromValue(value) {
	    var seq = maybeIndexedSeqFromValue(value) ||
	      (typeof value === 'object' && new ObjectSeq(value));
	    if (!seq) {
	      throw new TypeError(
	        'Expected Array or iterable object of values, or keyed object: ' + value
	      );
	    }
	    return seq;
	  }

	  function maybeIndexedSeqFromValue(value) {
	    return (
	      isArrayLike(value) ? new ArraySeq(value) :
	      isIterator(value) ? new IteratorSeq(value) :
	      hasIterator(value) ? new IterableSeq(value) :
	      undefined
	    );
	  }

	  function seqIterate(seq, fn, reverse, useKeys) {
	    var cache = seq._cache;
	    if (cache) {
	      var maxIndex = cache.length - 1;
	      for (var ii = 0; ii <= maxIndex; ii++) {
	        var entry = cache[reverse ? maxIndex - ii : ii];
	        if (fn(entry[1], useKeys ? entry[0] : ii, seq) === false) {
	          return ii + 1;
	        }
	      }
	      return ii;
	    }
	    return seq.__iterateUncached(fn, reverse);
	  }

	  function seqIterator(seq, type, reverse, useKeys) {
	    var cache = seq._cache;
	    if (cache) {
	      var maxIndex = cache.length - 1;
	      var ii = 0;
	      return new Iterator(function()  {
	        var entry = cache[reverse ? maxIndex - ii : ii];
	        return ii++ > maxIndex ?
	          iteratorDone() :
	          iteratorValue(type, useKeys ? entry[0] : ii - 1, entry[1]);
	      });
	    }
	    return seq.__iteratorUncached(type, reverse);
	  }

	  function fromJS(json, converter) {
	    return converter ?
	      fromJSWith(converter, json, '', {'': json}) :
	      fromJSDefault(json);
	  }

	  function fromJSWith(converter, json, key, parentJSON) {
	    if (Array.isArray(json)) {
	      return converter.call(parentJSON, key, IndexedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));
	    }
	    if (isPlainObj(json)) {
	      return converter.call(parentJSON, key, KeyedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));
	    }
	    return json;
	  }

	  function fromJSDefault(json) {
	    if (Array.isArray(json)) {
	      return IndexedSeq(json).map(fromJSDefault).toList();
	    }
	    if (isPlainObj(json)) {
	      return KeyedSeq(json).map(fromJSDefault).toMap();
	    }
	    return json;
	  }

	  function isPlainObj(value) {
	    return value && (value.constructor === Object || value.constructor === undefined);
	  }

	  /**
	   * An extension of the "same-value" algorithm as [described for use by ES6 Map
	   * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)
	   *
	   * NaN is considered the same as NaN, however -0 and 0 are considered the same
	   * value, which is different from the algorithm described by
	   * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).
	   *
	   * This is extended further to allow Objects to describe the values they
	   * represent, by way of `valueOf` or `equals` (and `hashCode`).
	   *
	   * Note: because of this extension, the key equality of Immutable.Map and the
	   * value equality of Immutable.Set will differ from ES6 Map and Set.
	   *
	   * ### Defining custom values
	   *
	   * The easiest way to describe the value an object represents is by implementing
	   * `valueOf`. For example, `Date` represents a value by returning a unix
	   * timestamp for `valueOf`:
	   *
	   *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...
	   *     var date2 = new Date(1234567890000);
	   *     date1.valueOf(); // 1234567890000
	   *     assert( date1 !== date2 );
	   *     assert( Immutable.is( date1, date2 ) );
	   *
	   * Note: overriding `valueOf` may have other implications if you use this object
	   * where JavaScript expects a primitive, such as implicit string coercion.
	   *
	   * For more complex types, especially collections, implementing `valueOf` may
	   * not be performant. An alternative is to implement `equals` and `hashCode`.
	   *
	   * `equals` takes another object, presumably of similar type, and returns true
	   * if the it is equal. Equality is symmetrical, so the same result should be
	   * returned if this and the argument are flipped.
	   *
	   *     assert( a.equals(b) === b.equals(a) );
	   *
	   * `hashCode` returns a 32bit integer number representing the object which will
	   * be used to determine how to store the value object in a Map or Set. You must
	   * provide both or neither methods, one must not exist without the other.
	   *
	   * Also, an important relationship between these methods must be upheld: if two
	   * values are equal, they *must* return the same hashCode. If the values are not
	   * equal, they might have the same hashCode; this is called a hash collision,
	   * and while undesirable for performance reasons, it is acceptable.
	   *
	   *     if (a.equals(b)) {
	   *       assert( a.hashCode() === b.hashCode() );
	   *     }
	   *
	   * All Immutable collections implement `equals` and `hashCode`.
	   *
	   */
	  function is(valueA, valueB) {
	    if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {
	      return true;
	    }
	    if (!valueA || !valueB) {
	      return false;
	    }
	    if (typeof valueA.valueOf === 'function' &&
	        typeof valueB.valueOf === 'function') {
	      valueA = valueA.valueOf();
	      valueB = valueB.valueOf();
	      if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {
	        return true;
	      }
	      if (!valueA || !valueB) {
	        return false;
	      }
	    }
	    if (typeof valueA.equals === 'function' &&
	        typeof valueB.equals === 'function' &&
	        valueA.equals(valueB)) {
	      return true;
	    }
	    return false;
	  }

	  function deepEqual(a, b) {
	    if (a === b) {
	      return true;
	    }

	    if (
	      !isIterable(b) ||
	      a.size !== undefined && b.size !== undefined && a.size !== b.size ||
	      a.__hash !== undefined && b.__hash !== undefined && a.__hash !== b.__hash ||
	      isKeyed(a) !== isKeyed(b) ||
	      isIndexed(a) !== isIndexed(b) ||
	      isOrdered(a) !== isOrdered(b)
	    ) {
	      return false;
	    }

	    if (a.size === 0 && b.size === 0) {
	      return true;
	    }

	    var notAssociative = !isAssociative(a);

	    if (isOrdered(a)) {
	      var entries = a.entries();
	      return b.every(function(v, k)  {
	        var entry = entries.next().value;
	        return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));
	      }) && entries.next().done;
	    }

	    var flipped = false;

	    if (a.size === undefined) {
	      if (b.size === undefined) {
	        if (typeof a.cacheResult === 'function') {
	          a.cacheResult();
	        }
	      } else {
	        flipped = true;
	        var _ = a;
	        a = b;
	        b = _;
	      }
	    }

	    var allEqual = true;
	    var bSize = b.__iterate(function(v, k)  {
	      if (notAssociative ? !a.has(v) :
	          flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)) {
	        allEqual = false;
	        return false;
	      }
	    });

	    return allEqual && a.size === bSize;
	  }

	  createClass(Repeat, IndexedSeq);

	    function Repeat(value, times) {
	      if (!(this instanceof Repeat)) {
	        return new Repeat(value, times);
	      }
	      this._value = value;
	      this.size = times === undefined ? Infinity : Math.max(0, times);
	      if (this.size === 0) {
	        if (EMPTY_REPEAT) {
	          return EMPTY_REPEAT;
	        }
	        EMPTY_REPEAT = this;
	      }
	    }

	    Repeat.prototype.toString = function() {
	      if (this.size === 0) {
	        return 'Repeat []';
	      }
	      return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';
	    };

	    Repeat.prototype.get = function(index, notSetValue) {
	      return this.has(index) ? this._value : notSetValue;
	    };

	    Repeat.prototype.includes = function(searchValue) {
	      return is(this._value, searchValue);
	    };

	    Repeat.prototype.slice = function(begin, end) {
	      var size = this.size;
	      return wholeSlice(begin, end, size) ? this :
	        new Repeat(this._value, resolveEnd(end, size) - resolveBegin(begin, size));
	    };

	    Repeat.prototype.reverse = function() {
	      return this;
	    };

	    Repeat.prototype.indexOf = function(searchValue) {
	      if (is(this._value, searchValue)) {
	        return 0;
	      }
	      return -1;
	    };

	    Repeat.prototype.lastIndexOf = function(searchValue) {
	      if (is(this._value, searchValue)) {
	        return this.size;
	      }
	      return -1;
	    };

	    Repeat.prototype.__iterate = function(fn, reverse) {
	      for (var ii = 0; ii < this.size; ii++) {
	        if (fn(this._value, ii, this) === false) {
	          return ii + 1;
	        }
	      }
	      return ii;
	    };

	    Repeat.prototype.__iterator = function(type, reverse) {var this$0 = this;
	      var ii = 0;
	      return new Iterator(function() 
	        {return ii < this$0.size ? iteratorValue(type, ii++, this$0._value) : iteratorDone()}
	      );
	    };

	    Repeat.prototype.equals = function(other) {
	      return other instanceof Repeat ?
	        is(this._value, other._value) :
	        deepEqual(other);
	    };


	  var EMPTY_REPEAT;

	  function invariant(condition, error) {
	    if (!condition) throw new Error(error);
	  }

	  createClass(Range, IndexedSeq);

	    function Range(start, end, step) {
	      if (!(this instanceof Range)) {
	        return new Range(start, end, step);
	      }
	      invariant(step !== 0, 'Cannot step a Range by 0');
	      start = start || 0;
	      if (end === undefined) {
	        end = Infinity;
	      }
	      step = step === undefined ? 1 : Math.abs(step);
	      if (end < start) {
	        step = -step;
	      }
	      this._start = start;
	      this._end = end;
	      this._step = step;
	      this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);
	      if (this.size === 0) {
	        if (EMPTY_RANGE) {
	          return EMPTY_RANGE;
	        }
	        EMPTY_RANGE = this;
	      }
	    }

	    Range.prototype.toString = function() {
	      if (this.size === 0) {
	        return 'Range []';
	      }
	      return 'Range [ ' +
	        this._start + '...' + this._end +
	        (this._step !== 1 ? ' by ' + this._step : '') +
	      ' ]';
	    };

	    Range.prototype.get = function(index, notSetValue) {
	      return this.has(index) ?
	        this._start + wrapIndex(this, index) * this._step :
	        notSetValue;
	    };

	    Range.prototype.includes = function(searchValue) {
	      var possibleIndex = (searchValue - this._start) / this._step;
	      return possibleIndex >= 0 &&
	        possibleIndex < this.size &&
	        possibleIndex === Math.floor(possibleIndex);
	    };

	    Range.prototype.slice = function(begin, end) {
	      if (wholeSlice(begin, end, this.size)) {
	        return this;
	      }
	      begin = resolveBegin(begin, this.size);
	      end = resolveEnd(end, this.size);
	      if (end <= begin) {
	        return new Range(0, 0);
	      }
	      return new Range(this.get(begin, this._end), this.get(end, this._end), this._step);
	    };

	    Range.prototype.indexOf = function(searchValue) {
	      var offsetValue = searchValue - this._start;
	      if (offsetValue % this._step === 0) {
	        var index = offsetValue / this._step;
	        if (index >= 0 && index < this.size) {
	          return index
	        }
	      }
	      return -1;
	    };

	    Range.prototype.lastIndexOf = function(searchValue) {
	      return this.indexOf(searchValue);
	    };

	    Range.prototype.__iterate = function(fn, reverse) {
	      var maxIndex = this.size - 1;
	      var step = this._step;
	      var value = reverse ? this._start + maxIndex * step : this._start;
	      for (var ii = 0; ii <= maxIndex; ii++) {
	        if (fn(value, ii, this) === false) {
	          return ii + 1;
	        }
	        value += reverse ? -step : step;
	      }
	      return ii;
	    };

	    Range.prototype.__iterator = function(type, reverse) {
	      var maxIndex = this.size - 1;
	      var step = this._step;
	      var value = reverse ? this._start + maxIndex * step : this._start;
	      var ii = 0;
	      return new Iterator(function()  {
	        var v = value;
	        value += reverse ? -step : step;
	        return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii++, v);
	      });
	    };

	    Range.prototype.equals = function(other) {
	      return other instanceof Range ?
	        this._start === other._start &&
	        this._end === other._end &&
	        this._step === other._step :
	        deepEqual(this, other);
	    };


	  var EMPTY_RANGE;

	  createClass(Collection, Iterable);
	    function Collection() {
	      throw TypeError('Abstract');
	    }


	  createClass(KeyedCollection, Collection);function KeyedCollection() {}

	  createClass(IndexedCollection, Collection);function IndexedCollection() {}

	  createClass(SetCollection, Collection);function SetCollection() {}


	  Collection.Keyed = KeyedCollection;
	  Collection.Indexed = IndexedCollection;
	  Collection.Set = SetCollection;

	  var imul =
	    typeof Math.imul === 'function' && Math.imul(0xffffffff, 2) === -2 ?
	    Math.imul :
	    function imul(a, b) {
	      a = a | 0; // int
	      b = b | 0; // int
	      var c = a & 0xffff;
	      var d = b & 0xffff;
	      // Shift by 0 fixes the sign on the high part.
	      return (c * d) + ((((a >>> 16) * d + c * (b >>> 16)) << 16) >>> 0) | 0; // int
	    };

	  // v8 has an optimization for storing 31-bit signed numbers.
	  // Values which have either 00 or 11 as the high order bits qualify.
	  // This function drops the highest order bit in a signed number, maintaining
	  // the sign bit.
	  function smi(i32) {
	    return ((i32 >>> 1) & 0x40000000) | (i32 & 0xBFFFFFFF);
	  }

	  function hash(o) {
	    if (o === false || o === null || o === undefined) {
	      return 0;
	    }
	    if (typeof o.valueOf === 'function') {
	      o = o.valueOf();
	      if (o === false || o === null || o === undefined) {
	        return 0;
	      }
	    }
	    if (o === true) {
	      return 1;
	    }
	    var type = typeof o;
	    if (type === 'number') {
	      if (o !== o || o === Infinity) {
	        return 0;
	      }
	      var h = o | 0;
	      if (h !== o) {
	        h ^= o * 0xFFFFFFFF;
	      }
	      while (o > 0xFFFFFFFF) {
	        o /= 0xFFFFFFFF;
	        h ^= o;
	      }
	      return smi(h);
	    }
	    if (type === 'string') {
	      return o.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(o) : hashString(o);
	    }
	    if (typeof o.hashCode === 'function') {
	      return o.hashCode();
	    }
	    if (type === 'object') {
	      return hashJSObj(o);
	    }
	    if (typeof o.toString === 'function') {
	      return hashString(o.toString());
	    }
	    throw new Error('Value type ' + type + ' cannot be hashed.');
	  }

	  function cachedHashString(string) {
	    var hash = stringHashCache[string];
	    if (hash === undefined) {
	      hash = hashString(string);
	      if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {
	        STRING_HASH_CACHE_SIZE = 0;
	        stringHashCache = {};
	      }
	      STRING_HASH_CACHE_SIZE++;
	      stringHashCache[string] = hash;
	    }
	    return hash;
	  }

	  // http://jsperf.com/hashing-strings
	  function hashString(string) {
	    // This is the hash from JVM
	    // The hash code for a string is computed as
	    // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],
	    // where s[i] is the ith character of the string and n is the length of
	    // the string. We "mod" the result to make it between 0 (inclusive) and 2^31
	    // (exclusive) by dropping high bits.
	    var hash = 0;
	    for (var ii = 0; ii < string.length; ii++) {
	      hash = 31 * hash + string.charCodeAt(ii) | 0;
	    }
	    return smi(hash);
	  }

	  function hashJSObj(obj) {
	    var hash;
	    if (usingWeakMap) {
	      hash = weakMap.get(obj);
	      if (hash !== undefined) {
	        return hash;
	      }
	    }

	    hash = obj[UID_HASH_KEY];
	    if (hash !== undefined) {
	      return hash;
	    }

	    if (!canDefineProperty) {
	      hash = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];
	      if (hash !== undefined) {
	        return hash;
	      }

	      hash = getIENodeHash(obj);
	      if (hash !== undefined) {
	        return hash;
	      }
	    }

	    hash = ++objHashUID;
	    if (objHashUID & 0x40000000) {
	      objHashUID = 0;
	    }

	    if (usingWeakMap) {
	      weakMap.set(obj, hash);
	    } else if (isExtensible !== undefined && isExtensible(obj) === false) {
	      throw new Error('Non-extensible objects are not allowed as keys.');
	    } else if (canDefineProperty) {
	      Object.defineProperty(obj, UID_HASH_KEY, {
	        'enumerable': false,
	        'configurable': false,
	        'writable': false,
	        'value': hash
	      });
	    } else if (obj.propertyIsEnumerable !== undefined &&
	               obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {
	      // Since we can't define a non-enumerable property on the object
	      // we'll hijack one of the less-used non-enumerable properties to
	      // save our hash on it. Since this is a function it will not show up in
	      // `JSON.stringify` which is what we want.
	      obj.propertyIsEnumerable = function() {
	        return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);
	      };
	      obj.propertyIsEnumerable[UID_HASH_KEY] = hash;
	    } else if (obj.nodeType !== undefined) {
	      // At this point we couldn't get the IE `uniqueID` to use as a hash
	      // and we couldn't use a non-enumerable property to exploit the
	      // dontEnum bug so we simply add the `UID_HASH_KEY` on the node
	      // itself.
	      obj[UID_HASH_KEY] = hash;
	    } else {
	      throw new Error('Unable to set a non-enumerable property on object.');
	    }

	    return hash;
	  }

	  // Get references to ES5 object methods.
	  var isExtensible = Object.isExtensible;

	  // True if Object.defineProperty works as expected. IE8 fails this test.
	  var canDefineProperty = (function() {
	    try {
	      Object.defineProperty({}, '@', {});
	      return true;
	    } catch (e) {
	      return false;
	    }
	  }());

	  // IE has a `uniqueID` property on DOM nodes. We can construct the hash from it
	  // and avoid memory leaks from the IE cloneNode bug.
	  function getIENodeHash(node) {
	    if (node && node.nodeType > 0) {
	      switch (node.nodeType) {
	        case 1: // Element
	          return node.uniqueID;
	        case 9: // Document
	          return node.documentElement && node.documentElement.uniqueID;
	      }
	    }
	  }

	  // If possible, use a WeakMap.
	  var usingWeakMap = typeof WeakMap === 'function';
	  var weakMap;
	  if (usingWeakMap) {
	    weakMap = new WeakMap();
	  }

	  var objHashUID = 0;

	  var UID_HASH_KEY = '__immutablehash__';
	  if (typeof Symbol === 'function') {
	    UID_HASH_KEY = Symbol(UID_HASH_KEY);
	  }

	  var STRING_HASH_CACHE_MIN_STRLEN = 16;
	  var STRING_HASH_CACHE_MAX_SIZE = 255;
	  var STRING_HASH_CACHE_SIZE = 0;
	  var stringHashCache = {};

	  function assertNotInfinite(size) {
	    invariant(
	      size !== Infinity,
	      'Cannot perform this action with an infinite size.'
	    );
	  }

	  createClass(Map, KeyedCollection);

	    // @pragma Construction

	    function Map(value) {
	      return value === null || value === undefined ? emptyMap() :
	        isMap(value) && !isOrdered(value) ? value :
	        emptyMap().withMutations(function(map ) {
	          var iter = KeyedIterable(value);
	          assertNotInfinite(iter.size);
	          iter.forEach(function(v, k)  {return map.set(k, v)});
	        });
	    }

	    Map.of = function() {var keyValues = SLICE$0.call(arguments, 0);
	      return emptyMap().withMutations(function(map ) {
	        for (var i = 0; i < keyValues.length; i += 2) {
	          if (i + 1 >= keyValues.length) {
	            throw new Error('Missing value for key: ' + keyValues[i]);
	          }
	          map.set(keyValues[i], keyValues[i + 1]);
	        }
	      });
	    };

	    Map.prototype.toString = function() {
	      return this.__toString('Map {', '}');
	    };

	    // @pragma Access

	    Map.prototype.get = function(k, notSetValue) {
	      return this._root ?
	        this._root.get(0, undefined, k, notSetValue) :
	        notSetValue;
	    };

	    // @pragma Modification

	    Map.prototype.set = function(k, v) {
	      return updateMap(this, k, v);
	    };

	    Map.prototype.setIn = function(keyPath, v) {
	      return this.updateIn(keyPath, NOT_SET, function()  {return v});
	    };

	    Map.prototype.remove = function(k) {
	      return updateMap(this, k, NOT_SET);
	    };

	    Map.prototype.deleteIn = function(keyPath) {
	      return this.updateIn(keyPath, function()  {return NOT_SET});
	    };

	    Map.prototype.update = function(k, notSetValue, updater) {
	      return arguments.length === 1 ?
	        k(this) :
	        this.updateIn([k], notSetValue, updater);
	    };

	    Map.prototype.updateIn = function(keyPath, notSetValue, updater) {
	      if (!updater) {
	        updater = notSetValue;
	        notSetValue = undefined;
	      }
	      var updatedValue = updateInDeepMap(
	        this,
	        forceIterator(keyPath),
	        notSetValue,
	        updater
	      );
	      return updatedValue === NOT_SET ? undefined : updatedValue;
	    };

	    Map.prototype.clear = function() {
	      if (this.size === 0) {
	        return this;
	      }
	      if (this.__ownerID) {
	        this.size = 0;
	        this._root = null;
	        this.__hash = undefined;
	        this.__altered = true;
	        return this;
	      }
	      return emptyMap();
	    };

	    // @pragma Composition

	    Map.prototype.merge = function(/*...iters*/) {
	      return mergeIntoMapWith(this, undefined, arguments);
	    };

	    Map.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
	      return mergeIntoMapWith(this, merger, iters);
	    };

	    Map.prototype.mergeIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);
	      return this.updateIn(
	        keyPath,
	        emptyMap(),
	        function(m ) {return typeof m.merge === 'function' ?
	          m.merge.apply(m, iters) :
	          iters[iters.length - 1]}
	      );
	    };

	    Map.prototype.mergeDeep = function(/*...iters*/) {
	      return mergeIntoMapWith(this, deepMerger, arguments);
	    };

	    Map.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
	      return mergeIntoMapWith(this, deepMergerWith(merger), iters);
	    };

	    Map.prototype.mergeDeepIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);
	      return this.updateIn(
	        keyPath,
	        emptyMap(),
	        function(m ) {return typeof m.mergeDeep === 'function' ?
	          m.mergeDeep.apply(m, iters) :
	          iters[iters.length - 1]}
	      );
	    };

	    Map.prototype.sort = function(comparator) {
	      // Late binding
	      return OrderedMap(sortFactory(this, comparator));
	    };

	    Map.prototype.sortBy = function(mapper, comparator) {
	      // Late binding
	      return OrderedMap(sortFactory(this, comparator, mapper));
	    };

	    // @pragma Mutability

	    Map.prototype.withMutations = function(fn) {
	      var mutable = this.asMutable();
	      fn(mutable);
	      return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;
	    };

	    Map.prototype.asMutable = function() {
	      return this.__ownerID ? this : this.__ensureOwner(new OwnerID());
	    };

	    Map.prototype.asImmutable = function() {
	      return this.__ensureOwner();
	    };

	    Map.prototype.wasAltered = function() {
	      return this.__altered;
	    };

	    Map.prototype.__iterator = function(type, reverse) {
	      return new MapIterator(this, type, reverse);
	    };

	    Map.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      var iterations = 0;
	      this._root && this._root.iterate(function(entry ) {
	        iterations++;
	        return fn(entry[1], entry[0], this$0);
	      }, reverse);
	      return iterations;
	    };

	    Map.prototype.__ensureOwner = function(ownerID) {
	      if (ownerID === this.__ownerID) {
	        return this;
	      }
	      if (!ownerID) {
	        this.__ownerID = ownerID;
	        this.__altered = false;
	        return this;
	      }
	      return makeMap(this.size, this._root, ownerID, this.__hash);
	    };


	  function isMap(maybeMap) {
	    return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);
	  }

	  Map.isMap = isMap;

	  var IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';

	  var MapPrototype = Map.prototype;
	  MapPrototype[IS_MAP_SENTINEL] = true;
	  MapPrototype[DELETE] = MapPrototype.remove;
	  MapPrototype.removeIn = MapPrototype.deleteIn;


	  // #pragma Trie Nodes



	    function ArrayMapNode(ownerID, entries) {
	      this.ownerID = ownerID;
	      this.entries = entries;
	    }

	    ArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {
	      var entries = this.entries;
	      for (var ii = 0, len = entries.length; ii < len; ii++) {
	        if (is(key, entries[ii][0])) {
	          return entries[ii][1];
	        }
	      }
	      return notSetValue;
	    };

	    ArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	      var removed = value === NOT_SET;

	      var entries = this.entries;
	      var idx = 0;
	      for (var len = entries.length; idx < len; idx++) {
	        if (is(key, entries[idx][0])) {
	          break;
	        }
	      }
	      var exists = idx < len;

	      if (exists ? entries[idx][1] === value : removed) {
	        return this;
	      }

	      SetRef(didAlter);
	      (removed || !exists) && SetRef(didChangeSize);

	      if (removed && entries.length === 1) {
	        return; // undefined
	      }

	      if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {
	        return createNodes(ownerID, entries, key, value);
	      }

	      var isEditable = ownerID && ownerID === this.ownerID;
	      var newEntries = isEditable ? entries : arrCopy(entries);

	      if (exists) {
	        if (removed) {
	          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());
	        } else {
	          newEntries[idx] = [key, value];
	        }
	      } else {
	        newEntries.push([key, value]);
	      }

	      if (isEditable) {
	        this.entries = newEntries;
	        return this;
	      }

	      return new ArrayMapNode(ownerID, newEntries);
	    };




	    function BitmapIndexedNode(ownerID, bitmap, nodes) {
	      this.ownerID = ownerID;
	      this.bitmap = bitmap;
	      this.nodes = nodes;
	    }

	    BitmapIndexedNode.prototype.get = function(shift, keyHash, key, notSetValue) {
	      if (keyHash === undefined) {
	        keyHash = hash(key);
	      }
	      var bit = (1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK));
	      var bitmap = this.bitmap;
	      return (bitmap & bit) === 0 ? notSetValue :
	        this.nodes[popCount(bitmap & (bit - 1))].get(shift + SHIFT, keyHash, key, notSetValue);
	    };

	    BitmapIndexedNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	      if (keyHash === undefined) {
	        keyHash = hash(key);
	      }
	      var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
	      var bit = 1 << keyHashFrag;
	      var bitmap = this.bitmap;
	      var exists = (bitmap & bit) !== 0;

	      if (!exists && value === NOT_SET) {
	        return this;
	      }

	      var idx = popCount(bitmap & (bit - 1));
	      var nodes = this.nodes;
	      var node = exists ? nodes[idx] : undefined;
	      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);

	      if (newNode === node) {
	        return this;
	      }

	      if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {
	        return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);
	      }

	      if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {
	        return nodes[idx ^ 1];
	      }

	      if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {
	        return newNode;
	      }

	      var isEditable = ownerID && ownerID === this.ownerID;
	      var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;
	      var newNodes = exists ? newNode ?
	        setIn(nodes, idx, newNode, isEditable) :
	        spliceOut(nodes, idx, isEditable) :
	        spliceIn(nodes, idx, newNode, isEditable);

	      if (isEditable) {
	        this.bitmap = newBitmap;
	        this.nodes = newNodes;
	        return this;
	      }

	      return new BitmapIndexedNode(ownerID, newBitmap, newNodes);
	    };




	    function HashArrayMapNode(ownerID, count, nodes) {
	      this.ownerID = ownerID;
	      this.count = count;
	      this.nodes = nodes;
	    }

	    HashArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {
	      if (keyHash === undefined) {
	        keyHash = hash(key);
	      }
	      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
	      var node = this.nodes[idx];
	      return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;
	    };

	    HashArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	      if (keyHash === undefined) {
	        keyHash = hash(key);
	      }
	      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
	      var removed = value === NOT_SET;
	      var nodes = this.nodes;
	      var node = nodes[idx];

	      if (removed && !node) {
	        return this;
	      }

	      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);
	      if (newNode === node) {
	        return this;
	      }

	      var newCount = this.count;
	      if (!node) {
	        newCount++;
	      } else if (!newNode) {
	        newCount--;
	        if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {
	          return packNodes(ownerID, nodes, newCount, idx);
	        }
	      }

	      var isEditable = ownerID && ownerID === this.ownerID;
	      var newNodes = setIn(nodes, idx, newNode, isEditable);

	      if (isEditable) {
	        this.count = newCount;
	        this.nodes = newNodes;
	        return this;
	      }

	      return new HashArrayMapNode(ownerID, newCount, newNodes);
	    };




	    function HashCollisionNode(ownerID, keyHash, entries) {
	      this.ownerID = ownerID;
	      this.keyHash = keyHash;
	      this.entries = entries;
	    }

	    HashCollisionNode.prototype.get = function(shift, keyHash, key, notSetValue) {
	      var entries = this.entries;
	      for (var ii = 0, len = entries.length; ii < len; ii++) {
	        if (is(key, entries[ii][0])) {
	          return entries[ii][1];
	        }
	      }
	      return notSetValue;
	    };

	    HashCollisionNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	      if (keyHash === undefined) {
	        keyHash = hash(key);
	      }

	      var removed = value === NOT_SET;

	      if (keyHash !== this.keyHash) {
	        if (removed) {
	          return this;
	        }
	        SetRef(didAlter);
	        SetRef(didChangeSize);
	        return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);
	      }

	      var entries = this.entries;
	      var idx = 0;
	      for (var len = entries.length; idx < len; idx++) {
	        if (is(key, entries[idx][0])) {
	          break;
	        }
	      }
	      var exists = idx < len;

	      if (exists ? entries[idx][1] === value : removed) {
	        return this;
	      }

	      SetRef(didAlter);
	      (removed || !exists) && SetRef(didChangeSize);

	      if (removed && len === 2) {
	        return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);
	      }

	      var isEditable = ownerID && ownerID === this.ownerID;
	      var newEntries = isEditable ? entries : arrCopy(entries);

	      if (exists) {
	        if (removed) {
	          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());
	        } else {
	          newEntries[idx] = [key, value];
	        }
	      } else {
	        newEntries.push([key, value]);
	      }

	      if (isEditable) {
	        this.entries = newEntries;
	        return this;
	      }

	      return new HashCollisionNode(ownerID, this.keyHash, newEntries);
	    };




	    function ValueNode(ownerID, keyHash, entry) {
	      this.ownerID = ownerID;
	      this.keyHash = keyHash;
	      this.entry = entry;
	    }

	    ValueNode.prototype.get = function(shift, keyHash, key, notSetValue) {
	      return is(key, this.entry[0]) ? this.entry[1] : notSetValue;
	    };

	    ValueNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	      var removed = value === NOT_SET;
	      var keyMatch = is(key, this.entry[0]);
	      if (keyMatch ? value === this.entry[1] : removed) {
	        return this;
	      }

	      SetRef(didAlter);

	      if (removed) {
	        SetRef(didChangeSize);
	        return; // undefined
	      }

	      if (keyMatch) {
	        if (ownerID && ownerID === this.ownerID) {
	          this.entry[1] = value;
	          return this;
	        }
	        return new ValueNode(ownerID, this.keyHash, [key, value]);
	      }

	      SetRef(didChangeSize);
	      return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);
	    };



	  // #pragma Iterators

	  ArrayMapNode.prototype.iterate =
	  HashCollisionNode.prototype.iterate = function (fn, reverse) {
	    var entries = this.entries;
	    for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {
	      if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {
	        return false;
	      }
	    }
	  }

	  BitmapIndexedNode.prototype.iterate =
	  HashArrayMapNode.prototype.iterate = function (fn, reverse) {
	    var nodes = this.nodes;
	    for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {
	      var node = nodes[reverse ? maxIndex - ii : ii];
	      if (node && node.iterate(fn, reverse) === false) {
	        return false;
	      }
	    }
	  }

	  ValueNode.prototype.iterate = function (fn, reverse) {
	    return fn(this.entry);
	  }

	  createClass(MapIterator, Iterator);

	    function MapIterator(map, type, reverse) {
	      this._type = type;
	      this._reverse = reverse;
	      this._stack = map._root && mapIteratorFrame(map._root);
	    }

	    MapIterator.prototype.next = function() {
	      var type = this._type;
	      var stack = this._stack;
	      while (stack) {
	        var node = stack.node;
	        var index = stack.index++;
	        var maxIndex;
	        if (node.entry) {
	          if (index === 0) {
	            return mapIteratorValue(type, node.entry);
	          }
	        } else if (node.entries) {
	          maxIndex = node.entries.length - 1;
	          if (index <= maxIndex) {
	            return mapIteratorValue(type, node.entries[this._reverse ? maxIndex - index : index]);
	          }
	        } else {
	          maxIndex = node.nodes.length - 1;
	          if (index <= maxIndex) {
	            var subNode = node.nodes[this._reverse ? maxIndex - index : index];
	            if (subNode) {
	              if (subNode.entry) {
	                return mapIteratorValue(type, subNode.entry);
	              }
	              stack = this._stack = mapIteratorFrame(subNode, stack);
	            }
	            continue;
	          }
	        }
	        stack = this._stack = this._stack.__prev;
	      }
	      return iteratorDone();
	    };


	  function mapIteratorValue(type, entry) {
	    return iteratorValue(type, entry[0], entry[1]);
	  }

	  function mapIteratorFrame(node, prev) {
	    return {
	      node: node,
	      index: 0,
	      __prev: prev
	    };
	  }

	  function makeMap(size, root, ownerID, hash) {
	    var map = Object.create(MapPrototype);
	    map.size = size;
	    map._root = root;
	    map.__ownerID = ownerID;
	    map.__hash = hash;
	    map.__altered = false;
	    return map;
	  }

	  var EMPTY_MAP;
	  function emptyMap() {
	    return EMPTY_MAP || (EMPTY_MAP = makeMap(0));
	  }

	  function updateMap(map, k, v) {
	    var newRoot;
	    var newSize;
	    if (!map._root) {
	      if (v === NOT_SET) {
	        return map;
	      }
	      newSize = 1;
	      newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);
	    } else {
	      var didChangeSize = MakeRef(CHANGE_LENGTH);
	      var didAlter = MakeRef(DID_ALTER);
	      newRoot = updateNode(map._root, map.__ownerID, 0, undefined, k, v, didChangeSize, didAlter);
	      if (!didAlter.value) {
	        return map;
	      }
	      newSize = map.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);
	    }
	    if (map.__ownerID) {
	      map.size = newSize;
	      map._root = newRoot;
	      map.__hash = undefined;
	      map.__altered = true;
	      return map;
	    }
	    return newRoot ? makeMap(newSize, newRoot) : emptyMap();
	  }

	  function updateNode(node, ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	    if (!node) {
	      if (value === NOT_SET) {
	        return node;
	      }
	      SetRef(didAlter);
	      SetRef(didChangeSize);
	      return new ValueNode(ownerID, keyHash, [key, value]);
	    }
	    return node.update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter);
	  }

	  function isLeafNode(node) {
	    return node.constructor === ValueNode || node.constructor === HashCollisionNode;
	  }

	  function mergeIntoNode(node, ownerID, shift, keyHash, entry) {
	    if (node.keyHash === keyHash) {
	      return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);
	    }

	    var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;
	    var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;

	    var newNode;
	    var nodes = idx1 === idx2 ?
	      [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)] :
	      ((newNode = new ValueNode(ownerID, keyHash, entry)), idx1 < idx2 ? [node, newNode] : [newNode, node]);

	    return new BitmapIndexedNode(ownerID, (1 << idx1) | (1 << idx2), nodes);
	  }

	  function createNodes(ownerID, entries, key, value) {
	    if (!ownerID) {
	      ownerID = new OwnerID();
	    }
	    var node = new ValueNode(ownerID, hash(key), [key, value]);
	    for (var ii = 0; ii < entries.length; ii++) {
	      var entry = entries[ii];
	      node = node.update(ownerID, 0, undefined, entry[0], entry[1]);
	    }
	    return node;
	  }

	  function packNodes(ownerID, nodes, count, excluding) {
	    var bitmap = 0;
	    var packedII = 0;
	    var packedNodes = new Array(count);
	    for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {
	      var node = nodes[ii];
	      if (node !== undefined && ii !== excluding) {
	        bitmap |= bit;
	        packedNodes[packedII++] = node;
	      }
	    }
	    return new BitmapIndexedNode(ownerID, bitmap, packedNodes);
	  }

	  function expandNodes(ownerID, nodes, bitmap, including, node) {
	    var count = 0;
	    var expandedNodes = new Array(SIZE);
	    for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {
	      expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;
	    }
	    expandedNodes[including] = node;
	    return new HashArrayMapNode(ownerID, count + 1, expandedNodes);
	  }

	  function mergeIntoMapWith(map, merger, iterables) {
	    var iters = [];
	    for (var ii = 0; ii < iterables.length; ii++) {
	      var value = iterables[ii];
	      var iter = KeyedIterable(value);
	      if (!isIterable(value)) {
	        iter = iter.map(function(v ) {return fromJS(v)});
	      }
	      iters.push(iter);
	    }
	    return mergeIntoCollectionWith(map, merger, iters);
	  }

	  function deepMerger(existing, value, key) {
	    return existing && existing.mergeDeep && isIterable(value) ?
	      existing.mergeDeep(value) :
	      is(existing, value) ? existing : value;
	  }

	  function deepMergerWith(merger) {
	    return function(existing, value, key)  {
	      if (existing && existing.mergeDeepWith && isIterable(value)) {
	        return existing.mergeDeepWith(merger, value);
	      }
	      var nextValue = merger(existing, value, key);
	      return is(existing, nextValue) ? existing : nextValue;
	    };
	  }

	  function mergeIntoCollectionWith(collection, merger, iters) {
	    iters = iters.filter(function(x ) {return x.size !== 0});
	    if (iters.length === 0) {
	      return collection;
	    }
	    if (collection.size === 0 && !collection.__ownerID && iters.length === 1) {
	      return collection.constructor(iters[0]);
	    }
	    return collection.withMutations(function(collection ) {
	      var mergeIntoMap = merger ?
	        function(value, key)  {
	          collection.update(key, NOT_SET, function(existing )
	            {return existing === NOT_SET ? value : merger(existing, value, key)}
	          );
	        } :
	        function(value, key)  {
	          collection.set(key, value);
	        }
	      for (var ii = 0; ii < iters.length; ii++) {
	        iters[ii].forEach(mergeIntoMap);
	      }
	    });
	  }

	  function updateInDeepMap(existing, keyPathIter, notSetValue, updater) {
	    var isNotSet = existing === NOT_SET;
	    var step = keyPathIter.next();
	    if (step.done) {
	      var existingValue = isNotSet ? notSetValue : existing;
	      var newValue = updater(existingValue);
	      return newValue === existingValue ? existing : newValue;
	    }
	    invariant(
	      isNotSet || (existing && existing.set),
	      'invalid keyPath'
	    );
	    var key = step.value;
	    var nextExisting = isNotSet ? NOT_SET : existing.get(key, NOT_SET);
	    var nextUpdated = updateInDeepMap(
	      nextExisting,
	      keyPathIter,
	      notSetValue,
	      updater
	    );
	    return nextUpdated === nextExisting ? existing :
	      nextUpdated === NOT_SET ? existing.remove(key) :
	      (isNotSet ? emptyMap() : existing).set(key, nextUpdated);
	  }

	  function popCount(x) {
	    x = x - ((x >> 1) & 0x55555555);
	    x = (x & 0x33333333) + ((x >> 2) & 0x33333333);
	    x = (x + (x >> 4)) & 0x0f0f0f0f;
	    x = x + (x >> 8);
	    x = x + (x >> 16);
	    return x & 0x7f;
	  }

	  function setIn(array, idx, val, canEdit) {
	    var newArray = canEdit ? array : arrCopy(array);
	    newArray[idx] = val;
	    return newArray;
	  }

	  function spliceIn(array, idx, val, canEdit) {
	    var newLen = array.length + 1;
	    if (canEdit && idx + 1 === newLen) {
	      array[idx] = val;
	      return array;
	    }
	    var newArray = new Array(newLen);
	    var after = 0;
	    for (var ii = 0; ii < newLen; ii++) {
	      if (ii === idx) {
	        newArray[ii] = val;
	        after = -1;
	      } else {
	        newArray[ii] = array[ii + after];
	      }
	    }
	    return newArray;
	  }

	  function spliceOut(array, idx, canEdit) {
	    var newLen = array.length - 1;
	    if (canEdit && idx === newLen) {
	      array.pop();
	      return array;
	    }
	    var newArray = new Array(newLen);
	    var after = 0;
	    for (var ii = 0; ii < newLen; ii++) {
	      if (ii === idx) {
	        after = 1;
	      }
	      newArray[ii] = array[ii + after];
	    }
	    return newArray;
	  }

	  var MAX_ARRAY_MAP_SIZE = SIZE / 4;
	  var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;
	  var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;

	  createClass(List, IndexedCollection);

	    // @pragma Construction

	    function List(value) {
	      var empty = emptyList();
	      if (value === null || value === undefined) {
	        return empty;
	      }
	      if (isList(value)) {
	        return value;
	      }
	      var iter = IndexedIterable(value);
	      var size = iter.size;
	      if (size === 0) {
	        return empty;
	      }
	      assertNotInfinite(size);
	      if (size > 0 && size < SIZE) {
	        return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));
	      }
	      return empty.withMutations(function(list ) {
	        list.setSize(size);
	        iter.forEach(function(v, i)  {return list.set(i, v)});
	      });
	    }

	    List.of = function(/*...values*/) {
	      return this(arguments);
	    };

	    List.prototype.toString = function() {
	      return this.__toString('List [', ']');
	    };

	    // @pragma Access

	    List.prototype.get = function(index, notSetValue) {
	      index = wrapIndex(this, index);
	      if (index >= 0 && index < this.size) {
	        index += this._origin;
	        var node = listNodeFor(this, index);
	        return node && node.array[index & MASK];
	      }
	      return notSetValue;
	    };

	    // @pragma Modification

	    List.prototype.set = function(index, value) {
	      return updateList(this, index, value);
	    };

	    List.prototype.remove = function(index) {
	      return !this.has(index) ? this :
	        index === 0 ? this.shift() :
	        index === this.size - 1 ? this.pop() :
	        this.splice(index, 1);
	    };

	    List.prototype.insert = function(index, value) {
	      return this.splice(index, 0, value);
	    };

	    List.prototype.clear = function() {
	      if (this.size === 0) {
	        return this;
	      }
	      if (this.__ownerID) {
	        this.size = this._origin = this._capacity = 0;
	        this._level = SHIFT;
	        this._root = this._tail = null;
	        this.__hash = undefined;
	        this.__altered = true;
	        return this;
	      }
	      return emptyList();
	    };

	    List.prototype.push = function(/*...values*/) {
	      var values = arguments;
	      var oldSize = this.size;
	      return this.withMutations(function(list ) {
	        setListBounds(list, 0, oldSize + values.length);
	        for (var ii = 0; ii < values.length; ii++) {
	          list.set(oldSize + ii, values[ii]);
	        }
	      });
	    };

	    List.prototype.pop = function() {
	      return setListBounds(this, 0, -1);
	    };

	    List.prototype.unshift = function(/*...values*/) {
	      var values = arguments;
	      return this.withMutations(function(list ) {
	        setListBounds(list, -values.length);
	        for (var ii = 0; ii < values.length; ii++) {
	          list.set(ii, values[ii]);
	        }
	      });
	    };

	    List.prototype.shift = function() {
	      return setListBounds(this, 1);
	    };

	    // @pragma Composition

	    List.prototype.merge = function(/*...iters*/) {
	      return mergeIntoListWith(this, undefined, arguments);
	    };

	    List.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
	      return mergeIntoListWith(this, merger, iters);
	    };

	    List.prototype.mergeDeep = function(/*...iters*/) {
	      return mergeIntoListWith(this, deepMerger, arguments);
	    };

	    List.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
	      return mergeIntoListWith(this, deepMergerWith(merger), iters);
	    };

	    List.prototype.setSize = function(size) {
	      return setListBounds(this, 0, size);
	    };

	    // @pragma Iteration

	    List.prototype.slice = function(begin, end) {
	      var size = this.size;
	      if (wholeSlice(begin, end, size)) {
	        return this;
	      }
	      return setListBounds(
	        this,
	        resolveBegin(begin, size),
	        resolveEnd(end, size)
	      );
	    };

	    List.prototype.__iterator = function(type, reverse) {
	      var index = 0;
	      var values = iterateList(this, reverse);
	      return new Iterator(function()  {
	        var value = values();
	        return value === DONE ?
	          iteratorDone() :
	          iteratorValue(type, index++, value);
	      });
	    };

	    List.prototype.__iterate = function(fn, reverse) {
	      var index = 0;
	      var values = iterateList(this, reverse);
	      var value;
	      while ((value = values()) !== DONE) {
	        if (fn(value, index++, this) === false) {
	          break;
	        }
	      }
	      return index;
	    };

	    List.prototype.__ensureOwner = function(ownerID) {
	      if (ownerID === this.__ownerID) {
	        return this;
	      }
	      if (!ownerID) {
	        this.__ownerID = ownerID;
	        return this;
	      }
	      return makeList(this._origin, this._capacity, this._level, this._root, this._tail, ownerID, this.__hash);
	    };


	  function isList(maybeList) {
	    return !!(maybeList && maybeList[IS_LIST_SENTINEL]);
	  }

	  List.isList = isList;

	  var IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';

	  var ListPrototype = List.prototype;
	  ListPrototype[IS_LIST_SENTINEL] = true;
	  ListPrototype[DELETE] = ListPrototype.remove;
	  ListPrototype.setIn = MapPrototype.setIn;
	  ListPrototype.deleteIn =
	  ListPrototype.removeIn = MapPrototype.removeIn;
	  ListPrototype.update = MapPrototype.update;
	  ListPrototype.updateIn = MapPrototype.updateIn;
	  ListPrototype.mergeIn = MapPrototype.mergeIn;
	  ListPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;
	  ListPrototype.withMutations = MapPrototype.withMutations;
	  ListPrototype.asMutable = MapPrototype.asMutable;
	  ListPrototype.asImmutable = MapPrototype.asImmutable;
	  ListPrototype.wasAltered = MapPrototype.wasAltered;



	    function VNode(array, ownerID) {
	      this.array = array;
	      this.ownerID = ownerID;
	    }

	    // TODO: seems like these methods are very similar

	    VNode.prototype.removeBefore = function(ownerID, level, index) {
	      if (index === level ? 1 << level : 0 || this.array.length === 0) {
	        return this;
	      }
	      var originIndex = (index >>> level) & MASK;
	      if (originIndex >= this.array.length) {
	        return new VNode([], ownerID);
	      }
	      var removingFirst = originIndex === 0;
	      var newChild;
	      if (level > 0) {
	        var oldChild = this.array[originIndex];
	        newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);
	        if (newChild === oldChild && removingFirst) {
	          return this;
	        }
	      }
	      if (removingFirst && !newChild) {
	        return this;
	      }
	      var editable = editableVNode(this, ownerID);
	      if (!removingFirst) {
	        for (var ii = 0; ii < originIndex; ii++) {
	          editable.array[ii] = undefined;
	        }
	      }
	      if (newChild) {
	        editable.array[originIndex] = newChild;
	      }
	      return editable;
	    };

	    VNode.prototype.removeAfter = function(ownerID, level, index) {
	      if (index === (level ? 1 << level : 0) || this.array.length === 0) {
	        return this;
	      }
	      var sizeIndex = ((index - 1) >>> level) & MASK;
	      if (sizeIndex >= this.array.length) {
	        return this;
	      }

	      var newChild;
	      if (level > 0) {
	        var oldChild = this.array[sizeIndex];
	        newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);
	        if (newChild === oldChild && sizeIndex === this.array.length - 1) {
	          return this;
	        }
	      }

	      var editable = editableVNode(this, ownerID);
	      editable.array.splice(sizeIndex + 1);
	      if (newChild) {
	        editable.array[sizeIndex] = newChild;
	      }
	      return editable;
	    };



	  var DONE = {};

	  function iterateList(list, reverse) {
	    var left = list._origin;
	    var right = list._capacity;
	    var tailPos = getTailOffset(right);
	    var tail = list._tail;

	    return iterateNodeOrLeaf(list._root, list._level, 0);

	    function iterateNodeOrLeaf(node, level, offset) {
	      return level === 0 ?
	        iterateLeaf(node, offset) :
	        iterateNode(node, level, offset);
	    }

	    function iterateLeaf(node, offset) {
	      var array = offset === tailPos ? tail && tail.array : node && node.array;
	      var from = offset > left ? 0 : left - offset;
	      var to = right - offset;
	      if (to > SIZE) {
	        to = SIZE;
	      }
	      return function()  {
	        if (from === to) {
	          return DONE;
	        }
	        var idx = reverse ? --to : from++;
	        return array && array[idx];
	      };
	    }

	    function iterateNode(node, level, offset) {
	      var values;
	      var array = node && node.array;
	      var from = offset > left ? 0 : (left - offset) >> level;
	      var to = ((right - offset) >> level) + 1;
	      if (to > SIZE) {
	        to = SIZE;
	      }
	      return function()  {
	        do {
	          if (values) {
	            var value = values();
	            if (value !== DONE) {
	              return value;
	            }
	            values = null;
	          }
	          if (from === to) {
	            return DONE;
	          }
	          var idx = reverse ? --to : from++;
	          values = iterateNodeOrLeaf(
	            array && array[idx], level - SHIFT, offset + (idx << level)
	          );
	        } while (true);
	      };
	    }
	  }

	  function makeList(origin, capacity, level, root, tail, ownerID, hash) {
	    var list = Object.create(ListPrototype);
	    list.size = capacity - origin;
	    list._origin = origin;
	    list._capacity = capacity;
	    list._level = level;
	    list._root = root;
	    list._tail = tail;
	    list.__ownerID = ownerID;
	    list.__hash = hash;
	    list.__altered = false;
	    return list;
	  }

	  var EMPTY_LIST;
	  function emptyList() {
	    return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));
	  }

	  function updateList(list, index, value) {
	    index = wrapIndex(list, index);

	    if (index !== index) {
	      return list;
	    }

	    if (index >= list.size || index < 0) {
	      return list.withMutations(function(list ) {
	        index < 0 ?
	          setListBounds(list, index).set(0, value) :
	          setListBounds(list, 0, index + 1).set(index, value)
	      });
	    }

	    index += list._origin;

	    var newTail = list._tail;
	    var newRoot = list._root;
	    var didAlter = MakeRef(DID_ALTER);
	    if (index >= getTailOffset(list._capacity)) {
	      newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);
	    } else {
	      newRoot = updateVNode(newRoot, list.__ownerID, list._level, index, value, didAlter);
	    }

	    if (!didAlter.value) {
	      return list;
	    }

	    if (list.__ownerID) {
	      list._root = newRoot;
	      list._tail = newTail;
	      list.__hash = undefined;
	      list.__altered = true;
	      return list;
	    }
	    return makeList(list._origin, list._capacity, list._level, newRoot, newTail);
	  }

	  function updateVNode(node, ownerID, level, index, value, didAlter) {
	    var idx = (index >>> level) & MASK;
	    var nodeHas = node && idx < node.array.length;
	    if (!nodeHas && value === undefined) {
	      return node;
	    }

	    var newNode;

	    if (level > 0) {
	      var lowerNode = node && node.array[idx];
	      var newLowerNode = updateVNode(lowerNode, ownerID, level - SHIFT, index, value, didAlter);
	      if (newLowerNode === lowerNode) {
	        return node;
	      }
	      newNode = editableVNode(node, ownerID);
	      newNode.array[idx] = newLowerNode;
	      return newNode;
	    }

	    if (nodeHas && node.array[idx] === value) {
	      return node;
	    }

	    SetRef(didAlter);

	    newNode = editableVNode(node, ownerID);
	    if (value === undefined && idx === newNode.array.length - 1) {
	      newNode.array.pop();
	    } else {
	      newNode.array[idx] = value;
	    }
	    return newNode;
	  }

	  function editableVNode(node, ownerID) {
	    if (ownerID && node && ownerID === node.ownerID) {
	      return node;
	    }
	    return new VNode(node ? node.array.slice() : [], ownerID);
	  }

	  function listNodeFor(list, rawIndex) {
	    if (rawIndex >= getTailOffset(list._capacity)) {
	      return list._tail;
	    }
	    if (rawIndex < 1 << (list._level + SHIFT)) {
	      var node = list._root;
	      var level = list._level;
	      while (node && level > 0) {
	        node = node.array[(rawIndex >>> level) & MASK];
	        level -= SHIFT;
	      }
	      return node;
	    }
	  }

	  function setListBounds(list, begin, end) {
	    // Sanitize begin & end using this shorthand for ToInt32(argument)
	    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32
	    if (begin !== undefined) {
	      begin = begin | 0;
	    }
	    if (end !== undefined) {
	      end = end | 0;
	    }
	    var owner = list.__ownerID || new OwnerID();
	    var oldOrigin = list._origin;
	    var oldCapacity = list._capacity;
	    var newOrigin = oldOrigin + begin;
	    var newCapacity = end === undefined ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;
	    if (newOrigin === oldOrigin && newCapacity === oldCapacity) {
	      return list;
	    }

	    // If it's going to end after it starts, it's empty.
	    if (newOrigin >= newCapacity) {
	      return list.clear();
	    }

	    var newLevel = list._level;
	    var newRoot = list._root;

	    // New origin might need creating a higher root.
	    var offsetShift = 0;
	    while (newOrigin + offsetShift < 0) {
	      newRoot = new VNode(newRoot && newRoot.array.length ? [undefined, newRoot] : [], owner);
	      newLevel += SHIFT;
	      offsetShift += 1 << newLevel;
	    }
	    if (offsetShift) {
	      newOrigin += offsetShift;
	      oldOrigin += offsetShift;
	      newCapacity += offsetShift;
	      oldCapacity += offsetShift;
	    }

	    var oldTailOffset = getTailOffset(oldCapacity);
	    var newTailOffset = getTailOffset(newCapacity);

	    // New size might need creating a higher root.
	    while (newTailOffset >= 1 << (newLevel + SHIFT)) {
	      newRoot = new VNode(newRoot && newRoot.array.length ? [newRoot] : [], owner);
	      newLevel += SHIFT;
	    }

	    // Locate or create the new tail.
	    var oldTail = list._tail;
	    var newTail = newTailOffset < oldTailOffset ?
	      listNodeFor(list, newCapacity - 1) :
	      newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;

	    // Merge Tail into tree.
	    if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {
	      newRoot = editableVNode(newRoot, owner);
	      var node = newRoot;
	      for (var level = newLevel; level > SHIFT; level -= SHIFT) {
	        var idx = (oldTailOffset >>> level) & MASK;
	        node = node.array[idx] = editableVNode(node.array[idx], owner);
	      }
	      node.array[(oldTailOffset >>> SHIFT) & MASK] = oldTail;
	    }

	    // If the size has been reduced, there's a chance the tail needs to be trimmed.
	    if (newCapacity < oldCapacity) {
	      newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);
	    }

	    // If the new origin is within the tail, then we do not need a root.
	    if (newOrigin >= newTailOffset) {
	      newOrigin -= newTailOffset;
	      newCapacity -= newTailOffset;
	      newLevel = SHIFT;
	      newRoot = null;
	      newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);

	    // Otherwise, if the root has been trimmed, garbage collect.
	    } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {
	      offsetShift = 0;

	      // Identify the new top root node of the subtree of the old root.
	      while (newRoot) {
	        var beginIndex = (newOrigin >>> newLevel) & MASK;
	        if (beginIndex !== (newTailOffset >>> newLevel) & MASK) {
	          break;
	        }
	        if (beginIndex) {
	          offsetShift += (1 << newLevel) * beginIndex;
	        }
	        newLevel -= SHIFT;
	        newRoot = newRoot.array[beginIndex];
	      }

	      // Trim the new sides of the new root.
	      if (newRoot && newOrigin > oldOrigin) {
	        newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);
	      }
	      if (newRoot && newTailOffset < oldTailOffset) {
	        newRoot = newRoot.removeAfter(owner, newLevel, newTailOffset - offsetShift);
	      }
	      if (offsetShift) {
	        newOrigin -= offsetShift;
	        newCapacity -= offsetShift;
	      }
	    }

	    if (list.__ownerID) {
	      list.size = newCapacity - newOrigin;
	      list._origin = newOrigin;
	      list._capacity = newCapacity;
	      list._level = newLevel;
	      list._root = newRoot;
	      list._tail = newTail;
	      list.__hash = undefined;
	      list.__altered = true;
	      return list;
	    }
	    return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);
	  }

	  function mergeIntoListWith(list, merger, iterables) {
	    var iters = [];
	    var maxSize = 0;
	    for (var ii = 0; ii < iterables.length; ii++) {
	      var value = iterables[ii];
	      var iter = IndexedIterable(value);
	      if (iter.size > maxSize) {
	        maxSize = iter.size;
	      }
	      if (!isIterable(value)) {
	        iter = iter.map(function(v ) {return fromJS(v)});
	      }
	      iters.push(iter);
	    }
	    if (maxSize > list.size) {
	      list = list.setSize(maxSize);
	    }
	    return mergeIntoCollectionWith(list, merger, iters);
	  }

	  function getTailOffset(size) {
	    return size < SIZE ? 0 : (((size - 1) >>> SHIFT) << SHIFT);
	  }

	  createClass(OrderedMap, Map);

	    // @pragma Construction

	    function OrderedMap(value) {
	      return value === null || value === undefined ? emptyOrderedMap() :
	        isOrderedMap(value) ? value :
	        emptyOrderedMap().withMutations(function(map ) {
	          var iter = KeyedIterable(value);
	          assertNotInfinite(iter.size);
	          iter.forEach(function(v, k)  {return map.set(k, v)});
	        });
	    }

	    OrderedMap.of = function(/*...values*/) {
	      return this(arguments);
	    };

	    OrderedMap.prototype.toString = function() {
	      return this.__toString('OrderedMap {', '}');
	    };

	    // @pragma Access

	    OrderedMap.prototype.get = function(k, notSetValue) {
	      var index = this._map.get(k);
	      return index !== undefined ? this._list.get(index)[1] : notSetValue;
	    };

	    // @pragma Modification

	    OrderedMap.prototype.clear = function() {
	      if (this.size === 0) {
	        return this;
	      }
	      if (this.__ownerID) {
	        this.size = 0;
	        this._map.clear();
	        this._list.clear();
	        return this;
	      }
	      return emptyOrderedMap();
	    };

	    OrderedMap.prototype.set = function(k, v) {
	      return updateOrderedMap(this, k, v);
	    };

	    OrderedMap.prototype.remove = function(k) {
	      return updateOrderedMap(this, k, NOT_SET);
	    };

	    OrderedMap.prototype.wasAltered = function() {
	      return this._map.wasAltered() || this._list.wasAltered();
	    };

	    OrderedMap.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      return this._list.__iterate(
	        function(entry ) {return entry && fn(entry[1], entry[0], this$0)},
	        reverse
	      );
	    };

	    OrderedMap.prototype.__iterator = function(type, reverse) {
	      return this._list.fromEntrySeq().__iterator(type, reverse);
	    };

	    OrderedMap.prototype.__ensureOwner = function(ownerID) {
	      if (ownerID === this.__ownerID) {
	        return this;
	      }
	      var newMap = this._map.__ensureOwner(ownerID);
	      var newList = this._list.__ensureOwner(ownerID);
	      if (!ownerID) {
	        this.__ownerID = ownerID;
	        this._map = newMap;
	        this._list = newList;
	        return this;
	      }
	      return makeOrderedMap(newMap, newList, ownerID, this.__hash);
	    };


	  function isOrderedMap(maybeOrderedMap) {
	    return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);
	  }

	  OrderedMap.isOrderedMap = isOrderedMap;

	  OrderedMap.prototype[IS_ORDERED_SENTINEL] = true;
	  OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;



	  function makeOrderedMap(map, list, ownerID, hash) {
	    var omap = Object.create(OrderedMap.prototype);
	    omap.size = map ? map.size : 0;
	    omap._map = map;
	    omap._list = list;
	    omap.__ownerID = ownerID;
	    omap.__hash = hash;
	    return omap;
	  }

	  var EMPTY_ORDERED_MAP;
	  function emptyOrderedMap() {
	    return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));
	  }

	  function updateOrderedMap(omap, k, v) {
	    var map = omap._map;
	    var list = omap._list;
	    var i = map.get(k);
	    var has = i !== undefined;
	    var newMap;
	    var newList;
	    if (v === NOT_SET) { // removed
	      if (!has) {
	        return omap;
	      }
	      if (list.size >= SIZE && list.size >= map.size * 2) {
	        newList = list.filter(function(entry, idx)  {return entry !== undefined && i !== idx});
	        newMap = newList.toKeyedSeq().map(function(entry ) {return entry[0]}).flip().toMap();
	        if (omap.__ownerID) {
	          newMap.__ownerID = newList.__ownerID = omap.__ownerID;
	        }
	      } else {
	        newMap = map.remove(k);
	        newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);
	      }
	    } else {
	      if (has) {
	        if (v === list.get(i)[1]) {
	          return omap;
	        }
	        newMap = map;
	        newList = list.set(i, [k, v]);
	      } else {
	        newMap = map.set(k, list.size);
	        newList = list.set(list.size, [k, v]);
	      }
	    }
	    if (omap.__ownerID) {
	      omap.size = newMap.size;
	      omap._map = newMap;
	      omap._list = newList;
	      omap.__hash = undefined;
	      return omap;
	    }
	    return makeOrderedMap(newMap, newList);
	  }

	  createClass(ToKeyedSequence, KeyedSeq);
	    function ToKeyedSequence(indexed, useKeys) {
	      this._iter = indexed;
	      this._useKeys = useKeys;
	      this.size = indexed.size;
	    }

	    ToKeyedSequence.prototype.get = function(key, notSetValue) {
	      return this._iter.get(key, notSetValue);
	    };

	    ToKeyedSequence.prototype.has = function(key) {
	      return this._iter.has(key);
	    };

	    ToKeyedSequence.prototype.valueSeq = function() {
	      return this._iter.valueSeq();
	    };

	    ToKeyedSequence.prototype.reverse = function() {var this$0 = this;
	      var reversedSequence = reverseFactory(this, true);
	      if (!this._useKeys) {
	        reversedSequence.valueSeq = function()  {return this$0._iter.toSeq().reverse()};
	      }
	      return reversedSequence;
	    };

	    ToKeyedSequence.prototype.map = function(mapper, context) {var this$0 = this;
	      var mappedSequence = mapFactory(this, mapper, context);
	      if (!this._useKeys) {
	        mappedSequence.valueSeq = function()  {return this$0._iter.toSeq().map(mapper, context)};
	      }
	      return mappedSequence;
	    };

	    ToKeyedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      var ii;
	      return this._iter.__iterate(
	        this._useKeys ?
	          function(v, k)  {return fn(v, k, this$0)} :
	          ((ii = reverse ? resolveSize(this) : 0),
	            function(v ) {return fn(v, reverse ? --ii : ii++, this$0)}),
	        reverse
	      );
	    };

	    ToKeyedSequence.prototype.__iterator = function(type, reverse) {
	      if (this._useKeys) {
	        return this._iter.__iterator(type, reverse);
	      }
	      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
	      var ii = reverse ? resolveSize(this) : 0;
	      return new Iterator(function()  {
	        var step = iterator.next();
	        return step.done ? step :
	          iteratorValue(type, reverse ? --ii : ii++, step.value, step);
	      });
	    };

	  ToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;


	  createClass(ToIndexedSequence, IndexedSeq);
	    function ToIndexedSequence(iter) {
	      this._iter = iter;
	      this.size = iter.size;
	    }

	    ToIndexedSequence.prototype.includes = function(value) {
	      return this._iter.includes(value);
	    };

	    ToIndexedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      var iterations = 0;
	      return this._iter.__iterate(function(v ) {return fn(v, iterations++, this$0)}, reverse);
	    };

	    ToIndexedSequence.prototype.__iterator = function(type, reverse) {
	      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
	      var iterations = 0;
	      return new Iterator(function()  {
	        var step = iterator.next();
	        return step.done ? step :
	          iteratorValue(type, iterations++, step.value, step)
	      });
	    };



	  createClass(ToSetSequence, SetSeq);
	    function ToSetSequence(iter) {
	      this._iter = iter;
	      this.size = iter.size;
	    }

	    ToSetSequence.prototype.has = function(key) {
	      return this._iter.includes(key);
	    };

	    ToSetSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      return this._iter.__iterate(function(v ) {return fn(v, v, this$0)}, reverse);
	    };

	    ToSetSequence.prototype.__iterator = function(type, reverse) {
	      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
	      return new Iterator(function()  {
	        var step = iterator.next();
	        return step.done ? step :
	          iteratorValue(type, step.value, step.value, step);
	      });
	    };



	  createClass(FromEntriesSequence, KeyedSeq);
	    function FromEntriesSequence(entries) {
	      this._iter = entries;
	      this.size = entries.size;
	    }

	    FromEntriesSequence.prototype.entrySeq = function() {
	      return this._iter.toSeq();
	    };

	    FromEntriesSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      return this._iter.__iterate(function(entry ) {
	        // Check if entry exists first so array access doesn't throw for holes
	        // in the parent iteration.
	        if (entry) {
	          validateEntry(entry);
	          var indexedIterable = isIterable(entry);
	          return fn(
	            indexedIterable ? entry.get(1) : entry[1],
	            indexedIterable ? entry.get(0) : entry[0],
	            this$0
	          );
	        }
	      }, reverse);
	    };

	    FromEntriesSequence.prototype.__iterator = function(type, reverse) {
	      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
	      return new Iterator(function()  {
	        while (true) {
	          var step = iterator.next();
	          if (step.done) {
	            return step;
	          }
	          var entry = step.value;
	          // Check if entry exists first so array access doesn't throw for holes
	          // in the parent iteration.
	          if (entry) {
	            validateEntry(entry);
	            var indexedIterable = isIterable(entry);
	            return iteratorValue(
	              type,
	              indexedIterable ? entry.get(0) : entry[0],
	              indexedIterable ? entry.get(1) : entry[1],
	              step
	            );
	          }
	        }
	      });
	    };


	  ToIndexedSequence.prototype.cacheResult =
	  ToKeyedSequence.prototype.cacheResult =
	  ToSetSequence.prototype.cacheResult =
	  FromEntriesSequence.prototype.cacheResult =
	    cacheResultThrough;


	  function flipFactory(iterable) {
	    var flipSequence = makeSequence(iterable);
	    flipSequence._iter = iterable;
	    flipSequence.size = iterable.size;
	    flipSequence.flip = function()  {return iterable};
	    flipSequence.reverse = function () {
	      var reversedSequence = iterable.reverse.apply(this); // super.reverse()
	      reversedSequence.flip = function()  {return iterable.reverse()};
	      return reversedSequence;
	    };
	    flipSequence.has = function(key ) {return iterable.includes(key)};
	    flipSequence.includes = function(key ) {return iterable.has(key)};
	    flipSequence.cacheResult = cacheResultThrough;
	    flipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;
	      return iterable.__iterate(function(v, k)  {return fn(k, v, this$0) !== false}, reverse);
	    }
	    flipSequence.__iteratorUncached = function(type, reverse) {
	      if (type === ITERATE_ENTRIES) {
	        var iterator = iterable.__iterator(type, reverse);
	        return new Iterator(function()  {
	          var step = iterator.next();
	          if (!step.done) {
	            var k = step.value[0];
	            step.value[0] = step.value[1];
	            step.value[1] = k;
	          }
	          return step;
	        });
	      }
	      return iterable.__iterator(
	        type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,
	        reverse
	      );
	    }
	    return flipSequence;
	  }


	  function mapFactory(iterable, mapper, context) {
	    var mappedSequence = makeSequence(iterable);
	    mappedSequence.size = iterable.size;
	    mappedSequence.has = function(key ) {return iterable.has(key)};
	    mappedSequence.get = function(key, notSetValue)  {
	      var v = iterable.get(key, NOT_SET);
	      return v === NOT_SET ?
	        notSetValue :
	        mapper.call(context, v, key, iterable);
	    };
	    mappedSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;
	      return iterable.__iterate(
	        function(v, k, c)  {return fn(mapper.call(context, v, k, c), k, this$0) !== false},
	        reverse
	      );
	    }
	    mappedSequence.__iteratorUncached = function (type, reverse) {
	      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
	      return new Iterator(function()  {
	        var step = iterator.next();
	        if (step.done) {
	          return step;
	        }
	        var entry = step.value;
	        var key = entry[0];
	        return iteratorValue(
	          type,
	          key,
	          mapper.call(context, entry[1], key, iterable),
	          step
	        );
	      });
	    }
	    return mappedSequence;
	  }


	  function reverseFactory(iterable, useKeys) {
	    var reversedSequence = makeSequence(iterable);
	    reversedSequence._iter = iterable;
	    reversedSequence.size = iterable.size;
	    reversedSequence.reverse = function()  {return iterable};
	    if (iterable.flip) {
	      reversedSequence.flip = function () {
	        var flipSequence = flipFactory(iterable);
	        flipSequence.reverse = function()  {return iterable.flip()};
	        return flipSequence;
	      };
	    }
	    reversedSequence.get = function(key, notSetValue) 
	      {return iterable.get(useKeys ? key : -1 - key, notSetValue)};
	    reversedSequence.has = function(key )
	      {return iterable.has(useKeys ? key : -1 - key)};
	    reversedSequence.includes = function(value ) {return iterable.includes(value)};
	    reversedSequence.cacheResult = cacheResultThrough;
	    reversedSequence.__iterate = function (fn, reverse) {var this$0 = this;
	      return iterable.__iterate(function(v, k)  {return fn(v, k, this$0)}, !reverse);
	    };
	    reversedSequence.__iterator =
	      function(type, reverse)  {return iterable.__iterator(type, !reverse)};
	    return reversedSequence;
	  }


	  function filterFactory(iterable, predicate, context, useKeys) {
	    var filterSequence = makeSequence(iterable);
	    if (useKeys) {
	      filterSequence.has = function(key ) {
	        var v = iterable.get(key, NOT_SET);
	        return v !== NOT_SET && !!predicate.call(context, v, key, iterable);
	      };
	      filterSequence.get = function(key, notSetValue)  {
	        var v = iterable.get(key, NOT_SET);
	        return v !== NOT_SET && predicate.call(context, v, key, iterable) ?
	          v : notSetValue;
	      };
	    }
	    filterSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;
	      var iterations = 0;
	      iterable.__iterate(function(v, k, c)  {
	        if (predicate.call(context, v, k, c)) {
	          iterations++;
	          return fn(v, useKeys ? k : iterations - 1, this$0);
	        }
	      }, reverse);
	      return iterations;
	    };
	    filterSequence.__iteratorUncached = function (type, reverse) {
	      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
	      var iterations = 0;
	      return new Iterator(function()  {
	        while (true) {
	          var step = iterator.next();
	          if (step.done) {
	            return step;
	          }
	          var entry = step.value;
	          var key = entry[0];
	          var value = entry[1];
	          if (predicate.call(context, value, key, iterable)) {
	            return iteratorValue(type, useKeys ? key : iterations++, value, step);
	          }
	        }
	      });
	    }
	    return filterSequence;
	  }


	  function countByFactory(iterable, grouper, context) {
	    var groups = Map().asMutable();
	    iterable.__iterate(function(v, k)  {
	      groups.update(
	        grouper.call(context, v, k, iterable),
	        0,
	        function(a ) {return a + 1}
	      );
	    });
	    return groups.asImmutable();
	  }


	  function groupByFactory(iterable, grouper, context) {
	    var isKeyedIter = isKeyed(iterable);
	    var groups = (isOrdered(iterable) ? OrderedMap() : Map()).asMutable();
	    iterable.__iterate(function(v, k)  {
	      groups.update(
	        grouper.call(context, v, k, iterable),
	        function(a ) {return (a = a || [], a.push(isKeyedIter ? [k, v] : v), a)}
	      );
	    });
	    var coerce = iterableClass(iterable);
	    return groups.map(function(arr ) {return reify(iterable, coerce(arr))});
	  }


	  function sliceFactory(iterable, begin, end, useKeys) {
	    var originalSize = iterable.size;

	    // Sanitize begin & end using this shorthand for ToInt32(argument)
	    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32
	    if (begin !== undefined) {
	      begin = begin | 0;
	    }
	    if (end !== undefined) {
	      if (end === Infinity) {
	        end = originalSize;
	      } else {
	        end = end | 0;
	      }
	    }

	    if (wholeSlice(begin, end, originalSize)) {
	      return iterable;
	    }

	    var resolvedBegin = resolveBegin(begin, originalSize);
	    var resolvedEnd = resolveEnd(end, originalSize);

	    // begin or end will be NaN if they were provided as negative numbers and
	    // this iterable's size is unknown. In that case, cache first so there is
	    // a known size and these do not resolve to NaN.
	    if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {
	      return sliceFactory(iterable.toSeq().cacheResult(), begin, end, useKeys);
	    }

	    // Note: resolvedEnd is undefined when the original sequence's length is
	    // unknown and this slice did not supply an end and should contain all
	    // elements after resolvedBegin.
	    // In that case, resolvedSize will be NaN and sliceSize will remain undefined.
	    var resolvedSize = resolvedEnd - resolvedBegin;
	    var sliceSize;
	    if (resolvedSize === resolvedSize) {
	      sliceSize = resolvedSize < 0 ? 0 : resolvedSize;
	    }

	    var sliceSeq = makeSequence(iterable);

	    // If iterable.size is undefined, the size of the realized sliceSeq is
	    // unknown at this point unless the number of items to slice is 0
	    sliceSeq.size = sliceSize === 0 ? sliceSize : iterable.size && sliceSize || undefined;

	    if (!useKeys && isSeq(iterable) && sliceSize >= 0) {
	      sliceSeq.get = function (index, notSetValue) {
	        index = wrapIndex(this, index);
	        return index >= 0 && index < sliceSize ?
	          iterable.get(index + resolvedBegin, notSetValue) :
	          notSetValue;
	      }
	    }

	    sliceSeq.__iterateUncached = function(fn, reverse) {var this$0 = this;
	      if (sliceSize === 0) {
	        return 0;
	      }
	      if (reverse) {
	        return this.cacheResult().__iterate(fn, reverse);
	      }
	      var skipped = 0;
	      var isSkipping = true;
	      var iterations = 0;
	      iterable.__iterate(function(v, k)  {
	        if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {
	          iterations++;
	          return fn(v, useKeys ? k : iterations - 1, this$0) !== false &&
	                 iterations !== sliceSize;
	        }
	      });
	      return iterations;
	    };

	    sliceSeq.__iteratorUncached = function(type, reverse) {
	      if (sliceSize !== 0 && reverse) {
	        return this.cacheResult().__iterator(type, reverse);
	      }
	      // Don't bother instantiating parent iterator if taking 0.
	      var iterator = sliceSize !== 0 && iterable.__iterator(type, reverse);
	      var skipped = 0;
	      var iterations = 0;
	      return new Iterator(function()  {
	        while (skipped++ < resolvedBegin) {
	          iterator.next();
	        }
	        if (++iterations > sliceSize) {
	          return iteratorDone();
	        }
	        var step = iterator.next();
	        if (useKeys || type === ITERATE_VALUES) {
	          return step;
	        } else if (type === ITERATE_KEYS) {
	          return iteratorValue(type, iterations - 1, undefined, step);
	        } else {
	          return iteratorValue(type, iterations - 1, step.value[1], step);
	        }
	      });
	    }

	    return sliceSeq;
	  }


	  function takeWhileFactory(iterable, predicate, context) {
	    var takeSequence = makeSequence(iterable);
	    takeSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;
	      if (reverse) {
	        return this.cacheResult().__iterate(fn, reverse);
	      }
	      var iterations = 0;
	      iterable.__iterate(function(v, k, c) 
	        {return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$0)}
	      );
	      return iterations;
	    };
	    takeSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;
	      if (reverse) {
	        return this.cacheResult().__iterator(type, reverse);
	      }
	      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
	      var iterating = true;
	      return new Iterator(function()  {
	        if (!iterating) {
	          return iteratorDone();
	        }
	        var step = iterator.next();
	        if (step.done) {
	          return step;
	        }
	        var entry = step.value;
	        var k = entry[0];
	        var v = entry[1];
	        if (!predicate.call(context, v, k, this$0)) {
	          iterating = false;
	          return iteratorDone();
	        }
	        return type === ITERATE_ENTRIES ? step :
	          iteratorValue(type, k, v, step);
	      });
	    };
	    return takeSequence;
	  }


	  function skipWhileFactory(iterable, predicate, context, useKeys) {
	    var skipSequence = makeSequence(iterable);
	    skipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;
	      if (reverse) {
	        return this.cacheResult().__iterate(fn, reverse);
	      }
	      var isSkipping = true;
	      var iterations = 0;
	      iterable.__iterate(function(v, k, c)  {
	        if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {
	          iterations++;
	          return fn(v, useKeys ? k : iterations - 1, this$0);
	        }
	      });
	      return iterations;
	    };
	    skipSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;
	      if (reverse) {
	        return this.cacheResult().__iterator(type, reverse);
	      }
	      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
	      var skipping = true;
	      var iterations = 0;
	      return new Iterator(function()  {
	        var step, k, v;
	        do {
	          step = iterator.next();
	          if (step.done) {
	            if (useKeys || type === ITERATE_VALUES) {
	              return step;
	            } else if (type === ITERATE_KEYS) {
	              return iteratorValue(type, iterations++, undefined, step);
	            } else {
	              return iteratorValue(type, iterations++, step.value[1], step);
	            }
	          }
	          var entry = step.value;
	          k = entry[0];
	          v = entry[1];
	          skipping && (skipping = predicate.call(context, v, k, this$0));
	        } while (skipping);
	        return type === ITERATE_ENTRIES ? step :
	          iteratorValue(type, k, v, step);
	      });
	    };
	    return skipSequence;
	  }


	  function concatFactory(iterable, values) {
	    var isKeyedIterable = isKeyed(iterable);
	    var iters = [iterable].concat(values).map(function(v ) {
	      if (!isIterable(v)) {
	        v = isKeyedIterable ?
	          keyedSeqFromValue(v) :
	          indexedSeqFromValue(Array.isArray(v) ? v : [v]);
	      } else if (isKeyedIterable) {
	        v = KeyedIterable(v);
	      }
	      return v;
	    }).filter(function(v ) {return v.size !== 0});

	    if (iters.length === 0) {
	      return iterable;
	    }

	    if (iters.length === 1) {
	      var singleton = iters[0];
	      if (singleton === iterable ||
	          isKeyedIterable && isKeyed(singleton) ||
	          isIndexed(iterable) && isIndexed(singleton)) {
	        return singleton;
	      }
	    }

	    var concatSeq = new ArraySeq(iters);
	    if (isKeyedIterable) {
	      concatSeq = concatSeq.toKeyedSeq();
	    } else if (!isIndexed(iterable)) {
	      concatSeq = concatSeq.toSetSeq();
	    }
	    concatSeq = concatSeq.flatten(true);
	    concatSeq.size = iters.reduce(
	      function(sum, seq)  {
	        if (sum !== undefined) {
	          var size = seq.size;
	          if (size !== undefined) {
	            return sum + size;
	          }
	        }
	      },
	      0
	    );
	    return concatSeq;
	  }


	  function flattenFactory(iterable, depth, useKeys) {
	    var flatSequence = makeSequence(iterable);
	    flatSequence.__iterateUncached = function(fn, reverse) {
	      var iterations = 0;
	      var stopped = false;
	      function flatDeep(iter, currentDepth) {var this$0 = this;
	        iter.__iterate(function(v, k)  {
	          if ((!depth || currentDepth < depth) && isIterable(v)) {
	            flatDeep(v, currentDepth + 1);
	          } else if (fn(v, useKeys ? k : iterations++, this$0) === false) {
	            stopped = true;
	          }
	          return !stopped;
	        }, reverse);
	      }
	      flatDeep(iterable, 0);
	      return iterations;
	    }
	    flatSequence.__iteratorUncached = function(type, reverse) {
	      var iterator = iterable.__iterator(type, reverse);
	      var stack = [];
	      var iterations = 0;
	      return new Iterator(function()  {
	        while (iterator) {
	          var step = iterator.next();
	          if (step.done !== false) {
	            iterator = stack.pop();
	            continue;
	          }
	          var v = step.value;
	          if (type === ITERATE_ENTRIES) {
	            v = v[1];
	          }
	          if ((!depth || stack.length < depth) && isIterable(v)) {
	            stack.push(iterator);
	            iterator = v.__iterator(type, reverse);
	          } else {
	            return useKeys ? step : iteratorValue(type, iterations++, v, step);
	          }
	        }
	        return iteratorDone();
	      });
	    }
	    return flatSequence;
	  }


	  function flatMapFactory(iterable, mapper, context) {
	    var coerce = iterableClass(iterable);
	    return iterable.toSeq().map(
	      function(v, k)  {return coerce(mapper.call(context, v, k, iterable))}
	    ).flatten(true);
	  }


	  function interposeFactory(iterable, separator) {
	    var interposedSequence = makeSequence(iterable);
	    interposedSequence.size = iterable.size && iterable.size * 2 -1;
	    interposedSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;
	      var iterations = 0;
	      iterable.__iterate(function(v, k) 
	        {return (!iterations || fn(separator, iterations++, this$0) !== false) &&
	        fn(v, iterations++, this$0) !== false},
	        reverse
	      );
	      return iterations;
	    };
	    interposedSequence.__iteratorUncached = function(type, reverse) {
	      var iterator = iterable.__iterator(ITERATE_VALUES, reverse);
	      var iterations = 0;
	      var step;
	      return new Iterator(function()  {
	        if (!step || iterations % 2) {
	          step = iterator.next();
	          if (step.done) {
	            return step;
	          }
	        }
	        return iterations % 2 ?
	          iteratorValue(type, iterations++, separator) :
	          iteratorValue(type, iterations++, step.value, step);
	      });
	    };
	    return interposedSequence;
	  }


	  function sortFactory(iterable, comparator, mapper) {
	    if (!comparator) {
	      comparator = defaultComparator;
	    }
	    var isKeyedIterable = isKeyed(iterable);
	    var index = 0;
	    var entries = iterable.toSeq().map(
	      function(v, k)  {return [k, v, index++, mapper ? mapper(v, k, iterable) : v]}
	    ).toArray();
	    entries.sort(function(a, b)  {return comparator(a[3], b[3]) || a[2] - b[2]}).forEach(
	      isKeyedIterable ?
	      function(v, i)  { entries[i].length = 2; } :
	      function(v, i)  { entries[i] = v[1]; }
	    );
	    return isKeyedIterable ? KeyedSeq(entries) :
	      isIndexed(iterable) ? IndexedSeq(entries) :
	      SetSeq(entries);
	  }


	  function maxFactory(iterable, comparator, mapper) {
	    if (!comparator) {
	      comparator = defaultComparator;
	    }
	    if (mapper) {
	      var entry = iterable.toSeq()
	        .map(function(v, k)  {return [v, mapper(v, k, iterable)]})
	        .reduce(function(a, b)  {return maxCompare(comparator, a[1], b[1]) ? b : a});
	      return entry && entry[0];
	    } else {
	      return iterable.reduce(function(a, b)  {return maxCompare(comparator, a, b) ? b : a});
	    }
	  }

	  function maxCompare(comparator, a, b) {
	    var comp = comparator(b, a);
	    // b is considered the new max if the comparator declares them equal, but
	    // they are not equal and b is in fact a nullish value.
	    return (comp === 0 && b !== a && (b === undefined || b === null || b !== b)) || comp > 0;
	  }


	  function zipWithFactory(keyIter, zipper, iters) {
	    var zipSequence = makeSequence(keyIter);
	    zipSequence.size = new ArraySeq(iters).map(function(i ) {return i.size}).min();
	    // Note: this a generic base implementation of __iterate in terms of
	    // __iterator which may be more generically useful in the future.
	    zipSequence.__iterate = function(fn, reverse) {
	      /* generic:
	      var iterator = this.__iterator(ITERATE_ENTRIES, reverse);
	      var step;
	      var iterations = 0;
	      while (!(step = iterator.next()).done) {
	        iterations++;
	        if (fn(step.value[1], step.value[0], this) === false) {
	          break;
	        }
	      }
	      return iterations;
	      */
	      // indexed:
	      var iterator = this.__iterator(ITERATE_VALUES, reverse);
	      var step;
	      var iterations = 0;
	      while (!(step = iterator.next()).done) {
	        if (fn(step.value, iterations++, this) === false) {
	          break;
	        }
	      }
	      return iterations;
	    };
	    zipSequence.__iteratorUncached = function(type, reverse) {
	      var iterators = iters.map(function(i )
	        {return (i = Iterable(i), getIterator(reverse ? i.reverse() : i))}
	      );
	      var iterations = 0;
	      var isDone = false;
	      return new Iterator(function()  {
	        var steps;
	        if (!isDone) {
	          steps = iterators.map(function(i ) {return i.next()});
	          isDone = steps.some(function(s ) {return s.done});
	        }
	        if (isDone) {
	          return iteratorDone();
	        }
	        return iteratorValue(
	          type,
	          iterations++,
	          zipper.apply(null, steps.map(function(s ) {return s.value}))
	        );
	      });
	    };
	    return zipSequence
	  }


	  // #pragma Helper Functions

	  function reify(iter, seq) {
	    return isSeq(iter) ? seq : iter.constructor(seq);
	  }

	  function validateEntry(entry) {
	    if (entry !== Object(entry)) {
	      throw new TypeError('Expected [K, V] tuple: ' + entry);
	    }
	  }

	  function resolveSize(iter) {
	    assertNotInfinite(iter.size);
	    return ensureSize(iter);
	  }

	  function iterableClass(iterable) {
	    return isKeyed(iterable) ? KeyedIterable :
	      isIndexed(iterable) ? IndexedIterable :
	      SetIterable;
	  }

	  function makeSequence(iterable) {
	    return Object.create(
	      (
	        isKeyed(iterable) ? KeyedSeq :
	        isIndexed(iterable) ? IndexedSeq :
	        SetSeq
	      ).prototype
	    );
	  }

	  function cacheResultThrough() {
	    if (this._iter.cacheResult) {
	      this._iter.cacheResult();
	      this.size = this._iter.size;
	      return this;
	    } else {
	      return Seq.prototype.cacheResult.call(this);
	    }
	  }

	  function defaultComparator(a, b) {
	    return a > b ? 1 : a < b ? -1 : 0;
	  }

	  function forceIterator(keyPath) {
	    var iter = getIterator(keyPath);
	    if (!iter) {
	      // Array might not be iterable in this environment, so we need a fallback
	      // to our wrapped type.
	      if (!isArrayLike(keyPath)) {
	        throw new TypeError('Expected iterable or array-like: ' + keyPath);
	      }
	      iter = getIterator(Iterable(keyPath));
	    }
	    return iter;
	  }

	  createClass(Record, KeyedCollection);

	    function Record(defaultValues, name) {
	      var hasInitialized;

	      var RecordType = function Record(values) {
	        if (values instanceof RecordType) {
	          return values;
	        }
	        if (!(this instanceof RecordType)) {
	          return new RecordType(values);
	        }
	        if (!hasInitialized) {
	          hasInitialized = true;
	          var keys = Object.keys(defaultValues);
	          setProps(RecordTypePrototype, keys);
	          RecordTypePrototype.size = keys.length;
	          RecordTypePrototype._name = name;
	          RecordTypePrototype._keys = keys;
	          RecordTypePrototype._defaultValues = defaultValues;
	        }
	        this._map = Map(values);
	      };

	      var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);
	      RecordTypePrototype.constructor = RecordType;

	      return RecordType;
	    }

	    Record.prototype.toString = function() {
	      return this.__toString(recordName(this) + ' {', '}');
	    };

	    // @pragma Access

	    Record.prototype.has = function(k) {
	      return this._defaultValues.hasOwnProperty(k);
	    };

	    Record.prototype.get = function(k, notSetValue) {
	      if (!this.has(k)) {
	        return notSetValue;
	      }
	      var defaultVal = this._defaultValues[k];
	      return this._map ? this._map.get(k, defaultVal) : defaultVal;
	    };

	    // @pragma Modification

	    Record.prototype.clear = function() {
	      if (this.__ownerID) {
	        this._map && this._map.clear();
	        return this;
	      }
	      var RecordType = this.constructor;
	      return RecordType._empty || (RecordType._empty = makeRecord(this, emptyMap()));
	    };

	    Record.prototype.set = function(k, v) {
	      if (!this.has(k)) {
	        throw new Error('Cannot set unknown key "' + k + '" on ' + recordName(this));
	      }
	      if (this._map && !this._map.has(k)) {
	        var defaultVal = this._defaultValues[k];
	        if (v === defaultVal) {
	          return this;
	        }
	      }
	      var newMap = this._map && this._map.set(k, v);
	      if (this.__ownerID || newMap === this._map) {
	        return this;
	      }
	      return makeRecord(this, newMap);
	    };

	    Record.prototype.remove = function(k) {
	      if (!this.has(k)) {
	        return this;
	      }
	      var newMap = this._map && this._map.remove(k);
	      if (this.__ownerID || newMap === this._map) {
	        return this;
	      }
	      return makeRecord(this, newMap);
	    };

	    Record.prototype.wasAltered = function() {
	      return this._map.wasAltered();
	    };

	    Record.prototype.__iterator = function(type, reverse) {var this$0 = this;
	      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterator(type, reverse);
	    };

	    Record.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterate(fn, reverse);
	    };

	    Record.prototype.__ensureOwner = function(ownerID) {
	      if (ownerID === this.__ownerID) {
	        return this;
	      }
	      var newMap = this._map && this._map.__ensureOwner(ownerID);
	      if (!ownerID) {
	        this.__ownerID = ownerID;
	        this._map = newMap;
	        return this;
	      }
	      return makeRecord(this, newMap, ownerID);
	    };


	  var RecordPrototype = Record.prototype;
	  RecordPrototype[DELETE] = RecordPrototype.remove;
	  RecordPrototype.deleteIn =
	  RecordPrototype.removeIn = MapPrototype.removeIn;
	  RecordPrototype.merge = MapPrototype.merge;
	  RecordPrototype.mergeWith = MapPrototype.mergeWith;
	  RecordPrototype.mergeIn = MapPrototype.mergeIn;
	  RecordPrototype.mergeDeep = MapPrototype.mergeDeep;
	  RecordPrototype.mergeDeepWith = MapPrototype.mergeDeepWith;
	  RecordPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;
	  RecordPrototype.setIn = MapPrototype.setIn;
	  RecordPrototype.update = MapPrototype.update;
	  RecordPrototype.updateIn = MapPrototype.updateIn;
	  RecordPrototype.withMutations = MapPrototype.withMutations;
	  RecordPrototype.asMutable = MapPrototype.asMutable;
	  RecordPrototype.asImmutable = MapPrototype.asImmutable;


	  function makeRecord(likeRecord, map, ownerID) {
	    var record = Object.create(Object.getPrototypeOf(likeRecord));
	    record._map = map;
	    record.__ownerID = ownerID;
	    return record;
	  }

	  function recordName(record) {
	    return record._name || record.constructor.name || 'Record';
	  }

	  function setProps(prototype, names) {
	    try {
	      names.forEach(setProp.bind(undefined, prototype));
	    } catch (error) {
	      // Object.defineProperty failed. Probably IE8.
	    }
	  }

	  function setProp(prototype, name) {
	    Object.defineProperty(prototype, name, {
	      get: function() {
	        return this.get(name);
	      },
	      set: function(value) {
	        invariant(this.__ownerID, 'Cannot set on an immutable record.');
	        this.set(name, value);
	      }
	    });
	  }

	  createClass(Set, SetCollection);

	    // @pragma Construction

	    function Set(value) {
	      return value === null || value === undefined ? emptySet() :
	        isSet(value) && !isOrdered(value) ? value :
	        emptySet().withMutations(function(set ) {
	          var iter = SetIterable(value);
	          assertNotInfinite(iter.size);
	          iter.forEach(function(v ) {return set.add(v)});
	        });
	    }

	    Set.of = function(/*...values*/) {
	      return this(arguments);
	    };

	    Set.fromKeys = function(value) {
	      return this(KeyedIterable(value).keySeq());
	    };

	    Set.prototype.toString = function() {
	      return this.__toString('Set {', '}');
	    };

	    // @pragma Access

	    Set.prototype.has = function(value) {
	      return this._map.has(value);
	    };

	    // @pragma Modification

	    Set.prototype.add = function(value) {
	      return updateSet(this, this._map.set(value, true));
	    };

	    Set.prototype.remove = function(value) {
	      return updateSet(this, this._map.remove(value));
	    };

	    Set.prototype.clear = function() {
	      return updateSet(this, this._map.clear());
	    };

	    // @pragma Composition

	    Set.prototype.union = function() {var iters = SLICE$0.call(arguments, 0);
	      iters = iters.filter(function(x ) {return x.size !== 0});
	      if (iters.length === 0) {
	        return this;
	      }
	      if (this.size === 0 && !this.__ownerID && iters.length === 1) {
	        return this.constructor(iters[0]);
	      }
	      return this.withMutations(function(set ) {
	        for (var ii = 0; ii < iters.length; ii++) {
	          SetIterable(iters[ii]).forEach(function(value ) {return set.add(value)});
	        }
	      });
	    };

	    Set.prototype.intersect = function() {var iters = SLICE$0.call(arguments, 0);
	      if (iters.length === 0) {
	        return this;
	      }
	      iters = iters.map(function(iter ) {return SetIterable(iter)});
	      var originalSet = this;
	      return this.withMutations(function(set ) {
	        originalSet.forEach(function(value ) {
	          if (!iters.every(function(iter ) {return iter.includes(value)})) {
	            set.remove(value);
	          }
	        });
	      });
	    };

	    Set.prototype.subtract = function() {var iters = SLICE$0.call(arguments, 0);
	      if (iters.length === 0) {
	        return this;
	      }
	      iters = iters.map(function(iter ) {return SetIterable(iter)});
	      var originalSet = this;
	      return this.withMutations(function(set ) {
	        originalSet.forEach(function(value ) {
	          if (iters.some(function(iter ) {return iter.includes(value)})) {
	            set.remove(value);
	          }
	        });
	      });
	    };

	    Set.prototype.merge = function() {
	      return this.union.apply(this, arguments);
	    };

	    Set.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
	      return this.union.apply(this, iters);
	    };

	    Set.prototype.sort = function(comparator) {
	      // Late binding
	      return OrderedSet(sortFactory(this, comparator));
	    };

	    Set.prototype.sortBy = function(mapper, comparator) {
	      // Late binding
	      return OrderedSet(sortFactory(this, comparator, mapper));
	    };

	    Set.prototype.wasAltered = function() {
	      return this._map.wasAltered();
	    };

	    Set.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      return this._map.__iterate(function(_, k)  {return fn(k, k, this$0)}, reverse);
	    };

	    Set.prototype.__iterator = function(type, reverse) {
	      return this._map.map(function(_, k)  {return k}).__iterator(type, reverse);
	    };

	    Set.prototype.__ensureOwner = function(ownerID) {
	      if (ownerID === this.__ownerID) {
	        return this;
	      }
	      var newMap = this._map.__ensureOwner(ownerID);
	      if (!ownerID) {
	        this.__ownerID = ownerID;
	        this._map = newMap;
	        return this;
	      }
	      return this.__make(newMap, ownerID);
	    };


	  function isSet(maybeSet) {
	    return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);
	  }

	  Set.isSet = isSet;

	  var IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';

	  var SetPrototype = Set.prototype;
	  SetPrototype[IS_SET_SENTINEL] = true;
	  SetPrototype[DELETE] = SetPrototype.remove;
	  SetPrototype.mergeDeep = SetPrototype.merge;
	  SetPrototype.mergeDeepWith = SetPrototype.mergeWith;
	  SetPrototype.withMutations = MapPrototype.withMutations;
	  SetPrototype.asMutable = MapPrototype.asMutable;
	  SetPrototype.asImmutable = MapPrototype.asImmutable;

	  SetPrototype.__empty = emptySet;
	  SetPrototype.__make = makeSet;

	  function updateSet(set, newMap) {
	    if (set.__ownerID) {
	      set.size = newMap.size;
	      set._map = newMap;
	      return set;
	    }
	    return newMap === set._map ? set :
	      newMap.size === 0 ? set.__empty() :
	      set.__make(newMap);
	  }

	  function makeSet(map, ownerID) {
	    var set = Object.create(SetPrototype);
	    set.size = map ? map.size : 0;
	    set._map = map;
	    set.__ownerID = ownerID;
	    return set;
	  }

	  var EMPTY_SET;
	  function emptySet() {
	    return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));
	  }

	  createClass(OrderedSet, Set);

	    // @pragma Construction

	    function OrderedSet(value) {
	      return value === null || value === undefined ? emptyOrderedSet() :
	        isOrderedSet(value) ? value :
	        emptyOrderedSet().withMutations(function(set ) {
	          var iter = SetIterable(value);
	          assertNotInfinite(iter.size);
	          iter.forEach(function(v ) {return set.add(v)});
	        });
	    }

	    OrderedSet.of = function(/*...values*/) {
	      return this(arguments);
	    };

	    OrderedSet.fromKeys = function(value) {
	      return this(KeyedIterable(value).keySeq());
	    };

	    OrderedSet.prototype.toString = function() {
	      return this.__toString('OrderedSet {', '}');
	    };


	  function isOrderedSet(maybeOrderedSet) {
	    return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);
	  }

	  OrderedSet.isOrderedSet = isOrderedSet;

	  var OrderedSetPrototype = OrderedSet.prototype;
	  OrderedSetPrototype[IS_ORDERED_SENTINEL] = true;

	  OrderedSetPrototype.__empty = emptyOrderedSet;
	  OrderedSetPrototype.__make = makeOrderedSet;

	  function makeOrderedSet(map, ownerID) {
	    var set = Object.create(OrderedSetPrototype);
	    set.size = map ? map.size : 0;
	    set._map = map;
	    set.__ownerID = ownerID;
	    return set;
	  }

	  var EMPTY_ORDERED_SET;
	  function emptyOrderedSet() {
	    return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));
	  }

	  createClass(Stack, IndexedCollection);

	    // @pragma Construction

	    function Stack(value) {
	      return value === null || value === undefined ? emptyStack() :
	        isStack(value) ? value :
	        emptyStack().unshiftAll(value);
	    }

	    Stack.of = function(/*...values*/) {
	      return this(arguments);
	    };

	    Stack.prototype.toString = function() {
	      return this.__toString('Stack [', ']');
	    };

	    // @pragma Access

	    Stack.prototype.get = function(index, notSetValue) {
	      var head = this._head;
	      index = wrapIndex(this, index);
	      while (head && index--) {
	        head = head.next;
	      }
	      return head ? head.value : notSetValue;
	    };

	    Stack.prototype.peek = function() {
	      return this._head && this._head.value;
	    };

	    // @pragma Modification

	    Stack.prototype.push = function(/*...values*/) {
	      if (arguments.length === 0) {
	        return this;
	      }
	      var newSize = this.size + arguments.length;
	      var head = this._head;
	      for (var ii = arguments.length - 1; ii >= 0; ii--) {
	        head = {
	          value: arguments[ii],
	          next: head
	        };
	      }
	      if (this.__ownerID) {
	        this.size = newSize;
	        this._head = head;
	        this.__hash = undefined;
	        this.__altered = true;
	        return this;
	      }
	      return makeStack(newSize, head);
	    };

	    Stack.prototype.pushAll = function(iter) {
	      iter = IndexedIterable(iter);
	      if (iter.size === 0) {
	        return this;
	      }
	      assertNotInfinite(iter.size);
	      var newSize = this.size;
	      var head = this._head;
	      iter.reverse().forEach(function(value ) {
	        newSize++;
	        head = {
	          value: value,
	          next: head
	        };
	      });
	      if (this.__ownerID) {
	        this.size = newSize;
	        this._head = head;
	        this.__hash = undefined;
	        this.__altered = true;
	        return this;
	      }
	      return makeStack(newSize, head);
	    };

	    Stack.prototype.pop = function() {
	      return this.slice(1);
	    };

	    Stack.prototype.unshift = function(/*...values*/) {
	      return this.push.apply(this, arguments);
	    };

	    Stack.prototype.unshiftAll = function(iter) {
	      return this.pushAll(iter);
	    };

	    Stack.prototype.shift = function() {
	      return this.pop.apply(this, arguments);
	    };

	    Stack.prototype.clear = function() {
	      if (this.size === 0) {
	        return this;
	      }
	      if (this.__ownerID) {
	        this.size = 0;
	        this._head = undefined;
	        this.__hash = undefined;
	        this.__altered = true;
	        return this;
	      }
	      return emptyStack();
	    };

	    Stack.prototype.slice = function(begin, end) {
	      if (wholeSlice(begin, end, this.size)) {
	        return this;
	      }
	      var resolvedBegin = resolveBegin(begin, this.size);
	      var resolvedEnd = resolveEnd(end, this.size);
	      if (resolvedEnd !== this.size) {
	        // super.slice(begin, end);
	        return IndexedCollection.prototype.slice.call(this, begin, end);
	      }
	      var newSize = this.size - resolvedBegin;
	      var head = this._head;
	      while (resolvedBegin--) {
	        head = head.next;
	      }
	      if (this.__ownerID) {
	        this.size = newSize;
	        this._head = head;
	        this.__hash = undefined;
	        this.__altered = true;
	        return this;
	      }
	      return makeStack(newSize, head);
	    };

	    // @pragma Mutability

	    Stack.prototype.__ensureOwner = function(ownerID) {
	      if (ownerID === this.__ownerID) {
	        return this;
	      }
	      if (!ownerID) {
	        this.__ownerID = ownerID;
	        this.__altered = false;
	        return this;
	      }
	      return makeStack(this.size, this._head, ownerID, this.__hash);
	    };

	    // @pragma Iteration

	    Stack.prototype.__iterate = function(fn, reverse) {
	      if (reverse) {
	        return this.reverse().__iterate(fn);
	      }
	      var iterations = 0;
	      var node = this._head;
	      while (node) {
	        if (fn(node.value, iterations++, this) === false) {
	          break;
	        }
	        node = node.next;
	      }
	      return iterations;
	    };

	    Stack.prototype.__iterator = function(type, reverse) {
	      if (reverse) {
	        return this.reverse().__iterator(type);
	      }
	      var iterations = 0;
	      var node = this._head;
	      return new Iterator(function()  {
	        if (node) {
	          var value = node.value;
	          node = node.next;
	          return iteratorValue(type, iterations++, value);
	        }
	        return iteratorDone();
	      });
	    };


	  function isStack(maybeStack) {
	    return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);
	  }

	  Stack.isStack = isStack;

	  var IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';

	  var StackPrototype = Stack.prototype;
	  StackPrototype[IS_STACK_SENTINEL] = true;
	  StackPrototype.withMutations = MapPrototype.withMutations;
	  StackPrototype.asMutable = MapPrototype.asMutable;
	  StackPrototype.asImmutable = MapPrototype.asImmutable;
	  StackPrototype.wasAltered = MapPrototype.wasAltered;


	  function makeStack(size, head, ownerID, hash) {
	    var map = Object.create(StackPrototype);
	    map.size = size;
	    map._head = head;
	    map.__ownerID = ownerID;
	    map.__hash = hash;
	    map.__altered = false;
	    return map;
	  }

	  var EMPTY_STACK;
	  function emptyStack() {
	    return EMPTY_STACK || (EMPTY_STACK = makeStack(0));
	  }

	  /**
	   * Contributes additional methods to a constructor
	   */
	  function mixin(ctor, methods) {
	    var keyCopier = function(key ) { ctor.prototype[key] = methods[key]; };
	    Object.keys(methods).forEach(keyCopier);
	    Object.getOwnPropertySymbols &&
	      Object.getOwnPropertySymbols(methods).forEach(keyCopier);
	    return ctor;
	  }

	  Iterable.Iterator = Iterator;

	  mixin(Iterable, {

	    // ### Conversion to other types

	    toArray: function() {
	      assertNotInfinite(this.size);
	      var array = new Array(this.size || 0);
	      this.valueSeq().__iterate(function(v, i)  { array[i] = v; });
	      return array;
	    },

	    toIndexedSeq: function() {
	      return new ToIndexedSequence(this);
	    },

	    toJS: function() {
	      return this.toSeq().map(
	        function(value ) {return value && typeof value.toJS === 'function' ? value.toJS() : value}
	      ).__toJS();
	    },

	    toJSON: function() {
	      return this.toSeq().map(
	        function(value ) {return value && typeof value.toJSON === 'function' ? value.toJSON() : value}
	      ).__toJS();
	    },

	    toKeyedSeq: function() {
	      return new ToKeyedSequence(this, true);
	    },

	    toMap: function() {
	      // Use Late Binding here to solve the circular dependency.
	      return Map(this.toKeyedSeq());
	    },

	    toObject: function() {
	      assertNotInfinite(this.size);
	      var object = {};
	      this.__iterate(function(v, k)  { object[k] = v; });
	      return object;
	    },

	    toOrderedMap: function() {
	      // Use Late Binding here to solve the circular dependency.
	      return OrderedMap(this.toKeyedSeq());
	    },

	    toOrderedSet: function() {
	      // Use Late Binding here to solve the circular dependency.
	      return OrderedSet(isKeyed(this) ? this.valueSeq() : this);
	    },

	    toSet: function() {
	      // Use Late Binding here to solve the circular dependency.
	      return Set(isKeyed(this) ? this.valueSeq() : this);
	    },

	    toSetSeq: function() {
	      return new ToSetSequence(this);
	    },

	    toSeq: function() {
	      return isIndexed(this) ? this.toIndexedSeq() :
	        isKeyed(this) ? this.toKeyedSeq() :
	        this.toSetSeq();
	    },

	    toStack: function() {
	      // Use Late Binding here to solve the circular dependency.
	      return Stack(isKeyed(this) ? this.valueSeq() : this);
	    },

	    toList: function() {
	      // Use Late Binding here to solve the circular dependency.
	      return List(isKeyed(this) ? this.valueSeq() : this);
	    },


	    // ### Common JavaScript methods and properties

	    toString: function() {
	      return '[Iterable]';
	    },

	    __toString: function(head, tail) {
	      if (this.size === 0) {
	        return head + tail;
	      }
	      return head + ' ' + this.toSeq().map(this.__toStringMapper).join(', ') + ' ' + tail;
	    },


	    // ### ES6 Collection methods (ES6 Array and Map)

	    concat: function() {var values = SLICE$0.call(arguments, 0);
	      return reify(this, concatFactory(this, values));
	    },

	    includes: function(searchValue) {
	      return this.some(function(value ) {return is(value, searchValue)});
	    },

	    entries: function() {
	      return this.__iterator(ITERATE_ENTRIES);
	    },

	    every: function(predicate, context) {
	      assertNotInfinite(this.size);
	      var returnValue = true;
	      this.__iterate(function(v, k, c)  {
	        if (!predicate.call(context, v, k, c)) {
	          returnValue = false;
	          return false;
	        }
	      });
	      return returnValue;
	    },

	    filter: function(predicate, context) {
	      return reify(this, filterFactory(this, predicate, context, true));
	    },

	    find: function(predicate, context, notSetValue) {
	      var entry = this.findEntry(predicate, context);
	      return entry ? entry[1] : notSetValue;
	    },

	    forEach: function(sideEffect, context) {
	      assertNotInfinite(this.size);
	      return this.__iterate(context ? sideEffect.bind(context) : sideEffect);
	    },

	    join: function(separator) {
	      assertNotInfinite(this.size);
	      separator = separator !== undefined ? '' + separator : ',';
	      var joined = '';
	      var isFirst = true;
	      this.__iterate(function(v ) {
	        isFirst ? (isFirst = false) : (joined += separator);
	        joined += v !== null && v !== undefined ? v.toString() : '';
	      });
	      return joined;
	    },

	    keys: function() {
	      return this.__iterator(ITERATE_KEYS);
	    },

	    map: function(mapper, context) {
	      return reify(this, mapFactory(this, mapper, context));
	    },

	    reduce: function(reducer, initialReduction, context) {
	      assertNotInfinite(this.size);
	      var reduction;
	      var useFirst;
	      if (arguments.length < 2) {
	        useFirst = true;
	      } else {
	        reduction = initialReduction;
	      }
	      this.__iterate(function(v, k, c)  {
	        if (useFirst) {
	          useFirst = false;
	          reduction = v;
	        } else {
	          reduction = reducer.call(context, reduction, v, k, c);
	        }
	      });
	      return reduction;
	    },

	    reduceRight: function(reducer, initialReduction, context) {
	      var reversed = this.toKeyedSeq().reverse();
	      return reversed.reduce.apply(reversed, arguments);
	    },

	    reverse: function() {
	      return reify(this, reverseFactory(this, true));
	    },

	    slice: function(begin, end) {
	      return reify(this, sliceFactory(this, begin, end, true));
	    },

	    some: function(predicate, context) {
	      return !this.every(not(predicate), context);
	    },

	    sort: function(comparator) {
	      return reify(this, sortFactory(this, comparator));
	    },

	    values: function() {
	      return this.__iterator(ITERATE_VALUES);
	    },


	    // ### More sequential methods

	    butLast: function() {
	      return this.slice(0, -1);
	    },

	    isEmpty: function() {
	      return this.size !== undefined ? this.size === 0 : !this.some(function()  {return true});
	    },

	    count: function(predicate, context) {
	      return ensureSize(
	        predicate ? this.toSeq().filter(predicate, context) : this
	      );
	    },

	    countBy: function(grouper, context) {
	      return countByFactory(this, grouper, context);
	    },

	    equals: function(other) {
	      return deepEqual(this, other);
	    },

	    entrySeq: function() {
	      var iterable = this;
	      if (iterable._cache) {
	        // We cache as an entries array, so we can just return the cache!
	        return new ArraySeq(iterable._cache);
	      }
	      var entriesSequence = iterable.toSeq().map(entryMapper).toIndexedSeq();
	      entriesSequence.fromEntrySeq = function()  {return iterable.toSeq()};
	      return entriesSequence;
	    },

	    filterNot: function(predicate, context) {
	      return this.filter(not(predicate), context);
	    },

	    findEntry: function(predicate, context, notSetValue) {
	      var found = notSetValue;
	      this.__iterate(function(v, k, c)  {
	        if (predicate.call(context, v, k, c)) {
	          found = [k, v];
	          return false;
	        }
	      });
	      return found;
	    },

	    findKey: function(predicate, context) {
	      var entry = this.findEntry(predicate, context);
	      return entry && entry[0];
	    },

	    findLast: function(predicate, context, notSetValue) {
	      return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);
	    },

	    findLastEntry: function(predicate, context, notSetValue) {
	      return this.toKeyedSeq().reverse().findEntry(predicate, context, notSetValue);
	    },

	    findLastKey: function(predicate, context) {
	      return this.toKeyedSeq().reverse().findKey(predicate, context);
	    },

	    first: function() {
	      return this.find(returnTrue);
	    },

	    flatMap: function(mapper, context) {
	      return reify(this, flatMapFactory(this, mapper, context));
	    },

	    flatten: function(depth) {
	      return reify(this, flattenFactory(this, depth, true));
	    },

	    fromEntrySeq: function() {
	      return new FromEntriesSequence(this);
	    },

	    get: function(searchKey, notSetValue) {
	      return this.find(function(_, key)  {return is(key, searchKey)}, undefined, notSetValue);
	    },

	    getIn: function(searchKeyPath, notSetValue) {
	      var nested = this;
	      // Note: in an ES6 environment, we would prefer:
	      // for (var key of searchKeyPath) {
	      var iter = forceIterator(searchKeyPath);
	      var step;
	      while (!(step = iter.next()).done) {
	        var key = step.value;
	        nested = nested && nested.get ? nested.get(key, NOT_SET) : NOT_SET;
	        if (nested === NOT_SET) {
	          return notSetValue;
	        }
	      }
	      return nested;
	    },

	    groupBy: function(grouper, context) {
	      return groupByFactory(this, grouper, context);
	    },

	    has: function(searchKey) {
	      return this.get(searchKey, NOT_SET) !== NOT_SET;
	    },

	    hasIn: function(searchKeyPath) {
	      return this.getIn(searchKeyPath, NOT_SET) !== NOT_SET;
	    },

	    isSubset: function(iter) {
	      iter = typeof iter.includes === 'function' ? iter : Iterable(iter);
	      return this.every(function(value ) {return iter.includes(value)});
	    },

	    isSuperset: function(iter) {
	      iter = typeof iter.isSubset === 'function' ? iter : Iterable(iter);
	      return iter.isSubset(this);
	    },

	    keyOf: function(searchValue) {
	      return this.findKey(function(value ) {return is(value, searchValue)});
	    },

	    keySeq: function() {
	      return this.toSeq().map(keyMapper).toIndexedSeq();
	    },

	    last: function() {
	      return this.toSeq().reverse().first();
	    },

	    lastKeyOf: function(searchValue) {
	      return this.toKeyedSeq().reverse().keyOf(searchValue);
	    },

	    max: function(comparator) {
	      return maxFactory(this, comparator);
	    },

	    maxBy: function(mapper, comparator) {
	      return maxFactory(this, comparator, mapper);
	    },

	    min: function(comparator) {
	      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator);
	    },

	    minBy: function(mapper, comparator) {
	      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator, mapper);
	    },

	    rest: function() {
	      return this.slice(1);
	    },

	    skip: function(amount) {
	      return this.slice(Math.max(0, amount));
	    },

	    skipLast: function(amount) {
	      return reify(this, this.toSeq().reverse().skip(amount).reverse());
	    },

	    skipWhile: function(predicate, context) {
	      return reify(this, skipWhileFactory(this, predicate, context, true));
	    },

	    skipUntil: function(predicate, context) {
	      return this.skipWhile(not(predicate), context);
	    },

	    sortBy: function(mapper, comparator) {
	      return reify(this, sortFactory(this, comparator, mapper));
	    },

	    take: function(amount) {
	      return this.slice(0, Math.max(0, amount));
	    },

	    takeLast: function(amount) {
	      return reify(this, this.toSeq().reverse().take(amount).reverse());
	    },

	    takeWhile: function(predicate, context) {
	      return reify(this, takeWhileFactory(this, predicate, context));
	    },

	    takeUntil: function(predicate, context) {
	      return this.takeWhile(not(predicate), context);
	    },

	    valueSeq: function() {
	      return this.toIndexedSeq();
	    },


	    // ### Hashable Object

	    hashCode: function() {
	      return this.__hash || (this.__hash = hashIterable(this));
	    }


	    // ### Internal

	    // abstract __iterate(fn, reverse)

	    // abstract __iterator(type, reverse)
	  });

	  // var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';
	  // var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';
	  // var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';
	  // var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';

	  var IterablePrototype = Iterable.prototype;
	  IterablePrototype[IS_ITERABLE_SENTINEL] = true;
	  IterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.values;
	  IterablePrototype.__toJS = IterablePrototype.toArray;
	  IterablePrototype.__toStringMapper = quoteString;
	  IterablePrototype.inspect =
	  IterablePrototype.toSource = function() { return this.toString(); };
	  IterablePrototype.chain = IterablePrototype.flatMap;
	  IterablePrototype.contains = IterablePrototype.includes;

	  mixin(KeyedIterable, {

	    // ### More sequential methods

	    flip: function() {
	      return reify(this, flipFactory(this));
	    },

	    mapEntries: function(mapper, context) {var this$0 = this;
	      var iterations = 0;
	      return reify(this,
	        this.toSeq().map(
	          function(v, k)  {return mapper.call(context, [k, v], iterations++, this$0)}
	        ).fromEntrySeq()
	      );
	    },

	    mapKeys: function(mapper, context) {var this$0 = this;
	      return reify(this,
	        this.toSeq().flip().map(
	          function(k, v)  {return mapper.call(context, k, v, this$0)}
	        ).flip()
	      );
	    }

	  });

	  var KeyedIterablePrototype = KeyedIterable.prototype;
	  KeyedIterablePrototype[IS_KEYED_SENTINEL] = true;
	  KeyedIterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.entries;
	  KeyedIterablePrototype.__toJS = IterablePrototype.toObject;
	  KeyedIterablePrototype.__toStringMapper = function(v, k)  {return JSON.stringify(k) + ': ' + quoteString(v)};



	  mixin(IndexedIterable, {

	    // ### Conversion to other types

	    toKeyedSeq: function() {
	      return new ToKeyedSequence(this, false);
	    },


	    // ### ES6 Collection methods (ES6 Array and Map)

	    filter: function(predicate, context) {
	      return reify(this, filterFactory(this, predicate, context, false));
	    },

	    findIndex: function(predicate, context) {
	      var entry = this.findEntry(predicate, context);
	      return entry ? entry[0] : -1;
	    },

	    indexOf: function(searchValue) {
	      var key = this.keyOf(searchValue);
	      return key === undefined ? -1 : key;
	    },

	    lastIndexOf: function(searchValue) {
	      var key = this.lastKeyOf(searchValue);
	      return key === undefined ? -1 : key;
	    },

	    reverse: function() {
	      return reify(this, reverseFactory(this, false));
	    },

	    slice: function(begin, end) {
	      return reify(this, sliceFactory(this, begin, end, false));
	    },

	    splice: function(index, removeNum /*, ...values*/) {
	      var numArgs = arguments.length;
	      removeNum = Math.max(removeNum | 0, 0);
	      if (numArgs === 0 || (numArgs === 2 && !removeNum)) {
	        return this;
	      }
	      // If index is negative, it should resolve relative to the size of the
	      // collection. However size may be expensive to compute if not cached, so
	      // only call count() if the number is in fact negative.
	      index = resolveBegin(index, index < 0 ? this.count() : this.size);
	      var spliced = this.slice(0, index);
	      return reify(
	        this,
	        numArgs === 1 ?
	          spliced :
	          spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))
	      );
	    },


	    // ### More collection methods

	    findLastIndex: function(predicate, context) {
	      var entry = this.findLastEntry(predicate, context);
	      return entry ? entry[0] : -1;
	    },

	    first: function() {
	      return this.get(0);
	    },

	    flatten: function(depth) {
	      return reify(this, flattenFactory(this, depth, false));
	    },

	    get: function(index, notSetValue) {
	      index = wrapIndex(this, index);
	      return (index < 0 || (this.size === Infinity ||
	          (this.size !== undefined && index > this.size))) ?
	        notSetValue :
	        this.find(function(_, key)  {return key === index}, undefined, notSetValue);
	    },

	    has: function(index) {
	      index = wrapIndex(this, index);
	      return index >= 0 && (this.size !== undefined ?
	        this.size === Infinity || index < this.size :
	        this.indexOf(index) !== -1
	      );
	    },

	    interpose: function(separator) {
	      return reify(this, interposeFactory(this, separator));
	    },

	    interleave: function(/*...iterables*/) {
	      var iterables = [this].concat(arrCopy(arguments));
	      var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, iterables);
	      var interleaved = zipped.flatten(true);
	      if (zipped.size) {
	        interleaved.size = zipped.size * iterables.length;
	      }
	      return reify(this, interleaved);
	    },

	    keySeq: function() {
	      return Range(0, this.size);
	    },

	    last: function() {
	      return this.get(-1);
	    },

	    skipWhile: function(predicate, context) {
	      return reify(this, skipWhileFactory(this, predicate, context, false));
	    },

	    zip: function(/*, ...iterables */) {
	      var iterables = [this].concat(arrCopy(arguments));
	      return reify(this, zipWithFactory(this, defaultZipper, iterables));
	    },

	    zipWith: function(zipper/*, ...iterables */) {
	      var iterables = arrCopy(arguments);
	      iterables[0] = this;
	      return reify(this, zipWithFactory(this, zipper, iterables));
	    }

	  });

	  IndexedIterable.prototype[IS_INDEXED_SENTINEL] = true;
	  IndexedIterable.prototype[IS_ORDERED_SENTINEL] = true;



	  mixin(SetIterable, {

	    // ### ES6 Collection methods (ES6 Array and Map)

	    get: function(value, notSetValue) {
	      return this.has(value) ? value : notSetValue;
	    },

	    includes: function(value) {
	      return this.has(value);
	    },


	    // ### More sequential methods

	    keySeq: function() {
	      return this.valueSeq();
	    }

	  });

	  SetIterable.prototype.has = IterablePrototype.includes;
	  SetIterable.prototype.contains = SetIterable.prototype.includes;


	  // Mixin subclasses

	  mixin(KeyedSeq, KeyedIterable.prototype);
	  mixin(IndexedSeq, IndexedIterable.prototype);
	  mixin(SetSeq, SetIterable.prototype);

	  mixin(KeyedCollection, KeyedIterable.prototype);
	  mixin(IndexedCollection, IndexedIterable.prototype);
	  mixin(SetCollection, SetIterable.prototype);


	  // #pragma Helper functions

	  function keyMapper(v, k) {
	    return k;
	  }

	  function entryMapper(v, k) {
	    return [k, v];
	  }

	  function not(predicate) {
	    return function() {
	      return !predicate.apply(this, arguments);
	    }
	  }

	  function neg(predicate) {
	    return function() {
	      return -predicate.apply(this, arguments);
	    }
	  }

	  function quoteString(value) {
	    return typeof value === 'string' ? JSON.stringify(value) : String(value);
	  }

	  function defaultZipper() {
	    return arrCopy(arguments);
	  }

	  function defaultNegComparator(a, b) {
	    return a < b ? 1 : a > b ? -1 : 0;
	  }

	  function hashIterable(iterable) {
	    if (iterable.size === Infinity) {
	      return 0;
	    }
	    var ordered = isOrdered(iterable);
	    var keyed = isKeyed(iterable);
	    var h = ordered ? 1 : 0;
	    var size = iterable.__iterate(
	      keyed ?
	        ordered ?
	          function(v, k)  { h = 31 * h + hashMerge(hash(v), hash(k)) | 0; } :
	          function(v, k)  { h = h + hashMerge(hash(v), hash(k)) | 0; } :
	        ordered ?
	          function(v ) { h = 31 * h + hash(v) | 0; } :
	          function(v ) { h = h + hash(v) | 0; }
	    );
	    return murmurHashOfSize(size, h);
	  }

	  function murmurHashOfSize(size, h) {
	    h = imul(h, 0xCC9E2D51);
	    h = imul(h << 15 | h >>> -15, 0x1B873593);
	    h = imul(h << 13 | h >>> -13, 5);
	    h = (h + 0xE6546B64 | 0) ^ size;
	    h = imul(h ^ h >>> 16, 0x85EBCA6B);
	    h = imul(h ^ h >>> 13, 0xC2B2AE35);
	    h = smi(h ^ h >>> 16);
	    return h;
	  }

	  function hashMerge(a, b) {
	    return a ^ b + 0x9E3779B9 + (a << 6) + (a >> 2) | 0; // int
	  }

	  var Immutable = {

	    Iterable: Iterable,

	    Seq: Seq,
	    Collection: Collection,
	    Map: Map,
	    OrderedMap: OrderedMap,
	    List: List,
	    Stack: Stack,
	    Set: Set,
	    OrderedSet: OrderedSet,

	    Record: Record,
	    Range: Range,
	    Repeat: Repeat,

	    is: is,
	    fromJS: fromJS

	  };

	  return Immutable;

	}));

/***/ },
/* 725 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.combineReducers = undefined;

	var _combineReducers2 = __webpack_require__(726);

	var _combineReducers3 = _interopRequireDefault(_combineReducers2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports.combineReducers = _combineReducers3["default"];
	//# sourceMappingURL=index.js.map

/***/ },
/* 726 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _immutable = __webpack_require__(724);

	var _immutable2 = _interopRequireDefault(_immutable);

	var _utilities = __webpack_require__(727);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports["default"] = function (reducers) {
	  var getDefaultState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _immutable2["default"].Map;

	  var reducerKeys = Object.keys(reducers);

	  // eslint-disable-next-line space-infix-ops
	  return function () {
	    var inputState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getDefaultState();
	    var action = arguments[1];

	    // eslint-disable-next-line no-process-env
	    if (process.env.NODE_ENV !== 'production') {
	      var warningMessage = (0, _utilities.getUnexpectedInvocationParameterMessage)(inputState, reducers, action);

	      if (warningMessage) {
	        // eslint-disable-next-line no-console
	        console.error(warningMessage);
	      }
	    }

	    return inputState.withMutations(function (temporaryState) {
	      reducerKeys.forEach(function (reducerName) {
	        var reducer = reducers[reducerName];
	        var currentDomainState = temporaryState.get(reducerName);
	        var nextDomainState = reducer(currentDomainState, action);

	        (0, _utilities.validateNextState)(nextDomainState, reducerName, action);

	        temporaryState.set(reducerName, nextDomainState);
	      });
	    });
	  };
	};

	module.exports = exports['default'];
	//# sourceMappingURL=combineReducers.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 727 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.validateNextState = exports.getUnexpectedInvocationParameterMessage = exports.getStateName = undefined;

	var _getStateName2 = __webpack_require__(728);

	var _getStateName3 = _interopRequireDefault(_getStateName2);

	var _getUnexpectedInvocationParameterMessage2 = __webpack_require__(729);

	var _getUnexpectedInvocationParameterMessage3 = _interopRequireDefault(_getUnexpectedInvocationParameterMessage2);

	var _validateNextState2 = __webpack_require__(730);

	var _validateNextState3 = _interopRequireDefault(_validateNextState2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports.getStateName = _getStateName3["default"];
	exports.getUnexpectedInvocationParameterMessage = _getUnexpectedInvocationParameterMessage3["default"];
	exports.validateNextState = _validateNextState3["default"];
	//# sourceMappingURL=index.js.map

/***/ },
/* 728 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports["default"] = function (action) {
	  return action && action.type === '@@redux/INIT' ? 'initialState argument passed to createStore' : 'previous state received by the reducer';
	};

	module.exports = exports['default'];
	//# sourceMappingURL=getStateName.js.map

/***/ },
/* 729 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _immutable = __webpack_require__(724);

	var _immutable2 = _interopRequireDefault(_immutable);

	var _getStateName = __webpack_require__(728);

	var _getStateName2 = _interopRequireDefault(_getStateName);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports["default"] = function (state, reducers, action) {
	  var reducerNames = Object.keys(reducers);

	  if (!reducerNames.length) {
	    return 'Store does not have a valid reducer. Make sure the argument passed to combineReducers is an object whose values are reducers.';
	  }

	  var stateName = (0, _getStateName2["default"])(action);

	  if (!_immutable2["default"].Iterable.isIterable(state)) {
	    return 'The ' + stateName + ' is of unexpected type. Expected argument to be an instance of Immutable.Iterable with the following properties: "' + reducerNames.join('", "') + '".';
	  }

	  var unexpectedStatePropertyNames = state.keySeq().toArray().filter(function (name) {
	    return !reducers.hasOwnProperty(name);
	  });

	  if (unexpectedStatePropertyNames.length > 0) {
	    return 'Unexpected ' + (unexpectedStatePropertyNames.length === 1 ? 'property' : 'properties') + ' "' + unexpectedStatePropertyNames.join('", "') + '" found in ' + stateName + '. Expected to find one of the known reducer property names instead: "' + reducerNames.join('", "') + '". Unexpected properties will be ignored.';
	  }

	  return null;
	};

	module.exports = exports['default'];
	//# sourceMappingURL=getUnexpectedInvocationParameterMessage.js.map

/***/ },
/* 730 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports["default"] = function (nextState, reducerName, action) {
	  // eslint-disable-next-line no-undefined
	  if (nextState === undefined) {
	    throw new Error('Reducer "' + reducerName + '" returned undefined when handling "' + action.type + '" action. To ignore an action, you must explicitly return the previous state.');
	  }
	};

	module.exports = exports['default'];
	//# sourceMappingURL=validateNextState.js.map

/***/ },
/* 731 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	function createThunkMiddleware(extraArgument) {
	  return function (_ref) {
	    var dispatch = _ref.dispatch,
	        getState = _ref.getState;
	    return function (next) {
	      return function (action) {
	        if (typeof action === 'function') {
	          return action(dispatch, getState, extraArgument);
	        }

	        return next(action);
	      };
	    };
	  };
	}

	var thunk = createThunkMiddleware();
	thunk.withExtraArgument = createThunkMiddleware;

	exports['default'] = thunk;

/***/ },
/* 732 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.logger = exports.defaults = undefined;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _core = __webpack_require__(733);

	var _helpers = __webpack_require__(734);

	var _defaults = __webpack_require__(737);

	var _defaults2 = _interopRequireDefault(_defaults);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	/**
	 * Creates logger with following options
	 *
	 * @namespace
	 * @param {object} options - options for logger
	 * @param {string | function | object} options.level - console[level]
	 * @param {boolean} options.duration - print duration of each action?
	 * @param {boolean} options.timestamp - print timestamp with each action?
	 * @param {object} options.colors - custom colors
	 * @param {object} options.logger - implementation of the `console` API
	 * @param {boolean} options.logErrors - should errors in action execution be caught, logged, and re-thrown?
	 * @param {boolean} options.collapsed - is group collapsed?
	 * @param {boolean} options.predicate - condition which resolves logger behavior
	 * @param {function} options.stateTransformer - transform state before print
	 * @param {function} options.actionTransformer - transform action before print
	 * @param {function} options.errorTransformer - transform error before print
	 *
	 * @returns {function} logger middleware
	 */
	function createLogger() {
	  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	  var loggerOptions = _extends({}, _defaults2["default"], options);

	  var logger = loggerOptions.logger,
	      transformer = loggerOptions.transformer,
	      stateTransformer = loggerOptions.stateTransformer,
	      errorTransformer = loggerOptions.errorTransformer,
	      predicate = loggerOptions.predicate,
	      logErrors = loggerOptions.logErrors,
	      diffPredicate = loggerOptions.diffPredicate;

	  // Return if 'console' object is not defined

	  if (typeof logger === 'undefined') {
	    return function () {
	      return function (next) {
	        return function (action) {
	          return next(action);
	        };
	      };
	    };
	  }

	  if (transformer) {
	    console.error('Option \'transformer\' is deprecated, use \'stateTransformer\' instead!'); // eslint-disable-line no-console
	  }

	  // Detect if 'createLogger' was passed directly to 'applyMiddleware'.
	  if (options.getState && options.dispatch) {
	    // eslint-disable-next-line no-console
	    console.error('[redux-logger] redux-logger not installed. Make sure to pass logger instance as middleware:\n\n// Logger with default options\nimport { logger } from \'redux-logger\'\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n\n\n// Or you can create your own logger with custom options http://bit.ly/redux-logger-options\nimport createLogger from \'redux-logger\'\n\nconst logger = createLogger({\n  // ...options\n});\n\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n');

	    return function () {
	      return function (next) {
	        return function (action) {
	          return next(action);
	        };
	      };
	    };
	  }

	  var logBuffer = [];

	  return function (_ref) {
	    var getState = _ref.getState;
	    return function (next) {
	      return function (action) {
	        // Exit early if predicate function returns 'false'
	        if (typeof predicate === 'function' && !predicate(getState, action)) {
	          return next(action);
	        }

	        var logEntry = {};
	        logBuffer.push(logEntry);

	        logEntry.started = _helpers.timer.now();
	        logEntry.startedTime = new Date();
	        logEntry.prevState = stateTransformer(getState());
	        logEntry.action = action;

	        var returnedValue = void 0;
	        if (logErrors) {
	          try {
	            returnedValue = next(action);
	          } catch (e) {
	            logEntry.error = errorTransformer(e);
	          }
	        } else {
	          returnedValue = next(action);
	        }

	        logEntry.took = _helpers.timer.now() - logEntry.started;
	        logEntry.nextState = stateTransformer(getState());

	        var diff = loggerOptions.diff && typeof diffPredicate === 'function' ? diffPredicate(getState, action) : loggerOptions.diff;

	        (0, _core.printBuffer)(logBuffer, _extends({}, loggerOptions, { diff: diff }));
	        logBuffer.length = 0;

	        if (logEntry.error) throw logEntry.error;
	        return returnedValue;
	      };
	    };
	  };
	}

	var defaultLogger = createLogger();

	exports.defaults = _defaults2["default"];
	exports.logger = defaultLogger;
	exports["default"] = createLogger;
	module.exports = exports['default'];


/***/ },
/* 733 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	exports.printBuffer = printBuffer;

	var _helpers = __webpack_require__(734);

	var _diff = __webpack_require__(735);

	var _diff2 = _interopRequireDefault(_diff);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	/**
	 * Get log level string based on supplied params
	 *
	 * @param {string | function | object} level - console[level]
	 * @param {object} action - selected action
	 * @param {array} payload - selected payload
	 * @param {string} type - log entry type
	 *
	 * @returns {string} level
	 */
	function getLogLevel(level, action, payload, type) {
	  switch (typeof level === 'undefined' ? 'undefined' : _typeof(level)) {
	    case 'object':
	      return typeof level[type] === 'function' ? level[type].apply(level, _toConsumableArray(payload)) : level[type];
	    case 'function':
	      return level(action);
	    default:
	      return level;
	  }
	}

	function defaultTitleFormatter(options) {
	  var timestamp = options.timestamp,
	      duration = options.duration;


	  return function (action, time, took) {
	    var parts = ['action'];

	    parts.push('%c' + String(action.type));
	    if (timestamp) parts.push('%c@ ' + time);
	    if (duration) parts.push('%c(in ' + took.toFixed(2) + ' ms)');

	    return parts.join(' ');
	  };
	}

	function printBuffer(buffer, options) {
	  var logger = options.logger,
	      actionTransformer = options.actionTransformer,
	      _options$titleFormatt = options.titleFormatter,
	      titleFormatter = _options$titleFormatt === undefined ? defaultTitleFormatter(options) : _options$titleFormatt,
	      collapsed = options.collapsed,
	      colors = options.colors,
	      level = options.level,
	      diff = options.diff;


	  buffer.forEach(function (logEntry, key) {
	    var started = logEntry.started,
	        startedTime = logEntry.startedTime,
	        action = logEntry.action,
	        prevState = logEntry.prevState,
	        error = logEntry.error;
	    var took = logEntry.took,
	        nextState = logEntry.nextState;

	    var nextEntry = buffer[key + 1];

	    if (nextEntry) {
	      nextState = nextEntry.prevState;
	      took = nextEntry.started - started;
	    }

	    // Message
	    var formattedAction = actionTransformer(action);
	    var isCollapsed = typeof collapsed === 'function' ? collapsed(function () {
	      return nextState;
	    }, action, logEntry) : collapsed;

	    var formattedTime = (0, _helpers.formatTime)(startedTime);
	    var titleCSS = colors.title ? 'color: ' + colors.title(formattedAction) + ';' : '';
	    var headerCSS = ['color: gray; font-weight: lighter;'];
	    headerCSS.push(titleCSS);
	    if (options.timestamp) headerCSS.push('color: gray; font-weight: lighter;');
	    if (options.duration) headerCSS.push('color: gray; font-weight: lighter;');
	    var title = titleFormatter(formattedAction, formattedTime, took);

	    // Render
	    try {
	      if (isCollapsed) {
	        if (colors.title) logger.groupCollapsed.apply(logger, ['%c ' + title].concat(headerCSS));else logger.groupCollapsed(title);
	      } else {
	        if (colors.title) logger.group.apply(logger, ['%c ' + title].concat(headerCSS));else logger.group(title);
	      }
	    } catch (e) {
	      logger.log(title);
	    }

	    var prevStateLevel = getLogLevel(level, formattedAction, [prevState], 'prevState');
	    var actionLevel = getLogLevel(level, formattedAction, [formattedAction], 'action');
	    var errorLevel = getLogLevel(level, formattedAction, [error, prevState], 'error');
	    var nextStateLevel = getLogLevel(level, formattedAction, [nextState], 'nextState');

	    if (prevStateLevel) {
	      if (colors.prevState) logger[prevStateLevel]('%c prev state', 'color: ' + colors.prevState(prevState) + '; font-weight: bold', prevState);else logger[prevStateLevel]('prev state', prevState);
	    }

	    if (actionLevel) {
	      if (colors.action) logger[actionLevel]('%c action    ', 'color: ' + colors.action(formattedAction) + '; font-weight: bold', formattedAction);else logger[actionLevel]('action    ', formattedAction);
	    }

	    if (error && errorLevel) {
	      if (colors.error) logger[errorLevel]('%c error     ', 'color: ' + colors.error(error, prevState) + '; font-weight: bold;', error);else logger[errorLevel]('error     ', error);
	    }

	    if (nextStateLevel) {
	      if (colors.nextState) logger[nextStateLevel]('%c next state', 'color: ' + colors.nextState(nextState) + '; font-weight: bold', nextState);else logger[nextStateLevel]('next state', nextState);
	    }

	    if (diff) {
	      (0, _diff2["default"])(prevState, nextState, logger, isCollapsed);
	    }

	    try {
	      logger.groupEnd();
	    } catch (e) {
	      logger.log('\u2014\u2014 log end \u2014\u2014');
	    }
	  });
	}

/***/ },
/* 734 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var repeat = exports.repeat = function repeat(str, times) {
	  return new Array(times + 1).join(str);
	};

	var pad = exports.pad = function pad(num, maxLength) {
	  return repeat("0", maxLength - num.toString().length) + num;
	};

	var formatTime = exports.formatTime = function formatTime(time) {
	  return pad(time.getHours(), 2) + ":" + pad(time.getMinutes(), 2) + ":" + pad(time.getSeconds(), 2) + "." + pad(time.getMilliseconds(), 3);
	};

	// Use performance API if it's available in order to get better precision
	var timer = exports.timer = typeof performance !== "undefined" && performance !== null && typeof performance.now === "function" ? performance : Date;

/***/ },
/* 735 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = diffLogger;

	var _deepDiff = __webpack_require__(736);

	var _deepDiff2 = _interopRequireDefault(_deepDiff);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	// https://github.com/flitbit/diff#differences
	var dictionary = {
	  'E': {
	    color: '#2196F3',
	    text: 'CHANGED:'
	  },
	  'N': {
	    color: '#4CAF50',
	    text: 'ADDED:'
	  },
	  'D': {
	    color: '#F44336',
	    text: 'DELETED:'
	  },
	  'A': {
	    color: '#2196F3',
	    text: 'ARRAY:'
	  }
	};

	function style(kind) {
	  return 'color: ' + dictionary[kind].color + '; font-weight: bold';
	}

	function render(diff) {
	  var kind = diff.kind,
	      path = diff.path,
	      lhs = diff.lhs,
	      rhs = diff.rhs,
	      index = diff.index,
	      item = diff.item;


	  switch (kind) {
	    case 'E':
	      return [path.join('.'), lhs, '\u2192', rhs];
	    case 'N':
	      return [path.join('.'), rhs];
	    case 'D':
	      return [path.join('.')];
	    case 'A':
	      return [path.join('.') + '[' + index + ']', item];
	    default:
	      return [];
	  }
	}

	function diffLogger(prevState, newState, logger, isCollapsed) {
	  var diff = (0, _deepDiff2["default"])(prevState, newState);

	  try {
	    if (isCollapsed) {
	      logger.groupCollapsed('diff');
	    } else {
	      logger.group('diff');
	    }
	  } catch (e) {
	    logger.log('diff');
	  }

	  if (diff) {
	    diff.forEach(function (elem) {
	      var kind = elem.kind;

	      var output = render(elem);

	      logger.log.apply(logger, ['%c ' + dictionary[kind].text, style(kind)].concat(_toConsumableArray(output)));
	    });
	  } else {
	    logger.log('\u2014\u2014 no diff \u2014\u2014');
	  }

	  try {
	    logger.groupEnd();
	  } catch (e) {
	    logger.log('\u2014\u2014 diff end \u2014\u2014 ');
	  }
	}
	module.exports = exports['default'];

/***/ },
/* 736 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(global) {/*!
	 * deep-diff.
	 * Licensed under the MIT License.
	 */
	;(function(root, factory) {
	  'use strict';
	  if (true) {
	    // AMD. Register as an anonymous module.
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return factory();
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (typeof exports === 'object') {
	    // Node. Does not work with strict CommonJS, but
	    // only CommonJS-like environments that support module.exports,
	    // like Node.
	    module.exports = factory();
	  } else {
	    // Browser globals (root is window)
	    root.DeepDiff = factory();
	  }
	}(this, function(undefined) {
	  'use strict';

	  var $scope, conflict, conflictResolution = [];
	  if (typeof global === 'object' && global) {
	    $scope = global;
	  } else if (typeof window !== 'undefined') {
	    $scope = window;
	  } else {
	    $scope = {};
	  }
	  conflict = $scope.DeepDiff;
	  if (conflict) {
	    conflictResolution.push(
	      function() {
	        if ('undefined' !== typeof conflict && $scope.DeepDiff === accumulateDiff) {
	          $scope.DeepDiff = conflict;
	          conflict = undefined;
	        }
	      });
	  }

	  // nodejs compatible on server side and in the browser.
	  function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor;
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  }

	  function Diff(kind, path) {
	    Object.defineProperty(this, 'kind', {
	      value: kind,
	      enumerable: true
	    });
	    if (path && path.length) {
	      Object.defineProperty(this, 'path', {
	        value: path,
	        enumerable: true
	      });
	    }
	  }

	  function DiffEdit(path, origin, value) {
	    DiffEdit.super_.call(this, 'E', path);
	    Object.defineProperty(this, 'lhs', {
	      value: origin,
	      enumerable: true
	    });
	    Object.defineProperty(this, 'rhs', {
	      value: value,
	      enumerable: true
	    });
	  }
	  inherits(DiffEdit, Diff);

	  function DiffNew(path, value) {
	    DiffNew.super_.call(this, 'N', path);
	    Object.defineProperty(this, 'rhs', {
	      value: value,
	      enumerable: true
	    });
	  }
	  inherits(DiffNew, Diff);

	  function DiffDeleted(path, value) {
	    DiffDeleted.super_.call(this, 'D', path);
	    Object.defineProperty(this, 'lhs', {
	      value: value,
	      enumerable: true
	    });
	  }
	  inherits(DiffDeleted, Diff);

	  function DiffArray(path, index, item) {
	    DiffArray.super_.call(this, 'A', path);
	    Object.defineProperty(this, 'index', {
	      value: index,
	      enumerable: true
	    });
	    Object.defineProperty(this, 'item', {
	      value: item,
	      enumerable: true
	    });
	  }
	  inherits(DiffArray, Diff);

	  function arrayRemove(arr, from, to) {
	    var rest = arr.slice((to || from) + 1 || arr.length);
	    arr.length = from < 0 ? arr.length + from : from;
	    arr.push.apply(arr, rest);
	    return arr;
	  }

	  function realTypeOf(subject) {
	    var type = typeof subject;
	    if (type !== 'object') {
	      return type;
	    }

	    if (subject === Math) {
	      return 'math';
	    } else if (subject === null) {
	      return 'null';
	    } else if (Array.isArray(subject)) {
	      return 'array';
	    } else if (Object.prototype.toString.call(subject) === '[object Date]') {
	      return 'date';
	    } else if (typeof subject.toString !== 'undefined' && /^\/.*\//.test(subject.toString())) {
	      return 'regexp';
	    }
	    return 'object';
	  }

	  function deepDiff(lhs, rhs, changes, prefilter, path, key, stack) {
	    path = path || [];
	    var currentPath = path.slice(0);
	    if (typeof key !== 'undefined') {
	      if (prefilter) {
	        if (typeof(prefilter) === 'function' && prefilter(currentPath, key)) { return; }
	        else if (typeof(prefilter) === 'object') {
	          if (prefilter.prefilter && prefilter.prefilter(currentPath, key)) { return; }
	          if (prefilter.normalize) {
	            var alt = prefilter.normalize(currentPath, key, lhs, rhs);
	            if (alt) {
	              lhs = alt[0];
	              rhs = alt[1];
	            }
	          }
	        }
	      }
	      currentPath.push(key);
	    }

	    // Use string comparison for regexes
	    if (realTypeOf(lhs) === 'regexp' && realTypeOf(rhs) === 'regexp') {
	      lhs = lhs.toString();
	      rhs = rhs.toString();
	    }

	    var ltype = typeof lhs;
	    var rtype = typeof rhs;
	    if (ltype === 'undefined') {
	      if (rtype !== 'undefined') {
	        changes(new DiffNew(currentPath, rhs));
	      }
	    } else if (rtype === 'undefined') {
	      changes(new DiffDeleted(currentPath, lhs));
	    } else if (realTypeOf(lhs) !== realTypeOf(rhs)) {
	      changes(new DiffEdit(currentPath, lhs, rhs));
	    } else if (Object.prototype.toString.call(lhs) === '[object Date]' && Object.prototype.toString.call(rhs) === '[object Date]' && ((lhs - rhs) !== 0)) {
	      changes(new DiffEdit(currentPath, lhs, rhs));
	    } else if (ltype === 'object' && lhs !== null && rhs !== null) {
	      stack = stack || [];
	      if (stack.indexOf(lhs) < 0) {
	        stack.push(lhs);
	        if (Array.isArray(lhs)) {
	          var i, len = lhs.length;
	          for (i = 0; i < lhs.length; i++) {
	            if (i >= rhs.length) {
	              changes(new DiffArray(currentPath, i, new DiffDeleted(undefined, lhs[i])));
	            } else {
	              deepDiff(lhs[i], rhs[i], changes, prefilter, currentPath, i, stack);
	            }
	          }
	          while (i < rhs.length) {
	            changes(new DiffArray(currentPath, i, new DiffNew(undefined, rhs[i++])));
	          }
	        } else {
	          var akeys = Object.keys(lhs);
	          var pkeys = Object.keys(rhs);
	          akeys.forEach(function(k, i) {
	            var other = pkeys.indexOf(k);
	            if (other >= 0) {
	              deepDiff(lhs[k], rhs[k], changes, prefilter, currentPath, k, stack);
	              pkeys = arrayRemove(pkeys, other);
	            } else {
	              deepDiff(lhs[k], undefined, changes, prefilter, currentPath, k, stack);
	            }
	          });
	          pkeys.forEach(function(k) {
	            deepDiff(undefined, rhs[k], changes, prefilter, currentPath, k, stack);
	          });
	        }
	        stack.length = stack.length - 1;
	      }
	    } else if (lhs !== rhs) {
	      if (!(ltype === 'number' && isNaN(lhs) && isNaN(rhs))) {
	        changes(new DiffEdit(currentPath, lhs, rhs));
	      }
	    }
	  }

	  function accumulateDiff(lhs, rhs, prefilter, accum) {
	    accum = accum || [];
	    deepDiff(lhs, rhs,
	      function(diff) {
	        if (diff) {
	          accum.push(diff);
	        }
	      },
	      prefilter);
	    return (accum.length) ? accum : undefined;
	  }

	  function applyArrayChange(arr, index, change) {
	    if (change.path && change.path.length) {
	      var it = arr[index],
	          i, u = change.path.length - 1;
	      for (i = 0; i < u; i++) {
	        it = it[change.path[i]];
	      }
	      switch (change.kind) {
	        case 'A':
	          applyArrayChange(it[change.path[i]], change.index, change.item);
	          break;
	        case 'D':
	          delete it[change.path[i]];
	          break;
	        case 'E':
	        case 'N':
	          it[change.path[i]] = change.rhs;
	          break;
	      }
	    } else {
	      switch (change.kind) {
	        case 'A':
	          applyArrayChange(arr[index], change.index, change.item);
	          break;
	        case 'D':
	          arr = arrayRemove(arr, index);
	          break;
	        case 'E':
	        case 'N':
	          arr[index] = change.rhs;
	          break;
	      }
	    }
	    return arr;
	  }

	  function applyChange(target, source, change) {
	    if (target && source && change && change.kind) {
	      var it = target,
	          i = -1,
	          last = change.path ? change.path.length - 1 : 0;
	      while (++i < last) {
	        if (typeof it[change.path[i]] === 'undefined') {
	          it[change.path[i]] = (typeof change.path[i] === 'number') ? [] : {};
	        }
	        it = it[change.path[i]];
	      }
	      switch (change.kind) {
	        case 'A':
	          applyArrayChange(change.path ? it[change.path[i]] : it, change.index, change.item);
	          break;
	        case 'D':
	          delete it[change.path[i]];
	          break;
	        case 'E':
	        case 'N':
	          it[change.path[i]] = change.rhs;
	          break;
	      }
	    }
	  }

	  function revertArrayChange(arr, index, change) {
	    if (change.path && change.path.length) {
	      // the structure of the object at the index has changed...
	      var it = arr[index],
	          i, u = change.path.length - 1;
	      for (i = 0; i < u; i++) {
	        it = it[change.path[i]];
	      }
	      switch (change.kind) {
	        case 'A':
	          revertArrayChange(it[change.path[i]], change.index, change.item);
	          break;
	        case 'D':
	          it[change.path[i]] = change.lhs;
	          break;
	        case 'E':
	          it[change.path[i]] = change.lhs;
	          break;
	        case 'N':
	          delete it[change.path[i]];
	          break;
	      }
	    } else {
	      // the array item is different...
	      switch (change.kind) {
	        case 'A':
	          revertArrayChange(arr[index], change.index, change.item);
	          break;
	        case 'D':
	          arr[index] = change.lhs;
	          break;
	        case 'E':
	          arr[index] = change.lhs;
	          break;
	        case 'N':
	          arr = arrayRemove(arr, index);
	          break;
	      }
	    }
	    return arr;
	  }

	  function revertChange(target, source, change) {
	    if (target && source && change && change.kind) {
	      var it = target,
	          i, u;
	      u = change.path.length - 1;
	      for (i = 0; i < u; i++) {
	        if (typeof it[change.path[i]] === 'undefined') {
	          it[change.path[i]] = {};
	        }
	        it = it[change.path[i]];
	      }
	      switch (change.kind) {
	        case 'A':
	          // Array was modified...
	          // it will be an array...
	          revertArrayChange(it[change.path[i]], change.index, change.item);
	          break;
	        case 'D':
	          // Item was deleted...
	          it[change.path[i]] = change.lhs;
	          break;
	        case 'E':
	          // Item was edited...
	          it[change.path[i]] = change.lhs;
	          break;
	        case 'N':
	          // Item is new...
	          delete it[change.path[i]];
	          break;
	      }
	    }
	  }

	  function applyDiff(target, source, filter) {
	    if (target && source) {
	      var onChange = function(change) {
	        if (!filter || filter(target, source, change)) {
	          applyChange(target, source, change);
	        }
	      };
	      deepDiff(target, source, onChange);
	    }
	  }

	  Object.defineProperties(accumulateDiff, {

	    diff: {
	      value: accumulateDiff,
	      enumerable: true
	    },
	    observableDiff: {
	      value: deepDiff,
	      enumerable: true
	    },
	    applyDiff: {
	      value: applyDiff,
	      enumerable: true
	    },
	    applyChange: {
	      value: applyChange,
	      enumerable: true
	    },
	    revertChange: {
	      value: revertChange,
	      enumerable: true
	    },
	    isConflict: {
	      value: function() {
	        return 'undefined' !== typeof conflict;
	      },
	      enumerable: true
	    },
	    noConflict: {
	      value: function() {
	        if (conflictResolution) {
	          conflictResolution.forEach(function(it) {
	            it();
	          });
	          conflictResolution = null;
	        }
	        return accumulateDiff;
	      },
	      enumerable: true
	    }
	  });

	  return accumulateDiff;
	}));

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 737 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = {
	  level: "log",
	  logger: console,
	  logErrors: true,
	  collapsed: undefined,
	  predicate: undefined,
	  duration: false,
	  timestamp: true,
	  stateTransformer: function stateTransformer(state) {
	    return state;
	  },
	  actionTransformer: function actionTransformer(action) {
	    return action;
	  },
	  errorTransformer: function errorTransformer(error) {
	    return error;
	  },
	  colors: {
	    title: function title() {
	      return "inherit";
	    },
	    prevState: function prevState() {
	      return "#9E9E9E";
	    },
	    action: function action() {
	      return "#03A9F4";
	    },
	    nextState: function nextState() {
	      return "#4CAF50";
	    },
	    error: function error() {
	      return "#F20404";
	    }
	  },
	  diff: false,
	  diffPredicate: undefined,

	  // Deprecated options
	  transformer: undefined
	};
	module.exports = exports["default"];

/***/ }
/******/ ]);